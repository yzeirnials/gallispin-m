
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55916252e218 prev 0x5591625259b8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55916252e310 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55916252e3a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55916252e418 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55916252e4d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55916252e5a0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55916252e718 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55916252e650 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55916252e7c0 <col:24>
| `-OptimizeNoneAttr 0x55916252e818 <col:34>
|-CXXMethodDecl 0x55916252e860 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55916252eb18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55916252e910 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55916252e988 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55916252ea08 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55916252ebd0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55916252ec08 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55916252ec70 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55916252ecf8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55916252f018 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55916252edb0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55916252ee28 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55916252eea0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55916252ef20 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55916252f130 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x559162536aa8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559162536aa8
| `-ParmVarDecl 0x559162536bb8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x559162536c58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559162536c58
| `-ParmVarDecl 0x559162536d68 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5591625f2e70 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559162521230 prev 0x559162520fb0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559162521328 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5591625213b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x559162521418 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x559162521508 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x559162521608 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5591625217d8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x559162521688 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x559162521700 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x559162521968 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5591625218a0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x559162521a10 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x559162521b48 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x559162521a80 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x559162521ce8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x559162521c28 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x559162521e88 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x559162521dc8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x559162521f30 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x559162522030 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x559162522110 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162522010 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x559162521ff0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5591625220c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x559162522128 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591625220a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x559162522080 <col:44> 'int' 2
|-CXXMethodDecl 0x559162522270 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x559162522158 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5591625221d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5591625223c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x559162522338 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x559162522608 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x559162522488 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x559162522500 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5591625226b8 <col:20>
| `-OptimizeNoneAttr 0x559162522710 <col:30>
|-CXXMethodDecl 0x559162522818 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x559162522750 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5591625228c0 <col:20>
| `-OptimizeNoneAttr 0x559162522918 <col:30>
|-CXXMethodDecl 0x559162522968 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x559162522a30 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x559162522b48 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x559162522bd0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x559162522c58 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x559162522ce0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x559162522d68 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x559162522df8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x559162522eb8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x559162522f40 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x559162522fc8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x559162523050 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5591625230d8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x559162523160 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5591625231f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5591625232b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x559162523340 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x559162523490 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5591625233f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x559162523620 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x559162523550 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5591625238d0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5591625236d8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x559162523758 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5591625237d8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x559162523988 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x559162523a90 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559162523d20 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162523a70 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x559162523a50 <col:33> 'int' 0
| |-EnumConstantDecl 0x559162523b20 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559162523d38 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162523b00 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x559162523ae0 <col:32> 'int' 20
| |-EnumConstantDecl 0x559162523bb0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559162523d50 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162523b90 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x559162523b70 <col:38> 'int' 90
| |-EnumConstantDecl 0x559162523c40 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559162523d68 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162523c20 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x559162523c00 <col:35> 'int' 100
| `-EnumConstantDecl 0x559162523cd0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x559162523d80 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559162523cb0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x559162523c90 <col:32> 'int' 2000
|-CXXMethodDecl 0x559162523dc0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x559162524200 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559162524070 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5591625240e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5591625242d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x559162524450 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x559162524380 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559162524658 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559162524508 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x559162524580 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559162524758 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5591625247f8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5591625248c0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x559162524950 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x559162524b80 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162524930 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x559162524910 <col:36> 'int' EnumConstant 0x5591625248c0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5591625249a0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5591625249f0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559162524a40 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559162524a90 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559162524ae0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x559162524b30 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x559162524c68 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x559162524ba8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x559162524d30 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x559162524df0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x559162524eb0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x559162524f70 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x559162525088 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x559162525150 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5591625252d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x559162525200 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5591625253f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5591625255f8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5591625254a8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x559162525528 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x559162532f48 <col:54, line:127:5>
|   |-ParenExpr 0x559162532df8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x559162532dc8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x559162532ab8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559162532a90 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x559162532a78 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x559162532a60 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x559162532a30 <col:31> 'Router *' lvalue ->_router 0x559162530910
|   |   |         `-CXXThisExpr 0x559162532a20 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559162532b18 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162532af8 <col:48> 'int' 0
|   |   `-CallExpr 0x559162532d28 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x559162532d10 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162532cf0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162532d68 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162532b88 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x559162532d80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162532ba8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x559162532d98 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162532be0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x559162532db0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162532cd8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162532cc0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162532c78 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x559162532e90 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x559162532e28 <col:9> 'Router *' lvalue ->_router 0x559162530910
|   | | `-CXXThisExpr 0x559162532e18 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x559162532e78 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559162532e58 <col:19> 'Router *' lvalue ParmVar 0x5591625254a8 'r' 'Router *'
|   `-BinaryOperator 0x559162532f28 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x559162532ec0 <col:9> 'int' lvalue ->_eindex 0x559162530978
|     | `-CXXThisExpr 0x559162532eb0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x559162532f10 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559162532ef0 <col:19> 'int' lvalue ParmVar 0x559162525528 'eindex' 'int'
|-CXXMethodDecl 0x559162525780 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5591625256b8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x559162525850 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x559162525918 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5591625259b8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x559162525c08 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x559162525a80 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x559162525b00 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x559162525cb8 <col:20>
| `-OptimizeNoneAttr 0x559162525d10 <col:30>
|-CXXMethodDecl 0x559162525e18 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559162525d50 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x559162525ec0 <col:20>
| `-OptimizeNoneAttr 0x559162525f18 <col:30>
|-CXXMethodDecl 0x559162525fe8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559162525f58 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x559162526090 <col:20>
| `-OptimizeNoneAttr 0x5591625260e8 <col:30>
|-CXXMethodDecl 0x559162526278 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x559162526120 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5591625261a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x559162526408 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559162526340 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559162526558 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5591625264c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5591625266a8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559162526618 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5591625267f8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559162526768 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559162526ab8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5591625268b0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x559162526930 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5591625269d8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x559162526b90 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x559162526c50 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x559162526f20 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559162526dd0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x559162526e48 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x559162527048 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x559162527220 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x559162527100 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x559162527180 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x559162527408 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5591625272e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x559162527368 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x559162527778 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5591625274c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559162527540 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5591625275c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559162532530 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559162532510 <col:106> 'int' 0
| `-ParmVarDecl 0x559162527638 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559162532568 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559162532548 <col:126> 'int' 0
|-CXXMethodDecl 0x559162527b18 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559162527848 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5591625278e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559162527960 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5591625279d8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5591625325a0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559162532580 <col:114> 'int' 0
|-CXXMethodDecl 0x559162527ea8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559162527bf0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x559162527c68 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559162527ce8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5591625325b8 <col:96> 'int' 0
| `-ParmVarDecl 0x559162527d60 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5591625325f8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5591625325d8 <col:116> 'int' 0
|-CXXMethodDecl 0x559162528228 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559162527f78 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559162527ff0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559162528070 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559162532630 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559162532610 <col:109> 'int' 0
| `-ParmVarDecl 0x5591625280e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559162532668 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559162532648 <col:129> 'int' 0
|-CXXMethodDecl 0x5591625285a8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5591625282f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559162528370 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5591625283f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x559162528468 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5591625326a0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559162532680 <col:117> 'int' 0
|-CXXMethodDecl 0x559162528938 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559162528680 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5591625286f8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559162528778 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5591625326b8 <col:99> 'int' 0
| `-ParmVarDecl 0x5591625287f0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5591625326f8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5591625326d8 <col:119> 'int' 0
|-CXXMethodDecl 0x559162528d58 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x559162528a08 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559162528a88 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559162528b00 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559162528b80 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559162532730 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559162532710 <col:108> 'int' 0
| `-ParmVarDecl 0x559162528c00 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x559162532768 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x559162532748 <col:141> 'int' 0
|-CXXMethodDecl 0x559162529178 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559162528e30 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559162528eb0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559162528f28 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559162528fa8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x559162529028 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559162532780 <col:121> 'int' 0
|-CXXMethodDecl 0x5591625295a8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559162529258 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5591625292d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x559162529350 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5591625293d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5591625327a0 <col:98> 'int' 0
| `-ParmVarDecl 0x559162529450 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5591625327c0 <col:123> 'int' 0
|-CXXMethodDecl 0x559162529870 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x559162529680 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559162529700 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x559162529780 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5591625327e0 <col:80> 'int' 0
|-EnumDecl 0x559162529928 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x559162529a30 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559162529cc0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162529a10 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5591625299f0 <col:42> 'int' 1
| |-EnumConstantDecl 0x559162529ac0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559162529cd8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162529aa0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x559162529a80 <col:40> 'int' 2
| |-EnumConstantDecl 0x559162529b50 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559162529cf0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162529b30 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x559162529b10 <col:44> 'int' 4
| |-EnumConstantDecl 0x559162529be0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559162529d08 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559162529bc0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x559162529ba0 <col:36> 'int' 7
| `-EnumConstantDecl 0x559162529c70 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x559162529d20 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559162529c50 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x559162529c30 <col:34> 'int' 6
|-CXXMethodDecl 0x559162529fd8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x559162529d48 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x559162529de8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x559162529e68 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x559162529ee0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x559162532898 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x559162532880 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x559162532868 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x559162532848 <col:98, col:105> 'String' (CXXTemporary 0x559162532848)
|           `-CXXTemporaryObjectExpr 0x559162532810 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55916252a278 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55916252a0a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55916252a120 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55916252a198 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559162532948 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559162532930 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559162532918 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5591625328f8 <col:94, col:101> 'String' (CXXTemporary 0x5591625328f8)
| |         `-CXXTemporaryObjectExpr 0x5591625328c0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x559162533130 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5591625330a8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x559162533078 <col:9> '<bound member function type>' ->add_task_handlers 0x559162529fd8
|     | `-CXXThisExpr 0x559162533068 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5591625330e8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559162532fe8 <col:27> 'Task *' lvalue ParmVar 0x55916252a0a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x559162533100 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559162533008 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55916252a120 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x559162533118 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559162533028 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559162529c70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559162533048 <col:62> 'const String' lvalue ParmVar 0x55916252a198 'prefix' 'const String &'
|-CXXMethodDecl 0x55916252a488 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55916252a340 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55916252a3b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5591625329f8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5591625329e0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5591625329c8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5591625329a8 <col:70, col:77> 'String' (CXXTemporary 0x5591625329a8)
| |         `-CXXTemporaryObjectExpr 0x559162532970 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x559162533308 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x559162533280 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x559162533250 <col:9> '<bound member function type>' ->add_task_handlers 0x559162529fd8
|     | `-CXXThisExpr 0x559162533240 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5591625332c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5591625331c0 <col:27> 'Task *' lvalue ParmVar 0x55916252a340 'task' 'Task *'
|     |-ImplicitCastExpr 0x5591625332d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5591625331e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5591625332f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559162533200 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559162529c70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559162533220 <col:57> 'const String' lvalue ParmVar 0x55916252a3b8 'prefix' 'const String &'
|-CXXMethodDecl 0x55916252a768 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55916252a550 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252a5d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252a648 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55916252aa18 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55916252a838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252a8b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252a938 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55916252ad08 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55916252aae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252ab68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252abe0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55916252afb8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55916252add8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252ae58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252aed8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55916252b268 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55916252b088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252b108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252b188 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55916252b518 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55916252b338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252b3b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252b430 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55916252b7c8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55916252b5e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252b668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252b6e8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55916252bad8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55916252b8f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252b970 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252b9f0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55916252bdb8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55916252bba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252bc28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252bcd0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55916252c098 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55916252be88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252bf08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252bfb0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55916252c300 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55916252c168 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55916252c1e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55916252c260 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55916252c5a8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55916252c3d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55916252c450 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55916252c4c8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55916252c858 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55916252c678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252c6f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252c778 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55916252cb08 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55916252c928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252c9a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252ca20 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55916252cdb8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55916252cbd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252cc58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252ccd0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55916252d088 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55916252ce88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252cf08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55916252cfa8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55916252d3b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55916252d158 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55916252d1d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55916252d250 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55916252d2c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559162532a10 <col:93> 'bool' false
|-CXXMethodDecl 0x55916252d5a0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55916252d488 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55916252d508 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55916252d778 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55916252d660 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55916252d6e0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55916252da58 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55916252d838 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55916252d8b0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55916252d930 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55916252d9a8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55916252dd48 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55916252db28 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55916252dba0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55916252dc20 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55916252dc98 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55916252df80 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55916252de20 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55916252dea0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55916252e168 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55916252e048 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55916252e0c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55916252e218 prev 0x5591625259b8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55916252e310 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55916252e3a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55916252e418 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55916252e4d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55916252e5a0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55916252e718 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55916252e650 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55916252e7c0 <col:24>
| | `-OptimizeNoneAttr 0x55916252e818 <col:34>
| |-CXXMethodDecl 0x55916252e860 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55916252eb18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55916252e910 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55916252e988 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55916252ea08 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55916252ebd0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55916252ec08 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55916252ec70 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55916252ecf8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55916252f018 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55916252edb0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55916252ee28 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55916252eea0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55916252ef20 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55916252f130 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x559162536aa8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559162536aa8
| | `-ParmVarDecl 0x559162536bb8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x559162536c58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559162536c58
| | `-ParmVarDecl 0x559162536d68 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5591625f2e70 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55916252f1a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55916252f248 <col:38> "" ""
|-CXXMethodDecl 0x55916252f2d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55916252f378 <col:44> "" ""
|-AccessSpecDecl 0x55916252f3e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55916252f410 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55916252f510 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55916252f560 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55916252f4f0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55916252f4d0 <col:27> 'int' 4
|-FieldDecl 0x55916252f618 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55916252f7c8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55916252f880 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x559162530910 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x559162530978 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x559162530ac8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x559162530a08 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x559162530c78 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x559162530b88 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x559162530e58 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x559162530d38 <col:20> col:23 'int'
| `-ParmVarDecl 0x559162530db8 <col:25> col:28 'int'
|-CXXMethodDecl 0x559162531100 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x559162530f20 <col:23> col:26 'int'
| |-ParmVarDecl 0x559162530fa0 <col:28> col:31 'int'
| `-ParmVarDecl 0x559162531018 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5591625311b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x559162531280 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5591625312d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x559162531320 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x559162531500 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5591625313b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x559162531428 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5591625317a8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5591625315c8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x559162531648 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5591625316c0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5591625319c8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x559162531878 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5591625318f8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x559162531d00 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x559162531a88 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x559162531b08 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x559162531b80 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x559162531c00 <col:57> col:60 'int'
|-CXXMethodDecl 0x559162531ee8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559162531dd0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x559162531e50 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x559162532038 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x559162531fa8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5591625323b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5591625320f8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x559162532178 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5591625321f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x559162532270 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5591625324d0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class MarkMACHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   int _length
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559162539c18 <../elements/standard/markmacheader.hh:21:1, line:37:1> line:21:7 class MarkMACHeader definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x559162539d78 <col:1, col:7> col:7 implicit referenced class MarkMACHeader
|-AccessSpecDecl 0x559162539e08 <col:40, col:46> col:40 public
|-CXXConstructorDecl 0x559162539e90 <line:23:5, col:19> col:5 MarkMACHeader 'void ()'
|-CXXMethodDecl 0x559162539f90 <line:25:5, col:62> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x559162522968 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55916253aeb0 <col:36, col:62>
|   `-ReturnStmt 0x55916253aea0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55916253ae88 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55916253ae60 <col:45> 'const char [14]' lvalue "MarkMACHeader"
|-CXXMethodDecl 0x55916253a058 <line:26:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x559162522a30 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55916253af10 <col:36, col:56>
|   `-ReturnStmt 0x55916253af00 <col:38, col:45>
|     `-ImplicitCastExpr 0x55916253aee8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55916253aec8 <col:45> 'const char []' lvalue Var 0x559162522ce0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55916253a330 <line:27:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x559162524200 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55916253a1e0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55916253a258 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55916253a400 <line:28:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x559162526c50 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55916253af48 <col:39, col:54>
|   `-ReturnStmt 0x55916253af38 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55916253af28 <col:48> 'bool' true
|-CXXMethodDecl 0x55916253a540 <line:30:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x559162521b48 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55916253a4b0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55916253a5e8 <line:32:3, col:10> col:3 private
|-FieldDecl 0x55916253a628 <line:34:5, col:9> col:9 _offset 'int'
|-FieldDecl 0x55916253a690 <line:35:5, col:9> col:9 _length 'int'
|-CXXConstructorDecl 0x55916253a708 <line:21:7> col:7 implicit MarkMACHeader 'void (const MarkMACHeader &)' inline default_delete noexcept-unevaluated 0x55916253a708
| `-ParmVarDecl 0x55916253a818 <col:7> col:7 'const MarkMACHeader &'
|-CXXConstructorDecl 0x55916253a8b8 <col:7> col:7 implicit MarkMACHeader 'void (MarkMACHeader &&)' inline default_delete noexcept-unevaluated 0x55916253a8b8
| `-ParmVarDecl 0x55916253a9c8 <col:7> col:7 'MarkMACHeader &&'
|-CXXMethodDecl 0x55916253aa68 <col:7> col:7 implicit operator= 'MarkMACHeader &(const MarkMACHeader &)' inline default_delete noexcept-unevaluated 0x55916253aa68
| `-ParmVarDecl 0x55916253ab78 <col:7> col:7 'const MarkMACHeader &'
|-CXXMethodDecl 0x55916253abe8 <col:7> col:7 implicit operator= 'MarkMACHeader &(MarkMACHeader &&)' inline default_delete noexcept-unevaluated 0x55916253abe8
| `-ParmVarDecl 0x55916253acf8 <col:7> col:7 'MarkMACHeader &&'
`-CXXDestructorDecl 0x55916253ad80 <col:7> col:7 implicit ~MarkMACHeader 'void ()' inline default noexcept-unevaluated 0x55916253ad80
  `-Overrides: [ 0x559162521508 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.MarkMACHeader = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.MarkMACHeader.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591622f50d0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5591622f51e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5591622f5288 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5591622f52e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5591622f5348 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5591622f53f8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591622f5700 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5591622f5818 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5591622f58c0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5591622f5928 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5591622f59b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5591622fba50 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5591622fbe88 <col:12>
|-CXXConstructorDecl 0x5591622fbb58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5591622fbc68 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5591622f58c0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5591622fe410 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5591622fe3e0 <col:12> 'const char *const' lvalue .data 0x5591622f58c0
| |     `-DeclRefExpr 0x5591622fe3c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5591622fbc68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5591622f5928 'length' 'int'
| | `-ImplicitCastExpr 0x5591622fe4a0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5591622fe470 <col:12> 'const int' lvalue .length 0x5591622f5928
| |     `-DeclRefExpr 0x5591622fe450 <col:12> 'const String::rep_t' lvalue ParmVar 0x5591622fbc68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5591622f59b8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5591622fe530 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5591622fe500 <col:12> 'String::memo_t *const' lvalue .memo 0x5591622f59b8
| |     `-DeclRefExpr 0x5591622fe4e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5591622fbc68 '' 'const String::rep_t &'
| `-CompoundStmt 0x5591622fe588 <col:12>
|-CXXConstructorDecl 0x5591622fbd08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5591622fbd08
| `-ParmVarDecl 0x5591622fbe18 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x559162301370 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55916230cd88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55916230ce98 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55916230d3b0 <col:12>
|   |-BinaryOperator 0x55916230d1c8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55916230d180 <col:12> 'const char *' lvalue ->data 0x5591622f58c0
|   | | `-CXXThisExpr 0x55916230d170 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55916230d1b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55916230d140 <col:12> 'const char *const' lvalue .data 0x5591622f58c0
|   |     `-DeclRefExpr 0x55916230d120 <col:12> 'const String::rep_t' lvalue ParmVar 0x55916230ce98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55916230d290 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55916230d248 <col:12> 'int' lvalue ->length 0x5591622f5928
|   | | `-CXXThisExpr 0x55916230d238 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55916230d278 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55916230d208 <col:12> 'const int' lvalue .length 0x5591622f5928
|   |     `-DeclRefExpr 0x55916230d1e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55916230ce98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55916230d358 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55916230d310 <col:12> 'String::memo_t *' lvalue ->memo 0x5591622f59b8
|   | | `-CXXThisExpr 0x55916230d300 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55916230d340 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55916230d2d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5591622f59b8
|   |     `-DeclRefExpr 0x55916230d2b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55916230ce98 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55916230d3a0 <col:12>
|     `-UnaryOperator 0x55916230d388 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55916230d378 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55916230cf08 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55916230cf08
  `-ParmVarDecl 0x55916230d018 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591622ec640 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5591622ec758 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5591622ec7e8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5591622ec828 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x559161fc0dc0 'const char *'
|   `-QualType 0x559161fc0311 'const char' const
|     `-BuiltinType 0x559161fc0310 'char'
|-TypedefDecl 0x5591622ec8b0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5591622ec880 'String::const_iterator' sugar
|   |-Typedef 0x5591622ec828 'const_iterator'
|   `-PointerType 0x559161fc0dc0 'const char *'
|     `-QualType 0x559161fc0311 'const char' const
|       `-BuiltinType 0x559161fc0310 'char'
|-TypedefDecl 0x5591622eca20 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5591622ec990 'int (String::*)() const'
|   |-RecordType 0x5591622ec6d0 'String'
|   | `-CXXRecord 0x5591622ec640 'String'
|   `-ParenType 0x5591622ec930 'int () const' sugar
|     `-FunctionProtoType 0x5591622c04c0 'int () const' const cdecl
|       `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591622eca88 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5591621150a0 'int64_t' sugar
|   |-Typedef 0x5591620292d0 'int64_t'
|   `-TypedefType 0x5591620024d0 '__int64_t' sugar
|     |-Typedef 0x5591620020a8 '__int64_t'
|     `-BuiltinType 0x559161fc0390 'long'
|-TypedefDecl 0x5591622ecaf0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x559162114fc0 'uint64_t' sugar
|   |-Typedef 0x559162029470 'uint64_t'
|   `-TypedefType 0x559162002560 '__uint64_t' sugar
|     |-Typedef 0x559162002118 '__uint64_t'
|     `-BuiltinType 0x559161fc0430 'unsigned long'
|-TypedefDecl 0x5591622ecb80 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5591622ecb50 'String::intmax_t' sugar
|   |-Typedef 0x5591622eca88 'intmax_t'
|   `-TypedefType 0x5591621150a0 'int64_t' sugar
|     |-Typedef 0x5591620292d0 'int64_t'
|     `-TypedefType 0x5591620024d0 '__int64_t' sugar
|       |-Typedef 0x5591620020a8 '__int64_t'
|       `-BuiltinType 0x559161fc0390 'long'
|-TypedefDecl 0x5591622ecc10 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5591622ecbe0 'String::uintmax_t' sugar
|   |-Typedef 0x5591622ecaf0 'uintmax_t'
|   `-TypedefType 0x559162114fc0 'uint64_t' sugar
|     |-Typedef 0x559162029470 'uint64_t'
|     `-TypedefType 0x559162002560 '__uint64_t' sugar
|       |-Typedef 0x559162002118 '__uint64_t'
|       `-BuiltinType 0x559161fc0430 'unsigned long'
|-CXXConstructorDecl 0x5591622eccd0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5591622ece78 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5591622ecdb8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5591622ed028 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5591622ecf68 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5591622ed180 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5591622ed0f0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5591622ed398 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5591622ed248 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5591622ed2c8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5591622ed5b8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5591622ed468 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5591622ed4e8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5591622ed7d8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5591622ed688 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5591622ed708 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5591622ed9f8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5591622ed8a8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5591622ed928 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5591622edb88 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5591622edac0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5591622edd08 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5591622edc48 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5591622ede98 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5591622eddd0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5591622edff0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5591622edf60 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5591622ee148 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5591622ee0b8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5591622ee2a0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5591622ee210 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5591622ee428 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5591622ee368 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5591622ee5b8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5591622ee4f0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5591622ee748 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5591622ee680 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5591622ee8d8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5591622ee810 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5591622ee9d0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5591622eeaf8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5591622eec78 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5591622eebb0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5591622eedc8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5591622eed38 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5591622eee80 <col:63> "" ""
|-CXXMethodDecl 0x5591622eefc8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5591622eef08 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5591622ef1d8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5591622ef088 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5591622ef108 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5591622ef3f8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5591622ef2a0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5591622ef320 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5591622ef6d8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5591622ef4b8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5591622ef538 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5591622fb520 <col:55> 'int' 10
| `-ParmVarDecl 0x5591622ef5b0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5591622fb540 <col:76> 'bool' true
|-CXXMethodDecl 0x5591622ef9b8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5591622ef7a0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5591622ef820 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5591622fb550 <col:56> 'int' 10
| `-ParmVarDecl 0x5591622ef898 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5591622fb570 <col:77> 'bool' true
|-CXXMethodDecl 0x5591622efac0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5591622efb88 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5591622efc50 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5591622efcf0 <col:20>
| `-OptimizeNoneAttr 0x5591622efd48 <col:30>
|-CXXConversionDecl 0x5591622efe38 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5591622eff08 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5591622effc8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5591622f00b8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5591622f0178 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5591622f02f8 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5591622f0230 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5591622f0448 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5591622f03b8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5591622f0538 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5591622f05f8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5591622f0848 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5591622f06b0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5591622f0730 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5591622f0aa8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5591622f0910 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5591622f0990 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5591622f0b78 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5591622f0d88 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5591622f0c30 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5591622f0cb0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5591622f0fa8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5591622f0e50 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5591622f0ed0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5591622f1138 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5591622f1070 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5591622f1228 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5591622f1398 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5591622f12d8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5591622f15a8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5591622f1458 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5591622f14d8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5591622f17c0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5591622f1668 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5591622f16e0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5591622f1950 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5591622f1880 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5591622f1b70 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5591622f1a10 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5591622f1a90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5591622f1cc0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5591622f1c30 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5591622f1e98 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5591622f1d80 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5591622f1e00 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5591622f1fe8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5591622f1f58 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5591622f2200 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5591622f20a0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5591622f2120 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5591622fb580 <col:39> 'int' 0
|-CXXMethodDecl 0x5591622f2420 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5591622f22c0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5591622f2340 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5591622fb5a0 <col:48> 'int' 0
|-CXXMethodDecl 0x5591622f2600 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5591622f24e0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5591622f2560 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5591622fb5c0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5591622f26d0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5591622f2790 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5591622f2850 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5591622f2910 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5591622f29d0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5591622f2b78 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5591622f2a80 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5591622f2cf8 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5591622f2c30 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5591622f2ed0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5591622f2db8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5591622f3048 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5591622f2f88 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5591622f3190 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5591622f3100 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5591622f32e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5591622f3250 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5591622f34b8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5591622f33a0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5591622f3420 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5591622f3698 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5591622f3580 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5591622f3600 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5591622f37e8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5591622f3758 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5591622f39f8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5591622f38a8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5591622f3928 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5591622f3b58 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5591622f3ac0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5591622f3cb0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5591622f3c18 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5591622f3d58 <col:57> "" ""
|-CXXMethodDecl 0x5591622f3e68 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5591622f3dd8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5591622f3fb8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5591622f3f28 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5591622f4138 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5591622f4070 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5591622f4200 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5591622f42c0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5591622f4380 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5591622f4420 <col:49> "" ""
|-CXXMethodDecl 0x5591622f44b0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5591622f4570 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5591622f4660 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5591622f4728 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5591622f47e8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5591622f48a8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5591622f49a0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5591622f4a68 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5591622f4b30 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5591622f4d08 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5591622f4be8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5591622f4c68 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5591622f4f30 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5591622f4dd0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5591622f4e50 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5591622f5040 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5591622f50a8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5591622f50d0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5591622f51e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5591622f5288 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5591622f52e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5591622f5348 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5591622f53f8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5591622f5460 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5591622f5698 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5591622f56e8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591622f5678 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5591622f5588 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5591622f5530 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5591622f5570 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5591622f5550 <col:32> 'int' 8
|-CXXRecordDecl 0x5591622f5700 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5591622f5818 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5591622f58c0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5591622f5928 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5591622f59b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5591622fba50 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5591622fbe88 <col:12>
| |-CXXConstructorDecl 0x5591622fbb58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5591622fbc68 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5591622f58c0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5591622fe410 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5591622fe3e0 <col:12> 'const char *const' lvalue .data 0x5591622f58c0
| | |     `-DeclRefExpr 0x5591622fe3c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5591622fbc68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5591622f5928 'length' 'int'
| | | `-ImplicitCastExpr 0x5591622fe4a0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5591622fe470 <col:12> 'const int' lvalue .length 0x5591622f5928
| | |     `-DeclRefExpr 0x5591622fe450 <col:12> 'const String::rep_t' lvalue ParmVar 0x5591622fbc68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5591622f59b8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5591622fe530 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5591622fe500 <col:12> 'String::memo_t *const' lvalue .memo 0x5591622f59b8
| | |     `-DeclRefExpr 0x5591622fe4e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5591622fbc68 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5591622fe588 <col:12>
| |-CXXConstructorDecl 0x5591622fbd08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5591622fbd08
| | `-ParmVarDecl 0x5591622fbe18 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x559162301370 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55916230cd88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55916230ce98 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55916230d3b0 <col:12>
| |   |-BinaryOperator 0x55916230d1c8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55916230d180 <col:12> 'const char *' lvalue ->data 0x5591622f58c0
| |   | | `-CXXThisExpr 0x55916230d170 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55916230d1b0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55916230d140 <col:12> 'const char *const' lvalue .data 0x5591622f58c0
| |   |     `-DeclRefExpr 0x55916230d120 <col:12> 'const String::rep_t' lvalue ParmVar 0x55916230ce98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55916230d290 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55916230d248 <col:12> 'int' lvalue ->length 0x5591622f5928
| |   | | `-CXXThisExpr 0x55916230d238 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55916230d278 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55916230d208 <col:12> 'const int' lvalue .length 0x5591622f5928
| |   |     `-DeclRefExpr 0x55916230d1e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55916230ce98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55916230d358 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55916230d310 <col:12> 'String::memo_t *' lvalue ->memo 0x5591622f59b8
| |   | | `-CXXThisExpr 0x55916230d300 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55916230d340 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55916230d2d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5591622f59b8
| |   |     `-DeclRefExpr 0x55916230d2b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55916230ce98 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55916230d3a0 <col:12>
| |     `-UnaryOperator 0x55916230d388 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55916230d378 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55916230cf08 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55916230cf08
|   `-ParmVarDecl 0x55916230d018 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5591622f5a30 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5591622f5c78 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5591622f5a98 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5591622f5b18 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5591622f5b90 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5591622fba10 <col:79, line:261:5>
|   |-BinaryOperator 0x5591622fb688 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5591622fb620 <col:2, col:5> 'const char *' lvalue .data 0x5591622f58c0
|   | | `-MemberExpr 0x5591622fb5f0 <col:2> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|   | |   `-CXXThisExpr 0x5591622fb5e0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5591622fb670 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5591622fb650 <col:12> 'const char *' lvalue ParmVar 0x5591622f5a98 'data' 'const char *'
|   |-BinaryOperator 0x5591622fb750 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5591622fb6e8 <col:2, col:5> 'int' lvalue .length 0x5591622f5928
|   | | `-MemberExpr 0x5591622fb6b8 <col:2> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|   | |   `-CXXThisExpr 0x5591622fb6a8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5591622fb738 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5591622fb718 <col:14> 'int' lvalue ParmVar 0x5591622f5b18 'length' 'int'
|   `-IfStmt 0x5591622fb9f8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5591622fb870 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5591622fb858 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5591622fb838 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5591622fb818 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5591622fb7b0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|     |       | `-MemberExpr 0x5591622fb780 <col:7> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|     |       |   `-CXXThisExpr 0x5591622fb770 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5591622fb800 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5591622fb7e0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5591622f5b90 'memo' 'String::memo_t *'
|     `-CallExpr 0x5591622fb9d0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5591622fb9b8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5591622fb8c0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5591622e46a8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5591622fb928 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5591622f5288
|         `-ImplicitCastExpr 0x5591622fb910 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5591622fb8f0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5591622f5b90 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5591622f5f28 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5591622f5d48 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5591622f5dc8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5591622f5e40 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5591622f5a30 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5591622fbe98 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5591622fc028 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5591622fbf90 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5591622fbf00 <col:2> '<bound member function type>' ->assign_memo 0x5591622f5c78
|     | `-ImplicitCastExpr 0x5591622fbfc8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5591622fbef0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5591622fbfe0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5591622fbf30 <col:14> 'const char *' lvalue ParmVar 0x5591622f5d48 'data' 'const char *'
|     |-ImplicitCastExpr 0x5591622fbff8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5591622fbf50 <col:20> 'int' lvalue ParmVar 0x5591622f5dc8 'length' 'int'
|     `-ImplicitCastExpr 0x5591622fc010 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5591622fbf70 <col:28> 'String::memo_t *' lvalue ParmVar 0x5591622f5e40 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5591622f60b8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5591622f5ff8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5591622fc280 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5591622fc200 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5591622fc050 <col:2> '<bound member function type>' ->assign_memo 0x5591622f5c78
|     | `-CXXThisExpr 0x5591622fc040 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5591622fc238 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5591622fc0d0 <col:14, col:19> 'const char *' lvalue .data 0x5591622f58c0
|     |   `-MemberExpr 0x5591622fc0a0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5591622f5a30
|     |     `-DeclRefExpr 0x5591622fc080 <col:14> 'const String' lvalue ParmVar 0x5591622f5ff8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5591622fc250 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5591622fc150 <col:25, col:30> 'int' lvalue .length 0x5591622f5928
|     |   `-MemberExpr 0x5591622fc120 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5591622f5a30
|     |     `-DeclRefExpr 0x5591622fc100 <col:25> 'const String' lvalue ParmVar 0x5591622f5ff8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5591622fc268 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5591622fc1d0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|         `-MemberExpr 0x5591622fc1a0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5591622f5a30
|           `-DeclRefExpr 0x5591622fc180 <col:38> 'const String' lvalue ParmVar 0x5591622f5ff8 'x' 'const String &'
|-CXXMethodDecl 0x5591622f6180 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5591622fcc40 <col:31, line:278:5>
|   `-IfStmt 0x5591622fcc28 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5591622fc320 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5591622fc308 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5591622fc2d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|     |     `-MemberExpr 0x5591622fc2a8 <col:6> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|     |       `-CXXThisExpr 0x5591622fc298 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5591622fcc00 <col:15, line:277:2>
|       |-ParenExpr 0x5591622fc7d0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5591622fc7a0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5591622fc430 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5591622fc418 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5591622fc400 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5591622fc3c0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5591622f5288
|       |   |       `-ImplicitCastExpr 0x5591622fc3a8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5591622fc378 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|       |   |           `-MemberExpr 0x5591622fc348 <col:27> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|       |   |             `-CXXThisExpr 0x5591622fc338 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5591622fc490 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5591622fc470 <col:54> 'int' 0
|       |   `-CallExpr 0x5591622fc700 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5591622fc6e8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5591622fc668 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5591622fc740 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5591622fc578 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5591622fc758 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5591622fc5a8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5591622fc770 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5591622fc5e0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5591622fc788 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5591622fc650 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5591622fc638 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5591622fc600 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5591622fcb20 <line:274:6, line:275:22>
|       | |-CallExpr 0x5591622fc9e0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5591622fc9c8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5591622fc940 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5591622e5af0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5591622fc910 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5591622f5288
|       | |   `-ImplicitCastExpr 0x5591622fc8f8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5591622fc8c8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|       | |       `-MemberExpr 0x5591622fc898 <col:40> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|       | |         `-CXXThisExpr 0x5591622fc888 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5591622fcae0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5591622fcac8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5591622fca08 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5591622fa960 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5591622fcb08 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5591622fca68 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|       |       `-MemberExpr 0x5591622fca38 <col:15> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|       |         `-CXXThisExpr 0x5591622fca28 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5591622fcbe0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5591622fcb78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5591622f59b8
|         | `-MemberExpr 0x5591622fcb48 <col:6> 'String::rep_t' lvalue ->_r 0x5591622f5a30
|         |   `-CXXThisExpr 0x5591622fcb38 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5591622fcbc8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5591622fcba8 <col:16> 'int' 0
|-CXXMethodDecl 0x5591622f6418 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5591622f6238 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5591622f62b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5591622f6330 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5591622f64f0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5591622f6740 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5591622f65a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5591622f6628 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5591622f66a0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5591622f6928 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5591622f6810 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5591622f6890 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5591622f6a28 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5591622fcd18 <col:41, line:286:5>
|   `-ReturnStmt 0x5591622fcd08 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5591622fccd8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5591622fcca0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5591622fcc88 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5591622fcc68 <col:46> 'int' 1
|-CXXMethodDecl 0x5591622f6cc8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5591622f6ae0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5591622f6b60 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5591622f6be0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5591622fa960 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5591622f6d90 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5591622faa30 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5591622fac00 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5591622faae8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5591622fab68 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5591622facc0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5591622fad88 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5591622fae88 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5591622faf00 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5591622faf78 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5591622fafe0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5591622fb0e0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5591622fb130 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591622fb0c0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5591622fb0a0 <col:22> 'int' 14
|-CXXMethodDecl 0x5591622fb348 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5591622fb160 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5591622fb1e0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5591622fb260 <col:43> col:46 'int'
|-FriendDecl 0x5591622fb450 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5591622fb4e0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5591623bd260 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5591623bd438 prev 0x5591623bd260 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5591623bd4c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5591623bd4f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591623bee50 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5591623bee00 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5591623bede0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5591623bd708 'type'
|     `-SubstTemplateTypeParmType 0x5591623bd6d0 'String' sugar
|       |-TemplateTypeParmType 0x5591622afee0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622afe90 'T'
|       `-RecordType 0x5591622ec6d0 'String'
|         `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x5591623bef08 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5591623beed0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5591623beeb0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5591623bee50 'type'
|     `-ElaboratedType 0x5591623bee00 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5591623bede0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5591623bd708 'type'
|         `-SubstTemplateTypeParmType 0x5591623bd6d0 'String' sugar
|           |-TemplateTypeParmType 0x5591622afee0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5591622afe90 'T'
|           `-RecordType 0x5591622ec6d0 'String'
|             `-CXXRecord 0x5591622ec640 'String'
|-CXXMethodDecl 0x5591623bf088 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5591623bef98 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5591623bf178 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5591623bf258 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5591623bf258
|-CXXMethodDecl 0x5591623bf528 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5591623bf430 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5591623bf768 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5591623bf5e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5591623bf658 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5591623bf938 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5591623bf828 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5591623bf8a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559162569ab0 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559162569b80 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559162569dc8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559162569c40 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559162569cb8 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55916256a028 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x559162569e98 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559162569f10 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55916256a1e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55916256a0f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55916256a3a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55916256a2b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55916256a460 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55916256a510 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55916256a748 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55916256a5c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55916256a638 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55916256a9e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55916256a8f0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55916256aab0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55916256ab00 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55916256ab50 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559162523e70 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5591623bbcc8 prev 0x559162523e70 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5591623bd1d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5591623bd180 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5591623bd160 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5591623bd010 'type'
|     `-SubstTemplateTypeParmType 0x5591623bcea0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x559162285c90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x559162285c38 'F'
|       `-RecordType 0x5591623bcb00 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5591623bca20 'typed_array_memory'
|-FieldDecl 0x55916256aba0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55916256abf0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55916256ac28 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|   |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5591622bd1a8 'T'
|   `-RecordType 0x5591622ec6d0 'String'
|     `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256acb8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55916256ac80 'String &'
|   `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|     |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5591622bd1a8 'T'
|     `-RecordType 0x5591622ec6d0 'String'
|       `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256ad48 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55916256ad10 'const String &'
|   `-QualType 0x5591623bbd61 'const String' const
|     `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-RecordType 0x5591622ec6d0 'String'
|         `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256add8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55916256ada0 'String *'
|   `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|     |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5591622bd1a8 'T'
|     `-RecordType 0x5591622ec6d0 'String'
|       `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256ae68 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55916256ae30 'const String *'
|   `-QualType 0x5591623bbd61 'const String' const
|     `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-RecordType 0x5591622ec6d0 'String'
|         `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256bac0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55916256ba70 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55916256ba50 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55916256b988 'type'
|     `-LValueReferenceType 0x55916256b950 'const String &'
|       `-QualType 0x55916256b6f1 'const String' const
|         `-SubstTemplateTypeParmType 0x55916256b6f0 'String' sugar
|           |-TemplateTypeParmType 0x55916228fbe0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55916228fb88 'T'
|           `-RecordType 0x5591622ec6d0 'String'
|             `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256bb28 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55916256ad10 'const String &'
|   `-QualType 0x5591623bbd61 'const String' const
|     `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-RecordType 0x5591622ec6d0 'String'
|         `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256bb80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x55916256bbe8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55916256ada0 'String *'
|   `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|     |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5591622bd1a8 'T'
|     `-RecordType 0x5591622ec6d0 'String'
|       `-CXXRecord 0x5591622ec640 'String'
|-TypedefDecl 0x55916256bc50 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55916256ae30 'const String *'
|   `-QualType 0x5591623bbd61 'const String' const
|     `-SubstTemplateTypeParmType 0x5591623bbd60 'String' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-RecordType 0x5591622ec6d0 'String'
|         `-CXXRecord 0x5591622ec640 'String'
|-EnumDecl 0x55916256bca8 <line:134:5> col:5
| `-EnumConstantDecl 0x55916256bda0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55916256bd80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5591622be888 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5591622be860 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5591622be840 <col:40> 'int' 1
|-CXXConstructorDecl 0x55916256be28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55916256c0b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55916256bee0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55916256bf80 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55916256c348 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55916256c230 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55916256c608 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55916256c4f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55916256c920 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55916256c800 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55916256cc30 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55916256cb10 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55916256cf20 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55916256cd68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55916256cde0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55916256d048 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55916256d0f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55916256d150 <col:30> Inherited
|-CXXMethodDecl 0x55916256d198 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55916256d248 <col:20> Inherited
| `-OptimizeNoneAttr 0x55916256d2a0 <col:30> Inherited
|-CXXMethodDecl 0x55916256d368 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55916256d418 <col:20> Inherited
| `-OptimizeNoneAttr 0x55916256d470 <col:30> Inherited
|-CXXMethodDecl 0x55916256d4b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55916256d568 <col:20> Inherited
| `-OptimizeNoneAttr 0x55916256d5c0 <col:30> Inherited
|-CXXMethodDecl 0x55916256d608 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55916256d6b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55916256d710 <col:30> Inherited
|-CXXMethodDecl 0x55916256d758 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55916256d808 <col:20> Inherited
| `-OptimizeNoneAttr 0x55916256d860 <col:30> Inherited
|-CXXMethodDecl 0x55916256d888 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55916256d938 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55916256d9e8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55916256dba8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55916256da98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55916256db10 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55916256dcf8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55916256dc68 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55916256dea8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55916256ddb0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55916256df60 <col:20>
| `-OptimizeNoneAttr 0x55916256dfb8 <col:30>
|-CXXMethodDecl 0x55916256e0d8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55916256dfe0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55916256e190 <col:20>
| `-OptimizeNoneAttr 0x55916256e1e8 <col:30>
|-CXXMethodDecl 0x55916256e2a0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55916256e210 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55916256e3e8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55916256e358 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55916256e518 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55916256e618 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55916256e6e8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55916256e7b8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55916256e8f8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55916256e868 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55916256ea40 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55916256e9b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55916256eb88 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55916256eaf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55916256ec40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55916256ed40 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55916256ecb0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55916256edf8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55916256eeb8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55916256efb8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55916256f138 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55916256f078 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55916256f8f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55916256f1f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55916256f858 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55916256f758 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55916256f9d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55916256fb28 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55916256fa98 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55916256fbe0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55916256fe28 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55916256fca0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55916256fd18 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55916256ffb8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55916256fef8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5591625701c8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x559162570080 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5591625700f8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559162570288 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5591625704e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5591625703f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5591625705b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5591625705b8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591624a1ad8 prev 0x5591624e6918 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5591624a1bd0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5591624a1c60 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5591624a1d98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5591624a1c98 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5591624a31c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5591624a31a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5591624a2d38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5591624a3250 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5591624a3210 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5591624a1c98 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5591624a2da0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5591624a32d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5591624a3290 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5591624a2e00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5591624a3310 <col:54> 'bool' false
| `-CompoundStmt 0x5591624a3418 <col:61, line:38:5>
|   `-BinaryOperator 0x5591624a33f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5591624a3390 <col:9> 'const Element *' lvalue ->_context 0x5591624a2cd8
|     | `-CXXThisExpr 0x5591624a3380 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5591624a33e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5591624a33c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5591624a1fa8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5591624a1e58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5591624a1ed0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5591624a31f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5591624a31d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5591624a2cd8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5591624a3470 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5591624a3430 <col:20> 'const Element *' lvalue ParmVar 0x5591624a1e58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5591624a2d38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5591624a34f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5591624a34b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5591624a1ed0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5591624a2da0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5591624a3570 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5591624a3530 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5591624a2e00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5591624a35b0 <col:73> 'bool' false
| `-CompoundStmt 0x5591624a3628 <col:80, line:46:5>
|-CXXMethodDecl 0x5591624a20d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5591624a36a0 <col:36, line:51:5>
|   `-ReturnStmt 0x5591624a3690 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5591624a3678 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5591624a3648 <col:16> 'const Element *const' lvalue ->_context 0x5591624a2cd8
|         `-CXXThisExpr 0x5591624a3638 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5591624a21c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5591624a3720 <col:32, line:57:5>
|   `-ReturnStmt 0x5591624a3710 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5591624a36f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5591624a36c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5591624a2d38
|         `-CXXThisExpr 0x5591624a36b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5591624a2288 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5591624a2410 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5591624a2340 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5591624a2560 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5591624a24d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5591624a26b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5591624a2620 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5591624a28b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5591624a2768 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5591624a27e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5591624a2be8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5591624a2978 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5591624a29f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5591624a2ac0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5591624a2ca0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5591624a2cd8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5591624a2d38 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5591624a2da0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5591624a2e00 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5591624a2e50 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5591624a2e50
| `-ParmVarDecl 0x5591624a2f68 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5591624a3008 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5591624a3008
| `-ParmVarDecl 0x5591624a3118 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5591625f3798 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5591625ae540 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5591625ae718 prev 0x5591625ae540 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5591625ae7a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5591625ae7d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625b03a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5591625b0350 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5591625aec80 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5591625aeb80 'type'
|     `-TemplateSpecializationType 0x5591625aeb10 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5591625ae9f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5591625ae9d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5591625ae9b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5591625aeaf0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5591625aea10 'char_array'
|-TypedefDecl 0x5591625b0458 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5591625b0420 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5591625b0400 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5591625b03a0 'type'
|     `-ElaboratedType 0x5591625b0350 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5591625aec80 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5591625aeb80 'type'
|         `-TemplateSpecializationType 0x5591625aeb10 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5591625ae9f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5591625ae9d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5591625ae9b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5591625aeaf0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5591625aea10 'char_array'
|-CXXMethodDecl 0x5591625b05d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5591625b04e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5591625b06c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5591625b07a8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5591625b0a78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5591625b0980 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5591625b0cb8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5591625b0b30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5591625b0ba8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625b0e88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5591625b0d78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5591625b0df0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625b0fe8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5591625b10b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5591625b1308 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5591625b1178 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5591625b11f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625b1568 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5591625b13d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5591625b1450 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625b1728 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5591625b1638 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625b18e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5591625b17f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625b19a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5591625b1a50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5591625ba058 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5591625b1b00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5591625b9f40 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5591625ba2f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5591625ba200 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5591625ba3c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5591625ba410 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5591625ba460 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5591625acf48 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5591625ad158 prev 0x5591625acf48 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5591625ae4b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5591625ae460 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5591625ae440 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5591625ae2f0 'type'
|     `-SubstTemplateTypeParmType 0x5591625ae110 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x559162285510 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622854b8 'T'
|       `-RecordType 0x5591625adc60 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5591625adb78 'sized_array_memory'
|-FieldDecl 0x5591625ba4b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5591625ba500 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5591625ba538 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|   |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5591622bd1a8 'T'
|   `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625ba5c8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5591625ba590 'int &'
|   `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|     |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5591622bd1a8 'T'
|     `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625ba688 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5591625ba650 'const int &'
|   `-QualType 0x5591625ad1f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625ba718 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5591625ba6e0 'int *'
|   `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|     |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5591622bd1a8 'T'
|     `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625ba7a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5591625ba770 'const int *'
|   `-QualType 0x5591625ad1f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625bb390 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5591625bb340 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5591625bb320 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5591625bb2b0 'type'
|     `-SubstTemplateTypeParmType 0x5591625bb070 'int' sugar
|       |-TemplateTypeParmType 0x559162290310 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622902c0 'T'
|       `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625bb3f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5591625ba650 'const int &'
|   `-QualType 0x5591625ad1f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625bb450 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625bb4b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5591625ba6e0 'int *'
|   `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|     |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5591622bd1a8 'T'
|     `-BuiltinType 0x559161fc0370 'int'
|-TypedefDecl 0x5591625bb520 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5591625ba770 'const int *'
|   `-QualType 0x5591625ad1f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5591625ad1f0 'int' sugar
|       |-TemplateTypeParmType 0x5591622bd200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5591622bd1a8 'T'
|       `-BuiltinType 0x559161fc0370 'int'
|-EnumDecl 0x5591625bb578 <line:134:5> col:5
| `-EnumConstantDecl 0x5591625bb670 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5591625bb650 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5591622be888 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5591622be860 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5591622be840 <col:40> 'int' 1
|-CXXConstructorDecl 0x5591625bb6f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5591625bb948 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5591625bb7b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5591625bb850 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5591625bbc08 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5591625bbaf0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5591625bbec8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5591625bbdb0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5591625bc210 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5591625bc0f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5591625bc520 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5591625bc400 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5591625bc810 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5591625bc658 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5591625bc6d0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5591625bc938 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5591625bca18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5591625bca70 <col:30> Inherited
|-CXXMethodDecl 0x5591625bcab8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5591625bcb68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5591625bcbc0 <col:30> Inherited
|-CXXMethodDecl 0x5591625bcc88 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5591625bcd38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5591625bcd90 <col:30> Inherited
|-CXXMethodDecl 0x5591625bcdd8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5591625bce88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5591625bcee0 <col:30> Inherited
|-CXXMethodDecl 0x5591625bcf28 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5591625bcfd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5591625bd030 <col:30> Inherited
|-CXXMethodDecl 0x5591625bd078 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5591625bd128 <col:20> Inherited
| `-OptimizeNoneAttr 0x5591625bd180 <col:30> Inherited
|-CXXMethodDecl 0x5591625bd1a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5591625bd258 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5591625bd308 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5591625bd4c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5591625bd3b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5591625bd430 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5591625bd618 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5591625bd588 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5591625bd7c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5591625bd6d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5591625bd880 <col:20>
| `-OptimizeNoneAttr 0x5591625bd8d8 <col:30>
|-CXXMethodDecl 0x5591625bd9f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5591625bd900 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5591625bdab0 <col:20>
| `-OptimizeNoneAttr 0x5591625bdb08 <col:30>
|-CXXMethodDecl 0x5591625bdbc0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5591625bdb30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5591625bdd08 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5591625bdc78 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5591625bde38 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5591625bdf68 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5591625be038 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5591625be108 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5591625be248 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5591625be1b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5591625be390 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5591625be300 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5591625be4d8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5591625be448 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5591625be590 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5591625be690 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5591625be600 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5591625be748 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5591625be808 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5591625be908 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5591625bea88 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5591625be9c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5591625bf248 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5591625beb40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5591625bf1a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5591625bf0a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5591625bf328 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5591625bf478 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5591625bf3e8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5591625bf530 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5591625bf778 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5591625bf5f0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5591625bf668 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5591625bf938 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5591625bf848 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5591625bfb88 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5591625bfa00 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5591625bfa78 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5591625bfc48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5591625bfea8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5591625bfdb0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5591625bff78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591625ab0b8 prev 0x55916258cd38 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5591625ab1b0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5591625ab2a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5591625d1d50 <col:16, line:828:9>
|-CXXDestructorDecl 0x5591625ab390 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5591625d1d60 <col:25, line:830:9>
|-CXXMethodDecl 0x5591625ab490 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5591625ab540 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5591625ab5e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5591625ab5e8
| `-ParmVarDecl 0x5591625ab6f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5591625abeb8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5591625abeb8
  `-ParmVarDecl 0x5591625abfc8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55916258cb48 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55916258cca8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55916258cd38 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55916258cdf0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55916258cef8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55916258ce28 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5591625c1538 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5591625c1518 <col:31> 'int' 0
|-CXXConstructorDecl 0x55916258d218 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55916258d090 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55916258d108 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5591625c1570 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5591625c1550 <col:59> 'int' 0
|-CXXConstructorDecl 0x55916258d3f0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55916258d2e0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55916258d358 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5591625c15a8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5591625c1588 <col:55> 'int' 0
|-CXXConstructorDecl 0x55916258d7a8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55916258d590 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55916258d608 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55916258d680 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5591625c15e0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5591625c15c0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55916258d968 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55916258d8a8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55916258da60 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55916258dc48 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55916258db50 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55916258dd38 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5591625c1990 <col:24, line:291:5>
|   `-ReturnStmt 0x5591625c1980 <line:290:9, col:79>
|     `-BinaryOperator 0x5591625c1960 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5591625c1838 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5591625c1790 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5591625c1770 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5591625c1668 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5591625c1650 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5591625c1638 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5591625c1608 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5591625acee0
|       | |   |       `-CXXThisExpr 0x5591625c15f8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5591625c1758 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5591625c1740 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5591625c1708 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5591625c16d8 <col:28, col:35> '<bound member function type>' ->size 0x55916256d888
|       | |           `-ImplicitCastExpr 0x5591625c1728 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5591625c16c0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5591625c1690 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5591625acee0
|       | |                 `-CXXThisExpr 0x5591625c1680 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5591625c1820 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5591625c1808 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5591625c17f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5591625c17c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5591625c00c0
|       |         `-CXXThisExpr 0x5591625c17b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5591625c1940 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5591625c1928 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5591625c1910 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5591625c18d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5591625c18b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5591625c1868 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5591625c0170
|         |     |   `-CXXThisExpr 0x5591625c1858 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5591625c1898 <col:73> 'int' 0
|         `-IntegerLiteral 0x5591625c18f0 <col:79> 'int' 0
|-CXXMethodDecl 0x55916258ddf8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5591625c1b68 <col:32, line:296:5>
|   `-ReturnStmt 0x5591625c1b58 <line:295:9, col:49>
|     `-BinaryOperator 0x5591625c1b38 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5591625c1a18 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5591625c1a00 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5591625c19e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5591625c19b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5591625c00c0
|       |       `-CXXThisExpr 0x5591625c19a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5591625c1b18 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5591625c1b00 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5591625c1ae8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5591625c1aa8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5591625c1a90 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5591625c1a40 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5591625c0170
|         |     |   `-CXXThisExpr 0x5591625c1a30 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5591625c1a70 <col:43> 'int' 0
|         `-IntegerLiteral 0x5591625c1ac8 <col:49> 'int' 0
|-CXXMethodDecl 0x55916258dee8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5591625c1d78 <col:19, line:306:5>
|   |-IfStmt 0x5591625c1c98 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5591625c1bd8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5591625c1bc0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5591625c1b90 <col:13> 'Vector<String> *' lvalue ->_conf 0x5591625acee0
|   | |     `-CXXThisExpr 0x5591625c1b80 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5591625c1c78 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5591625c1c48 <col:13, col:20> '<bound member function type>' ->clear 0x559162570288
|   |     `-ImplicitCastExpr 0x5591625c1c30 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5591625c1c00 <col:13> 'Vector<String> *' lvalue ->_conf 0x5591625acee0
|   |         `-CXXThisExpr 0x5591625c1bf0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5591625c1d20 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5591625c1cf0 <col:9, col:16> '<bound member function type>' .clear 0x5591625bfc48
|   |   `-MemberExpr 0x5591625c1cc0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5591625c0060
|   |     `-CXXThisExpr 0x5591625c1cb0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5591625c1d68 <line:305:9, col:17>
|     `-UnaryOperator 0x5591625c1d50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5591625c1d40 <col:17> 'Args *' this
|-CXXMethodDecl 0x55916258e168 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55916258e070 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55916258e2e8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55916258e220 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55916258e668 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55916258e390 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55916258e5c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55916258e438 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55916258e4b0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5591625c3a10 <col:67, line:327:5>
|     |-WhileStmt 0x5591625c39c0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5591625c1e60 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5591625c1de0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5591624dede8 0x5591623283c8 0x5591623280a0 0x559162319880 0x559162319530 0x559162318e20 0x5591622eb790 0x559162277c50
|     | | |-DeclRefExpr 0x5591625c1da0 <col:16> 'Iter' lvalue ParmVar 0x55916258e438 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5591625c1dc0 <col:25> 'Iter' lvalue ParmVar 0x55916258e4b0 'end' 'Iter'
|     | `-CompoundStmt 0x5591625c39a0 <col:30, line:325:9>
|     |   |-CallExpr 0x5591625c3940 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5591625c1ea8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5591625c3910 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5591625c38a0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|     |   |   `-DeclRefExpr 0x5591625c1f08 <col:24> 'Iter' lvalue ParmVar 0x55916258e438 'begin' 'Iter'
|     |   `-UnaryOperator 0x5591625c3988 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5591625c3968 <col:15> 'Iter' lvalue ParmVar 0x55916258e438 'begin' 'Iter'
|     `-ReturnStmt 0x5591625c3a00 <line:326:9, col:17>
|       `-UnaryOperator 0x5591625c39e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c39d8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55916258e770 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55916258e6e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55916258e8b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55916258e828 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55916258e980 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5591625c3af0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5591625c3a90 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5591625c3a40 <col:9> '<bound member function type>' ->reset_from 0x5591625c04e8
|   | | `-CXXThisExpr 0x5591625c3a30 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5591625c3a70 <col:20> 'int' 0
|   `-ReturnStmt 0x5591625c3ae0 <line:352:9, col:17>
|     `-UnaryOperator 0x5591625c3ac8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5591625c3ab8 <col:17> 'Args *' this
|-VarDecl 0x55916258ea38 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55916258eaa0 <col:38> 'int' 1
|-VarDecl 0x55916258eb30 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55916258eb98 <col:39> 'int' 2
|-VarDecl 0x55916258ec28 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55916258ec90 <col:39> 'int' 4
|-VarDecl 0x55916258ed20 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55916258ed88 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55916258f108 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55916258ee00 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55916258f068 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55916258eeb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916258ef58 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5591625c3c48 <col:43, line:371:5>
|     `-ReturnStmt 0x5591625c3c38 <line:370:9, col:34>
|       `-CallExpr 0x5591625c3c00 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c3b20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c3ba0 <col:21> 'const char *' lvalue ParmVar 0x55916258eeb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c3bc0 <col:30> 'int' 0
|         `-DeclRefExpr 0x5591625c3be0 <col:33> 'T' lvalue ParmVar 0x55916258ef58 'x' 'T &'
|-FunctionTemplateDecl 0x55916258f438 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55916258f170 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55916258f398 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55916258f220 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916258f2c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5591625c3d98 <col:45, line:375:5>
|     `-ReturnStmt 0x5591625c3d88 <line:374:9, col:42>
|       `-CallExpr 0x5591625c3d50 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c3c70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c3cf0 <col:21> 'const char *' lvalue ParmVar 0x55916258f220 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c3d10 <col:30> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int'
|         `-DeclRefExpr 0x5591625c3d30 <col:41> 'T' lvalue ParmVar 0x55916258f2c8 'x' 'T &'
|-FunctionTemplateDecl 0x55916258f768 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55916258f4a0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55916258f6c8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55916258f550 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55916258f5f8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5591625c3ee8 <col:45, line:379:5>
| |   `-ReturnStmt 0x5591625c3ed8 <line:378:9, col:43>
| |     `-CallExpr 0x5591625c3ea0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5591625c3dc0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5591625c3e40 <col:21> 'const char *' lvalue ParmVar 0x55916258f550 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5591625c3e60 <col:30> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int'
| |       `-DeclRefExpr 0x5591625c3e80 <col:42> 'T' lvalue ParmVar 0x55916258f5f8 'x' 'T &'
| `-CXXMethodDecl 0x5591625f3c08 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5591625f3a28 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5591625f3af8 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x55916258fa98 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55916258f7d0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55916258f9f8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55916258f880 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916258f928 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5591625c40e8 <col:46, line:383:5>
|     `-ReturnStmt 0x5591625c40d8 <line:382:9, col:55>
|       `-CallExpr 0x5591625c40a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c3f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c3f90 <col:21> 'const char *' lvalue ParmVar 0x55916258f880 'keyword' 'const char *'
|         |-BinaryOperator 0x5591625c4060 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5591625c4010 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5591625c3ff0 <col:30> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5591625c4048 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5591625c4028 <col:42> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5591625c4080 <col:54> 'T' lvalue ParmVar 0x55916258f928 'x' 'T &'
|-FunctionTemplateDecl 0x55916258fe98 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55916258fb00 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55916258fdf8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55916258fbb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916258fc30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55916258fcd8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5591625c4228 <col:54, line:388:5>
|     |-CallExpr 0x5591625c41b0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c4100 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5591625c4140 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5591625c4150 <col:30> 'const char *' lvalue ParmVar 0x55916258fbb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5591625c4170 <col:39> 'int' lvalue ParmVar 0x55916258fc30 'flags' 'int'
|     | `-DeclRefExpr 0x5591625c4190 <col:46> 'T' lvalue ParmVar 0x55916258fcd8 'x' 'T &'
|     `-ReturnStmt 0x5591625c4218 <line:387:9, col:17>
|       `-UnaryOperator 0x5591625c4200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c41f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559162590348 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55916258ff08 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55916258ff88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5591625902a8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559162590048 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625900e8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x559162590188 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5591625c4398 <col:74, line:403:5>
|     `-ReturnStmt 0x5591625c4388 <line:402:9, col:56>
|       `-CallExpr 0x5591625c4348 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c4258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c42c8 <col:28> 'const char *' lvalue ParmVar 0x559162590048 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c42e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5591625c4308 <col:40> 'T' lvalue ParmVar 0x5591625900e8 'x' 'T &'
|         `-DeclRefExpr 0x5591625c4328 <col:43> 'const V' lvalue ParmVar 0x559162590188 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5591625907b8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5591625903b8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559162590438 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559162590718 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5591625904f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162590598 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x559162590638 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5591625c4500 <col:76, line:407:5>
|     `-ReturnStmt 0x5591625c44f0 <line:406:9, col:65>
|       `-CallExpr 0x5591625c44b0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c43c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c4430 <col:28> 'const char *' lvalue ParmVar 0x5591625904f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c4450 <col:37> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int'
|         |-DeclRefExpr 0x5591625c4470 <col:49> 'T' lvalue ParmVar 0x559162590598 'x' 'T &'
|         `-DeclRefExpr 0x5591625c4490 <col:52> 'const V' lvalue ParmVar 0x559162590638 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559162590d08 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x559162590828 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5591625908a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559162590c68 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559162590968 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625909e8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559162590a88 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x559162590b28 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5591625c4668 <col:85, line:412:5>
|     |-CallExpr 0x5591625c45e8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c4518 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5591625c4558 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5591625c4568 <col:37> 'const char *' lvalue ParmVar 0x559162590968 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5591625c4588 <col:46> 'int' lvalue ParmVar 0x5591625909e8 'flags' 'int'
|     | |-DeclRefExpr 0x5591625c45a8 <col:53> 'T' lvalue ParmVar 0x559162590a88 'x' 'T &'
|     | `-DeclRefExpr 0x5591625c45c8 <col:56> 'const V' lvalue ParmVar 0x559162590b28 'default_value' 'const V &'
|     `-ReturnStmt 0x5591625c4658 <line:411:9, col:17>
|       `-UnaryOperator 0x5591625c4640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c4630 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559162591198 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x559162590d80 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162590df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5591625910f8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559162590eb8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162590f30 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559162590fd8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5591625c47e8 <col:53, line:425:5>
|     `-ReturnStmt 0x5591625c47d8 <line:424:9, col:42>
|       `-CallExpr 0x5591625c4798 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c4698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c4718 <col:21> 'const char *' lvalue ParmVar 0x559162590eb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c4738 <col:30> 'int' 0
|         |-DeclRefExpr 0x5591625c4758 <col:33> 'P' lvalue ParmVar 0x559162590f30 'parser' 'P'
|         `-DeclRefExpr 0x5591625c4778 <col:41> 'T' lvalue ParmVar 0x559162590fd8 'x' 'T &'
|-FunctionTemplateDecl 0x5591625915e8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x559162591208 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162591288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559162591548 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559162591348 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625913c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559162591468 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5591625c4960 <col:55, line:429:5>
|     `-ReturnStmt 0x5591625c4950 <line:428:9, col:50>
|       `-CallExpr 0x5591625c4910 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c4810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c4890 <col:21> 'const char *' lvalue ParmVar 0x559162591348 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c48b0 <col:30> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int'
|         |-DeclRefExpr 0x5591625c48d0 <col:41> 'P' lvalue ParmVar 0x5591625913c0 'parser' 'P'
|         `-DeclRefExpr 0x5591625c48f0 <col:49> 'T' lvalue ParmVar 0x559162591468 'x' 'T &'
|-FunctionTemplateDecl 0x559162591a38 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x559162591658 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625916d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559162591998 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559162591798 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162591810 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5591625918b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5591625c4ad8 <col:55, line:433:5>
|     `-ReturnStmt 0x5591625c4ac8 <line:432:9, col:51>
|       `-CallExpr 0x5591625c4a88 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c4988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c4a08 <col:21> 'const char *' lvalue ParmVar 0x559162591798 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c4a28 <col:30> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int'
|         |-DeclRefExpr 0x5591625c4a48 <col:42> 'P' lvalue ParmVar 0x559162591810 'parser' 'P'
|         `-DeclRefExpr 0x5591625c4a68 <col:50> 'T' lvalue ParmVar 0x5591625918b8 'x' 'T &'
|-FunctionTemplateDecl 0x559162591e88 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x559162591aa8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162591b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559162591de8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559162591be8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162591c60 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x559162591d08 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5591625c4d00 <col:56, line:437:5>
|     `-ReturnStmt 0x5591625c4cf0 <line:436:9, col:63>
|       `-CallExpr 0x5591625c4cb0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c4b00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c4b80 <col:21> 'const char *' lvalue ParmVar 0x559162591be8 'keyword' 'const char *'
|         |-BinaryOperator 0x5591625c4c50 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5591625c4c00 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5591625c4be0 <col:30> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5591625c4c38 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5591625c4c18 <col:42> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5591625c4c70 <col:54> 'P' lvalue ParmVar 0x559162591c60 'parser' 'P'
|         `-DeclRefExpr 0x5591625c4c90 <col:62> 'T' lvalue ParmVar 0x559162591d08 'x' 'T &'
|-FunctionTemplateDecl 0x5591625923b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x559162591ef8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162591f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559162592318 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559162592038 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625920b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559162592130 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5591625921d8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5591625c4e68 <col:64, line:442:5>
|     |-CallExpr 0x5591625c4de8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c4d18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5591625c4d58 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5591625c4d68 <col:30> 'const char *' lvalue ParmVar 0x559162592038 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5591625c4d88 <col:39> 'int' lvalue ParmVar 0x5591625920b8 'flags' 'int'
|     | |-DeclRefExpr 0x5591625c4da8 <col:46> 'P' lvalue ParmVar 0x559162592130 'parser' 'P'
|     | `-DeclRefExpr 0x5591625c4dc8 <col:54> 'T' lvalue ParmVar 0x5591625921d8 'x' 'T &'
|     `-ReturnStmt 0x5591625c4e58 <line:441:9, col:17>
|       `-UnaryOperator 0x5591625c4e40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c4e30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5591625929b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x559162592430 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625924a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559162592528 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559162592918 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5591625925f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162592668 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559162592708 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5591625927d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5591625c5000 <col:84, line:458:5>
|     `-ReturnStmt 0x5591625c4ff0 <line:457:9, col:64>
|       `-CallExpr 0x5591625c4fa8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c4e98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c4f08 <col:28> 'const char *' lvalue ParmVar 0x5591625925f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c4f28 <col:37> 'int' 0
|         |-DeclRefExpr 0x5591625c4f48 <col:40> 'P' lvalue ParmVar 0x559162592668 'parser' 'P'
|         |-DeclRefExpr 0x5591625c4f68 <col:48> 'T' lvalue ParmVar 0x559162592708 'x' 'T &'
|         `-DeclRefExpr 0x5591625c4f88 <col:51> 'const V' lvalue ParmVar 0x5591625927d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559162592f38 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559162592a30 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162592aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559162592b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559162592e98 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559162592bf0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162592c68 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559162592d08 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x559162592da8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5591625c5190 <col:86, line:462:5>
|     `-ReturnStmt 0x5591625c5180 <line:461:9, col:73>
|       `-CallExpr 0x5591625c5138 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c5098 <col:28> 'const char *' lvalue ParmVar 0x559162592bf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c50b8 <col:37> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int'
|         |-DeclRefExpr 0x5591625c50d8 <col:49> 'P' lvalue ParmVar 0x559162592c68 'parser' 'P'
|         |-DeclRefExpr 0x5591625c50f8 <col:57> 'T' lvalue ParmVar 0x559162592d08 'x' 'T &'
|         `-DeclRefExpr 0x5591625c5118 <col:60> 'const V' lvalue ParmVar 0x559162592da8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559162593598 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x559162592fb0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162593028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5591625930a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5591625934f8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559162593170 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625931f0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559162593268 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x559162593308 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5591625933a8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5591625c5320 <col:95, line:467:5>
|     |-CallExpr 0x5591625c5298 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c51a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5591625c51e8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5591625c51f8 <col:37> 'const char *' lvalue ParmVar 0x559162593170 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5591625c5218 <col:46> 'int' lvalue ParmVar 0x5591625931f0 'flags' 'int'
|     | |-DeclRefExpr 0x5591625c5238 <col:53> 'P' lvalue ParmVar 0x559162593268 'parser' 'P'
|     | |-DeclRefExpr 0x5591625c5258 <col:61> 'T' lvalue ParmVar 0x559162593308 'x' 'T &'
|     | `-DeclRefExpr 0x5591625c5278 <col:64> 'const V' lvalue ParmVar 0x5591625933a8 'default_value' 'const V &'
|     `-ReturnStmt 0x5591625c5310 <line:466:9, col:17>
|       `-UnaryOperator 0x5591625c52f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c52e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559162593b78 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x559162593618 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162593698 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559162593718 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559162593ad8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5591625937e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162593858 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5591625938f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559162593998 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5591625c54c8 <col:63, line:481:5>
|     `-ReturnStmt 0x5591625c54b8 <line:480:9, col:47>
|       `-CallExpr 0x5591625c5470 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c53d0 <col:21> 'const char *' lvalue ParmVar 0x5591625937e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c53f0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5591625c5410 <col:33> 'P' lvalue ParmVar 0x559162593858 'parser' 'P'
|         |-DeclRefExpr 0x5591625c5430 <col:41> 'T1' lvalue ParmVar 0x5591625938f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5591625c5450 <col:45> 'T2' lvalue ParmVar 0x559162593998 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5591625940f8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x559162593bf0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162593c68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559162593ce8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559162594058 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559162593db0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162593e28 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559162593ec8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559162593f68 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5591625c5668 <col:65, line:485:5>
|     `-ReturnStmt 0x5591625c5658 <line:484:9, col:55>
|       `-CallExpr 0x5591625c5610 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c54f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c5570 <col:21> 'const char *' lvalue ParmVar 0x559162593db0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c5590 <col:30> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int'
|         |-DeclRefExpr 0x5591625c55b0 <col:41> 'P' lvalue ParmVar 0x559162593e28 'parser' 'P'
|         |-DeclRefExpr 0x5591625c55d0 <col:49> 'T1' lvalue ParmVar 0x559162593ec8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5591625c55f0 <col:53> 'T2' lvalue ParmVar 0x559162593f68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559162594678 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x559162594170 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625941e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559162594268 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5591625945d8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559162594330 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625943a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559162594448 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5591625944e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5591625c5808 <col:65, line:489:5>
|     `-ReturnStmt 0x5591625c57f8 <line:488:9, col:56>
|       `-CallExpr 0x5591625c57b0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c5710 <col:21> 'const char *' lvalue ParmVar 0x559162594330 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c5730 <col:30> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int'
|         |-DeclRefExpr 0x5591625c5750 <col:42> 'P' lvalue ParmVar 0x5591625943a8 'parser' 'P'
|         |-DeclRefExpr 0x5591625c5770 <col:50> 'T1' lvalue ParmVar 0x559162594448 'x1' 'T1 &'
|         `-DeclRefExpr 0x5591625c5790 <col:54> 'T2' lvalue ParmVar 0x5591625944e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55916259a0a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5591625946f0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559162594768 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5591625947e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55916259a008 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5591625948b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559162594928 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5591625949c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559162594a68 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5591625c5a58 <col:66, line:493:5>
|     `-ReturnStmt 0x5591625c5a48 <line:492:9, col:68>
|       `-CallExpr 0x5591625c5a00 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5830 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c58b0 <col:21> 'const char *' lvalue ParmVar 0x5591625948b0 'keyword' 'const char *'
|         |-BinaryOperator 0x5591625c5980 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5591625c5930 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5591625c5910 <col:30> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5591625c5968 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5591625c5948 <col:42> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5591625c59a0 <col:54> 'P' lvalue ParmVar 0x559162594928 'parser' 'P'
|         |-DeclRefExpr 0x5591625c59c0 <col:62> 'T1' lvalue ParmVar 0x5591625949c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5591625c59e0 <col:66> 'T2' lvalue ParmVar 0x559162594a68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55916259a708 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55916259a120 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259a198 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55916259a218 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55916259a668 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55916259a2e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259a360 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55916259a3d8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55916259a478 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55916259a518 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5591625c5be8 <col:74, line:498:5>
|     |-CallExpr 0x5591625c5b60 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c5a70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5591625c5ab0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5591625c5ac0 <col:30> 'const char *' lvalue ParmVar 0x55916259a2e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5591625c5ae0 <col:39> 'int' lvalue ParmVar 0x55916259a360 'flags' 'int'
|     | |-DeclRefExpr 0x5591625c5b00 <col:46> 'P' lvalue ParmVar 0x55916259a3d8 'parser' 'P'
|     | |-DeclRefExpr 0x5591625c5b20 <col:54> 'T1' lvalue ParmVar 0x55916259a478 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5591625c5b40 <col:58> 'T2' lvalue ParmVar 0x55916259a518 'x2' 'T2 &'
|     `-ReturnStmt 0x5591625c5bd8 <line:497:9, col:17>
|       `-UnaryOperator 0x5591625c5bc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c5bb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55916259aa68 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55916259a788 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259a9c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55916259a840 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259a8b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5591625c5d30 <col:52, line:509:5>
|     `-ReturnStmt 0x5591625c5d20 <line:508:9, col:44>
|       `-CallExpr 0x5591625c5ce8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5c18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c5c88 <col:26> 'const char *' lvalue ParmVar 0x55916259a840 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c5ca8 <col:35> 'int' 0
|         `-DeclRefExpr 0x5591625c5cc8 <col:38> 'P' lvalue ParmVar 0x55916259a8b8 'parser' 'P'
|-FunctionTemplateDecl 0x55916259ad68 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55916259aad0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259acc8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55916259ab80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259abf8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5591625c5e70 <col:54, line:513:5>
|     `-ReturnStmt 0x5591625c5e60 <line:512:9, col:52>
|       `-CallExpr 0x5591625c5e28 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5d58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c5dc8 <col:26> 'const char *' lvalue ParmVar 0x55916259ab80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c5de8 <col:35> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int'
|         `-DeclRefExpr 0x5591625c5e08 <col:46> 'P' lvalue ParmVar 0x55916259abf8 'parser' 'P'
|-FunctionTemplateDecl 0x55916259b068 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55916259add0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259afc8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55916259ae80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259aef8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5591625c5fb0 <col:54, line:517:5>
|     `-ReturnStmt 0x5591625c5fa0 <line:516:9, col:53>
|       `-CallExpr 0x5591625c5f68 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5e98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c5f08 <col:26> 'const char *' lvalue ParmVar 0x55916259ae80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c5f28 <col:35> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int'
|         `-DeclRefExpr 0x5591625c5f48 <col:47> 'P' lvalue ParmVar 0x55916259aef8 'parser' 'P'
|-FunctionTemplateDecl 0x55916259b368 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55916259b0d0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259b2c8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55916259b180 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259b1f8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5591625c61a0 <col:55, line:521:5>
|     `-ReturnStmt 0x5591625c6190 <line:520:9, col:65>
|       `-CallExpr 0x5591625c6158 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c5fd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c6048 <col:26> 'const char *' lvalue ParmVar 0x55916259b180 'keyword' 'const char *'
|         |-BinaryOperator 0x5591625c6118 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5591625c60c8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5591625c60a8 <col:35> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5591625c6100 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5591625c60e0 <col:47> 'const int' lvalue Var 0x55916258eb30 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5591625c6138 <col:59> 'P' lvalue ParmVar 0x55916259b1f8 'parser' 'P'
|-FunctionTemplateDecl 0x55916259b738 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55916259b3d0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259b698 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55916259b480 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259b500 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55916259b578 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5591625c62e0 <col:63, line:526:5>
|     |-CallExpr 0x5591625c6268 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c61b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5591625c61f8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5591625c6208 <col:35> 'const char *' lvalue ParmVar 0x55916259b480 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5591625c6228 <col:44> 'int' lvalue ParmVar 0x55916259b500 'flags' 'int'
|     | `-DeclRefExpr 0x5591625c6248 <col:51> 'P' lvalue ParmVar 0x55916259b578 'parser' 'P'
|     `-ReturnStmt 0x5591625c62d0 <line:525:9, col:17>
|       `-UnaryOperator 0x5591625c62b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c62a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55916259bb88 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55916259b7a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259b828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259bae8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55916259b8e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259b960 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55916259ba08 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5591625c6438 <col:58, line:541:5>
|     `-ReturnStmt 0x5591625c6428 <line:540:9, col:39>
|       `-CallExpr 0x5591625c63f0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c6310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c6390 <col:21> 'const char *' lvalue ParmVar 0x55916259b8e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c63b0 <col:30> 'P' lvalue ParmVar 0x55916259b960 'parser' 'P'
|         `-DeclRefExpr 0x5591625c63d0 <col:38> 'T' lvalue ParmVar 0x55916259ba08 'x' 'T &'
|-FunctionTemplateDecl 0x55916259bfd8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55916259bbf8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259bc78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259bf38 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55916259bd38 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259bdb0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55916259be58 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5591625c6570 <col:60, line:545:5>
|     `-ReturnStmt 0x5591625c6560 <line:544:9, col:41>
|       `-CallExpr 0x5591625c6528 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c6460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c64c8 <col:23> 'const char *' lvalue ParmVar 0x55916259bd38 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c64e8 <col:32> 'P' lvalue ParmVar 0x55916259bdb0 'parser' 'P'
|         `-DeclRefExpr 0x5591625c6508 <col:40> 'T' lvalue ParmVar 0x55916259be58 'x' 'T &'
|-FunctionTemplateDecl 0x55916259c428 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55916259c048 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259c0c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259c388 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55916259c188 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259c200 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55916259c2a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5591625c66a8 <col:60, line:549:5>
|     `-ReturnStmt 0x5591625c6698 <line:548:9, col:41>
|       `-CallExpr 0x5591625c6660 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c6598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c6600 <col:23> 'const char *' lvalue ParmVar 0x55916259c188 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c6620 <col:32> 'P' lvalue ParmVar 0x55916259c200 'parser' 'P'
|         `-DeclRefExpr 0x5591625c6640 <col:40> 'T' lvalue ParmVar 0x55916259c2a8 'x' 'T &'
|-FunctionTemplateDecl 0x55916259c878 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55916259c498 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259c518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259c7d8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55916259c5d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259c650 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55916259c6f8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5591625c67e0 <col:61, line:553:5>
|     `-ReturnStmt 0x5591625c67d0 <line:552:9, col:42>
|       `-CallExpr 0x5591625c6798 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c66d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c6738 <col:24> 'const char *' lvalue ParmVar 0x55916259c5d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c6758 <col:33> 'P' lvalue ParmVar 0x55916259c650 'parser' 'P'
|         `-DeclRefExpr 0x5591625c6778 <col:41> 'T' lvalue ParmVar 0x55916259c6f8 'x' 'T &'
|-FunctionTemplateDecl 0x55916259cd58 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55916259c8e8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259c968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259ccb8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55916259ca28 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259caa8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55916259cb20 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55916259cbc8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5591625c6958 <col:69, line:557:5>
|     `-ReturnStmt 0x5591625c6948 <line:556:9, col:46>
|       `-CallExpr 0x5591625c6908 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c6808 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c6888 <col:21> 'const char *' lvalue ParmVar 0x55916259ca28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c68a8 <col:30> 'int' lvalue ParmVar 0x55916259caa8 'flags' 'int'
|         |-DeclRefExpr 0x5591625c68c8 <col:37> 'P' lvalue ParmVar 0x55916259cb20 'parser' 'P'
|         `-DeclRefExpr 0x5591625c68e8 <col:45> 'T' lvalue ParmVar 0x55916259cbc8 'x' 'T &'
|-FunctionTemplateDecl 0x55916259d068 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55916259cdd0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259cfc8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55916259ce80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259cef8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5591625c6a98 <col:56, line:571:5>
|     `-ReturnStmt 0x5591625c6a88 <line:570:9, col:48>
|       `-CallExpr 0x5591625c6a50 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c6980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c69f0 <col:30> 'const char *' lvalue ParmVar 0x55916259ce80 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c6a10 <col:39> 'int' 0
|         `-DeclRefExpr 0x5591625c6a30 <col:42> 'P' lvalue ParmVar 0x55916259cef8 'parser' 'P'
|-FunctionTemplateDecl 0x55916259d3f8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55916259d0d0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55916259d358 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55916259d180 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259d200 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55916259d278 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5591625c6c68 <col:67, line:576:5>
|     |-CallExpr 0x5591625c6bf0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c6ab0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5591625c6af0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5591625c6b00 <col:39> 'const char *' lvalue ParmVar 0x55916259d180 'keyword' 'const char *'
|     | |-BinaryOperator 0x5591625c6bb0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5591625c6b60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5591625c6b20 <col:48> 'int' lvalue ParmVar 0x55916259d200 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5591625c6b98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5591625c6b78 <col:56> 'const int' lvalue Var 0x55916258ed20 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5591625c6bd0 <col:68> 'P' lvalue ParmVar 0x55916259d278 'parser' 'P'
|     `-ReturnStmt 0x5591625c6c58 <line:575:9, col:17>
|       `-UnaryOperator 0x5591625c6c40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c6c30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55916259d848 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55916259d468 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259d4e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259d7a8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55916259d5a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259d620 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55916259d6c8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5591625c6dd8 <col:62, line:592:5>
|     `-ReturnStmt 0x5591625c6dc8 <line:591:9, col:51>
|       `-CallExpr 0x5591625c6d88 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c6c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c6d08 <col:30> 'const char *' lvalue ParmVar 0x55916259d5a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c6d28 <col:39> 'int' 0
|         |-DeclRefExpr 0x5591625c6d48 <col:42> 'P' lvalue ParmVar 0x55916259d620 'parser' 'P'
|         `-DeclRefExpr 0x5591625c6d68 <col:50> 'T' lvalue ParmVar 0x55916259d6c8 'x' 'T &'
|-FunctionTemplateDecl 0x55916259dd28 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55916259d8b8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259d938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259dc88 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55916259d9f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259da78 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55916259daf0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55916259db98 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5591625c6fd0 <col:73, line:597:5>
|     |-CallExpr 0x5591625c6f50 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c6df0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5591625c6e30 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5591625c6e40 <col:39> 'const char *' lvalue ParmVar 0x55916259d9f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5591625c6ef0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5591625c6ea0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5591625c6e60 <col:48> 'int' lvalue ParmVar 0x55916259da78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5591625c6ed8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5591625c6eb8 <col:56> 'const int' lvalue Var 0x55916258ed20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5591625c6f10 <col:68> 'P' lvalue ParmVar 0x55916259daf0 'parser' 'P'
|     | `-DeclRefExpr 0x5591625c6f30 <col:76> 'T' lvalue ParmVar 0x55916259db98 'x' 'T &'
|     `-ReturnStmt 0x5591625c6fc0 <line:596:9, col:17>
|       `-UnaryOperator 0x5591625c6fa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c6f98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55916259e2d8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55916259dda0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259de18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259e238 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55916259ded8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259df50 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55916259e110 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5591625c7140 <col:65, line:614:5>
|     `-ReturnStmt 0x5591625c7130 <line:613:9, col:46>
|       `-CallExpr 0x5591625c70f0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c7000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c7070 <col:25> 'const char *' lvalue ParmVar 0x55916259ded8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c7090 <col:34> 'int' 0
|         |-DeclRefExpr 0x5591625c70b0 <col:37> 'P' lvalue ParmVar 0x55916259df50 'parser' 'P'
|         `-DeclRefExpr 0x5591625c70d0 <col:45> 'Vector<T>' lvalue ParmVar 0x55916259e110 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55916259e708 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55916259e348 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55916259e668 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55916259e400 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259e550 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5591625c7360 <col:55, line:618:5>
|     `-ReturnStmt 0x5591625c7350 <line:617:9, col:55>
|       `-CallExpr 0x5591625c7310 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c7168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c71d8 <col:25> 'const char *' lvalue ParmVar 0x55916259e400 'keyword' 'const char *'
|         |-IntegerLiteral 0x5591625c71f8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5591625c72d0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5591625c72f0 <col:54> 'Vector<T>' lvalue ParmVar 0x55916259e550 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55916259ecd8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55916259e770 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259e7e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259ec38 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55916259e8a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259e928 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55916259e9a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55916259eaf0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5591625c7558 <col:76, line:623:5>
|     |-CallExpr 0x5591625c74d8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5591625c7378 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5591625c73b8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5591625c73c8 <col:34> 'const char *' lvalue ParmVar 0x55916259e8a8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5591625c7478 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5591625c7428 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5591625c73e8 <col:43> 'int' lvalue ParmVar 0x55916259e928 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5591625c7460 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5591625c7440 <col:51> 'const int' lvalue Var 0x55916258ed20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5591625c7498 <col:63> 'P' lvalue ParmVar 0x55916259e9a0 'parser' 'P'
|     | `-DeclRefExpr 0x5591625c74b8 <col:71> 'Vector<T>' lvalue ParmVar 0x55916259eaf0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5591625c7548 <line:622:9, col:17>
|       `-UnaryOperator 0x5591625c7530 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c7520 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55916259f218 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55916259ed50 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55916259edc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55916259f178 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55916259ee88 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55916259ef08 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55916259f050 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5591625c77c0 <col:66, line:627:5>
|     `-ReturnStmt 0x5591625c77b0 <line:626:9, col:59>
|       `-CallExpr 0x5591625c7770 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5591625c7588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5591625c75f8 <col:25> 'const char *' lvalue ParmVar 0x55916259ee88 'keyword' 'const char *'
|         |-DeclRefExpr 0x5591625c7618 <col:34> 'int' lvalue ParmVar 0x55916259ef08 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5591625c7730 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5591625c7750 <col:58> 'Vector<T>' lvalue ParmVar 0x55916259f050 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55916259f2a8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5591625c7840 <col:25, line:633:5>
|   `-ReturnStmt 0x5591625c7830 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5591625c7818 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5591625c77e8 <col:16> 'const bool' lvalue ->_status 0x5591625acd48
|         `-CXXThisExpr 0x5591625c77d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55916259f428 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55916259f360 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5591625c7928 <col:27, line:639:5>
|   |-BinaryOperator 0x5591625c78d0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5591625c7858 <col:9> 'bool' lvalue ParmVar 0x55916259f360 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5591625c78b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5591625c7888 <col:13> 'bool' lvalue ->_status 0x5591625acd48
|   |     `-CXXThisExpr 0x5591625c7878 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5591625c7918 <line:638:9, col:17>
|     `-UnaryOperator 0x5591625c7900 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5591625c78f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55916259f5a8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55916259f4e8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5591625c7a18 <col:39, line:644:5>
|   |-BinaryOperator 0x5591625c79c0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5591625c7948 <col:9> 'bool' lvalue ParmVar 0x55916259f4e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5591625c79a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5591625c7978 <col:13> 'const bool' lvalue ->_status 0x5591625acd48
|   |     `-CXXThisExpr 0x5591625c7968 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5591625c7a08 <line:643:9, col:17>
|     `-UnaryOperator 0x5591625c79f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5591625c79e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55916259f670 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5591625c7ac0 <col:30, line:651:5>
|   `-ReturnStmt 0x5591625c7ab0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5591625c7a98 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5591625c7a68 <col:16> 'bool' lvalue ->_read_status 0x5591624a2e00
|         `-ImplicitCastExpr 0x5591625c7a48 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5591625c7a38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55916259f7b8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55916259f728 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5591625c7bc8 <col:32, line:658:5>
|   |-BinaryOperator 0x5591625c7b70 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5591625c7ad8 <col:9> 'bool' lvalue ParmVar 0x55916259f728 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5591625c7b58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5591625c7b28 <col:13> 'bool' lvalue ->_read_status 0x5591624a2e00
|   |     `-ImplicitCastExpr 0x5591625c7b08 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5591625c7af8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5591625c7bb8 <line:657:9, col:17>
|     `-UnaryOperator 0x5591625c7ba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5591625c7b90 <col:17> 'Args *' this
|-CXXMethodDecl 0x55916259f908 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55916259f878 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5591625c7cd8 <col:44, line:663:5>
|   |-BinaryOperator 0x5591625c7c80 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5591625c7be8 <col:9> 'bool' lvalue ParmVar 0x55916259f878 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5591625c7c68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5591625c7c38 <col:13> 'bool' lvalue ->_read_status 0x5591624a2e00
|   |     `-ImplicitCastExpr 0x5591625c7c18 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5591625c7c08 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5591625c7cc8 <line:662:9, col:17>
|     `-UnaryOperator 0x5591625c7cb0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5591625c7ca0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55916259f9d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55916259fa98 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55916259fb60 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55916259fc28 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55916259ff38 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55916259fcc8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55916259fe98 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55916259fda8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5591625c8090 <col:19, line:706:5>
|     `-IfStmt 0x5591625c8068 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5591625c7dd8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5591625c7f98 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5591625c7f68 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5591625c7f28 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5591625c7e30 <col:42> '<bound member function type>' ->simple_slot 0x5591625c11a0
|       |     | `-CXXThisExpr 0x5591625c7e20 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5591625c7ec8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5591625c7e80 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55916232ce68
|       |     | `-DeclRefExpr 0x5591625c7e60 <col:55> 'T' lvalue ParmVar 0x55916259fda8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5591625c7f08 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5591625c8058 <line:705:13, col:34>
|         `-CallExpr 0x5591625c8030 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5591625c7fb8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5591625c8010 <col:33> 'T' lvalue ParmVar 0x55916259fda8 'x' 'T &'
|-FunctionTemplateDecl 0x5591625a0208 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55916259ff98 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5591625a0168 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5591625a0078 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5591625c8470 <col:31, line:717:5>
|     |-DeclStmt 0x5591625c81d0 <line:713:9, col:23>
|     | `-VarDecl 0x5591625c80b8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5591625c81a8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5591625c8130 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5591625c8188 <col:21> 'T' lvalue ParmVar 0x5591625a0078 'x' 'T &'
|     |-IfStmt 0x5591625c8420 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5591625c82c8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5591625c8400 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5591625c83a0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5591625c8330 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|     |   | `-DeclRefExpr 0x5591625c8310 <col:14> 'T *' lvalue Var 0x5591625c80b8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5591625c83e0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5591625c8458 <line:716:9, col:16>
|       `-DeclRefExpr 0x5591625c8438 <col:16> 'T *' lvalue Var 0x5591625c80b8 's' 'T *'
|-FunctionTemplateDecl 0x5591625a0618 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5591625a0268 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5591625a02e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5591625a0578 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5591625a03c8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5591625a0468 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5591625c8780 <col:37, line:726:5>
|     |-IfStmt 0x5591625c8710 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5591625c8730 <line:723:13, col:26>
|     | | `-VarDecl 0x5591625c84d8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5591625c85c8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5591625c8550 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5591625c85a8 <col:25> 'T' lvalue ParmVar 0x5591625a03c8 'x' 'T &'
|     | |-DeclRefExpr 0x5591625c85f0 <col:16> 'T *' lvalue Var 0x5591625c84d8 's' 'T *'
|     | `-BinaryOperator 0x5591625c86f0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5591625c86a0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5591625c8630 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|     |   | `-DeclRefExpr 0x5591625c8610 <col:14> 'T *' lvalue Var 0x5591625c84d8 's' 'T *'
|     |   `-DeclRefExpr 0x5591625c86d0 <col:18> 'const V' lvalue ParmVar 0x5591625a0468 'value' 'const V &'
|     `-ReturnStmt 0x5591625c8770 <line:725:9, col:17>
|       `-UnaryOperator 0x5591625c8758 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5591625c8748 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5591625a0a18 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5591625a0680 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5591625a0978 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5591625a0730 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625a07b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5591625a0858 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5591625c95a0 <col:65, line:737:5>
|     |-DeclStmt 0x5591625c8818 <line:732:9, col:26>
|     | `-VarDecl 0x5591625c87b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5591625c9568 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5591625c9588 <line:733:13, col:58>
|       | `-VarDecl 0x5591625c8840 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5591625c8a20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5591625c89f0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5591625c89d8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5591625c89b8 <col:26, col:58> 'String' (CXXTemporary 0x5591625c89b8)
|       |           `-CXXMemberCallExpr 0x5591625c8948 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5591625c88b8 <col:26> '<bound member function type>' ->find 0x5591625c07b8
|       |             | `-CXXThisExpr 0x5591625c88a8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5591625c8980 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625c88e8 <col:31> 'const char *' lvalue ParmVar 0x5591625a0730 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5591625c8998 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625c8908 <col:40> 'int' lvalue ParmVar 0x5591625a07b0 'flags' 'int'
|       |             `-DeclRefExpr 0x5591625c8928 <col:47> 'Args::Slot *' lvalue Var 0x5591625c87b0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5591625c8ad8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5591625c8ac0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5591625c8aa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5591625c8a70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|       |       `-ImplicitCastExpr 0x5591625c8a58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5591625c8a38 <col:20> 'String' lvalue Var 0x5591625c8840 'str' 'String'
|       `-CompoundStmt 0x5591625c9548 <col:61, line:736:9>
|         |-DeclStmt 0x5591625c8f90 <line:734:13, col:76>
|         | `-VarDecl 0x5591625c8b28 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5591625c8f60 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5591625c8ed0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5591625c8f18 <col:60> 'T' lvalue ParmVar 0x5591625a0858 'variable' 'T &'
|         |     `-UnaryOperator 0x5591625c8f48 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5591625c8f38 <col:71> 'Args *' this
|         `-CallExpr 0x5591625c9518 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5591625c8fb8 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|           | `-CXXThisExpr 0x5591625c8fa8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5591625c94d8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5591625c8fe8 <col:23> 'T *' lvalue Var 0x5591625c8b28 's' 'T *'
|           | `-CallExpr 0x5591625c9498 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5591625c9270 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5591625c9370 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5591625c9390 <col:86> 'String' lvalue Var 0x5591625c8840 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5591625c9440 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5591625c93d0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|           |   | `-DeclRefExpr 0x5591625c93b0 <col:92> 'T *' lvalue Var 0x5591625c8b28 's' 'T *'
|           |   `-UnaryOperator 0x5591625c9480 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5591625c9470 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5591625c94f8 <col:103> 'Args::Slot *' lvalue Var 0x5591625c87b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5591625a0f68 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5591625a0a88 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5591625a0b08 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5591625a0ec8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5591625a0bc8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625a0c48 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5591625a0ce8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5591625a0d88 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5591625ca440 <col:88, line:745:5>
|     |-DeclStmt 0x5591625c9638 <line:741:9, col:26>
|     | `-VarDecl 0x5591625c95d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5591625c9858 <line:742:9, col:55>
|     | `-VarDecl 0x5591625c9660 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5591625c9840 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5591625c9810 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5591625c97f8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5591625c97d8 <col:22, col:54> 'String' (CXXTemporary 0x5591625c97d8)
|     |           `-CXXMemberCallExpr 0x5591625c9768 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5591625c96d8 <col:22> '<bound member function type>' ->find 0x5591625c07b8
|     |             | `-CXXThisExpr 0x5591625c96c8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5591625c97a0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5591625c9708 <col:27> 'const char *' lvalue ParmVar 0x5591625a0bc8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5591625c97b8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5591625c9728 <col:36> 'int' lvalue ParmVar 0x5591625a0c48 'flags' 'int'
|     |             `-DeclRefExpr 0x5591625c9748 <col:43> 'Args::Slot *' lvalue Var 0x5591625c95d0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5591625c9c30 <line:743:9, col:72>
|     | `-VarDecl 0x5591625c98a8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5591625c9c00 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5591625c9b70 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5591625c9bb8 <col:56> 'T' lvalue ParmVar 0x5591625a0ce8 'variable' 'T &'
|     |     `-UnaryOperator 0x5591625c9be8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5591625c9bd8 <col:67> 'Args *' this
|     `-CallExpr 0x5591625ca410 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5591625c9c58 <col:9> '<bound member function type>' ->postparse 0x5591625c09c8
|       | `-CXXThisExpr 0x5591625c9c48 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5591625ca3d0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5591625c9c88 <col:19> 'T *' lvalue Var 0x5591625c98a8 's' 'T *'
|       | `-ParenExpr 0x5591625ca3b0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5591625ca380 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5591625ca368 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5591625ca350 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5591625ca330 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5591625ca300 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|       |     |       `-ImplicitCastExpr 0x5591625ca2e8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5591625c9ca8 <col:25> 'String' lvalue Var 0x5591625c9660 'str' 'String'
|       |     |-CallExpr 0x5591625ca158 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5591625c9f30 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5591625ca030 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5591625ca050 <col:89> 'String' lvalue Var 0x5591625c9660 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5591625ca100 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5591625ca090 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|       |     | | `-DeclRefExpr 0x5591625ca070 <col:95> 'T *' lvalue Var 0x5591625c98a8 's' 'T *'
|       |     | `-UnaryOperator 0x5591625ca140 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5591625ca130 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5591625ca2c8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5591625ca2a8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5591625ca278 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5591625ca228 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5591625ca1b8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|       |         | | `-DeclRefExpr 0x5591625ca198 <col:109> 'T *' lvalue Var 0x5591625c98a8 's' 'T *'
|       |         | `-DeclRefExpr 0x5591625ca258 <col:113> 'const V' lvalue ParmVar 0x5591625a0d88 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5591625ca298 <col:120> 'bool' true
|       `-DeclRefExpr 0x5591625ca3f0 <col:128> 'Args::Slot *' lvalue Var 0x5591625c95d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5591625a1498 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5591625a0fe0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625a1058 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5591625a13f8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5591625a1118 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625a1198 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5591625a1210 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5591625a12b8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5591625cb038 <col:75, line:754:5>
|     |-DeclStmt 0x5591625ca4e8 <line:749:9, col:26>
|     | `-VarDecl 0x5591625ca480 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5591625cb000 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5591625cb020 <line:750:13, col:58>
|       | `-VarDecl 0x5591625ca510 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5591625ca6f0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5591625ca6c0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5591625ca6a8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5591625ca688 <col:26, col:58> 'String' (CXXTemporary 0x5591625ca688)
|       |           `-CXXMemberCallExpr 0x5591625ca618 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5591625ca588 <col:26> '<bound member function type>' ->find 0x5591625c07b8
|       |             | `-CXXThisExpr 0x5591625ca578 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5591625ca650 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625ca5b8 <col:31> 'const char *' lvalue ParmVar 0x5591625a1118 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5591625ca668 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625ca5d8 <col:40> 'int' lvalue ParmVar 0x5591625a1198 'flags' 'int'
|       |             `-DeclRefExpr 0x5591625ca5f8 <col:47> 'Args::Slot *' lvalue Var 0x5591625ca480 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5591625ca7a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5591625ca790 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5591625ca770 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5591625ca740 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|       |       `-ImplicitCastExpr 0x5591625ca728 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5591625ca708 <col:20> 'String' lvalue Var 0x5591625ca510 'str' 'String'
|       `-CompoundStmt 0x5591625cafe0 <col:61, line:753:9>
|         |-DeclStmt 0x5591625cab80 <line:751:13, col:63>
|         | `-VarDecl 0x5591625ca7f8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5591625cab50 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5591625caac0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5591625cab08 <col:47> 'T' lvalue ParmVar 0x5591625a12b8 'variable' 'T &'
|         |     `-UnaryOperator 0x5591625cab38 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5591625cab28 <col:58> 'Args *' this
|         `-CallExpr 0x5591625cafb0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5591625caba8 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|           | `-CXXThisExpr 0x5591625cab98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5591625caf70 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5591625cabd8 <col:23> 'T *' lvalue Var 0x5591625ca7f8 's' 'T *'
|           | `-CallExpr 0x5591625caf30 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5591625cadc0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5591625cae08 <col:56> 'P' lvalue ParmVar 0x5591625a1210 'parser' 'P'
|           |   |-DeclRefExpr 0x5591625cae28 <col:64> 'String' lvalue Var 0x5591625ca510 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5591625caed8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5591625cae68 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|           |   | `-DeclRefExpr 0x5591625cae48 <col:70> 'T *' lvalue Var 0x5591625ca7f8 's' 'T *'
|           |   `-UnaryOperator 0x5591625caf18 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5591625caf08 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5591625caf90 <col:81> 'Args::Slot *' lvalue Var 0x5591625ca480 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5591625a1af8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5591625a1510 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5591625a1588 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5591625a1608 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5591625a1a58 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5591625a16d0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625a1750 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5591625a17c8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5591625a1868 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5591625a1908 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5591625ce118 <col:98, line:762:5>
|     |-DeclStmt 0x5591625cb0d0 <line:758:9, col:26>
|     | `-VarDecl 0x5591625cb068 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5591625cb2f0 <line:759:9, col:55>
|     | `-VarDecl 0x5591625cb0f8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5591625cb2d8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5591625cb2a8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5591625cb290 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5591625cb270 <col:22, col:54> 'String' (CXXTemporary 0x5591625cb270)
|     |           `-CXXMemberCallExpr 0x5591625cb200 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5591625cb170 <col:22> '<bound member function type>' ->find 0x5591625c07b8
|     |             | `-CXXThisExpr 0x5591625cb160 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5591625cb238 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5591625cb1a0 <col:27> 'const char *' lvalue ParmVar 0x5591625a16d0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5591625cb250 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5591625cb1c0 <col:36> 'int' lvalue ParmVar 0x5591625a1750 'flags' 'int'
|     |             `-DeclRefExpr 0x5591625cb1e0 <col:43> 'Args::Slot *' lvalue Var 0x5591625cb068 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5591625cb710 <line:760:9, col:59>
|     | `-VarDecl 0x5591625cb348 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5591625cb6e0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5591625cb650 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5591625cb698 <col:43> 'T' lvalue ParmVar 0x5591625a1868 'variable' 'T &'
|     |     `-UnaryOperator 0x5591625cb6c8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5591625cb6b8 <col:54> 'Args *' this
|     `-CallExpr 0x5591625ce0e8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5591625cb738 <col:9> '<bound member function type>' ->postparse 0x5591625c09c8
|       | `-CXXThisExpr 0x5591625cb728 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5591625ce0a8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5591625cb768 <col:19> 'T *' lvalue Var 0x5591625cb348 's' 'T *'
|       | `-ParenExpr 0x5591625ce088 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5591625ce058 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5591625ce040 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5591625ce028 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5591625ce008 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5591625cdfd8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|       |     |       `-ImplicitCastExpr 0x5591625cdfc0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5591625cb788 <col:25> 'String' lvalue Var 0x5591625cb0f8 'str' 'String'
|       |     |-CallExpr 0x5591625cde30 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5591625cdcc0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5591625cdd08 <col:59> 'P' lvalue ParmVar 0x5591625a17c8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5591625cdd28 <col:67> 'String' lvalue Var 0x5591625cb0f8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5591625cddd8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5591625cdd68 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|       |     | | `-DeclRefExpr 0x5591625cdd48 <col:73> 'T *' lvalue Var 0x5591625cb348 's' 'T *'
|       |     | `-UnaryOperator 0x5591625cde18 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5591625cde08 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5591625cdfa0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5591625cdf80 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5591625cdf50 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5591625cdf00 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5591625cde90 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|       |         | | `-DeclRefExpr 0x5591625cde70 <col:87> 'T *' lvalue Var 0x5591625cb348 's' 'T *'
|       |         | `-DeclRefExpr 0x5591625cdf30 <col:91> 'const V' lvalue ParmVar 0x5591625a1908 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5591625cdf70 <col:98> 'bool' true
|       `-DeclRefExpr 0x5591625ce0c8 <col:106> 'Args::Slot *' lvalue Var 0x5591625cb068 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5591625a9dc8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5591625a1b78 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625a1bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5591625a1c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5591625a9d28 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5591625a1d40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625a1dc0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5591625a1e38 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5591625a1ed8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5591625a9bd0 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5591625cf0f8 <col:60, line:773:5>
|     |-DeclStmt 0x5591625ce1c0 <line:767:9, col:26>
|     | `-VarDecl 0x5591625ce158 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5591625cf0c0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5591625cf0e0 <line:768:13, col:58>
|       | `-VarDecl 0x5591625ce1e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5591625ce3c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5591625ce398 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5591625ce380 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5591625ce360 <col:26, col:58> 'String' (CXXTemporary 0x5591625ce360)
|       |           `-CXXMemberCallExpr 0x5591625ce2f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5591625ce260 <col:26> '<bound member function type>' ->find 0x5591625c07b8
|       |             | `-CXXThisExpr 0x5591625ce250 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5591625ce328 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625ce290 <col:31> 'const char *' lvalue ParmVar 0x5591625a1d40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5591625ce340 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625ce2b0 <col:40> 'int' lvalue ParmVar 0x5591625a1dc0 'flags' 'int'
|       |             `-DeclRefExpr 0x5591625ce2d0 <col:47> 'Args::Slot *' lvalue Var 0x5591625ce158 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5591625ce480 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5591625ce468 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5591625ce448 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5591625ce418 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|       |       `-ImplicitCastExpr 0x5591625ce400 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5591625ce3e0 <col:20> 'String' lvalue Var 0x5591625ce1e8 'str' 'String'
|       `-CompoundStmt 0x5591625cf098 <col:61, line:772:9>
|         |-DeclStmt 0x5591625ce7c0 <line:769:13, col:66>
|         | `-VarDecl 0x5591625ce4d8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5591625ce790 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5591625ce700 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5591625ce748 <col:49> 'T1' lvalue ParmVar 0x5591625a1ed8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5591625ce778 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5591625ce768 <col:61> 'Args *' this
|         |-DeclStmt 0x5591625ceb30 <line:770:13, col:66>
|         | `-VarDecl 0x5591625ce848 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5591625ceb00 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5591625cea70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5591625ceab8 <col:49> 'T2' lvalue ParmVar 0x5591625a9bd0 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5591625ceae8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5591625cead8 <col:61> 'Args *' this
|         `-CallExpr 0x5591625cf068 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5591625ceb58 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|           | `-CXXThisExpr 0x5591625ceb48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5591625cf028 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5591625cebc8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5591625ceb88 <col:23> 'T1 *' lvalue Var 0x5591625ce4d8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5591625ceba8 <col:29> 'T2 *' lvalue Var 0x5591625ce848 's2' 'T2 *'
|           | `-CallExpr 0x5591625cefe0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5591625cedb0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5591625cedf8 <col:63> 'P' lvalue ParmVar 0x5591625a1e38 'parser' 'P'
|           |   |-DeclRefExpr 0x5591625cee18 <col:71> 'String' lvalue Var 0x5591625ce1e8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5591625ceec8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5591625cee58 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|           |   | `-DeclRefExpr 0x5591625cee38 <col:77> 'T1 *' lvalue Var 0x5591625ce4d8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5591625cef88 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5591625cef18 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|           |   | `-DeclRefExpr 0x5591625ceef8 <col:82> 'T2 *' lvalue Var 0x5591625ce848 's2' 'T2 *'
|           |   `-UnaryOperator 0x5591625cefc8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5591625cefb8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5591625cf048 <col:94> 'Args::Slot *' lvalue Var 0x5591625ce158 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5591625aa1b8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5591625a9e48 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5591625aa118 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5591625a9f00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625a9f80 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5591625a9ff8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5591625cf610 <col:67, line:780:5>
|     |-DeclStmt 0x5591625cf190 <line:777:9, col:26>
|     | `-VarDecl 0x5591625cf128 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5591625cf5d8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5591625cf5f8 <line:778:13, col:58>
|       | `-VarDecl 0x5591625cf1b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5591625cf398 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5591625cf368 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5591625cf350 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5591625cf330 <col:26, col:58> 'String' (CXXTemporary 0x5591625cf330)
|       |           `-CXXMemberCallExpr 0x5591625cf2c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5591625cf230 <col:26> '<bound member function type>' ->find 0x5591625c07b8
|       |             | `-CXXThisExpr 0x5591625cf220 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5591625cf2f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625cf260 <col:31> 'const char *' lvalue ParmVar 0x5591625a9f00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5591625cf310 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5591625cf280 <col:40> 'int' lvalue ParmVar 0x5591625a9f80 'flags' 'int'
|       |             `-DeclRefExpr 0x5591625cf2a0 <col:47> 'Args::Slot *' lvalue Var 0x5591625cf128 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5591625cf450 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5591625cf438 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5591625cf418 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5591625cf3e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|       |       `-ImplicitCastExpr 0x5591625cf3d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5591625cf3b0 <col:20> 'String' lvalue Var 0x5591625cf1b8 'str' 'String'
|       `-CallExpr 0x5591625cf5a8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5591625cf478 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|         | `-CXXThisExpr 0x5591625cf468 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5591625cf558 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5591625cf4c8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5591625cf4a8 <col:23> 'P' lvalue ParmVar 0x5591625a9ff8 'parser' 'P'
|         | |-DeclRefExpr 0x5591625cf510 <col:36> 'String' lvalue Var 0x5591625cf1b8 'str' 'String'
|         | `-UnaryOperator 0x5591625cf540 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5591625cf530 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5591625cf588 <col:49> 'Args::Slot *' lvalue Var 0x5591625cf128 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5591625aa558 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5591625aa228 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5591625aa4b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5591625aa2e0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625aa360 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5591625aa3d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5591625cff80 <col:71, line:792:5>
|     |-DeclStmt 0x5591625cf6a8 <line:784:9, col:26>
|     | `-VarDecl 0x5591625cf640 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5591625cf778 <line:785:9, col:29>
|     | `-VarDecl 0x5591625cf6d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5591625cf760 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5591625cf740 <col:28> 'int' 1
|     |-WhileStmt 0x5591625cfe30 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5591625cfe50 <line:786:16, col:61>
|     | | `-VarDecl 0x5591625cf7a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5591625cf980 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5591625cf950 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5591625cf938 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5591625cf918 <col:29, col:61> 'String' (CXXTemporary 0x5591625cf918)
|     | |           `-CXXMemberCallExpr 0x5591625cf8a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5591625cf818 <col:29> '<bound member function type>' ->find 0x5591625c07b8
|     | |             | `-CXXThisExpr 0x5591625cf808 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5591625cf8e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5591625cf848 <col:34> 'const char *' lvalue ParmVar 0x5591625aa2e0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5591625cf8f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5591625cf868 <col:43> 'int' lvalue ParmVar 0x5591625aa360 'flags' 'int'
|     | |             `-DeclRefExpr 0x5591625cf888 <col:50> 'Args::Slot *' lvalue Var 0x5591625cf640 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5591625cfa38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5591625cfa20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5591625cfa00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5591625cf9d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|     | |       `-ImplicitCastExpr 0x5591625cf9b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5591625cf998 <col:23> 'String' lvalue Var 0x5591625cf7a0 'str' 'String'
|     | `-CompoundStmt 0x5591625cfe08 <col:64, line:790:9>
|     |   |-CallExpr 0x5591625cfb90 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5591625cfa60 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|     |   | | `-CXXThisExpr 0x5591625cfa50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5591625cfb40 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5591625cfab0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5591625cfa90 <col:23> 'P' lvalue ParmVar 0x5591625aa3d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5591625cfaf8 <col:36> 'String' lvalue Var 0x5591625cf7a0 'str' 'String'
|     |   | | `-UnaryOperator 0x5591625cfb28 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5591625cfb18 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5591625cfb70 <col:49> 'Args::Slot *' lvalue Var 0x5591625cf640 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5591625cfd28 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5591625cfbc0 <col:13> 'int' lvalue Var 0x5591625cf6d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5591625cfd10 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5591625cfcf0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5591625cfc58 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5591625cfc38 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5591625cfc20 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5591625cfbe0 <col:28> 'int' lvalue Var 0x5591625cf6d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5591625cfc00 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5591625cfcd8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5591625cfca8 <col:49> 'bool' lvalue ->_read_status 0x5591624a2e00
|     |   |         `-ImplicitCastExpr 0x5591625cfc88 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5591625cfc78 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5591625cfdd8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5591625cfd48 <col:13> 'int' lvalue ParmVar 0x5591625aa360 'flags' 'int'
|     |     `-UnaryOperator 0x5591625cfdc0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5591625cfda8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5591625cfd88 <col:23> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5591625cff60 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5591625cfe98 <col:9> 'bool' lvalue ->_read_status 0x5591624a2e00
|       | `-ImplicitCastExpr 0x5591625cfe78 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5591625cfe68 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5591625cff40 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5591625cff20 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5591625cff08 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5591625cfec8 <col:25> 'int' lvalue Var 0x5591625cf6d8 'read_status' 'int'
|           `-IntegerLiteral 0x5591625cfee8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5591625aaa38 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5591625aa5c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625aa648 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5591625aa998 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5591625aa708 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625aa788 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5591625aa800 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5591625aa8a8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5591625d0f10 <col:84, line:805:5>
|     |-DeclStmt 0x5591625d0028 <line:796:9, col:26>
|     | `-VarDecl 0x5591625cffc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5591625d00f8 <line:797:9, col:29>
|     | `-VarDecl 0x5591625d0058 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5591625d00e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5591625d00c0 <col:28> 'int' 1
|     |-DeclStmt 0x5591625d0430 <line:798:9, col:71>
|     | `-VarDecl 0x5591625d0148 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5591625d0400 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5591625d0370 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5591625d03b8 <col:55> 'T' lvalue ParmVar 0x5591625aa8a8 'variable' 'T &'
|     |     `-UnaryOperator 0x5591625d03e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5591625d03d8 <col:66> 'Args *' this
|     |-WhileStmt 0x5591625d0dc0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5591625d0de0 <line:799:16, col:61>
|     | | `-VarDecl 0x5591625d0458 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5591625d0638 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5591625d0608 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5591625d05f0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5591625d05d0 <col:29, col:61> 'String' (CXXTemporary 0x5591625d05d0)
|     | |           `-CXXMemberCallExpr 0x5591625d0560 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5591625d04d0 <col:29> '<bound member function type>' ->find 0x5591625c07b8
|     | |             | `-CXXThisExpr 0x5591625d04c0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5591625d0598 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5591625d0500 <col:34> 'const char *' lvalue ParmVar 0x5591625aa708 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5591625d05b0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5591625d0520 <col:43> 'int' lvalue ParmVar 0x5591625aa788 'flags' 'int'
|     | |             `-DeclRefExpr 0x5591625d0540 <col:50> 'Args::Slot *' lvalue Var 0x5591625cffc0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5591625d06f0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5591625d06d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5591625d06b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5591625d0688 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|     | |       `-ImplicitCastExpr 0x5591625d0670 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5591625d0650 <col:23> 'String' lvalue Var 0x5591625d0458 'str' 'String'
|     | `-CompoundStmt 0x5591625d0d98 <col:64, line:803:9>
|     |   |-CallExpr 0x5591625d0b20 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5591625d0718 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|     |   | | `-CXXThisExpr 0x5591625d0708 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5591625d0ae0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5591625d0748 <col:23> 'T *' lvalue Var 0x5591625d0148 's' 'T *'
|     |   | | `-CallExpr 0x5591625d0aa0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5591625d0930 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5591625d0978 <col:56> 'P' lvalue ParmVar 0x5591625aa800 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5591625d0998 <col:64> 'String' lvalue Var 0x5591625d0458 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5591625d0a48 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5591625d09d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|     |   | |   | `-DeclRefExpr 0x5591625d09b8 <col:70> 'T *' lvalue Var 0x5591625d0148 's' 'T *'
|     |   | |   `-UnaryOperator 0x5591625d0a88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5591625d0a78 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5591625d0b00 <col:81> 'Args::Slot *' lvalue Var 0x5591625cffc0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5591625d0cb8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5591625d0b50 <col:13> 'int' lvalue Var 0x5591625d0058 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5591625d0ca0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5591625d0c80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5591625d0be8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5591625d0bc8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5591625d0bb0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5591625d0b70 <col:28> 'int' lvalue Var 0x5591625d0058 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5591625d0b90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5591625d0c68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5591625d0c38 <col:49> 'bool' lvalue ->_read_status 0x5591624a2e00
|     |   |         `-ImplicitCastExpr 0x5591625d0c18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5591625d0c08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5591625d0d68 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5591625d0cd8 <col:13> 'int' lvalue ParmVar 0x5591625aa788 'flags' 'int'
|     |     `-UnaryOperator 0x5591625d0d50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5591625d0d38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5591625d0d18 <col:23> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5591625d0ef0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5591625d0e28 <col:9> 'bool' lvalue ->_read_status 0x5591624a2e00
|       | `-ImplicitCastExpr 0x5591625d0e08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5591625d0df8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5591625d0ed0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5591625d0eb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5591625d0e98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5591625d0e58 <col:25> 'int' lvalue Var 0x5591625d0058 'read_status' 'int'
|           `-IntegerLiteral 0x5591625d0e78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5591625ab018 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5591625aaab0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5591625aab28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5591625aaf78 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5591625aabe8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5591625aac68 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5591625aace0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5591625aae30 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5591625d1d18 <col:87, line:821:5>
|     |-DeclStmt 0x5591625d0fc0 <line:809:9, col:26>
|     | `-VarDecl 0x5591625d0f58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5591625d1090 <line:810:9, col:29>
|     | `-VarDecl 0x5591625d0ff0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5591625d1078 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5591625d1058 <col:28> 'int' 1
|     |-DeclStmt 0x5591625d12d8 <line:811:9, col:38>
|     | `-VarDecl 0x5591625d11c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5591625d12b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5591625d1238 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5591625d1290 <col:29> 'Vector<T>' lvalue ParmVar 0x5591625aae30 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5591625d1bc8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5591625d1be8 <line:812:16, col:61>
|     | | `-VarDecl 0x5591625d1300 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5591625d14e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5591625d14b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5591625d1498 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5591625d1478 <col:29, col:61> 'String' (CXXTemporary 0x5591625d1478)
|     | |           `-CXXMemberCallExpr 0x5591625d1408 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5591625d1378 <col:29> '<bound member function type>' ->find 0x5591625c07b8
|     | |             | `-CXXThisExpr 0x5591625d1368 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5591625d1440 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5591625d13a8 <col:34> 'const char *' lvalue ParmVar 0x5591625aabe8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5591625d1458 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5591625d13c8 <col:43> 'int' lvalue ParmVar 0x5591625aac68 'flags' 'int'
|     | |             `-DeclRefExpr 0x5591625d13e8 <col:50> 'Args::Slot *' lvalue Var 0x5591625d0f58 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5591625d1598 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5591625d1580 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5591625d1560 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5591625d1530 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5591622efe38
|     | |       `-ImplicitCastExpr 0x5591625d1518 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5591625d14f8 <col:23> 'String' lvalue Var 0x5591625d1300 'str' 'String'
|     | `-CompoundStmt 0x5591625d1b90 <col:64, line:819:9>
|     |   |-DeclStmt 0x5591625d1658 <line:813:13, col:23>
|     |   | `-VarDecl 0x5591625d15c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5591625d1638 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5591625d17d8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5591625d1680 <col:13> '<bound member function type>' ->postparse 0x5591625c09c8
|     |   | | `-CXXThisExpr 0x5591625d1670 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5591625d1780 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5591625d16d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5591625d16b0 <col:23> 'P' lvalue ParmVar 0x5591625aace0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5591625d1718 <col:36> 'String' lvalue Var 0x5591625d1300 'str' 'String'
|     |   | | |-DeclRefExpr 0x5591625d1738 <col:41> 'T' lvalue Var 0x5591625d15c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5591625d1768 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5591625d1758 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5591625d17b8 <col:53> 'Args::Slot *' lvalue Var 0x5591625d0f58 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5591625d1930 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5591625d1868 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5591625d1838 <col:17> 'bool' lvalue ->_read_status 0x5591624a2e00
|     |   | |   `-ImplicitCastExpr 0x5591625d1818 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5591625d1808 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5591625d1908 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5591625d18a0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5591625d1880 <col:17> 'Vector<T> *' lvalue Var 0x5591625d11c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5591625d18e8 <col:30> 'T' lvalue Var 0x5591625d15c0 'sx' 'T'
|     |   |-BinaryOperator 0x5591625d1ab0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5591625d1948 <col:13> 'int' lvalue Var 0x5591625d0ff0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5591625d1a98 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5591625d1a78 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5591625d19e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5591625d19c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5591625d19a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5591625d1968 <col:28> 'int' lvalue Var 0x5591625d0ff0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5591625d1988 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5591625d1a60 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5591625d1a30 <col:49> 'bool' lvalue ->_read_status 0x5591624a2e00
|     |   |         `-ImplicitCastExpr 0x5591625d1a10 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5591625d1a00 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5591625d1b60 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5591625d1ad0 <col:13> 'int' lvalue ParmVar 0x5591625aac68 'flags' 'int'
|     |     `-UnaryOperator 0x5591625d1b48 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5591625d1b30 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5591625d1b10 <col:23> 'const int' lvalue Var 0x55916258ea38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5591625d1cf8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5591625d1c30 <col:9> 'bool' lvalue ->_read_status 0x5591624a2e00
|       | `-ImplicitCastExpr 0x5591625d1c10 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5591625d1c00 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5591625d1cd8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5591625d1cb8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5591625d1ca0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5591625d1c60 <col:25> 'int' lvalue Var 0x5591625d0ff0 'read_status' 'int'
|           `-IntegerLiteral 0x5591625d1c80 <col:40> 'int' 1
|-AccessSpecDecl 0x5591625ab090 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5591625ab0b8 prev 0x55916258cd38 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5591625ab1b0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5591625ab2a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5591625d1d50 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5591625ab390 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5591625d1d60 <col:25, line:830:9>
| |-CXXMethodDecl 0x5591625ab490 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5591625ab540 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5591625ab5e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5591625ab5e8
| | `-ParmVarDecl 0x5591625ab6f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5591625abeb8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5591625abeb8
|   `-ParmVarDecl 0x5591625abfc8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5591625ab768 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5591625ab8c8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5591625abac0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5591625ab970 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5591625ab9e8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5591625d1f40 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5591625abd78 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5591625d1db0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5591625d1d70 <col:20> 'void *' lvalue ParmVar 0x5591625ab970 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5591625abde0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5591625d1e38 <col:32, col:45> 'char *' array Function 0x559162112aa8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5591625d1e20 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5591625d1df0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5591625ab9e8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5591625abe40 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5591625d1f00 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5591625d1ec0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5591625ab9e8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5591625d1fc0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5591625abbc0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5591625ab390 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5591625d2048 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5591625d2028 <line:840:13, col:22> 'void' array Function 0x559162112e08 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5591625d2010 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5591625d1fe0 <col:22> 'char *' lvalue ->_slot 0x5591625abde0
| |         `-CXXThisExpr 0x5591625d1fd0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5591625abcc0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5591625ab490 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5591625d2238 <col:22, line:844:9>
| |   `-CallExpr 0x5591625d21a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5591625d2188 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5591625d2168 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55916221e888 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5591625d21d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5591625d20b8 <col:20> 'void *' lvalue ->_ptr 0x5591625abd78
| |     |   `-CXXThisExpr 0x5591625d20a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5591625d2208 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5591625d21f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5591625d20f8 <col:26> 'char *' lvalue ->_slot 0x5591625abde0
| |     |     `-CXXThisExpr 0x5591625d20e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5591625d2220 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5591625d2138 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5591625abe40
| |         `-CXXThisExpr 0x5591625d2128 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5591625abd78 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5591625abde0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5591625abe40 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5591625ac038 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5591625ac038
| | `-ParmVarDecl 0x5591625ac148 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5591625ac1e8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5591625ac1e8
|   `-ParmVarDecl 0x5591625ac2f8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5591625ac498 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5591625ac368 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5591625ac408 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5591625ac730 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5591625ac928 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5591625ac7f8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5591625acaa8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5591625d2270 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5591625d2250 <col:20> 'T *' lvalue ParmVar 0x5591625ac7f8 'ptr' 'T *'
|   | `-CompoundStmt 0x5591625d22c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5591625ac9f8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5591625ab490 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5591625d2470 <col:22, line:857:9>
|   |   `-CallExpr 0x5591625d2440 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5591625d22d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5591622d6fb8 0x5591622812e8
|   |     |-CXXOperatorCallExpr 0x5591625d23d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5591625d2360 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5591624e3f68 0x5591624e3b88 0x5591624e37b8 0x5591624e33d8 0x5591624e2ff8 0x5591624e2c28
|   |     | `-MemberExpr 0x5591625d2330 <col:29> 'T *' lvalue ->_ptr 0x5591625acaa8
|   |     |   `-CXXThisExpr 0x5591625d2320 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5591625d2410 <col:35> 'T' lvalue ->_slot 0x5591625acb08
|   |       `-CXXThisExpr 0x5591625d2400 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5591625acaa8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5591625acb08 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5591625acb70 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5591625acc70 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5591625accc0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591625acc50 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5591625acc30 <col:31> 'int' 48
|-FieldDecl 0x5591625acce8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5591625acd48 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5591625acda8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5591625acee0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5591625c0060 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5591625c00c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5591625c0170 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5591625c0398 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5591625c02a0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5591625c04e8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5591625c0458 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5591625c07b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5591625c05a8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5591625c0628 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5591625c06d0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5591625c09c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5591625c0880 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5591625c08f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5591625c0a98 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5591625c0be8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5591625c0b50 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5591625c0f78 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5591625c0ca8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5591625c0d28 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5591625c0dd0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5591625c0e88 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5591625c11a0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5591625c1050 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5591625c10c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5591625c14b8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5591625c1250 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5591625c1418 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5591625c1328 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591622dfce0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5591622dfdf8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5591622dfe88 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5591622dff58 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5591622e0040 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5591622e0258 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5591622e0100 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e0408 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5591622e0310 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5591622e0550 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5591622e04c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5591622e0698 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5591622e0608 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e07e0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5591622e0750 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e08a8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5591622e09f0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5591622e0960 <col:28> col:31 'int'
|-CXXMethodDecl 0x5591622e0ab8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5591622e0c00 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5591622e0b70 <col:28> col:31 'int'
|-CXXMethodDecl 0x5591622e0d78 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5591622e0cb8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e0ec0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5591622e0e30 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e0f88 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5591622e1148 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5591622e1038 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5591622e10b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e1398 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5591622e1208 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5591622e1280 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5591622e1448 <col:86> "" ""
|-CXXMethodDecl 0x5591622e16b8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5591622e1528 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5591622e15a0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e1868 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5591622e1778 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5591622e1a18 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5591622e1920 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5591622e1ce8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5591622e1ad0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5591622e1b48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5591622e1bc0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e1fc8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5591622e1db0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5591622e1e28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5591622e1ea0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5591622e2080 <col:115> "" ""
|-AccessSpecDecl 0x5591622e20f0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5591622e2128 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591622e3640 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5591622e3640
| `-ParmVarDecl 0x5591622e3748 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5591622e37e8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5591622e37e8
| `-ParmVarDecl 0x5591622e38f8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x559162318f28 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55916250ad20 <col:7>
|-CXXConstructorDecl 0x559162319000 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559162319000
| `-ParmVarDecl 0x559162319118 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x559162319188 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559162319188
| `-ParmVarDecl 0x559162319298 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55916250d720 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591624f98c8 prev 0x5591624eead0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5591624f99c0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5591624f9ab0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5591624f9bd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5591624f9d58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5591624f9ed8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5591624fa058 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55916250ae88 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55916250b6f8 <col:11>
|-CXXDestructorDecl 0x55916250af60 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55916250b098 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55916250b098
| `-ParmVarDecl 0x55916250b1a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55916250b248 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55916250b248
| `-ParmVarDecl 0x55916250b358 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55916250e118 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55916250e228 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55916250e4a8 <col:11>
|   `-ReturnStmt 0x55916250e498 <col:11>
|     `-UnaryOperator 0x55916250e480 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55916250e470 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55916250e298 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55916250e298
  `-ParmVarDecl 0x55916250e3a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591624fa0c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5591624fa1d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5591624fa278 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5591624fa2e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5591624fa348 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5591624fa3b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5591624fa410 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5591624fa4d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5591624fa530 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5591624fa590 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55916250ad98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5591624fa278 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55916250b708 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55916250b760 <col:12>
|-CXXConstructorDecl 0x55916250b3c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55916250b3c8
| `-ParmVarDecl 0x55916250b4d8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55916250b578 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55916250b578
| `-ParmVarDecl 0x55916250b688 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55916250d800 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591624e81e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5591624e82f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5591624e8388 <col:16, col:22> col:16 public
|-EnumDecl 0x5591624e83b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5591624e84b0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5591624e8590 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624e8490 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5591624e8470 <col:21> 'int' 28
| `-EnumConstantDecl 0x5591624e8540 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5591624e85a8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591624e8520 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5591624e8500 <col:22> 'int' 64
|-CXXMethodDecl 0x5591624e88e8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5591624e85d0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5591624e8650 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5591624e86c8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5591624e8740 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5591624e89a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5591624e8ba8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5591624e8a20 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5591624e8a98 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5591624e8c58 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5591624e8db8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5591624e8cc8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5591624e8e60 <col:72> warn_unused_result ""
|-TypedefDecl 0x5591624e91c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5591624e9150 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5591624e90f0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5591624e90b0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x559161fc02d0 'void'
|       |-PointerType 0x559162268580 'unsigned char *'
|       | `-BuiltinType 0x559161fc03d0 'unsigned char'
|       |-TypedefType 0x559162064af0 'size_t' sugar
|       | |-Typedef 0x559162030b20 'size_t'
|       | `-BuiltinType 0x559161fc0430 'unsigned long'
|       `-PointerType 0x559161fc0ad0 'void *'
|         `-BuiltinType 0x559161fc02d0 'void'
|-CXXMethodDecl 0x5591624e9638 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5591624e9230 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5591624e92a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5591624e9340 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5591624e93c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x559162503d30 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x559162503d18 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x559162503ce0 <col:58> 'int' 0
| |-ParmVarDecl 0x5591624e9440 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x559162503d58 <col:76> 'int' 0
| |-ParmVarDecl 0x5591624e94c0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x559162503d78 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5591624e9708 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5591624e9788 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5591624e9848 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5591624e98e8 <col:20>
| `-OptimizeNoneAttr 0x5591624e9940 <col:30>
|-CXXMethodDecl 0x5591624e99b8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5591624e9a58 <col:20>
| `-OptimizeNoneAttr 0x5591624e9ab0 <col:30>
|-CXXMethodDecl 0x5591624e9b28 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5591624e9bc8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5591624e9c78 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5591624e9d18 <col:20>
| |-OptimizeNoneAttr 0x5591624e9d70 <col:30>
| `-WarnUnusedResultAttr 0x5591624e9d98 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5591624e9df0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5591624e9e90 <col:20>
| `-OptimizeNoneAttr 0x5591624e9ee8 <col:30>
|-CXXMethodDecl 0x5591624e9f38 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5591624e9fd8 <col:20>
| `-OptimizeNoneAttr 0x5591624ea030 <col:30>
|-CXXMethodDecl 0x5591624ea078 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5591624ea118 <col:20>
| `-OptimizeNoneAttr 0x5591624ea170 <col:30>
|-CXXMethodDecl 0x5591624ea1b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5591624ea278 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5591624ea340 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5591624ea408 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5591624ea4c8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5591624ea5e8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x559162503e40 <col:54, line:99:5>
|   `-ReturnStmt 0x559162503e30 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x559162503e18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x559162503de8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5591624fa8c8
|         `-CXXThisExpr 0x559162503dd8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5591624ea788 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5591624ea698 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x559162503ef0 <col:67, line:103:5>
|   `-BinaryOperator 0x559162503ed0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559162503e68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5591624fa8c8
|     | `-CXXThisExpr 0x559162503e58 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559162503eb8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x559162503e98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5591624ea698 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5591624ea880 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x559162503f70 <col:33, line:107:5>
|   `-ReturnStmt 0x559162503f60 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x559162503f48 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x559162503f18 <col:16> 'void *' lvalue ->_destructor_argument 0x5591624fa930
|         `-CXXThisExpr 0x559162503f08 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5591624ea940 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5591625045a0 <col:25, line:113:5>
|   |-ParenExpr 0x5591625042e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5591625042b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x559162504028 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559162504000 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x559162503fc8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x559162503f98 <col:24> '<bound member function type>' ->shared 0x5591624e99b8
|   |   |       `-ImplicitCastExpr 0x559162503fe8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x559162503f88 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559162504088 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162504068 <col:42> 'int' 0
|   |   `-CallExpr 0x559162504218 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x559162504200 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5591625041e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162504258 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625040f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x559162504270 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162504120 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162504288 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162504158 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5591625042a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5591625041c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5591625041b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162504178 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5591625044e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x559162504318 <col:2> 'unsigned char *' lvalue ->_head 0x5591624fa6d0
|   | | `-CXXThisExpr 0x559162504308 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5591625044d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5591625044b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x559162504358 <col:10> 'unsigned char *' lvalue ->_data 0x5591624fa738
|   |     | `-CXXThisExpr 0x559162504348 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x559162504498 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x559162504478 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x559162504398 <col:18> 'unsigned char *' lvalue ->_tail 0x5591624fa7a0
|   |         | `-CXXThisExpr 0x559162504388 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x559162504460 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x559162504440 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5591625043d8 <col:26> 'unsigned char *' lvalue ->_end 0x5591624fa808
|   |             | `-CXXThisExpr 0x5591625043c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x559162504428 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x559162504408 <col:33> 'int' 0
|   `-BinaryOperator 0x559162504580 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559162504518 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5591624fa8c8
|     | `-CXXThisExpr 0x559162504508 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559162504568 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x559162504548 <col:16> 'int' 0
|-CXXMethodDecl 0x5591624eaa80 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5591624ea9f0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624eab28 <col:20>
| |-OptimizeNoneAttr 0x5591624eab80 <col:30>
| `-WarnUnusedResultAttr 0x5591624eaba8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5591624eac78 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5591624eabe8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624ead20 <col:20>
| |-OptimizeNoneAttr 0x5591624ead78 <col:30>
| `-WarnUnusedResultAttr 0x5591624eada0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5591624eaed8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5591624eade0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5591624eaf80 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5591624eb080 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5591624eaff0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624eb128 <col:20>
| `-OptimizeNoneAttr 0x5591624eb180 <col:30>
|-CXXMethodDecl 0x5591624eb248 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5591624eb1b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5591624eb2f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5591624eb3f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5591624eb360 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5591624eb498 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5591624eb598 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5591624eb508 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624eb640 <col:20>
| `-OptimizeNoneAttr 0x5591624eb698 <col:30>
|-CXXMethodDecl 0x5591624eb828 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5591624eb6d8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5591624eb750 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x559162503d98 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5591624eb8d8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5591624ebad8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5591624eb950 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5591624eb9c8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591624ebce8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5591624ebb98 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5591624ebc10 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591624ebef8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5591624ebda8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5591624ebe28 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x559162503da8 <col:39> 'int' 0
|-CXXMethodDecl 0x5591624ebfc8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5591624ec090 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5591624ec158 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5591624ec218 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5591624ec2e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5591624ec428 <line:284:5, col:54> col:17 used set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5591624ec398 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5591624ec5f8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5591624ec4e8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5591624ec560 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591624ec6c8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5591624ec788 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5591624ec828 <col:20>
| `-OptimizeNoneAttr 0x5591624ec880 <col:30>
|-CXXMethodDecl 0x5591624ec8d0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5591624ec970 <col:20>
| `-OptimizeNoneAttr 0x5591624ec9c8 <col:30>
|-CXXMethodDecl 0x5591624eca18 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5591624ecad8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5591624ecba0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5591624ecc40 <col:20>
| `-OptimizeNoneAttr 0x5591624ecc98 <col:30>
|-CXXMethodDecl 0x5591624ecde8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5591624eccd8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5591624ecd50 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591624ecf38 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5591624ecea8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591624ed010 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5591624ed0d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5591624ed170 <col:20>
| `-OptimizeNoneAttr 0x5591624ed1c8 <col:30>
|-CXXMethodDecl 0x5591624ed218 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5591624ed2b8 <col:20>
| `-OptimizeNoneAttr 0x5591624ed310 <col:30>
|-CXXMethodDecl 0x5591624ed360 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5591624ed428 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5591624ed4c8 <col:20>
| `-OptimizeNoneAttr 0x5591624ed520 <col:30>
|-CXXMethodDecl 0x5591624ed568 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5591624ed688 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5591624ed7f8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5591624ed738 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5591624ed8e8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5591624ed988 <col:20>
| `-OptimizeNoneAttr 0x5591624ed9e0 <col:30>
|-CXXMethodDecl 0x5591624eda30 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5591624edaf0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5591624edd28 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5591624edba0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5591624edc18 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624eddd8 <col:20>
| `-OptimizeNoneAttr 0x5591624ede30 <col:30>
|-CXXMethodDecl 0x5591624eded8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5591624edf78 <col:20>
| `-OptimizeNoneAttr 0x5591624edfd0 <col:30>
|-CXXMethodDecl 0x5591624ee020 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5591624ee0c0 <col:20>
| `-OptimizeNoneAttr 0x5591624ee118 <col:30>
|-CXXMethodDecl 0x5591624ee160 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5591624ee200 <col:20>
| `-OptimizeNoneAttr 0x5591624ee258 <col:30>
|-CXXMethodDecl 0x5591624ee358 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5591624ee290 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5591624ee400 <col:20>
| `-OptimizeNoneAttr 0x5591624ee458 <col:30>
|-CXXMethodDecl 0x5591624ee618 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5591624ee490 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5591624ee508 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624ee6c8 <col:20>
| `-OptimizeNoneAttr 0x5591624ee720 <col:30>
|-CXXMethodDecl 0x5591624ee7c8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5591624ee8e8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5591624eea08 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5591624eeaa8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5591624eead0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5591624eebf8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5591624eec98 <col:20>
| `-OptimizeNoneAttr 0x5591624eecf0 <col:30>
|-CXXMethodDecl 0x5591624eed98 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5591624eee38 <col:20>
| `-OptimizeNoneAttr 0x5591624eee90 <col:30>
|-AccessSpecDecl 0x5591624eeeb8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5591624eeee0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5591624eefe0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5591624ef030 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591624eefc0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5591624eefa0 <col:14> 'int' 48
|-CXXMethodDecl 0x5591624ef098 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5591624ef138 <col:20>
| `-OptimizeNoneAttr 0x5591624ef190 <col:30>
|-CXXMethodDecl 0x5591624ef208 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5591624ef2a8 <col:20>
| `-OptimizeNoneAttr 0x5591624ef300 <col:30>
|-CXXMethodDecl 0x5591624ef3c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5591624ef338 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5591624ef568 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5591624ef708 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5591624ef618 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5591624ef7b0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5591624ef8b0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5591624efc60 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624ef890 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5591624ef870 <col:9> 'int' 0
| |-EnumConstantDecl 0x5591624ef940 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5591624efc78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624ef920 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5591624ef900 <col:14> 'int' 1
| |-EnumConstantDecl 0x5591624ef9d0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5591624efc90 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624ef9b0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5591624ef990 <col:14> 'int' 2
| |-EnumConstantDecl 0x5591624efa60 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5591624efca8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624efa40 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5591624efa20 <col:14> 'int' 3
| |-EnumConstantDecl 0x5591624efaf0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5591624efcc0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624efad0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5591624efab0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5591624efb80 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5591624efcd8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624efb60 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5591624efb40 <col:13> 'int' 5
| `-EnumConstantDecl 0x5591624efc10 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5591624efcf0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591624efbf0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5591624efbd0 <col:14> 'int' 6
|-CXXMethodDecl 0x5591624efd58 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5591624efdf8 <col:20>
| `-OptimizeNoneAttr 0x5591624efe50 <col:30>
|-CXXMethodDecl 0x5591624eff48 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5591624efe88 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5591624efff0 <col:20>
| `-OptimizeNoneAttr 0x5591624f0048 <col:30>
|-CXXMethodDecl 0x5591624f00b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5591624f01e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5591624f0358 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5591624f0290 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5591624f0420 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5591624f04e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5591624f0628 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5591624f0598 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5591624f06d0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5591624f07d0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5591624f09d0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f07b0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5591624f0790 <col:23> 'int' 0
| |-EnumConstantDecl 0x5591624f0860 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5591624f09e8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f0840 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5591624f0820 <col:45> 'int' 4
| |-EnumConstantDecl 0x5591624f08f0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5591624f0a00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f08d0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5591624f08b0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5591624f0980 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5591624f0a18 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591624f0960 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5591624f0940 <col:47> 'int' 16
|-CXXMethodDecl 0x5591624f0a78 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5591624f0be8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5591624f0b28 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5591624f0c90 <col:20>
| `-OptimizeNoneAttr 0x5591624f0ce8 <col:30>
|-CXXMethodDecl 0x5591624f0d38 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5591625046c0 <col:18, col:36>
|   `-ReturnStmt 0x5591625046b0 <col:20, col:33>
|     `-ImplicitCastExpr 0x559162504698 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x559162504678 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x559162504648 <col:27> '<bound member function type>' ->xanno 0x5591624eed98
|           `-CXXThisExpr 0x559162504638 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5591624f0e30 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5591625047d0 <col:30, col:48>
|   `-ReturnStmt 0x5591625047c0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5591625047a8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x559162504788 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x559162504758 <col:39> '<bound member function type>' ->xanno 0x5591624eebf8
|           `-CXXThisExpr 0x559162504748 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5591624f0f18 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x559162504968 <col:24, col:50>
|   `-ReturnStmt 0x559162504958 <col:26, col:47>
|     `-UnaryOperator 0x559162504940 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559162504920 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x559162504908 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5591625048b8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5591624f9bd8
|         |   `-CXXMemberCallExpr 0x559162504898 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x559162504868 <col:34> '<bound member function type>' ->xanno 0x5591624eed98
|         |       `-CXXThisExpr 0x559162504858 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5591625048e8 <col:46> 'int' 0
|-CXXMethodDecl 0x5591624f1020 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x559162504b38 <col:36, col:62>
|   `-ReturnStmt 0x559162504b28 <col:38, col:59>
|     `-UnaryOperator 0x559162504b10 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559162504af0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559162504ad8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559162504a50 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5591624f9bd8
|         |   `-CXXMemberCallExpr 0x559162504a30 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559162504a00 <col:46> '<bound member function type>' ->xanno 0x5591624eebf8
|         |       `-CXXThisExpr 0x5591625049f0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559162504a80 <col:58> 'int' 0
|-CXXMethodDecl 0x5591624f1138 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x559162504cd0 <col:26, col:53>
|   `-ReturnStmt 0x559162504cc0 <col:28, col:50>
|     `-UnaryOperator 0x559162504ca8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559162504c88 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x559162504c70 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559162504c20 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5591624f9ed8
|         |   `-CXXMemberCallExpr 0x559162504c00 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x559162504bd0 <col:36> '<bound member function type>' ->xanno 0x5591624eed98
|         |       `-CXXThisExpr 0x559162504bc0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x559162504c50 <col:49> 'int' 0
|-CXXMethodDecl 0x5591624f1258 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x559162504ea8 <col:38, col:65>
|   `-ReturnStmt 0x559162504e98 <col:40, col:62>
|     `-UnaryOperator 0x559162504e80 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559162504e60 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x559162504e48 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559162504db8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5591624f9ed8
|         |   `-CXXMemberCallExpr 0x559162504d98 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559162504d68 <col:48> '<bound member function type>' ->xanno 0x5591624eebf8
|         |       `-CXXThisExpr 0x559162504d58 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559162504de8 <col:61> 'int' 0
|-CXXMethodDecl 0x5591624f1408 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5591624f1310 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x559162505578 <col:34, line:463:5>
|   |-ParenExpr 0x5591625053c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x559162505390 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559162504ff8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162504fc8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162504f18 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162504f00 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162504ec0 <col:23> 'int' lvalue ParmVar 0x5591624f1310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162504ee0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162504fa8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162504f78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162504f38 <col:33> 'int' lvalue ParmVar 0x5591624f1310 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559162504f90 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559162504f58 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559162505058 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162505038 <col:56> 'int' 0
|   |   `-CallExpr 0x5591625052f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5591625052d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5591625052b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162505330 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162505148 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559162505348 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162505178 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162505360 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5591625051b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x559162505378 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5591625052a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162505288 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162505248 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x559162505568 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x559162505550 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x559162505530 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559162505500 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5591625054b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5591624f9bd8
|         |   `-CXXMemberCallExpr 0x559162505490 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559162505460 <col:9> '<bound member function type>' ->xanno 0x5591624eebf8
|         |       `-CXXThisExpr 0x559162505450 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x559162505518 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5591625054e0 <col:21> 'int' lvalue ParmVar 0x5591624f1310 'i' 'int'
|-CXXMethodDecl 0x5591624f1658 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5591624f14c8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5591624f1540 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559162505c08 <col:40, line:472:5>
|   |-ParenExpr 0x559162505a20 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5591625059f0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5591625056d0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5591625056a0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5591625055f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5591625055d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162505598 <col:23> 'int' lvalue ParmVar 0x5591624f14c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5591625055b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162505680 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162505650 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162505610 <col:33> 'int' lvalue ParmVar 0x5591624f14c8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559162505668 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559162505630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559162505730 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162505710 <col:56> 'int' 0
|   |   `-CallExpr 0x559162505950 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559162505938 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162505918 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162505990 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625057a0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5591625059a8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625057d0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5591625059c0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162505808 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5591625059d8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162505900 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5591625058e8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5591625058a8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x559162505be8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x559162505b90 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x559162505b60 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x559162505b10 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5591624f9bd8
|     | |   `-CXXMemberCallExpr 0x559162505af0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x559162505ac0 <col:2> '<bound member function type>' ->xanno 0x5591624eed98
|     | |       `-CXXThisExpr 0x559162505ab0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x559162505b78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x559162505b40 <col:14> 'int' lvalue ParmVar 0x5591624f14c8 'i' 'int'
|     `-ImplicitCastExpr 0x559162505bd0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x559162505bb0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5591624f1540 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5591624f1818 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5591624f1720 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559162506388 <col:36, line:485:5>
|   |-ParenExpr 0x5591625060f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5591625060c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559162505da0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162505d70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162505c80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162505c68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162505c28 <col:23> 'int' lvalue ParmVar 0x5591624f1720 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162505c48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162505d50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162505d38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162505ca0 <col:33> 'int' lvalue ParmVar 0x5591624f1720 'i' 'int'
|   |   |     `-BinaryOperator 0x559162505d18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162505d00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559162505cc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162505ce0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559162505e00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162505de0 <col:60> 'int' 0
|   |   `-CallExpr 0x559162506020 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162506008 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162505fe8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162506060 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162505e70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559162506078 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162505ea8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162506090 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162505ee0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5591625060a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162505fd0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162505fb8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162505f78 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x559162506378 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x559162506360 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x559162506348 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559162506318 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5591625062b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559162506288 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559162506200 <col:61, col:70> 'char const[48]' lvalue ->c 0x5591624f9ab0
|             |   `-CXXMemberCallExpr 0x5591625061e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5591625061b0 <col:61> '<bound member function type>' ->xanno 0x5591624eebf8
|             |       `-CXXThisExpr 0x5591625061a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5591625062a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559162506230 <col:74> 'int' lvalue ParmVar 0x5591624f1720 'i' 'int'
|-CXXMethodDecl 0x5591624f1a68 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5591624f18d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5591624f1950 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x559162506ad8 <col:42, line:500:5>
|   |-ParenExpr 0x559162506870 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162506840 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559162506520 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5591625064f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162506400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5591625063e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5591625063a8 <col:23> 'int' lvalue ParmVar 0x5591624f18d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5591625063c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5591625064d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5591625064b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162506420 <col:33> 'int' lvalue ParmVar 0x5591624f18d8 'i' 'int'
|   |   |     `-BinaryOperator 0x559162506498 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162506480 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559162506440 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162506460 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559162506580 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162506560 <col:60> 'int' 0
|   |   `-CallExpr 0x5591625067a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162506788 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162506768 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5591625067e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625065f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5591625067f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162506628 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162506810 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162506660 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x559162506828 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162506750 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162506738 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5591625066f8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x559162506ab8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x559162506a68 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559162506a38 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5591625069e0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5591625069b0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559162506960 <col:48, col:57> 'char [48]' lvalue ->c 0x5591624f9ab0
|     |     |   `-CXXMemberCallExpr 0x559162506940 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559162506910 <col:48> '<bound member function type>' ->xanno 0x5591624eed98
|     |     |       `-CXXThisExpr 0x559162506900 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5591625069c8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559162506990 <col:61> 'int' lvalue ParmVar 0x5591624f18d8 'i' 'int'
|     `-ImplicitCastExpr 0x559162506aa0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x559162506a80 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5591624f1950 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5591624f1c28 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5591624f1b30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559162507238 <col:35, line:513:5>
|   |-ParenExpr 0x559162506f48 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162506f18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559162506c70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162506c40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162506b50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162506b38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162506af8 <col:23> 'int' lvalue ParmVar 0x5591624f1b30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162506b18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162506c20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162506c08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162506b70 <col:33> 'int' lvalue ParmVar 0x5591624f1b30 'i' 'int'
|   |   |     `-BinaryOperator 0x559162506be8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162506bd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559162506b90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162506bb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559162506cd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162506cb0 <col:60> 'int' 0
|   |   `-CallExpr 0x559162506e78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162506e60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162506e40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162506eb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162506d40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559162506ed0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162506d78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162506ee8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162506db0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x559162506f00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162506e28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162506e10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162506dd0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x559162507228 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x559162507210 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5591625071f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5591625071c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x559162507140 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559162507110 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5591625070c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5591624f9ab0
|             |   `-CXXMemberCallExpr 0x5591625070a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559162507070 <col:60> '<bound member function type>' ->xanno 0x5591624eebf8
|             |       `-CXXThisExpr 0x559162507060 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559162507128 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5591625070f0 <col:73> 'int' lvalue ParmVar 0x5591624f1b30 'i' 'int'
|-CXXMethodDecl 0x5591624f1e78 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5591624f1ce8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5591624f1d60 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x559162507958 <col:41, line:528:5>
|   |-ParenExpr 0x5591625076e0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5591625076b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5591625073d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5591625073a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5591625072b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162507298 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162507258 <col:23> 'int' lvalue ParmVar 0x5591624f1ce8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162507278 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162507380 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162507368 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5591625072d0 <col:33> 'int' lvalue ParmVar 0x5591624f1ce8 'i' 'int'
|   |   |     `-BinaryOperator 0x559162507348 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162507330 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5591625072f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162507310 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559162507430 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162507410 <col:60> 'int' 0
|   |   `-CallExpr 0x559162507610 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5591625075f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5591625075d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162507650 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625074a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559162507668 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625074d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162507680 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162507510 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x559162507698 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5591625075c0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5591625075a8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162507568 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x559162507938 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5591625078e8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5591625078b8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x559162507860 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559162507820 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5591625077d0 <col:47, col:56> 'char [48]' lvalue ->c 0x5591624f9ab0
|     |     |   `-CXXMemberCallExpr 0x5591625077b0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559162507780 <col:47> '<bound member function type>' ->xanno 0x5591624eed98
|     |     |       `-CXXThisExpr 0x559162507770 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559162507838 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559162507800 <col:60> 'int' lvalue ParmVar 0x5591624f1ce8 'i' 'int'
|     `-ImplicitCastExpr 0x559162507920 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x559162507900 <col:65> 'int16_t':'short' lvalue ParmVar 0x5591624f1d60 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5591624f2038 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5591624f1f40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559162508028 <col:36, line:541:5>
|   |-ParenExpr 0x559162507dc8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162507d98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559162507af0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162507ac0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5591625079d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5591625079b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162507978 <col:23> 'int' lvalue ParmVar 0x5591624f1f40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162507998 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162507aa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162507a88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5591625079f0 <col:33> 'int' lvalue ParmVar 0x5591624f1f40 'i' 'int'
|   |   |     `-BinaryOperator 0x559162507a68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162507a50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559162507a10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162507a30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559162507b50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162507b30 <col:60> 'int' 0
|   |   `-CallExpr 0x559162507cf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162507ce0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162507cc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162507d38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162507bc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559162507d50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162507bf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162507d68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162507c30 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x559162507d80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162507ca8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162507c90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162507c50 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x559162508018 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x559162508000 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x559162507fe8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559162507fb8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x559162507f60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559162507f30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559162507ee0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5591624f9ab0
|             |   `-CXXMemberCallExpr 0x559162507ec0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559162507e90 <col:61> '<bound member function type>' ->xanno 0x5591624eebf8
|             |       `-CXXThisExpr 0x559162507e80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559162507f48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559162507f10 <col:74> 'int' lvalue ParmVar 0x5591624f1f40 'i' 'int'
|-CXXMethodDecl 0x5591624f2208 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5591624f20f8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5591624f2170 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5591624f22b8 <col:20>
| `-OptimizeNoneAttr 0x5591624f2310 <col:30>
|-CXXMethodDecl 0x5591624f2448 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5591624f2350 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5591625086f8 <col:35, line:562:5>
|   |-ParenExpr 0x559162508498 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162508468 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5591625081c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162508190 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5591625080a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162508088 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162508048 <col:23> 'int' lvalue ParmVar 0x5591624f2350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162508068 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162508170 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162508158 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5591625080c0 <col:33> 'int' lvalue ParmVar 0x5591624f2350 'i' 'int'
|   |   |     `-BinaryOperator 0x559162508138 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162508120 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5591625080e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162508100 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559162508220 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162508200 <col:60> 'int' 0
|   |   `-CallExpr 0x5591625083c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5591625083b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162508390 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162508408 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162508290 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559162508420 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625082c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162508438 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162508300 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x559162508450 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162508378 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162508360 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162508320 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5591625086e8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5591625086d0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5591625086b8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559162508688 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x559162508630 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559162508600 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5591625085b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5591624f9ab0
|             |   `-CXXMemberCallExpr 0x559162508590 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559162508560 <col:60> '<bound member function type>' ->xanno 0x5591624eebf8
|             |       `-CXXThisExpr 0x559162508550 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559162508618 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5591625085e0 <col:73> 'int' lvalue ParmVar 0x5591624f2350 'i' 'int'
|-CXXMethodDecl 0x5591624f2658 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5591624f2508 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5591624f2580 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x559162508dd8 <col:41, line:577:5>
|   |-ParenExpr 0x559162508b68 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162508b38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559162508890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162508860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162508770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162508758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162508718 <col:23> 'int' lvalue ParmVar 0x5591624f2508 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162508738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162508840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162508828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162508790 <col:33> 'int' lvalue ParmVar 0x5591624f2508 'i' 'int'
|   |   |     `-BinaryOperator 0x559162508808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5591625087f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5591625087b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5591625087d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5591625088f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5591625088d0 <col:60> 'int' 0
|   |   `-CallExpr 0x559162508a98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162508a80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162508a60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559162508ad8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162508960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559162508af0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162508998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162508b08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5591625089d0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x559162508b20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162508a48 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162508a30 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5591625089f0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x559162508db8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x559162508d68 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559162508d38 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x559162508cd8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559162508ca8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559162508c58 <col:47, col:56> 'char [48]' lvalue ->c 0x5591624f9ab0
|     |     |   `-CXXMemberCallExpr 0x559162508c38 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559162508c08 <col:47> '<bound member function type>' ->xanno 0x5591624eed98
|     |     |       `-CXXThisExpr 0x559162508bf8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559162508cc0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559162508c88 <col:60> 'int' lvalue ParmVar 0x5591624f2508 'i' 'int'
|     `-ImplicitCastExpr 0x559162508da0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x559162508d80 <col:65> 'int32_t':'int' lvalue ParmVar 0x5591624f2580 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5591624f2818 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5591624f2720 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559162509508 <col:36, line:591:5>
|   |-ParenExpr 0x559162509248 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162509218 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559162508f70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162508f40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162508e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162508e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162508df8 <col:23> 'int' lvalue ParmVar 0x5591624f2720 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162508e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162508f20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162508f08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162508e70 <col:33> 'int' lvalue ParmVar 0x5591624f2720 'i' 'int'
|   |   |     `-BinaryOperator 0x559162508ee8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162508ed0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559162508e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559162508eb0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559162508fd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162508fb0 <col:60> 'int' 0
|   |   `-CallExpr 0x559162509178 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162509160 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162509140 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5591625091b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162509040 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5591625091d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162509078 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5591625091e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5591625090b0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x559162509200 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162509128 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162509110 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5591625090d0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5591625094f8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5591625094e0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5591625094c8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559162509498 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x559162509410 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5591625093e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559162509390 <col:61, col:70> 'char const[48]' lvalue ->c 0x5591624f9ab0
|             |   `-CXXMemberCallExpr 0x559162509370 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559162509340 <col:61> '<bound member function type>' ->xanno 0x5591624eebf8
|             |       `-CXXThisExpr 0x559162509330 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5591625093f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5591625093c0 <col:74> 'int' lvalue ParmVar 0x5591624f2720 'i' 'int'
|-CXXMethodDecl 0x5591624f2a68 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5591624f28d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5591624f2950 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x559162509be8 <col:42, line:606:5>
|   |-ParenExpr 0x559162509978 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x559162509948 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5591625096a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162509670 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162509580 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162509568 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162509528 <col:23> 'int' lvalue ParmVar 0x5591624f28d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162509548 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162509650 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559162509638 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5591625095a0 <col:33> 'int' lvalue ParmVar 0x5591624f28d8 'i' 'int'
|   |   |     `-BinaryOperator 0x559162509618 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162509600 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5591625095c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5591625095e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559162509700 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5591625096e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5591625098a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559162509890 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559162509870 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5591625098e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162509770 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559162509900 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5591625097a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559162509918 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5591625097e0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x559162509930 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559162509858 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559162509840 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559162509800 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x559162509bc8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x559162509b78 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559162509b48 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x559162509ae8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559162509ab8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559162509a68 <col:48, col:57> 'char [48]' lvalue ->c 0x5591624f9ab0
|     |     |   `-CXXMemberCallExpr 0x559162509a48 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559162509a18 <col:48> '<bound member function type>' ->xanno 0x5591624eed98
|     |     |       `-CXXThisExpr 0x559162509a08 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559162509ad0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559162509a98 <col:61> 'int' lvalue ParmVar 0x5591624f28d8 'i' 'int'
|     `-ImplicitCastExpr 0x559162509bb0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x559162509b90 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5591624f2950 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5591624f2c00 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5591624f2b30 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55916250a458 <col:33, line:620:5>
|   |-ParenExpr 0x55916250a1d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55916250a1a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559162509df0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559162509dc0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559162509c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559162509c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559162509c08 <col:23> 'int' lvalue ParmVar 0x5591624f2b30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559162509c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559162509da0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559162509d88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559162509c80 <col:33> 'int' lvalue ParmVar 0x5591624f2b30 'i' 'int'
|   |   |     `-BinaryOperator 0x559162509d68 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559162509d50 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559162509ca0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559162509d28 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559162509d10 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559162509cd8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559162509e50 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559162509e30 <col:79> 'int' 0
|   |   `-CallExpr 0x55916250a100 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55916250a0e8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55916250a0c8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55916250a140 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162509f38 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55916250a158 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559162509f80 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55916250a170 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559162509fb8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55916250a188 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55916250a0b0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55916250a098 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55916250a058 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55916250a448 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55916250a430 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55916250a418 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55916250a3e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55916250a360 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55916250a330 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55916250a2e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5591624f9ab0
|             |   `-CXXMemberCallExpr 0x55916250a2c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55916250a290 <col:67> '<bound member function type>' ->xanno 0x5591624eebf8
|             |       `-CXXThisExpr 0x55916250a280 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55916250a348 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55916250a310 <col:80> 'int' lvalue ParmVar 0x5591624f2b30 'i' 'int'
|-CXXMethodDecl 0x5591624f2e18 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5591624f2cc0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5591624f2d40 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55916250ac80 <col:45, line:635:5>
|   |-ParenExpr 0x55916250a9c8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55916250a998 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55916250a660 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55916250a630 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55916250a4d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55916250a4b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55916250a478 <col:23> 'int' lvalue ParmVar 0x5591624f2cc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55916250a498 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55916250a610 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55916250a5f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55916250a4f0 <col:33> 'int' lvalue ParmVar 0x5591624f2cc0 'i' 'int'
|   |   |     `-BinaryOperator 0x55916250a5d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55916250a5c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55916250a510 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5591624eefe0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55916250a598 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55916250a580 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55916250a548 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55916250a6c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55916250a6a0 <col:79> 'int' 0
|   |   `-CallExpr 0x55916250a8f8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55916250a8e0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55916250a8c0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55916205b900 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55916250a938 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55916250a730 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55916250a950 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55916250a778 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55916250a968 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55916250a7b0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55916250a980 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55916250a8a8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55916250a890 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55916250a848 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55916250ac60 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55916250abc8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55916250ab98 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55916250ab38 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55916250ab08 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55916250aab8 <col:54, col:63> 'char [48]' lvalue ->c 0x5591624f9ab0
|     |     |   `-CXXMemberCallExpr 0x55916250aa98 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55916250aa68 <col:54> '<bound member function type>' ->xanno 0x5591624eed98
|     |     |       `-CXXThisExpr 0x55916250aa58 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55916250ab20 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55916250aae8 <col:67> 'int' lvalue ParmVar 0x5591624f2cc0 'i' 'int'
|     `-CXXConstCastExpr 0x55916250ac30 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55916250ac18 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55916250abe0 <col:91> 'const void *' lvalue ParmVar 0x5591624f2d40 'x' 'const void *'
|-CXXMethodDecl 0x5591624f2ee8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55916250ad08 <col:34, line:640:5>
|   `-ReturnStmt 0x55916250acf8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55916250ace0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55916250acb0 <col:16> 'Packet *' lvalue ->_data_packet 0x5591624fa668
|         `-CXXThisExpr 0x55916250aca0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5591624f3028 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5591624f2f98 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559162503dc8 <col:46> 'bool' true
|-CXXMethodDecl 0x5591624f31a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5591624f30e0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5591624f3250 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5591624f3a00 <line:660:22> "" ""
| |-EnumConstantDecl 0x5591624f3350 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3a70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f3330 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5591624f3310 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5591624e84b0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5591624f33e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3a88 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f33c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5591624f33a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5591624e8540 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5591624f3470 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3aa0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f3450 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5591624f3430 <col:21> 'int' 0
| |-EnumConstantDecl 0x5591624f3500 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3ab8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f34e0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5591624f34c0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5591624f3590 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3ad0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f3570 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5591624f3550 <col:21> 'int' 16
| |-EnumConstantDecl 0x5591624f3620 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3ae8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f3600 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5591624f35e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5591624f36b0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3b00 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f3690 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5591624f3670 <col:19> 'int' EnumConstant 0x5591624f3500 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5591624f3740 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3b18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f3720 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5591624f3700 <col:19> 'int' EnumConstant 0x5591624f3620 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5591624f3810 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3b30 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f37f0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5591624f37d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5591624f3790 <col:23> 'int' EnumConstant 0x5591624f3740 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5591624f37b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5591624f38e0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5591624f3b48 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591624f38c0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5591624f38a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5591624f3860 <col:23> 'int' EnumConstant 0x5591624f3740 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5591624f3880 <col:40> 'int' 4
| `-EnumConstantDecl 0x5591624f39b0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5591624f3b60 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5591624f3990 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5591624f3970 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5591624f3930 <col:23> 'int' EnumConstant 0x5591624f3740 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5591624f3950 <col:40> 'int' 8
|-CXXMethodDecl 0x5591624f3ba0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5591624f3c40 <col:68> "" ""
|-CXXMethodDecl 0x5591624f3cd8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5591624f3d78 <col:45> "" ""
|-CXXMethodDecl 0x5591624f3e10 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5591624f3eb0 <col:57> "" ""
|-CXXMethodDecl 0x5591624f3f48 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5591624f3fe8 <col:45> "" ""
|-CXXMethodDecl 0x5591624f4080 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5591624f4120 <col:57> "" ""
|-CXXMethodDecl 0x5591624f41b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5591624f4250 <col:51> "" ""
|-CXXMethodDecl 0x5591624f42e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5591624f4380 <col:63> "" ""
|-CXXMethodDecl 0x5591624f4410 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5591624f44b0 <col:53> "" ""
|-CXXMethodDecl 0x5591624f4540 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5591624f45e0 <col:65> "" ""
|-CXXMethodDecl 0x5591624f46f8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5591624f4668 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5591624f47a0 <col:61> "" ""
|-CXXMethodDecl 0x5591624f4938 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5591624f4828 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5591624f48a0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5591624f49e8 <col:67> "" ""
|-CXXMethodDecl 0x5591624f4b00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5591624f4a70 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5591624f4ba8 <col:63> "" ""
|-CXXMethodDecl 0x5591624f4d40 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5591624f4c30 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5591624f4ca8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5591624f4df0 <col:69> "" ""
|-CXXMethodDecl 0x5591624f4f08 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5591624f4e78 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5591624f4fb0 <col:63> "" ""
|-CXXMethodDecl 0x5591624f7688 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5591624f7578 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5591624f75f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5591624f7738 <col:69> "" ""
|-CXXMethodDecl 0x5591624f7850 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5591624f77c0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5591624f78f8 <col:62> "" ""
|-CXXMethodDecl 0x5591624f7a90 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5591624f7980 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5591624f79f8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5591624f7b40 <col:68> "" ""
|-CXXMethodDecl 0x5591624f7c58 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5591624f7bc8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5591624f7d00 <col:63> "" ""
|-CXXMethodDecl 0x5591624f7e98 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5591624f7d88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5591624f7e00 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5591624f7f48 <col:69> "" ""
|-CXXMethodDecl 0x5591624f7fd8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5591624f8078 <col:64> "" ""
|-CXXMethodDecl 0x5591624f8108 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5591624f81a8 <col:52> "" ""
|-CXXMethodDecl 0x5591624f8238 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5591624f82d8 <col:67> "" ""
|-CXXMethodDecl 0x5591624f8368 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5591624f8408 <col:55> "" ""
|-CXXMethodDecl 0x5591624f8520 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5591624f8490 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5591624f85c8 <col:58> "" ""
|-CXXMethodDecl 0x5591624f8760 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5591624f8650 <col:33> col:36 'int'
| |-ParmVarDecl 0x5591624f86c8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5591624f8810 <col:62> "" ""
|-CXXMethodDecl 0x5591624f8928 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5591624f8898 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5591624f89d0 <col:58> "" ""
|-CXXMethodDecl 0x5591624f8b68 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5591624f8a58 <col:33> col:36 'int'
| |-ParmVarDecl 0x5591624f8ad0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5591624f8c18 <col:62> "" ""
|-CXXMethodDecl 0x5591624f8d30 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5591624f8ca0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5591624f8dd8 <col:60> "" ""
|-CXXMethodDecl 0x5591624f8f70 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5591624f8e60 <col:34> col:37 'int'
| |-ParmVarDecl 0x5591624f8ed8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5591624f9020 <col:64> "" ""
|-CXXMethodDecl 0x5591624f9138 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5591624f90a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5591624f91e0 <col:58> "" ""
|-CXXMethodDecl 0x5591624f9378 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5591624f9268 <col:33> col:36 'int'
| |-ParmVarDecl 0x5591624f92e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5591624f9428 <col:62> "" ""
|-CXXMethodDecl 0x5591624f9540 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5591624f94b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5591624f95e8 <col:59> "" ""
|-CXXMethodDecl 0x5591624f9780 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5591624f9670 <col:33> col:36 'int'
| |-ParmVarDecl 0x5591624f96e8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5591624f9830 <col:63> "" ""
|-AccessSpecDecl 0x5591624f98a0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5591624f98c8 prev 0x5591624eead0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5591624f99c0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5591624f9ab0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5591624f9bd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5591624f9d58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5591624f9ed8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5591624fa058 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55916250ae88 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55916250b6f8 <col:11>
| |-CXXDestructorDecl 0x55916250af60 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55916250b098 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55916250b098
| | `-ParmVarDecl 0x55916250b1a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55916250b248 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55916250b248
| | `-ParmVarDecl 0x55916250b358 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55916250e118 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55916250e228 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55916250e4a8 <col:11>
| |   `-ReturnStmt 0x55916250e498 <col:11>
| |     `-UnaryOperator 0x55916250e480 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55916250e470 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55916250e298 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55916250e298
|   `-ParmVarDecl 0x55916250e3a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5591624fa0c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5591624fa1d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5591624fa278 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5591624fa2e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5591624fa348 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5591624fa3b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5591624fa410 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5591624fa4d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5591624fa530 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5591624fa590 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55916250ad98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5591624fa278 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55916250b708 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55916250b760 <col:12>
| |-CXXConstructorDecl 0x55916250b3c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55916250b3c8
| | `-ParmVarDecl 0x55916250b4d8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55916250b578 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55916250b578
| | `-ParmVarDecl 0x55916250b688 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55916250d800 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5591624fa608 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5591624fa668 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5591624fa6d0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5591624fa738 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5591624fa7a0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5591624fa808 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5591624fa868 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5591624fa8c8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5591624fa930 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5591624fa9b8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5591624fa608 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55916250ad30 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5591624fa868 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55916250b770 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55916250b7d0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5591624fab58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5591624faa98 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5591624fac50 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5591624fae38 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5591624fad40 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5591624fb108 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5591624faef0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5591624faf68 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5591624fafe0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5591624fb328 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5591624fb1d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5591624fb250 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x559162503908 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5591624fb3e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5591624fb460 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5591624fb4d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x559162503a60 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5591625039d0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559162503ba8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559162503b18 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x559162503ca0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591625dd5f0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5591625dd708 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5591625dd798 <col:16, col:22> col:16 public
|-EnumDecl 0x5591625dd7c0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5591625dd8c0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5591625ddb10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591625dd8a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5591625dd880 <col:21> 'int' 0
| |-EnumConstantDecl 0x5591625dd950 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5591625ddb28 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591625dd930 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5591625dd910 <col:24> 'int' 22
| |-EnumConstantDecl 0x5591625dd9e0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5591625ddb40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591625dd9c0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5591625dd9a0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5591625dda70 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5591625ddb58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5591625dda50 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5591625dda30 <col:25> 'int' 95
| `-EnumConstantDecl 0x5591625ddac0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5591625df4d0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5591625df908 <col:7>
|-CXXConstructorDecl 0x5591625df5d8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5591625df5d8
| `-ParmVarDecl 0x5591625df6e8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5591625df788 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5591625df898 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x559162621ac0 <col:7>
`-CXXDestructorDecl 0x5591625e1a18 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5591625ddb88 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5591625ddce8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5591625ddd78 <col:32, col:38> col:32 public
|-TypedefDecl 0x5591625dddb0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x559162114e00 'uint32_t' sugar
|   |-Typedef 0x559162029408 'uint32_t'
|   `-TypedefType 0x559162002440 '__uint32_t' sugar
|     |-Typedef 0x559162002038 '__uint32_t'
|     `-BuiltinType 0x559161fc0410 'unsigned int'
|-CXXConstructorDecl 0x5591625ddef8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5591625dde20 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5591625df3d8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5591625df918 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5591625dec90 'base' 'int'
| | `-ImplicitCastExpr 0x5591625df478 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5591625df438 <col:16> 'int' lvalue ParmVar 0x5591625dde20 'b' 'int'
| `-CompoundStmt 0x5591625df988 <col:19, line:1046:5>
|-CXXMethodDecl 0x5591625de3f0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5591625ddfc0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5591625de040 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5591625de0b8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5591625de138 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5591625de1f8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5591625de278 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5591625de848 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5591625de4c0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5591625de7a8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5591625de568 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5591625de608 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5591625de680 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5591625df3f8 <col:82> 'const ArgContext' lvalue Var 0x5591625d2498 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5591625e08c8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5591625dfb18 <line:1054:9, col:64>
| |   | `-VarDecl 0x5591625df9a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5591625dfad0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5591625dfd38 <line:1055:9, col:91>
| |   | `-VarDecl 0x5591625dfb48 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5591625dfd10 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5591625dfcf0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5591625dfca0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5591625dfc80 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5591625dfc28 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5591625dfbd8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5591625dfc08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5591625dfc68 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5591625dfc48 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5591625dfcd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5591625dfe98 <line:1056:9, col:27>
| |   | `-VarDecl 0x5591625dfe30 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5591625e02e0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5591625e0210 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5591625e0190 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5591624dede8 0x5591623283c8 0x5591623280a0 0x559162319880 0x559162319530 0x559162318e20 0x5591622eb790 0x559162277c50
| |   | | |-CallExpr 0x5591625e00d0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5591625dfec0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5591625dff70 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5591625dff40 <col:19, col:23> '<bound member function type>' .begin 0x559162308a88
| |   | | | |   `-DeclRefExpr 0x5591625dff20 <col:19> 'const String' lvalue ParmVar 0x5591625de568 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5591625dffe0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5591625dffb0 <col:32, col:36> '<bound member function type>' .end 0x559162308ca0
| |   | | | |   `-DeclRefExpr 0x5591625dff90 <col:32> 'const String' lvalue ParmVar 0x5591625de568 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5591625e0000 <col:43> 'const bool' lvalue Var 0x5591625df9a8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5591625e0068 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5591625e0048 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5591625e0090 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5591625dfe30 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5591625e00b0 <col:73> 'const int' lvalue Var 0x5591625dfb48 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5591625e0170 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5591625e0140 <col:16, col:20> '<bound member function type>' .end 0x559162308ca0
| |   | |     `-DeclRefExpr 0x5591625e0120 <col:16> 'const String' lvalue ParmVar 0x5591625de568 'str' 'const String &'
| |   | `-BinaryOperator 0x5591625e02c0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5591625e0258 <col:13> 'int' lvalue ->status 0x5591625decf8
| |   |   | `-CXXThisExpr 0x5591625e0248 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5591625e02a8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5591625e0288 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd950 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5591625e0530 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5591625e0418 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5591625e0400 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5591625e03e8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5591625e0308 <col:13> 'int' lvalue ->status 0x5591625decf8
| |   | | |     `-CXXThisExpr 0x5591625e02f8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5591625e03c8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5591625e0398 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5591625e0348 <col:23> 'int' lvalue ->status 0x5591625decf8
| |   | |   |   `-CXXThisExpr 0x5591625e0338 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5591625e03b0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5591625e0378 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd9e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5591625e0510 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5591625e04b0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5591625e0458 <col:13, col:18> '<bound member function type>' .error 0x5591624a2410
| |   |   | | `-DeclRefExpr 0x5591625e0438 <col:13> 'const ArgContext' lvalue ParmVar 0x5591625de680 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5591625e04d8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5591625e0488 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5591625e0500 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5591625e04f0 <col:20> 'bool' false
| |   |-DeclStmt 0x5591625e0718 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5591625e06c0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5591625e0650 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5591625e0878 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5591625e0730 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5591622abc18
| |   | |-DeclRefExpr 0x5591625e0778 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5591625dfe30 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5591625e0848 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5591625e07c0 <col:64> 'V' lvalue ParmVar 0x5591625de608 'result' 'V &'
| |   `-ReturnStmt 0x5591625e08b8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5591625e08a8 <col:16> 'bool' true
| `-CXXMethodDecl 0x559162625628 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559162625400 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5591626254d8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x559162625540 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55916262ede0 <col:94, line:1067:5>
|     |-DeclStmt 0x559162625e38 <line:1054:9, col:64>
|     | `-VarDecl 0x559162625c58 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x559162625dc8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x559162625d98 <col:36, col:55> 'const bool' lvalue Var 0x55916229ae30 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55916262da38 <line:1055:9, col:91>
|     | `-VarDecl 0x559162625e50 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x559162625f98 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x559162625f80 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x559162625f60 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x559162625f40 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x559162625f20 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x559162625ee8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x559162625ec8 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5591625dfc08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x559162625f08 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5591625dfc48 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5591625dfcd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55916262dbd0 <line:1056:9, col:27>
|     | `-VarDecl 0x55916262db68 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55916262e058 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55916262e000 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55916262deb8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55916262de88 <col:13> '<bound member function type>' ->parse 0x5591625de3f0
|     | | | | `-CXXThisExpr 0x55916262de78 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55916262dd18 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55916262dce8 <col:19, col:23> '<bound member function type>' .begin 0x559162308a88
|     | | | |   `-DeclRefExpr 0x55916262dcc8 <col:19> 'const String' lvalue ParmVar 0x559162625400 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55916262dd88 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55916262dd58 <col:32, col:36> '<bound member function type>' .end 0x559162308ca0
|     | | | |   `-DeclRefExpr 0x55916262dd38 <col:32> 'const String' lvalue ParmVar 0x559162625400 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55916262df28 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55916262df08 <col:43> 'const bool' lvalue Var 0x559162625c58 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55916262de10 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55916262ddf8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55916262ddd8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55916262df40 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55916262de38 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55916262db68 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55916262df78 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55916262df58 <col:73> 'const int' lvalue Var 0x559162625e50 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55916262dfe0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55916262dfb0 <col:16, col:20> '<bound member function type>' .end 0x559162308ca0
|     | |     `-DeclRefExpr 0x55916262df90 <col:16> 'const String' lvalue ParmVar 0x559162625400 'str' 'const String &'
|     | `-BinaryOperator 0x55916262e038 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5591625e0258 <col:13> 'int' lvalue ->status 0x5591625decf8
|     |   | `-CXXThisExpr 0x5591625e0248 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55916262e020 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5591625e0288 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd950 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55916262e1d0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55916262e0f0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55916262e0d8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55916262e0c0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5591625e0308 <col:13> 'int' lvalue ->status 0x5591625decf8
|     | | |     `-CXXThisExpr 0x5591625e02f8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55916262e0a0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55916262e070 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5591625e0348 <col:23> 'int' lvalue ->status 0x5591625decf8
|     | |   |   `-CXXThisExpr 0x5591625e0338 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55916262e088 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5591625e0378 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd9e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55916262e1b0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55916262e160 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55916262e130 <col:13, col:18> '<bound member function type>' .error 0x5591624a2410
|     |   | | `-DeclRefExpr 0x55916262e110 <col:13> 'const ArgContext' lvalue ParmVar 0x559162625540 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55916262e188 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5591625e0488 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55916262e1a0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5591625e04f0 <col:20> 'bool' false
|     |-DeclStmt 0x55916262e718 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55916262e6c0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55916262e670 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55916262e650 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55916262e5e0 'type'
|     |       `-ElaboratedType 0x55916262e590 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55916262e570 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55916229af88 'unsigned_type'
|     |           `-BuiltinType 0x559161fc0410 'unsigned int'
|     |-CallExpr 0x55916262ed70 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55916262ed58 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55916262ecd8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55916262ebb8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5591622abc18 'extract_integer')
|     | |-ImplicitCastExpr 0x55916262edb8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55916262eda0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55916262e778 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55916262db68 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55916262e848 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55916262e7f8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5591626254d8 'result' 'unsigned int &'
|     `-ReturnStmt 0x55916262edd0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5591625e08a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5591625dec08 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5591625de8b8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5591625deb68 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5591625de968 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5591625dea08 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5591625dea80 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5591625df418 <col:71> 'const ArgContext' lvalue Var 0x5591625d2498 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5591625e1038 <col:83, line:1083:5>
| |   |-DeclStmt 0x5591625e0990 <line:1071:9, col:12>
| |   | `-VarDecl 0x5591625e0928 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5591625e1010 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5591625e0c20 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5591625e0aa8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5591625e0a70 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5591625e09b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5591625e0a10 <col:31> 'const String' lvalue ParmVar 0x5591625de968 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5591625e0a30 <col:36> 'V' lvalue Var 0x5591625e0928 'x' 'V'
| |     | |   `-DeclRefExpr 0x5591625e0a50 <col:39> 'const ArgContext' lvalue ParmVar 0x5591625dea80 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5591625e0c00 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5591625e0be0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5591625e0bc8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5591625e0bb0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5591625e0ad0 <col:17> 'int' lvalue ->status 0x5591625decf8
| |     |     |     `-CXXThisExpr 0x5591625e0ac0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5591625e0b90 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5591625e0b60 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5591625e0b10 <col:27> 'int' lvalue ->status 0x5591625decf8
| |     |       |   `-CXXThisExpr 0x5591625e0b00 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5591625e0b78 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5591625e0b40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd9e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5591625e0c50 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5591625e0c40 <col:20> 'bool' false
| |     `-IfStmt 0x5591625e0fe8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5591625e0cf0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5591625e0cc0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5591625e0c70 <col:18> 'int' lvalue ->status 0x5591625decf8
| |       | |   `-CXXThisExpr 0x5591625e0c60 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5591625e0cd8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5591625e0ca0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd9e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5591625e0f28 <col:42, line:1079:9>
| |       | |-CallExpr 0x5591625e0ed0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5591625e0d20 <line:1076:13> '<bound member function type>' ->range_error 0x5591625df308
| |       | | | `-CXXThisExpr 0x5591625e0d10 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5591625e0d50 <col:25> 'const ArgContext' lvalue ParmVar 0x5591625dea80 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5591625e0e30 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5591625e0ea8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5591625e0e88 <col:43> 'V' lvalue Var 0x5591625e0928 'x' 'V'
| |       | `-ReturnStmt 0x5591625e0f18 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5591625e0f08 <col:20> 'bool' false
| |       `-CompoundStmt 0x5591625e0fc8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5591625e0f88 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5591625e0f48 <col:13> 'V' lvalue ParmVar 0x5591625dea08 'result' 'V &'
| |         | `-DeclRefExpr 0x5591625e0f68 <col:22> 'V' lvalue Var 0x5591625e0928 'x' 'V'
| |         `-ReturnStmt 0x5591625e0fb8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5591625e0fa8 <col:20> 'bool' true
| `-CXXMethodDecl 0x559162624fe8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559162624dc0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x559162624e98 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x559162624f00 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x559162625c38 <col:83, line:1083:5>
|     |-DeclStmt 0x559162625270 <line:1071:9, col:12>
|     | `-VarDecl 0x559162625208 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x559162625c10 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5591626258a0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5591626257c8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x559162625790 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x559162625748 <col:14> '<bound member function type>' ->parse_saturating 0x559162625628
|       | |   | `-CXXThisExpr 0x559162625738 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5591626252e0 <col:31> 'const String' lvalue ParmVar 0x559162624dc0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x559162625300 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x559162625208 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x559162625320 <col:39> 'const ArgContext' lvalue ParmVar 0x559162624f00 'args' 'const ArgContext &'
|       | `-ParenExpr 0x559162625880 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x559162625860 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x559162625848 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x559162625830 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5591625e0ad0 <col:17> 'int' lvalue ->status 0x5591625decf8
|       |     |     `-CXXThisExpr 0x5591625e0ac0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x559162625810 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5591626257e0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5591625e0b10 <col:27> 'int' lvalue ->status 0x5591625decf8
|       |       |   `-CXXThisExpr 0x5591625e0b00 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5591626257f8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5591625e0b40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd9e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5591626258c0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5591625e0c40 <col:20> 'bool' false
|       `-IfStmt 0x559162625be8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x559162625900 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5591626258d0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5591625e0c70 <col:18> 'int' lvalue ->status 0x5591625decf8
|         | |   `-CXXThisExpr 0x5591625e0c60 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5591626258e8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5591625e0ca0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5591625dd9e0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x559162625b20 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x559162625a90 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5591625e0d20 <line:1076:13> '<bound member function type>' ->range_error 0x5591625df308
|         | | | `-CXXThisExpr 0x5591625e0d10 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x559162625920 <col:25> 'const ArgContext' lvalue ParmVar 0x559162624f00 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x559162625af8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x559162625ac8 <col:31, col:50> 'const bool' lvalue Var 0x55916229ae30 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x559162625a68 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x559162625a50 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x559162625a38 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x559162625a18 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x559162625208 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x559162625b10 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5591625e0f08 <col:20> 'bool' false
|         `-CompoundStmt 0x559162625bc8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x559162625b98 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x559162625b40 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x559162624e98 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x559162625b80 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x559162625b60 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x559162625208 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x559162625bb8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5591625e0fa8 <col:20> 'bool' true
|-FieldDecl 0x5591625dec90 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5591625decf8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5591625ded48 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5591625df000 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5591625ded88 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5591625dee08 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5591625dee80 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5591625def00 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5591625df308 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5591625df0d0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5591625df148 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5591625df1e0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5591625e1898 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5591625e1898
| `-ParmVarDecl 0x5591625e19a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5591625e1b28 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5591625e1c38 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559162621ad0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559162621aa0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x559162621a70 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559162621a40 <col:7> 'IntArg' lvalue ParmVar 0x5591625e1c38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5591625dec90 'base' 'int'
| | `-ImplicitCastExpr 0x559162621bc8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559162621b98 <col:7> 'int' xvalue .base 0x5591625dec90
| |     `-CXXStaticCastExpr 0x559162621b68 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559162621b38 <col:7> 'IntArg' lvalue ParmVar 0x5591625e1c38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5591625decf8 'status' 'int'
| | `-ImplicitCastExpr 0x559162621c98 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559162621c68 <col:7> 'int' xvalue .status 0x5591625decf8
| |     `-CXXStaticCastExpr 0x559162621c38 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559162621c08 <col:7> 'IntArg' lvalue ParmVar 0x5591625e1c38 '' 'IntArg &&'
| `-CompoundStmt 0x559162621cf0 <col:7>
`-CXXDestructorDecl 0x559162620c30 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5591625e5e30 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5591625e6088 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559162620b58 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5591626210d0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5591626210b0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x559162621140 <col:19>
|-CXXConstructorDecl 0x559162620d38 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x559162620d38
| `-ParmVarDecl 0x559162620e48 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x559162620ee8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559162620ff8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559162621d00 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559162621a20 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5591626219f0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5591626219c0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x559162620ff8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x559162621d70 <col:19>
`-CXXDestructorDecl 0x559162621180 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
