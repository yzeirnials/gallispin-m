
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48cc58a8 prev 0x558d48cbd048 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48cc59a0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x558d48cc5a30 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x558d48cc5aa8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x558d48cc5b68 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x558d48cc5c30 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x558d48cc5da8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x558d48cc5ce0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x558d48cc5e50 <col:24>
| `-OptimizeNoneAttr 0x558d48cc5ea8 <col:34>
|-CXXMethodDecl 0x558d48cc5ef0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x558d48cc61a8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x558d48cc5fa0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558d48cc6018 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x558d48cc6098 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x558d48cc6260 <line:229:7, col:14> col:7 private
|-FieldDecl 0x558d48cc6298 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x558d48cc6300 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x558d48cc6388 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x558d48cc66a8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x558d48cc6440 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558d48cc64b8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x558d48cc6530 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x558d48cc65b0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x558d48cc67c0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x558d48cce138 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558d48cce138
| `-ParmVarDecl 0x558d48cce248 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x558d48cce2e8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558d48cce2e8
| `-ParmVarDecl 0x558d48cce3f8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x558d48da0018 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48cb88c0 prev 0x558d48cb8640 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558d48cb89b8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x558d48cb8a48 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x558d48cb8aa8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x558d48cb8b98 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x558d48cb8c98 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x558d48cb8e68 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x558d48cb8d18 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x558d48cb8d90 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x558d48cb8ff8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x558d48cb8f30 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x558d48cb90a0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x558d48cb91d8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x558d48cb9110 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x558d48cb9378 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x558d48cb92b8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x558d48cb9518 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x558d48cb9458 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x558d48cb95c0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x558d48cb96c0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x558d48cb97a0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cb96a0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x558d48cb9680 <col:26> 'int' 1
| `-EnumConstantDecl 0x558d48cb9750 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x558d48cb97b8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48cb9730 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x558d48cb9710 <col:44> 'int' 2
|-CXXMethodDecl 0x558d48cb9900 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x558d48cb97e8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x558d48cb9868 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x558d48cb9a58 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x558d48cb99c8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x558d48cb9c98 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x558d48cb9b18 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x558d48cb9b90 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x558d48cb9d48 <col:20>
| `-OptimizeNoneAttr 0x558d48cb9da0 <col:30>
|-CXXMethodDecl 0x558d48cb9ea8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x558d48cb9de0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x558d48cb9f50 <col:20>
| `-OptimizeNoneAttr 0x558d48cb9fa8 <col:30>
|-CXXMethodDecl 0x558d48cb9ff8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x558d48cba0c0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x558d48cba1d8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x558d48cba260 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x558d48cba2e8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x558d48cba370 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x558d48cba3f8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x558d48cba488 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x558d48cba548 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x558d48cba5d0 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x558d48cba658 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x558d48cba6e0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x558d48cba768 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x558d48cba7f0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x558d48cba880 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x558d48cba940 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x558d48cba9d0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x558d48cbab20 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x558d48cbaa88 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x558d48cbacb0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x558d48cbabe0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x558d48cbaf60 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x558d48cbad68 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x558d48cbade8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x558d48cbae68 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x558d48cbb018 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x558d48cbb120 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558d48cbb3b0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cbb100 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x558d48cbb0e0 <col:33> 'int' 0
| |-EnumConstantDecl 0x558d48cbb1b0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558d48cbb3c8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cbb190 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x558d48cbb170 <col:32> 'int' 20
| |-EnumConstantDecl 0x558d48cbb240 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558d48cbb3e0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cbb220 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x558d48cbb200 <col:38> 'int' 90
| |-EnumConstantDecl 0x558d48cbb2d0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558d48cbb3f8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cbb2b0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x558d48cbb290 <col:35> 'int' 100
| `-EnumConstantDecl 0x558d48cbb360 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x558d48cbb410 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48cbb340 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x558d48cbb320 <col:32> 'int' 2000
|-CXXMethodDecl 0x558d48cbb450 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x558d48cbb890 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558d48cbb700 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x558d48cbb778 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cbb960 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x558d48cbbae0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x558d48cbba10 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cbbce8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558d48cbbb98 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x558d48cbbc10 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cbbde8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x558d48cbbe88 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x558d48cbbf50 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x558d48cbbfe0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x558d48cbc210 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cbbfc0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x558d48cbbfa0 <col:36> 'int' EnumConstant 0x558d48cbbf50 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x558d48cbc030 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558d48cbc080 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558d48cbc0d0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558d48cbc120 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558d48cbc170 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x558d48cbc1c0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x558d48cbc2f8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x558d48cbc238 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x558d48cbc3c0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x558d48cbc480 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x558d48cbc540 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x558d48cbc600 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x558d48cbc718 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x558d48cbc7e0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x558d48cbc960 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x558d48cbc890 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x558d48cbca88 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x558d48cbcc88 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x558d48cbcb38 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x558d48cbcbb8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x558d48cca5d8 <col:54, line:127:5>
|   |-ParenExpr 0x558d48cca488 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x558d48cca458 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x558d48cca148 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558d48cca120 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x558d48cca108 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x558d48cca0f0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x558d48cca0c0 <col:31> 'Router *' lvalue ->_router 0x558d48cc7fa0
|   |   |         `-CXXThisExpr 0x558d48cca0b0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558d48cca1a8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48cca188 <col:48> 'int' 0
|   |   `-CallExpr 0x558d48cca3b8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x558d48cca3a0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48cca380 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48cca3f8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48cca218 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x558d48cca410 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48cca238 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x558d48cca428 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48cca270 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x558d48cca440 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48cca368 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48cca350 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48cca308 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x558d48cca520 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x558d48cca4b8 <col:9> 'Router *' lvalue ->_router 0x558d48cc7fa0
|   | | `-CXXThisExpr 0x558d48cca4a8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x558d48cca508 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558d48cca4e8 <col:19> 'Router *' lvalue ParmVar 0x558d48cbcb38 'r' 'Router *'
|   `-BinaryOperator 0x558d48cca5b8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x558d48cca550 <col:9> 'int' lvalue ->_eindex 0x558d48cc8008
|     | `-CXXThisExpr 0x558d48cca540 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x558d48cca5a0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558d48cca580 <col:19> 'int' lvalue ParmVar 0x558d48cbcbb8 'eindex' 'int'
|-CXXMethodDecl 0x558d48cbce10 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x558d48cbcd48 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x558d48cbcee0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x558d48cbcfa8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x558d48cbd048 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x558d48cbd298 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x558d48cbd110 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x558d48cbd190 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x558d48cbd348 <col:20>
| `-OptimizeNoneAttr 0x558d48cbd3a0 <col:30>
|-CXXMethodDecl 0x558d48cbd4a8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558d48cbd3e0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x558d48cbd550 <col:20>
| `-OptimizeNoneAttr 0x558d48cbd5a8 <col:30>
|-CXXMethodDecl 0x558d48cbd678 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558d48cbd5e8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x558d48cbd720 <col:20>
| `-OptimizeNoneAttr 0x558d48cbd778 <col:30>
|-CXXMethodDecl 0x558d48cbd908 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x558d48cbd7b0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x558d48cbd830 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x558d48cbda98 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558d48cbd9d0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558d48cbdbe8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558d48cbdb58 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558d48cbdd38 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558d48cbdca8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558d48cbde88 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558d48cbddf8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558d48cbe148 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x558d48cbdf40 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x558d48cbdfc0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x558d48cbe068 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x558d48cbe220 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x558d48cbe2e0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x558d48cbe5b0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558d48cbe460 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x558d48cbe4d8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cbe6d8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x558d48cbe8b0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x558d48cbe790 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x558d48cbe810 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x558d48cbea98 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x558d48cbe978 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x558d48cbe9f8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x558d48cbee08 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558d48cbeb58 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558d48cbebd0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558d48cbec50 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558d48cc9bc0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48cc9ba0 <col:106> 'int' 0
| `-ParmVarDecl 0x558d48cbecc8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558d48cc9bf8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558d48cc9bd8 <col:126> 'int' 0
|-CXXMethodDecl 0x558d48cbf1a8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558d48cbeed8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558d48cbef70 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558d48cbeff0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x558d48cbf068 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558d48cc9c30 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558d48cc9c10 <col:114> 'int' 0
|-CXXMethodDecl 0x558d48cbf538 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558d48cbf280 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x558d48cbf2f8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558d48cbf378 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x558d48cc9c48 <col:96> 'int' 0
| `-ParmVarDecl 0x558d48cbf3f0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558d48cc9c88 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558d48cc9c68 <col:116> 'int' 0
|-CXXMethodDecl 0x558d48cbf8b8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558d48cbf608 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558d48cbf680 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cbf700 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558d48cc9cc0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48cc9ca0 <col:109> 'int' 0
| `-ParmVarDecl 0x558d48cbf778 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558d48cc9cf8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558d48cc9cd8 <col:129> 'int' 0
|-CXXMethodDecl 0x558d48cbfc38 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558d48cbf988 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558d48cbfa00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cbfa80 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x558d48cbfaf8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558d48cc9d30 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558d48cc9d10 <col:117> 'int' 0
|-CXXMethodDecl 0x558d48cbffc8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558d48cbfd10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cbfd88 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cbfe08 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x558d48cc9d48 <col:99> 'int' 0
| `-ParmVarDecl 0x558d48cbfe80 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558d48cc9d88 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558d48cc9d68 <col:119> 'int' 0
|-CXXMethodDecl 0x558d48cc03e8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x558d48cc0098 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558d48cc0118 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558d48cc0190 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cc0210 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558d48cc9dc0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48cc9da0 <col:108> 'int' 0
| `-ParmVarDecl 0x558d48cc0290 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x558d48cc9df8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x558d48cc9dd8 <col:141> 'int' 0
|-CXXMethodDecl 0x558d48cc0808 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558d48cc04c0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558d48cc0540 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558d48cc05b8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cc0638 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x558d48cc06b8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558d48cc9e10 <col:121> 'int' 0
|-CXXMethodDecl 0x558d48cc0c38 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558d48cc08e8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x558d48cc0968 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x558d48cc09e0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cc0a60 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x558d48cc9e30 <col:98> 'int' 0
| `-ParmVarDecl 0x558d48cc0ae0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558d48cc9e50 <col:123> 'int' 0
|-CXXMethodDecl 0x558d48cc0f00 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x558d48cc0d10 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558d48cc0d90 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x558d48cc0e10 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x558d48cc9e70 <col:80> 'int' 0
|-EnumDecl 0x558d48cc0fb8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x558d48cc10c0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558d48cc1350 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cc10a0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x558d48cc1080 <col:42> 'int' 1
| |-EnumConstantDecl 0x558d48cc1150 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558d48cc1368 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cc1130 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x558d48cc1110 <col:40> 'int' 2
| |-EnumConstantDecl 0x558d48cc11e0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558d48cc1380 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cc11c0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x558d48cc11a0 <col:44> 'int' 4
| |-EnumConstantDecl 0x558d48cc1270 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558d48cc1398 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cc1250 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x558d48cc1230 <col:36> 'int' 7
| `-EnumConstantDecl 0x558d48cc1300 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x558d48cc13b0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48cc12e0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x558d48cc12c0 <col:34> 'int' 6
|-CXXMethodDecl 0x558d48cc1668 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x558d48cc13d8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x558d48cc1478 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x558d48cc14f8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x558d48cc1570 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x558d48cc9f28 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x558d48cc9f10 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x558d48cc9ef8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x558d48cc9ed8 <col:98, col:105> 'String' (CXXTemporary 0x558d48cc9ed8)
|           `-CXXTemporaryObjectExpr 0x558d48cc9ea0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x558d48cc1908 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x558d48cc1738 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558d48cc17b0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x558d48cc1828 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558d48cc9fd8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558d48cc9fc0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558d48cc9fa8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558d48cc9f88 <col:94, col:101> 'String' (CXXTemporary 0x558d48cc9f88)
| |         `-CXXTemporaryObjectExpr 0x558d48cc9f50 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x558d48cca7c0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x558d48cca738 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x558d48cca708 <col:9> '<bound member function type>' ->add_task_handlers 0x558d48cc1668
|     | `-CXXThisExpr 0x558d48cca6f8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558d48cca778 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558d48cca678 <col:27> 'Task *' lvalue ParmVar 0x558d48cc1738 'task' 'Task *'
|     |-ImplicitCastExpr 0x558d48cca790 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x558d48cca698 <col:33> 'NotifierSignal *' lvalue ParmVar 0x558d48cc17b0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x558d48cca7a8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558d48cca6b8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558d48cc1300 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558d48cca6d8 <col:62> 'const String' lvalue ParmVar 0x558d48cc1828 'prefix' 'const String &'
|-CXXMethodDecl 0x558d48cc1b18 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x558d48cc19d0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558d48cc1a48 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558d48cca088 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558d48cca070 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558d48cca058 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558d48cca038 <col:70, col:77> 'String' (CXXTemporary 0x558d48cca038)
| |         `-CXXTemporaryObjectExpr 0x558d48cca000 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x558d48cca998 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x558d48cca910 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x558d48cca8e0 <col:9> '<bound member function type>' ->add_task_handlers 0x558d48cc1668
|     | `-CXXThisExpr 0x558d48cca8d0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558d48cca950 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558d48cca850 <col:27> 'Task *' lvalue ParmVar 0x558d48cc19d0 'task' 'Task *'
|     |-ImplicitCastExpr 0x558d48cca968 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x558d48cca870 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x558d48cca980 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558d48cca890 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558d48cc1300 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558d48cca8b0 <col:57> 'const String' lvalue ParmVar 0x558d48cc1a48 'prefix' 'const String &'
|-CXXMethodDecl 0x558d48cc1df8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x558d48cc1be0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc1c60 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc1cd8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x558d48cc20a8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x558d48cc1ec8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc1f48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc1fc8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x558d48cc2398 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558d48cc2178 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc21f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc2270 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x558d48cc2648 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x558d48cc2468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc24e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc2568 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x558d48cc28f8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x558d48cc2718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc2798 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc2818 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x558d48cc2ba8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x558d48cc29c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc2a48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc2ac0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x558d48cc2e58 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x558d48cc2c78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc2cf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc2d78 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x558d48cc3168 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x558d48cc2f80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc3000 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc3080 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x558d48cc3448 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x558d48cc3238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc32b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc3360 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x558d48cc3728 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x558d48cc3518 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc3598 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc3640 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x558d48cc3990 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558d48cc37f8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558d48cc3878 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558d48cc38f0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x558d48cc3c38 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x558d48cc3a60 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558d48cc3ae0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558d48cc3b58 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x558d48cc3ee8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x558d48cc3d08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc3d88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc3e08 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x558d48cc4198 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x558d48cc3fb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc4038 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc40b0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x558d48cc4448 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x558d48cc4268 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc42e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc4360 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x558d48cc4718 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x558d48cc4518 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc4598 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558d48cc4638 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x558d48cc4a48 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x558d48cc47e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558d48cc4868 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x558d48cc48e0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x558d48cc4958 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558d48cca0a0 <col:93> 'bool' false
|-CXXMethodDecl 0x558d48cc4c30 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558d48cc4b18 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x558d48cc4b98 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x558d48cc4e08 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558d48cc4cf0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x558d48cc4d70 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x558d48cc50e8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558d48cc4ec8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x558d48cc4f40 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x558d48cc4fc0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x558d48cc5038 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cc53d8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558d48cc51b8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x558d48cc5230 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x558d48cc52b0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x558d48cc5328 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cc5610 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x558d48cc54b0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x558d48cc5530 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x558d48cc57f8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x558d48cc56d8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x558d48cc5758 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x558d48cc58a8 prev 0x558d48cbd048 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558d48cc59a0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x558d48cc5a30 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x558d48cc5aa8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x558d48cc5b68 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x558d48cc5c30 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x558d48cc5da8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x558d48cc5ce0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x558d48cc5e50 <col:24>
| | `-OptimizeNoneAttr 0x558d48cc5ea8 <col:34>
| |-CXXMethodDecl 0x558d48cc5ef0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x558d48cc61a8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x558d48cc5fa0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558d48cc6018 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x558d48cc6098 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x558d48cc6260 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x558d48cc6298 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x558d48cc6300 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x558d48cc6388 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x558d48cc66a8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x558d48cc6440 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558d48cc64b8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x558d48cc6530 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x558d48cc65b0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x558d48cc67c0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x558d48cce138 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558d48cce138
| | `-ParmVarDecl 0x558d48cce248 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x558d48cce2e8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558d48cce2e8
| | `-ParmVarDecl 0x558d48cce3f8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x558d48da0018 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558d48cc6838 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x558d48cc68d8 <col:38> "" ""
|-CXXMethodDecl 0x558d48cc6968 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x558d48cc6a08 <col:44> "" ""
|-AccessSpecDecl 0x558d48cc6a78 <line:260:3, col:10> col:3 private
|-EnumDecl 0x558d48cc6aa0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x558d48cc6ba0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x558d48cc6bf0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48cc6b80 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x558d48cc6b60 <col:27> 'int' 4
|-FieldDecl 0x558d48cc6ca8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x558d48cc6e58 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x558d48cc6f10 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x558d48cc7fa0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x558d48cc8008 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x558d48cc8158 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x558d48cc8098 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x558d48cc8308 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x558d48cc8218 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x558d48cc84e8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x558d48cc83c8 <col:20> col:23 'int'
| `-ParmVarDecl 0x558d48cc8448 <col:25> col:28 'int'
|-CXXMethodDecl 0x558d48cc8790 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x558d48cc85b0 <col:23> col:26 'int'
| |-ParmVarDecl 0x558d48cc8630 <col:28> col:31 'int'
| `-ParmVarDecl 0x558d48cc86a8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x558d48cc8848 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x558d48cc8910 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x558d48cc8960 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x558d48cc89b0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x558d48cc8b90 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x558d48cc8a40 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x558d48cc8ab8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cc8e38 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x558d48cc8c58 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x558d48cc8cd8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x558d48cc8d50 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cc9058 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x558d48cc8f08 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x558d48cc8f88 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x558d48cc9390 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x558d48cc9118 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x558d48cc9198 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x558d48cc9210 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x558d48cc9290 <col:57> col:60 'int'
|-CXXMethodDecl 0x558d48cc9578 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558d48cc9460 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x558d48cc94e0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x558d48cc96c8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x558d48cc9638 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x558d48cc9a48 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x558d48cc9788 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x558d48cc9808 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x558d48cc9880 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x558d48cc9900 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x558d48cc9b60 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   int _length
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48cd12a8 <../elements/standard/hashswitch.hh:25:1, line:42:1> line:25:7 class HashSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x558d48cd1408 <col:1, col:7> col:7 implicit referenced class HashSwitch
|-FieldDecl 0x558d48cd14b0 <line:27:3, col:7> col:7 _offset 'int'
|-FieldDecl 0x558d48cd1518 <line:28:3, col:7> col:7 _length 'int'
|-AccessSpecDecl 0x558d48cd1568 <line:30:2, col:8> col:2 public
|-CXXConstructorDecl 0x558d48cd15f0 <line:32:3, col:14> col:3 HashSwitch 'void ()'
|-CXXMethodDecl 0x558d48cd16f0 <line:34:3, col:57> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x558d48cb9ff8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x558d48cd25b0 <col:34, col:57>
|   `-ReturnStmt 0x558d48cd25a0 <col:36, col:43>
|     `-ImplicitCastExpr 0x558d48cd2588 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558d48cd2560 <col:43> 'const char [11]' lvalue "HashSwitch"
|-CXXMethodDecl 0x558d48cd17b8 <line:35:3, col:51> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x558d48cba0c0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x558d48cd2690 <col:34, col:51>
|   `-ReturnStmt 0x558d48cd2680 <col:36, col:43>
|     `-ImplicitCastExpr 0x558d48cd2668 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558d48cd2648 <col:43> 'const char [5]' lvalue "1/1-"
|-CXXMethodDecl 0x558d48cd1880 <line:36:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x558d48cba488 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x558d48cd26f0 <col:34, col:49>
|   `-ReturnStmt 0x558d48cd26e0 <col:36, col:43>
|     `-ImplicitCastExpr 0x558d48cd26c8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x558d48cd26a8 <col:43> 'const char []' lvalue Var 0x558d48cba5d0 'PUSH' 'const char []'
|-CXXMethodDecl 0x558d48cd1b50 <line:38:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x558d48cbb890 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x558d48cd1a00 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x558d48cd1a78 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cd1d28 <line:40:3, col:31> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x558d48cb8e68 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x558d48cd1c18 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x558d48cd1c90 <col:23, col:30> col:31 'Packet *'
|-CXXConstructorDecl 0x558d48cd1e08 <line:25:7> col:7 implicit HashSwitch 'void (const HashSwitch &)' inline default_delete noexcept-unevaluated 0x558d48cd1e08
| `-ParmVarDecl 0x558d48cd1f18 <col:7> col:7 'const HashSwitch &'
|-CXXConstructorDecl 0x558d48cd1fb8 <col:7> col:7 implicit HashSwitch 'void (HashSwitch &&)' inline default_delete noexcept-unevaluated 0x558d48cd1fb8
| `-ParmVarDecl 0x558d48cd20c8 <col:7> col:7 'HashSwitch &&'
|-CXXMethodDecl 0x558d48cd2168 <col:7> col:7 implicit operator= 'HashSwitch &(const HashSwitch &)' inline default_delete noexcept-unevaluated 0x558d48cd2168
| `-ParmVarDecl 0x558d48cd2278 <col:7> col:7 'const HashSwitch &'
|-CXXMethodDecl 0x558d48cd22e8 <col:7> col:7 implicit operator= 'HashSwitch &(HashSwitch &&)' inline default_delete noexcept-unevaluated 0x558d48cd22e8
| `-ParmVarDecl 0x558d48cd23f8 <col:7> col:7 'HashSwitch &&'
`-CXXDestructorDecl 0x558d48cd2480 <col:7> col:7 implicit ~HashSwitch 'void ()' inline default noexcept-unevaluated 0x558d48cd2480
  `-Overrides: [ 0x558d48cb8b98 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.HashSwitch = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.HashSwitch.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48a8c760 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558d48a8c878 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x558d48a8c918 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x558d48a8c978 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x558d48a8c9d8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x558d48a8ca88 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48a8cd90 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48a8cea8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x558d48a8cf50 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x558d48a8cfb8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x558d48a8d048 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x558d48a930e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558d48a93518 <col:12>
|-CXXConstructorDecl 0x558d48a931e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558d48a932f8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558d48a8cf50 'data' 'const char *'
| | `-ImplicitCastExpr 0x558d48a95aa0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x558d48a95a70 <col:12> 'const char *const' lvalue .data 0x558d48a8cf50
| |     `-DeclRefExpr 0x558d48a95a50 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48a932f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558d48a8cfb8 'length' 'int'
| | `-ImplicitCastExpr 0x558d48a95b30 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558d48a95b00 <col:12> 'const int' lvalue .length 0x558d48a8cfb8
| |     `-DeclRefExpr 0x558d48a95ae0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48a932f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558d48a8d048 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x558d48a95bc0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x558d48a95b90 <col:12> 'String::memo_t *const' lvalue .memo 0x558d48a8d048
| |     `-DeclRefExpr 0x558d48a95b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48a932f8 '' 'const String::rep_t &'
| `-CompoundStmt 0x558d48a95c18 <col:12>
|-CXXConstructorDecl 0x558d48a93398 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558d48a93398
| `-ParmVarDecl 0x558d48a934a8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x558d48a98a00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558d48aa4418 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558d48aa4528 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x558d48aa4a40 <col:12>
|   |-BinaryOperator 0x558d48aa4858 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558d48aa4810 <col:12> 'const char *' lvalue ->data 0x558d48a8cf50
|   | | `-CXXThisExpr 0x558d48aa4800 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558d48aa4840 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x558d48aa47d0 <col:12> 'const char *const' lvalue .data 0x558d48a8cf50
|   |     `-DeclRefExpr 0x558d48aa47b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48aa4528 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558d48aa4920 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x558d48aa48d8 <col:12> 'int' lvalue ->length 0x558d48a8cfb8
|   | | `-CXXThisExpr 0x558d48aa48c8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558d48aa4908 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x558d48aa4898 <col:12> 'const int' lvalue .length 0x558d48a8cfb8
|   |     `-DeclRefExpr 0x558d48aa4878 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48aa4528 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558d48aa49e8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x558d48aa49a0 <col:12> 'String::memo_t *' lvalue ->memo 0x558d48a8d048
|   | | `-CXXThisExpr 0x558d48aa4990 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558d48aa49d0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x558d48aa4960 <col:12> 'String::memo_t *const' lvalue .memo 0x558d48a8d048
|   |     `-DeclRefExpr 0x558d48aa4940 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48aa4528 '' 'const String::rep_t &'
|   `-ReturnStmt 0x558d48aa4a30 <col:12>
|     `-UnaryOperator 0x558d48aa4a18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48aa4a08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x558d48aa4598 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558d48aa4598
  `-ParmVarDecl 0x558d48aa46a8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48a83cd0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558d48a83de8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x558d48a83e78 <col:16, col:22> col:16 public
|-TypedefDecl 0x558d48a83eb8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558d48757dc0 'const char *'
|   `-QualType 0x558d48757311 'const char' const
|     `-BuiltinType 0x558d48757310 'char'
|-TypedefDecl 0x558d48a83f40 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x558d48a83f10 'String::const_iterator' sugar
|   |-Typedef 0x558d48a83eb8 'const_iterator'
|   `-PointerType 0x558d48757dc0 'const char *'
|     `-QualType 0x558d48757311 'const char' const
|       `-BuiltinType 0x558d48757310 'char'
|-TypedefDecl 0x558d48a840b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x558d48a84020 'int (String::*)() const'
|   |-RecordType 0x558d48a83d60 'String'
|   | `-CXXRecord 0x558d48a83cd0 'String'
|   `-ParenType 0x558d48a83fc0 'int () const' sugar
|     `-FunctionProtoType 0x558d48a57b50 'int () const' const cdecl
|       `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48a84118 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x558d488ac730 'int64_t' sugar
|   |-Typedef 0x558d487c02d0 'int64_t'
|   `-TypedefType 0x558d487994d0 '__int64_t' sugar
|     |-Typedef 0x558d487990a8 '__int64_t'
|     `-BuiltinType 0x558d48757390 'long'
|-TypedefDecl 0x558d48a84180 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x558d488ac650 'uint64_t' sugar
|   |-Typedef 0x558d487c0470 'uint64_t'
|   `-TypedefType 0x558d48799560 '__uint64_t' sugar
|     |-Typedef 0x558d48799118 '__uint64_t'
|     `-BuiltinType 0x558d48757430 'unsigned long'
|-TypedefDecl 0x558d48a84210 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x558d48a841e0 'String::intmax_t' sugar
|   |-Typedef 0x558d48a84118 'intmax_t'
|   `-TypedefType 0x558d488ac730 'int64_t' sugar
|     |-Typedef 0x558d487c02d0 'int64_t'
|     `-TypedefType 0x558d487994d0 '__int64_t' sugar
|       |-Typedef 0x558d487990a8 '__int64_t'
|       `-BuiltinType 0x558d48757390 'long'
|-TypedefDecl 0x558d48a842a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x558d48a84270 'String::uintmax_t' sugar
|   |-Typedef 0x558d48a84180 'uintmax_t'
|   `-TypedefType 0x558d488ac650 'uint64_t' sugar
|     |-Typedef 0x558d487c0470 'uint64_t'
|     `-TypedefType 0x558d48799560 '__uint64_t' sugar
|       |-Typedef 0x558d48799118 '__uint64_t'
|       `-BuiltinType 0x558d48757430 'unsigned long'
|-CXXConstructorDecl 0x558d48a84360 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x558d48a84508 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x558d48a84448 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x558d48a846b8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x558d48a845f8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x558d48a84810 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x558d48a84780 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x558d48a84a28 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x558d48a848d8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x558d48a84958 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x558d48a84c48 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558d48a84af8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x558d48a84b78 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x558d48a84e68 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558d48a84d18 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x558d48a84d98 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x558d48a85088 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558d48a84f38 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x558d48a84fb8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x558d48a85218 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x558d48a85150 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x558d48a85398 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x558d48a852d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x558d48a85528 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x558d48a85460 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x558d48a85680 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x558d48a855f0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x558d48a857d8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x558d48a85748 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x558d48a85930 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x558d48a858a0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x558d48a85ab8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x558d48a859f8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x558d48a85c48 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x558d48a85b80 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x558d48a85dd8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x558d48a85d10 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x558d48a85f68 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x558d48a85ea0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x558d48a86060 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x558d48a86188 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x558d48a86308 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x558d48a86240 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x558d48a86458 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x558d48a863c8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x558d48a86510 <col:63> "" ""
|-CXXMethodDecl 0x558d48a86658 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x558d48a86598 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x558d48a86868 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x558d48a86718 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x558d48a86798 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x558d48a86a88 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x558d48a86930 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x558d48a869b0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x558d48a86d68 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x558d48a86b48 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558d48a86bc8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x558d48a92bb0 <col:55> 'int' 10
| `-ParmVarDecl 0x558d48a86c40 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558d48a92bd0 <col:76> 'bool' true
|-CXXMethodDecl 0x558d48a87048 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x558d48a86e30 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558d48a86eb0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558d48a92be0 <col:56> 'int' 10
| `-ParmVarDecl 0x558d48a86f28 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558d48a92c00 <col:77> 'bool' true
|-CXXMethodDecl 0x558d48a87150 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558d48a87218 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558d48a872e0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x558d48a87380 <col:20>
| `-OptimizeNoneAttr 0x558d48a873d8 <col:30>
|-CXXConversionDecl 0x558d48a874c8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558d48a87598 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x558d48a87658 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558d48a87748 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558d48a87808 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558d48a87988 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558d48a878c0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558d48a87ad8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x558d48a87a48 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x558d48a87bc8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558d48a87c88 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558d48a87ed8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x558d48a87d40 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x558d48a87dc0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x558d48a88138 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x558d48a87fa0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x558d48a88020 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x558d48a88208 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48a88418 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x558d48a882c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x558d48a88340 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x558d48a88638 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x558d48a884e0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x558d48a88560 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x558d48a887c8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x558d48a88700 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x558d48a888b8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x558d48a88a28 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x558d48a88968 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558d48a88c38 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x558d48a88ae8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558d48a88b68 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558d48a88e50 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x558d48a88cf8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x558d48a88d70 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x558d48a88fe0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x558d48a88f10 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558d48a89200 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x558d48a890a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x558d48a89120 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558d48a89350 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x558d48a892c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x558d48a89528 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x558d48a89410 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558d48a89490 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558d48a89678 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x558d48a895e8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x558d48a89890 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x558d48a89730 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x558d48a897b0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x558d48a92c10 <col:39> 'int' 0
|-CXXMethodDecl 0x558d48a89ab0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x558d48a89950 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x558d48a899d0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x558d48a92c30 <col:48> 'int' 0
|-CXXMethodDecl 0x558d48a89c90 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x558d48a89b70 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x558d48a89bf0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x558d48a92c50 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x558d48a89d60 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x558d48a89e20 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x558d48a89ee0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x558d48a89fa0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x558d48a8a060 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x558d48a8a208 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x558d48a8a110 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x558d48a8a388 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x558d48a8a2c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x558d48a8a560 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x558d48a8a448 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x558d48a8a6d8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x558d48a8a618 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x558d48a8a820 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x558d48a8a790 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558d48a8a970 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558d48a8a8e0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558d48a8ab48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558d48a8aa30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558d48a8aab0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558d48a8ad28 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558d48a8ac10 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558d48a8ac90 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558d48a8ae78 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x558d48a8ade8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558d48a8b088 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558d48a8af38 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558d48a8afb8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558d48a8b1e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x558d48a8b150 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558d48a8b340 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x558d48a8b2a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x558d48a8b3e8 <col:57> "" ""
|-CXXMethodDecl 0x558d48a8b4f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x558d48a8b468 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x558d48a8b648 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x558d48a8b5b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x558d48a8b7c8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x558d48a8b700 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x558d48a8b890 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x558d48a8b950 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x558d48a8ba10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x558d48a8bab0 <col:49> "" ""
|-CXXMethodDecl 0x558d48a8bb40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x558d48a8bc00 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x558d48a8bcf0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x558d48a8bdb8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x558d48a8be78 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x558d48a8bf38 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558d48a8c030 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x558d48a8c0f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x558d48a8c1c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x558d48a8c398 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x558d48a8c278 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x558d48a8c2f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x558d48a8c5c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x558d48a8c460 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x558d48a8c4e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x558d48a8c6d0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x558d48a8c738 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x558d48a8c760 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x558d48a8c878 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x558d48a8c918 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x558d48a8c978 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x558d48a8c9d8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x558d48a8ca88 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x558d48a8caf0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x558d48a8cd28 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x558d48a8cd78 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48a8cd08 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x558d48a8cc18 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x558d48a8cbc0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x558d48a8cc00 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x558d48a8cbe0 <col:32> 'int' 8
|-CXXRecordDecl 0x558d48a8cd90 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558d48a8cea8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x558d48a8cf50 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x558d48a8cfb8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x558d48a8d048 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x558d48a930e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558d48a93518 <col:12>
| |-CXXConstructorDecl 0x558d48a931e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558d48a932f8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558d48a8cf50 'data' 'const char *'
| | | `-ImplicitCastExpr 0x558d48a95aa0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x558d48a95a70 <col:12> 'const char *const' lvalue .data 0x558d48a8cf50
| | |     `-DeclRefExpr 0x558d48a95a50 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48a932f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558d48a8cfb8 'length' 'int'
| | | `-ImplicitCastExpr 0x558d48a95b30 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558d48a95b00 <col:12> 'const int' lvalue .length 0x558d48a8cfb8
| | |     `-DeclRefExpr 0x558d48a95ae0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48a932f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558d48a8d048 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x558d48a95bc0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x558d48a95b90 <col:12> 'String::memo_t *const' lvalue .memo 0x558d48a8d048
| | |     `-DeclRefExpr 0x558d48a95b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48a932f8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x558d48a95c18 <col:12>
| |-CXXConstructorDecl 0x558d48a93398 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558d48a93398
| | `-ParmVarDecl 0x558d48a934a8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x558d48a98a00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x558d48aa4418 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558d48aa4528 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x558d48aa4a40 <col:12>
| |   |-BinaryOperator 0x558d48aa4858 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x558d48aa4810 <col:12> 'const char *' lvalue ->data 0x558d48a8cf50
| |   | | `-CXXThisExpr 0x558d48aa4800 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558d48aa4840 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x558d48aa47d0 <col:12> 'const char *const' lvalue .data 0x558d48a8cf50
| |   |     `-DeclRefExpr 0x558d48aa47b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48aa4528 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558d48aa4920 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x558d48aa48d8 <col:12> 'int' lvalue ->length 0x558d48a8cfb8
| |   | | `-CXXThisExpr 0x558d48aa48c8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558d48aa4908 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x558d48aa4898 <col:12> 'const int' lvalue .length 0x558d48a8cfb8
| |   |     `-DeclRefExpr 0x558d48aa4878 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48aa4528 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558d48aa49e8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x558d48aa49a0 <col:12> 'String::memo_t *' lvalue ->memo 0x558d48a8d048
| |   | | `-CXXThisExpr 0x558d48aa4990 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558d48aa49d0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x558d48aa4960 <col:12> 'String::memo_t *const' lvalue .memo 0x558d48a8d048
| |   |     `-DeclRefExpr 0x558d48aa4940 <col:12> 'const String::rep_t' lvalue ParmVar 0x558d48aa4528 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x558d48aa4a30 <col:12>
| |     `-UnaryOperator 0x558d48aa4a18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558d48aa4a08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x558d48aa4598 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558d48aa4598
|   `-ParmVarDecl 0x558d48aa46a8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x558d48a8d0c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x558d48a8d308 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x558d48a8d128 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x558d48a8d1a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x558d48a8d220 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x558d48a930a0 <col:79, line:261:5>
|   |-BinaryOperator 0x558d48a92d18 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558d48a92cb0 <col:2, col:5> 'const char *' lvalue .data 0x558d48a8cf50
|   | | `-MemberExpr 0x558d48a92c80 <col:2> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|   | |   `-CXXThisExpr 0x558d48a92c70 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558d48a92d00 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558d48a92ce0 <col:12> 'const char *' lvalue ParmVar 0x558d48a8d128 'data' 'const char *'
|   |-BinaryOperator 0x558d48a92de0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x558d48a92d78 <col:2, col:5> 'int' lvalue .length 0x558d48a8cfb8
|   | | `-MemberExpr 0x558d48a92d48 <col:2> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|   | |   `-CXXThisExpr 0x558d48a92d38 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558d48a92dc8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x558d48a92da8 <col:14> 'int' lvalue ParmVar 0x558d48a8d1a8 'length' 'int'
|   `-IfStmt 0x558d48a93088 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x558d48a92f00 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558d48a92ee8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x558d48a92ec8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x558d48a92ea8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x558d48a92e40 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|     |       | `-MemberExpr 0x558d48a92e10 <col:7> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|     |       |   `-CXXThisExpr 0x558d48a92e00 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x558d48a92e90 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558d48a92e70 <col:17> 'String::memo_t *' lvalue ParmVar 0x558d48a8d220 'memo' 'String::memo_t *'
|     `-CallExpr 0x558d48a93060 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x558d48a93048 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558d48a92f50 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x558d48a7bd38 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x558d48a92fb8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558d48a8c918
|         `-ImplicitCastExpr 0x558d48a92fa0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x558d48a92f80 <col:27> 'String::memo_t *' lvalue ParmVar 0x558d48a8d220 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x558d48a8d5b8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x558d48a8d3d8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x558d48a8d458 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x558d48a8d4d0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x558d48a8d0c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x558d48a93528 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558d48a936b8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x558d48a93620 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x558d48a93590 <col:2> '<bound member function type>' ->assign_memo 0x558d48a8d308
|     | `-ImplicitCastExpr 0x558d48a93658 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x558d48a93580 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x558d48a93670 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x558d48a935c0 <col:14> 'const char *' lvalue ParmVar 0x558d48a8d3d8 'data' 'const char *'
|     |-ImplicitCastExpr 0x558d48a93688 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558d48a935e0 <col:20> 'int' lvalue ParmVar 0x558d48a8d458 'length' 'int'
|     `-ImplicitCastExpr 0x558d48a936a0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x558d48a93600 <col:28> 'String::memo_t *' lvalue ParmVar 0x558d48a8d4d0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x558d48a8d748 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x558d48a8d688 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x558d48a93910 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x558d48a93890 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x558d48a936e0 <col:2> '<bound member function type>' ->assign_memo 0x558d48a8d308
|     | `-CXXThisExpr 0x558d48a936d0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x558d48a938c8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x558d48a93760 <col:14, col:19> 'const char *' lvalue .data 0x558d48a8cf50
|     |   `-MemberExpr 0x558d48a93730 <col:14, col:16> 'String::rep_t' lvalue ._r 0x558d48a8d0c0
|     |     `-DeclRefExpr 0x558d48a93710 <col:14> 'const String' lvalue ParmVar 0x558d48a8d688 'x' 'const String &'
|     |-ImplicitCastExpr 0x558d48a938e0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x558d48a937e0 <col:25, col:30> 'int' lvalue .length 0x558d48a8cfb8
|     |   `-MemberExpr 0x558d48a937b0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x558d48a8d0c0
|     |     `-DeclRefExpr 0x558d48a93790 <col:25> 'const String' lvalue ParmVar 0x558d48a8d688 'x' 'const String &'
|     `-ImplicitCastExpr 0x558d48a938f8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x558d48a93860 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|         `-MemberExpr 0x558d48a93830 <col:38, col:40> 'String::rep_t' lvalue ._r 0x558d48a8d0c0
|           `-DeclRefExpr 0x558d48a93810 <col:38> 'const String' lvalue ParmVar 0x558d48a8d688 'x' 'const String &'
|-CXXMethodDecl 0x558d48a8d810 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x558d48a942d0 <col:31, line:278:5>
|   `-IfStmt 0x558d48a942b8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x558d48a939b0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558d48a93998 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x558d48a93968 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|     |     `-MemberExpr 0x558d48a93938 <col:6> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|     |       `-CXXThisExpr 0x558d48a93928 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x558d48a94290 <col:15, line:277:2>
|       |-ParenExpr 0x558d48a93e60 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x558d48a93e30 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x558d48a93ac0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x558d48a93aa8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x558d48a93a90 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x558d48a93a50 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558d48a8c918
|       |   |       `-ImplicitCastExpr 0x558d48a93a38 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x558d48a93a08 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|       |   |           `-MemberExpr 0x558d48a939d8 <col:27> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|       |   |             `-CXXThisExpr 0x558d48a939c8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x558d48a93b20 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x558d48a93b00 <col:54> 'int' 0
|       |   `-CallExpr 0x558d48a93d90 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x558d48a93d78 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558d48a93cf8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x558d48a93dd0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558d48a93c08 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x558d48a93de8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558d48a93c38 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x558d48a93e00 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x558d48a93c70 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x558d48a93e18 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x558d48a93ce0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x558d48a93cc8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x558d48a93c90 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x558d48a941b0 <line:274:6, line:275:22>
|       | |-CallExpr 0x558d48a94070 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x558d48a94058 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x558d48a93fd0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x558d48a7d180 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x558d48a93fa0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558d48a8c918
|       | |   `-ImplicitCastExpr 0x558d48a93f88 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x558d48a93f58 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|       | |       `-MemberExpr 0x558d48a93f28 <col:40> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|       | |         `-CXXThisExpr 0x558d48a93f18 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x558d48a94170 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x558d48a94158 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x558d48a94098 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x558d48a91ff0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x558d48a94198 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x558d48a940f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|       |       `-MemberExpr 0x558d48a940c8 <col:15> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|       |         `-CXXThisExpr 0x558d48a940b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x558d48a94270 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x558d48a94208 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558d48a8d048
|         | `-MemberExpr 0x558d48a941d8 <col:6> 'String::rep_t' lvalue ->_r 0x558d48a8d0c0
|         |   `-CXXThisExpr 0x558d48a941c8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x558d48a94258 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x558d48a94238 <col:16> 'int' 0
|-CXXMethodDecl 0x558d48a8daa8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x558d48a8d8c8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558d48a8d948 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558d48a8d9c0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x558d48a8db80 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558d48a8ddd0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x558d48a8dc38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558d48a8dcb8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558d48a8dd30 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x558d48a8dfb8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x558d48a8dea0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x558d48a8df20 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x558d48a8e0b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x558d48a943a8 <col:41, line:286:5>
|   `-ReturnStmt 0x558d48a94398 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x558d48a94368 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x558d48a94330 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x558d48a94318 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x558d48a942f8 <col:46> 'int' 1
|-CXXMethodDecl 0x558d48a8e358 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x558d48a8e170 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x558d48a8e1f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x558d48a8e270 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x558d48a91ff0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x558d48a8e420 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x558d48a920c0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x558d48a92290 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x558d48a92178 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558d48a921f8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x558d48a92350 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x558d48a92418 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x558d48a92518 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x558d48a92590 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x558d48a92608 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x558d48a92670 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x558d48a92770 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x558d48a927c0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48a92750 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x558d48a92730 <col:22> 'int' 14
|-CXXMethodDecl 0x558d48a929d8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x558d48a927f0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x558d48a92870 <col:38> col:41 'int'
| `-ParmVarDecl 0x558d48a928f0 <col:43> col:46 'int'
|-FriendDecl 0x558d48a92ae0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x558d48a92b70 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558d48d20b10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x558d48d20ce8 prev 0x558d48d20b10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558d48d20d78 <col:46, col:52> col:46 public
|-TypedefDecl 0x558d48d20da0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d22770 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x558d48d22720 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x558d48d22700 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x558d48d20fb8 'type'
|     `-SubstTemplateTypeParmType 0x558d48d20f80 'String' sugar
|       |-TemplateTypeParmType 0x558d48a47570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a47520 'T'
|       `-RecordType 0x558d48a83d60 'String'
|         `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d22828 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x558d48d227f0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x558d48d227d0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558d48d22770 'type'
|     `-ElaboratedType 0x558d48d22720 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x558d48d22700 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x558d48d20fb8 'type'
|         `-SubstTemplateTypeParmType 0x558d48d20f80 'String' sugar
|           |-TemplateTypeParmType 0x558d48a47570 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558d48a47520 'T'
|           `-RecordType 0x558d48a83d60 'String'
|             `-CXXRecord 0x558d48a83cd0 'String'
|-CXXMethodDecl 0x558d48d229a8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x558d48d228b8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x558d48d22a98 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558d48d22b78 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x558d48d22b78
|-CXXMethodDecl 0x558d48d22e48 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558d48d22d50 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x558d48d23088 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558d48d22f00 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558d48d22f78 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d23258 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558d48d23148 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558d48d231c0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d233b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558d48d23488 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558d48d236d8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558d48d23548 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558d48d235c0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d23938 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x558d48d237a8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558d48d23820 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d23af8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558d48d23a08 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d23cb8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558d48d23bc0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d23d70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558d48d23e20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558d48d24058 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558d48d23ed0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558d48d23f48 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558d48d242f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558d48d24200 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x558d48d243c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x558d48d24410 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558d48d24460 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558d48cbb500 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558d48d1f578 prev 0x558d48cbb500 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558d48d20a80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x558d48d20a30 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x558d48d20a10 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558d48d208c0 'type'
|     `-SubstTemplateTypeParmType 0x558d48d20750 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x558d48a1d320 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x558d48a1d2c8 'F'
|       `-RecordType 0x558d48d203b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x558d48d202d0 'typed_array_memory'
|-FieldDecl 0x558d48d244b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x558d48d24500 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558d48d24538 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|   |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558d48a54838 'T'
|   `-RecordType 0x558d48a83d60 'String'
|     `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d245c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x558d48d24590 'String &'
|   `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|     |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558d48a54838 'T'
|     `-RecordType 0x558d48a83d60 'String'
|       `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d24658 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x558d48d24620 'const String &'
|   `-QualType 0x558d48d1f611 'const String' const
|     `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-RecordType 0x558d48a83d60 'String'
|         `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d246e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x558d48d246b0 'String *'
|   `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|     |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558d48a54838 'T'
|     `-RecordType 0x558d48a83d60 'String'
|       `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d24778 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x558d48d24740 'const String *'
|   `-QualType 0x558d48d1f611 'const String' const
|     `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-RecordType 0x558d48a83d60 'String'
|         `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d253d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x558d48d25380 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x558d48d25360 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x558d48d25298 'type'
|     `-LValueReferenceType 0x558d48d25260 'const String &'
|       `-QualType 0x558d48d25001 'const String' const
|         `-SubstTemplateTypeParmType 0x558d48d25000 'String' sugar
|           |-TemplateTypeParmType 0x558d48a27270 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558d48a27218 'T'
|           `-RecordType 0x558d48a83d60 'String'
|             `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d25438 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x558d48d24620 'const String &'
|   `-QualType 0x558d48d1f611 'const String' const
|     `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-RecordType 0x558d48a83d60 'String'
|         `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d25490 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d254f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x558d48d246b0 'String *'
|   `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|     |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558d48a54838 'T'
|     `-RecordType 0x558d48a83d60 'String'
|       `-CXXRecord 0x558d48a83cd0 'String'
|-TypedefDecl 0x558d48d25560 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x558d48d24740 'const String *'
|   `-QualType 0x558d48d1f611 'const String' const
|     `-SubstTemplateTypeParmType 0x558d48d1f610 'String' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-RecordType 0x558d48a83d60 'String'
|         `-CXXRecord 0x558d48a83cd0 'String'
|-EnumDecl 0x558d48d255b8 <line:134:5> col:5
| `-EnumConstantDecl 0x558d48d256b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558d48d25690 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558d48a55f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558d48a55ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558d48a55ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558d48d25738 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558d48d259c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d257f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558d48d25890 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x558d48d25c58 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x558d48d25b40 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x558d48d25f18 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x558d48d25e00 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x558d48d26230 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x558d48d26110 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x558d48d26540 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x558d48d26420 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x558d48d26830 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d26678 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558d48d266f0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558d48d26958 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558d48d26a08 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d26a60 <col:30> Inherited
|-CXXMethodDecl 0x558d48d26aa8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558d48d26b58 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d26bb0 <col:30> Inherited
|-CXXMethodDecl 0x558d48d26c78 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558d48d26d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d26d80 <col:30> Inherited
|-CXXMethodDecl 0x558d48d26dc8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558d48d26e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d26ed0 <col:30> Inherited
|-CXXMethodDecl 0x558d48d26f18 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558d48d26fc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d27020 <col:30> Inherited
|-CXXMethodDecl 0x558d48d27068 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558d48d27118 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d27170 <col:30> Inherited
|-CXXMethodDecl 0x558d48d27198 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558d48d27248 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558d48d272f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558d48d274b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d273a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558d48d27420 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558d48d27608 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558d48d27578 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d277b8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x558d48d276c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558d48d27870 <col:20>
| `-OptimizeNoneAttr 0x558d48d278c8 <col:30>
|-CXXMethodDecl 0x558d48d279e8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x558d48d278f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558d48d27aa0 <col:20>
| `-OptimizeNoneAttr 0x558d48d27af8 <col:30>
|-CXXMethodDecl 0x558d48d27bb0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558d48d27b20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d27cf8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558d48d27c68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d27e28 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x558d48d27f28 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x558d48d27ff8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x558d48d280c8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x558d48d28208 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558d48d28178 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d28350 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558d48d282c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d28498 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x558d48d28408 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558d48d28550 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558d48d28650 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558d48d285c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558d48d28708 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558d48d287c8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x558d48d288c8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x558d48d28a48 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558d48d28988 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x558d48d29208 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558d48d28b00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x558d48d29168 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x558d48d29068 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x558d48d292e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558d48d29438 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558d48d293a8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558d48d294f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558d48d29738 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d295b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558d48d29628 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558d48d298c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x558d48d29808 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558d48d29ad8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x558d48d29990 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558d48d29a08 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558d48d29b98 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558d48d29df8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x558d48d29d00 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x558d48d29ec8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558d48d29ec8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48cd2708 prev 0x558d48cb86d0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558d48cd2800 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x558d48cd2890 <col:22, col:28> col:22 public
|-EnumDecl 0x558d48cd28b8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x558d48cd29d8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd29b8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x558d48cd29a0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558d48cd2980 <col:14> 'int' 999
| |-EnumConstantDecl 0x558d48cd2a80 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2a60 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x558d48cd2a48 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558d48cd2a28 <col:14> 'int' 1
| |-EnumConstantDecl 0x558d48cd2b10 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2af0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x558d48cd2ad0 <col:17> 'int' 0
| |-EnumConstantDecl 0x558d48cd2ba0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2b80 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x558d48cd2b60 <col:13> 'int' 1
| |-EnumConstantDecl 0x558d48cd2c30 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2c10 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x558d48cd2bf0 <col:16> 'int' 2
| |-EnumConstantDecl 0x558d48cd2cc0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2ca0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x558d48cd2c80 <col:13> 'int' 3
| |-EnumConstantDecl 0x558d48cd2d50 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2d30 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x558d48cd2d10 <col:15> 'int' 4
| |-EnumConstantDecl 0x558d48cd2de0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2dc0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x558d48cd2da0 <col:14> 'int' 5
| |-EnumConstantDecl 0x558d48cd2e70 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x558d48cd2e50 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x558d48cd2e30 <col:12> 'int' 6
| `-EnumConstantDecl 0x558d48cd2f00 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x558d48cd2ee0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x558d48cd2ec0 <col:13> 'int' 7
|-VarDecl 0x558d48cd2f70 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x558d48cd2ff8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x558d48cd3080 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x558d48cd3108 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x558d48cd3190 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x558d48cd3218 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x558d48cd32a0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x558d48cd3328 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x558d48cd33b0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x558d48cd3438 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x558d48cd34c0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x558d48cd35c0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x558d48cda6e8 '_nerrors' 'int'
| | `-IntegerLiteral 0x558d48cdae78 <line:128:13> 'int' 0
| `-CompoundStmt 0x558d48cdaee8 <col:16, line:129:5>
|-CXXDestructorDecl 0x558d48cd36b0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x558d48cdaef8 <col:29, line:132:5>
|-CXXMethodDecl 0x558d48cd3868 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x558d48cd37a0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cd3930 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558d48cd3a18 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558d48cdaf50 <col:44, line:161:5>
|   `-ReturnStmt 0x558d48cdaf40 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x558d48cdaf28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558d48cdaf08 <col:9> 'ErrorHandler *' lvalue Var 0x558d48cda748 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cd3b88 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x558d48cd3ac8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558d48cd3c50 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558d48cdafb0 <col:43, line:173:5>
|   `-ReturnStmt 0x558d48cdafa0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x558d48cdaf88 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558d48cdaf68 <col:9> 'ErrorHandler *' lvalue Var 0x558d48cda7c0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x558d48cd3d08 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x558d48cd3d88 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x558d48cd3e98 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x558d48cd3e08 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd3fe8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x558d48cd3f58 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd4140 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x558d48cd40a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd4298 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x558d48cd4200 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd43f0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x558d48cd4358 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd4600 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558d48cd44a8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x558d48cd4528 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd47d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558d48cd46c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x558d48cd4740 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd49f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558d48cd4898 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x558d48cd4918 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd4bd8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558d48cd4ab8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558d48cd4b38 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd4db8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558d48cd4c98 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558d48cd4d18 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd4f40 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x558d48cd4e78 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x558d48cd5110 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x558d48cd4ff8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558d48cd5070 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x558d48cdb208 <col:57, line:234:5>
|   `-ReturnStmt 0x558d48cdb1f8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x558d48cdb1e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558d48cdb188 <col:9, col:41> 'int'
|         |-MemberExpr 0x558d48cdb158 <col:9> '<bound member function type>' ->xmessage 0x558d48cd4f40
|         | `-CXXThisExpr 0x558d48cdb148 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x558d48cdb1c8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558d48cdb1b0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558d48cdb128 <col:18, col:40> 'String' (CXXTemporary 0x558d48cdb128)
|               `-CallExpr 0x558d48cdb0f0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x558d48cdb0d8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x558d48cdb050 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558d48cd7198 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x558d48cdb070 <col:31> 'const String' lvalue ParmVar 0x558d48cd5070 'str' 'const String &'
|                 `-DeclRefExpr 0x558d48cdb090 <col:36> 'const String' lvalue ParmVar 0x558d48cd4ff8 'anno' 'const String &'
|-CXXMethodDecl 0x558d48cd5450 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558d48cd51d0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558d48cd5250 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x558d48cd5320 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558d48cdb498 <col:68, line:243:5>
|   `-ReturnStmt 0x558d48cdb488 <line:242:2, col:41>
|     `-ExprWithCleanups 0x558d48cdb470 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558d48cdb410 <col:9, col:41> 'int'
|         |-MemberExpr 0x558d48cdb3e0 <col:9> '<bound member function type>' ->xmessage 0x558d48cd5110
|         | `-CXXThisExpr 0x558d48cdb3d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558d48cdb2a8 <col:18> 'const String' lvalue ParmVar 0x558d48cd51d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558d48cdb458 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558d48cdb440 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558d48cdb3b0 <col:24, col:40> 'String' (CXXTemporary 0x558d48cdb3b0)
|               `-CXXMemberCallExpr 0x558d48cdb348 <col:24, col:40> 'String'
|                 |-MemberExpr 0x558d48cdb2d8 <col:24> '<bound member function type>' ->vformat 0x558d48cd6630
|                 | `-CXXThisExpr 0x558d48cdb2c8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558d48cdb378 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558d48cdb308 <col:32> 'const char *' lvalue ParmVar 0x558d48cd5250 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558d48cdb390 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558d48cdb328 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558d48cd5320 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558d48cd56f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x558d48cd5518 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558d48cd5590 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558d48cd5608 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x558d48cdb7d8 <col:23, line:254:5>
|   `-ReturnStmt 0x558d48cdb7c8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x558d48cdb7b0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x558d48cdb750 <col:9, col:71> 'int'
|         |-MemberExpr 0x558d48cdb720 <col:9> '<bound member function type>' ->xmessage 0x558d48cd5110
|         | `-CXXThisExpr 0x558d48cdb710 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x558d48cdb798 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x558d48cdb780 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x558d48cdb6d0 <col:18, col:65> 'String' (CXXTemporary 0x558d48cdb6d0)
|         |     `-CallExpr 0x558d48cdb668 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x558d48cdb650 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x558d48cdb538 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558d48cd7198 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x558d48cdb558 <col:31> 'const String' lvalue ParmVar 0x558d48cd5590 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x558d48cdb6b0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x558d48cdb698 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x558d48cdb630 <col:37, col:64> 'String' (CXXTemporary 0x558d48cdb630)
|         |             `-CallExpr 0x558d48cdb600 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x558d48cdb5e8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x558d48cdb578 <col:37> 'String (const String &)' lvalue CXXMethod 0x558d48cd77e8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x558d48cdb598 <col:56> 'const String' lvalue ParmVar 0x558d48cd5518 'landmark' 'const String &'
|         `-DeclRefExpr 0x558d48cdb6f0 <col:68> 'const String' lvalue ParmVar 0x558d48cd5608 'str' 'const String &'
|-CXXMethodDecl 0x558d48cd5a70 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558d48cd57b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558d48cd5830 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558d48cd58b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x558d48cd5928 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558d48cdba90 <col:34, line:267:5>
|   `-ReturnStmt 0x558d48cdba80 <line:266:2, col:51>
|     `-ExprWithCleanups 0x558d48cdba68 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x558d48cdba00 <col:9, col:51> 'int'
|         |-MemberExpr 0x558d48cdb9d0 <col:9> '<bound member function type>' ->xmessage 0x558d48cd56f0
|         | `-CXXThisExpr 0x558d48cdb9c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558d48cdb878 <col:18> 'const String' lvalue ParmVar 0x558d48cd57b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x558d48cdb898 <col:28> 'const String' lvalue ParmVar 0x558d48cd5830 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558d48cdba50 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x558d48cdba38 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558d48cdb9a0 <col:34, col:50> 'String' (CXXTemporary 0x558d48cdb9a0)
|               `-CXXMemberCallExpr 0x558d48cdb938 <col:34, col:50> 'String'
|                 |-MemberExpr 0x558d48cdb8c8 <col:34> '<bound member function type>' ->vformat 0x558d48cd6630
|                 | `-CXXThisExpr 0x558d48cdb8b8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558d48cdb968 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558d48cdb8f8 <col:42> 'const char *' lvalue ParmVar 0x558d48cd58b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558d48cdb980 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558d48cdb918 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558d48cd5928 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558d48cd5b80 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x558d48cdbb10 <col:25, line:288:5>
|   `-ReturnStmt 0x558d48cdbb00 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x558d48cdbae8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x558d48cdbab8 <col:9> 'const int' lvalue ->_nerrors 0x558d48cda6e8
|         `-CXXThisExpr 0x558d48cdbaa8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x558d48cd5d90 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x558d48cd5c38 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x558d48cd5cb8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd6078 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558d48cd5e58 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x558d48cd5ed8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x558d48cd5f50 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558d48cd6210 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x558d48cd6148 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd6458 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558d48cd62d0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x558d48cd6348 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558d48cdbd70 <col:58, line:357:5>
|   `-ReturnStmt 0x558d48cdbd60 <line:356:2, col:29>
|     `-ExprWithCleanups 0x558d48cdbd48 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x558d48cdbd18 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558d48cdbd00 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x558d48cdbce0 <col:9, col:29> 'String' (CXXTemporary 0x558d48cdbce0)
|             `-CallExpr 0x558d48cdbc70 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x558d48cdbc58 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558d48cdbbd8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x558d48cd6078 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x558d48cdbb78 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x558d48cdbca8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x558d48cdbb98 <col:21> 'const char *' lvalue ParmVar 0x558d48cd62d0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x558d48cdbcc0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x558d48cdbbb8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558d48cd6348 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558d48cd6630 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x558d48cd6520 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x558d48cd6598 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558d48cd6788 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x558d48cd66f8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x558d48cd6908 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x558d48cd6840 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x558d48cd6ba0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x558d48cd69c0 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x558d48cd6a40 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x558d48cd6ab8 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x558d48cd6d00 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x558d48cd6c70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x558d48cdbe88 <col:37, line:441:5>
|   `-IfStmt 0x558d48cdbe70 <line:439:2, line:440:8>
|     |-BinaryOperator 0x558d48cdbdf8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x558d48cdbdc8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x558d48cdbd88 <col:6> 'int' lvalue ParmVar 0x558d48cd6c70 'level' 'int'
|     | `-ImplicitCastExpr 0x558d48cdbde0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x558d48cdbda8 <col:15> 'ErrorHandler::Level' EnumConstant 0x558d48cd2cc0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x558d48cdbe58 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x558d48cdbe28 <col:8> 'int' lvalue ->_nerrors 0x558d48cda6e8
|         `-CXXThisExpr 0x558d48cdbe18 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x558d48cd6dc8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x558d48cdbf20 <col:26, line:448:5>
|   `-BinaryOperator 0x558d48cdbf00 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x558d48cdbeb0 <col:2> 'int' lvalue ->_nerrors 0x558d48cda6e8
|     | `-CXXThisExpr 0x558d48cdbea0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x558d48cdbee0 <col:13> 'int' 0
|-CXXMethodDecl 0x558d48cd6f90 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x558d48cd6e80 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x558d48cd6ef8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x558d48cd7198 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x558d48cd7050 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x558d48cd70c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x558d48cd7448 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x558d48cd7258 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x558d48cd72d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x558d48cd7358 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x558d48cd7500 <col:59> 0 0
|-CXXMethodDecl 0x558d48cd7698 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x558d48cd7578 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x558d48cd75f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x558d48cdc590 <col:70, line:534:5>
|   |-DeclStmt 0x558d48cdc090 <line:528:2, col:20>
|   | |-VarDecl 0x558d48cdbf48 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x558d48cdbfb0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x558d48cdbfe8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x558d48cdc050 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x558d48cdc160 <line:529:2, col:23>
|   | `-VarDecl 0x558d48cdc0c0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x558d48cdc148 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x558d48cdc128 <col:18> 'const char *' lvalue ParmVar 0x558d48cd7578 'begin' 'const char *'
|   |-DoStmt 0x558d48cdc528 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x558d48cdc458 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x558d48cdc440 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x558d48cdc420 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x558d48cdc178 <col:6> 'const char *' lvalue Var 0x558d48cdc0c0 'x' 'const char *'
|   | |     `-CallExpr 0x558d48cdc370 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x558d48cdc358 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x558d48cdc310 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x558d48cdabc0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x558d48cdc3d8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x558d48cdc3c0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x558d48cdc230 <col:20, col:27> 'String' (CXXTemporary 0x558d48cdc230)
|   | |       |     `-CXXTemporaryObjectExpr 0x558d48cdc1f8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x558d48cdc3f0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558d48cdc250 <col:30> 'const char *' lvalue Var 0x558d48cdc0c0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x558d48cdc408 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558d48cdc270 <col:33> 'const char *' lvalue ParmVar 0x558d48cd75f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x558d48cdc2b0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558d48cdc290 <col:39> 'String' lvalue Var 0x558d48cdbf48 'name' 'String'
|   | |       |-UnaryOperator 0x558d48cdc2e8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558d48cdc2c8 <col:46> 'String' lvalue Var 0x558d48cdbfe8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x558d48cdc300 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x558d48cdc510 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x558d48cdc4f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x558d48cdc4d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x558d48cdc4a8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|   |         `-ImplicitCastExpr 0x558d48cdc490 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x558d48cdc470 <col:11> 'String' lvalue Var 0x558d48cdbf48 'name' 'String'
|   `-ReturnStmt 0x558d48cdc580 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x558d48cdc568 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x558d48cdc548 <col:9> 'const char *' lvalue Var 0x558d48cdc0c0 'x' 'const char *'
|-CXXMethodDecl 0x558d48cd77e8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x558d48cd7758 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x558d48cdcb98 <col:55, line:550:5>
|   `-IfStmt 0x558d48cdcb70 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x558d48cdc7d0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x558d48cdc7b8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558d48cdc7a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558d48cdc780 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558d48cdc750 <col:6> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|     | |       `-DeclRefExpr 0x558d48cdc5f0 <col:6> 'const String' lvalue ParmVar 0x558d48cd7758 'x' 'const String &'
|     | `-BinaryOperator 0x558d48cdc730 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x558d48cdc700 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x558d48cdc6b0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x558d48cdc698 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x558d48cdc650 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x558d48aa0d00 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x558d48cdc610 <col:11> 'const String' lvalue ParmVar 0x558d48cd7758 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x558d48cdc630 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x558d48cdc718 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x558d48cdc6e8 <col:19> 'char' 123
|     |-ReturnStmt 0x558d48cdc840 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x558d48cdc810 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x558d48cdc7f0 <col:13> 'const String' lvalue ParmVar 0x558d48cd7758 'x' 'const String &'
|     `-IfStmt 0x558d48cdcb48 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x558d48cdc8d8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558d48cdc8c0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558d48cdc8a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558d48cdc870 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |       `-DeclRefExpr 0x558d48cdc850 <col:11> 'const String' lvalue ParmVar 0x558d48cd7758 'x' 'const String &'
|       |-ReturnStmt 0x558d48cdca60 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x558d48cdca48 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x558d48cdca18 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x558d48cdca00 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x558d48cdc9e0 <col:13, col:29> 'String' (CXXTemporary 0x558d48cdc9e0)
|       |         `-CallExpr 0x558d48cdc990 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x558d48cdc978 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x558d48cdc8f0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x558d48cd6f90 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x558d48cdc9c0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x558d48cdc910 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x558d48cdc930 <col:28> 'const String' lvalue ParmVar 0x558d48cd7758 'x' 'const String &'
|       `-ReturnStmt 0x558d48cdcb38 <line:549:6, col:20>
|         `-ExprWithCleanups 0x558d48cdcb20 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x558d48cdcaf0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x558d48cdcad8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x558d48cdcab8 <col:13, col:20> 'String' (CXXTemporary 0x558d48cdcab8)
|                 `-CXXTemporaryObjectExpr 0x558d48cdca80 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x558d48cd79e8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x558d48cd78a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x558d48cd7918 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558d48cdae68 <col:71> 'bool' false
|-CXXRecordDecl 0x558d48cd7a98 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x558d48cd7d98 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x558d48cd7d30 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x558d48cd7cd0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x558d48cd7c90 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x558d48a83d60 'String'
|       | `-CXXRecord 0x558d48a83cd0 'String'
|       |-BuiltinType 0x558d48757370 'int'
|       `-DecayedType 0x558d48cd52f0 '__va_list_tag *' sugar
|         |-TypedefType 0x558d48cd52c0 'va_list' sugar
|         | |-Typedef 0x558d48974e10 'va_list'
|         | `-TypedefType 0x558d48974dc0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x558d488ac9e8 '__gnuc_va_list'
|         |   `-TypedefType 0x558d488ac950 '__builtin_va_list' sugar
|         |     |-Typedef 0x558d48798bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x558d48798b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x558d487580c0 '__va_list_tag'
|         |         `-CXXRecord 0x558d48758028 '__va_list_tag'
|         `-PointerType 0x558d4897a6b0 '__va_list_tag *'
|           `-RecordType 0x558d487580c0 '__va_list_tag'
|             `-CXXRecord 0x558d48758028 '__va_list_tag'
|-EnumDecl 0x558d48cd7df0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x558d48cd7ef0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda190 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd7ed0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x558d48cd7eb0 <col:16> 'int' 1
| |-EnumConstantDecl 0x558d48cd9cc0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda1a8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd7f60 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x558d48cd7f40 <col:21> 'int' 2
| |-EnumConstantDecl 0x558d48cd9d50 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda1c0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd9d30 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x558d48cd9d10 <col:22> 'int' 4
| |-EnumConstantDecl 0x558d48cd9de0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda1d8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd9dc0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x558d48cd9da0 <col:17> 'int' 8
| |-EnumConstantDecl 0x558d48cd9e70 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda1f0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd9e50 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x558d48cd9e30 <col:22> 'int' 16
| |-EnumConstantDecl 0x558d48cd9f00 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda208 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd9ee0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558d48cd9ec0 <col:19> 'int' 32
| |-EnumConstantDecl 0x558d48cd9f90 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda220 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cd9f70 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x558d48cd9f50 <col:17> 'int' 64
| |-EnumConstantDecl 0x558d48cda020 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda238 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cda000 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x558d48cd9fe0 <col:14> 'int' 128
| |-EnumConstantDecl 0x558d48cda0b0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558d48cda250 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48cda090 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x558d48cda070 <col:16> 'int' 256
| `-EnumConstantDecl 0x558d48cda140 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x558d48cda268 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48cda120 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x558d48cda100 <col:12> 'int' 1024
|-CXXMethodDecl 0x558d48cda478 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x558d48cda290 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x558d48cda330 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x558d48cda600 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x558d48cda538 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x558d48cda6a8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x558d48cda6e8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x558d48cda748 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x558d48cda7c0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x558d48cdabc0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x558d48cda838 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x558d48cda8b8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x558d48cda938 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x558d48cda9b0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x558d48cdaa28 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x558d48cdaaa0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x558d48cdace8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x558d48cdace8
| `-ParmVarDecl 0x558d48cdadf8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x558d48cdcef8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x558d48cdcef8
  `-ParmVarDecl 0x558d48cdd008 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48d38518 prev 0x558d48c7dfa8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48d38610 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x558d48d386a0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x558d48d387a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x558d48d386d8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558d48d39b80 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48d39b60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558d48d396f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558d48d39c10 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558d48d39bd0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x558d48d386d8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558d48d39760 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558d48d39c90 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48d39c50 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558d48d397c0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558d48d39cd0 <col:54> 'bool' false
| `-CompoundStmt 0x558d48d39dd8 <col:61, line:38:5>
|   `-BinaryOperator 0x558d48d39db8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x558d48d39d50 <col:9> 'const Element *' lvalue ->_context 0x558d48d39698
|     | `-CXXThisExpr 0x558d48d39d40 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x558d48d39da0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x558d48d39d80 <col:20> 'int' 0
|-CXXConstructorDecl 0x558d48d389b8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48d38868 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x558d48d388e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558d48d39bb8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48d39b98 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x558d48d39698 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x558d48d39e30 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x558d48d39df0 <col:20> 'const Element *' lvalue ParmVar 0x558d48d38868 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x558d48d396f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558d48d39eb0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558d48d39e70 <col:36> 'ErrorHandler *' lvalue ParmVar 0x558d48d388e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558d48d39760 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558d48d39f30 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558d48d39ef0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x558d48d397c0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558d48d39f70 <col:73> 'bool' false
| `-CompoundStmt 0x558d48d39fe8 <col:80, line:46:5>
|-CXXMethodDecl 0x558d48d38ae8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x558d48d3a060 <col:36, line:51:5>
|   `-ReturnStmt 0x558d48d3a050 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x558d48d3a038 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x558d48d3a008 <col:16> 'const Element *const' lvalue ->_context 0x558d48d39698
|         `-CXXThisExpr 0x558d48d39ff8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558d48d38bd8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x558d48d3a0e0 <col:32, line:57:5>
|   `-ReturnStmt 0x558d48d3a0d0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x558d48d3a0b8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x558d48d3a088 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x558d48d396f8
|         `-CXXThisExpr 0x558d48d3a078 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558d48d38c98 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x558d48d38e20 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x558d48d38d50 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558d48d38f70 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x558d48d38ee0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558d48d390c0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x558d48d39030 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558d48d392c8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x558d48d39178 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x558d48d391f0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x558d48d395a8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x558d48d39388 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x558d48d39408 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x558d48d39480 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x558d48d39660 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x558d48d39698 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x558d48d396f8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x558d48d39760 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x558d48d397c0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x558d48d39810 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x558d48d39810
| `-ParmVarDecl 0x558d48d39928 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x558d48d399c8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x558d48d399c8
| `-ParmVarDecl 0x558d48d39ad8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x558d48da07b8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558d48d5b8b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x558d48d5ba88 prev 0x558d48d5b8b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558d48d5bb18 <col:46, col:52> col:46 public
|-TypedefDecl 0x558d48d5bb40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d5d710 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x558d48d5d6c0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x558d48d5bff0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x558d48d5bef0 'type'
|     `-TemplateSpecializationType 0x558d48d5be80 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x558d48d5bd60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x558d48d5bd40 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x558d48d5bd20 <col:24> 'unsigned long' 4
|       `-RecordType 0x558d48d5be60 'char_array<4>'
|         `-ClassTemplateSpecialization 0x558d48d5bd80 'char_array'
|-TypedefDecl 0x558d48d5d7c8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x558d48d5d790 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x558d48d5d770 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x558d48d5d710 'type'
|     `-ElaboratedType 0x558d48d5d6c0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x558d48d5bff0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x558d48d5bef0 'type'
|         `-TemplateSpecializationType 0x558d48d5be80 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x558d48d5bd60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x558d48d5bd40 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x558d48d5bd20 <col:24> 'unsigned long' 4
|           `-RecordType 0x558d48d5be60 'char_array<4>'
|             `-ClassTemplateSpecialization 0x558d48d5bd80 'char_array'
|-CXXMethodDecl 0x558d48d5d948 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x558d48d5d858 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x558d48d5da38 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558d48d5db18 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x558d48d5dde8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558d48d5dcf0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x558d48d5e028 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558d48d5dea0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558d48d5df18 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d67618 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558d48d5e0e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558d48d67580 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d67778 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558d48d67848 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558d48d67a98 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558d48d67908 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558d48d67980 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d67cf8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x558d48d67b68 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558d48d67be0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d67eb8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558d48d67dc8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d68078 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558d48d67f80 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d68130 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558d48d681e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558d48d68418 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558d48d68290 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558d48d68308 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558d48d686b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558d48d685c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x558d48d68780 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x558d48d687d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558d48d68820 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558d48d5a2b8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558d48d5a4c8 prev 0x558d48d5a2b8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558d48d5b820 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x558d48d5b7d0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x558d48d5b7b0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x558d48d5b660 'type'
|     `-SubstTemplateTypeParmType 0x558d48d5b480 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x558d48a1cba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a1cb48 'T'
|       `-RecordType 0x558d48d5afd0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x558d48d5aee8 'sized_array_memory'
|-FieldDecl 0x558d48d68870 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x558d48d688c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558d48d688f8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|   |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558d48a54838 'T'
|   `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d68988 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x558d48d68950 'int &'
|   `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|     |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558d48a54838 'T'
|     `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d68a48 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x558d48d68a10 'const int &'
|   `-QualType 0x558d48d5a561 'const int' const
|     `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d68ad8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x558d48d68aa0 'int *'
|   `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|     |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558d48a54838 'T'
|     `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d68b68 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x558d48d68b30 'const int *'
|   `-QualType 0x558d48d5a561 'const int' const
|     `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d69750 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x558d48d69700 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x558d48d696e0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x558d48d69670 'type'
|     `-SubstTemplateTypeParmType 0x558d48d69430 'int' sugar
|       |-TemplateTypeParmType 0x558d48a279a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a27950 'T'
|       `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d697b8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x558d48d68a10 'const int &'
|   `-QualType 0x558d48d5a561 'const int' const
|     `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d69810 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d69878 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x558d48d68aa0 'int *'
|   `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|     |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558d48a54838 'T'
|     `-BuiltinType 0x558d48757370 'int'
|-TypedefDecl 0x558d48d698e0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x558d48d68b30 'const int *'
|   `-QualType 0x558d48d5a561 'const int' const
|     `-SubstTemplateTypeParmType 0x558d48d5a560 'int' sugar
|       |-TemplateTypeParmType 0x558d48a54890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558d48a54838 'T'
|       `-BuiltinType 0x558d48757370 'int'
|-EnumDecl 0x558d48d69938 <line:134:5> col:5
| `-EnumConstantDecl 0x558d48d69a30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558d48d69a10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558d48a55f18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558d48a55ef0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558d48a55ed0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558d48d69ab8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558d48d69d08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d69b70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558d48d69c10 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x558d48d69fc8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x558d48d69eb0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x558d48d6a288 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x558d48d6a170 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x558d48d6a5d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x558d48d6a4b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x558d48d6a8e0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x558d48d6a7c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x558d48d6abd0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d6aa18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558d48d6aa90 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558d48d6acf8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558d48d6add8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d6ae30 <col:30> Inherited
|-CXXMethodDecl 0x558d48d6ae78 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558d48d6af28 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d6af80 <col:30> Inherited
|-CXXMethodDecl 0x558d48d6b048 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558d48d6b0f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d6b150 <col:30> Inherited
|-CXXMethodDecl 0x558d48d6b198 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558d48d6b248 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d6b2a0 <col:30> Inherited
|-CXXMethodDecl 0x558d48d6b2e8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558d48d6b398 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d6b3f0 <col:30> Inherited
|-CXXMethodDecl 0x558d48d6b438 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558d48d6b4e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558d48d6b540 <col:30> Inherited
|-CXXMethodDecl 0x558d48d6b568 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558d48d6b618 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558d48d6b6c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558d48d6b888 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d6b778 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558d48d6b7f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558d48d6b9d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558d48d6b948 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d6bb88 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x558d48d6ba90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558d48d6bc40 <col:20>
| `-OptimizeNoneAttr 0x558d48d6bc98 <col:30>
|-CXXMethodDecl 0x558d48d6bdb8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x558d48d6bcc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558d48d6be70 <col:20>
| `-OptimizeNoneAttr 0x558d48d6bec8 <col:30>
|-CXXMethodDecl 0x558d48d6bf80 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558d48d6bef0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d6c0c8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558d48d6c038 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d6c1f8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x558d48d6c328 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x558d48d6c3f8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x558d48d6c4c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x558d48d6c608 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558d48d6c578 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d6c750 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558d48d6c6c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558d48d6c898 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x558d48d6c808 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558d48d6c950 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558d48d6ca50 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558d48d6c9c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558d48d6cb08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558d48d6cbc8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x558d48d6ccc8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x558d48d6ce48 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558d48d6cd88 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x558d48d6d608 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558d48d6cf00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x558d48d6d568 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x558d48d6d468 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x558d48d6d6e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558d48d6d838 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558d48d6d7a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558d48d6d8f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558d48d6db38 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558d48d6d9b0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558d48d6da28 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558d48d6dcf8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x558d48d6dc08 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558d48d6df48 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x558d48d6ddc0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558d48d6de38 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558d48d6e008 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558d48d6e268 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x558d48d6e170 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x558d48d6e338 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48d58428 prev 0x558d48d3f068 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558d48d58520 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x558d48d58610 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x558d48d7ff80 <col:16, line:828:9>
|-CXXDestructorDecl 0x558d48d58700 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x558d48d7ff90 <col:25, line:830:9>
|-CXXMethodDecl 0x558d48d58800 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x558d48d588b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x558d48d58958 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558d48d58958
| `-ParmVarDecl 0x558d48d58a68 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x558d48d59228 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558d48d59228
  `-ParmVarDecl 0x558d48d59338 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48d3ee78 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x558d48d3efd8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x558d48d3f068 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x558d48d3f120 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x558d48d3f228 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x558d48d3f158 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558d48d71208 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558d48d711e8 <col:31> 'int' 0
|-CXXConstructorDecl 0x558d48d3f548 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x558d48d3f3c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x558d48d3f438 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558d48d71240 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558d48d71220 <col:59> 'int' 0
|-CXXConstructorDecl 0x558d48d3f720 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48d3f610 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x558d48d3f688 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558d48d71278 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558d48d71258 <col:55> 'int' 0
|-CXXConstructorDecl 0x558d48d3fad8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558d48d3f8c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x558d48d3f938 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x558d48d3f9b0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558d48d712b0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558d48d71290 <col:31> 'int' 0
|-CXXConstructorDecl 0x558d48d3fc98 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x558d48d3fbd8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x558d48d3fd90 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x558d48d3ff78 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x558d48d3fe80 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x558d48d40068 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x558d48d71660 <col:24, line:291:5>
|   `-ReturnStmt 0x558d48d71650 <line:290:9, col:79>
|     `-BinaryOperator 0x558d48d71630 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x558d48d71508 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x558d48d71460 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x558d48d71440 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x558d48d71338 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x558d48d71320 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x558d48d71308 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x558d48d712d8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x558d48d5a250
|       | |   |       `-CXXThisExpr 0x558d48d712c8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x558d48d71428 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x558d48d71410 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x558d48d713d8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x558d48d713a8 <col:28, col:35> '<bound member function type>' ->size 0x558d48d27198
|       | |           `-ImplicitCastExpr 0x558d48d713f8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x558d48d71390 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x558d48d71360 <col:28> 'Vector<String> *const' lvalue ->_conf 0x558d48d5a250
|       | |                 `-CXXThisExpr 0x558d48d71350 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x558d48d714f0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x558d48d714d8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x558d48d714c0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x558d48d71490 <col:47> 'Args::Slot *const' lvalue ->_slots 0x558d48d6e480
|       |         `-CXXThisExpr 0x558d48d71480 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x558d48d71610 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x558d48d715f8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558d48d715e0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558d48d715a0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558d48d71588 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558d48d71538 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558d48d6e530
|         |     |   `-CXXThisExpr 0x558d48d71528 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558d48d71568 <col:73> 'int' 0
|         `-IntegerLiteral 0x558d48d715c0 <col:79> 'int' 0
|-CXXMethodDecl 0x558d48d40128 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x558d48d71838 <col:32, line:296:5>
|   `-ReturnStmt 0x558d48d71828 <line:295:9, col:49>
|     `-BinaryOperator 0x558d48d71808 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x558d48d716e8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x558d48d716d0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x558d48d716b8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x558d48d71688 <col:17> 'Args::Slot *const' lvalue ->_slots 0x558d48d6e480
|       |       `-CXXThisExpr 0x558d48d71678 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x558d48d717e8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x558d48d717d0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558d48d717b8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558d48d71778 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558d48d71760 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558d48d71710 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558d48d6e530
|         |     |   `-CXXThisExpr 0x558d48d71700 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558d48d71740 <col:43> 'int' 0
|         `-IntegerLiteral 0x558d48d71798 <col:49> 'int' 0
|-CXXMethodDecl 0x558d48d40218 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x558d48d71a48 <col:19, line:306:5>
|   |-IfStmt 0x558d48d71968 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x558d48d718a8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x558d48d71890 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x558d48d71860 <col:13> 'Vector<String> *' lvalue ->_conf 0x558d48d5a250
|   | |     `-CXXThisExpr 0x558d48d71850 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x558d48d71948 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x558d48d71918 <col:13, col:20> '<bound member function type>' ->clear 0x558d48d29b98
|   |     `-ImplicitCastExpr 0x558d48d71900 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x558d48d718d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x558d48d5a250
|   |         `-CXXThisExpr 0x558d48d718c0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x558d48d719f0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x558d48d719c0 <col:9, col:16> '<bound member function type>' .clear 0x558d48d6e008
|   |   `-MemberExpr 0x558d48d71990 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x558d48d6e420
|   |     `-CXXThisExpr 0x558d48d71980 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x558d48d71a38 <line:305:9, col:17>
|     `-UnaryOperator 0x558d48d71a20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48d71a10 <col:17> 'Args *' this
|-CXXMethodDecl 0x558d48d40498 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x558d48d403a0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x558d48d40618 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x558d48d40550 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x558d48d40998 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x558d48d406c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x558d48d408f8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x558d48d40768 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x558d48d407e0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x558d48d71d68 <col:67, line:327:5>
|     |-WhileStmt 0x558d48d71d18 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x558d48d71b30 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x558d48d71ab0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558d48c76478 0x558d48abfa58 0x558d48abf730 0x558d48ab0f10 0x558d48ab0bc0 0x558d48ab04b0 0x558d48a82e20 0x558d48a0f2e0
|     | | |-DeclRefExpr 0x558d48d71a70 <col:16> 'Iter' lvalue ParmVar 0x558d48d40768 'begin' 'Iter'
|     | | `-DeclRefExpr 0x558d48d71a90 <col:25> 'Iter' lvalue ParmVar 0x558d48d407e0 'end' 'Iter'
|     | `-CompoundStmt 0x558d48d71cf8 <col:30, line:325:9>
|     |   |-CallExpr 0x558d48d71c98 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x558d48d71b78 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x558d48d71c68 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x558d48d71bf8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|     |   |   `-DeclRefExpr 0x558d48d71bd8 <col:24> 'Iter' lvalue ParmVar 0x558d48d40768 'begin' 'Iter'
|     |   `-UnaryOperator 0x558d48d71ce0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x558d48d71cc0 <col:15> 'Iter' lvalue ParmVar 0x558d48d40768 'begin' 'Iter'
|     `-ReturnStmt 0x558d48d71d58 <line:326:9, col:17>
|       `-UnaryOperator 0x558d48d71d40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d71d30 <col:17> 'Args *' this
|-CXXMethodDecl 0x558d48d40aa0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x558d48d40a10 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x558d48d40be8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x558d48d40b58 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x558d48d40cb0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x558d48d71e48 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x558d48d71de8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x558d48d71d98 <col:9> '<bound member function type>' ->reset_from 0x558d48d6e8a8
|   | | `-CXXThisExpr 0x558d48d71d88 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x558d48d71dc8 <col:20> 'int' 0
|   `-ReturnStmt 0x558d48d71e38 <line:352:9, col:17>
|     `-UnaryOperator 0x558d48d71e20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48d71e10 <col:17> 'Args *' this
|-VarDecl 0x558d48d40d68 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x558d48d40dd0 <col:38> 'int' 1
|-VarDecl 0x558d48d40e60 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x558d48d40ec8 <col:39> 'int' 2
|-VarDecl 0x558d48d40f58 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x558d48d40fc0 <col:39> 'int' 4
|-VarDecl 0x558d48d41050 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x558d48d410b8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x558d48d41438 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x558d48d41130 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d41398 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558d48d411e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d41288 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x558d48d71fa0 <col:43, line:371:5>
|     `-ReturnStmt 0x558d48d71f90 <line:370:9, col:34>
|       `-CallExpr 0x558d48d71f58 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d71e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d71ef8 <col:21> 'const char *' lvalue ParmVar 0x558d48d411e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d71f18 <col:30> 'int' 0
|         `-DeclRefExpr 0x558d48d71f38 <col:33> 'T' lvalue ParmVar 0x558d48d41288 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d41768 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x558d48d414a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d416c8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558d48d41550 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d415f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558d48d720f0 <col:45, line:375:5>
|     `-ReturnStmt 0x558d48d720e0 <line:374:9, col:42>
|       `-CallExpr 0x558d48d720a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d71fc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72048 <col:21> 'const char *' lvalue ParmVar 0x558d48d41550 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d72068 <col:30> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int'
|         `-DeclRefExpr 0x558d48d72088 <col:41> 'T' lvalue ParmVar 0x558d48d415f8 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d41a98 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x558d48d417d0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d419f8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558d48d41880 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d41928 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558d48d72240 <col:45, line:379:5>
|     `-ReturnStmt 0x558d48d72230 <line:378:9, col:43>
|       `-CallExpr 0x558d48d721f8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d72118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72198 <col:21> 'const char *' lvalue ParmVar 0x558d48d41880 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d721b8 <col:30> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int'
|         `-DeclRefExpr 0x558d48d721d8 <col:42> 'T' lvalue ParmVar 0x558d48d41928 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d41dc8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x558d48d41b00 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558d48d41d28 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558d48d41bb0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558d48d41c58 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x558d48d72440 <col:46, line:383:5>
| |   `-ReturnStmt 0x558d48d72430 <line:382:9, col:55>
| |     `-CallExpr 0x558d48d723f8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558d48d72268 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558d48d722e8 <col:21> 'const char *' lvalue ParmVar 0x558d48d41bb0 'keyword' 'const char *'
| |       |-BinaryOperator 0x558d48d723b8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x558d48d72368 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x558d48d72348 <col:30> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x558d48d723a0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x558d48d72380 <col:42> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x558d48d723d8 <col:54> 'T' lvalue ParmVar 0x558d48d41c58 'x' 'T &'
| `-CXXMethodDecl 0x558d48da0c48 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x558d48da0a68 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x558d48da0b38 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x558d48d421c8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x558d48d41e30 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d42128 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x558d48d41ee0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d41f60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d42008 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x558d48d72580 <col:54, line:388:5>
|     |-CallExpr 0x558d48d72508 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d72458 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558d48d72498 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558d48d724a8 <col:30> 'const char *' lvalue ParmVar 0x558d48d41ee0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558d48d724c8 <col:39> 'int' lvalue ParmVar 0x558d48d41f60 'flags' 'int'
|     | `-DeclRefExpr 0x558d48d724e8 <col:46> 'T' lvalue ParmVar 0x558d48d42008 'x' 'T &'
|     `-ReturnStmt 0x558d48d72570 <line:387:9, col:17>
|       `-UnaryOperator 0x558d48d72558 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d72548 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d42678 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x558d48d42238 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558d48d422b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558d48d425d8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558d48d42378 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d42418 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d424b8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x558d48d726f0 <col:74, line:403:5>
|     `-ReturnStmt 0x558d48d726e0 <line:402:9, col:56>
|       `-CallExpr 0x558d48d726a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d725b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72620 <col:28> 'const char *' lvalue ParmVar 0x558d48d42378 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d72640 <col:37> 'int' 0
|         |-DeclRefExpr 0x558d48d72660 <col:40> 'T' lvalue ParmVar 0x558d48d42418 'x' 'T &'
|         `-DeclRefExpr 0x558d48d72680 <col:43> 'const V' lvalue ParmVar 0x558d48d424b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558d48d42ae8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558d48d426e8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558d48d42768 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558d48d42a48 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558d48d42828 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d428c8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d42968 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x558d48d72858 <col:76, line:407:5>
|     `-ReturnStmt 0x558d48d72848 <line:406:9, col:65>
|       `-CallExpr 0x558d48d72808 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d72718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72788 <col:28> 'const char *' lvalue ParmVar 0x558d48d42828 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d727a8 <col:37> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int'
|         |-DeclRefExpr 0x558d48d727c8 <col:49> 'T' lvalue ParmVar 0x558d48d428c8 'x' 'T &'
|         `-DeclRefExpr 0x558d48d727e8 <col:52> 'const V' lvalue ParmVar 0x558d48d42968 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558d48d43038 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x558d48d42b58 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558d48d42bd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558d48d42f98 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558d48d42c98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d42d18 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d42db8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d42e58 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x558d48d729c0 <col:85, line:412:5>
|     |-CallExpr 0x558d48d72940 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d72870 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558d48d728b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558d48d728c0 <col:37> 'const char *' lvalue ParmVar 0x558d48d42c98 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558d48d728e0 <col:46> 'int' lvalue ParmVar 0x558d48d42d18 'flags' 'int'
|     | |-DeclRefExpr 0x558d48d72900 <col:53> 'T' lvalue ParmVar 0x558d48d42db8 'x' 'T &'
|     | `-DeclRefExpr 0x558d48d72920 <col:56> 'const V' lvalue ParmVar 0x558d48d42e58 'default_value' 'const V &'
|     `-ReturnStmt 0x558d48d729b0 <line:411:9, col:17>
|       `-UnaryOperator 0x558d48d72998 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d72988 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d434c8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x558d48d430b0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d43128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d43428 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d431e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d43260 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d43308 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x558d48d72b40 <col:53, line:425:5>
|     `-ReturnStmt 0x558d48d72b30 <line:424:9, col:42>
|       `-CallExpr 0x558d48d72af0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d729f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72a70 <col:21> 'const char *' lvalue ParmVar 0x558d48d431e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d72a90 <col:30> 'int' 0
|         |-DeclRefExpr 0x558d48d72ab0 <col:33> 'P' lvalue ParmVar 0x558d48d43260 'parser' 'P'
|         `-DeclRefExpr 0x558d48d72ad0 <col:41> 'T' lvalue ParmVar 0x558d48d43308 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d43918 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x558d48d43538 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d435b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d43878 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d43678 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d436f0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d43798 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558d48d72cb8 <col:55, line:429:5>
|     `-ReturnStmt 0x558d48d72ca8 <line:428:9, col:50>
|       `-CallExpr 0x558d48d72c68 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d72b68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72be8 <col:21> 'const char *' lvalue ParmVar 0x558d48d43678 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d72c08 <col:30> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int'
|         |-DeclRefExpr 0x558d48d72c28 <col:41> 'P' lvalue ParmVar 0x558d48d436f0 'parser' 'P'
|         `-DeclRefExpr 0x558d48d72c48 <col:49> 'T' lvalue ParmVar 0x558d48d43798 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d43d68 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x558d48d43988 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d43a08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d43cc8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d43ac8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d43b40 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d43be8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558d48d72e30 <col:55, line:433:5>
|     `-ReturnStmt 0x558d48d72e20 <line:432:9, col:51>
|       `-CallExpr 0x558d48d72de0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d72ce0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72d60 <col:21> 'const char *' lvalue ParmVar 0x558d48d43ac8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d72d80 <col:30> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int'
|         |-DeclRefExpr 0x558d48d72da0 <col:42> 'P' lvalue ParmVar 0x558d48d43b40 'parser' 'P'
|         `-DeclRefExpr 0x558d48d72dc0 <col:50> 'T' lvalue ParmVar 0x558d48d43be8 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d441b8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x558d48d43dd8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d43e58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d44118 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d43f18 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d43f90 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d44038 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x558d48d73058 <col:56, line:437:5>
|     `-ReturnStmt 0x558d48d73048 <line:436:9, col:63>
|       `-CallExpr 0x558d48d73008 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d72e58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d72ed8 <col:21> 'const char *' lvalue ParmVar 0x558d48d43f18 'keyword' 'const char *'
|         |-BinaryOperator 0x558d48d72fa8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558d48d72f58 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558d48d72f38 <col:30> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558d48d72f90 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558d48d72f70 <col:42> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558d48d72fc8 <col:54> 'P' lvalue ParmVar 0x558d48d43f90 'parser' 'P'
|         `-DeclRefExpr 0x558d48d72fe8 <col:62> 'T' lvalue ParmVar 0x558d48d44038 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d446e8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x558d48d44228 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d442a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d44648 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558d48d44368 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d443e8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d44460 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d44508 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x558d48d731c0 <col:64, line:442:5>
|     |-CallExpr 0x558d48d73140 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d73070 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558d48d730b0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558d48d730c0 <col:30> 'const char *' lvalue ParmVar 0x558d48d44368 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558d48d730e0 <col:39> 'int' lvalue ParmVar 0x558d48d443e8 'flags' 'int'
|     | |-DeclRefExpr 0x558d48d73100 <col:46> 'P' lvalue ParmVar 0x558d48d44460 'parser' 'P'
|     | `-DeclRefExpr 0x558d48d73120 <col:54> 'T' lvalue ParmVar 0x558d48d44508 'x' 'T &'
|     `-ReturnStmt 0x558d48d731b0 <line:441:9, col:17>
|       `-UnaryOperator 0x558d48d73198 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d73188 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d44ce8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x558d48d44760 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d447d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558d48d44858 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558d48d44c48 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558d48d44920 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d44998 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d44a38 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d44b08 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x558d48d73358 <col:84, line:458:5>
|     `-ReturnStmt 0x558d48d73348 <line:457:9, col:64>
|       `-CallExpr 0x558d48d73300 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d731f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d73260 <col:28> 'const char *' lvalue ParmVar 0x558d48d44920 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d73280 <col:37> 'int' 0
|         |-DeclRefExpr 0x558d48d732a0 <col:40> 'P' lvalue ParmVar 0x558d48d44998 'parser' 'P'
|         |-DeclRefExpr 0x558d48d732c0 <col:48> 'T' lvalue ParmVar 0x558d48d44a38 'x' 'T &'
|         `-DeclRefExpr 0x558d48d732e0 <col:51> 'const V' lvalue ParmVar 0x558d48d44b08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558d48d45268 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558d48d44d60 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d44dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558d48d44e58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558d48d451c8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558d48d44f20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d44f98 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d45038 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d450d8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x558d48d734e8 <col:86, line:462:5>
|     `-ReturnStmt 0x558d48d734d8 <line:461:9, col:73>
|       `-CallExpr 0x558d48d73490 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d73380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d733f0 <col:28> 'const char *' lvalue ParmVar 0x558d48d44f20 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d73410 <col:37> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int'
|         |-DeclRefExpr 0x558d48d73430 <col:49> 'P' lvalue ParmVar 0x558d48d44f98 'parser' 'P'
|         |-DeclRefExpr 0x558d48d73450 <col:57> 'T' lvalue ParmVar 0x558d48d45038 'x' 'T &'
|         `-DeclRefExpr 0x558d48d73470 <col:60> 'const V' lvalue ParmVar 0x558d48d450d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558d48d458c8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x558d48d452e0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d45358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558d48d453d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558d48d45828 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558d48d454a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d45520 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d45598 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d45638 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d456d8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x558d48d73678 <col:95, line:467:5>
|     |-CallExpr 0x558d48d735f0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d73500 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558d48d73540 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558d48d73550 <col:37> 'const char *' lvalue ParmVar 0x558d48d454a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558d48d73570 <col:46> 'int' lvalue ParmVar 0x558d48d45520 'flags' 'int'
|     | |-DeclRefExpr 0x558d48d73590 <col:53> 'P' lvalue ParmVar 0x558d48d45598 'parser' 'P'
|     | |-DeclRefExpr 0x558d48d735b0 <col:61> 'T' lvalue ParmVar 0x558d48d45638 'x' 'T &'
|     | `-DeclRefExpr 0x558d48d735d0 <col:64> 'const V' lvalue ParmVar 0x558d48d456d8 'default_value' 'const V &'
|     `-ReturnStmt 0x558d48d73668 <line:466:9, col:17>
|       `-UnaryOperator 0x558d48d73650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d73640 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d45ea8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x558d48d45948 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d459c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558d48d45a48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558d48d45e08 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558d48d45b10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d45b88 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d45c28 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558d48d45cc8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x558d48d73820 <col:63, line:481:5>
|     `-ReturnStmt 0x558d48d73810 <line:480:9, col:47>
|       `-CallExpr 0x558d48d737c8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d736a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d73728 <col:21> 'const char *' lvalue ParmVar 0x558d48d45b10 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d73748 <col:30> 'int' 0
|         |-DeclRefExpr 0x558d48d73768 <col:33> 'P' lvalue ParmVar 0x558d48d45b88 'parser' 'P'
|         |-DeclRefExpr 0x558d48d73788 <col:41> 'T1' lvalue ParmVar 0x558d48d45c28 'x1' 'T1 &'
|         `-DeclRefExpr 0x558d48d737a8 <col:45> 'T2' lvalue ParmVar 0x558d48d45cc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558d48d47498 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x558d48d45f20 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d45f98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558d48d46018 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558d48d473f8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558d48d47150 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d471c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d47268 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558d48d47308 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558d48d739c0 <col:65, line:485:5>
|     `-ReturnStmt 0x558d48d739b0 <line:484:9, col:55>
|       `-CallExpr 0x558d48d73968 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d73848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d738c8 <col:21> 'const char *' lvalue ParmVar 0x558d48d47150 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d738e8 <col:30> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int'
|         |-DeclRefExpr 0x558d48d73908 <col:41> 'P' lvalue ParmVar 0x558d48d471c8 'parser' 'P'
|         |-DeclRefExpr 0x558d48d73928 <col:49> 'T1' lvalue ParmVar 0x558d48d47268 'x1' 'T1 &'
|         `-DeclRefExpr 0x558d48d73948 <col:53> 'T2' lvalue ParmVar 0x558d48d47308 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558d48d47a18 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x558d48d47510 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d47588 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558d48d47608 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558d48d47978 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558d48d476d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d47748 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d477e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558d48d47888 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558d48d73b60 <col:65, line:489:5>
|     `-ReturnStmt 0x558d48d73b50 <line:488:9, col:56>
|       `-CallExpr 0x558d48d73b08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d739e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d73a68 <col:21> 'const char *' lvalue ParmVar 0x558d48d476d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d73a88 <col:30> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int'
|         |-DeclRefExpr 0x558d48d73aa8 <col:42> 'P' lvalue ParmVar 0x558d48d47748 'parser' 'P'
|         |-DeclRefExpr 0x558d48d73ac8 <col:50> 'T1' lvalue ParmVar 0x558d48d477e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558d48d73ae8 <col:54> 'T2' lvalue ParmVar 0x558d48d47888 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558d48d47f98 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x558d48d47a90 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d47b08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558d48d47b88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558d48d47ef8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558d48d47c50 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d47cc8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d47d68 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558d48d47e08 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x558d48d73db0 <col:66, line:493:5>
|     `-ReturnStmt 0x558d48d73da0 <line:492:9, col:68>
|       `-CallExpr 0x558d48d73d58 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d73b88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d73c08 <col:21> 'const char *' lvalue ParmVar 0x558d48d47c50 'keyword' 'const char *'
|         |-BinaryOperator 0x558d48d73cd8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558d48d73c88 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558d48d73c68 <col:30> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558d48d73cc0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558d48d73ca0 <col:42> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558d48d73cf8 <col:54> 'P' lvalue ParmVar 0x558d48d47cc8 'parser' 'P'
|         |-DeclRefExpr 0x558d48d73d18 <col:62> 'T1' lvalue ParmVar 0x558d48d47d68 'x1' 'T1 &'
|         `-DeclRefExpr 0x558d48d73d38 <col:66> 'T2' lvalue ParmVar 0x558d48d47e08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558d48d485f8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x558d48d48010 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d48088 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558d48d48108 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558d48d48558 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558d48d481d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d48250 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d482c8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d48368 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558d48d48408 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x558d48d73f40 <col:74, line:498:5>
|     |-CallExpr 0x558d48d73eb8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d73dc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558d48d73e08 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558d48d73e18 <col:30> 'const char *' lvalue ParmVar 0x558d48d481d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558d48d73e38 <col:39> 'int' lvalue ParmVar 0x558d48d48250 'flags' 'int'
|     | |-DeclRefExpr 0x558d48d73e58 <col:46> 'P' lvalue ParmVar 0x558d48d482c8 'parser' 'P'
|     | |-DeclRefExpr 0x558d48d73e78 <col:54> 'T1' lvalue ParmVar 0x558d48d48368 'x1' 'T1 &'
|     | `-DeclRefExpr 0x558d48d73e98 <col:58> 'T2' lvalue ParmVar 0x558d48d48408 'x2' 'T2 &'
|     `-ReturnStmt 0x558d48d73f30 <line:497:9, col:17>
|       `-UnaryOperator 0x558d48d73f18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d73f08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d48958 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x558d48d48678 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d488b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558d48d48730 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d487a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x558d48d74088 <col:52, line:509:5>
|     `-ReturnStmt 0x558d48d74078 <line:508:9, col:44>
|       `-CallExpr 0x558d48d74040 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d73f70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d73fe0 <col:26> 'const char *' lvalue ParmVar 0x558d48d48730 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d74000 <col:35> 'int' 0
|         `-DeclRefExpr 0x558d48d74020 <col:38> 'P' lvalue ParmVar 0x558d48d487a8 'parser' 'P'
|-FunctionTemplateDecl 0x558d48d48c58 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x558d48d489c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d48bb8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558d48d48a70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d48ae8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558d48d741c8 <col:54, line:513:5>
|     `-ReturnStmt 0x558d48d741b8 <line:512:9, col:52>
|       `-CallExpr 0x558d48d74180 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d740b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74120 <col:26> 'const char *' lvalue ParmVar 0x558d48d48a70 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74140 <col:35> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int'
|         `-DeclRefExpr 0x558d48d74160 <col:46> 'P' lvalue ParmVar 0x558d48d48ae8 'parser' 'P'
|-FunctionTemplateDecl 0x558d48d48f58 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x558d48d48cc0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d48eb8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558d48d48d70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d48de8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558d48d74308 <col:54, line:517:5>
|     `-ReturnStmt 0x558d48d742f8 <line:516:9, col:53>
|       `-CallExpr 0x558d48d742c0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d741f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74260 <col:26> 'const char *' lvalue ParmVar 0x558d48d48d70 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74280 <col:35> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int'
|         `-DeclRefExpr 0x558d48d742a0 <col:47> 'P' lvalue ParmVar 0x558d48d48de8 'parser' 'P'
|-FunctionTemplateDecl 0x558d48d49258 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x558d48d48fc0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d491b8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558d48d49070 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d490e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x558d48d744f8 <col:55, line:521:5>
|     `-ReturnStmt 0x558d48d744e8 <line:520:9, col:65>
|       `-CallExpr 0x558d48d744b0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d74330 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d743a0 <col:26> 'const char *' lvalue ParmVar 0x558d48d49070 'keyword' 'const char *'
|         |-BinaryOperator 0x558d48d74470 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x558d48d74420 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558d48d74400 <col:35> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558d48d74458 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558d48d74438 <col:47> 'const int' lvalue Var 0x558d48d40e60 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558d48d74490 <col:59> 'P' lvalue ParmVar 0x558d48d490e8 'parser' 'P'
|-FunctionTemplateDecl 0x558d48d49628 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x558d48d492c0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d49588 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558d48d49370 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d493f0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d49468 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x558d48d74638 <col:63, line:526:5>
|     |-CallExpr 0x558d48d745c0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d74510 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x558d48d74550 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x558d48d74560 <col:35> 'const char *' lvalue ParmVar 0x558d48d49370 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558d48d74580 <col:44> 'int' lvalue ParmVar 0x558d48d493f0 'flags' 'int'
|     | `-DeclRefExpr 0x558d48d745a0 <col:51> 'P' lvalue ParmVar 0x558d48d49468 'parser' 'P'
|     `-ReturnStmt 0x558d48d74628 <line:525:9, col:17>
|       `-UnaryOperator 0x558d48d74610 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d74600 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d49a78 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x558d48d49698 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d49718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d499d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d497d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d49850 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d498f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x558d48d74790 <col:58, line:541:5>
|     `-ReturnStmt 0x558d48d74780 <line:540:9, col:39>
|       `-CallExpr 0x558d48d74748 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d74668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d746e8 <col:21> 'const char *' lvalue ParmVar 0x558d48d497d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74708 <col:30> 'P' lvalue ParmVar 0x558d48d49850 'parser' 'P'
|         `-DeclRefExpr 0x558d48d74728 <col:38> 'T' lvalue ParmVar 0x558d48d498f8 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d49ec8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x558d48d49ae8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d49b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d49e28 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d49c28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d49ca0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d49d48 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558d48d748c8 <col:60, line:545:5>
|     `-ReturnStmt 0x558d48d748b8 <line:544:9, col:41>
|       `-CallExpr 0x558d48d74880 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d747b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74820 <col:23> 'const char *' lvalue ParmVar 0x558d48d49c28 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74840 <col:32> 'P' lvalue ParmVar 0x558d48d49ca0 'parser' 'P'
|         `-DeclRefExpr 0x558d48d74860 <col:40> 'T' lvalue ParmVar 0x558d48d49d48 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d4a318 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x558d48d49f38 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d49fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4a278 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d4a078 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4a0f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4a198 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558d48d74a00 <col:60, line:549:5>
|     `-ReturnStmt 0x558d48d749f0 <line:548:9, col:41>
|       `-CallExpr 0x558d48d749b8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d748f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74958 <col:23> 'const char *' lvalue ParmVar 0x558d48d4a078 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74978 <col:32> 'P' lvalue ParmVar 0x558d48d4a0f0 'parser' 'P'
|         `-DeclRefExpr 0x558d48d74998 <col:40> 'T' lvalue ParmVar 0x558d48d4a198 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d4a768 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x558d48d4a388 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4a408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4a6c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d4a4c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4a540 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4a5e8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x558d48d74b38 <col:61, line:553:5>
|     `-ReturnStmt 0x558d48d74b28 <line:552:9, col:42>
|       `-CallExpr 0x558d48d74af0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d74a28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74a90 <col:24> 'const char *' lvalue ParmVar 0x558d48d4a4c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74ab0 <col:33> 'P' lvalue ParmVar 0x558d48d4a540 'parser' 'P'
|         `-DeclRefExpr 0x558d48d74ad0 <col:41> 'T' lvalue ParmVar 0x558d48d4a5e8 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d4ac48 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x558d48d4a7d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4a858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4aba8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558d48d4a918 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4a998 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4aa10 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4aab8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x558d48d74cb0 <col:69, line:557:5>
|     `-ReturnStmt 0x558d48d74ca0 <line:556:9, col:46>
|       `-CallExpr 0x558d48d74c60 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d74b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74be0 <col:21> 'const char *' lvalue ParmVar 0x558d48d4a918 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d74c00 <col:30> 'int' lvalue ParmVar 0x558d48d4a998 'flags' 'int'
|         |-DeclRefExpr 0x558d48d74c20 <col:37> 'P' lvalue ParmVar 0x558d48d4aa10 'parser' 'P'
|         `-DeclRefExpr 0x558d48d74c40 <col:45> 'T' lvalue ParmVar 0x558d48d4aab8 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d4af58 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x558d48d4acc0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d4aeb8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558d48d4ad70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4ade8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x558d48d74df0 <col:56, line:571:5>
|     `-ReturnStmt 0x558d48d74de0 <line:570:9, col:48>
|       `-CallExpr 0x558d48d74da8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d74cd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d74d48 <col:30> 'const char *' lvalue ParmVar 0x558d48d4ad70 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d74d68 <col:39> 'int' 0
|         `-DeclRefExpr 0x558d48d74d88 <col:42> 'P' lvalue ParmVar 0x558d48d4ade8 'parser' 'P'
|-FunctionTemplateDecl 0x558d48d4b2e8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x558d48d4afc0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d4b248 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558d48d4b070 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4b0f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4b168 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558d48d74fc0 <col:67, line:576:5>
|     |-CallExpr 0x558d48d74f48 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d74e08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558d48d74e48 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558d48d74e58 <col:39> 'const char *' lvalue ParmVar 0x558d48d4b070 'keyword' 'const char *'
|     | |-BinaryOperator 0x558d48d74f08 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558d48d74eb8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558d48d74e78 <col:48> 'int' lvalue ParmVar 0x558d48d4b0f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558d48d74ef0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558d48d74ed0 <col:56> 'const int' lvalue Var 0x558d48d41050 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x558d48d74f28 <col:68> 'P' lvalue ParmVar 0x558d48d4b168 'parser' 'P'
|     `-ReturnStmt 0x558d48d74fb0 <line:575:9, col:17>
|       `-UnaryOperator 0x558d48d74f98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d74f88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d4b738 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x558d48d4b358 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4b3d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4b698 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558d48d4b498 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4b510 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4b5b8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x558d48d75130 <col:62, line:592:5>
|     `-ReturnStmt 0x558d48d75120 <line:591:9, col:51>
|       `-CallExpr 0x558d48d750e0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d74ff0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d75060 <col:30> 'const char *' lvalue ParmVar 0x558d48d4b498 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d75080 <col:39> 'int' 0
|         |-DeclRefExpr 0x558d48d750a0 <col:42> 'P' lvalue ParmVar 0x558d48d4b510 'parser' 'P'
|         `-DeclRefExpr 0x558d48d750c0 <col:50> 'T' lvalue ParmVar 0x558d48d4b5b8 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d4bc18 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x558d48d4b7a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4b828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4bb78 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558d48d4b8e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4b968 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4b9e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4ba88 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x558d48d75328 <col:73, line:597:5>
|     |-CallExpr 0x558d48d752a8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d75148 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558d48d75188 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558d48d75198 <col:39> 'const char *' lvalue ParmVar 0x558d48d4b8e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x558d48d75248 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558d48d751f8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558d48d751b8 <col:48> 'int' lvalue ParmVar 0x558d48d4b968 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558d48d75230 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558d48d75210 <col:56> 'const int' lvalue Var 0x558d48d41050 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558d48d75268 <col:68> 'P' lvalue ParmVar 0x558d48d4b9e0 'parser' 'P'
|     | `-DeclRefExpr 0x558d48d75288 <col:76> 'T' lvalue ParmVar 0x558d48d4ba88 'x' 'T &'
|     `-ReturnStmt 0x558d48d75318 <line:596:9, col:17>
|       `-UnaryOperator 0x558d48d75300 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d752f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d4c1c8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x558d48d4bc90 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4bd08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4c128 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x558d48d4bdc8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4be40 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4c000 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558d48d75498 <col:65, line:614:5>
|     `-ReturnStmt 0x558d48d75488 <line:613:9, col:46>
|       `-CallExpr 0x558d48d75448 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d75358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d753c8 <col:25> 'const char *' lvalue ParmVar 0x558d48d4bdc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d753e8 <col:34> 'int' 0
|         |-DeclRefExpr 0x558d48d75408 <col:37> 'P' lvalue ParmVar 0x558d48d4be40 'parser' 'P'
|         `-DeclRefExpr 0x558d48d75428 <col:45> 'Vector<T>' lvalue ParmVar 0x558d48d4c000 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558d48d4c5f8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x558d48d4c238 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d4c558 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x558d48d4c2f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4c440 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558d48d756b0 <col:55, line:618:5>
|     `-ReturnStmt 0x558d48d756a0 <line:617:9, col:55>
|       `-CallExpr 0x558d48d75660 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d754c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d75530 <col:25> 'const char *' lvalue ParmVar 0x558d48d4c2f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558d48d75550 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x558d48d75620 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558d48d75640 <col:54> 'Vector<T>' lvalue ParmVar 0x558d48d4c440 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558d48d4cbc8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x558d48d4c660 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4c6d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4cb28 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558d48d4c798 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4c818 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4c890 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d4c9e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558d48d758a8 <col:76, line:623:5>
|     |-CallExpr 0x558d48d75828 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558d48d756c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x558d48d75708 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x558d48d75718 <col:34> 'const char *' lvalue ParmVar 0x558d48d4c798 'keyword' 'const char *'
|     | |-BinaryOperator 0x558d48d757c8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x558d48d75778 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558d48d75738 <col:43> 'int' lvalue ParmVar 0x558d48d4c818 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558d48d757b0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558d48d75790 <col:51> 'const int' lvalue Var 0x558d48d41050 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558d48d757e8 <col:63> 'P' lvalue ParmVar 0x558d48d4c890 'parser' 'P'
|     | `-DeclRefExpr 0x558d48d75808 <col:71> 'Vector<T>' lvalue ParmVar 0x558d48d4c9e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x558d48d75898 <line:622:9, col:17>
|       `-UnaryOperator 0x558d48d75880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d75870 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d4d108 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x558d48d4cc40 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4ccb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d4d068 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x558d48d4cd78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4cdf8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4cf40 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558d48d75b10 <col:66, line:627:5>
|     `-ReturnStmt 0x558d48d75b00 <line:626:9, col:59>
|       `-CallExpr 0x558d48d75ac0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558d48d758d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558d48d75948 <col:25> 'const char *' lvalue ParmVar 0x558d48d4cd78 'keyword' 'const char *'
|         |-DeclRefExpr 0x558d48d75968 <col:34> 'int' lvalue ParmVar 0x558d48d4cdf8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x558d48d75a80 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558d48d75aa0 <col:58> 'Vector<T>' lvalue ParmVar 0x558d48d4cf40 'x' 'Vector<T> &'
|-CXXMethodDecl 0x558d48d4d198 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x558d48d75b90 <col:25, line:633:5>
|   `-ReturnStmt 0x558d48d75b80 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x558d48d75b68 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558d48d75b38 <col:16> 'const bool' lvalue ->_status 0x558d48d5a0b8
|         `-CXXThisExpr 0x558d48d75b28 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558d48d4d318 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x558d48d4d250 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x558d48d75c78 <col:27, line:639:5>
|   |-BinaryOperator 0x558d48d75c20 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558d48d75ba8 <col:9> 'bool' lvalue ParmVar 0x558d48d4d250 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558d48d75c08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558d48d75bd8 <col:13> 'bool' lvalue ->_status 0x558d48d5a0b8
|   |     `-CXXThisExpr 0x558d48d75bc8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558d48d75c68 <line:638:9, col:17>
|     `-UnaryOperator 0x558d48d75c50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48d75c40 <col:17> 'Args *' this
|-CXXMethodDecl 0x558d48d4d498 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558d48d4d3d8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x558d48d75d68 <col:39, line:644:5>
|   |-BinaryOperator 0x558d48d75d10 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558d48d75c98 <col:9> 'bool' lvalue ParmVar 0x558d48d4d3d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558d48d75cf8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558d48d75cc8 <col:13> 'const bool' lvalue ->_status 0x558d48d5a0b8
|   |     `-CXXThisExpr 0x558d48d75cb8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558d48d75d58 <line:643:9, col:17>
|     `-UnaryOperator 0x558d48d75d40 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48d75d30 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558d48d4d560 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x558d48d75e10 <col:30, line:651:5>
|   `-ReturnStmt 0x558d48d75e00 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x558d48d75de8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558d48d75db8 <col:16> 'bool' lvalue ->_read_status 0x558d48d397c0
|         `-ImplicitCastExpr 0x558d48d75d98 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x558d48d75d88 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558d48d4d6a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x558d48d4d618 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x558d48d75f18 <col:32, line:658:5>
|   |-BinaryOperator 0x558d48d75ec0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558d48d75e28 <col:9> 'bool' lvalue ParmVar 0x558d48d4d618 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558d48d75ea8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558d48d75e78 <col:13> 'bool' lvalue ->_read_status 0x558d48d397c0
|   |     `-ImplicitCastExpr 0x558d48d75e58 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558d48d75e48 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558d48d75f08 <line:657:9, col:17>
|     `-UnaryOperator 0x558d48d75ef0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48d75ee0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558d48d4d7f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558d48d4d768 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x558d48d76028 <col:44, line:663:5>
|   |-BinaryOperator 0x558d48d75fd0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558d48d75f38 <col:9> 'bool' lvalue ParmVar 0x558d48d4d768 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558d48d75fb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558d48d75f88 <col:13> 'bool' lvalue ->_read_status 0x558d48d397c0
|   |     `-ImplicitCastExpr 0x558d48d75f68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558d48d75f58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558d48d76018 <line:662:9, col:17>
|     `-UnaryOperator 0x558d48d76000 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48d75ff0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558d48d4d8c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x558d48d4d988 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x558d48d4da50 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x558d48d4db18 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x558d48d4de28 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x558d48d4dbb8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d4dd88 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x558d48d4dc98 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x558d48d763e0 <col:19, line:706:5>
|     `-IfStmt 0x558d48d763b8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x558d48d76128 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x558d48d762e8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x558d48d762b8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x558d48d76278 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x558d48d76180 <col:42> '<bound member function type>' ->simple_slot 0x558d48d70e70
|       |     | `-CXXThisExpr 0x558d48d76170 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x558d48d76218 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x558d48d761d0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x558d48ac44f8
|       |     | `-DeclRefExpr 0x558d48d761b0 <col:55> 'T' lvalue ParmVar 0x558d48d4dc98 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x558d48d76258 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x558d48d763a8 <line:705:13, col:34>
|         `-CallExpr 0x558d48d76380 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x558d48d76308 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x558d48d76360 <col:33> 'T' lvalue ParmVar 0x558d48d4dc98 'x' 'T &'
|-FunctionTemplateDecl 0x558d48d4e0f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x558d48d4de88 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d4e058 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x558d48d4df68 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x558d48d767c0 <col:31, line:717:5>
|     |-DeclStmt 0x558d48d76520 <line:713:9, col:23>
|     | `-VarDecl 0x558d48d76408 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x558d48d764f8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558d48d76480 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558d48d764d8 <col:21> 'T' lvalue ParmVar 0x558d48d4df68 'x' 'T &'
|     |-IfStmt 0x558d48d76770 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x558d48d76618 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x558d48d76750 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558d48d766f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558d48d76680 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|     |   | `-DeclRefExpr 0x558d48d76660 <col:14> 'T *' lvalue Var 0x558d48d76408 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x558d48d76730 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x558d48d767a8 <line:716:9, col:16>
|       `-DeclRefExpr 0x558d48d76788 <col:16> 'T *' lvalue Var 0x558d48d76408 's' 'T *'
|-FunctionTemplateDecl 0x558d48d4e508 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x558d48d4e158 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558d48d4e1d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558d48d4e468 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x558d48d4e2b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x558d48d4e358 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x558d48d76ad0 <col:37, line:726:5>
|     |-IfStmt 0x558d48d76a60 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x558d48d76a80 <line:723:13, col:26>
|     | | `-VarDecl 0x558d48d76828 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x558d48d76918 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x558d48d768a0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x558d48d768f8 <col:25> 'T' lvalue ParmVar 0x558d48d4e2b8 'x' 'T &'
|     | |-DeclRefExpr 0x558d48d76940 <col:16> 'T *' lvalue Var 0x558d48d76828 's' 'T *'
|     | `-BinaryOperator 0x558d48d76a40 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558d48d769f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558d48d76980 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|     |   | `-DeclRefExpr 0x558d48d76960 <col:14> 'T *' lvalue Var 0x558d48d76828 's' 'T *'
|     |   `-DeclRefExpr 0x558d48d76a20 <col:18> 'const V' lvalue ParmVar 0x558d48d4e358 'value' 'const V &'
|     `-ReturnStmt 0x558d48d76ac0 <line:725:9, col:17>
|       `-UnaryOperator 0x558d48d76aa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558d48d76a98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558d48d4e908 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x558d48d4e570 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558d48d4e868 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x558d48d4e620 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4e6a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4e748 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x558d48d778f0 <col:65, line:737:5>
|     |-DeclStmt 0x558d48d76b68 <line:732:9, col:26>
|     | `-VarDecl 0x558d48d76b00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558d48d778b8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x558d48d778d8 <line:733:13, col:58>
|       | `-VarDecl 0x558d48d76b90 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558d48d76d70 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558d48d76d40 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558d48d76d28 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558d48d76d08 <col:26, col:58> 'String' (CXXTemporary 0x558d48d76d08)
|       |           `-CXXMemberCallExpr 0x558d48d76c98 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558d48d76c08 <col:26> '<bound member function type>' ->find 0x558d48d6eb78
|       |             | `-CXXThisExpr 0x558d48d76bf8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558d48d76cd0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d76c38 <col:31> 'const char *' lvalue ParmVar 0x558d48d4e620 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558d48d76ce8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d76c58 <col:40> 'int' lvalue ParmVar 0x558d48d4e6a0 'flags' 'int'
|       |             `-DeclRefExpr 0x558d48d76c78 <col:47> 'Args::Slot *' lvalue Var 0x558d48d76b00 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558d48d76e28 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558d48d76e10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558d48d76df0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558d48d76dc0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |       `-ImplicitCastExpr 0x558d48d76da8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558d48d76d88 <col:20> 'String' lvalue Var 0x558d48d76b90 'str' 'String'
|       `-CompoundStmt 0x558d48d77898 <col:61, line:736:9>
|         |-DeclStmt 0x558d48d772e0 <line:734:13, col:76>
|         | `-VarDecl 0x558d48d76e78 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558d48d772b0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558d48d77220 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558d48d77268 <col:60> 'T' lvalue ParmVar 0x558d48d4e748 'variable' 'T &'
|         |     `-UnaryOperator 0x558d48d77298 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558d48d77288 <col:71> 'Args *' this
|         `-CallExpr 0x558d48d77868 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x558d48d77308 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|           | `-CXXThisExpr 0x558d48d772f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558d48d77828 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558d48d77338 <col:23> 'T *' lvalue Var 0x558d48d76e78 's' 'T *'
|           | `-CallExpr 0x558d48d777e8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558d48d775c0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x558d48d776c0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x558d48d776e0 <col:86> 'String' lvalue Var 0x558d48d76b90 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558d48d77790 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558d48d77720 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|           |   | `-DeclRefExpr 0x558d48d77700 <col:92> 'T *' lvalue Var 0x558d48d76e78 's' 'T *'
|           |   `-UnaryOperator 0x558d48d777d0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558d48d777c0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x558d48d77848 <col:103> 'Args::Slot *' lvalue Var 0x558d48d76b00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558d48d4ee58 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558d48d4e978 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558d48d4e9f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558d48d4edb8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558d48d4eab8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d4eb38 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d4ebd8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x558d48d4ec78 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x558d48d78790 <col:88, line:745:5>
|     |-DeclStmt 0x558d48d77988 <line:741:9, col:26>
|     | `-VarDecl 0x558d48d77920 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558d48d77ba8 <line:742:9, col:55>
|     | `-VarDecl 0x558d48d779b0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558d48d77b90 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558d48d77b60 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558d48d77b48 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558d48d77b28 <col:22, col:54> 'String' (CXXTemporary 0x558d48d77b28)
|     |           `-CXXMemberCallExpr 0x558d48d77ab8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558d48d77a28 <col:22> '<bound member function type>' ->find 0x558d48d6eb78
|     |             | `-CXXThisExpr 0x558d48d77a18 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558d48d77af0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558d48d77a58 <col:27> 'const char *' lvalue ParmVar 0x558d48d4eab8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558d48d77b08 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558d48d77a78 <col:36> 'int' lvalue ParmVar 0x558d48d4eb38 'flags' 'int'
|     |             `-DeclRefExpr 0x558d48d77a98 <col:43> 'Args::Slot *' lvalue Var 0x558d48d77920 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558d48d77f80 <line:743:9, col:72>
|     | `-VarDecl 0x558d48d77bf8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558d48d77f50 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558d48d77ec0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558d48d77f08 <col:56> 'T' lvalue ParmVar 0x558d48d4ebd8 'variable' 'T &'
|     |     `-UnaryOperator 0x558d48d77f38 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558d48d77f28 <col:67> 'Args *' this
|     `-CallExpr 0x558d48d78760 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x558d48d77fa8 <col:9> '<bound member function type>' ->postparse 0x558d48d6ed88
|       | `-CXXThisExpr 0x558d48d77f98 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558d48d78720 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558d48d77fd8 <col:19> 'T *' lvalue Var 0x558d48d77bf8 's' 'T *'
|       | `-ParenExpr 0x558d48d78700 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x558d48d786d0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558d48d786b8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558d48d786a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558d48d78680 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558d48d78650 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |     |       `-ImplicitCastExpr 0x558d48d78638 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558d48d77ff8 <col:25> 'String' lvalue Var 0x558d48d779b0 'str' 'String'
|       |     |-CallExpr 0x558d48d784a8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558d48d78280 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x558d48d78380 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x558d48d783a0 <col:89> 'String' lvalue Var 0x558d48d779b0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558d48d78450 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558d48d783e0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|       |     | | `-DeclRefExpr 0x558d48d783c0 <col:95> 'T *' lvalue Var 0x558d48d77bf8 's' 'T *'
|       |     | `-UnaryOperator 0x558d48d78490 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558d48d78480 <col:99> 'Args *' this
|       |     `-ParenExpr 0x558d48d78618 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x558d48d785f8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x558d48d785c8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558d48d78578 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558d48d78508 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|       |         | | `-DeclRefExpr 0x558d48d784e8 <col:109> 'T *' lvalue Var 0x558d48d77bf8 's' 'T *'
|       |         | `-DeclRefExpr 0x558d48d785a8 <col:113> 'const V' lvalue ParmVar 0x558d48d4ec78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558d48d785e8 <col:120> 'bool' true
|       `-DeclRefExpr 0x558d48d78740 <col:128> 'Args::Slot *' lvalue Var 0x558d48d77920 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558d48d56468 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x558d48d4eed0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d4ef48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d563c8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558d48d4f008 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d56170 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d561e8 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d56288 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x558d48d7b5b8 <col:75, line:754:5>
|     |-DeclStmt 0x558d48d78838 <line:749:9, col:26>
|     | `-VarDecl 0x558d48d787d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558d48d7b580 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x558d48d7b5a0 <line:750:13, col:58>
|       | `-VarDecl 0x558d48d78860 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558d48d78a40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558d48d78a10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558d48d789f8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558d48d789d8 <col:26, col:58> 'String' (CXXTemporary 0x558d48d789d8)
|       |           `-CXXMemberCallExpr 0x558d48d78968 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558d48d788d8 <col:26> '<bound member function type>' ->find 0x558d48d6eb78
|       |             | `-CXXThisExpr 0x558d48d788c8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558d48d789a0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d78908 <col:31> 'const char *' lvalue ParmVar 0x558d48d4f008 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558d48d789b8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d78928 <col:40> 'int' lvalue ParmVar 0x558d48d56170 'flags' 'int'
|       |             `-DeclRefExpr 0x558d48d78948 <col:47> 'Args::Slot *' lvalue Var 0x558d48d787d0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558d48d78af8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558d48d78ae0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558d48d78ac0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558d48d78a90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |       `-ImplicitCastExpr 0x558d48d78a78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558d48d78a58 <col:20> 'String' lvalue Var 0x558d48d78860 'str' 'String'
|       `-CompoundStmt 0x558d48d7b560 <col:61, line:753:9>
|         |-DeclStmt 0x558d48d7b108 <line:751:13, col:63>
|         | `-VarDecl 0x558d48d78b48 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558d48d7b0d8 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558d48d78e10 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558d48d7b090 <col:47> 'T' lvalue ParmVar 0x558d48d56288 'variable' 'T &'
|         |     `-UnaryOperator 0x558d48d7b0c0 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558d48d7b0b0 <col:58> 'Args *' this
|         `-CallExpr 0x558d48d7b530 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x558d48d7b130 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|           | `-CXXThisExpr 0x558d48d7b120 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558d48d7b4f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558d48d7b160 <col:23> 'T *' lvalue Var 0x558d48d78b48 's' 'T *'
|           | `-CallExpr 0x558d48d7b4b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558d48d7b340 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558d48d7b388 <col:56> 'P' lvalue ParmVar 0x558d48d561e8 'parser' 'P'
|           |   |-DeclRefExpr 0x558d48d7b3a8 <col:64> 'String' lvalue Var 0x558d48d78860 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558d48d7b458 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558d48d7b3e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|           |   | `-DeclRefExpr 0x558d48d7b3c8 <col:70> 'T *' lvalue Var 0x558d48d78b48 's' 'T *'
|           |   `-UnaryOperator 0x558d48d7b498 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558d48d7b488 <col:74> 'Args *' this
|           `-DeclRefExpr 0x558d48d7b510 <col:81> 'Args::Slot *' lvalue Var 0x558d48d787d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558d48d56ac8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558d48d564e0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558d48d56558 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x558d48d565d8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558d48d56a28 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558d48d566a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d56720 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d56798 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d56838 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x558d48d568d8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x558d48d7c348 <col:98, line:762:5>
|     |-DeclStmt 0x558d48d7b650 <line:758:9, col:26>
|     | `-VarDecl 0x558d48d7b5e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558d48d7b870 <line:759:9, col:55>
|     | `-VarDecl 0x558d48d7b678 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558d48d7b858 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558d48d7b828 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558d48d7b810 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558d48d7b7f0 <col:22, col:54> 'String' (CXXTemporary 0x558d48d7b7f0)
|     |           `-CXXMemberCallExpr 0x558d48d7b780 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558d48d7b6f0 <col:22> '<bound member function type>' ->find 0x558d48d6eb78
|     |             | `-CXXThisExpr 0x558d48d7b6e0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558d48d7b7b8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558d48d7b720 <col:27> 'const char *' lvalue ParmVar 0x558d48d566a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558d48d7b7d0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558d48d7b740 <col:36> 'int' lvalue ParmVar 0x558d48d56720 'flags' 'int'
|     |             `-DeclRefExpr 0x558d48d7b760 <col:43> 'Args::Slot *' lvalue Var 0x558d48d7b5e8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558d48d7bc90 <line:760:9, col:59>
|     | `-VarDecl 0x558d48d7b8c8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558d48d7bc60 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558d48d7bbd0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558d48d7bc18 <col:43> 'T' lvalue ParmVar 0x558d48d56838 'variable' 'T &'
|     |     `-UnaryOperator 0x558d48d7bc48 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558d48d7bc38 <col:54> 'Args *' this
|     `-CallExpr 0x558d48d7c318 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x558d48d7bcb8 <col:9> '<bound member function type>' ->postparse 0x558d48d6ed88
|       | `-CXXThisExpr 0x558d48d7bca8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558d48d7c2d8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558d48d7bce8 <col:19> 'T *' lvalue Var 0x558d48d7b8c8 's' 'T *'
|       | `-ParenExpr 0x558d48d7c2b8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x558d48d7c288 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558d48d7c270 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558d48d7c258 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558d48d7c238 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558d48d7c208 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |     |       `-ImplicitCastExpr 0x558d48d7c1f0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558d48d7bd08 <col:25> 'String' lvalue Var 0x558d48d7b678 'str' 'String'
|       |     |-CallExpr 0x558d48d7c060 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558d48d7bef0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x558d48d7bf38 <col:59> 'P' lvalue ParmVar 0x558d48d56798 'parser' 'P'
|       |     | |-DeclRefExpr 0x558d48d7bf58 <col:67> 'String' lvalue Var 0x558d48d7b678 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558d48d7c008 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558d48d7bf98 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|       |     | | `-DeclRefExpr 0x558d48d7bf78 <col:73> 'T *' lvalue Var 0x558d48d7b8c8 's' 'T *'
|       |     | `-UnaryOperator 0x558d48d7c048 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558d48d7c038 <col:77> 'Args *' this
|       |     `-ParenExpr 0x558d48d7c1d0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x558d48d7c1b0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x558d48d7c180 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558d48d7c130 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558d48d7c0c0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|       |         | | `-DeclRefExpr 0x558d48d7c0a0 <col:87> 'T *' lvalue Var 0x558d48d7b8c8 's' 'T *'
|       |         | `-DeclRefExpr 0x558d48d7c160 <col:91> 'const V' lvalue ParmVar 0x558d48d568d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558d48d7c1a0 <col:98> 'bool' true
|       `-DeclRefExpr 0x558d48d7c2f8 <col:106> 'Args::Slot *' lvalue Var 0x558d48d7b5e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558d48d57138 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x558d48d56b48 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d56bc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558d48d56c48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558d48d57098 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558d48d56d10 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d56d90 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d56e08 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d56ea8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x558d48d56f48 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x558d48d7d328 <col:60, line:773:5>
|     |-DeclStmt 0x558d48d7c3f0 <line:767:9, col:26>
|     | `-VarDecl 0x558d48d7c388 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558d48d7d2f0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x558d48d7d310 <line:768:13, col:58>
|       | `-VarDecl 0x558d48d7c418 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558d48d7c5f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558d48d7c5c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558d48d7c5b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558d48d7c590 <col:26, col:58> 'String' (CXXTemporary 0x558d48d7c590)
|       |           `-CXXMemberCallExpr 0x558d48d7c520 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558d48d7c490 <col:26> '<bound member function type>' ->find 0x558d48d6eb78
|       |             | `-CXXThisExpr 0x558d48d7c480 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558d48d7c558 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d7c4c0 <col:31> 'const char *' lvalue ParmVar 0x558d48d56d10 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558d48d7c570 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d7c4e0 <col:40> 'int' lvalue ParmVar 0x558d48d56d90 'flags' 'int'
|       |             `-DeclRefExpr 0x558d48d7c500 <col:47> 'Args::Slot *' lvalue Var 0x558d48d7c388 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558d48d7c6b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558d48d7c698 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558d48d7c678 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558d48d7c648 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |       `-ImplicitCastExpr 0x558d48d7c630 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558d48d7c610 <col:20> 'String' lvalue Var 0x558d48d7c418 'str' 'String'
|       `-CompoundStmt 0x558d48d7d2c8 <col:61, line:772:9>
|         |-DeclStmt 0x558d48d7c9f0 <line:769:13, col:66>
|         | `-VarDecl 0x558d48d7c708 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x558d48d7c9c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558d48d7c930 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558d48d7c978 <col:49> 'T1' lvalue ParmVar 0x558d48d56ea8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x558d48d7c9a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558d48d7c998 <col:61> 'Args *' this
|         |-DeclStmt 0x558d48d7cd60 <line:770:13, col:66>
|         | `-VarDecl 0x558d48d7ca78 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x558d48d7cd30 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558d48d7cca0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558d48d7cce8 <col:49> 'T2' lvalue ParmVar 0x558d48d56f48 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x558d48d7cd18 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558d48d7cd08 <col:61> 'Args *' this
|         `-CallExpr 0x558d48d7d298 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x558d48d7cd88 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|           | `-CXXThisExpr 0x558d48d7cd78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558d48d7d258 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x558d48d7cdf8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x558d48d7cdb8 <col:23> 'T1 *' lvalue Var 0x558d48d7c708 's1' 'T1 *'
|           | | `-DeclRefExpr 0x558d48d7cdd8 <col:29> 'T2 *' lvalue Var 0x558d48d7ca78 's2' 'T2 *'
|           | `-CallExpr 0x558d48d7d210 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558d48d7cfe0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558d48d7d028 <col:63> 'P' lvalue ParmVar 0x558d48d56e08 'parser' 'P'
|           |   |-DeclRefExpr 0x558d48d7d048 <col:71> 'String' lvalue Var 0x558d48d7c418 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558d48d7d0f8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558d48d7d088 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|           |   | `-DeclRefExpr 0x558d48d7d068 <col:77> 'T1 *' lvalue Var 0x558d48d7c708 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x558d48d7d1b8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558d48d7d148 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|           |   | `-DeclRefExpr 0x558d48d7d128 <col:82> 'T2 *' lvalue Var 0x558d48d7ca78 's2' 'T2 *'
|           |   `-UnaryOperator 0x558d48d7d1f8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558d48d7d1e8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x558d48d7d278 <col:94> 'Args::Slot *' lvalue Var 0x558d48d7c388 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558d48d57528 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x558d48d571b8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d57488 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558d48d57270 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d572f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d57368 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558d48d7d840 <col:67, line:780:5>
|     |-DeclStmt 0x558d48d7d3c0 <line:777:9, col:26>
|     | `-VarDecl 0x558d48d7d358 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558d48d7d808 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x558d48d7d828 <line:778:13, col:58>
|       | `-VarDecl 0x558d48d7d3e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558d48d7d5c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558d48d7d598 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558d48d7d580 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558d48d7d560 <col:26, col:58> 'String' (CXXTemporary 0x558d48d7d560)
|       |           `-CXXMemberCallExpr 0x558d48d7d4f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558d48d7d460 <col:26> '<bound member function type>' ->find 0x558d48d6eb78
|       |             | `-CXXThisExpr 0x558d48d7d450 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558d48d7d528 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d7d490 <col:31> 'const char *' lvalue ParmVar 0x558d48d57270 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558d48d7d540 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558d48d7d4b0 <col:40> 'int' lvalue ParmVar 0x558d48d572f0 'flags' 'int'
|       |             `-DeclRefExpr 0x558d48d7d4d0 <col:47> 'Args::Slot *' lvalue Var 0x558d48d7d358 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558d48d7d680 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558d48d7d668 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558d48d7d648 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558d48d7d618 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|       |       `-ImplicitCastExpr 0x558d48d7d600 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558d48d7d5e0 <col:20> 'String' lvalue Var 0x558d48d7d3e8 'str' 'String'
|       `-CallExpr 0x558d48d7d7d8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x558d48d7d6a8 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|         | `-CXXThisExpr 0x558d48d7d698 <col:13> 'Args *' implicit this
|         |-CallExpr 0x558d48d7d788 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x558d48d7d6f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x558d48d7d6d8 <col:23> 'P' lvalue ParmVar 0x558d48d57368 'parser' 'P'
|         | |-DeclRefExpr 0x558d48d7d740 <col:36> 'String' lvalue Var 0x558d48d7d3e8 'str' 'String'
|         | `-UnaryOperator 0x558d48d7d770 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x558d48d7d760 <col:42> 'Args *' this
|         `-DeclRefExpr 0x558d48d7d7b8 <col:49> 'Args::Slot *' lvalue Var 0x558d48d7d358 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558d48d578c8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558d48d57598 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558d48d57828 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558d48d57650 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d576d0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d57748 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x558d48d7e1b0 <col:71, line:792:5>
|     |-DeclStmt 0x558d48d7d8d8 <line:784:9, col:26>
|     | `-VarDecl 0x558d48d7d870 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558d48d7d9a8 <line:785:9, col:29>
|     | `-VarDecl 0x558d48d7d908 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558d48d7d990 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558d48d7d970 <col:28> 'int' 1
|     |-WhileStmt 0x558d48d7e060 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x558d48d7e080 <line:786:16, col:61>
|     | | `-VarDecl 0x558d48d7d9d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558d48d7dbb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558d48d7db80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558d48d7db68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558d48d7db48 <col:29, col:61> 'String' (CXXTemporary 0x558d48d7db48)
|     | |           `-CXXMemberCallExpr 0x558d48d7dad8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558d48d7da48 <col:29> '<bound member function type>' ->find 0x558d48d6eb78
|     | |             | `-CXXThisExpr 0x558d48d7da38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558d48d7db10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558d48d7da78 <col:34> 'const char *' lvalue ParmVar 0x558d48d57650 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558d48d7db28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558d48d7da98 <col:43> 'int' lvalue ParmVar 0x558d48d576d0 'flags' 'int'
|     | |             `-DeclRefExpr 0x558d48d7dab8 <col:50> 'Args::Slot *' lvalue Var 0x558d48d7d870 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558d48d7dc68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558d48d7dc50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558d48d7dc30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558d48d7dc00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|     | |       `-ImplicitCastExpr 0x558d48d7dbe8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558d48d7dbc8 <col:23> 'String' lvalue Var 0x558d48d7d9d0 'str' 'String'
|     | `-CompoundStmt 0x558d48d7e038 <col:64, line:790:9>
|     |   |-CallExpr 0x558d48d7ddc0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x558d48d7dc90 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|     |   | | `-CXXThisExpr 0x558d48d7dc80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558d48d7dd70 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558d48d7dce0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558d48d7dcc0 <col:23> 'P' lvalue ParmVar 0x558d48d57748 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558d48d7dd28 <col:36> 'String' lvalue Var 0x558d48d7d9d0 'str' 'String'
|     |   | | `-UnaryOperator 0x558d48d7dd58 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558d48d7dd48 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x558d48d7dda0 <col:49> 'Args::Slot *' lvalue Var 0x558d48d7d870 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558d48d7df58 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558d48d7ddf0 <col:13> 'int' lvalue Var 0x558d48d7d908 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558d48d7df40 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558d48d7df20 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558d48d7de88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558d48d7de68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558d48d7de50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558d48d7de10 <col:28> 'int' lvalue Var 0x558d48d7d908 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558d48d7de30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558d48d7df08 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558d48d7ded8 <col:49> 'bool' lvalue ->_read_status 0x558d48d397c0
|     |   |         `-ImplicitCastExpr 0x558d48d7deb8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558d48d7dea8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558d48d7e008 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558d48d7df78 <col:13> 'int' lvalue ParmVar 0x558d48d576d0 'flags' 'int'
|     |     `-UnaryOperator 0x558d48d7dff0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558d48d7dfd8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558d48d7dfb8 <col:23> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558d48d7e190 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558d48d7e0c8 <col:9> 'bool' lvalue ->_read_status 0x558d48d397c0
|       | `-ImplicitCastExpr 0x558d48d7e0a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558d48d7e098 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558d48d7e170 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558d48d7e150 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558d48d7e138 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558d48d7e0f8 <col:25> 'int' lvalue Var 0x558d48d7d908 'read_status' 'int'
|           `-IntegerLiteral 0x558d48d7e118 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558d48d57da8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558d48d57938 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d579b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d57d08 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558d48d57a78 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d57af8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d57b70 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d57c18 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x558d48d7f140 <col:84, line:805:5>
|     |-DeclStmt 0x558d48d7e258 <line:796:9, col:26>
|     | `-VarDecl 0x558d48d7e1f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558d48d7e328 <line:797:9, col:29>
|     | `-VarDecl 0x558d48d7e288 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558d48d7e310 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558d48d7e2f0 <col:28> 'int' 1
|     |-DeclStmt 0x558d48d7e660 <line:798:9, col:71>
|     | `-VarDecl 0x558d48d7e378 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558d48d7e630 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558d48d7e5a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x558d48d7e5e8 <col:55> 'T' lvalue ParmVar 0x558d48d57c18 'variable' 'T &'
|     |     `-UnaryOperator 0x558d48d7e618 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558d48d7e608 <col:66> 'Args *' this
|     |-WhileStmt 0x558d48d7eff0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x558d48d7f010 <line:799:16, col:61>
|     | | `-VarDecl 0x558d48d7e688 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558d48d7e868 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558d48d7e838 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558d48d7e820 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558d48d7e800 <col:29, col:61> 'String' (CXXTemporary 0x558d48d7e800)
|     | |           `-CXXMemberCallExpr 0x558d48d7e790 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558d48d7e700 <col:29> '<bound member function type>' ->find 0x558d48d6eb78
|     | |             | `-CXXThisExpr 0x558d48d7e6f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558d48d7e7c8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558d48d7e730 <col:34> 'const char *' lvalue ParmVar 0x558d48d57a78 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558d48d7e7e0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558d48d7e750 <col:43> 'int' lvalue ParmVar 0x558d48d57af8 'flags' 'int'
|     | |             `-DeclRefExpr 0x558d48d7e770 <col:50> 'Args::Slot *' lvalue Var 0x558d48d7e1f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558d48d7e920 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558d48d7e908 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558d48d7e8e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558d48d7e8b8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|     | |       `-ImplicitCastExpr 0x558d48d7e8a0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558d48d7e880 <col:23> 'String' lvalue Var 0x558d48d7e688 'str' 'String'
|     | `-CompoundStmt 0x558d48d7efc8 <col:64, line:803:9>
|     |   |-CallExpr 0x558d48d7ed50 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x558d48d7e948 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|     |   | | `-CXXThisExpr 0x558d48d7e938 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x558d48d7ed10 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x558d48d7e978 <col:23> 'T *' lvalue Var 0x558d48d7e378 's' 'T *'
|     |   | | `-CallExpr 0x558d48d7ecd0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x558d48d7eb60 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x558d48d7eba8 <col:56> 'P' lvalue ParmVar 0x558d48d57b70 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x558d48d7ebc8 <col:64> 'String' lvalue Var 0x558d48d7e688 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x558d48d7ec78 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x558d48d7ec08 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|     |   | |   | `-DeclRefExpr 0x558d48d7ebe8 <col:70> 'T *' lvalue Var 0x558d48d7e378 's' 'T *'
|     |   | |   `-UnaryOperator 0x558d48d7ecb8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x558d48d7eca8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x558d48d7ed30 <col:81> 'Args::Slot *' lvalue Var 0x558d48d7e1f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558d48d7eee8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558d48d7ed80 <col:13> 'int' lvalue Var 0x558d48d7e288 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558d48d7eed0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558d48d7eeb0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558d48d7ee18 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558d48d7edf8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558d48d7ede0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558d48d7eda0 <col:28> 'int' lvalue Var 0x558d48d7e288 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558d48d7edc0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558d48d7ee98 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558d48d7ee68 <col:49> 'bool' lvalue ->_read_status 0x558d48d397c0
|     |   |         `-ImplicitCastExpr 0x558d48d7ee48 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558d48d7ee38 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558d48d7ef98 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558d48d7ef08 <col:13> 'int' lvalue ParmVar 0x558d48d57af8 'flags' 'int'
|     |     `-UnaryOperator 0x558d48d7ef80 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558d48d7ef68 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558d48d7ef48 <col:23> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558d48d7f120 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558d48d7f058 <col:9> 'bool' lvalue ->_read_status 0x558d48d397c0
|       | `-ImplicitCastExpr 0x558d48d7f038 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558d48d7f028 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558d48d7f100 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558d48d7f0e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558d48d7f0c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558d48d7f088 <col:25> 'int' lvalue Var 0x558d48d7e288 'read_status' 'int'
|           `-IntegerLiteral 0x558d48d7f0a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558d48d58388 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x558d48d57e20 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558d48d57e98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558d48d582e8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558d48d57f58 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558d48d57fd8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x558d48d58050 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x558d48d581a0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x558d48d7ff48 <col:87, line:821:5>
|     |-DeclStmt 0x558d48d7f1f0 <line:809:9, col:26>
|     | `-VarDecl 0x558d48d7f188 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558d48d7f2c0 <line:810:9, col:29>
|     | `-VarDecl 0x558d48d7f220 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558d48d7f2a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558d48d7f288 <col:28> 'int' 1
|     |-DeclStmt 0x558d48d7f508 <line:811:9, col:38>
|     | `-VarDecl 0x558d48d7f3f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x558d48d7f4e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558d48d7f468 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558d48d7f4c0 <col:29> 'Vector<T>' lvalue ParmVar 0x558d48d581a0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x558d48d7fdf8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x558d48d7fe18 <line:812:16, col:61>
|     | | `-VarDecl 0x558d48d7f530 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558d48d7f710 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558d48d7f6e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558d48d7f6c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558d48d7f6a8 <col:29, col:61> 'String' (CXXTemporary 0x558d48d7f6a8)
|     | |           `-CXXMemberCallExpr 0x558d48d7f638 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558d48d7f5a8 <col:29> '<bound member function type>' ->find 0x558d48d6eb78
|     | |             | `-CXXThisExpr 0x558d48d7f598 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558d48d7f670 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558d48d7f5d8 <col:34> 'const char *' lvalue ParmVar 0x558d48d57f58 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558d48d7f688 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558d48d7f5f8 <col:43> 'int' lvalue ParmVar 0x558d48d57fd8 'flags' 'int'
|     | |             `-DeclRefExpr 0x558d48d7f618 <col:50> 'Args::Slot *' lvalue Var 0x558d48d7f188 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558d48d7f7c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558d48d7f7b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558d48d7f790 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558d48d7f760 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558d48a874c8
|     | |       `-ImplicitCastExpr 0x558d48d7f748 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558d48d7f728 <col:23> 'String' lvalue Var 0x558d48d7f530 'str' 'String'
|     | `-CompoundStmt 0x558d48d7fdc0 <col:64, line:819:9>
|     |   |-DeclStmt 0x558d48d7f888 <line:813:13, col:23>
|     |   | `-VarDecl 0x558d48d7f7f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x558d48d7f868 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x558d48d7fa08 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x558d48d7f8b0 <col:13> '<bound member function type>' ->postparse 0x558d48d6ed88
|     |   | | `-CXXThisExpr 0x558d48d7f8a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558d48d7f9b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558d48d7f900 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558d48d7f8e0 <col:23> 'P' lvalue ParmVar 0x558d48d58050 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558d48d7f948 <col:36> 'String' lvalue Var 0x558d48d7f530 'str' 'String'
|     |   | | |-DeclRefExpr 0x558d48d7f968 <col:41> 'T' lvalue Var 0x558d48d7f7f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x558d48d7f998 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558d48d7f988 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x558d48d7f9e8 <col:53> 'Args::Slot *' lvalue Var 0x558d48d7f188 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x558d48d7fb60 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x558d48d7fa98 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x558d48d7fa68 <col:17> 'bool' lvalue ->_read_status 0x558d48d397c0
|     |   | |   `-ImplicitCastExpr 0x558d48d7fa48 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x558d48d7fa38 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x558d48d7fb38 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x558d48d7fad0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x558d48d7fab0 <col:17> 'Vector<T> *' lvalue Var 0x558d48d7f3f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x558d48d7fb18 <col:30> 'T' lvalue Var 0x558d48d7f7f0 'sx' 'T'
|     |   |-BinaryOperator 0x558d48d7fce0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558d48d7fb78 <col:13> 'int' lvalue Var 0x558d48d7f220 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558d48d7fcc8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558d48d7fca8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558d48d7fc10 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558d48d7fbf0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558d48d7fbd8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558d48d7fb98 <col:28> 'int' lvalue Var 0x558d48d7f220 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558d48d7fbb8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558d48d7fc90 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558d48d7fc60 <col:49> 'bool' lvalue ->_read_status 0x558d48d397c0
|     |   |         `-ImplicitCastExpr 0x558d48d7fc40 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558d48d7fc30 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558d48d7fd90 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558d48d7fd00 <col:13> 'int' lvalue ParmVar 0x558d48d57fd8 'flags' 'int'
|     |     `-UnaryOperator 0x558d48d7fd78 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558d48d7fd60 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558d48d7fd40 <col:23> 'const int' lvalue Var 0x558d48d40d68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558d48d7ff28 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558d48d7fe60 <col:9> 'bool' lvalue ->_read_status 0x558d48d397c0
|       | `-ImplicitCastExpr 0x558d48d7fe40 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558d48d7fe30 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558d48d7ff08 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558d48d7fee8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558d48d7fed0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558d48d7fe90 <col:25> 'int' lvalue Var 0x558d48d7f220 'read_status' 'int'
|           `-IntegerLiteral 0x558d48d7feb0 <col:40> 'int' 1
|-AccessSpecDecl 0x558d48d58400 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x558d48d58428 prev 0x558d48d3f068 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x558d48d58520 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x558d48d58610 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x558d48d7ff80 <col:16, line:828:9>
| |-CXXDestructorDecl 0x558d48d58700 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x558d48d7ff90 <col:25, line:830:9>
| |-CXXMethodDecl 0x558d48d58800 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x558d48d588b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x558d48d58958 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558d48d58958
| | `-ParmVarDecl 0x558d48d58a68 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x558d48d59228 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558d48d59228
|   `-ParmVarDecl 0x558d48d59338 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x558d48d58ad8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x558d48d58c38 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x558d48d58e30 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x558d48d58ce0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x558d48d58d58 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x558d48d80170 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x558d48d590e8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x558d48d7ffe0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x558d48d7ffa0 <col:20> 'void *' lvalue ParmVar 0x558d48d58ce0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x558d48d59150 '_slot' 'char *'
| | | `-CXXNewExpr 0x558d48d80068 <col:32, col:45> 'char *' array Function 0x558d488aa138 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x558d48d80050 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x558d48d80020 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x558d48d58d58 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x558d48d591b0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x558d48d80130 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x558d48d800f0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x558d48d58d58 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x558d48d801f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x558d48d58f30 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x558d48d58700 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x558d48d80278 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x558d48d80258 <line:840:13, col:22> 'void' array Function 0x558d488aa498 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x558d48d80240 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x558d48d80210 <col:22> 'char *' lvalue ->_slot 0x558d48d59150
| |         `-CXXThisExpr 0x558d48d80200 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x558d48d59030 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x558d48d58800 Slot::store 'void ()' ]
| | `-CompoundStmt 0x558d48d80468 <col:22, line:844:9>
| |   `-CallExpr 0x558d48d803d0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x558d48d803b8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x558d48d80398 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x558d489b5f18 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x558d48d80408 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x558d48d802e8 <col:20> 'void *' lvalue ->_ptr 0x558d48d590e8
| |     |   `-CXXThisExpr 0x558d48d802d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x558d48d80438 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x558d48d80420 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x558d48d80328 <col:26> 'char *' lvalue ->_slot 0x558d48d59150
| |     |     `-CXXThisExpr 0x558d48d80318 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x558d48d80450 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x558d48d80368 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x558d48d591b0
| |         `-CXXThisExpr 0x558d48d80358 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x558d48d590e8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x558d48d59150 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x558d48d591b0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x558d48d593a8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558d48d593a8
| | `-ParmVarDecl 0x558d48d594b8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x558d48d59558 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558d48d59558
|   `-ParmVarDecl 0x558d48d59668 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x558d48d59808 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x558d48d596d8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x558d48d59778 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x558d48d59aa0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x558d48d59c98 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x558d48d59b68 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x558d48d59e18 '_ptr' 'T *'
|   | | `-ParenListExpr 0x558d48d804a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x558d48d80480 <col:20> 'T *' lvalue ParmVar 0x558d48d59b68 'ptr' 'T *'
|   | `-CompoundStmt 0x558d48d804f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x558d48d59d68 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x558d48d58800 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x558d48d806a0 <col:22, line:857:9>
|   |   `-CallExpr 0x558d48d80670 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x558d48d80500 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x558d48a6e648 0x558d48a18978
|   |     |-CXXOperatorCallExpr 0x558d48d80600 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x558d48d80590 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558d48c7b5f8 0x558d48c7b218 0x558d48c7ae48 0x558d48c7aa68 0x558d48c7a688 0x558d48c7a2b8
|   |     | `-MemberExpr 0x558d48d80560 <col:29> 'T *' lvalue ->_ptr 0x558d48d59e18
|   |     |   `-CXXThisExpr 0x558d48d80550 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x558d48d80640 <col:35> 'T' lvalue ->_slot 0x558d48d59e78
|   |       `-CXXThisExpr 0x558d48d80630 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x558d48d59e18 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x558d48d59e78 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x558d48d59ee0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x558d48d59fe0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x558d48d5a030 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48d59fc0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x558d48d59fa0 <col:31> 'int' 48
|-FieldDecl 0x558d48d5a058 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x558d48d5a0b8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x558d48d5a118 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x558d48d5a250 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x558d48d6e420 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x558d48d6e480 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x558d48d6e530 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x558d48d6e758 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x558d48d6e660 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x558d48d6e8a8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x558d48d6e818 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x558d48d6eb78 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x558d48d6e968 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x558d48d6e9e8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x558d48d6ea90 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x558d48d6ed88 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x558d48d6ec40 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x558d48d6ecb8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x558d48d6ee58 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x558d48d6efa8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x558d48d6ef10 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x558d48d6f338 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x558d48d6f068 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x558d48d6f0e8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x558d48d6f190 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x558d48d6f248 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x558d48d70e70 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x558d48d6f410 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x558d48d6f488 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x558d48d71188 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x558d48d70f20 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x558d48d710e8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x558d48d70ff8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48a77370 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48a77488 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x558d48a77518 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x558d48a775e8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x558d48a776d0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48a778e8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558d48a77790 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a77a98 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558d48a779a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558d48a77be0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558d48a77b50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558d48a77d28 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558d48a77c98 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a77e70 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558d48a77de0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a77f38 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x558d48a78080 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x558d48a77ff0 <col:28> col:31 'int'
|-CXXMethodDecl 0x558d48a78148 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x558d48a78290 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x558d48a78200 <col:28> col:31 'int'
|-CXXMethodDecl 0x558d48a78408 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558d48a78348 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a78550 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558d48a784c0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a78618 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x558d48a787d8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558d48a786c8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558d48a78740 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a78a28 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558d48a78898 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558d48a78910 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558d48a78ad8 <col:86> "" ""
|-CXXMethodDecl 0x558d48a78d48 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x558d48a78bb8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x558d48a78c30 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a78ef8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558d48a78e08 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558d48a790a8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558d48a78fb0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558d48a79378 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558d48a79160 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558d48a791d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558d48a79250 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a79658 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558d48a79440 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558d48a794b8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558d48a79530 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558d48a79710 <col:115> "" ""
|-AccessSpecDecl 0x558d48a79780 <line:84:3, col:10> col:3 private
|-FieldDecl 0x558d48a797b8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48a7acd0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558d48a7acd0
| `-ParmVarDecl 0x558d48a7add8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x558d48a7ae78 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558d48a7ae78
| `-ParmVarDecl 0x558d48a7af88 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x558d48ab05b8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558d48ca23b0 <col:7>
|-CXXConstructorDecl 0x558d48ab0690 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558d48ab0690
| `-ParmVarDecl 0x558d48ab07a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x558d48ab0818 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558d48ab0818
| `-ParmVarDecl 0x558d48ab0928 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x558d48ca4db0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48c90f58 prev 0x558d48c86160 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48c91050 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x558d48c91140 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x558d48c91268 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x558d48c913e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x558d48c91568 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x558d48c916e8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x558d48ca2518 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558d48ca2d88 <col:11>
|-CXXDestructorDecl 0x558d48ca25f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558d48ca2728 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558d48ca2728
| `-ParmVarDecl 0x558d48ca2838 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x558d48ca28d8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558d48ca28d8
| `-ParmVarDecl 0x558d48ca29e8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x558d48ca57a8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x558d48ca58b8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x558d48ca5b38 <col:11>
|   `-ReturnStmt 0x558d48ca5b28 <col:11>
|     `-UnaryOperator 0x558d48ca5b10 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558d48ca5b00 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x558d48ca5928 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558d48ca5928
  `-ParmVarDecl 0x558d48ca5a38 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48c91750 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48c91868 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x558d48c91908 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x558d48c91970 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x558d48c919d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x558d48c91a40 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x558d48c91aa0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x558d48c91b60 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x558d48c91bc0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x558d48c91c20 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x558d48ca2428 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x558d48c91908 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x558d48ca2d98 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x558d48ca2df0 <col:12>
|-CXXConstructorDecl 0x558d48ca2a58 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558d48ca2a58
| `-ParmVarDecl 0x558d48ca2b68 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x558d48ca2c08 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558d48ca2c08
| `-ParmVarDecl 0x558d48ca2d18 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x558d48ca4e90 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48c7f870 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558d48c7f988 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x558d48c7fa18 <col:16, col:22> col:16 public
|-EnumDecl 0x558d48c7fa40 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x558d48c7fb40 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x558d48c7fc20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c7fb20 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x558d48c7fb00 <col:21> 'int' 28
| `-EnumConstantDecl 0x558d48c7fbd0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x558d48c7fc38 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48c7fbb0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x558d48c7fb90 <col:22> 'int' 64
|-CXXMethodDecl 0x558d48c7ff78 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558d48c7fc60 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558d48c7fce0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x558d48c7fd58 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558d48c7fdd0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558d48c80038 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558d48c80238 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x558d48c800b0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x558d48c80128 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558d48c802e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558d48c80448 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x558d48c80358 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558d48c804f0 <col:72> warn_unused_result ""
|-TypedefDecl 0x558d48c80850 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x558d48c807e0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x558d48c80780 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x558d48c80740 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x558d487572d0 'void'
|       |-PointerType 0x558d489ffc10 'unsigned char *'
|       | `-BuiltinType 0x558d487573d0 'unsigned char'
|       |-TypedefType 0x558d487fc180 'size_t' sugar
|       | |-Typedef 0x558d487c7b20 'size_t'
|       | `-BuiltinType 0x558d48757430 'unsigned long'
|       `-PointerType 0x558d48757ad0 'void *'
|         `-BuiltinType 0x558d487572d0 'void'
|-CXXMethodDecl 0x558d48c80cc8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x558d48c808c0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x558d48c80938 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558d48c809d0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x558d48c80a50 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x558d48c9b3c0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x558d48c9b3a8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x558d48c9b370 <col:58> 'int' 0
| |-ParmVarDecl 0x558d48c80ad0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x558d48c9b3e8 <col:76> 'int' 0
| |-ParmVarDecl 0x558d48c80b50 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x558d48c9b408 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x558d48c80d98 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x558d48c80e18 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558d48c80ed8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x558d48c80f78 <col:20>
| `-OptimizeNoneAttr 0x558d48c80fd0 <col:30>
|-CXXMethodDecl 0x558d48c81048 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x558d48c810e8 <col:20>
| `-OptimizeNoneAttr 0x558d48c81140 <col:30>
|-CXXMethodDecl 0x558d48c811b8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x558d48c81258 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x558d48c81308 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x558d48c813a8 <col:20>
| |-OptimizeNoneAttr 0x558d48c81400 <col:30>
| `-WarnUnusedResultAttr 0x558d48c81428 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x558d48c81480 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x558d48c81520 <col:20>
| `-OptimizeNoneAttr 0x558d48c81578 <col:30>
|-CXXMethodDecl 0x558d48c815c8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x558d48c81668 <col:20>
| `-OptimizeNoneAttr 0x558d48c816c0 <col:30>
|-CXXMethodDecl 0x558d48c81708 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x558d48c817a8 <col:20>
| `-OptimizeNoneAttr 0x558d48c81800 <col:30>
|-CXXMethodDecl 0x558d48c81848 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48c81908 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48c819d0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558d48c81a98 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558d48c81b58 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48c81c78 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x558d48c9b4d0 <col:54, line:99:5>
|   `-ReturnStmt 0x558d48c9b4c0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x558d48c9b4a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x558d48c9b478 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558d48c91f58
|         `-CXXThisExpr 0x558d48c9b468 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x558d48c81e18 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x558d48c81d28 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x558d48c9b580 <col:67, line:103:5>
|   `-BinaryOperator 0x558d48c9b560 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558d48c9b4f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558d48c91f58
|     | `-CXXThisExpr 0x558d48c9b4e8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558d48c9b548 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x558d48c9b528 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x558d48c81d28 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x558d48c81f10 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x558d48c9b600 <col:33, line:107:5>
|   `-ReturnStmt 0x558d48c9b5f0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x558d48c9b5d8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x558d48c9b5a8 <col:16> 'void *' lvalue ->_destructor_argument 0x558d48c91fc0
|         `-CXXThisExpr 0x558d48c9b598 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558d48c81fd0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x558d48c9bc30 <col:25, line:113:5>
|   |-ParenExpr 0x558d48c9b978 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x558d48c9b948 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9b6b8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558d48c9b690 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x558d48c9b658 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x558d48c9b628 <col:24> '<bound member function type>' ->shared 0x558d48c81048
|   |   |       `-ImplicitCastExpr 0x558d48c9b678 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x558d48c9b618 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558d48c9b718 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9b6f8 <col:42> 'int' 0
|   |   `-CallExpr 0x558d48c9b8a8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9b890 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9b870 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9b8e8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9b788 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x558d48c9b900 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9b7b0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9b918 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9b7e8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x558d48c9b930 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9b858 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9b840 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9b808 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x558d48c9bb78 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x558d48c9b9a8 <col:2> 'unsigned char *' lvalue ->_head 0x558d48c91d60
|   | | `-CXXThisExpr 0x558d48c9b998 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x558d48c9bb60 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x558d48c9bb40 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x558d48c9b9e8 <col:10> 'unsigned char *' lvalue ->_data 0x558d48c91dc8
|   |     | `-CXXThisExpr 0x558d48c9b9d8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x558d48c9bb28 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x558d48c9bb08 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x558d48c9ba28 <col:18> 'unsigned char *' lvalue ->_tail 0x558d48c91e30
|   |         | `-CXXThisExpr 0x558d48c9ba18 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x558d48c9baf0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x558d48c9bad0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x558d48c9ba68 <col:26> 'unsigned char *' lvalue ->_end 0x558d48c91e98
|   |             | `-CXXThisExpr 0x558d48c9ba58 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x558d48c9bab8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x558d48c9ba98 <col:33> 'int' 0
|   `-BinaryOperator 0x558d48c9bc10 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558d48c9bba8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558d48c91f58
|     | `-CXXThisExpr 0x558d48c9bb98 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558d48c9bbf8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x558d48c9bbd8 <col:16> 'int' 0
|-CXXMethodDecl 0x558d48c82110 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558d48c82080 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c821b8 <col:20>
| |-OptimizeNoneAttr 0x558d48c82210 <col:30>
| `-WarnUnusedResultAttr 0x558d48c82238 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558d48c82308 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558d48c82278 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c823b0 <col:20>
| |-OptimizeNoneAttr 0x558d48c82408 <col:30>
| `-WarnUnusedResultAttr 0x558d48c82430 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x558d48c82568 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558d48c82470 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558d48c82610 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x558d48c82710 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x558d48c82680 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c827b8 <col:20>
| `-OptimizeNoneAttr 0x558d48c82810 <col:30>
|-CXXMethodDecl 0x558d48c828d8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558d48c82848 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558d48c82980 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x558d48c82a80 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558d48c829f0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558d48c82b28 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558d48c82c28 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x558d48c82b98 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c82cd0 <col:20>
| `-OptimizeNoneAttr 0x558d48c82d28 <col:30>
|-CXXMethodDecl 0x558d48c82eb8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x558d48c82d68 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x558d48c82de0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x558d48c9b428 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x558d48c82f68 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x558d48c83168 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558d48c82fe0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x558d48c83058 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c83378 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558d48c83228 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558d48c832a0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c83588 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x558d48c83438 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x558d48c834b8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x558d48c9b438 <col:39> 'int' 0
|-CXXMethodDecl 0x558d48c83658 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x558d48c83720 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558d48c837e8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x558d48c838a8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48c83970 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x558d48c83ab8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x558d48c83a28 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x558d48c83c88 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558d48c83b78 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x558d48c83bf0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c83d58 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x558d48c83e18 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x558d48c83eb8 <col:20>
| `-OptimizeNoneAttr 0x558d48c83f10 <col:30>
|-CXXMethodDecl 0x558d48c83f60 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558d48c84000 <col:20>
| `-OptimizeNoneAttr 0x558d48c84058 <col:30>
|-CXXMethodDecl 0x558d48c840a8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x558d48c84168 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48c84230 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x558d48c842d0 <col:20>
| `-OptimizeNoneAttr 0x558d48c84328 <col:30>
|-CXXMethodDecl 0x558d48c84478 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558d48c84368 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x558d48c843e0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c845c8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x558d48c84538 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c846a0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x558d48c84760 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x558d48c84800 <col:20>
| `-OptimizeNoneAttr 0x558d48c84858 <col:30>
|-CXXMethodDecl 0x558d48c848a8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558d48c84948 <col:20>
| `-OptimizeNoneAttr 0x558d48c849a0 <col:30>
|-CXXMethodDecl 0x558d48c849f0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x558d48c84ab8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x558d48c84b58 <col:20>
| `-OptimizeNoneAttr 0x558d48c84bb0 <col:30>
|-CXXMethodDecl 0x558d48c84bf8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x558d48c84d18 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x558d48c84e88 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x558d48c84dc8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x558d48c84f78 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x558d48c85018 <col:20>
| `-OptimizeNoneAttr 0x558d48c85070 <col:30>
|-CXXMethodDecl 0x558d48c850c0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x558d48c85180 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558d48c853b8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x558d48c85230 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x558d48c852a8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c85468 <col:20>
| `-OptimizeNoneAttr 0x558d48c854c0 <col:30>
|-CXXMethodDecl 0x558d48c85568 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x558d48c85608 <col:20>
| `-OptimizeNoneAttr 0x558d48c85660 <col:30>
|-CXXMethodDecl 0x558d48c856b0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x558d48c85750 <col:20>
| `-OptimizeNoneAttr 0x558d48c857a8 <col:30>
|-CXXMethodDecl 0x558d48c857f0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x558d48c85890 <col:20>
| `-OptimizeNoneAttr 0x558d48c858e8 <col:30>
|-CXXMethodDecl 0x558d48c859e8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x558d48c85920 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x558d48c85a90 <col:20>
| `-OptimizeNoneAttr 0x558d48c85ae8 <col:30>
|-CXXMethodDecl 0x558d48c85ca8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x558d48c85b20 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x558d48c85b98 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c85d58 <col:20>
| `-OptimizeNoneAttr 0x558d48c85db0 <col:30>
|-CXXMethodDecl 0x558d48c85e58 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x558d48c85f78 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x558d48c86098 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x558d48c86138 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x558d48c86160 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x558d48c86288 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x558d48c86328 <col:20>
| `-OptimizeNoneAttr 0x558d48c86380 <col:30>
|-CXXMethodDecl 0x558d48c86428 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x558d48c864c8 <col:20>
| `-OptimizeNoneAttr 0x558d48c86520 <col:30>
|-AccessSpecDecl 0x558d48c86548 <line:344:3, col:9> col:3 public
|-EnumDecl 0x558d48c86570 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x558d48c86670 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x558d48c866c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48c86650 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x558d48c86630 <col:14> 'int' 48
|-CXXMethodDecl 0x558d48c86728 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x558d48c867c8 <col:20>
| `-OptimizeNoneAttr 0x558d48c86820 <col:30>
|-CXXMethodDecl 0x558d48c86898 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x558d48c86938 <col:20>
| `-OptimizeNoneAttr 0x558d48c86990 <col:30>
|-CXXMethodDecl 0x558d48c86a58 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x558d48c869c8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x558d48c86bf8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x558d48c86d98 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x558d48c86ca8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x558d48c86e40 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x558d48c86f40 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558d48c872f0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c86f20 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x558d48c86f00 <col:9> 'int' 0
| |-EnumConstantDecl 0x558d48c86fd0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558d48c87308 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c86fb0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x558d48c86f90 <col:14> 'int' 1
| |-EnumConstantDecl 0x558d48c87060 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558d48c87320 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c87040 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x558d48c87020 <col:14> 'int' 2
| |-EnumConstantDecl 0x558d48c870f0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558d48c87338 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c870d0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x558d48c870b0 <col:14> 'int' 3
| |-EnumConstantDecl 0x558d48c87180 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558d48c87350 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c87160 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x558d48c87140 <col:13> 'int' 4
| |-EnumConstantDecl 0x558d48c87210 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558d48c87368 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c871f0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x558d48c871d0 <col:13> 'int' 5
| `-EnumConstantDecl 0x558d48c872a0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x558d48c87380 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48c87280 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x558d48c87260 <col:14> 'int' 6
|-CXXMethodDecl 0x558d48c873e8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x558d48c87488 <col:20>
| `-OptimizeNoneAttr 0x558d48c874e0 <col:30>
|-CXXMethodDecl 0x558d48c875d8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x558d48c87518 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x558d48c87680 <col:20>
| `-OptimizeNoneAttr 0x558d48c876d8 <col:30>
|-CXXMethodDecl 0x558d48c87748 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x558d48c87870 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x558d48c879e8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x558d48c87920 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x558d48c87ab0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x558d48c87b78 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x558d48c87cb8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x558d48c87c28 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x558d48c87d60 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x558d48c87e60 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558d48c88060 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c87e40 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x558d48c87e20 <col:23> 'int' 0
| |-EnumConstantDecl 0x558d48c87ef0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558d48c88078 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c87ed0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x558d48c87eb0 <col:45> 'int' 4
| |-EnumConstantDecl 0x558d48c87f80 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558d48c88090 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c87f60 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x558d48c87f40 <col:24> 'int' 0
| `-EnumConstantDecl 0x558d48c88010 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x558d48c880a8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48c87ff0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x558d48c87fd0 <col:47> 'int' 16
|-CXXMethodDecl 0x558d48c88108 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x558d48c88278 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x558d48c881b8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x558d48c88320 <col:20>
| `-OptimizeNoneAttr 0x558d48c88378 <col:30>
|-CXXMethodDecl 0x558d48c883c8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x558d48c9bd50 <col:18, col:36>
|   `-ReturnStmt 0x558d48c9bd40 <col:20, col:33>
|     `-ImplicitCastExpr 0x558d48c9bd28 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x558d48c9bd08 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x558d48c9bcd8 <col:27> '<bound member function type>' ->xanno 0x558d48c86428
|           `-CXXThisExpr 0x558d48c9bcc8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x558d48c884c0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x558d48c9be60 <col:30, col:48>
|   `-ReturnStmt 0x558d48c9be50 <col:32, col:45>
|     `-ImplicitCastExpr 0x558d48c9be38 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x558d48c9be18 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x558d48c9bde8 <col:39> '<bound member function type>' ->xanno 0x558d48c86288
|           `-CXXThisExpr 0x558d48c9bdd8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x558d48c885a8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x558d48c9bff8 <col:24, col:50>
|   `-ReturnStmt 0x558d48c9bfe8 <col:26, col:47>
|     `-UnaryOperator 0x558d48c9bfd0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558d48c9bfb0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x558d48c9bf98 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558d48c9bf48 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x558d48c91268
|         |   `-CXXMemberCallExpr 0x558d48c9bf28 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x558d48c9bef8 <col:34> '<bound member function type>' ->xanno 0x558d48c86428
|         |       `-CXXThisExpr 0x558d48c9bee8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x558d48c9bf78 <col:46> 'int' 0
|-CXXMethodDecl 0x558d48c886b0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x558d48c9c1c8 <col:36, col:62>
|   `-ReturnStmt 0x558d48c9c1b8 <col:38, col:59>
|     `-UnaryOperator 0x558d48c9c1a0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558d48c9c180 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558d48c9c168 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558d48c9c0e0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x558d48c91268
|         |   `-CXXMemberCallExpr 0x558d48c9c0c0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558d48c9c090 <col:46> '<bound member function type>' ->xanno 0x558d48c86288
|         |       `-CXXThisExpr 0x558d48c9c080 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558d48c9c110 <col:58> 'int' 0
|-CXXMethodDecl 0x558d48c887c8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x558d48c9c360 <col:26, col:53>
|   `-ReturnStmt 0x558d48c9c350 <col:28, col:50>
|     `-UnaryOperator 0x558d48c9c338 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558d48c9c318 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x558d48c9c300 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558d48c9c2b0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x558d48c91568
|         |   `-CXXMemberCallExpr 0x558d48c9c290 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x558d48c9c260 <col:36> '<bound member function type>' ->xanno 0x558d48c86428
|         |       `-CXXThisExpr 0x558d48c9c250 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x558d48c9c2e0 <col:49> 'int' 0
|-CXXMethodDecl 0x558d48c888e8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x558d48c9c538 <col:38, col:65>
|   `-ReturnStmt 0x558d48c9c528 <col:40, col:62>
|     `-UnaryOperator 0x558d48c9c510 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558d48c9c4f0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x558d48c9c4d8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558d48c9c448 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x558d48c91568
|         |   `-CXXMemberCallExpr 0x558d48c9c428 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558d48c9c3f8 <col:48> '<bound member function type>' ->xanno 0x558d48c86288
|         |       `-CXXThisExpr 0x558d48c9c3e8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558d48c9c478 <col:61> 'int' 0
|-CXXMethodDecl 0x558d48c88a98 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x558d48c889a0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x558d48c9cc08 <col:34, line:463:5>
|   |-ParenExpr 0x558d48c9ca50 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x558d48c9ca20 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9c688 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9c658 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9c5a8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9c590 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9c550 <col:23> 'int' lvalue ParmVar 0x558d48c889a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9c570 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9c638 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9c608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9c5c8 <col:33> 'int' lvalue ParmVar 0x558d48c889a0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558d48c9c620 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558d48c9c5e8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558d48c9c6e8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9c6c8 <col:56> 'int' 0
|   |   `-CallExpr 0x558d48c9c980 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9c968 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9c948 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9c9c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9c7d8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558d48c9c9d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9c808 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9c9f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9c840 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x558d48c9ca08 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9c930 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9c918 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9c8d8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x558d48c9cbf8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x558d48c9cbe0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x558d48c9cbc0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558d48c9cb90 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558d48c9cb40 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x558d48c91268
|         |   `-CXXMemberCallExpr 0x558d48c9cb20 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558d48c9caf0 <col:9> '<bound member function type>' ->xanno 0x558d48c86288
|         |       `-CXXThisExpr 0x558d48c9cae0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x558d48c9cba8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x558d48c9cb70 <col:21> 'int' lvalue ParmVar 0x558d48c889a0 'i' 'int'
|-CXXMethodDecl 0x558d48c88ce8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x558d48c88b58 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x558d48c88bd0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x558d48c9d298 <col:40, line:472:5>
|   |-ParenExpr 0x558d48c9d0b0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x558d48c9d080 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9cd60 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9cd30 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9cc80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9cc68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9cc28 <col:23> 'int' lvalue ParmVar 0x558d48c88b58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9cc48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9cd10 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9cce0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9cca0 <col:33> 'int' lvalue ParmVar 0x558d48c88b58 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558d48c9ccf8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558d48c9ccc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558d48c9cdc0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9cda0 <col:56> 'int' 0
|   |   `-CallExpr 0x558d48c9cfe0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9cfc8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9cfa8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9d020 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9ce30 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558d48c9d038 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9ce60 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9d050 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9ce98 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x558d48c9d068 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9cf90 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9cf78 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9cf38 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x558d48c9d278 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x558d48c9d220 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x558d48c9d1f0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x558d48c9d1a0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x558d48c91268
|     | |   `-CXXMemberCallExpr 0x558d48c9d180 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x558d48c9d150 <col:2> '<bound member function type>' ->xanno 0x558d48c86428
|     | |       `-CXXThisExpr 0x558d48c9d140 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x558d48c9d208 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x558d48c9d1d0 <col:14> 'int' lvalue ParmVar 0x558d48c88b58 'i' 'int'
|     `-ImplicitCastExpr 0x558d48c9d260 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x558d48c9d240 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x558d48c88bd0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x558d48c88ea8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x558d48c88db0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558d48c9da18 <col:36, line:485:5>
|   |-ParenExpr 0x558d48c9d780 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48c9d750 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9d430 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9d400 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9d310 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9d2f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9d2b8 <col:23> 'int' lvalue ParmVar 0x558d48c88db0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9d2d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9d3e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9d3c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9d330 <col:33> 'int' lvalue ParmVar 0x558d48c88db0 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9d3a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9d390 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9d350 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9d370 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558d48c9d490 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9d470 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48c9d6b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9d698 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9d678 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9d6f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9d500 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558d48c9d708 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9d538 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9d720 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9d570 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x558d48c9d738 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9d660 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9d648 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9d608 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x558d48c9da08 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x558d48c9d9f0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x558d48c9d9d8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558d48c9d9a8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x558d48c9d948 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558d48c9d918 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558d48c9d890 <col:61, col:70> 'char const[48]' lvalue ->c 0x558d48c91140
|             |   `-CXXMemberCallExpr 0x558d48c9d870 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558d48c9d840 <col:61> '<bound member function type>' ->xanno 0x558d48c86288
|             |       `-CXXThisExpr 0x558d48c9d830 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558d48c9d930 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558d48c9d8c0 <col:74> 'int' lvalue ParmVar 0x558d48c88db0 'i' 'int'
|-CXXMethodDecl 0x558d48c890f8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x558d48c88f68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558d48c88fe0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x558d48c9e168 <col:42, line:500:5>
|   |-ParenExpr 0x558d48c9df00 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48c9ded0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9dbb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9db80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9da90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9da78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9da38 <col:23> 'int' lvalue ParmVar 0x558d48c88f68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9da58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9db60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9db48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9dab0 <col:33> 'int' lvalue ParmVar 0x558d48c88f68 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9db28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9db10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9dad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9daf0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558d48c9dc10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9dbf0 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48c9de30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9de18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9ddf8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9de70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9dc80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558d48c9de88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9dcb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9dea0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9dcf0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x558d48c9deb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9dde0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9ddc8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9dd88 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x558d48c9e148 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x558d48c9e0f8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558d48c9e0c8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x558d48c9e070 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558d48c9e040 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558d48c9dff0 <col:48, col:57> 'char [48]' lvalue ->c 0x558d48c91140
|     |     |   `-CXXMemberCallExpr 0x558d48c9dfd0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558d48c9dfa0 <col:48> '<bound member function type>' ->xanno 0x558d48c86428
|     |     |       `-CXXThisExpr 0x558d48c9df90 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558d48c9e058 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558d48c9e020 <col:61> 'int' lvalue ParmVar 0x558d48c88f68 'i' 'int'
|     `-ImplicitCastExpr 0x558d48c9e130 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x558d48c9e110 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x558d48c88fe0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x558d48c892b8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x558d48c891c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558d48c9e8c8 <col:35, line:513:5>
|   |-ParenExpr 0x558d48c9e5d8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48c9e5a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9e300 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9e2d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9e1e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9e1c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9e188 <col:23> 'int' lvalue ParmVar 0x558d48c891c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9e1a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9e2b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9e298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9e200 <col:33> 'int' lvalue ParmVar 0x558d48c891c0 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9e278 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9e260 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9e220 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9e240 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558d48c9e360 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9e340 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48c9e508 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9e4f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9e4d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9e548 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9e3d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558d48c9e560 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9e408 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9e578 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9e440 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x558d48c9e590 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9e4b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9e4a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9e460 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x558d48c9e8b8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x558d48c9e8a0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x558d48c9e888 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558d48c9e858 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x558d48c9e7d0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558d48c9e7a0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558d48c9e750 <col:60, col:69> 'char const[48]' lvalue ->c 0x558d48c91140
|             |   `-CXXMemberCallExpr 0x558d48c9e730 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558d48c9e700 <col:60> '<bound member function type>' ->xanno 0x558d48c86288
|             |       `-CXXThisExpr 0x558d48c9e6f0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558d48c9e7b8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558d48c9e780 <col:73> 'int' lvalue ParmVar 0x558d48c891c0 'i' 'int'
|-CXXMethodDecl 0x558d48c89508 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x558d48c89378 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558d48c893f0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x558d48c9efe8 <col:41, line:528:5>
|   |-ParenExpr 0x558d48c9ed70 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48c9ed40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9ea60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9ea30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9e940 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9e928 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9e8e8 <col:23> 'int' lvalue ParmVar 0x558d48c89378 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9e908 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9ea10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9e9f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9e960 <col:33> 'int' lvalue ParmVar 0x558d48c89378 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9e9d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9e9c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9e980 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9e9a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558d48c9eac0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9eaa0 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48c9eca0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9ec88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9ec68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9ece0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9eb30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558d48c9ecf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9eb68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9ed10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9eba0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x558d48c9ed28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9ec50 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9ec38 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9ebf8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x558d48c9efc8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x558d48c9ef78 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558d48c9ef48 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x558d48c9eef0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558d48c9eeb0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558d48c9ee60 <col:47, col:56> 'char [48]' lvalue ->c 0x558d48c91140
|     |     |   `-CXXMemberCallExpr 0x558d48c9ee40 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558d48c9ee10 <col:47> '<bound member function type>' ->xanno 0x558d48c86428
|     |     |       `-CXXThisExpr 0x558d48c9ee00 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558d48c9eec8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558d48c9ee90 <col:60> 'int' lvalue ParmVar 0x558d48c89378 'i' 'int'
|     `-ImplicitCastExpr 0x558d48c9efb0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x558d48c9ef90 <col:65> 'int16_t':'short' lvalue ParmVar 0x558d48c893f0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x558d48c896c8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x558d48c895d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558d48c9f6b8 <col:36, line:541:5>
|   |-ParenExpr 0x558d48c9f458 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48c9f428 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9f180 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9f150 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9f060 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9f048 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9f008 <col:23> 'int' lvalue ParmVar 0x558d48c895d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9f028 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9f130 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9f118 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9f080 <col:33> 'int' lvalue ParmVar 0x558d48c895d0 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9f0f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9f0e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9f0a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9f0c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558d48c9f1e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9f1c0 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48c9f388 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9f370 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9f350 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9f3c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9f250 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558d48c9f3e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9f288 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9f3f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9f2c0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x558d48c9f410 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9f338 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9f320 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9f2e0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x558d48c9f6a8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x558d48c9f690 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558d48c9f678 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558d48c9f648 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x558d48c9f5f0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558d48c9f5c0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558d48c9f570 <col:61, col:70> 'char const[48]' lvalue ->c 0x558d48c91140
|             |   `-CXXMemberCallExpr 0x558d48c9f550 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558d48c9f520 <col:61> '<bound member function type>' ->xanno 0x558d48c86288
|             |       `-CXXThisExpr 0x558d48c9f510 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558d48c9f5d8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558d48c9f5a0 <col:74> 'int' lvalue ParmVar 0x558d48c895d0 'i' 'int'
|-CXXMethodDecl 0x558d48c89898 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x558d48c89788 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x558d48c89800 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558d48c89948 <col:20>
| `-OptimizeNoneAttr 0x558d48c899a0 <col:30>
|-CXXMethodDecl 0x558d48c89ad8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x558d48c899e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558d48c9fd88 <col:35, line:562:5>
|   |-ParenExpr 0x558d48c9fb28 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48c9faf8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9f850 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9f820 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9f730 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9f718 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9f6d8 <col:23> 'int' lvalue ParmVar 0x558d48c899e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9f6f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9f800 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9f7e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9f750 <col:33> 'int' lvalue ParmVar 0x558d48c899e0 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9f7c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9f7b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9f770 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9f790 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558d48c9f8b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9f890 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48c9fa58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48c9fa40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48c9fa20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48c9fa98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9f920 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558d48c9fab0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9f958 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48c9fac8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48c9f990 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x558d48c9fae0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48c9fa08 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48c9f9f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48c9f9b0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x558d48c9fd78 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x558d48c9fd60 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x558d48c9fd48 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558d48c9fd18 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x558d48c9fcc0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558d48c9fc90 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558d48c9fc40 <col:60, col:69> 'char const[48]' lvalue ->c 0x558d48c91140
|             |   `-CXXMemberCallExpr 0x558d48c9fc20 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558d48c9fbf0 <col:60> '<bound member function type>' ->xanno 0x558d48c86288
|             |       `-CXXThisExpr 0x558d48c9fbe0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558d48c9fca8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558d48c9fc70 <col:73> 'int' lvalue ParmVar 0x558d48c899e0 'i' 'int'
|-CXXMethodDecl 0x558d48c89ce8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x558d48c89b98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558d48c89c10 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x558d48ca0468 <col:41, line:577:5>
|   |-ParenExpr 0x558d48ca01f8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48ca01c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48c9ff20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48c9fef0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48c9fe00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48c9fde8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48c9fda8 <col:23> 'int' lvalue ParmVar 0x558d48c89b98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48c9fdc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48c9fed0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48c9feb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48c9fe20 <col:33> 'int' lvalue ParmVar 0x558d48c89b98 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48c9fe98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48c9fe80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48c9fe40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48c9fe60 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558d48c9ff80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48c9ff60 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48ca0128 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48ca0110 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48ca00f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48ca0168 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48c9fff0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558d48ca0180 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca0028 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48ca0198 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48ca0060 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x558d48ca01b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48ca00d8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48ca00c0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48ca0080 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x558d48ca0448 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x558d48ca03f8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558d48ca03c8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x558d48ca0368 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558d48ca0338 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558d48ca02e8 <col:47, col:56> 'char [48]' lvalue ->c 0x558d48c91140
|     |     |   `-CXXMemberCallExpr 0x558d48ca02c8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558d48ca0298 <col:47> '<bound member function type>' ->xanno 0x558d48c86428
|     |     |       `-CXXThisExpr 0x558d48ca0288 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558d48ca0350 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558d48ca0318 <col:60> 'int' lvalue ParmVar 0x558d48c89b98 'i' 'int'
|     `-ImplicitCastExpr 0x558d48ca0430 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x558d48ca0410 <col:65> 'int32_t':'int' lvalue ParmVar 0x558d48c89c10 'x' 'int32_t':'int'
|-CXXMethodDecl 0x558d48c89ea8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x558d48c89db0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558d48ca0b98 <col:36, line:591:5>
|   |-ParenExpr 0x558d48ca08d8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48ca08a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48ca0600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48ca05d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48ca04e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48ca04c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48ca0488 <col:23> 'int' lvalue ParmVar 0x558d48c89db0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48ca04a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48ca05b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48ca0598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48ca0500 <col:33> 'int' lvalue ParmVar 0x558d48c89db0 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48ca0578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48ca0560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48ca0520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48ca0540 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558d48ca0660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48ca0640 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48ca0808 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48ca07f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48ca07d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48ca0848 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca06d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558d48ca0860 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca0708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48ca0878 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48ca0740 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x558d48ca0890 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48ca07b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48ca07a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48ca0760 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x558d48ca0b88 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x558d48ca0b70 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x558d48ca0b58 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558d48ca0b28 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x558d48ca0aa0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558d48ca0a70 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558d48ca0a20 <col:61, col:70> 'char const[48]' lvalue ->c 0x558d48c91140
|             |   `-CXXMemberCallExpr 0x558d48ca0a00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558d48ca09d0 <col:61> '<bound member function type>' ->xanno 0x558d48c86288
|             |       `-CXXThisExpr 0x558d48ca09c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558d48ca0a88 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558d48ca0a50 <col:74> 'int' lvalue ParmVar 0x558d48c89db0 'i' 'int'
|-CXXMethodDecl 0x558d48c8a0f8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x558d48c89f68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558d48c89fe0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x558d48ca1278 <col:42, line:606:5>
|   |-ParenExpr 0x558d48ca1008 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x558d48ca0fd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558d48ca0d30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48ca0d00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48ca0c10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48ca0bf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48ca0bb8 <col:23> 'int' lvalue ParmVar 0x558d48c89f68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48ca0bd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48ca0ce0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558d48ca0cc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48ca0c30 <col:33> 'int' lvalue ParmVar 0x558d48c89f68 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48ca0ca8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48ca0c90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48ca0c50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558d48ca0c70 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558d48ca0d90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48ca0d70 <col:60> 'int' 0
|   |   `-CallExpr 0x558d48ca0f38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558d48ca0f20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48ca0f00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48ca0f78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca0e00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558d48ca0f90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca0e38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48ca0fa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48ca0e70 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x558d48ca0fc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48ca0ee8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48ca0ed0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48ca0e90 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x558d48ca1258 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x558d48ca1208 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558d48ca11d8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x558d48ca1178 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558d48ca1148 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558d48ca10f8 <col:48, col:57> 'char [48]' lvalue ->c 0x558d48c91140
|     |     |   `-CXXMemberCallExpr 0x558d48ca10d8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558d48ca10a8 <col:48> '<bound member function type>' ->xanno 0x558d48c86428
|     |     |       `-CXXThisExpr 0x558d48ca1098 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558d48ca1160 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558d48ca1128 <col:61> 'int' lvalue ParmVar 0x558d48c89f68 'i' 'int'
|     `-ImplicitCastExpr 0x558d48ca1240 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x558d48ca1220 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x558d48c89fe0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x558d48c8a290 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x558d48c8a1c0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x558d48ca1ae8 <col:33, line:620:5>
|   |-ParenExpr 0x558d48ca1860 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x558d48ca1830 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558d48ca1480 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48ca1450 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48ca12f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48ca12d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48ca1298 <col:23> 'int' lvalue ParmVar 0x558d48c8a1c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48ca12b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48ca1430 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558d48ca1418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48ca1310 <col:33> 'int' lvalue ParmVar 0x558d48c8a1c0 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48ca13f8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48ca13e0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48ca1330 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558d48ca13b8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558d48ca13a0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558d48ca1368 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558d48ca14e0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48ca14c0 <col:79> 'int' 0
|   |   `-CallExpr 0x558d48ca1790 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558d48ca1778 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48ca1758 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48ca17d0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca15c8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558d48ca17e8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca1610 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48ca1800 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48ca1648 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x558d48ca1818 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48ca1740 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48ca1728 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48ca16e8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x558d48ca1ad8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x558d48ca1ac0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x558d48ca1aa8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558d48ca1a78 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x558d48ca19f0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x558d48ca19c0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558d48ca1970 <col:67, col:76> 'char const[48]' lvalue ->c 0x558d48c91140
|             |   `-CXXMemberCallExpr 0x558d48ca1950 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558d48ca1920 <col:67> '<bound member function type>' ->xanno 0x558d48c86288
|             |       `-CXXThisExpr 0x558d48ca1910 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558d48ca19d8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558d48ca19a0 <col:80> 'int' lvalue ParmVar 0x558d48c8a1c0 'i' 'int'
|-CXXMethodDecl 0x558d48c8a4a8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x558d48c8a350 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558d48c8a3d0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x558d48ca2310 <col:45, line:635:5>
|   |-ParenExpr 0x558d48ca2058 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x558d48ca2028 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558d48ca1cf0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558d48ca1cc0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558d48ca1b60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558d48ca1b48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558d48ca1b08 <col:23> 'int' lvalue ParmVar 0x558d48c8a350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558d48ca1b28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558d48ca1ca0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558d48ca1c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558d48ca1b80 <col:33> 'int' lvalue ParmVar 0x558d48c8a350 'i' 'int'
|   |   |     `-BinaryOperator 0x558d48ca1c68 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558d48ca1c50 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558d48ca1ba0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558d48c86670 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558d48ca1c28 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558d48ca1c10 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558d48ca1bd8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558d48ca1d50 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558d48ca1d30 <col:79> 'int' 0
|   |   `-CallExpr 0x558d48ca1f88 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558d48ca1f70 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558d48ca1f50 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558d487f2f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558d48ca1fc8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca1dc0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558d48ca1fe0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558d48ca1e08 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558d48ca1ff8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558d48ca1e40 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x558d48ca2010 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558d48ca1f38 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558d48ca1f20 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558d48ca1ed8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x558d48ca22f0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x558d48ca2258 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558d48ca2228 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x558d48ca21c8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558d48ca2198 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558d48ca2148 <col:54, col:63> 'char [48]' lvalue ->c 0x558d48c91140
|     |     |   `-CXXMemberCallExpr 0x558d48ca2128 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558d48ca20f8 <col:54> '<bound member function type>' ->xanno 0x558d48c86428
|     |     |       `-CXXThisExpr 0x558d48ca20e8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558d48ca21b0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558d48ca2178 <col:67> 'int' lvalue ParmVar 0x558d48c8a350 'i' 'int'
|     `-CXXConstCastExpr 0x558d48ca22c0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x558d48ca22a8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x558d48ca2270 <col:91> 'const void *' lvalue ParmVar 0x558d48c8a3d0 'x' 'const void *'
|-CXXMethodDecl 0x558d48c8a578 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x558d48ca2398 <col:34, line:640:5>
|   `-ReturnStmt 0x558d48ca2388 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x558d48ca2370 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x558d48ca2340 <col:16> 'Packet *' lvalue ->_data_packet 0x558d48c91cf8
|         `-CXXThisExpr 0x558d48ca2330 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558d48c8a6b8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x558d48c8a628 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558d48c9b458 <col:46> 'bool' true
|-CXXMethodDecl 0x558d48c8a838 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x558d48c8a770 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x558d48c8a8e0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x558d48c8b090 <line:660:22> "" ""
| |-EnumConstantDecl 0x558d48c8a9e0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b100 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8a9c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x558d48c8a9a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558d48c7fb40 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558d48c8aa70 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b118 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8aa50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x558d48c8aa30 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558d48c7fbd0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558d48c8ab00 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b130 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8aae0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558d48c8aac0 <col:21> 'int' 0
| |-EnumConstantDecl 0x558d48c8ab90 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b148 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8ab70 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x558d48c8ab50 <col:19> 'int' 16
| |-EnumConstantDecl 0x558d48c8ac20 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b160 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8ac00 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x558d48c8abe0 <col:21> 'int' 16
| |-EnumConstantDecl 0x558d48c8acb0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b178 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8ac90 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558d48c8ac70 <col:19> 'int' 32
| |-EnumConstantDecl 0x558d48c8ad40 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b190 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8ad20 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x558d48c8ad00 <col:19> 'int' EnumConstant 0x558d48c8ab90 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558d48c8add0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b1a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8adb0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x558d48c8ad90 <col:19> 'int' EnumConstant 0x558d48c8acb0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558d48c8aea0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b1c0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8ae80 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x558d48c8ae60 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558d48c8ae20 <col:23> 'int' EnumConstant 0x558d48c8add0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558d48c8ae40 <col:40> 'int' 2
| |-EnumConstantDecl 0x558d48c8af70 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558d48c8b1d8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48c8af50 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x558d48c8af30 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558d48c8aef0 <col:23> 'int' EnumConstant 0x558d48c8add0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558d48c8af10 <col:40> 'int' 4
| `-EnumConstantDecl 0x558d48c8b040 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x558d48c8b1f0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558d48c8b020 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x558d48c8b000 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x558d48c8afc0 <col:23> 'int' EnumConstant 0x558d48c8add0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x558d48c8afe0 <col:40> 'int' 8
|-CXXMethodDecl 0x558d48c8b230 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x558d48c8b2d0 <col:68> "" ""
|-CXXMethodDecl 0x558d48c8b368 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x558d48c8b408 <col:45> "" ""
|-CXXMethodDecl 0x558d48c8b4a0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558d48c8b540 <col:57> "" ""
|-CXXMethodDecl 0x558d48c8b5d8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x558d48c8b678 <col:45> "" ""
|-CXXMethodDecl 0x558d48c8b710 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558d48c8b7b0 <col:57> "" ""
|-CXXMethodDecl 0x558d48c8b840 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x558d48c8b8e0 <col:51> "" ""
|-CXXMethodDecl 0x558d48c8b970 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558d48c8ba10 <col:63> "" ""
|-CXXMethodDecl 0x558d48c8baa0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x558d48c8bb40 <col:53> "" ""
|-CXXMethodDecl 0x558d48c8bbd0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558d48c8bc70 <col:65> "" ""
|-CXXMethodDecl 0x558d48c8bd88 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558d48c8bcf8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x558d48c8be30 <col:61> "" ""
|-CXXMethodDecl 0x558d48c8bfc8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558d48c8beb8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x558d48c8bf30 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558d48c8c078 <col:67> "" ""
|-CXXMethodDecl 0x558d48c8c190 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558d48c8c100 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558d48c8c238 <col:63> "" ""
|-CXXMethodDecl 0x558d48c8c3d0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558d48c8c2c0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558d48c8c338 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558d48c8c480 <col:69> "" ""
|-CXXMethodDecl 0x558d48c8c598 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558d48c8c508 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558d48c8c640 <col:63> "" ""
|-CXXMethodDecl 0x558d48c8ed18 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558d48c8ec08 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558d48c8ec80 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558d48c8edc8 <col:69> "" ""
|-CXXMethodDecl 0x558d48c8eee0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x558d48c8ee50 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x558d48c8ef88 <col:62> "" ""
|-CXXMethodDecl 0x558d48c8f120 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558d48c8f010 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558d48c8f088 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x558d48c8f1d0 <col:68> "" ""
|-CXXMethodDecl 0x558d48c8f2e8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x558d48c8f258 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558d48c8f390 <col:63> "" ""
|-CXXMethodDecl 0x558d48c8f528 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x558d48c8f418 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558d48c8f490 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x558d48c8f5d8 <col:69> "" ""
|-CXXMethodDecl 0x558d48c8f668 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558d48c8f708 <col:64> "" ""
|-CXXMethodDecl 0x558d48c8f798 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x558d48c8f838 <col:52> "" ""
|-CXXMethodDecl 0x558d48c8f8c8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558d48c8f968 <col:67> "" ""
|-CXXMethodDecl 0x558d48c8f9f8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x558d48c8fa98 <col:55> "" ""
|-CXXMethodDecl 0x558d48c8fbb0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558d48c8fb20 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558d48c8fc58 <col:58> "" ""
|-CXXMethodDecl 0x558d48c8fdf0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558d48c8fce0 <col:33> col:36 'int'
| |-ParmVarDecl 0x558d48c8fd58 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558d48c8fea0 <col:62> "" ""
|-CXXMethodDecl 0x558d48c8ffb8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x558d48c8ff28 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558d48c90060 <col:58> "" ""
|-CXXMethodDecl 0x558d48c901f8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x558d48c900e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x558d48c90160 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x558d48c902a8 <col:62> "" ""
|-CXXMethodDecl 0x558d48c903c0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558d48c90330 <col:34> col:37 'int'
| `-DeprecatedAttr 0x558d48c90468 <col:60> "" ""
|-CXXMethodDecl 0x558d48c90600 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558d48c904f0 <col:34> col:37 'int'
| |-ParmVarDecl 0x558d48c90568 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558d48c906b0 <col:64> "" ""
|-CXXMethodDecl 0x558d48c907c8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x558d48c90738 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558d48c90870 <col:58> "" ""
|-CXXMethodDecl 0x558d48c90a08 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558d48c908f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x558d48c90970 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x558d48c90ab8 <col:62> "" ""
|-CXXMethodDecl 0x558d48c90bd0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558d48c90b40 <col:33> col:36 'int'
| `-DeprecatedAttr 0x558d48c90c78 <col:59> "" ""
|-CXXMethodDecl 0x558d48c90e10 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558d48c90d00 <col:33> col:36 'int'
| |-ParmVarDecl 0x558d48c90d78 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558d48c90ec0 <col:63> "" ""
|-AccessSpecDecl 0x558d48c90f30 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x558d48c90f58 prev 0x558d48c86160 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558d48c91050 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x558d48c91140 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x558d48c91268 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x558d48c913e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x558d48c91568 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x558d48c916e8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x558d48ca2518 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558d48ca2d88 <col:11>
| |-CXXDestructorDecl 0x558d48ca25f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x558d48ca2728 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558d48ca2728
| | `-ParmVarDecl 0x558d48ca2838 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x558d48ca28d8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558d48ca28d8
| | `-ParmVarDecl 0x558d48ca29e8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x558d48ca57a8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558d48ca58b8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x558d48ca5b38 <col:11>
| |   `-ReturnStmt 0x558d48ca5b28 <col:11>
| |     `-UnaryOperator 0x558d48ca5b10 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558d48ca5b00 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x558d48ca5928 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558d48ca5928
|   `-ParmVarDecl 0x558d48ca5a38 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x558d48c91750 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558d48c91868 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x558d48c91908 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x558d48c91970 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x558d48c919d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x558d48c91a40 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x558d48c91aa0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x558d48c91b60 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x558d48c91bc0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x558d48c91c20 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x558d48ca2428 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x558d48c91908 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x558d48ca2d98 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x558d48ca2df0 <col:12>
| |-CXXConstructorDecl 0x558d48ca2a58 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558d48ca2a58
| | `-ParmVarDecl 0x558d48ca2b68 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x558d48ca2c08 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558d48ca2c08
| | `-ParmVarDecl 0x558d48ca2d18 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x558d48ca4e90 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x558d48c91c98 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x558d48c91cf8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x558d48c91d60 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x558d48c91dc8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x558d48c91e30 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x558d48c91e98 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x558d48c91ef8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x558d48c91f58 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x558d48c91fc0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x558d48c92048 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x558d48c91c98 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x558d48ca23c0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558d48c91ef8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x558d48ca2e00 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x558d48ca2e60 <col:21, line:755:5>
|-CXXConstructorDecl 0x558d48c921e8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x558d48c92128 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x558d48c922e0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x558d48c924c8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x558d48c923d0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x558d48c92798 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x558d48c92580 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558d48c925f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558d48c92670 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c929b8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x558d48c92868 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x558d48c928e0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x558d48c9af98 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x558d48c92a78 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x558d48c92af0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x558d48c92b68 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x558d48c9b0f0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558d48c9b060 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558d48c9b238 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558d48c9b1a8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x558d48c9b330 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48d8a9e0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558d48d8aaf8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x558d48d8ab88 <col:16, col:22> col:16 public
|-EnumDecl 0x558d48d8abb0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x558d48d8acb0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558d48d8af00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48d8ac90 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558d48d8ac70 <col:21> 'int' 0
| |-EnumConstantDecl 0x558d48d8ad40 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558d48d8af18 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48d8ad20 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x558d48d8ad00 <col:24> 'int' 22
| |-EnumConstantDecl 0x558d48d8add0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558d48d8af30 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48d8adb0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x558d48d8ad90 <col:24> 'int' 34
| |-EnumConstantDecl 0x558d48d8ae60 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558d48d8af48 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558d48d8ae40 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x558d48d8ae20 <col:25> 'int' 95
| `-EnumConstantDecl 0x558d48d8aeb0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x558d48d8c8c0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558d48d8cd28 <col:7>
|-CXXConstructorDecl 0x558d48d8c9c8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x558d48d8c9c8
| `-ParmVarDecl 0x558d48d8cad8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x558d48d8cb78 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558d48d8ccb8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x558d48dd5b50 <col:7>
`-CXXDestructorDecl 0x558d48d8ee28 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558d48d8af78 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x558d48d8b0d8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x558d48d8b168 <col:32, col:38> col:32 public
|-TypedefDecl 0x558d48d8b1a0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x558d488ac490 'uint32_t' sugar
|   |-Typedef 0x558d487c0408 'uint32_t'
|   `-TypedefType 0x558d48799440 '__uint32_t' sugar
|     |-Typedef 0x558d48799038 '__uint32_t'
|     `-BuiltinType 0x558d48757410 'unsigned int'
|-CXXConstructorDecl 0x558d48d8b2e8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x558d48d8b210 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x558d48d8c7c8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558d48d8cd38 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558d48d8c080 'base' 'int'
| | `-ImplicitCastExpr 0x558d48d8c868 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x558d48d8c828 <col:16> 'int' lvalue ParmVar 0x558d48d8b210 'b' 'int'
| `-CompoundStmt 0x558d48d8cda8 <col:19, line:1046:5>
|-CXXMethodDecl 0x558d48d8b7e0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x558d48d8b3b0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x558d48d8b430 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x558d48d8b4a8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x558d48d8b528 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x558d48d8b5e8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x558d48d8b668 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x558d48d8bc38 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x558d48d8b8b0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558d48d8bb98 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558d48d8b958 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x558d48d8b9f8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x558d48d8ba70 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558d48d8c7e8 <col:82> 'const ArgContext' lvalue Var 0x558d48d806c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558d48d8dcd8 <col:94, line:1067:5>
| |   |-DeclStmt 0x558d48d8cf38 <line:1054:9, col:64>
| |   | `-VarDecl 0x558d48d8cdc8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x558d48d8cef0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x558d48d8d158 <line:1055:9, col:91>
| |   | `-VarDecl 0x558d48d8cf68 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x558d48d8d130 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x558d48d8d110 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x558d48d8d0c0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x558d48d8d0a0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x558d48d8d048 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x558d48d8cff8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x558d48d8d028 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x558d48d8d088 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x558d48d8d068 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x558d48d8d0f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x558d48d8d2b8 <line:1056:9, col:27>
| |   | `-VarDecl 0x558d48d8d250 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x558d48d8d700 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x558d48d8d630 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x558d48d8d5b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558d48c76478 0x558d48abfa58 0x558d48abf730 0x558d48ab0f10 0x558d48ab0bc0 0x558d48ab04b0 0x558d48a82e20 0x558d48a0f2e0
| |   | | |-CallExpr 0x558d48d8d4f0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x558d48d8d2e0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x558d48d8d390 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x558d48d8d360 <col:19, col:23> '<bound member function type>' .begin 0x558d48aa0118
| |   | | | |   `-DeclRefExpr 0x558d48d8d340 <col:19> 'const String' lvalue ParmVar 0x558d48d8b958 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x558d48d8d400 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x558d48d8d3d0 <col:32, col:36> '<bound member function type>' .end 0x558d48aa0330
| |   | | | |   `-DeclRefExpr 0x558d48d8d3b0 <col:32> 'const String' lvalue ParmVar 0x558d48d8b958 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x558d48d8d420 <col:43> 'const bool' lvalue Var 0x558d48d8cdc8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x558d48d8d488 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x558d48d8d468 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x558d48d8d4b0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x558d48d8d250 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x558d48d8d4d0 <col:73> 'const int' lvalue Var 0x558d48d8cf68 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x558d48d8d590 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x558d48d8d560 <col:16, col:20> '<bound member function type>' .end 0x558d48aa0330
| |   | |     `-DeclRefExpr 0x558d48d8d540 <col:16> 'const String' lvalue ParmVar 0x558d48d8b958 'str' 'const String &'
| |   | `-BinaryOperator 0x558d48d8d6e0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x558d48d8d678 <col:13> 'int' lvalue ->status 0x558d48d8c0e8
| |   |   | `-CXXThisExpr 0x558d48d8d668 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x558d48d8d6c8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x558d48d8d6a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8ad40 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x558d48d8d950 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x558d48d8d838 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x558d48d8d820 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x558d48d8d808 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x558d48d8d728 <col:13> 'int' lvalue ->status 0x558d48d8c0e8
| |   | | |     `-CXXThisExpr 0x558d48d8d718 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x558d48d8d7e8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x558d48d8d7b8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x558d48d8d768 <col:23> 'int' lvalue ->status 0x558d48d8c0e8
| |   | |   |   `-CXXThisExpr 0x558d48d8d758 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x558d48d8d7d0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x558d48d8d798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8add0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x558d48d8d930 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x558d48d8d8d0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x558d48d8d878 <col:13, col:18> '<bound member function type>' .error 0x558d48d38e20
| |   |   | | `-DeclRefExpr 0x558d48d8d858 <col:13> 'const ArgContext' lvalue ParmVar 0x558d48d8ba70 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x558d48d8d8f8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x558d48d8d8a8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x558d48d8d920 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x558d48d8d910 <col:20> 'bool' false
| |   |-DeclStmt 0x558d48d8db28 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x558d48d8dad0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x558d48d8da60 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x558d48d8dc88 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x558d48d8db40 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x558d48a432a8
| |   | |-DeclRefExpr 0x558d48d8db88 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x558d48d8d250 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x558d48d8dc58 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x558d48d8dbd0 <col:64> 'V' lvalue ParmVar 0x558d48d8b9f8 'result' 'V &'
| |   `-ReturnStmt 0x558d48d8dcc8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x558d48d8dcb8 <col:16> 'bool' true
| `-CXXMethodDecl 0x558d48dde908 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x558d48dde6e0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x558d48dde7b8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x558d48dde820 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x558d48de06a0 <col:94, line:1067:5>
|     |-DeclStmt 0x558d48ddf118 <line:1054:9, col:64>
|     | `-VarDecl 0x558d48ddef38 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x558d48ddf0a8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x558d48ddf078 <col:36, col:55> 'const bool' lvalue Var 0x558d48a33218 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x558d48ddf2f8 <line:1055:9, col:91>
|     | `-VarDecl 0x558d48ddf130 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x558d48ddf278 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x558d48ddf260 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x558d48ddf240 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x558d48ddf220 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x558d48ddf200 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x558d48ddf1c8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x558d48ddf1a8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x558d48d8d028 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x558d48ddf1e8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x558d48d8d068 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x558d48d8d0f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x558d48ddf490 <line:1056:9, col:27>
|     | `-VarDecl 0x558d48ddf428 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x558d48ddf918 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x558d48ddf8c0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x558d48ddf778 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x558d48ddf748 <col:13> '<bound member function type>' ->parse 0x558d48d8b7e0
|     | | | | `-CXXThisExpr 0x558d48ddf738 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x558d48ddf5d8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558d48ddf5a8 <col:19, col:23> '<bound member function type>' .begin 0x558d48aa0118
|     | | | |   `-DeclRefExpr 0x558d48ddf588 <col:19> 'const String' lvalue ParmVar 0x558d48dde6e0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x558d48ddf648 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558d48ddf618 <col:32, col:36> '<bound member function type>' .end 0x558d48aa0330
|     | | | |   `-DeclRefExpr 0x558d48ddf5f8 <col:32> 'const String' lvalue ParmVar 0x558d48dde6e0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x558d48ddf7e8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x558d48ddf7c8 <col:43> 'const bool' lvalue Var 0x558d48ddef38 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x558d48ddf6d0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x558d48ddf6b8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x558d48ddf698 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x558d48ddf800 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x558d48ddf6f8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x558d48ddf428 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x558d48ddf838 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x558d48ddf818 <col:73> 'const int' lvalue Var 0x558d48ddf130 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x558d48ddf8a0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x558d48ddf870 <col:16, col:20> '<bound member function type>' .end 0x558d48aa0330
|     | |     `-DeclRefExpr 0x558d48ddf850 <col:16> 'const String' lvalue ParmVar 0x558d48dde6e0 'str' 'const String &'
|     | `-BinaryOperator 0x558d48ddf8f8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x558d48d8d678 <col:13> 'int' lvalue ->status 0x558d48d8c0e8
|     |   | `-CXXThisExpr 0x558d48d8d668 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x558d48ddf8e0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x558d48d8d6a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8ad40 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x558d48ddfa90 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x558d48ddf9b0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x558d48ddf998 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x558d48ddf980 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x558d48d8d728 <col:13> 'int' lvalue ->status 0x558d48d8c0e8
|     | | |     `-CXXThisExpr 0x558d48d8d718 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x558d48ddf960 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x558d48ddf930 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x558d48d8d768 <col:23> 'int' lvalue ->status 0x558d48d8c0e8
|     | |   |   `-CXXThisExpr 0x558d48d8d758 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x558d48ddf948 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x558d48d8d798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8add0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x558d48ddfa70 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x558d48ddfa20 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x558d48ddf9f0 <col:13, col:18> '<bound member function type>' .error 0x558d48d38e20
|     |   | | `-DeclRefExpr 0x558d48ddf9d0 <col:13> 'const ArgContext' lvalue ParmVar 0x558d48dde820 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x558d48ddfa48 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x558d48d8d8a8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x558d48ddfa60 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x558d48d8d910 <col:20> 'bool' false
|     |-DeclStmt 0x558d48ddffd8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x558d48ddff80 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x558d48ddff30 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x558d48ddff10 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x558d48ddfea0 'type'
|     |       `-ElaboratedType 0x558d48ddfe50 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x558d48ddfe30 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x558d48a33370 'unsigned_type'
|     |           `-BuiltinType 0x558d48757410 'unsigned int'
|     |-CallExpr 0x558d48de0630 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x558d48de0618 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x558d48de0598 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x558d48de0478 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x558d48a432a8 'extract_integer')
|     | |-ImplicitCastExpr 0x558d48de0678 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x558d48de0660 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x558d48de0038 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x558d48ddf428 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x558d48de0108 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x558d48de00b8 <col:64> 'int':'int' lvalue ParmVar 0x558d48dde7b8 'result' 'int &'
|     `-ReturnStmt 0x558d48de0690 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x558d48d8dcb8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x558d48d8bff8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x558d48d8bca8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558d48d8bf58 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558d48d8bd58 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x558d48d8bdf8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x558d48d8be70 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558d48d8c808 <col:71> 'const ArgContext' lvalue Var 0x558d48d806c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558d48d8e448 <col:83, line:1083:5>
| |   |-DeclStmt 0x558d48d8dda0 <line:1071:9, col:12>
| |   | `-VarDecl 0x558d48d8dd38 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x558d48d8e420 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x558d48d8e030 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x558d48d8deb8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x558d48d8de80 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x558d48d8ddc8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x558d48d8de20 <col:31> 'const String' lvalue ParmVar 0x558d48d8bd58 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x558d48d8de40 <col:36> 'V' lvalue Var 0x558d48d8dd38 'x' 'V'
| |     | |   `-DeclRefExpr 0x558d48d8de60 <col:39> 'const ArgContext' lvalue ParmVar 0x558d48d8be70 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x558d48d8e010 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x558d48d8dff0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x558d48d8dfd8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x558d48d8dfc0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x558d48d8dee0 <col:17> 'int' lvalue ->status 0x558d48d8c0e8
| |     |     |     `-CXXThisExpr 0x558d48d8ded0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x558d48d8dfa0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x558d48d8df70 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x558d48d8df20 <col:27> 'int' lvalue ->status 0x558d48d8c0e8
| |     |       |   `-CXXThisExpr 0x558d48d8df10 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x558d48d8df88 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x558d48d8df50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8add0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x558d48d8e060 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x558d48d8e050 <col:20> 'bool' false
| |     `-IfStmt 0x558d48d8e3f8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x558d48d8e100 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x558d48d8e0d0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x558d48d8e080 <col:18> 'int' lvalue ->status 0x558d48d8c0e8
| |       | |   `-CXXThisExpr 0x558d48d8e070 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x558d48d8e0e8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x558d48d8e0b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8add0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x558d48d8e338 <col:42, line:1079:9>
| |       | |-CallExpr 0x558d48d8e2e0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x558d48d8e130 <line:1076:13> '<bound member function type>' ->range_error 0x558d48d8c6f8
| |       | | | `-CXXThisExpr 0x558d48d8e120 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x558d48d8e160 <col:25> 'const ArgContext' lvalue ParmVar 0x558d48d8be70 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x558d48d8e240 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x558d48d8e2b8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x558d48d8e298 <col:43> 'V' lvalue Var 0x558d48d8dd38 'x' 'V'
| |       | `-ReturnStmt 0x558d48d8e328 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x558d48d8e318 <col:20> 'bool' false
| |       `-CompoundStmt 0x558d48d8e3d8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x558d48d8e398 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x558d48d8e358 <col:13> 'V' lvalue ParmVar 0x558d48d8bdf8 'result' 'V &'
| |         | `-DeclRefExpr 0x558d48d8e378 <col:22> 'V' lvalue Var 0x558d48d8dd38 'x' 'V'
| |         `-ReturnStmt 0x558d48d8e3c8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x558d48d8e3b8 <col:20> 'bool' true
| `-CXXMethodDecl 0x558d48dde2c8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x558d48dde0a0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x558d48dde178 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x558d48dde1e0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x558d48ddef18 <col:83, line:1083:5>
|     |-DeclStmt 0x558d48dde550 <line:1071:9, col:12>
|     | `-VarDecl 0x558d48dde4e8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x558d48ddeef0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x558d48ddeb80 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x558d48ddeaa8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x558d48ddea70 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x558d48ddea28 <col:14> '<bound member function type>' ->parse_saturating 0x558d48dde908
|       | |   | `-CXXThisExpr 0x558d48ddea18 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x558d48dde5c0 <col:31> 'const String' lvalue ParmVar 0x558d48dde0a0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x558d48dde5e0 <col:36> 'int':'int' lvalue Var 0x558d48dde4e8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x558d48dde600 <col:39> 'const ArgContext' lvalue ParmVar 0x558d48dde1e0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x558d48ddeb60 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x558d48ddeb40 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x558d48ddeb28 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x558d48ddeb10 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x558d48d8dee0 <col:17> 'int' lvalue ->status 0x558d48d8c0e8
|       |     |     `-CXXThisExpr 0x558d48d8ded0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x558d48ddeaf0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x558d48ddeac0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x558d48d8df20 <col:27> 'int' lvalue ->status 0x558d48d8c0e8
|       |       |   `-CXXThisExpr 0x558d48d8df10 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x558d48ddead8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x558d48d8df50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8add0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x558d48ddeba0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x558d48d8e050 <col:20> 'bool' false
|       `-IfStmt 0x558d48ddeec8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x558d48ddebe0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x558d48ddebb0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x558d48d8e080 <col:18> 'int' lvalue ->status 0x558d48d8c0e8
|         | |   `-CXXThisExpr 0x558d48d8e070 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x558d48ddebc8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x558d48d8e0b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558d48d8add0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x558d48ddee00 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x558d48dded70 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x558d48d8e130 <line:1076:13> '<bound member function type>' ->range_error 0x558d48d8c6f8
|         | | | `-CXXThisExpr 0x558d48d8e120 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x558d48ddec00 <col:25> 'const ArgContext' lvalue ParmVar 0x558d48dde1e0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x558d48ddedd8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x558d48ddeda8 <col:31, col:50> 'const bool' lvalue Var 0x558d48a33218 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x558d48dded48 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x558d48dded30 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x558d48dded18 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x558d48ddecf8 <col:43> 'int':'int' lvalue Var 0x558d48dde4e8 'x' 'int':'int'
|         | `-ReturnStmt 0x558d48ddedf0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x558d48d8e318 <col:20> 'bool' false
|         `-CompoundStmt 0x558d48ddeea8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x558d48ddee78 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x558d48ddee20 <col:13> 'int':'int' lvalue ParmVar 0x558d48dde178 'result' 'int &'
|           | `-ImplicitCastExpr 0x558d48ddee60 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x558d48ddee40 <col:22> 'int':'int' lvalue Var 0x558d48dde4e8 'x' 'int':'int'
|           `-ReturnStmt 0x558d48ddee98 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x558d48d8e3b8 <col:20> 'bool' true
|-FieldDecl 0x558d48d8c080 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x558d48d8c0e8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x558d48d8c138 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x558d48d8c3f0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x558d48d8c178 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x558d48d8c1f8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x558d48d8c270 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x558d48d8c2f0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x558d48d8c6f8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x558d48d8c4c0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x558d48d8c538 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x558d48d8c5d0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x558d48d8eca8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x558d48d8eca8
| `-ParmVarDecl 0x558d48d8edb8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x558d48d8ef38 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558d48d8f048 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558d48dd5b60 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558d48dd5b30 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x558d48dd5b00 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558d48dd5ad0 <col:7> 'IntArg' lvalue ParmVar 0x558d48d8f048 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x558d48d8c080 'base' 'int'
| | `-ImplicitCastExpr 0x558d48dd5c58 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558d48dd5c28 <col:7> 'int' xvalue .base 0x558d48d8c080
| |     `-CXXStaticCastExpr 0x558d48dd5bf8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558d48dd5bc8 <col:7> 'IntArg' lvalue ParmVar 0x558d48d8f048 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x558d48d8c0e8 'status' 'int'
| | `-ImplicitCastExpr 0x558d48dd5d28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558d48dd5cf8 <col:7> 'int' xvalue .status 0x558d48d8c0e8
| |     `-CXXStaticCastExpr 0x558d48dd5cc8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558d48dd5c98 <col:7> 'IntArg' lvalue ParmVar 0x558d48d8f048 '' 'IntArg &&'
| `-CompoundStmt 0x558d48dd5d80 <col:7>
`-CXXDestructorDecl 0x558d48dd4cc0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558d48d93570 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558d48d937c8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558d48dd4be8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x558d48dd5160 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x558d48dd5140 <<invalid sloc>> 'int'
| `-CompoundStmt 0x558d48dd51d0 <col:19>
|-CXXConstructorDecl 0x558d48dd4dc8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x558d48dd4dc8
| `-ParmVarDecl 0x558d48dd4ed8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x558d48dd4f78 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558d48dd5088 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x558d48dd5d90 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558d48dd5ab0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x558d48dd5a80 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x558d48dd5a50 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x558d48dd5088 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x558d48dd5e00 <col:19>
`-CXXDestructorDecl 0x558d48dd5210 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
