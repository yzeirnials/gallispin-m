
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a3119b8 prev 0x56545a309158 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a311ab0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56545a311b40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56545a311bb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56545a311c78 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56545a311d40 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56545a311eb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56545a311df0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56545a311f60 <col:24>
| `-OptimizeNoneAttr 0x56545a311fb8 <col:34>
|-CXXMethodDecl 0x56545a312000 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56545a3122b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56545a3120b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56545a312128 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56545a3121a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56545a312370 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56545a3123a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56545a312410 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56545a312498 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56545a3127b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56545a312550 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56545a3125c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56545a312640 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56545a3126c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56545a3128d0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56545a31a248 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56545a31a248
| `-ParmVarDecl 0x56545a31a358 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56545a31a3f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56545a31a3f8
| `-ParmVarDecl 0x56545a31a508 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56545a3e7028 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a3049d0 prev 0x56545a304750 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56545a304ac8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56545a304b58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56545a304bb8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56545a304ca8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56545a304da8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56545a304f78 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56545a304e28 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56545a304ea0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56545a305108 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56545a305040 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56545a3051b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56545a3052e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56545a305220 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56545a305488 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56545a3053c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56545a305628 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56545a305568 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56545a3056d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56545a3057d0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56545a3058b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3057b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56545a305790 <col:26> 'int' 1
| `-EnumConstantDecl 0x56545a305860 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56545a3058c8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a305840 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56545a305820 <col:44> 'int' 2
|-CXXMethodDecl 0x56545a305a10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56545a3058f8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56545a305978 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56545a305b68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56545a305ad8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56545a305da8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56545a305c28 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56545a305ca0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56545a305e58 <col:20>
| `-OptimizeNoneAttr 0x56545a305eb0 <col:30>
|-CXXMethodDecl 0x56545a305fb8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56545a305ef0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56545a306060 <col:20>
| `-OptimizeNoneAttr 0x56545a3060b8 <col:30>
|-CXXMethodDecl 0x56545a306108 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56545a3061d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56545a3062e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56545a306370 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56545a3063f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56545a306480 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56545a306508 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56545a306598 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56545a306658 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56545a3066e0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56545a306768 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56545a3067f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56545a306878 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56545a306900 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56545a306990 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56545a306a50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56545a306ae0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56545a306c30 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56545a306b98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56545a306dc0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56545a306cf0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56545a307070 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56545a306e78 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56545a306ef8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56545a306f78 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56545a307128 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56545a307230 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56545a3074c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a307210 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56545a3071f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x56545a3072c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56545a3074d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3072a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56545a307280 <col:32> 'int' 20
| |-EnumConstantDecl 0x56545a307350 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56545a3074f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a307330 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56545a307310 <col:38> 'int' 90
| |-EnumConstantDecl 0x56545a3073e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56545a307508 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3073c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56545a3073a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56545a307470 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56545a307520 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a307450 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56545a307430 <col:32> 'int' 2000
|-CXXMethodDecl 0x56545a307560 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56545a3079a0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56545a307810 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56545a307888 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56545a307a70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56545a307bf0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56545a307b20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56545a307df8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56545a307ca8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56545a307d20 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56545a307ef8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56545a307f98 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56545a308060 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56545a3080f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56545a308320 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3080d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56545a3080b0 <col:36> 'int' EnumConstant 0x56545a308060 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56545a308140 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56545a308190 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56545a3081e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56545a308230 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56545a308280 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56545a3082d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56545a308408 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56545a308348 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56545a3084d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56545a308590 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56545a308650 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56545a308710 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56545a308828 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56545a3088f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56545a308a70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56545a3089a0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56545a308b98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56545a308d98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56545a308c48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56545a308cc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56545a3166e8 <col:54, line:127:5>
|   |-ParenExpr 0x56545a316598 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56545a316568 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56545a316258 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56545a316230 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56545a316218 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56545a316200 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56545a3161d0 <col:31> 'Router *' lvalue ->_router 0x56545a3140b0
|   |   |         `-CXXThisExpr 0x56545a3161c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56545a3162b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a316298 <col:48> 'int' 0
|   |   `-CallExpr 0x56545a3164c8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56545a3164b0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a316490 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a316508 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a316328 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56545a316520 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a316348 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56545a316538 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a316380 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56545a316550 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a316478 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a316460 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a316418 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56545a316630 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56545a3165c8 <col:9> 'Router *' lvalue ->_router 0x56545a3140b0
|   | | `-CXXThisExpr 0x56545a3165b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56545a316618 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56545a3165f8 <col:19> 'Router *' lvalue ParmVar 0x56545a308c48 'r' 'Router *'
|   `-BinaryOperator 0x56545a3166c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56545a316660 <col:9> 'int' lvalue ->_eindex 0x56545a314118
|     | `-CXXThisExpr 0x56545a316650 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56545a3166b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56545a316690 <col:19> 'int' lvalue ParmVar 0x56545a308cc8 'eindex' 'int'
|-CXXMethodDecl 0x56545a308f20 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56545a308e58 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56545a308ff0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56545a3090b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56545a309158 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56545a3093a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56545a309220 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56545a3092a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56545a309458 <col:20>
| `-OptimizeNoneAttr 0x56545a3094b0 <col:30>
|-CXXMethodDecl 0x56545a3095b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56545a3094f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56545a309660 <col:20>
| `-OptimizeNoneAttr 0x56545a3096b8 <col:30>
|-CXXMethodDecl 0x56545a309788 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56545a3096f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56545a309830 <col:20>
| `-OptimizeNoneAttr 0x56545a309888 <col:30>
|-CXXMethodDecl 0x56545a309a18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56545a3098c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56545a309940 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56545a309ba8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56545a309ae0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56545a309cf8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56545a309c68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56545a309e48 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56545a309db8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56545a309f98 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56545a309f08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56545a30a258 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56545a30a050 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56545a30a0d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56545a30a178 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56545a30a330 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56545a30a3f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56545a30a6c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56545a30a570 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56545a30a5e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56545a30a7e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56545a30a9c0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56545a30a8a0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56545a30a920 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56545a30aba8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56545a30aa88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56545a30ab08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56545a30af18 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56545a30ac68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56545a30ace0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56545a30ad60 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56545a315cd0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a315cb0 <col:106> 'int' 0
| `-ParmVarDecl 0x56545a30add8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a315d08 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a315ce8 <col:126> 'int' 0
|-CXXMethodDecl 0x56545a30b2b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56545a30afe8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56545a30b080 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56545a30b100 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56545a30b178 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a315d40 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a315d20 <col:114> 'int' 0
|-CXXMethodDecl 0x56545a30b648 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56545a30b390 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56545a30b408 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56545a30b488 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56545a315d58 <col:96> 'int' 0
| `-ParmVarDecl 0x56545a30b500 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a315d98 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a315d78 <col:116> 'int' 0
|-CXXMethodDecl 0x56545a30b9c8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56545a30b718 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56545a30b790 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a30b810 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56545a315dd0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a315db0 <col:109> 'int' 0
| `-ParmVarDecl 0x56545a30b888 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a315e08 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a315de8 <col:129> 'int' 0
|-CXXMethodDecl 0x56545a30bd48 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56545a30ba98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56545a30bb10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a30bb90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56545a30bc08 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a315e40 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a315e20 <col:117> 'int' 0
|-CXXMethodDecl 0x56545a30c0d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56545a30be20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30be98 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a30bf18 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56545a315e58 <col:99> 'int' 0
| `-ParmVarDecl 0x56545a30bf90 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a315e98 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a315e78 <col:119> 'int' 0
|-CXXMethodDecl 0x56545a30c4f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56545a30c1a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56545a30c228 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56545a30c2a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a30c320 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56545a315ed0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a315eb0 <col:108> 'int' 0
| `-ParmVarDecl 0x56545a30c3a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56545a315f08 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56545a315ee8 <col:141> 'int' 0
|-CXXMethodDecl 0x56545a30c918 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56545a30c5d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56545a30c650 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56545a30c6c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a30c748 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56545a30c7c8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56545a315f20 <col:121> 'int' 0
|-CXXMethodDecl 0x56545a30cd48 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56545a30c9f8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56545a30ca78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56545a30caf0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a30cb70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56545a315f40 <col:98> 'int' 0
| `-ParmVarDecl 0x56545a30cbf0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56545a315f60 <col:123> 'int' 0
|-CXXMethodDecl 0x56545a30d010 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56545a30ce20 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56545a30cea0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56545a30cf20 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56545a315f80 <col:80> 'int' 0
|-EnumDecl 0x56545a30d0c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56545a30d1d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56545a30d460 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a30d1b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56545a30d190 <col:42> 'int' 1
| |-EnumConstantDecl 0x56545a30d260 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56545a30d478 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a30d240 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56545a30d220 <col:40> 'int' 2
| |-EnumConstantDecl 0x56545a30d2f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56545a30d490 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a30d2d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56545a30d2b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x56545a30d380 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56545a30d4a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a30d360 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56545a30d340 <col:36> 'int' 7
| `-EnumConstantDecl 0x56545a30d410 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56545a30d4c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a30d3f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56545a30d3d0 <col:34> 'int' 6
|-CXXMethodDecl 0x56545a30d778 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56545a30d4e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56545a30d588 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56545a30d608 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56545a30d680 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56545a316038 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56545a316020 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56545a316008 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56545a315fe8 <col:98, col:105> 'String' (CXXTemporary 0x56545a315fe8)
|           `-CXXTemporaryObjectExpr 0x56545a315fb0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56545a30da18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56545a30d848 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56545a30d8c0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56545a30d938 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56545a3160e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56545a3160d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56545a3160b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56545a316098 <col:94, col:101> 'String' (CXXTemporary 0x56545a316098)
| |         `-CXXTemporaryObjectExpr 0x56545a316060 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56545a3168d0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56545a316848 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56545a316818 <col:9> '<bound member function type>' ->add_task_handlers 0x56545a30d778
|     | `-CXXThisExpr 0x56545a316808 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56545a316888 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56545a316788 <col:27> 'Task *' lvalue ParmVar 0x56545a30d848 'task' 'Task *'
|     |-ImplicitCastExpr 0x56545a3168a0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56545a3167a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56545a30d8c0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56545a3168b8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56545a3167c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56545a30d410 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56545a3167e8 <col:62> 'const String' lvalue ParmVar 0x56545a30d938 'prefix' 'const String &'
|-CXXMethodDecl 0x56545a30dc28 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56545a30dae0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56545a30db58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56545a316198 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56545a316180 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56545a316168 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56545a316148 <col:70, col:77> 'String' (CXXTemporary 0x56545a316148)
| |         `-CXXTemporaryObjectExpr 0x56545a316110 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56545a316aa8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56545a316a20 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56545a3169f0 <col:9> '<bound member function type>' ->add_task_handlers 0x56545a30d778
|     | `-CXXThisExpr 0x56545a3169e0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56545a316a60 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56545a316960 <col:27> 'Task *' lvalue ParmVar 0x56545a30dae0 'task' 'Task *'
|     |-ImplicitCastExpr 0x56545a316a78 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56545a316980 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56545a316a90 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56545a3169a0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56545a30d410 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56545a3169c0 <col:57> 'const String' lvalue ParmVar 0x56545a30db58 'prefix' 'const String &'
|-CXXMethodDecl 0x56545a30df08 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56545a30dcf0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30dd70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30dde8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56545a30e1b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56545a30dfd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30e058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30e0d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56545a30e4a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56545a30e288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30e308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30e380 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56545a30e758 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56545a30e578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30e5f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30e678 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56545a30ea08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56545a30e828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30e8a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30e928 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56545a30ecb8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56545a30ead8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30eb58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30ebd0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56545a30ef68 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56545a30ed88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30ee08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30ee88 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56545a30f278 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56545a30f090 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30f110 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30f190 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56545a30f558 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56545a30f348 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30f3c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30f470 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56545a30f838 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56545a30f628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30f6a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30f750 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56545a30faa0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56545a30f908 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56545a30f988 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56545a30fa00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56545a30fd48 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56545a30fb70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56545a30fbf0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56545a30fc68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56545a30fff8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56545a30fe18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a30fe98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a30ff18 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56545a3102a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56545a3100c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a310148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a3101c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56545a310558 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56545a310378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a3103f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a310470 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56545a310828 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56545a310628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a3106a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56545a310748 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56545a310b58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56545a3108f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56545a310978 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56545a3109f0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56545a310a68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56545a3161b0 <col:93> 'bool' false
|-CXXMethodDecl 0x56545a310d40 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56545a310c28 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56545a310ca8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56545a310f18 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56545a310e00 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56545a310e80 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56545a3111f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56545a310fd8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56545a311050 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56545a3110d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56545a311148 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56545a3114e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56545a3112c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56545a311340 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56545a3113c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56545a311438 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56545a311720 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56545a3115c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56545a311640 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56545a311908 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56545a3117e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56545a311868 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56545a3119b8 prev 0x56545a309158 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56545a311ab0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56545a311b40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56545a311bb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56545a311c78 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56545a311d40 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56545a311eb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56545a311df0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56545a311f60 <col:24>
| | `-OptimizeNoneAttr 0x56545a311fb8 <col:34>
| |-CXXMethodDecl 0x56545a312000 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56545a3122b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56545a3120b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56545a312128 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56545a3121a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56545a312370 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56545a3123a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56545a312410 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56545a312498 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56545a3127b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56545a312550 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56545a3125c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56545a312640 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56545a3126c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56545a3128d0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56545a31a248 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56545a31a248
| | `-ParmVarDecl 0x56545a31a358 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56545a31a3f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56545a31a3f8
| | `-ParmVarDecl 0x56545a31a508 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56545a3e7028 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56545a312948 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56545a3129e8 <col:38> "" ""
|-CXXMethodDecl 0x56545a312a78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56545a312b18 <col:44> "" ""
|-AccessSpecDecl 0x56545a312b88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56545a312bb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56545a312cb0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56545a312d00 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a312c90 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56545a312c70 <col:27> 'int' 4
|-FieldDecl 0x56545a312db8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56545a312f68 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56545a313020 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56545a3140b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56545a314118 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56545a314268 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56545a3141a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56545a314418 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56545a314328 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56545a3145f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56545a3144d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x56545a314558 <col:25> col:28 'int'
|-CXXMethodDecl 0x56545a3148a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56545a3146c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x56545a314740 <col:28> col:31 'int'
| `-ParmVarDecl 0x56545a3147b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56545a314958 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56545a314a20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56545a314a70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56545a314ac0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56545a314ca0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56545a314b50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56545a314bc8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56545a314f48 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56545a314d68 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56545a314de8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56545a314e60 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56545a315168 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56545a315018 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56545a315098 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56545a3154a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56545a315228 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56545a3152a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56545a315320 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56545a3153a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x56545a315688 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56545a315570 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56545a3155f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56545a3157d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56545a315748 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56545a315b58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56545a315898 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56545a315918 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56545a315990 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56545a315a10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56545a315c70 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Unstrip
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _nbytes
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a31d3b8 <../elements/standard/unstrip.hh:21:1, line:36:1> line:21:7 class Unstrip definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56545a31d518 <col:1, col:7> col:7 implicit referenced class Unstrip
|-FieldDecl 0x56545a31d5c0 <line:23:3, col:12> col:12 _nbytes 'unsigned int'
|-AccessSpecDecl 0x56545a31d610 <line:25:2, col:8> col:2 public
|-CXXConstructorDecl 0x56545a31d728 <line:27:3, col:30> col:3 Unstrip 'void (unsigned int)'
| `-ParmVarDecl 0x56545a31d650 <col:11, col:29> col:20 nbytes 'unsigned int' cinit
|   `-ImplicitCastExpr 0x56545a31e570 <col:29> 'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56545a31e550 <col:29> 'int' 0
|-CXXMethodDecl 0x56545a31d830 <line:29:3, col:54> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x56545a306108 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56545a31e5d0 <col:34, col:54>
|   `-ReturnStmt 0x56545a31e5c0 <col:36, col:43>
|     `-ImplicitCastExpr 0x56545a31e5a8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56545a31e588 <col:43> 'const char [8]' lvalue "Unstrip"
|-CXXMethodDecl 0x56545a31d8f8 <line:30:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x56545a3061d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56545a31e630 <col:34, col:54>
|   `-ReturnStmt 0x56545a31e620 <col:36, col:43>
|     `-ImplicitCastExpr 0x56545a31e608 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56545a31e5e8 <col:43> 'const char []' lvalue Var 0x56545a306480 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56545a31dbd0 <line:32:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56545a3079a0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56545a31da80 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x56545a31daf8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x56545a31dd20 <line:34:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x56545a3052e8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x56545a31dc90 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x56545a31ddf8 <line:21:7> col:7 implicit Unstrip 'void (const Unstrip &)' inline default_delete noexcept-unevaluated 0x56545a31ddf8
| `-ParmVarDecl 0x56545a31df08 <col:7> col:7 'const Unstrip &'
|-CXXConstructorDecl 0x56545a31dfa8 <col:7> col:7 implicit Unstrip 'void (Unstrip &&)' inline default_delete noexcept-unevaluated 0x56545a31dfa8
| `-ParmVarDecl 0x56545a31e0b8 <col:7> col:7 'Unstrip &&'
|-CXXMethodDecl 0x56545a31e158 <col:7> col:7 implicit operator= 'Unstrip &(const Unstrip &)' inline default_delete noexcept-unevaluated 0x56545a31e158
| `-ParmVarDecl 0x56545a31e268 <col:7> col:7 'const Unstrip &'
|-CXXMethodDecl 0x56545a31e2d8 <col:7> col:7 implicit operator= 'Unstrip &(Unstrip &&)' inline default_delete noexcept-unevaluated 0x56545a31e2d8
| `-ParmVarDecl 0x56545a31e3e8 <col:7> col:7 'Unstrip &&'
`-CXXDestructorDecl 0x56545a31e470 <col:7> col:7 implicit ~Unstrip 'void ()' inline default noexcept-unevaluated 0x56545a31e470
  `-Overrides: [ 0x56545a304ca8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Unstrip = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.Unstrip = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a0d7860 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56545a0d7978 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56545a0d7a18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56545a0d7a78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56545a0d7ad8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56545a0d7b88 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a0d7e90 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a0d7fa8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56545a0d8050 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56545a0d80b8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56545a0d8148 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56545a0de1e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56545a0de618 <col:12>
|-CXXConstructorDecl 0x56545a0de2e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56545a0de3f8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56545a0d8050 'data' 'const char *'
| | `-ImplicitCastExpr 0x56545a0e0ba0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56545a0e0b70 <col:12> 'const char *const' lvalue .data 0x56545a0d8050
| |     `-DeclRefExpr 0x56545a0e0b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0de3f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56545a0d80b8 'length' 'int'
| | `-ImplicitCastExpr 0x56545a0e0c30 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56545a0e0c00 <col:12> 'const int' lvalue .length 0x56545a0d80b8
| |     `-DeclRefExpr 0x56545a0e0be0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0de3f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56545a0d8148 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56545a0e0cc0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56545a0e0c90 <col:12> 'String::memo_t *const' lvalue .memo 0x56545a0d8148
| |     `-DeclRefExpr 0x56545a0e0c70 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0de3f8 '' 'const String::rep_t &'
| `-CompoundStmt 0x56545a0e0d18 <col:12>
|-CXXConstructorDecl 0x56545a0de498 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56545a0de498
| `-ParmVarDecl 0x56545a0de5a8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56545a0e3b00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56545a0ef518 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56545a0ef628 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56545a0efb40 <col:12>
|   |-BinaryOperator 0x56545a0ef958 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56545a0ef910 <col:12> 'const char *' lvalue ->data 0x56545a0d8050
|   | | `-CXXThisExpr 0x56545a0ef900 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56545a0ef940 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56545a0ef8d0 <col:12> 'const char *const' lvalue .data 0x56545a0d8050
|   |     `-DeclRefExpr 0x56545a0ef8b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0ef628 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56545a0efa20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56545a0ef9d8 <col:12> 'int' lvalue ->length 0x56545a0d80b8
|   | | `-CXXThisExpr 0x56545a0ef9c8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56545a0efa08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56545a0ef998 <col:12> 'const int' lvalue .length 0x56545a0d80b8
|   |     `-DeclRefExpr 0x56545a0ef978 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0ef628 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56545a0efae8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56545a0efaa0 <col:12> 'String::memo_t *' lvalue ->memo 0x56545a0d8148
|   | | `-CXXThisExpr 0x56545a0efa90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56545a0efad0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56545a0efa60 <col:12> 'String::memo_t *const' lvalue .memo 0x56545a0d8148
|   |     `-DeclRefExpr 0x56545a0efa40 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0ef628 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56545a0efb30 <col:12>
|     `-UnaryOperator 0x56545a0efb18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a0efb08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56545a0ef698 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56545a0ef698
  `-ParmVarDecl 0x56545a0ef7a8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a0cedd0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56545a0ceee8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56545a0cef78 <col:16, col:22> col:16 public
|-TypedefDecl 0x56545a0cefb8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x565459da3fd0 'const char *'
|   `-QualType 0x565459da3521 'const char' const
|     `-BuiltinType 0x565459da3520 'char'
|-TypedefDecl 0x56545a0cf040 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56545a0cf010 'String::const_iterator' sugar
|   |-Typedef 0x56545a0cefb8 'const_iterator'
|   `-PointerType 0x565459da3fd0 'const char *'
|     `-QualType 0x565459da3521 'const char' const
|       `-BuiltinType 0x565459da3520 'char'
|-TypedefDecl 0x56545a0cf1b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56545a0cf120 'int (String::*)() const'
|   |-RecordType 0x56545a0cee60 'String'
|   | `-CXXRecord 0x56545a0cedd0 'String'
|   `-ParenType 0x56545a0cf0c0 'int () const' sugar
|     `-FunctionProtoType 0x56545a0a3c60 'int () const' const cdecl
|       `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a0cf218 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x565459ef8840 'int64_t' sugar
|   |-Typedef 0x565459e0c390 'int64_t'
|   `-TypedefType 0x565459de5630 '__int64_t' sugar
|     |-Typedef 0x565459de5208 '__int64_t'
|     `-BuiltinType 0x565459da35a0 'long'
|-TypedefDecl 0x56545a0cf280 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x565459ef8760 'uint64_t' sugar
|   |-Typedef 0x565459e0c530 'uint64_t'
|   `-TypedefType 0x565459de56c0 '__uint64_t' sugar
|     |-Typedef 0x565459de5278 '__uint64_t'
|     `-BuiltinType 0x565459da3640 'unsigned long'
|-TypedefDecl 0x56545a0cf310 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56545a0cf2e0 'String::intmax_t' sugar
|   |-Typedef 0x56545a0cf218 'intmax_t'
|   `-TypedefType 0x565459ef8840 'int64_t' sugar
|     |-Typedef 0x565459e0c390 'int64_t'
|     `-TypedefType 0x565459de5630 '__int64_t' sugar
|       |-Typedef 0x565459de5208 '__int64_t'
|       `-BuiltinType 0x565459da35a0 'long'
|-TypedefDecl 0x56545a0cf3a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56545a0cf370 'String::uintmax_t' sugar
|   |-Typedef 0x56545a0cf280 'uintmax_t'
|   `-TypedefType 0x565459ef8760 'uint64_t' sugar
|     |-Typedef 0x565459e0c530 'uint64_t'
|     `-TypedefType 0x565459de56c0 '__uint64_t' sugar
|       |-Typedef 0x565459de5278 '__uint64_t'
|       `-BuiltinType 0x565459da3640 'unsigned long'
|-CXXConstructorDecl 0x56545a0cf460 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56545a0cf608 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56545a0cf548 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56545a0cf7b8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56545a0cf6f8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56545a0cf910 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56545a0cf880 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56545a0cfb28 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56545a0cf9d8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56545a0cfa58 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56545a0cfd48 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56545a0cfbf8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56545a0cfc78 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56545a0cff68 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56545a0cfe18 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56545a0cfe98 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56545a0d0188 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56545a0d0038 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56545a0d00b8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56545a0d0318 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56545a0d0250 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56545a0d0498 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56545a0d03d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56545a0d0628 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56545a0d0560 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56545a0d0780 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56545a0d06f0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56545a0d08d8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56545a0d0848 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56545a0d0a30 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56545a0d09a0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56545a0d0bb8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56545a0d0af8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56545a0d0d48 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56545a0d0c80 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56545a0d0ed8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56545a0d0e10 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56545a0d1068 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56545a0d0fa0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56545a0d1160 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56545a0d1288 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56545a0d1408 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56545a0d1340 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56545a0d1558 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56545a0d14c8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56545a0d1610 <col:63> "" ""
|-CXXMethodDecl 0x56545a0d1758 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56545a0d1698 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56545a0d1968 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56545a0d1818 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56545a0d1898 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56545a0d1b88 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56545a0d1a30 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56545a0d1ab0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56545a0d1e68 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56545a0d1c48 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56545a0d1cc8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56545a0ddcb0 <col:55> 'int' 10
| `-ParmVarDecl 0x56545a0d1d40 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56545a0ddcd0 <col:76> 'bool' true
|-CXXMethodDecl 0x56545a0d2148 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56545a0d1f30 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56545a0d1fb0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56545a0ddce0 <col:56> 'int' 10
| `-ParmVarDecl 0x56545a0d2028 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56545a0ddd00 <col:77> 'bool' true
|-CXXMethodDecl 0x56545a0d2250 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56545a0d2318 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56545a0d23e0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56545a0d2480 <col:20>
| `-OptimizeNoneAttr 0x56545a0d24d8 <col:30>
|-CXXConversionDecl 0x56545a0d25c8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56545a0d2698 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56545a0d2758 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56545a0d2848 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56545a0d2908 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56545a0d2a88 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56545a0d29c0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56545a0d2bd8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56545a0d2b48 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56545a0d2cc8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56545a0d2d88 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56545a0d2fd8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56545a0d2e40 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56545a0d2ec0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56545a0d3238 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56545a0d30a0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56545a0d3120 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56545a0d3308 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a0d3518 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56545a0d33c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56545a0d3440 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56545a0d3738 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56545a0d35e0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56545a0d3660 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56545a0d38c8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56545a0d3800 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56545a0d39b8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56545a0d3b28 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56545a0d3a68 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56545a0d3d38 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56545a0d3be8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56545a0d3c68 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56545a0d3f50 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56545a0d3df8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56545a0d3e70 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56545a0d40e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56545a0d4010 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56545a0d4300 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56545a0d41a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56545a0d4220 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56545a0d4450 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56545a0d43c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56545a0d4628 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56545a0d4510 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56545a0d4590 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56545a0d4778 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56545a0d46e8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56545a0d4990 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56545a0d4830 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56545a0d48b0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56545a0ddd10 <col:39> 'int' 0
|-CXXMethodDecl 0x56545a0d4bb0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56545a0d4a50 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56545a0d4ad0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56545a0ddd30 <col:48> 'int' 0
|-CXXMethodDecl 0x56545a0d4d90 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56545a0d4c70 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56545a0d4cf0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56545a0ddd50 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56545a0d4e60 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56545a0d4f20 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56545a0d4fe0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56545a0d50a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56545a0d5160 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56545a0d5308 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56545a0d5210 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56545a0d5488 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56545a0d53c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56545a0d5660 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56545a0d5548 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56545a0d57d8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56545a0d5718 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56545a0d5920 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56545a0d5890 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56545a0d5a70 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56545a0d59e0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56545a0d5c48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56545a0d5b30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56545a0d5bb0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56545a0d5e28 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56545a0d5d10 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56545a0d5d90 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56545a0d5f78 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56545a0d5ee8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56545a0d6188 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56545a0d6038 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56545a0d60b8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56545a0d62e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56545a0d6250 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56545a0d6440 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56545a0d63a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56545a0d64e8 <col:57> "" ""
|-CXXMethodDecl 0x56545a0d65f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56545a0d6568 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56545a0d6748 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56545a0d66b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56545a0d68c8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56545a0d6800 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56545a0d6990 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56545a0d6a50 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56545a0d6b10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56545a0d6bb0 <col:49> "" ""
|-CXXMethodDecl 0x56545a0d6c40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56545a0d6d00 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56545a0d6df0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56545a0d6eb8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56545a0d6f78 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56545a0d7038 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56545a0d7130 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56545a0d71f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56545a0d72c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56545a0d7498 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56545a0d7378 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56545a0d73f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56545a0d76c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56545a0d7560 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56545a0d75e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56545a0d77d0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56545a0d7838 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56545a0d7860 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56545a0d7978 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56545a0d7a18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56545a0d7a78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56545a0d7ad8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56545a0d7b88 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56545a0d7bf0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56545a0d7e28 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56545a0d7e78 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a0d7e08 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56545a0d7d18 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56545a0d7cc0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56545a0d7d00 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56545a0d7ce0 <col:32> 'int' 8
|-CXXRecordDecl 0x56545a0d7e90 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56545a0d7fa8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56545a0d8050 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56545a0d80b8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56545a0d8148 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56545a0de1e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56545a0de618 <col:12>
| |-CXXConstructorDecl 0x56545a0de2e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56545a0de3f8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56545a0d8050 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56545a0e0ba0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56545a0e0b70 <col:12> 'const char *const' lvalue .data 0x56545a0d8050
| | |     `-DeclRefExpr 0x56545a0e0b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0de3f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56545a0d80b8 'length' 'int'
| | | `-ImplicitCastExpr 0x56545a0e0c30 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56545a0e0c00 <col:12> 'const int' lvalue .length 0x56545a0d80b8
| | |     `-DeclRefExpr 0x56545a0e0be0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0de3f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56545a0d8148 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56545a0e0cc0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56545a0e0c90 <col:12> 'String::memo_t *const' lvalue .memo 0x56545a0d8148
| | |     `-DeclRefExpr 0x56545a0e0c70 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0de3f8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56545a0e0d18 <col:12>
| |-CXXConstructorDecl 0x56545a0de498 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56545a0de498
| | `-ParmVarDecl 0x56545a0de5a8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56545a0e3b00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56545a0ef518 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56545a0ef628 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56545a0efb40 <col:12>
| |   |-BinaryOperator 0x56545a0ef958 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56545a0ef910 <col:12> 'const char *' lvalue ->data 0x56545a0d8050
| |   | | `-CXXThisExpr 0x56545a0ef900 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56545a0ef940 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56545a0ef8d0 <col:12> 'const char *const' lvalue .data 0x56545a0d8050
| |   |     `-DeclRefExpr 0x56545a0ef8b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0ef628 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56545a0efa20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56545a0ef9d8 <col:12> 'int' lvalue ->length 0x56545a0d80b8
| |   | | `-CXXThisExpr 0x56545a0ef9c8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56545a0efa08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56545a0ef998 <col:12> 'const int' lvalue .length 0x56545a0d80b8
| |   |     `-DeclRefExpr 0x56545a0ef978 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0ef628 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56545a0efae8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56545a0efaa0 <col:12> 'String::memo_t *' lvalue ->memo 0x56545a0d8148
| |   | | `-CXXThisExpr 0x56545a0efa90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56545a0efad0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56545a0efa60 <col:12> 'String::memo_t *const' lvalue .memo 0x56545a0d8148
| |   |     `-DeclRefExpr 0x56545a0efa40 <col:12> 'const String::rep_t' lvalue ParmVar 0x56545a0ef628 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56545a0efb30 <col:12>
| |     `-UnaryOperator 0x56545a0efb18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56545a0efb08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56545a0ef698 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56545a0ef698
|   `-ParmVarDecl 0x56545a0ef7a8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56545a0d81c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56545a0d8408 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56545a0d8228 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56545a0d82a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56545a0d8320 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56545a0de1a0 <col:79, line:261:5>
|   |-BinaryOperator 0x56545a0dde18 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56545a0dddb0 <col:2, col:5> 'const char *' lvalue .data 0x56545a0d8050
|   | | `-MemberExpr 0x56545a0ddd80 <col:2> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|   | |   `-CXXThisExpr 0x56545a0ddd70 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56545a0dde00 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56545a0ddde0 <col:12> 'const char *' lvalue ParmVar 0x56545a0d8228 'data' 'const char *'
|   |-BinaryOperator 0x56545a0ddee0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56545a0dde78 <col:2, col:5> 'int' lvalue .length 0x56545a0d80b8
|   | | `-MemberExpr 0x56545a0dde48 <col:2> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|   | |   `-CXXThisExpr 0x56545a0dde38 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56545a0ddec8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56545a0ddea8 <col:14> 'int' lvalue ParmVar 0x56545a0d82a8 'length' 'int'
|   `-IfStmt 0x56545a0de188 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56545a0de000 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56545a0ddfe8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56545a0ddfc8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56545a0ddfa8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56545a0ddf40 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|     |       | `-MemberExpr 0x56545a0ddf10 <col:7> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|     |       |   `-CXXThisExpr 0x56545a0ddf00 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56545a0ddf90 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56545a0ddf70 <col:17> 'String::memo_t *' lvalue ParmVar 0x56545a0d8320 'memo' 'String::memo_t *'
|     `-CallExpr 0x56545a0de160 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56545a0de148 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56545a0de050 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56545a0c6e38 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56545a0de0b8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56545a0d7a18
|         `-ImplicitCastExpr 0x56545a0de0a0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56545a0de080 <col:27> 'String::memo_t *' lvalue ParmVar 0x56545a0d8320 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56545a0d86b8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56545a0d84d8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56545a0d8558 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56545a0d85d0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56545a0d81c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56545a0de628 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56545a0de7b8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56545a0de720 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56545a0de690 <col:2> '<bound member function type>' ->assign_memo 0x56545a0d8408
|     | `-ImplicitCastExpr 0x56545a0de758 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56545a0de680 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56545a0de770 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56545a0de6c0 <col:14> 'const char *' lvalue ParmVar 0x56545a0d84d8 'data' 'const char *'
|     |-ImplicitCastExpr 0x56545a0de788 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56545a0de6e0 <col:20> 'int' lvalue ParmVar 0x56545a0d8558 'length' 'int'
|     `-ImplicitCastExpr 0x56545a0de7a0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56545a0de700 <col:28> 'String::memo_t *' lvalue ParmVar 0x56545a0d85d0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56545a0d8848 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56545a0d8788 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56545a0dea10 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56545a0de990 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56545a0de7e0 <col:2> '<bound member function type>' ->assign_memo 0x56545a0d8408
|     | `-CXXThisExpr 0x56545a0de7d0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56545a0de9c8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56545a0de860 <col:14, col:19> 'const char *' lvalue .data 0x56545a0d8050
|     |   `-MemberExpr 0x56545a0de830 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56545a0d81c0
|     |     `-DeclRefExpr 0x56545a0de810 <col:14> 'const String' lvalue ParmVar 0x56545a0d8788 'x' 'const String &'
|     |-ImplicitCastExpr 0x56545a0de9e0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56545a0de8e0 <col:25, col:30> 'int' lvalue .length 0x56545a0d80b8
|     |   `-MemberExpr 0x56545a0de8b0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56545a0d81c0
|     |     `-DeclRefExpr 0x56545a0de890 <col:25> 'const String' lvalue ParmVar 0x56545a0d8788 'x' 'const String &'
|     `-ImplicitCastExpr 0x56545a0de9f8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56545a0de960 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|         `-MemberExpr 0x56545a0de930 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56545a0d81c0
|           `-DeclRefExpr 0x56545a0de910 <col:38> 'const String' lvalue ParmVar 0x56545a0d8788 'x' 'const String &'
|-CXXMethodDecl 0x56545a0d8910 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56545a0df3d0 <col:31, line:278:5>
|   `-IfStmt 0x56545a0df3b8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56545a0deab0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56545a0dea98 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56545a0dea68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|     |     `-MemberExpr 0x56545a0dea38 <col:6> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|     |       `-CXXThisExpr 0x56545a0dea28 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56545a0df390 <col:15, line:277:2>
|       |-ParenExpr 0x56545a0def60 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56545a0def30 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56545a0debc0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56545a0deba8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56545a0deb90 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56545a0deb50 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56545a0d7a18
|       |   |       `-ImplicitCastExpr 0x56545a0deb38 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56545a0deb08 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|       |   |           `-MemberExpr 0x56545a0dead8 <col:27> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|       |   |             `-CXXThisExpr 0x56545a0deac8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56545a0dec20 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56545a0dec00 <col:54> 'int' 0
|       |   `-CallExpr 0x56545a0dee90 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56545a0dee78 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56545a0dedf8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56545a0deed0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56545a0ded08 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56545a0deee8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56545a0ded38 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56545a0def00 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56545a0ded70 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56545a0def18 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56545a0dede0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56545a0dedc8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56545a0ded90 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56545a0df2b0 <line:274:6, line:275:22>
|       | |-CallExpr 0x56545a0df170 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56545a0df158 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56545a0df0d0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56545a0c8280 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56545a0df0a0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56545a0d7a18
|       | |   `-ImplicitCastExpr 0x56545a0df088 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56545a0df058 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|       | |       `-MemberExpr 0x56545a0df028 <col:40> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|       | |         `-CXXThisExpr 0x56545a0df018 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56545a0df270 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56545a0df258 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56545a0df198 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56545a0dd0f0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56545a0df298 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56545a0df1f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|       |       `-MemberExpr 0x56545a0df1c8 <col:15> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|       |         `-CXXThisExpr 0x56545a0df1b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56545a0df370 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56545a0df308 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56545a0d8148
|         | `-MemberExpr 0x56545a0df2d8 <col:6> 'String::rep_t' lvalue ->_r 0x56545a0d81c0
|         |   `-CXXThisExpr 0x56545a0df2c8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56545a0df358 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56545a0df338 <col:16> 'int' 0
|-CXXMethodDecl 0x56545a0d8ba8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56545a0d89c8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56545a0d8a48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56545a0d8ac0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56545a0d8c80 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56545a0d8ed0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56545a0d8d38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56545a0d8db8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56545a0d8e30 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56545a0d90b8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56545a0d8fa0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56545a0d9020 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56545a0d91b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56545a0df4a8 <col:41, line:286:5>
|   `-ReturnStmt 0x56545a0df498 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56545a0df468 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56545a0df430 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56545a0df418 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56545a0df3f8 <col:46> 'int' 1
|-CXXMethodDecl 0x56545a0d9458 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56545a0d9270 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56545a0d92f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56545a0d9370 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56545a0dd0f0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56545a0d9520 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56545a0dd1c0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56545a0dd390 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56545a0dd278 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56545a0dd2f8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56545a0dd450 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56545a0dd518 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56545a0dd618 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56545a0dd690 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56545a0dd708 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56545a0dd770 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56545a0dd870 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56545a0dd8c0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a0dd850 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56545a0dd830 <col:22> 'int' 14
|-CXXMethodDecl 0x56545a0ddad8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56545a0dd8f0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56545a0dd970 <col:38> col:41 'int'
| `-ParmVarDecl 0x56545a0dd9f0 <col:43> col:46 'int'
|-FriendDecl 0x56545a0ddbe0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56545a0ddc70 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56545a1a0970 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56545a1a0b48 prev 0x56545a1a0970 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56545a1a0bd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56545a1a0c00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a1a2560 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56545a1a2510 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56545a1a24f0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56545a1a0e18 'type'
|     `-SubstTemplateTypeParmType 0x56545a1a0de0 'String' sugar
|       |-TemplateTypeParmType 0x56545a093680 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a093630 'T'
|       `-RecordType 0x56545a0cee60 'String'
|         `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a1a2618 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56545a1a25e0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56545a1a25c0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56545a1a2560 'type'
|     `-ElaboratedType 0x56545a1a2510 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56545a1a24f0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56545a1a0e18 'type'
|         `-SubstTemplateTypeParmType 0x56545a1a0de0 'String' sugar
|           |-TemplateTypeParmType 0x56545a093680 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56545a093630 'T'
|           `-RecordType 0x56545a0cee60 'String'
|             `-CXXRecord 0x56545a0cedd0 'String'
|-CXXMethodDecl 0x56545a1a2798 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56545a1a26a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56545a1a2888 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56545a1a2968 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56545a1a2968
|-CXXMethodDecl 0x56545a1a2c38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56545a1a2b40 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56545a1a2e78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56545a1a2cf0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56545a1a2d68 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a1a3048 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56545a1a2f38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56545a1a2fb0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a1a31a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56545a34d2d0 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56545a34d518 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56545a34d390 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56545a34d408 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a34d778 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56545a34d5e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56545a34d660 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a34d938 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56545a34d848 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a34daf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56545a34da00 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a34dbb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56545a34dc60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56545a34de98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56545a34dd10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56545a34dd88 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56545a34e138 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56545a34e040 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56545a34e200 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56545a34e250 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56545a34e2a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56545a307610 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56545a19f3d8 prev 0x56545a307610 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56545a1a08e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56545a1a0890 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56545a1a0870 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56545a1a0720 'type'
|     `-SubstTemplateTypeParmType 0x56545a1a05b0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56545a069430 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56545a0693d8 'F'
|       `-RecordType 0x56545a1a0210 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56545a1a0130 'typed_array_memory'
|-FieldDecl 0x56545a34e2f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56545a34e340 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56545a34e378 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|   |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56545a0a0948 'T'
|   `-RecordType 0x56545a0cee60 'String'
|     `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34e408 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56545a34e3d0 'String &'
|   `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|     |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56545a0a0948 'T'
|     `-RecordType 0x56545a0cee60 'String'
|       `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34e498 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56545a34e460 'const String &'
|   `-QualType 0x56545a19f471 'const String' const
|     `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-RecordType 0x56545a0cee60 'String'
|         `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34e528 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56545a34e4f0 'String *'
|   `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|     |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56545a0a0948 'T'
|     `-RecordType 0x56545a0cee60 'String'
|       `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34e5b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56545a34e580 'const String *'
|   `-QualType 0x56545a19f471 'const String' const
|     `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-RecordType 0x56545a0cee60 'String'
|         `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34f210 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56545a34f1c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56545a34f1a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56545a34f0d8 'type'
|     `-LValueReferenceType 0x56545a34f0a0 'const String &'
|       `-QualType 0x56545a34ee41 'const String' const
|         `-SubstTemplateTypeParmType 0x56545a34ee40 'String' sugar
|           |-TemplateTypeParmType 0x56545a073380 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56545a073328 'T'
|           `-RecordType 0x56545a0cee60 'String'
|             `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34f278 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56545a34e460 'const String &'
|   `-QualType 0x56545a19f471 'const String' const
|     `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-RecordType 0x56545a0cee60 'String'
|         `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34f2d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a34f338 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56545a34e4f0 'String *'
|   `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|     |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56545a0a0948 'T'
|     `-RecordType 0x56545a0cee60 'String'
|       `-CXXRecord 0x56545a0cedd0 'String'
|-TypedefDecl 0x56545a34f3a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56545a34e580 'const String *'
|   `-QualType 0x56545a19f471 'const String' const
|     `-SubstTemplateTypeParmType 0x56545a19f470 'String' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-RecordType 0x56545a0cee60 'String'
|         `-CXXRecord 0x56545a0cedd0 'String'
|-EnumDecl 0x56545a34f3f8 <line:134:5> col:5
| `-EnumConstantDecl 0x56545a34f4f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56545a34f4d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56545a0a2028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56545a0a2000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56545a0a1fe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56545a34f578 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56545a34f808 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a34f630 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56545a34f6d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56545a34fa98 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56545a34f980 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56545a34fd58 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56545a34fc40 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56545a350070 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56545a34ff50 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56545a350380 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56545a350260 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56545a350670 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a3504b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56545a350530 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56545a350798 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56545a350848 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a3508a0 <col:30> Inherited
|-CXXMethodDecl 0x56545a3508e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56545a350998 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a3509f0 <col:30> Inherited
|-CXXMethodDecl 0x56545a350ab8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56545a350b68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a350bc0 <col:30> Inherited
|-CXXMethodDecl 0x56545a350c08 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56545a350cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a350d10 <col:30> Inherited
|-CXXMethodDecl 0x56545a350d58 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56545a350e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a350e60 <col:30> Inherited
|-CXXMethodDecl 0x56545a350ea8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56545a350f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a350fb0 <col:30> Inherited
|-CXXMethodDecl 0x56545a350fd8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56545a351088 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56545a351138 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56545a3512f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a3511e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56545a351260 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56545a351448 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56545a3513b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a3515f8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56545a351500 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56545a3516b0 <col:20>
| `-OptimizeNoneAttr 0x56545a351708 <col:30>
|-CXXMethodDecl 0x56545a351828 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56545a351730 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56545a3518e0 <col:20>
| `-OptimizeNoneAttr 0x56545a351938 <col:30>
|-CXXMethodDecl 0x56545a3519f0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56545a351960 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a351b38 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56545a351aa8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a351c68 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56545a351d68 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56545a351e38 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56545a351f08 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56545a352048 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56545a351fb8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a352190 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56545a352100 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a3522d8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56545a352248 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56545a352390 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56545a352490 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56545a352400 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56545a352548 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56545a352608 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56545a352708 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56545a352888 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56545a3527c8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56545a353048 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56545a352940 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56545a352fa8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56545a352ea8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56545a353128 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56545a353278 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56545a3531e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56545a353330 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56545a353578 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a3533f0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56545a353468 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56545a353708 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56545a353648 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56545a353918 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56545a3537d0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56545a353848 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56545a3539d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56545a353c38 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56545a353b40 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56545a353d08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56545a353d08

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a3d54d8 prev 0x56545a2851b8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56545a3d55d0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56545a3d5660 <col:22, col:28> col:22 public
|-EnumDecl 0x56545a3d5688 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56545a3d57a8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5788 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56545a3d5770 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56545a3d5750 <col:14> 'int' 999
| |-EnumConstantDecl 0x56545a3d5850 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5830 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56545a3d5818 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56545a3d57f8 <col:14> 'int' 1
| |-EnumConstantDecl 0x56545a3d58e0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d58c0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56545a3d58a0 <col:17> 'int' 0
| |-EnumConstantDecl 0x56545a3d5970 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5950 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56545a3d5930 <col:13> 'int' 1
| |-EnumConstantDecl 0x56545a3d5a00 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d59e0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56545a3d59c0 <col:16> 'int' 2
| |-EnumConstantDecl 0x56545a3d5a90 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5a70 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56545a3d5a50 <col:13> 'int' 3
| |-EnumConstantDecl 0x56545a3d5b20 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5b00 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56545a3d5ae0 <col:15> 'int' 4
| |-EnumConstantDecl 0x56545a3d5bb0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5b90 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56545a3d5b70 <col:14> 'int' 5
| |-EnumConstantDecl 0x56545a3d5c40 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56545a3d5c20 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56545a3d5c00 <col:12> 'int' 6
| `-EnumConstantDecl 0x56545a3d5cd0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56545a3d5cb0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56545a3d5c90 <col:13> 'int' 7
|-VarDecl 0x56545a3d5d40 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56545a3d5dc8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56545a3d5e50 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56545a3d5ed8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56545a3d5f60 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56545a3d5fe8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56545a3d6070 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56545a3d60f8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56545a3d6180 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56545a3d6208 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56545a3d6290 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56545a3d6390 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56545a3db688 '_nerrors' 'int'
| | `-IntegerLiteral 0x56545a3dbe18 <line:128:13> 'int' 0
| `-CompoundStmt 0x56545a3dbe88 <col:16, line:129:5>
|-CXXDestructorDecl 0x56545a3d6480 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56545a3dbe98 <col:29, line:132:5>
|-CXXMethodDecl 0x56545a3d6638 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56545a3d6570 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56545a3d6700 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56545a3d67e8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56545a3dbef0 <col:44, line:161:5>
|   `-ReturnStmt 0x56545a3dbee0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56545a3dbec8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56545a3dbea8 <col:9> 'ErrorHandler *' lvalue Var 0x56545a3db6e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56545a3d6928 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56545a3d6898 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56545a3d69f0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56545a3dbf50 <col:43, line:173:5>
|   `-ReturnStmt 0x56545a3dbf40 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56545a3dbf28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56545a3dbf08 <col:9> 'ErrorHandler *' lvalue Var 0x56545a3db760 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56545a3d6aa8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56545a3d6b28 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56545a3d6c38 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56545a3d6ba8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d6d88 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56545a3d6cf8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d6ee0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56545a3d6e48 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7038 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x56545a3d6fa0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7190 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56545a3d70f8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d73a0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56545a3d7248 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56545a3d72c8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7578 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56545a3d7460 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56545a3d74e0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7798 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56545a3d7638 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56545a3d76b8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7978 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56545a3d7858 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56545a3d78d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7b58 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56545a3d7a38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56545a3d7ab8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d7ce0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56545a3d7c18 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56545a3d7eb0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56545a3d7d98 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56545a3d7e10 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56545a3dc1a8 <col:57, line:234:5>
|   `-ReturnStmt 0x56545a3dc198 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56545a3dc180 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56545a3dc128 <col:9, col:41> 'int'
|         |-MemberExpr 0x56545a3dc0f8 <col:9> '<bound member function type>' ->xmessage 0x56545a3d7ce0
|         | `-CXXThisExpr 0x56545a3dc0e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56545a3dc168 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56545a3dc150 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56545a3dc0c8 <col:18, col:40> 'String' (CXXTemporary 0x56545a3dc0c8)
|               `-CallExpr 0x56545a3dc090 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56545a3dc078 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56545a3dbff0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56545a3d9ea8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56545a3dc010 <col:31> 'const String' lvalue ParmVar 0x56545a3d7e10 'str' 'const String &'
|                 `-DeclRefExpr 0x56545a3dc030 <col:36> 'const String' lvalue ParmVar 0x56545a3d7d98 'anno' 'const String &'
|-CXXMethodDecl 0x56545a3d8190 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56545a3d7f70 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56545a3d7ff0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56545a3d8068 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56545a3dc438 <col:68, line:243:5>
|   `-ReturnStmt 0x56545a3dc428 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56545a3dc410 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56545a3dc3b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56545a3dc380 <col:9> '<bound member function type>' ->xmessage 0x56545a3d7eb0
|         | `-CXXThisExpr 0x56545a3dc370 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56545a3dc248 <col:18> 'const String' lvalue ParmVar 0x56545a3d7f70 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56545a3dc3f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56545a3dc3e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56545a3dc350 <col:24, col:40> 'String' (CXXTemporary 0x56545a3dc350)
|               `-CXXMemberCallExpr 0x56545a3dc2e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56545a3dc278 <col:24> '<bound member function type>' ->vformat 0x56545a3d9370
|                 | `-CXXThisExpr 0x56545a3dc268 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56545a3dc318 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56545a3dc2a8 <col:32> 'const char *' lvalue ParmVar 0x56545a3d7ff0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56545a3dc330 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56545a3dc2c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56545a3d8068 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56545a3d8430 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56545a3d8258 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56545a3d82d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56545a3d8348 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56545a3dc778 <col:23, line:254:5>
|   `-ReturnStmt 0x56545a3dc768 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56545a3dc750 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56545a3dc6f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x56545a3dc6c0 <col:9> '<bound member function type>' ->xmessage 0x56545a3d7eb0
|         | `-CXXThisExpr 0x56545a3dc6b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56545a3dc738 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56545a3dc720 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56545a3dc670 <col:18, col:65> 'String' (CXXTemporary 0x56545a3dc670)
|         |     `-CallExpr 0x56545a3dc608 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56545a3dc5f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56545a3dc4d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56545a3d9ea8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56545a3dc4f8 <col:31> 'const String' lvalue ParmVar 0x56545a3d82d0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56545a3dc650 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56545a3dc638 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56545a3dc5d0 <col:37, col:64> 'String' (CXXTemporary 0x56545a3dc5d0)
|         |             `-CallExpr 0x56545a3dc5a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56545a3dc588 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56545a3dc518 <col:37> 'String (const String &)' lvalue CXXMethod 0x56545a3da4f8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56545a3dc538 <col:56> 'const String' lvalue ParmVar 0x56545a3d8258 'landmark' 'const String &'
|         `-DeclRefExpr 0x56545a3dc690 <col:68> 'const String' lvalue ParmVar 0x56545a3d8348 'str' 'const String &'
|-CXXMethodDecl 0x56545a3d87b0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56545a3d84f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56545a3d8570 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56545a3d85f0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56545a3d8668 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56545a3dca30 <col:34, line:267:5>
|   `-ReturnStmt 0x56545a3dca20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56545a3dca08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56545a3dc9a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x56545a3dc970 <col:9> '<bound member function type>' ->xmessage 0x56545a3d8430
|         | `-CXXThisExpr 0x56545a3dc960 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56545a3dc818 <col:18> 'const String' lvalue ParmVar 0x56545a3d84f8 'landmark' 'const String &'
|         |-DeclRefExpr 0x56545a3dc838 <col:28> 'const String' lvalue ParmVar 0x56545a3d8570 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56545a3dc9f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56545a3dc9d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56545a3dc940 <col:34, col:50> 'String' (CXXTemporary 0x56545a3dc940)
|               `-CXXMemberCallExpr 0x56545a3dc8d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56545a3dc868 <col:34> '<bound member function type>' ->vformat 0x56545a3d9370
|                 | `-CXXThisExpr 0x56545a3dc858 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56545a3dc908 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56545a3dc898 <col:42> 'const char *' lvalue ParmVar 0x56545a3d85f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56545a3dc920 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56545a3dc8b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56545a3d8668 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56545a3d88c0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56545a3dcab0 <col:25, line:288:5>
|   `-ReturnStmt 0x56545a3dcaa0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56545a3dca88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56545a3dca58 <col:9> 'const int' lvalue ->_nerrors 0x56545a3db688
|         `-CXXThisExpr 0x56545a3dca48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56545a3d8ad0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56545a3d8978 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56545a3d89f8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d8db8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56545a3d8b98 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56545a3d8c18 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56545a3d8c90 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56545a3d8f50 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56545a3d8e88 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d9198 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56545a3d9010 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56545a3d9088 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56545a3dcd10 <col:58, line:357:5>
|   `-ReturnStmt 0x56545a3dcd00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56545a3dcce8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56545a3dccb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56545a3dcca0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56545a3dcc80 <col:9, col:29> 'String' (CXXTemporary 0x56545a3dcc80)
|             `-CallExpr 0x56545a3dcc10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56545a3dcbf8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56545a3dcb78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56545a3d8db8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56545a3dcb18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56545a3dcc48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56545a3dcb38 <col:21> 'const char *' lvalue ParmVar 0x56545a3d9010 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56545a3dcc60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56545a3dcb58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56545a3d9088 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56545a3d9370 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56545a3d9260 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56545a3d92d8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56545a3d94c8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56545a3d9438 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56545a3d9610 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56545a3d9580 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56545a3d98b0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56545a3d96c8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56545a3d9748 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56545a3d97c0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56545a3d9a10 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56545a3d9980 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56545a3dce28 <col:37, line:441:5>
|   `-IfStmt 0x56545a3dce10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56545a3dcd98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56545a3dcd68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56545a3dcd28 <col:6> 'int' lvalue ParmVar 0x56545a3d9980 'level' 'int'
|     | `-ImplicitCastExpr 0x56545a3dcd80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56545a3dcd48 <col:15> 'ErrorHandler::Level' EnumConstant 0x56545a3d5a90 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56545a3dcdf8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56545a3dcdc8 <col:8> 'int' lvalue ->_nerrors 0x56545a3db688
|         `-CXXThisExpr 0x56545a3dcdb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56545a3d9ad8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56545a3dcec0 <col:26, line:448:5>
|   `-BinaryOperator 0x56545a3dcea0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56545a3dce50 <col:2> 'int' lvalue ->_nerrors 0x56545a3db688
|     | `-CXXThisExpr 0x56545a3dce40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56545a3dce80 <col:13> 'int' 0
|-CXXMethodDecl 0x56545a3d9ca0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56545a3d9b90 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56545a3d9c08 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56545a3d9ea8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56545a3d9d60 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56545a3d9dd8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56545a3da158 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56545a3d9f68 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56545a3d9fe8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56545a3da068 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56545a3da210 <col:59> 0 0
|-CXXMethodDecl 0x56545a3da3a8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56545a3da288 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56545a3da308 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56545a3dd530 <col:70, line:534:5>
|   |-DeclStmt 0x56545a3dd030 <line:528:2, col:20>
|   | |-VarDecl 0x56545a3dcee8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56545a3dcf50 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56545a3dcf88 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56545a3dcff0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56545a3dd100 <line:529:2, col:23>
|   | `-VarDecl 0x56545a3dd060 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56545a3dd0e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56545a3dd0c8 <col:18> 'const char *' lvalue ParmVar 0x56545a3da288 'begin' 'const char *'
|   |-DoStmt 0x56545a3dd4c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56545a3dd3f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56545a3dd3e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56545a3dd3c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56545a3dd118 <col:6> 'const char *' lvalue Var 0x56545a3dd060 'x' 'const char *'
|   | |     `-CallExpr 0x56545a3dd310 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56545a3dd2f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56545a3dd2b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56545a3dbb60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56545a3dd378 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56545a3dd360 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56545a3dd1d0 <col:20, col:27> 'String' (CXXTemporary 0x56545a3dd1d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x56545a3dd198 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56545a3dd390 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56545a3dd1f0 <col:30> 'const char *' lvalue Var 0x56545a3dd060 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56545a3dd3a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56545a3dd210 <col:33> 'const char *' lvalue ParmVar 0x56545a3da308 'end' 'const char *'
|   | |       |-UnaryOperator 0x56545a3dd250 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56545a3dd230 <col:39> 'String' lvalue Var 0x56545a3dcee8 'name' 'String'
|   | |       |-UnaryOperator 0x56545a3dd288 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56545a3dd268 <col:46> 'String' lvalue Var 0x56545a3dcf88 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56545a3dd2a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56545a3dd4b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56545a3dd498 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56545a3dd478 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56545a3dd448 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|   |         `-ImplicitCastExpr 0x56545a3dd430 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56545a3dd410 <col:11> 'String' lvalue Var 0x56545a3dcee8 'name' 'String'
|   `-ReturnStmt 0x56545a3dd520 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56545a3dd508 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56545a3dd4e8 <col:9> 'const char *' lvalue Var 0x56545a3dd060 'x' 'const char *'
|-CXXMethodDecl 0x56545a3da4f8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56545a3da468 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56545a3ddb38 <col:55, line:550:5>
|   `-IfStmt 0x56545a3ddb10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56545a3dd770 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56545a3dd758 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56545a3dd740 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56545a3dd720 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56545a3dd6f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|     | |       `-DeclRefExpr 0x56545a3dd590 <col:6> 'const String' lvalue ParmVar 0x56545a3da468 'x' 'const String &'
|     | `-BinaryOperator 0x56545a3dd6d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56545a3dd6a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56545a3dd650 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56545a3dd638 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56545a3dd5f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56545a0ebe00 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56545a3dd5b0 <col:11> 'const String' lvalue ParmVar 0x56545a3da468 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56545a3dd5d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56545a3dd6b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56545a3dd688 <col:19> 'char' 123
|     |-ReturnStmt 0x56545a3dd7e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56545a3dd7b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56545a3dd790 <col:13> 'const String' lvalue ParmVar 0x56545a3da468 'x' 'const String &'
|     `-IfStmt 0x56545a3ddae8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56545a3dd878 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56545a3dd860 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56545a3dd840 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56545a3dd810 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |       `-DeclRefExpr 0x56545a3dd7f0 <col:11> 'const String' lvalue ParmVar 0x56545a3da468 'x' 'const String &'
|       |-ReturnStmt 0x56545a3dda00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56545a3dd9e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56545a3dd9b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56545a3dd9a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56545a3dd980 <col:13, col:29> 'String' (CXXTemporary 0x56545a3dd980)
|       |         `-CallExpr 0x56545a3dd930 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56545a3dd918 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56545a3dd890 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56545a3d9ca0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56545a3dd960 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56545a3dd8b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56545a3dd8d0 <col:28> 'const String' lvalue ParmVar 0x56545a3da468 'x' 'const String &'
|       `-ReturnStmt 0x56545a3ddad8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56545a3ddac0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56545a3dda90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56545a3dda78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56545a3dda58 <col:13, col:20> 'String' (CXXTemporary 0x56545a3dda58)
|                 `-CXXTemporaryObjectExpr 0x56545a3dda20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56545a3da6c0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56545a3da5b0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56545a3da628 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56545a3dbe08 <col:71> 'bool' false
|-CXXRecordDecl 0x56545a3da770 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56545a3daa68 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56545a3daa00 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56545a3da9a0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56545a3da960 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56545a0cee60 'String'
|       | `-CXXRecord 0x56545a0cedd0 'String'
|       |-BuiltinType 0x565459da3580 'int'
|       `-DecayedType 0x56545a286200 '__va_list_tag *' sugar
|         |-TypedefType 0x56545a2861d0 'va_list' sugar
|         | |-Typedef 0x565459fc0f20 'va_list'
|         | `-TypedefType 0x565459fc0ed0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x565459ef8af8 '__gnuc_va_list'
|         |   `-TypedefType 0x565459ef8a60 '__builtin_va_list' sugar
|         |     |-Typedef 0x565459de4d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x565459de4ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x565459da42d0 '__va_list_tag'
|         |         `-CXXRecord 0x565459da4238 '__va_list_tag'
|         `-PointerType 0x565459fc67c0 '__va_list_tag *'
|           `-RecordType 0x565459da42d0 '__va_list_tag'
|             `-CXXRecord 0x565459da4238 '__va_list_tag'
|-EnumDecl 0x56545a3daac0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56545a3dabc0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db130 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3daba0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56545a3dab80 <col:16> 'int' 1
| |-EnumConstantDecl 0x56545a3dac50 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db148 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3dac30 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56545a3dac10 <col:21> 'int' 2
| |-EnumConstantDecl 0x56545a3dace0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db160 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3dacc0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56545a3daca0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56545a3dad70 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db178 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3dad50 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56545a3dad30 <col:17> 'int' 8
| |-EnumConstantDecl 0x56545a3dae00 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db190 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3dade0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56545a3dadc0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56545a3daea0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db1a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3dae80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56545a3dae60 <col:19> 'int' 32
| |-EnumConstantDecl 0x56545a3daf30 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db1c0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3daf10 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56545a3daef0 <col:17> 'int' 64
| |-EnumConstantDecl 0x56545a3dafc0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db1d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3dafa0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56545a3daf80 <col:14> 'int' 128
| |-EnumConstantDecl 0x56545a3db050 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56545a3db1f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3db030 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56545a3db010 <col:16> 'int' 256
| `-EnumConstantDecl 0x56545a3db0e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56545a3db208 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a3db0c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56545a3db0a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56545a3db418 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56545a3db230 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56545a3db2d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56545a3db5a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56545a3db4d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56545a3db648 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56545a3db688 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56545a3db6e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56545a3db760 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56545a3dbb60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56545a3db7d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56545a3db858 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56545a3db8d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56545a3db950 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56545a3db9c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56545a3dba40 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56545a3dbc88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56545a3dbc88
| `-ParmVarDecl 0x56545a3dbd98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56545a3dde98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56545a3dde98
  `-ParmVarDecl 0x56545a3ddfa8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a285248 prev 0x56545a2ca0b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a285340 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56545a2853d0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56545a285508 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56545a285408 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56545a286930 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a286910 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56545a2864a8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56545a2869c0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56545a286980 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56545a285408 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56545a286510 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56545a286a40 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a286a00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56545a286570 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56545a286a80 <col:54> 'bool' false
| `-CompoundStmt 0x56545a286b88 <col:61, line:38:5>
|   `-BinaryOperator 0x56545a286b68 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56545a286b00 <col:9> 'const Element *' lvalue ->_context 0x56545a286448
|     | `-CXXThisExpr 0x56545a286af0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56545a286b50 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56545a286b30 <col:20> 'int' 0
|-CXXConstructorDecl 0x56545a285718 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a2855c8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56545a285640 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56545a286968 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a286948 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56545a286448 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56545a286be0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56545a286ba0 <col:20> 'const Element *' lvalue ParmVar 0x56545a2855c8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56545a2864a8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56545a286c60 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56545a286c20 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56545a285640 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56545a286510 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56545a286ce0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56545a286ca0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56545a286570 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56545a286d20 <col:73> 'bool' false
| `-CompoundStmt 0x56545a286d98 <col:80, line:46:5>
|-CXXMethodDecl 0x56545a285848 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56545a286e10 <col:36, line:51:5>
|   `-ReturnStmt 0x56545a286e00 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56545a286de8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56545a286db8 <col:16> 'const Element *const' lvalue ->_context 0x56545a286448
|         `-CXXThisExpr 0x56545a286da8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56545a285938 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56545a286e90 <col:32, line:57:5>
|   `-ReturnStmt 0x56545a286e80 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56545a286e68 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56545a286e38 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56545a2864a8
|         `-CXXThisExpr 0x56545a286e28 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56545a2859f8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56545a285b80 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56545a285ab0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56545a285cd0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56545a285c40 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56545a285e20 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56545a285d90 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56545a286028 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56545a285ed8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56545a285f50 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56545a286358 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56545a2860e8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56545a286168 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56545a286230 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56545a286410 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56545a286448 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56545a2864a8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56545a286510 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56545a286570 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56545a2865c0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56545a2865c0
| `-ParmVarDecl 0x56545a2866d8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56545a286778 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56545a286778
| `-ParmVarDecl 0x56545a286888 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56545a3e77c8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56545a391d60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56545a391f38 prev 0x56545a391d60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56545a391fc8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56545a391ff0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a393bc0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56545a393b70 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56545a3924a0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56545a3923a0 'type'
|     `-TemplateSpecializationType 0x56545a392330 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56545a392210 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56545a3921f0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56545a3921d0 <col:24> 'unsigned long' 4
|       `-RecordType 0x56545a392310 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56545a392230 'char_array'
|-TypedefDecl 0x56545a393c78 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56545a393c40 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56545a393c20 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56545a393bc0 'type'
|     `-ElaboratedType 0x56545a393b70 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56545a3924a0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56545a3923a0 'type'
|         `-TemplateSpecializationType 0x56545a392330 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56545a392210 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56545a3921f0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56545a3921d0 <col:24> 'unsigned long' 4
|           `-RecordType 0x56545a392310 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56545a392230 'char_array'
|-CXXMethodDecl 0x56545a393df8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56545a393d08 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56545a393ee8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56545a393fc8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56545a394298 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56545a3941a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56545a3944d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56545a394350 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56545a3943c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a3946a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56545a394598 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56545a394610 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a394808 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56545a3948d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56545a394b28 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56545a394998 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56545a394a10 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a394d88 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56545a394bf8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56545a394c70 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a394f48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56545a394e58 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a395108 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56545a395010 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a3951c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56545a395270 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56545a39c868 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56545a395320 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56545a39c750 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56545a39cb08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56545a39ca10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56545a39cbd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56545a39cc20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56545a39cc70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56545a390768 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56545a390978 prev 0x56545a390768 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56545a391cd0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56545a391c80 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56545a391c60 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56545a391b10 'type'
|     `-SubstTemplateTypeParmType 0x56545a391930 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56545a068cb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a068c58 'T'
|       `-RecordType 0x56545a391480 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56545a391398 'sized_array_memory'
|-FieldDecl 0x56545a39ccc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56545a39cd10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56545a39cd48 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|   |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56545a0a0948 'T'
|   `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39cdd8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56545a39cda0 'int &'
|   `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|     |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56545a0a0948 'T'
|     `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39ce98 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56545a39ce60 'const int &'
|   `-QualType 0x56545a390a11 'const int' const
|     `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39cf28 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56545a39cef0 'int *'
|   `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|     |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56545a0a0948 'T'
|     `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39cfb8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56545a39cf80 'const int *'
|   `-QualType 0x56545a390a11 'const int' const
|     `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39dba0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56545a39db50 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56545a39db30 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56545a39dac0 'type'
|     `-SubstTemplateTypeParmType 0x56545a39d880 'int' sugar
|       |-TemplateTypeParmType 0x56545a073ab0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a073a60 'T'
|       `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39dc08 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56545a39ce60 'const int &'
|   `-QualType 0x56545a390a11 'const int' const
|     `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39dc60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39dcc8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56545a39cef0 'int *'
|   `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|     |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56545a0a0948 'T'
|     `-BuiltinType 0x565459da3580 'int'
|-TypedefDecl 0x56545a39dd30 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56545a39cf80 'const int *'
|   `-QualType 0x56545a390a11 'const int' const
|     `-SubstTemplateTypeParmType 0x56545a390a10 'int' sugar
|       |-TemplateTypeParmType 0x56545a0a09a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56545a0a0948 'T'
|       `-BuiltinType 0x565459da3580 'int'
|-EnumDecl 0x56545a39dd88 <line:134:5> col:5
| `-EnumConstantDecl 0x56545a39de80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56545a39de60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56545a0a2028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56545a0a2000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56545a0a1fe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56545a39df08 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56545a39e158 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a39dfc0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56545a39e060 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56545a39e418 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56545a39e300 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56545a39e6d8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56545a39e5c0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56545a39ea20 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56545a39e900 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56545a39ed30 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56545a39ec10 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56545a39f020 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a39ee68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56545a39eee0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56545a39f148 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56545a39f228 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a39f280 <col:30> Inherited
|-CXXMethodDecl 0x56545a39f2c8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56545a39f378 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a39f3d0 <col:30> Inherited
|-CXXMethodDecl 0x56545a39f498 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56545a39f548 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a39f5a0 <col:30> Inherited
|-CXXMethodDecl 0x56545a39f5e8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56545a39f698 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a39f6f0 <col:30> Inherited
|-CXXMethodDecl 0x56545a39f738 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56545a39f7e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a39f840 <col:30> Inherited
|-CXXMethodDecl 0x56545a39f888 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56545a39f938 <col:20> Inherited
| `-OptimizeNoneAttr 0x56545a39f990 <col:30> Inherited
|-CXXMethodDecl 0x56545a39f9b8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56545a39fa68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56545a39fb18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56545a39fcd8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a39fbc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56545a39fc40 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56545a39fe28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56545a39fd98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a39ffd8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56545a39fee0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56545a3a0090 <col:20>
| `-OptimizeNoneAttr 0x56545a3a00e8 <col:30>
|-CXXMethodDecl 0x56545a3a0208 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56545a3a0110 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56545a3a02c0 <col:20>
| `-OptimizeNoneAttr 0x56545a3a0318 <col:30>
|-CXXMethodDecl 0x56545a3a03d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56545a3a0340 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a3a0518 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56545a3a0488 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a3a0648 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56545a3a0778 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56545a3a0848 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56545a3a0918 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56545a3a0a58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56545a3a09c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a3a0ba0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56545a3a0b10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56545a3a0ce8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56545a3a0c58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56545a3a0da0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56545a3a0ea0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56545a3a0e10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56545a3a0f58 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56545a3a1018 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56545a3a1118 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56545a3a1298 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56545a3a11d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56545a3a1a58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56545a3a1350 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56545a3a19b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56545a3a18b8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56545a3a1b38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56545a3a1c88 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56545a3a1bf8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56545a3a1d40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56545a3a1f88 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56545a3a1e00 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56545a3a1e78 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56545a3a2148 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56545a3a2058 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56545a3a2398 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56545a3a2210 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56545a3a2288 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56545a3a2458 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56545a3a26b8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56545a3a25c0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56545a3a2788 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a38e8d8 prev 0x56545a370558 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56545a38e9d0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56545a38eac0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56545a3b4560 <col:16, line:828:9>
|-CXXDestructorDecl 0x56545a38ebb0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56545a3b4570 <col:25, line:830:9>
|-CXXMethodDecl 0x56545a38ecb0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56545a38ed60 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56545a38ee08 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56545a38ee08
| `-ParmVarDecl 0x56545a38ef18 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56545a38f6d8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56545a38f6d8
  `-ParmVarDecl 0x56545a38f7e8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a370368 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56545a3704c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56545a370558 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56545a370610 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56545a370718 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56545a370648 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56545a3a3d48 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56545a3a3d28 <col:31> 'int' 0
|-CXXConstructorDecl 0x56545a370a38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56545a3708b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56545a370928 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56545a3a3d80 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56545a3a3d60 <col:59> 'int' 0
|-CXXConstructorDecl 0x56545a370c10 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a370b00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56545a370b78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56545a3a3db8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56545a3a3d98 <col:55> 'int' 0
|-CXXConstructorDecl 0x56545a370fc8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56545a370db0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56545a370e28 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56545a370ea0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56545a3a3df0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56545a3a3dd0 <col:31> 'int' 0
|-CXXConstructorDecl 0x56545a371188 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56545a3710c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56545a371280 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56545a371468 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56545a371370 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56545a371558 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56545a3a41a0 <col:24, line:291:5>
|   `-ReturnStmt 0x56545a3a4190 <line:290:9, col:79>
|     `-BinaryOperator 0x56545a3a4170 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56545a3a4048 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56545a3a3fa0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56545a3a3f80 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56545a3a3e78 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56545a3a3e60 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56545a3a3e48 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56545a3a3e18 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56545a390700
|       | |   |       `-CXXThisExpr 0x56545a3a3e08 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56545a3a3f68 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56545a3a3f50 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56545a3a3f18 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56545a3a3ee8 <col:28, col:35> '<bound member function type>' ->size 0x56545a350fd8
|       | |           `-ImplicitCastExpr 0x56545a3a3f38 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56545a3a3ed0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56545a3a3ea0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56545a390700
|       | |                 `-CXXThisExpr 0x56545a3a3e90 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56545a3a4030 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56545a3a4018 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56545a3a4000 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56545a3a3fd0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56545a3a28d0
|       |         `-CXXThisExpr 0x56545a3a3fc0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56545a3a4150 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56545a3a4138 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56545a3a4120 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56545a3a40e0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56545a3a40c8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56545a3a4078 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56545a3a2980
|         |     |   `-CXXThisExpr 0x56545a3a4068 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56545a3a40a8 <col:73> 'int' 0
|         `-IntegerLiteral 0x56545a3a4100 <col:79> 'int' 0
|-CXXMethodDecl 0x56545a371618 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56545a3a4378 <col:32, line:296:5>
|   `-ReturnStmt 0x56545a3a4368 <line:295:9, col:49>
|     `-BinaryOperator 0x56545a3a4348 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56545a3a4228 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56545a3a4210 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56545a3a41f8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56545a3a41c8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56545a3a28d0
|       |       `-CXXThisExpr 0x56545a3a41b8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56545a3a4328 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56545a3a4310 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56545a3a42f8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56545a3a42b8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56545a3a42a0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56545a3a4250 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56545a3a2980
|         |     |   `-CXXThisExpr 0x56545a3a4240 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56545a3a4280 <col:43> 'int' 0
|         `-IntegerLiteral 0x56545a3a42d8 <col:49> 'int' 0
|-CXXMethodDecl 0x56545a371708 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56545a3a4588 <col:19, line:306:5>
|   |-IfStmt 0x56545a3a44a8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56545a3a43e8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56545a3a43d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56545a3a43a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56545a390700
|   | |     `-CXXThisExpr 0x56545a3a4390 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56545a3a4488 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56545a3a4458 <col:13, col:20> '<bound member function type>' ->clear 0x56545a3539d8
|   |     `-ImplicitCastExpr 0x56545a3a4440 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56545a3a4410 <col:13> 'Vector<String> *' lvalue ->_conf 0x56545a390700
|   |         `-CXXThisExpr 0x56545a3a4400 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56545a3a4530 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56545a3a4500 <col:9, col:16> '<bound member function type>' .clear 0x56545a3a2458
|   |   `-MemberExpr 0x56545a3a44d0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56545a3a2870
|   |     `-CXXThisExpr 0x56545a3a44c0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56545a3a4578 <line:305:9, col:17>
|     `-UnaryOperator 0x56545a3a4560 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a3a4550 <col:17> 'Args *' this
|-CXXMethodDecl 0x56545a371988 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56545a371890 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56545a371b08 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56545a371a40 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56545a371e88 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56545a371bb0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56545a371de8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56545a371c58 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56545a371cd0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56545a3a6220 <col:67, line:327:5>
|     |-WhileStmt 0x56545a3a61d0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56545a3a4670 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56545a3a45f0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56545a2c2588 0x56545a10bb68 0x56545a10b840 0x56545a0fc010 0x56545a0fbcc0 0x56545a0fb5b0 0x56545a0cdf20 0x56545a05b3f0
|     | | |-DeclRefExpr 0x56545a3a45b0 <col:16> 'Iter' lvalue ParmVar 0x56545a371c58 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56545a3a45d0 <col:25> 'Iter' lvalue ParmVar 0x56545a371cd0 'end' 'Iter'
|     | `-CompoundStmt 0x56545a3a61b0 <col:30, line:325:9>
|     |   |-CallExpr 0x56545a3a6150 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56545a3a46b8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56545a3a6120 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56545a3a60b0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|     |   |   `-DeclRefExpr 0x56545a3a4718 <col:24> 'Iter' lvalue ParmVar 0x56545a371c58 'begin' 'Iter'
|     |   `-UnaryOperator 0x56545a3a6198 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56545a3a6178 <col:15> 'Iter' lvalue ParmVar 0x56545a371c58 'begin' 'Iter'
|     `-ReturnStmt 0x56545a3a6210 <line:326:9, col:17>
|       `-UnaryOperator 0x56545a3a61f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a61e8 <col:17> 'Args *' this
|-CXXMethodDecl 0x56545a371f90 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56545a371f00 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56545a3720d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56545a372048 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56545a3721a0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56545a3a6300 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56545a3a62a0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56545a3a6250 <col:9> '<bound member function type>' ->reset_from 0x56545a3a2cf8
|   | | `-CXXThisExpr 0x56545a3a6240 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56545a3a6280 <col:20> 'int' 0
|   `-ReturnStmt 0x56545a3a62f0 <line:352:9, col:17>
|     `-UnaryOperator 0x56545a3a62d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a3a62c8 <col:17> 'Args *' this
|-VarDecl 0x56545a372258 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56545a3722c0 <col:38> 'int' 1
|-VarDecl 0x56545a372350 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56545a3723b8 <col:39> 'int' 2
|-VarDecl 0x56545a372448 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56545a3724b0 <col:39> 'int' 4
|-VarDecl 0x56545a372540 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56545a3725a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56545a372928 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56545a372620 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a372888 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56545a3726d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a372778 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a6458 <col:43, line:371:5>
|     `-ReturnStmt 0x56545a3a6448 <line:370:9, col:34>
|       `-CallExpr 0x56545a3a6410 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a6330 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a63b0 <col:21> 'const char *' lvalue ParmVar 0x56545a3726d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a63d0 <col:30> 'int' 0
|         `-DeclRefExpr 0x56545a3a63f0 <col:33> 'T' lvalue ParmVar 0x56545a372778 'x' 'T &'
|-FunctionTemplateDecl 0x56545a372c58 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56545a372990 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a372bb8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56545a372a40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a372ae8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a65a8 <col:45, line:375:5>
|     `-ReturnStmt 0x56545a3a6598 <line:374:9, col:42>
|       `-CallExpr 0x56545a3a6560 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a6480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a6500 <col:21> 'const char *' lvalue ParmVar 0x56545a372a40 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a6520 <col:30> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int'
|         `-DeclRefExpr 0x56545a3a6540 <col:41> 'T' lvalue ParmVar 0x56545a372ae8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a372f88 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56545a372cc0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a372ee8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56545a372d70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a372e18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a66f8 <col:45, line:379:5>
|     `-ReturnStmt 0x56545a3a66e8 <line:378:9, col:43>
|       `-CallExpr 0x56545a3a66b0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a65d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a6650 <col:21> 'const char *' lvalue ParmVar 0x56545a372d70 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a6670 <col:30> 'const int' lvalue Var 0x56545a372350 'positional' 'const int'
|         `-DeclRefExpr 0x56545a3a6690 <col:42> 'T' lvalue ParmVar 0x56545a372e18 'x' 'T &'
|-FunctionTemplateDecl 0x56545a3732b8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56545a372ff0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56545a373218 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56545a3730a0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56545a373148 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x56545a3a68f8 <col:46, line:383:5>
| |   `-ReturnStmt 0x56545a3a68e8 <line:382:9, col:55>
| |     `-CallExpr 0x56545a3a68b0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56545a3a6720 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56545a3a67a0 <col:21> 'const char *' lvalue ParmVar 0x56545a3730a0 'keyword' 'const char *'
| |       |-BinaryOperator 0x56545a3a6870 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56545a3a6820 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56545a3a6800 <col:30> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56545a3a6858 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56545a3a6838 <col:42> 'const int' lvalue Var 0x56545a372350 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x56545a3a6890 <col:54> 'T' lvalue ParmVar 0x56545a373148 'x' 'T &'
| `-CXXMethodDecl 0x56545a3e7c58 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56545a3e7a78 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x56545a3e7b48 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x56545a3736b8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56545a373320 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a373618 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56545a3733d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a373450 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56545a3734f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a6a38 <col:54, line:388:5>
|     |-CallExpr 0x56545a3a69c0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a6910 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56545a3a6950 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a6960 <col:30> 'const char *' lvalue ParmVar 0x56545a3733d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56545a3a6980 <col:39> 'int' lvalue ParmVar 0x56545a373450 'flags' 'int'
|     | `-DeclRefExpr 0x56545a3a69a0 <col:46> 'T' lvalue ParmVar 0x56545a3734f8 'x' 'T &'
|     `-ReturnStmt 0x56545a3a6a28 <line:387:9, col:17>
|       `-UnaryOperator 0x56545a3a6a10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a6a00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a373b68 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56545a373728 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56545a3737a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56545a373ac8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56545a373868 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a373908 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56545a3739a8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56545a3a6ba8 <col:74, line:403:5>
|     `-ReturnStmt 0x56545a3a6b98 <line:402:9, col:56>
|       `-CallExpr 0x56545a3a6b58 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a6a68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a6ad8 <col:28> 'const char *' lvalue ParmVar 0x56545a373868 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a6af8 <col:37> 'int' 0
|         |-DeclRefExpr 0x56545a3a6b18 <col:40> 'T' lvalue ParmVar 0x56545a373908 'x' 'T &'
|         `-DeclRefExpr 0x56545a3a6b38 <col:43> 'const V' lvalue ParmVar 0x56545a3739a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56545a373fd8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56545a373bd8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56545a373c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56545a373f38 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56545a373d18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a373db8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56545a373e58 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56545a3a6d10 <col:76, line:407:5>
|     `-ReturnStmt 0x56545a3a6d00 <line:406:9, col:65>
|       `-CallExpr 0x56545a3a6cc0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a6bd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a6c40 <col:28> 'const char *' lvalue ParmVar 0x56545a373d18 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a6c60 <col:37> 'const int' lvalue Var 0x56545a372350 'positional' 'const int'
|         |-DeclRefExpr 0x56545a3a6c80 <col:49> 'T' lvalue ParmVar 0x56545a373db8 'x' 'T &'
|         `-DeclRefExpr 0x56545a3a6ca0 <col:52> 'const V' lvalue ParmVar 0x56545a373e58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56545a374528 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56545a374048 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56545a3740c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56545a374488 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56545a374188 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a374208 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56545a3742a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56545a374348 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56545a3a6e78 <col:85, line:412:5>
|     |-CallExpr 0x56545a3a6df8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a6d28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56545a3a6d68 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a6d78 <col:37> 'const char *' lvalue ParmVar 0x56545a374188 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56545a3a6d98 <col:46> 'int' lvalue ParmVar 0x56545a374208 'flags' 'int'
|     | |-DeclRefExpr 0x56545a3a6db8 <col:53> 'T' lvalue ParmVar 0x56545a3742a8 'x' 'T &'
|     | `-DeclRefExpr 0x56545a3a6dd8 <col:56> 'const V' lvalue ParmVar 0x56545a374348 'default_value' 'const V &'
|     `-ReturnStmt 0x56545a3a6e68 <line:411:9, col:17>
|       `-UnaryOperator 0x56545a3a6e50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a6e40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a3749b8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56545a3745a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a374618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a374918 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a3746d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a374750 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3747f8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a6ff8 <col:53, line:425:5>
|     `-ReturnStmt 0x56545a3a6fe8 <line:424:9, col:42>
|       `-CallExpr 0x56545a3a6fa8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a6ea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a6f28 <col:21> 'const char *' lvalue ParmVar 0x56545a3746d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a6f48 <col:30> 'int' 0
|         |-DeclRefExpr 0x56545a3a6f68 <col:33> 'P' lvalue ParmVar 0x56545a374750 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a6f88 <col:41> 'T' lvalue ParmVar 0x56545a3747f8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a374e08 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56545a374a28 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a374aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a374d68 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a374b68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a374be0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56545a374c88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a7170 <col:55, line:429:5>
|     `-ReturnStmt 0x56545a3a7160 <line:428:9, col:50>
|       `-CallExpr 0x56545a3a7120 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a70a0 <col:21> 'const char *' lvalue ParmVar 0x56545a374b68 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a70c0 <col:30> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int'
|         |-DeclRefExpr 0x56545a3a70e0 <col:41> 'P' lvalue ParmVar 0x56545a374be0 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a7100 <col:49> 'T' lvalue ParmVar 0x56545a374c88 'x' 'T &'
|-FunctionTemplateDecl 0x56545a375258 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56545a374e78 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a374ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a3751b8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a374fb8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a375030 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3750d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a72e8 <col:55, line:433:5>
|     `-ReturnStmt 0x56545a3a72d8 <line:432:9, col:51>
|       `-CallExpr 0x56545a3a7298 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7198 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a7218 <col:21> 'const char *' lvalue ParmVar 0x56545a374fb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a7238 <col:30> 'const int' lvalue Var 0x56545a372350 'positional' 'const int'
|         |-DeclRefExpr 0x56545a3a7258 <col:42> 'P' lvalue ParmVar 0x56545a375030 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a7278 <col:50> 'T' lvalue ParmVar 0x56545a3750d8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a3756a8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56545a3752c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a375348 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a375608 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a375408 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a375480 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56545a375528 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a7510 <col:56, line:437:5>
|     `-ReturnStmt 0x56545a3a7500 <line:436:9, col:63>
|       `-CallExpr 0x56545a3a74c0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a7390 <col:21> 'const char *' lvalue ParmVar 0x56545a375408 'keyword' 'const char *'
|         |-BinaryOperator 0x56545a3a7460 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56545a3a7410 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56545a3a73f0 <col:30> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56545a3a7448 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56545a3a7428 <col:42> 'const int' lvalue Var 0x56545a372350 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56545a3a7480 <col:54> 'P' lvalue ParmVar 0x56545a375480 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a74a0 <col:62> 'T' lvalue ParmVar 0x56545a375528 'x' 'T &'
|-FunctionTemplateDecl 0x56545a375bd8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56545a375718 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a375798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a375b38 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56545a375858 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a3758d8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56545a375950 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3759f8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a7678 <col:64, line:442:5>
|     |-CallExpr 0x56545a3a75f8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a7528 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56545a3a7568 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a7578 <col:30> 'const char *' lvalue ParmVar 0x56545a375858 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56545a3a7598 <col:39> 'int' lvalue ParmVar 0x56545a3758d8 'flags' 'int'
|     | |-DeclRefExpr 0x56545a3a75b8 <col:46> 'P' lvalue ParmVar 0x56545a375950 'parser' 'P'
|     | `-DeclRefExpr 0x56545a3a75d8 <col:54> 'T' lvalue ParmVar 0x56545a3759f8 'x' 'T &'
|     `-ReturnStmt 0x56545a3a7668 <line:441:9, col:17>
|       `-UnaryOperator 0x56545a3a7650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a7640 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a3761d8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56545a375c50 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a375cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56545a375d48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56545a376138 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56545a375e10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a375e88 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56545a375f28 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56545a375ff8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56545a3a7810 <col:84, line:458:5>
|     `-ReturnStmt 0x56545a3a7800 <line:457:9, col:64>
|       `-CallExpr 0x56545a3a77b8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a76a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a7718 <col:28> 'const char *' lvalue ParmVar 0x56545a375e10 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a7738 <col:37> 'int' 0
|         |-DeclRefExpr 0x56545a3a7758 <col:40> 'P' lvalue ParmVar 0x56545a375e88 'parser' 'P'
|         |-DeclRefExpr 0x56545a3a7778 <col:48> 'T' lvalue ParmVar 0x56545a375f28 'x' 'T &'
|         `-DeclRefExpr 0x56545a3a7798 <col:51> 'const V' lvalue ParmVar 0x56545a375ff8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56545a376758 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56545a376250 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a3762c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56545a376348 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56545a3766b8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56545a376410 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a376488 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56545a376528 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56545a3765c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56545a3a79a0 <col:86, line:462:5>
|     `-ReturnStmt 0x56545a3a7990 <line:461:9, col:73>
|       `-CallExpr 0x56545a3a7948 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7838 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a78a8 <col:28> 'const char *' lvalue ParmVar 0x56545a376410 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a78c8 <col:37> 'const int' lvalue Var 0x56545a372350 'positional' 'const int'
|         |-DeclRefExpr 0x56545a3a78e8 <col:49> 'P' lvalue ParmVar 0x56545a376488 'parser' 'P'
|         |-DeclRefExpr 0x56545a3a7908 <col:57> 'T' lvalue ParmVar 0x56545a376528 'x' 'T &'
|         `-DeclRefExpr 0x56545a3a7928 <col:60> 'const V' lvalue ParmVar 0x56545a3765c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56545a376db8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56545a3767d0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a376848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56545a3768c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56545a376d18 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56545a376990 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a376a10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56545a376a88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56545a376b28 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56545a376bc8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56545a3a7b30 <col:95, line:467:5>
|     |-CallExpr 0x56545a3a7aa8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a79b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56545a3a79f8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a7a08 <col:37> 'const char *' lvalue ParmVar 0x56545a376990 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56545a3a7a28 <col:46> 'int' lvalue ParmVar 0x56545a376a10 'flags' 'int'
|     | |-DeclRefExpr 0x56545a3a7a48 <col:53> 'P' lvalue ParmVar 0x56545a376a88 'parser' 'P'
|     | |-DeclRefExpr 0x56545a3a7a68 <col:61> 'T' lvalue ParmVar 0x56545a376b28 'x' 'T &'
|     | `-DeclRefExpr 0x56545a3a7a88 <col:64> 'const V' lvalue ParmVar 0x56545a376bc8 'default_value' 'const V &'
|     `-ReturnStmt 0x56545a3a7b20 <line:466:9, col:17>
|       `-UnaryOperator 0x56545a3a7b08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a7af8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a377398 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56545a376e38 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a376eb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56545a376f38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56545a3772f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56545a377000 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a377078 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56545a377118 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56545a3771b8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56545a3a7cd8 <col:63, line:481:5>
|     `-ReturnStmt 0x56545a3a7cc8 <line:480:9, col:47>
|       `-CallExpr 0x56545a3a7c80 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a7be0 <col:21> 'const char *' lvalue ParmVar 0x56545a377000 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a7c00 <col:30> 'int' 0
|         |-DeclRefExpr 0x56545a3a7c20 <col:33> 'P' lvalue ParmVar 0x56545a377078 'parser' 'P'
|         |-DeclRefExpr 0x56545a3a7c40 <col:41> 'T1' lvalue ParmVar 0x56545a377118 'x1' 'T1 &'
|         `-DeclRefExpr 0x56545a3a7c60 <col:45> 'T2' lvalue ParmVar 0x56545a3771b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56545a377918 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56545a377410 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a377488 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56545a377508 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56545a377878 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56545a3775d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a377648 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3776e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56545a377788 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56545a3a7e78 <col:65, line:485:5>
|     `-ReturnStmt 0x56545a3a7e68 <line:484:9, col:55>
|       `-CallExpr 0x56545a3a7e20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a7d80 <col:21> 'const char *' lvalue ParmVar 0x56545a3775d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a7da0 <col:30> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int'
|         |-DeclRefExpr 0x56545a3a7dc0 <col:41> 'P' lvalue ParmVar 0x56545a377648 'parser' 'P'
|         |-DeclRefExpr 0x56545a3a7de0 <col:49> 'T1' lvalue ParmVar 0x56545a3776e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56545a3a7e00 <col:53> 'T2' lvalue ParmVar 0x56545a377788 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56545a377e98 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56545a377990 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a377a08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56545a377a88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56545a377df8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56545a377b50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a377bc8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56545a377c68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56545a377d08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56545a3a8018 <col:65, line:489:5>
|     `-ReturnStmt 0x56545a3a8008 <line:488:9, col:56>
|       `-CallExpr 0x56545a3a7fc0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a7ea0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a7f20 <col:21> 'const char *' lvalue ParmVar 0x56545a377b50 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a7f40 <col:30> 'const int' lvalue Var 0x56545a372350 'positional' 'const int'
|         |-DeclRefExpr 0x56545a3a7f60 <col:42> 'P' lvalue ParmVar 0x56545a377bc8 'parser' 'P'
|         |-DeclRefExpr 0x56545a3a7f80 <col:50> 'T1' lvalue ParmVar 0x56545a377c68 'x1' 'T1 &'
|         `-DeclRefExpr 0x56545a3a7fa0 <col:54> 'T2' lvalue ParmVar 0x56545a377d08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56545a37d8c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56545a377f10 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a377f88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56545a378008 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56545a37d828 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56545a3780d0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a378148 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3781e8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56545a378288 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56545a3a8268 <col:66, line:493:5>
|     `-ReturnStmt 0x56545a3a8258 <line:492:9, col:68>
|       `-CallExpr 0x56545a3a8210 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a80c0 <col:21> 'const char *' lvalue ParmVar 0x56545a3780d0 'keyword' 'const char *'
|         |-BinaryOperator 0x56545a3a8190 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56545a3a8140 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56545a3a8120 <col:30> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56545a3a8178 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56545a3a8158 <col:42> 'const int' lvalue Var 0x56545a372350 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56545a3a81b0 <col:54> 'P' lvalue ParmVar 0x56545a378148 'parser' 'P'
|         |-DeclRefExpr 0x56545a3a81d0 <col:62> 'T1' lvalue ParmVar 0x56545a3781e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56545a3a81f0 <col:66> 'T2' lvalue ParmVar 0x56545a378288 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56545a37df28 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56545a37d940 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a37d9b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56545a37da38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56545a37de88 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56545a37db00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37db80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56545a37dbf8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56545a37dc98 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56545a37dd38 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56545a3a83f8 <col:74, line:498:5>
|     |-CallExpr 0x56545a3a8370 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a8280 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56545a3a82c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a82d0 <col:30> 'const char *' lvalue ParmVar 0x56545a37db00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56545a3a82f0 <col:39> 'int' lvalue ParmVar 0x56545a37db80 'flags' 'int'
|     | |-DeclRefExpr 0x56545a3a8310 <col:46> 'P' lvalue ParmVar 0x56545a37dbf8 'parser' 'P'
|     | |-DeclRefExpr 0x56545a3a8330 <col:54> 'T1' lvalue ParmVar 0x56545a37dc98 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56545a3a8350 <col:58> 'T2' lvalue ParmVar 0x56545a37dd38 'x2' 'T2 &'
|     `-ReturnStmt 0x56545a3a83e8 <line:497:9, col:17>
|       `-UnaryOperator 0x56545a3a83d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a83c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a37e288 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56545a37dfa8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a37e1e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56545a37e060 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37e0d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a8540 <col:52, line:509:5>
|     `-ReturnStmt 0x56545a3a8530 <line:508:9, col:44>
|       `-CallExpr 0x56545a3a84f8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8498 <col:26> 'const char *' lvalue ParmVar 0x56545a37e060 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a84b8 <col:35> 'int' 0
|         `-DeclRefExpr 0x56545a3a84d8 <col:38> 'P' lvalue ParmVar 0x56545a37e0d8 'parser' 'P'
|-FunctionTemplateDecl 0x56545a37e588 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56545a37e2f0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a37e4e8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56545a37e3a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37e418 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a8680 <col:54, line:513:5>
|     `-ReturnStmt 0x56545a3a8670 <line:512:9, col:52>
|       `-CallExpr 0x56545a3a8638 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a85d8 <col:26> 'const char *' lvalue ParmVar 0x56545a37e3a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a85f8 <col:35> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int'
|         `-DeclRefExpr 0x56545a3a8618 <col:46> 'P' lvalue ParmVar 0x56545a37e418 'parser' 'P'
|-FunctionTemplateDecl 0x56545a37e888 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56545a37e5f0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a37e7e8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56545a37e6a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37e718 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a87c0 <col:54, line:517:5>
|     `-ReturnStmt 0x56545a3a87b0 <line:516:9, col:53>
|       `-CallExpr 0x56545a3a8778 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a86a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8718 <col:26> 'const char *' lvalue ParmVar 0x56545a37e6a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a8738 <col:35> 'const int' lvalue Var 0x56545a372350 'positional' 'const int'
|         `-DeclRefExpr 0x56545a3a8758 <col:47> 'P' lvalue ParmVar 0x56545a37e718 'parser' 'P'
|-FunctionTemplateDecl 0x56545a37eb88 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56545a37e8f0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a37eae8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56545a37e9a0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37ea18 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a89b0 <col:55, line:521:5>
|     `-ReturnStmt 0x56545a3a89a0 <line:520:9, col:65>
|       `-CallExpr 0x56545a3a8968 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a87e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8858 <col:26> 'const char *' lvalue ParmVar 0x56545a37e9a0 'keyword' 'const char *'
|         |-BinaryOperator 0x56545a3a8928 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56545a3a88d8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56545a3a88b8 <col:35> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56545a3a8910 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56545a3a88f0 <col:47> 'const int' lvalue Var 0x56545a372350 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56545a3a8948 <col:59> 'P' lvalue ParmVar 0x56545a37ea18 'parser' 'P'
|-FunctionTemplateDecl 0x56545a37ef58 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56545a37ebf0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a37eeb8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56545a37eca0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37ed20 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56545a37ed98 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a8af0 <col:63, line:526:5>
|     |-CallExpr 0x56545a3a8a78 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a89c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56545a3a8a08 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a8a18 <col:35> 'const char *' lvalue ParmVar 0x56545a37eca0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56545a3a8a38 <col:44> 'int' lvalue ParmVar 0x56545a37ed20 'flags' 'int'
|     | `-DeclRefExpr 0x56545a3a8a58 <col:51> 'P' lvalue ParmVar 0x56545a37ed98 'parser' 'P'
|     `-ReturnStmt 0x56545a3a8ae0 <line:525:9, col:17>
|       `-UnaryOperator 0x56545a3a8ac8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a8ab8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a37f3a8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56545a37efc8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a37f048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a37f308 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a37f108 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37f180 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56545a37f228 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a8c48 <col:58, line:541:5>
|     `-ReturnStmt 0x56545a3a8c38 <line:540:9, col:39>
|       `-CallExpr 0x56545a3a8c00 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8b20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8ba0 <col:21> 'const char *' lvalue ParmVar 0x56545a37f108 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a8bc0 <col:30> 'P' lvalue ParmVar 0x56545a37f180 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a8be0 <col:38> 'T' lvalue ParmVar 0x56545a37f228 'x' 'T &'
|-FunctionTemplateDecl 0x56545a37f7f8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56545a37f418 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a37f498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a37f758 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a37f558 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37f5d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56545a37f678 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a8d80 <col:60, line:545:5>
|     `-ReturnStmt 0x56545a3a8d70 <line:544:9, col:41>
|       `-CallExpr 0x56545a3a8d38 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8c70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8cd8 <col:23> 'const char *' lvalue ParmVar 0x56545a37f558 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a8cf8 <col:32> 'P' lvalue ParmVar 0x56545a37f5d0 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a8d18 <col:40> 'T' lvalue ParmVar 0x56545a37f678 'x' 'T &'
|-FunctionTemplateDecl 0x56545a37fc48 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56545a37f868 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a37f8e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a37fba8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a37f9a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37fa20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56545a37fac8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a8eb8 <col:60, line:549:5>
|     `-ReturnStmt 0x56545a3a8ea8 <line:548:9, col:41>
|       `-CallExpr 0x56545a3a8e70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8da8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8e10 <col:23> 'const char *' lvalue ParmVar 0x56545a37f9a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a8e30 <col:32> 'P' lvalue ParmVar 0x56545a37fa20 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a8e50 <col:40> 'T' lvalue ParmVar 0x56545a37fac8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a380098 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56545a37fcb8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a37fd38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a37fff8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a37fdf8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a37fe70 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56545a37ff18 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a8ff0 <col:61, line:553:5>
|     `-ReturnStmt 0x56545a3a8fe0 <line:552:9, col:42>
|       `-CallExpr 0x56545a3a8fa8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a8ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a8f48 <col:24> 'const char *' lvalue ParmVar 0x56545a37fdf8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a8f68 <col:33> 'P' lvalue ParmVar 0x56545a37fe70 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a8f88 <col:41> 'T' lvalue ParmVar 0x56545a37ff18 'x' 'T &'
|-FunctionTemplateDecl 0x56545a380578 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56545a380108 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a380188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a3804d8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56545a380248 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a3802c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56545a380340 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3803e8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a9168 <col:69, line:557:5>
|     `-ReturnStmt 0x56545a3a9158 <line:556:9, col:46>
|       `-CallExpr 0x56545a3a9118 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a9018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a9098 <col:21> 'const char *' lvalue ParmVar 0x56545a380248 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a90b8 <col:30> 'int' lvalue ParmVar 0x56545a3802c8 'flags' 'int'
|         |-DeclRefExpr 0x56545a3a90d8 <col:37> 'P' lvalue ParmVar 0x56545a380340 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a90f8 <col:45> 'T' lvalue ParmVar 0x56545a3803e8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a380888 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56545a3805f0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a3807e8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56545a3806a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a380718 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a92a8 <col:56, line:571:5>
|     `-ReturnStmt 0x56545a3a9298 <line:570:9, col:48>
|       `-CallExpr 0x56545a3a9260 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a9190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a9200 <col:30> 'const char *' lvalue ParmVar 0x56545a3806a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a9220 <col:39> 'int' 0
|         `-DeclRefExpr 0x56545a3a9240 <col:42> 'P' lvalue ParmVar 0x56545a380718 'parser' 'P'
|-FunctionTemplateDecl 0x56545a380c18 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56545a3808f0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a380b78 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56545a3809a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a380a20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56545a380a98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56545a3a9478 <col:67, line:576:5>
|     |-CallExpr 0x56545a3a9400 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a92c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56545a3a9300 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a9310 <col:39> 'const char *' lvalue ParmVar 0x56545a3809a0 'keyword' 'const char *'
|     | |-BinaryOperator 0x56545a3a93c0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56545a3a9370 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56545a3a9330 <col:48> 'int' lvalue ParmVar 0x56545a380a20 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56545a3a93a8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56545a3a9388 <col:56> 'const int' lvalue Var 0x56545a372540 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56545a3a93e0 <col:68> 'P' lvalue ParmVar 0x56545a380a98 'parser' 'P'
|     `-ReturnStmt 0x56545a3a9468 <line:575:9, col:17>
|       `-UnaryOperator 0x56545a3a9450 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a9440 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a381068 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56545a380c88 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a380d08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a380fc8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56545a380dc8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a380e40 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56545a380ee8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a95e8 <col:62, line:592:5>
|     `-ReturnStmt 0x56545a3a95d8 <line:591:9, col:51>
|       `-CallExpr 0x56545a3a9598 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a94a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a9518 <col:30> 'const char *' lvalue ParmVar 0x56545a380dc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a9538 <col:39> 'int' 0
|         |-DeclRefExpr 0x56545a3a9558 <col:42> 'P' lvalue ParmVar 0x56545a380e40 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a9578 <col:50> 'T' lvalue ParmVar 0x56545a380ee8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a381548 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56545a3810d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a381158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a3814a8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56545a381218 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a381298 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56545a381310 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3813b8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56545a3a97e0 <col:73, line:597:5>
|     |-CallExpr 0x56545a3a9760 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a9600 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56545a3a9640 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a9650 <col:39> 'const char *' lvalue ParmVar 0x56545a381218 'keyword' 'const char *'
|     | |-BinaryOperator 0x56545a3a9700 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56545a3a96b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56545a3a9670 <col:48> 'int' lvalue ParmVar 0x56545a381298 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56545a3a96e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56545a3a96c8 <col:56> 'const int' lvalue Var 0x56545a372540 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56545a3a9720 <col:68> 'P' lvalue ParmVar 0x56545a381310 'parser' 'P'
|     | `-DeclRefExpr 0x56545a3a9740 <col:76> 'T' lvalue ParmVar 0x56545a3813b8 'x' 'T &'
|     `-ReturnStmt 0x56545a3a97d0 <line:596:9, col:17>
|       `-UnaryOperator 0x56545a3a97b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a97a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a381af8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56545a3815c0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a381638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a381a58 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56545a3816f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a381770 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56545a381930 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56545a3a9950 <col:65, line:614:5>
|     `-ReturnStmt 0x56545a3a9940 <line:613:9, col:46>
|       `-CallExpr 0x56545a3a9900 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a9810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a9880 <col:25> 'const char *' lvalue ParmVar 0x56545a3816f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a98a0 <col:34> 'int' 0
|         |-DeclRefExpr 0x56545a3a98c0 <col:37> 'P' lvalue ParmVar 0x56545a381770 'parser' 'P'
|         `-DeclRefExpr 0x56545a3a98e0 <col:45> 'Vector<T>' lvalue ParmVar 0x56545a381930 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56545a381f28 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56545a381b68 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a381e88 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56545a381c20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a381d70 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56545a3a9b70 <col:55, line:618:5>
|     `-ReturnStmt 0x56545a3a9b60 <line:617:9, col:55>
|       `-CallExpr 0x56545a3a9b20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a9978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a99e8 <col:25> 'const char *' lvalue ParmVar 0x56545a381c20 'keyword' 'const char *'
|         |-IntegerLiteral 0x56545a3a9a08 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56545a3a9ae0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56545a3a9b00 <col:54> 'Vector<T>' lvalue ParmVar 0x56545a381d70 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56545a3824f8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56545a381f90 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a382008 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a382458 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56545a3820c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a382148 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56545a3821c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56545a382310 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56545a3a9d68 <col:76, line:623:5>
|     |-CallExpr 0x56545a3a9ce8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56545a3a9b88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56545a3a9bc8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56545a3a9bd8 <col:34> 'const char *' lvalue ParmVar 0x56545a3820c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56545a3a9c88 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56545a3a9c38 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56545a3a9bf8 <col:43> 'int' lvalue ParmVar 0x56545a382148 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56545a3a9c70 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56545a3a9c50 <col:51> 'const int' lvalue Var 0x56545a372540 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56545a3a9ca8 <col:63> 'P' lvalue ParmVar 0x56545a3821c0 'parser' 'P'
|     | `-DeclRefExpr 0x56545a3a9cc8 <col:71> 'Vector<T>' lvalue ParmVar 0x56545a382310 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56545a3a9d58 <line:622:9, col:17>
|       `-UnaryOperator 0x56545a3a9d40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3a9d30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a382a38 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56545a382570 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a3825e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a382998 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56545a3826a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a382728 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56545a382870 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56545a3a9fd0 <col:66, line:627:5>
|     `-ReturnStmt 0x56545a3a9fc0 <line:626:9, col:59>
|       `-CallExpr 0x56545a3a9f80 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56545a3a9d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56545a3a9e08 <col:25> 'const char *' lvalue ParmVar 0x56545a3826a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56545a3a9e28 <col:34> 'int' lvalue ParmVar 0x56545a382728 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56545a3a9f40 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56545a3a9f60 <col:58> 'Vector<T>' lvalue ParmVar 0x56545a382870 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56545a382ac8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56545a3aa050 <col:25, line:633:5>
|   `-ReturnStmt 0x56545a3aa040 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56545a3aa028 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56545a3a9ff8 <col:16> 'const bool' lvalue ->_status 0x56545a390568
|         `-CXXThisExpr 0x56545a3a9fe8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56545a382c48 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56545a382b80 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56545a3aa138 <col:27, line:639:5>
|   |-BinaryOperator 0x56545a3aa0e0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56545a3aa068 <col:9> 'bool' lvalue ParmVar 0x56545a382b80 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56545a3aa0c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56545a3aa098 <col:13> 'bool' lvalue ->_status 0x56545a390568
|   |     `-CXXThisExpr 0x56545a3aa088 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56545a3aa128 <line:638:9, col:17>
|     `-UnaryOperator 0x56545a3aa110 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a3aa100 <col:17> 'Args *' this
|-CXXMethodDecl 0x56545a382dc8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56545a382d08 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56545a3aa228 <col:39, line:644:5>
|   |-BinaryOperator 0x56545a3aa1d0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56545a3aa158 <col:9> 'bool' lvalue ParmVar 0x56545a382d08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56545a3aa1b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56545a3aa188 <col:13> 'const bool' lvalue ->_status 0x56545a390568
|   |     `-CXXThisExpr 0x56545a3aa178 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56545a3aa218 <line:643:9, col:17>
|     `-UnaryOperator 0x56545a3aa200 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a3aa1f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56545a382e90 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56545a3aa2d0 <col:30, line:651:5>
|   `-ReturnStmt 0x56545a3aa2c0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56545a3aa2a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56545a3aa278 <col:16> 'bool' lvalue ->_read_status 0x56545a286570
|         `-ImplicitCastExpr 0x56545a3aa258 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56545a3aa248 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56545a382fd8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56545a382f48 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56545a3aa3d8 <col:32, line:658:5>
|   |-BinaryOperator 0x56545a3aa380 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56545a3aa2e8 <col:9> 'bool' lvalue ParmVar 0x56545a382f48 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56545a3aa368 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56545a3aa338 <col:13> 'bool' lvalue ->_read_status 0x56545a286570
|   |     `-ImplicitCastExpr 0x56545a3aa318 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56545a3aa308 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56545a3aa3c8 <line:657:9, col:17>
|     `-UnaryOperator 0x56545a3aa3b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a3aa3a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56545a383128 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56545a383098 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56545a3aa4e8 <col:44, line:663:5>
|   |-BinaryOperator 0x56545a3aa490 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56545a3aa3f8 <col:9> 'bool' lvalue ParmVar 0x56545a383098 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56545a3aa478 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56545a3aa448 <col:13> 'bool' lvalue ->_read_status 0x56545a286570
|   |     `-ImplicitCastExpr 0x56545a3aa428 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56545a3aa418 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56545a3aa4d8 <line:662:9, col:17>
|     `-UnaryOperator 0x56545a3aa4c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a3aa4b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56545a3831f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56545a3832b8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56545a383380 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56545a383448 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56545a383758 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56545a3834e8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a3836b8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56545a3835c8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56545a3aa8a0 <col:19, line:706:5>
|     `-IfStmt 0x56545a3aa878 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56545a3aa5e8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56545a3aa7a8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56545a3aa778 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56545a3aa738 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56545a3aa640 <col:42> '<bound member function type>' ->simple_slot 0x56545a3a39b0
|       |     | `-CXXThisExpr 0x56545a3aa630 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56545a3aa6d8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56545a3aa690 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56545a110608
|       |     | `-DeclRefExpr 0x56545a3aa670 <col:55> 'T' lvalue ParmVar 0x56545a3835c8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56545a3aa718 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56545a3aa868 <line:705:13, col:34>
|         `-CallExpr 0x56545a3aa840 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56545a3aa7c8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56545a3aa820 <col:33> 'T' lvalue ParmVar 0x56545a3835c8 'x' 'T &'
|-FunctionTemplateDecl 0x56545a383a28 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56545a3837b8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a383988 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56545a383898 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56545a3aac80 <col:31, line:717:5>
|     |-DeclStmt 0x56545a3aa9e0 <line:713:9, col:23>
|     | `-VarDecl 0x56545a3aa8c8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56545a3aa9b8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56545a3aa940 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56545a3aa998 <col:21> 'T' lvalue ParmVar 0x56545a383898 'x' 'T &'
|     |-IfStmt 0x56545a3aac30 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56545a3aaad8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56545a3aac10 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56545a3aabb0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56545a3aab40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|     |   | `-DeclRefExpr 0x56545a3aab20 <col:14> 'T *' lvalue Var 0x56545a3aa8c8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56545a3aabf0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56545a3aac68 <line:716:9, col:16>
|       `-DeclRefExpr 0x56545a3aac48 <col:16> 'T *' lvalue Var 0x56545a3aa8c8 's' 'T *'
|-FunctionTemplateDecl 0x56545a383e38 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56545a383a88 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56545a383b08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56545a383d98 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56545a383be8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56545a383c88 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56545a3aaf90 <col:37, line:726:5>
|     |-IfStmt 0x56545a3aaf20 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56545a3aaf40 <line:723:13, col:26>
|     | | `-VarDecl 0x56545a3aace8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56545a3aadd8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56545a3aad60 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56545a3aadb8 <col:25> 'T' lvalue ParmVar 0x56545a383be8 'x' 'T &'
|     | |-DeclRefExpr 0x56545a3aae00 <col:16> 'T *' lvalue Var 0x56545a3aace8 's' 'T *'
|     | `-BinaryOperator 0x56545a3aaf00 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56545a3aaeb0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56545a3aae40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|     |   | `-DeclRefExpr 0x56545a3aae20 <col:14> 'T *' lvalue Var 0x56545a3aace8 's' 'T *'
|     |   `-DeclRefExpr 0x56545a3aaee0 <col:18> 'const V' lvalue ParmVar 0x56545a383c88 'value' 'const V &'
|     `-ReturnStmt 0x56545a3aaf80 <line:725:9, col:17>
|       `-UnaryOperator 0x56545a3aaf68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56545a3aaf58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56545a384238 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56545a383ea0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56545a384198 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56545a383f50 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a383fd0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56545a384078 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56545a3abdb0 <col:65, line:737:5>
|     |-DeclStmt 0x56545a3ab028 <line:732:9, col:26>
|     | `-VarDecl 0x56545a3aafc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56545a3abd78 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56545a3abd98 <line:733:13, col:58>
|       | `-VarDecl 0x56545a3ab050 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56545a3ab230 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56545a3ab200 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56545a3ab1e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56545a3ab1c8 <col:26, col:58> 'String' (CXXTemporary 0x56545a3ab1c8)
|       |           `-CXXMemberCallExpr 0x56545a3ab158 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56545a3ab0c8 <col:26> '<bound member function type>' ->find 0x56545a3a2fc8
|       |             | `-CXXThisExpr 0x56545a3ab0b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56545a3ab190 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3ab0f8 <col:31> 'const char *' lvalue ParmVar 0x56545a383f50 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56545a3ab1a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3ab118 <col:40> 'int' lvalue ParmVar 0x56545a383fd0 'flags' 'int'
|       |             `-DeclRefExpr 0x56545a3ab138 <col:47> 'Args::Slot *' lvalue Var 0x56545a3aafc0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56545a3ab2e8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56545a3ab2d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56545a3ab2b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56545a3ab280 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |       `-ImplicitCastExpr 0x56545a3ab268 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56545a3ab248 <col:20> 'String' lvalue Var 0x56545a3ab050 'str' 'String'
|       `-CompoundStmt 0x56545a3abd58 <col:61, line:736:9>
|         |-DeclStmt 0x56545a3ab7a0 <line:734:13, col:76>
|         | `-VarDecl 0x56545a3ab338 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56545a3ab770 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56545a3ab6e0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56545a3ab728 <col:60> 'T' lvalue ParmVar 0x56545a384078 'variable' 'T &'
|         |     `-UnaryOperator 0x56545a3ab758 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56545a3ab748 <col:71> 'Args *' this
|         `-CallExpr 0x56545a3abd28 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56545a3ab7c8 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|           | `-CXXThisExpr 0x56545a3ab7b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56545a3abce8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56545a3ab7f8 <col:23> 'T *' lvalue Var 0x56545a3ab338 's' 'T *'
|           | `-CallExpr 0x56545a3abca8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56545a3aba80 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56545a3abb80 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56545a3abba0 <col:86> 'String' lvalue Var 0x56545a3ab050 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56545a3abc50 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56545a3abbe0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|           |   | `-DeclRefExpr 0x56545a3abbc0 <col:92> 'T *' lvalue Var 0x56545a3ab338 's' 'T *'
|           |   `-UnaryOperator 0x56545a3abc90 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56545a3abc80 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56545a3abd08 <col:103> 'Args::Slot *' lvalue Var 0x56545a3aafc0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56545a384788 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56545a3842a8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56545a384328 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56545a3846e8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56545a3843e8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a384468 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56545a384508 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56545a3845a8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56545a3acc50 <col:88, line:745:5>
|     |-DeclStmt 0x56545a3abe48 <line:741:9, col:26>
|     | `-VarDecl 0x56545a3abde0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56545a3ac068 <line:742:9, col:55>
|     | `-VarDecl 0x56545a3abe70 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56545a3ac050 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56545a3ac020 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56545a3ac008 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56545a3abfe8 <col:22, col:54> 'String' (CXXTemporary 0x56545a3abfe8)
|     |           `-CXXMemberCallExpr 0x56545a3abf78 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56545a3abee8 <col:22> '<bound member function type>' ->find 0x56545a3a2fc8
|     |             | `-CXXThisExpr 0x56545a3abed8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56545a3abfb0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56545a3abf18 <col:27> 'const char *' lvalue ParmVar 0x56545a3843e8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56545a3abfc8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56545a3abf38 <col:36> 'int' lvalue ParmVar 0x56545a384468 'flags' 'int'
|     |             `-DeclRefExpr 0x56545a3abf58 <col:43> 'Args::Slot *' lvalue Var 0x56545a3abde0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56545a3ac440 <line:743:9, col:72>
|     | `-VarDecl 0x56545a3ac0b8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56545a3ac410 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56545a3ac380 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56545a3ac3c8 <col:56> 'T' lvalue ParmVar 0x56545a384508 'variable' 'T &'
|     |     `-UnaryOperator 0x56545a3ac3f8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56545a3ac3e8 <col:67> 'Args *' this
|     `-CallExpr 0x56545a3acc20 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56545a3ac468 <col:9> '<bound member function type>' ->postparse 0x56545a3a31d8
|       | `-CXXThisExpr 0x56545a3ac458 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56545a3acbe0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56545a3ac498 <col:19> 'T *' lvalue Var 0x56545a3ac0b8 's' 'T *'
|       | `-ParenExpr 0x56545a3acbc0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56545a3acb90 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56545a3acb78 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56545a3acb60 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56545a3acb40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56545a3acb10 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |     |       `-ImplicitCastExpr 0x56545a3acaf8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56545a3ac4b8 <col:25> 'String' lvalue Var 0x56545a3abe70 'str' 'String'
|       |     |-CallExpr 0x56545a3ac968 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56545a3ac740 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56545a3ac840 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56545a3ac860 <col:89> 'String' lvalue Var 0x56545a3abe70 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56545a3ac910 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56545a3ac8a0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|       |     | | `-DeclRefExpr 0x56545a3ac880 <col:95> 'T *' lvalue Var 0x56545a3ac0b8 's' 'T *'
|       |     | `-UnaryOperator 0x56545a3ac950 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56545a3ac940 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56545a3acad8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56545a3acab8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56545a3aca88 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56545a3aca38 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56545a3ac9c8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|       |         | | `-DeclRefExpr 0x56545a3ac9a8 <col:109> 'T *' lvalue Var 0x56545a3ac0b8 's' 'T *'
|       |         | `-DeclRefExpr 0x56545a3aca68 <col:113> 'const V' lvalue ParmVar 0x56545a3845a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56545a3acaa8 <col:120> 'bool' true
|       `-DeclRefExpr 0x56545a3acc00 <col:128> 'Args::Slot *' lvalue Var 0x56545a3abde0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56545a384cb8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56545a384800 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a384878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a384c18 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56545a384938 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a3849b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56545a384a30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56545a384ad8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56545a3ad848 <col:75, line:754:5>
|     |-DeclStmt 0x56545a3accf8 <line:749:9, col:26>
|     | `-VarDecl 0x56545a3acc90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56545a3ad810 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56545a3ad830 <line:750:13, col:58>
|       | `-VarDecl 0x56545a3acd20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56545a3acf00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56545a3aced0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56545a3aceb8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56545a3ace98 <col:26, col:58> 'String' (CXXTemporary 0x56545a3ace98)
|       |           `-CXXMemberCallExpr 0x56545a3ace28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56545a3acd98 <col:26> '<bound member function type>' ->find 0x56545a3a2fc8
|       |             | `-CXXThisExpr 0x56545a3acd88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56545a3ace60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3acdc8 <col:31> 'const char *' lvalue ParmVar 0x56545a384938 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56545a3ace78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3acde8 <col:40> 'int' lvalue ParmVar 0x56545a3849b8 'flags' 'int'
|       |             `-DeclRefExpr 0x56545a3ace08 <col:47> 'Args::Slot *' lvalue Var 0x56545a3acc90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56545a3acfb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56545a3acfa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56545a3acf80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56545a3acf50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |       `-ImplicitCastExpr 0x56545a3acf38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56545a3acf18 <col:20> 'String' lvalue Var 0x56545a3acd20 'str' 'String'
|       `-CompoundStmt 0x56545a3ad7f0 <col:61, line:753:9>
|         |-DeclStmt 0x56545a3ad390 <line:751:13, col:63>
|         | `-VarDecl 0x56545a3ad008 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56545a3ad360 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56545a3ad2d0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56545a3ad318 <col:47> 'T' lvalue ParmVar 0x56545a384ad8 'variable' 'T &'
|         |     `-UnaryOperator 0x56545a3ad348 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56545a3ad338 <col:58> 'Args *' this
|         `-CallExpr 0x56545a3ad7c0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56545a3ad3b8 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|           | `-CXXThisExpr 0x56545a3ad3a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56545a3ad780 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56545a3ad3e8 <col:23> 'T *' lvalue Var 0x56545a3ad008 's' 'T *'
|           | `-CallExpr 0x56545a3ad740 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56545a3ad5d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56545a3ad618 <col:56> 'P' lvalue ParmVar 0x56545a384a30 'parser' 'P'
|           |   |-DeclRefExpr 0x56545a3ad638 <col:64> 'String' lvalue Var 0x56545a3acd20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56545a3ad6e8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56545a3ad678 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|           |   | `-DeclRefExpr 0x56545a3ad658 <col:70> 'T *' lvalue Var 0x56545a3ad008 's' 'T *'
|           |   `-UnaryOperator 0x56545a3ad728 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56545a3ad718 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56545a3ad7a0 <col:81> 'Args::Slot *' lvalue Var 0x56545a3acc90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56545a385318 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56545a384d30 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56545a384da8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56545a384e28 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56545a385278 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56545a384ef0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a384f70 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56545a384fe8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56545a385088 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56545a385128 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56545a3b0928 <col:98, line:762:5>
|     |-DeclStmt 0x56545a3ad8e0 <line:758:9, col:26>
|     | `-VarDecl 0x56545a3ad878 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56545a3adb00 <line:759:9, col:55>
|     | `-VarDecl 0x56545a3ad908 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56545a3adae8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56545a3adab8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56545a3adaa0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56545a3ada80 <col:22, col:54> 'String' (CXXTemporary 0x56545a3ada80)
|     |           `-CXXMemberCallExpr 0x56545a3ada10 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56545a3ad980 <col:22> '<bound member function type>' ->find 0x56545a3a2fc8
|     |             | `-CXXThisExpr 0x56545a3ad970 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56545a3ada48 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56545a3ad9b0 <col:27> 'const char *' lvalue ParmVar 0x56545a384ef0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56545a3ada60 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56545a3ad9d0 <col:36> 'int' lvalue ParmVar 0x56545a384f70 'flags' 'int'
|     |             `-DeclRefExpr 0x56545a3ad9f0 <col:43> 'Args::Slot *' lvalue Var 0x56545a3ad878 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56545a3adf20 <line:760:9, col:59>
|     | `-VarDecl 0x56545a3adb58 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56545a3adef0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56545a3ade60 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56545a3adea8 <col:43> 'T' lvalue ParmVar 0x56545a385088 'variable' 'T &'
|     |     `-UnaryOperator 0x56545a3aded8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56545a3adec8 <col:54> 'Args *' this
|     `-CallExpr 0x56545a3b08f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56545a3adf48 <col:9> '<bound member function type>' ->postparse 0x56545a3a31d8
|       | `-CXXThisExpr 0x56545a3adf38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56545a3b08b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56545a3adf78 <col:19> 'T *' lvalue Var 0x56545a3adb58 's' 'T *'
|       | `-ParenExpr 0x56545a3b0898 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56545a3b0868 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56545a3b0850 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56545a3b0838 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56545a3b0818 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56545a3b07e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |     |       `-ImplicitCastExpr 0x56545a3b07d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56545a3adf98 <col:25> 'String' lvalue Var 0x56545a3ad908 'str' 'String'
|       |     |-CallExpr 0x56545a3b0640 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56545a3b04d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56545a3b0518 <col:59> 'P' lvalue ParmVar 0x56545a384fe8 'parser' 'P'
|       |     | |-DeclRefExpr 0x56545a3b0538 <col:67> 'String' lvalue Var 0x56545a3ad908 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56545a3b05e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56545a3b0578 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|       |     | | `-DeclRefExpr 0x56545a3b0558 <col:73> 'T *' lvalue Var 0x56545a3adb58 's' 'T *'
|       |     | `-UnaryOperator 0x56545a3b0628 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56545a3b0618 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56545a3b07b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56545a3b0790 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56545a3b0760 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56545a3b0710 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56545a3b06a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|       |         | | `-DeclRefExpr 0x56545a3b0680 <col:87> 'T *' lvalue Var 0x56545a3adb58 's' 'T *'
|       |         | `-DeclRefExpr 0x56545a3b0740 <col:91> 'const V' lvalue ParmVar 0x56545a385128 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56545a3b0780 <col:98> 'bool' true
|       `-DeclRefExpr 0x56545a3b08d8 <col:106> 'Args::Slot *' lvalue Var 0x56545a3ad878 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56545a38d5e8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56545a385398 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a385418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56545a385498 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56545a38d548 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56545a385560 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a3855e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56545a385658 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56545a3856f8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56545a38d3f0 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56545a3b1908 <col:60, line:773:5>
|     |-DeclStmt 0x56545a3b09d0 <line:767:9, col:26>
|     | `-VarDecl 0x56545a3b0968 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56545a3b18d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56545a3b18f0 <line:768:13, col:58>
|       | `-VarDecl 0x56545a3b09f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56545a3b0bd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56545a3b0ba8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56545a3b0b90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56545a3b0b70 <col:26, col:58> 'String' (CXXTemporary 0x56545a3b0b70)
|       |           `-CXXMemberCallExpr 0x56545a3b0b00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56545a3b0a70 <col:26> '<bound member function type>' ->find 0x56545a3a2fc8
|       |             | `-CXXThisExpr 0x56545a3b0a60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56545a3b0b38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3b0aa0 <col:31> 'const char *' lvalue ParmVar 0x56545a385560 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56545a3b0b50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3b0ac0 <col:40> 'int' lvalue ParmVar 0x56545a3855e0 'flags' 'int'
|       |             `-DeclRefExpr 0x56545a3b0ae0 <col:47> 'Args::Slot *' lvalue Var 0x56545a3b0968 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56545a3b0c90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56545a3b0c78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56545a3b0c58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56545a3b0c28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |       `-ImplicitCastExpr 0x56545a3b0c10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56545a3b0bf0 <col:20> 'String' lvalue Var 0x56545a3b09f8 'str' 'String'
|       `-CompoundStmt 0x56545a3b18a8 <col:61, line:772:9>
|         |-DeclStmt 0x56545a3b0fd0 <line:769:13, col:66>
|         | `-VarDecl 0x56545a3b0ce8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56545a3b0fa0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56545a3b0f10 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56545a3b0f58 <col:49> 'T1' lvalue ParmVar 0x56545a3856f8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56545a3b0f88 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56545a3b0f78 <col:61> 'Args *' this
|         |-DeclStmt 0x56545a3b1340 <line:770:13, col:66>
|         | `-VarDecl 0x56545a3b1058 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56545a3b1310 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56545a3b1280 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56545a3b12c8 <col:49> 'T2' lvalue ParmVar 0x56545a38d3f0 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56545a3b12f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56545a3b12e8 <col:61> 'Args *' this
|         `-CallExpr 0x56545a3b1878 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56545a3b1368 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|           | `-CXXThisExpr 0x56545a3b1358 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56545a3b1838 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56545a3b13d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56545a3b1398 <col:23> 'T1 *' lvalue Var 0x56545a3b0ce8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56545a3b13b8 <col:29> 'T2 *' lvalue Var 0x56545a3b1058 's2' 'T2 *'
|           | `-CallExpr 0x56545a3b17f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56545a3b15c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56545a3b1608 <col:63> 'P' lvalue ParmVar 0x56545a385658 'parser' 'P'
|           |   |-DeclRefExpr 0x56545a3b1628 <col:71> 'String' lvalue Var 0x56545a3b09f8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56545a3b16d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56545a3b1668 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|           |   | `-DeclRefExpr 0x56545a3b1648 <col:77> 'T1 *' lvalue Var 0x56545a3b0ce8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56545a3b1798 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56545a3b1728 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|           |   | `-DeclRefExpr 0x56545a3b1708 <col:82> 'T2 *' lvalue Var 0x56545a3b1058 's2' 'T2 *'
|           |   `-UnaryOperator 0x56545a3b17d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56545a3b17c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56545a3b1858 <col:94> 'Args::Slot *' lvalue Var 0x56545a3b0968 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56545a38d9d8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56545a38d668 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a38d938 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56545a38d720 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a38d7a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56545a38d818 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56545a3b1e20 <col:67, line:780:5>
|     |-DeclStmt 0x56545a3b19a0 <line:777:9, col:26>
|     | `-VarDecl 0x56545a3b1938 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56545a3b1de8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56545a3b1e08 <line:778:13, col:58>
|       | `-VarDecl 0x56545a3b19c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56545a3b1ba8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56545a3b1b78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56545a3b1b60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56545a3b1b40 <col:26, col:58> 'String' (CXXTemporary 0x56545a3b1b40)
|       |           `-CXXMemberCallExpr 0x56545a3b1ad0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56545a3b1a40 <col:26> '<bound member function type>' ->find 0x56545a3a2fc8
|       |             | `-CXXThisExpr 0x56545a3b1a30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56545a3b1b08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3b1a70 <col:31> 'const char *' lvalue ParmVar 0x56545a38d720 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56545a3b1b20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56545a3b1a90 <col:40> 'int' lvalue ParmVar 0x56545a38d7a0 'flags' 'int'
|       |             `-DeclRefExpr 0x56545a3b1ab0 <col:47> 'Args::Slot *' lvalue Var 0x56545a3b1938 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56545a3b1c60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56545a3b1c48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56545a3b1c28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56545a3b1bf8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|       |       `-ImplicitCastExpr 0x56545a3b1be0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56545a3b1bc0 <col:20> 'String' lvalue Var 0x56545a3b19c8 'str' 'String'
|       `-CallExpr 0x56545a3b1db8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56545a3b1c88 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|         | `-CXXThisExpr 0x56545a3b1c78 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56545a3b1d68 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56545a3b1cd8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56545a3b1cb8 <col:23> 'P' lvalue ParmVar 0x56545a38d818 'parser' 'P'
|         | |-DeclRefExpr 0x56545a3b1d20 <col:36> 'String' lvalue Var 0x56545a3b19c8 'str' 'String'
|         | `-UnaryOperator 0x56545a3b1d50 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56545a3b1d40 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56545a3b1d98 <col:49> 'Args::Slot *' lvalue Var 0x56545a3b1938 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56545a38dd78 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56545a38da48 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56545a38dcd8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56545a38db00 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a38db80 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56545a38dbf8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56545a3b2790 <col:71, line:792:5>
|     |-DeclStmt 0x56545a3b1eb8 <line:784:9, col:26>
|     | `-VarDecl 0x56545a3b1e50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56545a3b1f88 <line:785:9, col:29>
|     | `-VarDecl 0x56545a3b1ee8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56545a3b1f70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56545a3b1f50 <col:28> 'int' 1
|     |-WhileStmt 0x56545a3b2640 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56545a3b2660 <line:786:16, col:61>
|     | | `-VarDecl 0x56545a3b1fb0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56545a3b2190 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56545a3b2160 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56545a3b2148 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56545a3b2128 <col:29, col:61> 'String' (CXXTemporary 0x56545a3b2128)
|     | |           `-CXXMemberCallExpr 0x56545a3b20b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56545a3b2028 <col:29> '<bound member function type>' ->find 0x56545a3a2fc8
|     | |             | `-CXXThisExpr 0x56545a3b2018 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56545a3b20f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56545a3b2058 <col:34> 'const char *' lvalue ParmVar 0x56545a38db00 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56545a3b2108 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56545a3b2078 <col:43> 'int' lvalue ParmVar 0x56545a38db80 'flags' 'int'
|     | |             `-DeclRefExpr 0x56545a3b2098 <col:50> 'Args::Slot *' lvalue Var 0x56545a3b1e50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56545a3b2248 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56545a3b2230 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56545a3b2210 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56545a3b21e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|     | |       `-ImplicitCastExpr 0x56545a3b21c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56545a3b21a8 <col:23> 'String' lvalue Var 0x56545a3b1fb0 'str' 'String'
|     | `-CompoundStmt 0x56545a3b2618 <col:64, line:790:9>
|     |   |-CallExpr 0x56545a3b23a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56545a3b2270 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|     |   | | `-CXXThisExpr 0x56545a3b2260 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56545a3b2350 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56545a3b22c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56545a3b22a0 <col:23> 'P' lvalue ParmVar 0x56545a38dbf8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56545a3b2308 <col:36> 'String' lvalue Var 0x56545a3b1fb0 'str' 'String'
|     |   | | `-UnaryOperator 0x56545a3b2338 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56545a3b2328 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56545a3b2380 <col:49> 'Args::Slot *' lvalue Var 0x56545a3b1e50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56545a3b2538 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56545a3b23d0 <col:13> 'int' lvalue Var 0x56545a3b1ee8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56545a3b2520 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56545a3b2500 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56545a3b2468 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56545a3b2448 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56545a3b2430 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56545a3b23f0 <col:28> 'int' lvalue Var 0x56545a3b1ee8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56545a3b2410 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56545a3b24e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56545a3b24b8 <col:49> 'bool' lvalue ->_read_status 0x56545a286570
|     |   |         `-ImplicitCastExpr 0x56545a3b2498 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56545a3b2488 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56545a3b25e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56545a3b2558 <col:13> 'int' lvalue ParmVar 0x56545a38db80 'flags' 'int'
|     |     `-UnaryOperator 0x56545a3b25d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56545a3b25b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56545a3b2598 <col:23> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56545a3b2770 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56545a3b26a8 <col:9> 'bool' lvalue ->_read_status 0x56545a286570
|       | `-ImplicitCastExpr 0x56545a3b2688 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56545a3b2678 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56545a3b2750 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56545a3b2730 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56545a3b2718 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56545a3b26d8 <col:25> 'int' lvalue Var 0x56545a3b1ee8 'read_status' 'int'
|           `-IntegerLiteral 0x56545a3b26f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56545a38e258 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56545a38dde8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a38de68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a38e1b8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56545a38df28 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a38dfa8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56545a38e020 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56545a38e0c8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56545a3b3720 <col:84, line:805:5>
|     |-DeclStmt 0x56545a3b2838 <line:796:9, col:26>
|     | `-VarDecl 0x56545a3b27d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56545a3b2908 <line:797:9, col:29>
|     | `-VarDecl 0x56545a3b2868 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56545a3b28f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56545a3b28d0 <col:28> 'int' 1
|     |-DeclStmt 0x56545a3b2c40 <line:798:9, col:71>
|     | `-VarDecl 0x56545a3b2958 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56545a3b2c10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56545a3b2b80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56545a3b2bc8 <col:55> 'T' lvalue ParmVar 0x56545a38e0c8 'variable' 'T &'
|     |     `-UnaryOperator 0x56545a3b2bf8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56545a3b2be8 <col:66> 'Args *' this
|     |-WhileStmt 0x56545a3b35d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56545a3b35f0 <line:799:16, col:61>
|     | | `-VarDecl 0x56545a3b2c68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56545a3b2e48 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56545a3b2e18 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56545a3b2e00 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56545a3b2de0 <col:29, col:61> 'String' (CXXTemporary 0x56545a3b2de0)
|     | |           `-CXXMemberCallExpr 0x56545a3b2d70 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56545a3b2ce0 <col:29> '<bound member function type>' ->find 0x56545a3a2fc8
|     | |             | `-CXXThisExpr 0x56545a3b2cd0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56545a3b2da8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56545a3b2d10 <col:34> 'const char *' lvalue ParmVar 0x56545a38df28 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56545a3b2dc0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56545a3b2d30 <col:43> 'int' lvalue ParmVar 0x56545a38dfa8 'flags' 'int'
|     | |             `-DeclRefExpr 0x56545a3b2d50 <col:50> 'Args::Slot *' lvalue Var 0x56545a3b27d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56545a3b2f00 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56545a3b2ee8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56545a3b2ec8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56545a3b2e98 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|     | |       `-ImplicitCastExpr 0x56545a3b2e80 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56545a3b2e60 <col:23> 'String' lvalue Var 0x56545a3b2c68 'str' 'String'
|     | `-CompoundStmt 0x56545a3b35a8 <col:64, line:803:9>
|     |   |-CallExpr 0x56545a3b3330 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56545a3b2f28 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|     |   | | `-CXXThisExpr 0x56545a3b2f18 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56545a3b32f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56545a3b2f58 <col:23> 'T *' lvalue Var 0x56545a3b2958 's' 'T *'
|     |   | | `-CallExpr 0x56545a3b32b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56545a3b3140 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56545a3b3188 <col:56> 'P' lvalue ParmVar 0x56545a38e020 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56545a3b31a8 <col:64> 'String' lvalue Var 0x56545a3b2c68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56545a3b3258 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56545a3b31e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|     |   | |   | `-DeclRefExpr 0x56545a3b31c8 <col:70> 'T *' lvalue Var 0x56545a3b2958 's' 'T *'
|     |   | |   `-UnaryOperator 0x56545a3b3298 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56545a3b3288 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56545a3b3310 <col:81> 'Args::Slot *' lvalue Var 0x56545a3b27d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56545a3b34c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56545a3b3360 <col:13> 'int' lvalue Var 0x56545a3b2868 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56545a3b34b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56545a3b3490 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56545a3b33f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56545a3b33d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56545a3b33c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56545a3b3380 <col:28> 'int' lvalue Var 0x56545a3b2868 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56545a3b33a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56545a3b3478 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56545a3b3448 <col:49> 'bool' lvalue ->_read_status 0x56545a286570
|     |   |         `-ImplicitCastExpr 0x56545a3b3428 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56545a3b3418 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56545a3b3578 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56545a3b34e8 <col:13> 'int' lvalue ParmVar 0x56545a38dfa8 'flags' 'int'
|     |     `-UnaryOperator 0x56545a3b3560 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56545a3b3548 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56545a3b3528 <col:23> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56545a3b3700 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56545a3b3638 <col:9> 'bool' lvalue ->_read_status 0x56545a286570
|       | `-ImplicitCastExpr 0x56545a3b3618 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56545a3b3608 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56545a3b36e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56545a3b36c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56545a3b36a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56545a3b3668 <col:25> 'int' lvalue Var 0x56545a3b2868 'read_status' 'int'
|           `-IntegerLiteral 0x56545a3b3688 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56545a38e838 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56545a38e2d0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56545a38e348 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56545a38e798 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56545a38e408 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56545a38e488 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56545a38e500 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56545a38e650 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56545a3b4528 <col:87, line:821:5>
|     |-DeclStmt 0x56545a3b37d0 <line:809:9, col:26>
|     | `-VarDecl 0x56545a3b3768 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56545a3b38a0 <line:810:9, col:29>
|     | `-VarDecl 0x56545a3b3800 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56545a3b3888 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56545a3b3868 <col:28> 'int' 1
|     |-DeclStmt 0x56545a3b3ae8 <line:811:9, col:38>
|     | `-VarDecl 0x56545a3b39d0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56545a3b3ac0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56545a3b3a48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56545a3b3aa0 <col:29> 'Vector<T>' lvalue ParmVar 0x56545a38e650 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56545a3b43d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56545a3b43f8 <line:812:16, col:61>
|     | | `-VarDecl 0x56545a3b3b10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56545a3b3cf0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56545a3b3cc0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56545a3b3ca8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56545a3b3c88 <col:29, col:61> 'String' (CXXTemporary 0x56545a3b3c88)
|     | |           `-CXXMemberCallExpr 0x56545a3b3c18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56545a3b3b88 <col:29> '<bound member function type>' ->find 0x56545a3a2fc8
|     | |             | `-CXXThisExpr 0x56545a3b3b78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56545a3b3c50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56545a3b3bb8 <col:34> 'const char *' lvalue ParmVar 0x56545a38e408 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56545a3b3c68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56545a3b3bd8 <col:43> 'int' lvalue ParmVar 0x56545a38e488 'flags' 'int'
|     | |             `-DeclRefExpr 0x56545a3b3bf8 <col:50> 'Args::Slot *' lvalue Var 0x56545a3b3768 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56545a3b3da8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56545a3b3d90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56545a3b3d70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56545a3b3d40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56545a0d25c8
|     | |       `-ImplicitCastExpr 0x56545a3b3d28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56545a3b3d08 <col:23> 'String' lvalue Var 0x56545a3b3b10 'str' 'String'
|     | `-CompoundStmt 0x56545a3b43a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x56545a3b3e68 <line:813:13, col:23>
|     |   | `-VarDecl 0x56545a3b3dd0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56545a3b3e48 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56545a3b3fe8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56545a3b3e90 <col:13> '<bound member function type>' ->postparse 0x56545a3a31d8
|     |   | | `-CXXThisExpr 0x56545a3b3e80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56545a3b3f90 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56545a3b3ee0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56545a3b3ec0 <col:23> 'P' lvalue ParmVar 0x56545a38e500 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56545a3b3f28 <col:36> 'String' lvalue Var 0x56545a3b3b10 'str' 'String'
|     |   | | |-DeclRefExpr 0x56545a3b3f48 <col:41> 'T' lvalue Var 0x56545a3b3dd0 'sx' 'T'
|     |   | | `-UnaryOperator 0x56545a3b3f78 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56545a3b3f68 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56545a3b3fc8 <col:53> 'Args::Slot *' lvalue Var 0x56545a3b3768 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56545a3b4140 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56545a3b4078 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56545a3b4048 <col:17> 'bool' lvalue ->_read_status 0x56545a286570
|     |   | |   `-ImplicitCastExpr 0x56545a3b4028 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56545a3b4018 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56545a3b4118 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56545a3b40b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56545a3b4090 <col:17> 'Vector<T> *' lvalue Var 0x56545a3b39d0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56545a3b40f8 <col:30> 'T' lvalue Var 0x56545a3b3dd0 'sx' 'T'
|     |   |-BinaryOperator 0x56545a3b42c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56545a3b4158 <col:13> 'int' lvalue Var 0x56545a3b3800 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56545a3b42a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56545a3b4288 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56545a3b41f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56545a3b41d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56545a3b41b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56545a3b4178 <col:28> 'int' lvalue Var 0x56545a3b3800 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56545a3b4198 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56545a3b4270 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56545a3b4240 <col:49> 'bool' lvalue ->_read_status 0x56545a286570
|     |   |         `-ImplicitCastExpr 0x56545a3b4220 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56545a3b4210 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56545a3b4370 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56545a3b42e0 <col:13> 'int' lvalue ParmVar 0x56545a38e488 'flags' 'int'
|     |     `-UnaryOperator 0x56545a3b4358 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56545a3b4340 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56545a3b4320 <col:23> 'const int' lvalue Var 0x56545a372258 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56545a3b4508 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56545a3b4440 <col:9> 'bool' lvalue ->_read_status 0x56545a286570
|       | `-ImplicitCastExpr 0x56545a3b4420 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56545a3b4410 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56545a3b44e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56545a3b44c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56545a3b44b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56545a3b4470 <col:25> 'int' lvalue Var 0x56545a3b3800 'read_status' 'int'
|           `-IntegerLiteral 0x56545a3b4490 <col:40> 'int' 1
|-AccessSpecDecl 0x56545a38e8b0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56545a38e8d8 prev 0x56545a370558 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56545a38e9d0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56545a38eac0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56545a3b4560 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56545a38ebb0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56545a3b4570 <col:25, line:830:9>
| |-CXXMethodDecl 0x56545a38ecb0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56545a38ed60 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56545a38ee08 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56545a38ee08
| | `-ParmVarDecl 0x56545a38ef18 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56545a38f6d8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56545a38f6d8
|   `-ParmVarDecl 0x56545a38f7e8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56545a38ef88 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56545a38f0e8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56545a38f2e0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56545a38f190 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56545a38f208 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56545a3b4750 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56545a38f598 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56545a3b45c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56545a3b4580 <col:20> 'void *' lvalue ParmVar 0x56545a38f190 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56545a38f600 '_slot' 'char *'
| | | `-CXXNewExpr 0x56545a3b4648 <col:32, col:45> 'char *' array Function 0x565459ef6248 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56545a3b4630 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56545a3b4600 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56545a38f208 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56545a38f660 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56545a3b4710 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56545a3b46d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56545a38f208 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56545a3b47d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56545a38f3e0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56545a38ebb0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56545a3b4858 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56545a3b4838 <line:840:13, col:22> 'void' array Function 0x565459ef65a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56545a3b4820 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56545a3b47f0 <col:22> 'char *' lvalue ->_slot 0x56545a38f600
| |         `-CXXThisExpr 0x56545a3b47e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56545a38f4e0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56545a38ecb0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56545a3b4a48 <col:22, line:844:9>
| |   `-CallExpr 0x56545a3b49b0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56545a3b4998 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56545a3b4978 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56545a002028 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56545a3b49e8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56545a3b48c8 <col:20> 'void *' lvalue ->_ptr 0x56545a38f598
| |     |   `-CXXThisExpr 0x56545a3b48b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56545a3b4a18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56545a3b4a00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56545a3b4908 <col:26> 'char *' lvalue ->_slot 0x56545a38f600
| |     |     `-CXXThisExpr 0x56545a3b48f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56545a3b4a30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56545a3b4948 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56545a38f660
| |         `-CXXThisExpr 0x56545a3b4938 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56545a38f598 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56545a38f600 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56545a38f660 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56545a38f858 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56545a38f858
| | `-ParmVarDecl 0x56545a38f968 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56545a38fa08 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56545a38fa08
|   `-ParmVarDecl 0x56545a38fb18 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56545a38fcb8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56545a38fb88 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56545a38fc28 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56545a38ff50 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56545a390148 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56545a390018 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56545a3902c8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56545a3b4a80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56545a3b4a60 <col:20> 'T *' lvalue ParmVar 0x56545a390018 'ptr' 'T *'
|   | `-CompoundStmt 0x56545a3b4ad0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56545a390218 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56545a38ecb0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56545a3b4c80 <col:22, line:857:9>
|   |   `-CallExpr 0x56545a3b4c50 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56545a3b4ae0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56545a0ba758 0x56545a064a88
|   |     |-CXXOperatorCallExpr 0x56545a3b4be0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56545a3b4b70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56545a2c7708 0x56545a2c7328 0x56545a2c6f58 0x56545a2c6b78 0x56545a2c6798 0x56545a2c63c8
|   |     | `-MemberExpr 0x56545a3b4b40 <col:29> 'T *' lvalue ->_ptr 0x56545a3902c8
|   |     |   `-CXXThisExpr 0x56545a3b4b30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56545a3b4c20 <col:35> 'T' lvalue ->_slot 0x56545a390328
|   |       `-CXXThisExpr 0x56545a3b4c10 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56545a3902c8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56545a390328 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56545a390390 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56545a390490 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56545a3904e0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a390470 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56545a390450 <col:31> 'int' 48
|-FieldDecl 0x56545a390508 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56545a390568 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56545a3905c8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56545a390700 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56545a3a2870 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56545a3a28d0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56545a3a2980 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56545a3a2ba8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56545a3a2ab0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56545a3a2cf8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56545a3a2c68 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56545a3a2fc8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56545a3a2db8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56545a3a2e38 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56545a3a2ee0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56545a3a31d8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56545a3a3090 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56545a3a3108 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56545a3a32a8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56545a3a33f8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56545a3a3360 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56545a3a3788 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56545a3a34b8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56545a3a3538 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56545a3a35e0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56545a3a3698 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56545a3a39b0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56545a3a3860 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56545a3a38d8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56545a3a3cc8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56545a3a3a60 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56545a3a3c28 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56545a3a3b38 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a0c3480 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a0c3598 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56545a0c3628 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56545a0c36f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56545a0c37e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a0c39f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56545a0c38a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c3ba8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56545a0c3ab0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56545a0c3cf0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56545a0c3c60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56545a0c3e38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56545a0c3da8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c3f80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56545a0c3ef0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c4048 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56545a0c4190 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56545a0c4100 <col:28> col:31 'int'
|-CXXMethodDecl 0x56545a0c4258 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56545a0c43a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56545a0c4310 <col:28> col:31 'int'
|-CXXMethodDecl 0x56545a0c4518 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56545a0c4458 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c4660 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56545a0c45d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c4728 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56545a0c48e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56545a0c47d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56545a0c4850 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c4b38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56545a0c49a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a0c4a20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56545a0c4be8 <col:86> "" ""
|-CXXMethodDecl 0x56545a0c4e58 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56545a0c4cc8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56545a0c4d40 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c5008 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56545a0c4f18 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56545a0c51b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56545a0c50c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56545a0c5488 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56545a0c5270 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56545a0c52e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56545a0c5360 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c5768 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56545a0c5550 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56545a0c55c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a0c5640 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56545a0c5820 <col:115> "" ""
|-AccessSpecDecl 0x56545a0c5890 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56545a0c58c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a0c5dd0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56545a0c5dd0
| `-ParmVarDecl 0x56545a0c5ed8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56545a0c5f78 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56545a0c5f78
| `-ParmVarDecl 0x56545a0c6088 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56545a0fb6b8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56545a2ee4c0 <col:7>
|-CXXConstructorDecl 0x56545a0fb790 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56545a0fb790
| `-ParmVarDecl 0x56545a0fb8a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56545a0fb918 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56545a0fb918
| `-ParmVarDecl 0x56545a0fba28 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56545a2f0ec0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a2dd068 prev 0x56545a2d2270 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a2dd160 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56545a2dd250 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56545a2dd378 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56545a2dd4f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56545a2dd678 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56545a2dd7f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56545a2ee628 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56545a2eee98 <col:11>
|-CXXDestructorDecl 0x56545a2ee700 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56545a2ee838 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56545a2ee838
| `-ParmVarDecl 0x56545a2ee948 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56545a2ee9e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56545a2ee9e8
| `-ParmVarDecl 0x56545a2eeaf8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56545a2f18b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56545a2f19c8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56545a2f1c48 <col:11>
|   `-ReturnStmt 0x56545a2f1c38 <col:11>
|     `-UnaryOperator 0x56545a2f1c20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56545a2f1c10 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56545a2f1a38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56545a2f1a38
  `-ParmVarDecl 0x56545a2f1b48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a2dd860 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a2dd978 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56545a2dda18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56545a2dda80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56545a2ddae8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56545a2ddb50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56545a2ddbb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56545a2ddc70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56545a2ddcd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56545a2ddd30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56545a2ee538 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56545a2dda18 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56545a2eeea8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56545a2eef00 <col:12>
|-CXXConstructorDecl 0x56545a2eeb68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56545a2eeb68
| `-ParmVarDecl 0x56545a2eec78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56545a2eed18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56545a2eed18
| `-ParmVarDecl 0x56545a2eee28 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56545a2f0fa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a2cb980 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56545a2cba98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56545a2cbb28 <col:16, col:22> col:16 public
|-EnumDecl 0x56545a2cbb50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56545a2cbc50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56545a2cbd30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2cbc30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56545a2cbc10 <col:21> 'int' 28
| `-EnumConstantDecl 0x56545a2cbce0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56545a2cbd48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a2cbcc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56545a2cbca0 <col:22> 'int' 64
|-CXXMethodDecl 0x56545a2cc088 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56545a2cbd70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a2cbdf0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56545a2cbe68 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a2cbee0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56545a2cc148 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56545a2cc348 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56545a2cc1c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56545a2cc238 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56545a2cc3f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56545a2cc558 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56545a2cc468 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56545a2cc600 <col:72> warn_unused_result ""
|-TypedefDecl 0x56545a2cc960 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56545a2cc8f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56545a2cc890 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56545a2cc850 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x565459da34e0 'void'
|       |-PointerType 0x56545a04bd20 'unsigned char *'
|       | `-BuiltinType 0x565459da35e0 'unsigned char'
|       |-TypedefType 0x565459e482f0 'size_t' sugar
|       | |-Typedef 0x565459e13be0 'size_t'
|       | `-BuiltinType 0x565459da3640 'unsigned long'
|       `-PointerType 0x565459da3ce0 'void *'
|         `-BuiltinType 0x565459da34e0 'void'
|-CXXMethodDecl 0x56545a2ccdd8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56545a2cc9d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56545a2cca48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a2ccae0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56545a2ccb60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56545a2e74d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56545a2e74b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56545a2e7480 <col:58> 'int' 0
| |-ParmVarDecl 0x56545a2ccbe0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56545a2e74f8 <col:76> 'int' 0
| |-ParmVarDecl 0x56545a2ccc60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56545a2e7518 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56545a2ccea8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56545a2ccf28 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56545a2ccfe8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56545a2cd088 <col:20>
| `-OptimizeNoneAttr 0x56545a2cd0e0 <col:30>
|-CXXMethodDecl 0x56545a2cd158 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56545a2cd1f8 <col:20>
| `-OptimizeNoneAttr 0x56545a2cd250 <col:30>
|-CXXMethodDecl 0x56545a2cd2c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56545a2cd368 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56545a2cd418 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56545a2cd4b8 <col:20>
| |-OptimizeNoneAttr 0x56545a2cd510 <col:30>
| `-WarnUnusedResultAttr 0x56545a2cd538 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56545a2cd590 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56545a2cd630 <col:20>
| `-OptimizeNoneAttr 0x56545a2cd688 <col:30>
|-CXXMethodDecl 0x56545a2cd6d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56545a2cd778 <col:20>
| `-OptimizeNoneAttr 0x56545a2cd7d0 <col:30>
|-CXXMethodDecl 0x56545a2cd818 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56545a2cd8b8 <col:20>
| `-OptimizeNoneAttr 0x56545a2cd910 <col:30>
|-CXXMethodDecl 0x56545a2cd958 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a2cda18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a2cdae0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2cdba8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2cdc68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a2cdd88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56545a2e75e0 <col:54, line:99:5>
|   `-ReturnStmt 0x56545a2e75d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56545a2e75b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56545a2e7588 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56545a2de068
|         `-CXXThisExpr 0x56545a2e7578 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56545a2cdf28 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56545a2cde38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56545a2e7690 <col:67, line:103:5>
|   `-BinaryOperator 0x56545a2e7670 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56545a2e7608 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56545a2de068
|     | `-CXXThisExpr 0x56545a2e75f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56545a2e7658 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56545a2e7638 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56545a2cde38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56545a2ce020 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56545a2e7710 <col:33, line:107:5>
|   `-ReturnStmt 0x56545a2e7700 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56545a2e76e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56545a2e76b8 <col:16> 'void *' lvalue ->_destructor_argument 0x56545a2de0d0
|         `-CXXThisExpr 0x56545a2e76a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56545a2ce0e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56545a2e7d40 <col:25, line:113:5>
|   |-ParenExpr 0x56545a2e7a88 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56545a2e7a58 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2e77c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56545a2e77a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56545a2e7768 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56545a2e7738 <col:24> '<bound member function type>' ->shared 0x56545a2cd158
|   |   |       `-ImplicitCastExpr 0x56545a2e7788 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56545a2e7728 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56545a2e7828 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2e7808 <col:42> 'int' 0
|   |   `-CallExpr 0x56545a2e79b8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56545a2e79a0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2e7980 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2e79f8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e7898 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56545a2e7a10 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e78c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2e7a28 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2e78f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56545a2e7a40 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2e7968 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2e7950 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2e7918 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56545a2e7c88 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56545a2e7ab8 <col:2> 'unsigned char *' lvalue ->_head 0x56545a2dde70
|   | | `-CXXThisExpr 0x56545a2e7aa8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56545a2e7c70 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56545a2e7c50 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56545a2e7af8 <col:10> 'unsigned char *' lvalue ->_data 0x56545a2dded8
|   |     | `-CXXThisExpr 0x56545a2e7ae8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56545a2e7c38 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56545a2e7c18 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56545a2e7b38 <col:18> 'unsigned char *' lvalue ->_tail 0x56545a2ddf40
|   |         | `-CXXThisExpr 0x56545a2e7b28 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56545a2e7c00 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56545a2e7be0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56545a2e7b78 <col:26> 'unsigned char *' lvalue ->_end 0x56545a2ddfa8
|   |             | `-CXXThisExpr 0x56545a2e7b68 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56545a2e7bc8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56545a2e7ba8 <col:33> 'int' 0
|   `-BinaryOperator 0x56545a2e7d20 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56545a2e7cb8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56545a2de068
|     | `-CXXThisExpr 0x56545a2e7ca8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56545a2e7d08 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56545a2e7ce8 <col:16> 'int' 0
|-CXXMethodDecl 0x56545a2ce220 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56545a2ce190 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2ce2c8 <col:20>
| |-OptimizeNoneAttr 0x56545a2ce320 <col:30>
| `-WarnUnusedResultAttr 0x56545a2ce348 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56545a2ce418 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56545a2ce388 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2ce4c0 <col:20>
| |-OptimizeNoneAttr 0x56545a2ce518 <col:30>
| `-WarnUnusedResultAttr 0x56545a2ce540 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56545a2ce678 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56545a2ce580 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56545a2ce720 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56545a2ce820 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56545a2ce790 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2ce8c8 <col:20>
| `-OptimizeNoneAttr 0x56545a2ce920 <col:30>
|-CXXMethodDecl 0x56545a2ce9e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56545a2ce958 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56545a2cea90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56545a2ceb90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56545a2ceb00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56545a2cec38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56545a2ced38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56545a2ceca8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2cede0 <col:20>
| `-OptimizeNoneAttr 0x56545a2cee38 <col:30>
|-CXXMethodDecl 0x56545a2cefc8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56545a2cee78 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56545a2ceef0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56545a2e7538 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56545a2cf078 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56545a2cf278 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56545a2cf0f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56545a2cf168 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2cf488 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56545a2cf338 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56545a2cf3b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2cf698 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56545a2cf548 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56545a2cf5c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56545a2e7548 <col:39> 'int' 0
|-CXXMethodDecl 0x56545a2cf768 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56545a2cf830 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2cf8f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56545a2cf9b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a2cfa80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56545a2cfbc8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56545a2cfb38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56545a2cfd98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56545a2cfc88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56545a2cfd00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2cfe68 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56545a2cff28 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56545a2cffc8 <col:20>
| `-OptimizeNoneAttr 0x56545a2d0020 <col:30>
|-CXXMethodDecl 0x56545a2d0070 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56545a2d0110 <col:20>
| `-OptimizeNoneAttr 0x56545a2d0168 <col:30>
|-CXXMethodDecl 0x56545a2d01b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56545a2d0278 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a2d0340 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56545a2d03e0 <col:20>
| `-OptimizeNoneAttr 0x56545a2d0438 <col:30>
|-CXXMethodDecl 0x56545a2d0588 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56545a2d0478 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56545a2d04f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2d06d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56545a2d0648 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2d07b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56545a2d0870 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56545a2d0910 <col:20>
| `-OptimizeNoneAttr 0x56545a2d0968 <col:30>
|-CXXMethodDecl 0x56545a2d09b8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56545a2d0a58 <col:20>
| `-OptimizeNoneAttr 0x56545a2d0ab0 <col:30>
|-CXXMethodDecl 0x56545a2d0b00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56545a2d0bc8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56545a2d0c68 <col:20>
| `-OptimizeNoneAttr 0x56545a2d0cc0 <col:30>
|-CXXMethodDecl 0x56545a2d0d08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56545a2d0e28 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56545a2d0f98 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56545a2d0ed8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56545a2d1088 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56545a2d1128 <col:20>
| `-OptimizeNoneAttr 0x56545a2d1180 <col:30>
|-CXXMethodDecl 0x56545a2d11d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56545a2d1290 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56545a2d14c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56545a2d1340 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56545a2d13b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2d1578 <col:20>
| `-OptimizeNoneAttr 0x56545a2d15d0 <col:30>
|-CXXMethodDecl 0x56545a2d1678 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56545a2d1718 <col:20>
| `-OptimizeNoneAttr 0x56545a2d1770 <col:30>
|-CXXMethodDecl 0x56545a2d17c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56545a2d1860 <col:20>
| `-OptimizeNoneAttr 0x56545a2d18b8 <col:30>
|-CXXMethodDecl 0x56545a2d1900 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56545a2d19a0 <col:20>
| `-OptimizeNoneAttr 0x56545a2d19f8 <col:30>
|-CXXMethodDecl 0x56545a2d1af8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56545a2d1a30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56545a2d1ba0 <col:20>
| `-OptimizeNoneAttr 0x56545a2d1bf8 <col:30>
|-CXXMethodDecl 0x56545a2d1db8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56545a2d1c30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56545a2d1ca8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2d1e68 <col:20>
| `-OptimizeNoneAttr 0x56545a2d1ec0 <col:30>
|-CXXMethodDecl 0x56545a2d1f68 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56545a2d2088 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56545a2d21a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56545a2d2248 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56545a2d2270 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56545a2d2398 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56545a2d2438 <col:20>
| `-OptimizeNoneAttr 0x56545a2d2490 <col:30>
|-CXXMethodDecl 0x56545a2d2538 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56545a2d25d8 <col:20>
| `-OptimizeNoneAttr 0x56545a2d2630 <col:30>
|-AccessSpecDecl 0x56545a2d2658 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56545a2d2680 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56545a2d2780 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56545a2d27d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a2d2760 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56545a2d2740 <col:14> 'int' 48
|-CXXMethodDecl 0x56545a2d2838 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56545a2d28d8 <col:20>
| `-OptimizeNoneAttr 0x56545a2d2930 <col:30>
|-CXXMethodDecl 0x56545a2d29a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56545a2d2a48 <col:20>
| `-OptimizeNoneAttr 0x56545a2d2aa0 <col:30>
|-CXXMethodDecl 0x56545a2d2b68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56545a2d2ad8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56545a2d2d08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56545a2d2ea8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56545a2d2db8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56545a2d2f50 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56545a2d3050 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56545a2d3400 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d3030 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56545a2d3010 <col:9> 'int' 0
| |-EnumConstantDecl 0x56545a2d30e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56545a2d3418 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d30c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56545a2d30a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56545a2d3170 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56545a2d3430 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d3150 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56545a2d3130 <col:14> 'int' 2
| |-EnumConstantDecl 0x56545a2d3200 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56545a2d3448 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d31e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56545a2d31c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x56545a2d3290 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56545a2d3460 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d3270 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56545a2d3250 <col:13> 'int' 4
| |-EnumConstantDecl 0x56545a2d3320 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56545a2d3478 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d3300 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56545a2d32e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x56545a2d33b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56545a2d3490 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a2d3390 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56545a2d3370 <col:14> 'int' 6
|-CXXMethodDecl 0x56545a2d34f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56545a2d3598 <col:20>
| `-OptimizeNoneAttr 0x56545a2d35f0 <col:30>
|-CXXMethodDecl 0x56545a2d36e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56545a2d3628 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56545a2d3790 <col:20>
| `-OptimizeNoneAttr 0x56545a2d37e8 <col:30>
|-CXXMethodDecl 0x56545a2d3858 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56545a2d3980 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56545a2d3af8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56545a2d3a30 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56545a2d3bc0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56545a2d3c88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56545a2d3dc8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56545a2d3d38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56545a2d3e70 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56545a2d3f70 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56545a2d4170 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d3f50 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56545a2d3f30 <col:23> 'int' 0
| |-EnumConstantDecl 0x56545a2d4000 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56545a2d4188 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d3fe0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56545a2d3fc0 <col:45> 'int' 4
| |-EnumConstantDecl 0x56545a2d4090 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56545a2d41a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d4070 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56545a2d4050 <col:24> 'int' 0
| `-EnumConstantDecl 0x56545a2d4120 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56545a2d41b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a2d4100 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56545a2d40e0 <col:47> 'int' 16
|-CXXMethodDecl 0x56545a2d4218 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56545a2d4388 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56545a2d42c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56545a2d4430 <col:20>
| `-OptimizeNoneAttr 0x56545a2d4488 <col:30>
|-CXXMethodDecl 0x56545a2d44d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56545a2e7e60 <col:18, col:36>
|   `-ReturnStmt 0x56545a2e7e50 <col:20, col:33>
|     `-ImplicitCastExpr 0x56545a2e7e38 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56545a2e7e18 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56545a2e7de8 <col:27> '<bound member function type>' ->xanno 0x56545a2d2538
|           `-CXXThisExpr 0x56545a2e7dd8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56545a2d45d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56545a2e7f70 <col:30, col:48>
|   `-ReturnStmt 0x56545a2e7f60 <col:32, col:45>
|     `-ImplicitCastExpr 0x56545a2e7f48 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56545a2e7f28 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56545a2e7ef8 <col:39> '<bound member function type>' ->xanno 0x56545a2d2398
|           `-CXXThisExpr 0x56545a2e7ee8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56545a2d46b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56545a2e8108 <col:24, col:50>
|   `-ReturnStmt 0x56545a2e80f8 <col:26, col:47>
|     `-UnaryOperator 0x56545a2e80e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56545a2e80c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56545a2e80a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56545a2e8058 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56545a2dd378
|         |   `-CXXMemberCallExpr 0x56545a2e8038 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56545a2e8008 <col:34> '<bound member function type>' ->xanno 0x56545a2d2538
|         |       `-CXXThisExpr 0x56545a2e7ff8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56545a2e8088 <col:46> 'int' 0
|-CXXMethodDecl 0x56545a2d47c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56545a2e82d8 <col:36, col:62>
|   `-ReturnStmt 0x56545a2e82c8 <col:38, col:59>
|     `-UnaryOperator 0x56545a2e82b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56545a2e8290 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56545a2e8278 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56545a2e81f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56545a2dd378
|         |   `-CXXMemberCallExpr 0x56545a2e81d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56545a2e81a0 <col:46> '<bound member function type>' ->xanno 0x56545a2d2398
|         |       `-CXXThisExpr 0x56545a2e8190 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56545a2e8220 <col:58> 'int' 0
|-CXXMethodDecl 0x56545a2d48d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56545a2e8470 <col:26, col:53>
|   `-ReturnStmt 0x56545a2e8460 <col:28, col:50>
|     `-UnaryOperator 0x56545a2e8448 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56545a2e8428 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56545a2e8410 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56545a2e83c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56545a2dd678
|         |   `-CXXMemberCallExpr 0x56545a2e83a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56545a2e8370 <col:36> '<bound member function type>' ->xanno 0x56545a2d2538
|         |       `-CXXThisExpr 0x56545a2e8360 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56545a2e83f0 <col:49> 'int' 0
|-CXXMethodDecl 0x56545a2d49f8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56545a2e8648 <col:38, col:65>
|   `-ReturnStmt 0x56545a2e8638 <col:40, col:62>
|     `-UnaryOperator 0x56545a2e8620 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56545a2e8600 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56545a2e85e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56545a2e8558 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56545a2dd678
|         |   `-CXXMemberCallExpr 0x56545a2e8538 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56545a2e8508 <col:48> '<bound member function type>' ->xanno 0x56545a2d2398
|         |       `-CXXThisExpr 0x56545a2e84f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56545a2e8588 <col:61> 'int' 0
|-CXXMethodDecl 0x56545a2d4ba8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56545a2d4ab0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56545a2e8d18 <col:34, line:463:5>
|   |-ParenExpr 0x56545a2e8b60 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56545a2e8b30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2e8798 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2e8768 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2e86b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2e86a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2e8660 <col:23> 'int' lvalue ParmVar 0x56545a2d4ab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2e8680 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2e8748 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2e8718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2e86d8 <col:33> 'int' lvalue ParmVar 0x56545a2d4ab0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56545a2e8730 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56545a2e86f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56545a2e87f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2e87d8 <col:56> 'int' 0
|   |   `-CallExpr 0x56545a2e8a90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56545a2e8a78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2e8a58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2e8ad0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e88e8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56545a2e8ae8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e8918 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2e8b00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2e8950 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56545a2e8b18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2e8a40 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2e8a28 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2e89e8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56545a2e8d08 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56545a2e8cf0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56545a2e8cd0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56545a2e8ca0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56545a2e8c50 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56545a2dd378
|         |   `-CXXMemberCallExpr 0x56545a2e8c30 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56545a2e8c00 <col:9> '<bound member function type>' ->xanno 0x56545a2d2398
|         |       `-CXXThisExpr 0x56545a2e8bf0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56545a2e8cb8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56545a2e8c80 <col:21> 'int' lvalue ParmVar 0x56545a2d4ab0 'i' 'int'
|-CXXMethodDecl 0x56545a2d4df8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56545a2d4c68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56545a2d4ce0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56545a2e93a8 <col:40, line:472:5>
|   |-ParenExpr 0x56545a2e91c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56545a2e9190 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2e8e70 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2e8e40 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2e8d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2e8d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2e8d38 <col:23> 'int' lvalue ParmVar 0x56545a2d4c68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2e8d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2e8e20 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2e8df0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2e8db0 <col:33> 'int' lvalue ParmVar 0x56545a2d4c68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56545a2e8e08 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56545a2e8dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56545a2e8ed0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2e8eb0 <col:56> 'int' 0
|   |   `-CallExpr 0x56545a2e90f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56545a2e90d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2e90b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2e9130 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e8f40 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56545a2e9148 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e8f70 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2e9160 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2e8fa8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56545a2e9178 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2e90a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2e9088 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2e9048 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56545a2e9388 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56545a2e9330 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56545a2e9300 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56545a2e92b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56545a2dd378
|     | |   `-CXXMemberCallExpr 0x56545a2e9290 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56545a2e9260 <col:2> '<bound member function type>' ->xanno 0x56545a2d2538
|     | |       `-CXXThisExpr 0x56545a2e9250 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56545a2e9318 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56545a2e92e0 <col:14> 'int' lvalue ParmVar 0x56545a2d4c68 'i' 'int'
|     `-ImplicitCastExpr 0x56545a2e9370 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56545a2e9350 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56545a2d4ce0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56545a2d4fb8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56545a2d4ec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56545a2e9b28 <col:36, line:485:5>
|   |-ParenExpr 0x56545a2e9890 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2e9860 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2e9540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2e9510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2e9420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2e9408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2e93c8 <col:23> 'int' lvalue ParmVar 0x56545a2d4ec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2e93e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2e94f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2e94d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2e9440 <col:33> 'int' lvalue ParmVar 0x56545a2d4ec0 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2e94b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2e94a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2e9460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2e9480 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56545a2e95a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2e9580 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2e97c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2e97a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2e9788 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2e9800 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e9610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56545a2e9818 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e9648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2e9830 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2e9680 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56545a2e9848 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2e9770 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2e9758 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2e9718 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56545a2e9b18 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56545a2e9b00 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56545a2e9ae8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56545a2e9ab8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56545a2e9a58 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56545a2e9a28 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56545a2e99a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56545a2dd250
|             |   `-CXXMemberCallExpr 0x56545a2e9980 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56545a2e9950 <col:61> '<bound member function type>' ->xanno 0x56545a2d2398
|             |       `-CXXThisExpr 0x56545a2e9940 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56545a2e9a40 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56545a2e99d0 <col:74> 'int' lvalue ParmVar 0x56545a2d4ec0 'i' 'int'
|-CXXMethodDecl 0x56545a2d5208 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56545a2d5078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56545a2d50f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56545a2ea278 <col:42, line:500:5>
|   |-ParenExpr 0x56545a2ea010 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2e9fe0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2e9cc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2e9c90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2e9ba0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2e9b88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2e9b48 <col:23> 'int' lvalue ParmVar 0x56545a2d5078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2e9b68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2e9c70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2e9c58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2e9bc0 <col:33> 'int' lvalue ParmVar 0x56545a2d5078 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2e9c38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2e9c20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2e9be0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2e9c00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56545a2e9d20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2e9d00 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2e9f40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2e9f28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2e9f08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2e9f80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e9d90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56545a2e9f98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2e9dc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2e9fb0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2e9e00 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56545a2e9fc8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2e9ef0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2e9ed8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2e9e98 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56545a2ea258 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56545a2ea208 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56545a2ea1d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56545a2ea180 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56545a2ea150 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56545a2ea100 <col:48, col:57> 'char [48]' lvalue ->c 0x56545a2dd250
|     |     |   `-CXXMemberCallExpr 0x56545a2ea0e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56545a2ea0b0 <col:48> '<bound member function type>' ->xanno 0x56545a2d2538
|     |     |       `-CXXThisExpr 0x56545a2ea0a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56545a2ea168 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56545a2ea130 <col:61> 'int' lvalue ParmVar 0x56545a2d5078 'i' 'int'
|     `-ImplicitCastExpr 0x56545a2ea240 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56545a2ea220 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56545a2d50f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56545a2d53c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56545a2d52d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56545a2ea9d8 <col:35, line:513:5>
|   |-ParenExpr 0x56545a2ea6e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2ea6b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2ea410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2ea3e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2ea2f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2ea2d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2ea298 <col:23> 'int' lvalue ParmVar 0x56545a2d52d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2ea2b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2ea3c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2ea3a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2ea310 <col:33> 'int' lvalue ParmVar 0x56545a2d52d0 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2ea388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2ea370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2ea330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2ea350 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56545a2ea470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2ea450 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2ea618 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ea600 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ea5e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ea658 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ea4e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56545a2ea670 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ea518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ea688 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2ea550 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56545a2ea6a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ea5c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ea5b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ea570 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56545a2ea9c8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56545a2ea9b0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56545a2ea998 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56545a2ea968 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56545a2ea8e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56545a2ea8b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56545a2ea860 <col:60, col:69> 'char const[48]' lvalue ->c 0x56545a2dd250
|             |   `-CXXMemberCallExpr 0x56545a2ea840 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56545a2ea810 <col:60> '<bound member function type>' ->xanno 0x56545a2d2398
|             |       `-CXXThisExpr 0x56545a2ea800 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56545a2ea8c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56545a2ea890 <col:73> 'int' lvalue ParmVar 0x56545a2d52d0 'i' 'int'
|-CXXMethodDecl 0x56545a2d5618 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56545a2d5488 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56545a2d5500 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56545a2eb0f8 <col:41, line:528:5>
|   |-ParenExpr 0x56545a2eae80 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2eae50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2eab70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2eab40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2eaa50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2eaa38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2ea9f8 <col:23> 'int' lvalue ParmVar 0x56545a2d5488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2eaa18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2eab20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2eab08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2eaa70 <col:33> 'int' lvalue ParmVar 0x56545a2d5488 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2eaae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2eaad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2eaa90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2eaab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56545a2eabd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2eabb0 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2eadb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ead98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ead78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2eadf0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eac40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56545a2eae08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eac78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2eae20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2eacb0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56545a2eae38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ead60 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ead48 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ead08 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56545a2eb0d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56545a2eb088 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56545a2eb058 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56545a2eb000 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56545a2eafc0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56545a2eaf70 <col:47, col:56> 'char [48]' lvalue ->c 0x56545a2dd250
|     |     |   `-CXXMemberCallExpr 0x56545a2eaf50 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56545a2eaf20 <col:47> '<bound member function type>' ->xanno 0x56545a2d2538
|     |     |       `-CXXThisExpr 0x56545a2eaf10 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56545a2eafd8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56545a2eafa0 <col:60> 'int' lvalue ParmVar 0x56545a2d5488 'i' 'int'
|     `-ImplicitCastExpr 0x56545a2eb0c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56545a2eb0a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56545a2d5500 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56545a2d57d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56545a2d56e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56545a2eb7c8 <col:36, line:541:5>
|   |-ParenExpr 0x56545a2eb568 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2eb538 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2eb290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2eb260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2eb170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2eb158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2eb118 <col:23> 'int' lvalue ParmVar 0x56545a2d56e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2eb138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2eb240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2eb228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2eb190 <col:33> 'int' lvalue ParmVar 0x56545a2d56e0 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2eb208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2eb1f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2eb1b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2eb1d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56545a2eb2f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2eb2d0 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2eb498 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2eb480 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2eb460 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2eb4d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eb360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56545a2eb4f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eb398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2eb508 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2eb3d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56545a2eb520 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2eb448 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2eb430 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2eb3f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56545a2eb7b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56545a2eb7a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56545a2eb788 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56545a2eb758 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56545a2eb700 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56545a2eb6d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56545a2eb680 <col:61, col:70> 'char const[48]' lvalue ->c 0x56545a2dd250
|             |   `-CXXMemberCallExpr 0x56545a2eb660 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56545a2eb630 <col:61> '<bound member function type>' ->xanno 0x56545a2d2398
|             |       `-CXXThisExpr 0x56545a2eb620 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56545a2eb6e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56545a2eb6b0 <col:74> 'int' lvalue ParmVar 0x56545a2d56e0 'i' 'int'
|-CXXMethodDecl 0x56545a2d59a8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56545a2d5898 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56545a2d5910 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56545a2d5a58 <col:20>
| `-OptimizeNoneAttr 0x56545a2d5ab0 <col:30>
|-CXXMethodDecl 0x56545a2d5be8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56545a2d5af0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56545a2ebe98 <col:35, line:562:5>
|   |-ParenExpr 0x56545a2ebc38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2ebc08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2eb960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2eb930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2eb840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2eb828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2eb7e8 <col:23> 'int' lvalue ParmVar 0x56545a2d5af0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2eb808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2eb910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2eb8f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2eb860 <col:33> 'int' lvalue ParmVar 0x56545a2d5af0 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2eb8d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2eb8c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2eb880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2eb8a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56545a2eb9c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2eb9a0 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2ebb68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ebb50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ebb30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ebba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eba30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56545a2ebbc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eba68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ebbd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2ebaa0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56545a2ebbf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ebb18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ebb00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ebac0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56545a2ebe88 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56545a2ebe70 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56545a2ebe58 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56545a2ebe28 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56545a2ebdd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56545a2ebda0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56545a2ebd50 <col:60, col:69> 'char const[48]' lvalue ->c 0x56545a2dd250
|             |   `-CXXMemberCallExpr 0x56545a2ebd30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56545a2ebd00 <col:60> '<bound member function type>' ->xanno 0x56545a2d2398
|             |       `-CXXThisExpr 0x56545a2ebcf0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56545a2ebdb8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56545a2ebd80 <col:73> 'int' lvalue ParmVar 0x56545a2d5af0 'i' 'int'
|-CXXMethodDecl 0x56545a2d5df8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56545a2d5ca8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56545a2d5d20 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56545a2ec578 <col:41, line:577:5>
|   |-ParenExpr 0x56545a2ec308 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2ec2d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2ec030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2ec000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2ebf10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2ebef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2ebeb8 <col:23> 'int' lvalue ParmVar 0x56545a2d5ca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2ebed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2ebfe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2ebfc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2ebf30 <col:33> 'int' lvalue ParmVar 0x56545a2d5ca8 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2ebfa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2ebf90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2ebf50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2ebf70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56545a2ec090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2ec070 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2ec238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ec220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ec200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ec278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ec100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56545a2ec290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ec138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ec2a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2ec170 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56545a2ec2c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ec1e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ec1d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ec190 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56545a2ec558 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56545a2ec508 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56545a2ec4d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56545a2ec478 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56545a2ec448 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56545a2ec3f8 <col:47, col:56> 'char [48]' lvalue ->c 0x56545a2dd250
|     |     |   `-CXXMemberCallExpr 0x56545a2ec3d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56545a2ec3a8 <col:47> '<bound member function type>' ->xanno 0x56545a2d2538
|     |     |       `-CXXThisExpr 0x56545a2ec398 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56545a2ec460 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56545a2ec428 <col:60> 'int' lvalue ParmVar 0x56545a2d5ca8 'i' 'int'
|     `-ImplicitCastExpr 0x56545a2ec540 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56545a2ec520 <col:65> 'int32_t':'int' lvalue ParmVar 0x56545a2d5d20 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56545a2d5fb8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56545a2d5ec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56545a2ecca8 <col:36, line:591:5>
|   |-ParenExpr 0x56545a2ec9e8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2ec9b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2ec710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2ec6e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2ec5f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2ec5d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2ec598 <col:23> 'int' lvalue ParmVar 0x56545a2d5ec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2ec5b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2ec6c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2ec6a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2ec610 <col:33> 'int' lvalue ParmVar 0x56545a2d5ec0 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2ec688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2ec670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2ec630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2ec650 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56545a2ec770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2ec750 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2ec918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ec900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ec8e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ec958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ec7e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56545a2ec970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ec818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ec988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2ec850 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56545a2ec9a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ec8c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ec8b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ec870 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56545a2ecc98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56545a2ecc80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56545a2ecc68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56545a2ecc38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56545a2ecbb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56545a2ecb80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56545a2ecb30 <col:61, col:70> 'char const[48]' lvalue ->c 0x56545a2dd250
|             |   `-CXXMemberCallExpr 0x56545a2ecb10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56545a2ecae0 <col:61> '<bound member function type>' ->xanno 0x56545a2d2398
|             |       `-CXXThisExpr 0x56545a2ecad0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56545a2ecb98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56545a2ecb60 <col:74> 'int' lvalue ParmVar 0x56545a2d5ec0 'i' 'int'
|-CXXMethodDecl 0x56545a2d6208 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56545a2d6078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56545a2d60f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56545a2ed388 <col:42, line:606:5>
|   |-ParenExpr 0x56545a2ed118 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56545a2ed0e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2ece40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2ece10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2ecd20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2ecd08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2eccc8 <col:23> 'int' lvalue ParmVar 0x56545a2d6078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2ecce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2ecdf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56545a2ecdd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2ecd40 <col:33> 'int' lvalue ParmVar 0x56545a2d6078 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2ecdb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2ecda0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2ecd60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56545a2ecd80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56545a2ecea0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2ece80 <col:60> 'int' 0
|   |   `-CallExpr 0x56545a2ed048 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ed030 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ed010 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ed088 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ecf10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56545a2ed0a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ecf48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ed0b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2ecf80 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56545a2ed0d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ecff8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ecfe0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ecfa0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56545a2ed368 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56545a2ed318 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56545a2ed2e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56545a2ed288 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56545a2ed258 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56545a2ed208 <col:48, col:57> 'char [48]' lvalue ->c 0x56545a2dd250
|     |     |   `-CXXMemberCallExpr 0x56545a2ed1e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56545a2ed1b8 <col:48> '<bound member function type>' ->xanno 0x56545a2d2538
|     |     |       `-CXXThisExpr 0x56545a2ed1a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56545a2ed270 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56545a2ed238 <col:61> 'int' lvalue ParmVar 0x56545a2d6078 'i' 'int'
|     `-ImplicitCastExpr 0x56545a2ed350 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56545a2ed330 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56545a2d60f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56545a2d63a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56545a2d62d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56545a2edbf8 <col:33, line:620:5>
|   |-ParenExpr 0x56545a2ed970 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56545a2ed940 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2ed590 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2ed560 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2ed400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2ed3e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2ed3a8 <col:23> 'int' lvalue ParmVar 0x56545a2d62d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2ed3c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2ed540 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56545a2ed528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2ed420 <col:33> 'int' lvalue ParmVar 0x56545a2d62d0 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2ed508 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2ed4f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2ed440 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56545a2ed4c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56545a2ed4b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56545a2ed478 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56545a2ed5f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2ed5d0 <col:79> 'int' 0
|   |   `-CallExpr 0x56545a2ed8a0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ed888 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ed868 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ed8e0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ed6d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56545a2ed8f8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2ed720 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ed910 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2ed758 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56545a2ed928 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ed850 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ed838 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2ed7f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56545a2edbe8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56545a2edbd0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56545a2edbb8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56545a2edb88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56545a2edb00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56545a2edad0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56545a2eda80 <col:67, col:76> 'char const[48]' lvalue ->c 0x56545a2dd250
|             |   `-CXXMemberCallExpr 0x56545a2eda60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56545a2eda30 <col:67> '<bound member function type>' ->xanno 0x56545a2d2398
|             |       `-CXXThisExpr 0x56545a2eda20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56545a2edae8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56545a2edab0 <col:80> 'int' lvalue ParmVar 0x56545a2d62d0 'i' 'int'
|-CXXMethodDecl 0x56545a2d65b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56545a2d6460 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56545a2d64e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56545a2ee420 <col:45, line:635:5>
|   |-ParenExpr 0x56545a2ee168 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56545a2ee138 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56545a2ede00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56545a2eddd0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56545a2edc70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56545a2edc58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56545a2edc18 <col:23> 'int' lvalue ParmVar 0x56545a2d6460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56545a2edc38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56545a2eddb0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56545a2edd98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56545a2edc90 <col:33> 'int' lvalue ParmVar 0x56545a2d6460 'i' 'int'
|   |   |     `-BinaryOperator 0x56545a2edd78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56545a2edd60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56545a2edcb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56545a2d2780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56545a2edd38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56545a2edd20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56545a2edce8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56545a2ede60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56545a2ede40 <col:79> 'int' 0
|   |   `-CallExpr 0x56545a2ee098 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56545a2ee080 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56545a2ee060 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x565459e3f050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56545a2ee0d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2eded0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56545a2ee0f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56545a2edf18 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56545a2ee108 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56545a2edf50 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56545a2ee120 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56545a2ee048 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56545a2ee030 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56545a2edfe8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56545a2ee400 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56545a2ee368 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56545a2ee338 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56545a2ee2d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56545a2ee2a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56545a2ee258 <col:54, col:63> 'char [48]' lvalue ->c 0x56545a2dd250
|     |     |   `-CXXMemberCallExpr 0x56545a2ee238 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56545a2ee208 <col:54> '<bound member function type>' ->xanno 0x56545a2d2538
|     |     |       `-CXXThisExpr 0x56545a2ee1f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56545a2ee2c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56545a2ee288 <col:67> 'int' lvalue ParmVar 0x56545a2d6460 'i' 'int'
|     `-CXXConstCastExpr 0x56545a2ee3d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56545a2ee3b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56545a2ee380 <col:91> 'const void *' lvalue ParmVar 0x56545a2d64e0 'x' 'const void *'
|-CXXMethodDecl 0x56545a2d6688 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56545a2ee4a8 <col:34, line:640:5>
|   `-ReturnStmt 0x56545a2ee498 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56545a2ee480 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56545a2ee450 <col:16> 'Packet *' lvalue ->_data_packet 0x56545a2dde08
|         `-CXXThisExpr 0x56545a2ee440 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56545a2d67c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56545a2d6738 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56545a2e7568 <col:46> 'bool' true
|-CXXMethodDecl 0x56545a2d6948 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56545a2d6880 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56545a2d69f0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56545a2d71a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56545a2d6af0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d7210 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6ad0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56545a2d6ab0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56545a2cbc50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56545a2d6b80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d7228 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6b60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56545a2d6b40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56545a2cbce0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56545a2d6c10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d7240 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6bf0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56545a2d6bd0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56545a2d6ca0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d7258 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6c80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56545a2d6c60 <col:19> 'int' 16
| |-EnumConstantDecl 0x56545a2d6d30 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d7270 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6d10 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56545a2d6cf0 <col:21> 'int' 16
| |-EnumConstantDecl 0x56545a2d6dc0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d7288 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6da0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56545a2d6d80 <col:19> 'int' 32
| |-EnumConstantDecl 0x56545a2d6e50 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d72a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6e30 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56545a2d6e10 <col:19> 'int' EnumConstant 0x56545a2d6ca0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56545a2d6ee0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d72b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6ec0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56545a2d6ea0 <col:19> 'int' EnumConstant 0x56545a2d6dc0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56545a2d6fb0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d72d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d6f90 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56545a2d6f70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56545a2d6f30 <col:23> 'int' EnumConstant 0x56545a2d6ee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56545a2d6f50 <col:40> 'int' 2
| |-EnumConstantDecl 0x56545a2d7080 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56545a2d72e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a2d7060 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56545a2d7040 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56545a2d7000 <col:23> 'int' EnumConstant 0x56545a2d6ee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56545a2d7020 <col:40> 'int' 4
| `-EnumConstantDecl 0x56545a2d7150 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56545a2d7300 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56545a2d7130 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56545a2d7110 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56545a2d70d0 <col:23> 'int' EnumConstant 0x56545a2d6ee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56545a2d70f0 <col:40> 'int' 8
|-CXXMethodDecl 0x56545a2d7340 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56545a2d73e0 <col:68> "" ""
|-CXXMethodDecl 0x56545a2d7478 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56545a2d7518 <col:45> "" ""
|-CXXMethodDecl 0x56545a2d75b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56545a2d7650 <col:57> "" ""
|-CXXMethodDecl 0x56545a2d76e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56545a2d7788 <col:45> "" ""
|-CXXMethodDecl 0x56545a2d7820 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56545a2d78c0 <col:57> "" ""
|-CXXMethodDecl 0x56545a2d7950 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56545a2d79f0 <col:51> "" ""
|-CXXMethodDecl 0x56545a2d7a80 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56545a2d7b20 <col:63> "" ""
|-CXXMethodDecl 0x56545a2d7bb0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56545a2d7c50 <col:53> "" ""
|-CXXMethodDecl 0x56545a2d7ce0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56545a2d7d80 <col:65> "" ""
|-CXXMethodDecl 0x56545a2d7e98 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56545a2d7e08 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56545a2d7f40 <col:61> "" ""
|-CXXMethodDecl 0x56545a2d80d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56545a2d7fc8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56545a2d8040 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56545a2d8188 <col:67> "" ""
|-CXXMethodDecl 0x56545a2d82a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56545a2d8210 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56545a2d8348 <col:63> "" ""
|-CXXMethodDecl 0x56545a2d84e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56545a2d83d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56545a2d8448 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56545a2d8590 <col:69> "" ""
|-CXXMethodDecl 0x56545a2d86a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56545a2d8618 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56545a2d8750 <col:63> "" ""
|-CXXMethodDecl 0x56545a2dae28 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56545a2dad18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56545a2dad90 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56545a2daed8 <col:69> "" ""
|-CXXMethodDecl 0x56545a2daff0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56545a2daf60 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56545a2db098 <col:62> "" ""
|-CXXMethodDecl 0x56545a2db230 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56545a2db120 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56545a2db198 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56545a2db2e0 <col:68> "" ""
|-CXXMethodDecl 0x56545a2db3f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56545a2db368 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56545a2db4a0 <col:63> "" ""
|-CXXMethodDecl 0x56545a2db638 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56545a2db528 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56545a2db5a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56545a2db6e8 <col:69> "" ""
|-CXXMethodDecl 0x56545a2db778 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56545a2db818 <col:64> "" ""
|-CXXMethodDecl 0x56545a2db8a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56545a2db948 <col:52> "" ""
|-CXXMethodDecl 0x56545a2db9d8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56545a2dba78 <col:67> "" ""
|-CXXMethodDecl 0x56545a2dbb08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56545a2dbba8 <col:55> "" ""
|-CXXMethodDecl 0x56545a2dbcc0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56545a2dbc30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56545a2dbd68 <col:58> "" ""
|-CXXMethodDecl 0x56545a2dbf00 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56545a2dbdf0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56545a2dbe68 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56545a2dbfb0 <col:62> "" ""
|-CXXMethodDecl 0x56545a2dc0c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56545a2dc038 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56545a2dc170 <col:58> "" ""
|-CXXMethodDecl 0x56545a2dc308 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56545a2dc1f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56545a2dc270 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56545a2dc3b8 <col:62> "" ""
|-CXXMethodDecl 0x56545a2dc4d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56545a2dc440 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56545a2dc578 <col:60> "" ""
|-CXXMethodDecl 0x56545a2dc710 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56545a2dc600 <col:34> col:37 'int'
| |-ParmVarDecl 0x56545a2dc678 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56545a2dc7c0 <col:64> "" ""
|-CXXMethodDecl 0x56545a2dc8d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56545a2dc848 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56545a2dc980 <col:58> "" ""
|-CXXMethodDecl 0x56545a2dcb18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56545a2dca08 <col:33> col:36 'int'
| |-ParmVarDecl 0x56545a2dca80 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56545a2dcbc8 <col:62> "" ""
|-CXXMethodDecl 0x56545a2dcce0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56545a2dcc50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56545a2dcd88 <col:59> "" ""
|-CXXMethodDecl 0x56545a2dcf20 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56545a2dce10 <col:33> col:36 'int'
| |-ParmVarDecl 0x56545a2dce88 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56545a2dcfd0 <col:63> "" ""
|-AccessSpecDecl 0x56545a2dd040 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56545a2dd068 prev 0x56545a2d2270 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56545a2dd160 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56545a2dd250 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56545a2dd378 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56545a2dd4f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56545a2dd678 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56545a2dd7f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56545a2ee628 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56545a2eee98 <col:11>
| |-CXXDestructorDecl 0x56545a2ee700 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56545a2ee838 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56545a2ee838
| | `-ParmVarDecl 0x56545a2ee948 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56545a2ee9e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56545a2ee9e8
| | `-ParmVarDecl 0x56545a2eeaf8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56545a2f18b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56545a2f19c8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56545a2f1c48 <col:11>
| |   `-ReturnStmt 0x56545a2f1c38 <col:11>
| |     `-UnaryOperator 0x56545a2f1c20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56545a2f1c10 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56545a2f1a38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56545a2f1a38
|   `-ParmVarDecl 0x56545a2f1b48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56545a2dd860 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56545a2dd978 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56545a2dda18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56545a2dda80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56545a2ddae8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56545a2ddb50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56545a2ddbb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56545a2ddc70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56545a2ddcd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56545a2ddd30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56545a2ee538 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56545a2dda18 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56545a2eeea8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56545a2eef00 <col:12>
| |-CXXConstructorDecl 0x56545a2eeb68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56545a2eeb68
| | `-ParmVarDecl 0x56545a2eec78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56545a2eed18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56545a2eed18
| | `-ParmVarDecl 0x56545a2eee28 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56545a2f0fa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56545a2ddda8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56545a2dde08 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56545a2dde70 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56545a2dded8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56545a2ddf40 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56545a2ddfa8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56545a2de008 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56545a2de068 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56545a2de0d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56545a2de158 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56545a2ddda8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56545a2ee4d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56545a2de008 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56545a2eef10 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56545a2eef70 <col:21, line:755:5>
|-CXXConstructorDecl 0x56545a2de2f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56545a2de238 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56545a2de3f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56545a2de5d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56545a2de4e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56545a2de8a8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56545a2de690 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a2de708 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56545a2de780 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2deac8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56545a2de978 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56545a2de9f0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56545a2e70a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56545a2deb88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56545a2dec00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56545a2dec78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56545a2e7200 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56545a2e7170 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2e7348 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56545a2e72b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56545a2e7440 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a2ef010 prev 0x56545a2cb8d0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x56545a2ef148 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x56545a2ef1d8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x56545a2ef280 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x56545a2ef320 <col:20>
| `-OptimizeNoneAttr 0x56545a2ef378 <col:30>
|-CXXMethodDecl 0x56545a2ef3c8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x56545a2ef468 <col:20>
| `-OptimizeNoneAttr 0x56545a2ef4c0 <col:30>
|-CXXMethodDecl 0x56545a2ef510 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2ef5d8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2ef6a0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2ef7b8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x56545a2ef880 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x56545a2ef920 <col:20>
| `-OptimizeNoneAttr 0x56545a2ef978 <col:30>
|-CXXMethodDecl 0x56545a2ef9e8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x56545a2efa88 <col:20>
| `-OptimizeNoneAttr 0x56545a2efae0 <col:30>
|-CXXMethodDecl 0x56545a2efb88 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x56545a2efc28 <col:20>
| `-OptimizeNoneAttr 0x56545a2efc80 <col:30>
|-CXXMethodDecl 0x56545a2efcd0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56545a2efde8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x56545a2eff08 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x56545a2f0028 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x56545a2f00f0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x56545a2f0190 <col:62> "" ""
|-AccessSpecDecl 0x56545a2f0200 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x56545a2f0260 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x56545a2f0e58 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x56545a2f1080 <col:29, col:31>
|-CXXMethodDecl 0x56545a2f0328 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x56545a2f0468 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x56545a2f03d8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x56545a2f0560 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x56545a2f1090 <col:23, col:25>
|-CXXMethodDecl 0x56545a2f0718 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x56545a2f0650 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x56545a2f09e8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56545a2f07d0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56545a2f0848 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56545a2f08c0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56545a2f0b78 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x56545a2f0ab0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x56545a2f0c70 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x56545a2f0cd8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x56545a2f0cd8
  `-ParmVarDecl 0x56545a2f0de8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a3bfe00 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56545a3bff18 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56545a3bffa8 <col:16, col:22> col:16 public
|-EnumDecl 0x56545a3bffd0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56545a3c00d0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56545a3c0320 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3c00b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56545a3c0090 <col:21> 'int' 0
| |-EnumConstantDecl 0x56545a3c0160 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56545a3c0338 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3c0140 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56545a3c0120 <col:24> 'int' 22
| |-EnumConstantDecl 0x56545a3c01f0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56545a3c0350 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3c01d0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56545a3c01b0 <col:24> 'int' 34
| |-EnumConstantDecl 0x56545a3c0280 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56545a3c0368 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56545a3c0260 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56545a3c0240 <col:25> 'int' 95
| `-EnumConstantDecl 0x56545a3c02d0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56545a3c1ce0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56545a3c2118 <col:7>
|-CXXConstructorDecl 0x56545a3c1de8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56545a3c1de8
| `-ParmVarDecl 0x56545a3c1ef8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56545a3c1f98 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56545a3c20a8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56545a41a000 <col:7>
`-CXXDestructorDecl 0x56545a3c4228 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56545a3c0398 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56545a3c04f8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56545a3c0588 <col:32, col:38> col:32 public
|-TypedefDecl 0x56545a3c05c0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x565459ef85a0 'uint32_t' sugar
|   |-Typedef 0x565459e0c4c8 'uint32_t'
|   `-TypedefType 0x565459de55a0 '__uint32_t' sugar
|     |-Typedef 0x565459de5198 '__uint32_t'
|     `-BuiltinType 0x565459da3620 'unsigned int'
|-CXXConstructorDecl 0x56545a3c0708 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56545a3c0630 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56545a3c1be8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56545a3c2128 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56545a3c14a0 'base' 'int'
| | `-ImplicitCastExpr 0x56545a3c1c88 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56545a3c1c48 <col:16> 'int' lvalue ParmVar 0x56545a3c0630 'b' 'int'
| `-CompoundStmt 0x56545a3c2198 <col:19, line:1046:5>
|-CXXMethodDecl 0x56545a3c0c00 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56545a3c07d0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56545a3c0850 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56545a3c08c8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56545a3c0948 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56545a3c0a08 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56545a3c0a88 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56545a3c1058 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56545a3c0cd0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56545a3c0fb8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56545a3c0d78 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56545a3c0e18 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56545a3c0e90 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56545a3c1c08 <col:82> 'const ArgContext' lvalue Var 0x56545a3b4ca8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56545a3c30d8 <col:94, line:1067:5>
| |   |-DeclStmt 0x56545a3c2328 <line:1054:9, col:64>
| |   | `-VarDecl 0x56545a3c21b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56545a3c22e0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56545a3c2548 <line:1055:9, col:91>
| |   | `-VarDecl 0x56545a3c2358 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56545a3c2520 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56545a3c2500 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56545a3c24b0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56545a3c2490 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56545a3c2438 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56545a3c23e8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56545a3c2418 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56545a3c2478 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56545a3c2458 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56545a3c24e0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56545a3c26a8 <line:1056:9, col:27>
| |   | `-VarDecl 0x56545a3c2640 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56545a3c2af0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56545a3c2a20 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56545a3c29a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56545a2c2588 0x56545a10bb68 0x56545a10b840 0x56545a0fc010 0x56545a0fbcc0 0x56545a0fb5b0 0x56545a0cdf20 0x56545a05b3f0
| |   | | |-CallExpr 0x56545a3c28e0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56545a3c26d0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56545a3c2780 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56545a3c2750 <col:19, col:23> '<bound member function type>' .begin 0x56545a0eb218
| |   | | | |   `-DeclRefExpr 0x56545a3c2730 <col:19> 'const String' lvalue ParmVar 0x56545a3c0d78 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56545a3c27f0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56545a3c27c0 <col:32, col:36> '<bound member function type>' .end 0x56545a0eb430
| |   | | | |   `-DeclRefExpr 0x56545a3c27a0 <col:32> 'const String' lvalue ParmVar 0x56545a3c0d78 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56545a3c2810 <col:43> 'const bool' lvalue Var 0x56545a3c21b8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56545a3c2878 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56545a3c2858 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56545a3c28a0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56545a3c2640 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56545a3c28c0 <col:73> 'const int' lvalue Var 0x56545a3c2358 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56545a3c2980 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56545a3c2950 <col:16, col:20> '<bound member function type>' .end 0x56545a0eb430
| |   | |     `-DeclRefExpr 0x56545a3c2930 <col:16> 'const String' lvalue ParmVar 0x56545a3c0d78 'str' 'const String &'
| |   | `-BinaryOperator 0x56545a3c2ad0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56545a3c2a68 <col:13> 'int' lvalue ->status 0x56545a3c1508
| |   |   | `-CXXThisExpr 0x56545a3c2a58 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56545a3c2ab8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56545a3c2a98 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c0160 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56545a3c2d40 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56545a3c2c28 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56545a3c2c10 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56545a3c2bf8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56545a3c2b18 <col:13> 'int' lvalue ->status 0x56545a3c1508
| |   | | |     `-CXXThisExpr 0x56545a3c2b08 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56545a3c2bd8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56545a3c2ba8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56545a3c2b58 <col:23> 'int' lvalue ->status 0x56545a3c1508
| |   | |   |   `-CXXThisExpr 0x56545a3c2b48 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56545a3c2bc0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56545a3c2b88 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c01f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56545a3c2d20 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56545a3c2cc0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56545a3c2c68 <col:13, col:18> '<bound member function type>' .error 0x56545a285b80
| |   |   | | `-DeclRefExpr 0x56545a3c2c48 <col:13> 'const ArgContext' lvalue ParmVar 0x56545a3c0e90 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56545a3c2ce8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56545a3c2c98 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56545a3c2d10 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56545a3c2d00 <col:20> 'bool' false
| |   |-DeclStmt 0x56545a3c2f28 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56545a3c2ed0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56545a3c2e60 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56545a3c3088 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56545a3c2f40 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56545a08f3b8
| |   | |-DeclRefExpr 0x56545a3c2f88 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56545a3c2640 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56545a3c3058 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56545a3c2fd0 <col:64> 'V' lvalue ParmVar 0x56545a3c0e18 'result' 'V &'
| |   `-ReturnStmt 0x56545a3c30c8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56545a3c30b8 <col:16> 'bool' true
| `-CXXMethodDecl 0x56545a41db68 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56545a41d940 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x56545a41da18 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x56545a41da80 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x56545a426f80 <col:94, line:1067:5>
|     |-DeclStmt 0x56545a41e378 <line:1054:9, col:64>
|     | `-VarDecl 0x56545a41e198 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56545a41e308 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56545a41e2d8 <col:36, col:55> 'const bool' lvalue Var 0x56545a07e5d0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56545a425be0 <line:1055:9, col:91>
|     | `-VarDecl 0x56545a41e390 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56545a425b60 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56545a425b48 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56545a425b28 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56545a425b08 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56545a425ae8 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56545a425ab0 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56545a425a90 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56545a3c2418 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56545a425ad0 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56545a3c2458 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56545a3c24e0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56545a425d70 <line:1056:9, col:27>
|     | `-VarDecl 0x56545a425d08 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56545a4261f8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56545a4261a0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56545a426058 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56545a426028 <col:13> '<bound member function type>' ->parse 0x56545a3c0c00
|     | | | | `-CXXThisExpr 0x56545a426018 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56545a425eb8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56545a425e88 <col:19, col:23> '<bound member function type>' .begin 0x56545a0eb218
|     | | | |   `-DeclRefExpr 0x56545a425e68 <col:19> 'const String' lvalue ParmVar 0x56545a41d940 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56545a425f28 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56545a425ef8 <col:32, col:36> '<bound member function type>' .end 0x56545a0eb430
|     | | | |   `-DeclRefExpr 0x56545a425ed8 <col:32> 'const String' lvalue ParmVar 0x56545a41d940 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56545a4260c8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56545a4260a8 <col:43> 'const bool' lvalue Var 0x56545a41e198 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56545a425fb0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56545a425f98 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56545a425f78 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x56545a4260e0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56545a425fd8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56545a425d08 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56545a426118 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56545a4260f8 <col:73> 'const int' lvalue Var 0x56545a41e390 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56545a426180 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56545a426150 <col:16, col:20> '<bound member function type>' .end 0x56545a0eb430
|     | |     `-DeclRefExpr 0x56545a426130 <col:16> 'const String' lvalue ParmVar 0x56545a41d940 'str' 'const String &'
|     | `-BinaryOperator 0x56545a4261d8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56545a3c2a68 <col:13> 'int' lvalue ->status 0x56545a3c1508
|     |   | `-CXXThisExpr 0x56545a3c2a58 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56545a4261c0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56545a3c2a98 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c0160 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56545a426370 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56545a426290 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56545a426278 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56545a426260 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56545a3c2b18 <col:13> 'int' lvalue ->status 0x56545a3c1508
|     | | |     `-CXXThisExpr 0x56545a3c2b08 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56545a426240 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56545a426210 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56545a3c2b58 <col:23> 'int' lvalue ->status 0x56545a3c1508
|     | |   |   `-CXXThisExpr 0x56545a3c2b48 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56545a426228 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56545a3c2b88 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c01f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56545a426350 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56545a426300 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56545a4262d0 <col:13, col:18> '<bound member function type>' .error 0x56545a285b80
|     |   | | `-DeclRefExpr 0x56545a4262b0 <col:13> 'const ArgContext' lvalue ParmVar 0x56545a41da80 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56545a426328 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56545a3c2c98 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56545a426340 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56545a3c2d00 <col:20> 'bool' false
|     |-DeclStmt 0x56545a4268b8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56545a426860 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x56545a426810 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x56545a4267f0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x56545a426780 'type'
|     |       `-ElaboratedType 0x56545a426730 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x56545a426710 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x56545a07e728 'unsigned_type'
|     |           `-BuiltinType 0x565459da3620 'unsigned int'
|     |-CallExpr 0x56545a426f10 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x56545a426ef8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56545a426e78 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x56545a426d58 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x56545a08f3b8 'extract_integer')
|     | |-ImplicitCastExpr 0x56545a426f58 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x56545a426f40 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56545a426918 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56545a425d08 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56545a4269e8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x56545a426998 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x56545a41da18 'result' 'unsigned int &'
|     `-ReturnStmt 0x56545a426f70 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56545a3c30b8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56545a3c1418 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56545a3c10c8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56545a3c1378 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56545a3c1178 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56545a3c1218 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56545a3c1290 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56545a3c1c28 <col:71> 'const ArgContext' lvalue Var 0x56545a3b4ca8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56545a3c3848 <col:83, line:1083:5>
| |   |-DeclStmt 0x56545a3c31a0 <line:1071:9, col:12>
| |   | `-VarDecl 0x56545a3c3138 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56545a3c3820 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56545a3c3430 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56545a3c32b8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56545a3c3280 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56545a3c31c8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56545a3c3220 <col:31> 'const String' lvalue ParmVar 0x56545a3c1178 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56545a3c3240 <col:36> 'V' lvalue Var 0x56545a3c3138 'x' 'V'
| |     | |   `-DeclRefExpr 0x56545a3c3260 <col:39> 'const ArgContext' lvalue ParmVar 0x56545a3c1290 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56545a3c3410 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56545a3c33f0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56545a3c33d8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56545a3c33c0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56545a3c32e0 <col:17> 'int' lvalue ->status 0x56545a3c1508
| |     |     |     `-CXXThisExpr 0x56545a3c32d0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56545a3c33a0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56545a3c3370 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56545a3c3320 <col:27> 'int' lvalue ->status 0x56545a3c1508
| |     |       |   `-CXXThisExpr 0x56545a3c3310 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56545a3c3388 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56545a3c3350 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c01f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56545a3c3460 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56545a3c3450 <col:20> 'bool' false
| |     `-IfStmt 0x56545a3c37f8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56545a3c3500 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56545a3c34d0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56545a3c3480 <col:18> 'int' lvalue ->status 0x56545a3c1508
| |       | |   `-CXXThisExpr 0x56545a3c3470 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56545a3c34e8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56545a3c34b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c01f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56545a3c3738 <col:42, line:1079:9>
| |       | |-CallExpr 0x56545a3c36e0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56545a3c3530 <line:1076:13> '<bound member function type>' ->range_error 0x56545a3c1b18
| |       | | | `-CXXThisExpr 0x56545a3c3520 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56545a3c3560 <col:25> 'const ArgContext' lvalue ParmVar 0x56545a3c1290 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56545a3c3640 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56545a3c36b8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56545a3c3698 <col:43> 'V' lvalue Var 0x56545a3c3138 'x' 'V'
| |       | `-ReturnStmt 0x56545a3c3728 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56545a3c3718 <col:20> 'bool' false
| |       `-CompoundStmt 0x56545a3c37d8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56545a3c3798 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56545a3c3758 <col:13> 'V' lvalue ParmVar 0x56545a3c1218 'result' 'V &'
| |         | `-DeclRefExpr 0x56545a3c3778 <col:22> 'V' lvalue Var 0x56545a3c3138 'x' 'V'
| |         `-ReturnStmt 0x56545a3c37c8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56545a3c37b8 <col:20> 'bool' true
| `-CXXMethodDecl 0x56545a41d528 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56545a41d300 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x56545a41d3d8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x56545a41d440 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56545a41e178 <col:83, line:1083:5>
|     |-DeclStmt 0x56545a41d7b0 <line:1071:9, col:12>
|     | `-VarDecl 0x56545a41d748 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x56545a41e150 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56545a41dde0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56545a41dd08 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56545a41dcd0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56545a41dc88 <col:14> '<bound member function type>' ->parse_saturating 0x56545a41db68
|       | |   | `-CXXThisExpr 0x56545a41dc78 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x56545a41d820 <col:31> 'const String' lvalue ParmVar 0x56545a41d300 'str' 'const String &'
|       | |   |-DeclRefExpr 0x56545a41d840 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x56545a41d748 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x56545a41d860 <col:39> 'const ArgContext' lvalue ParmVar 0x56545a41d440 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56545a41ddc0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56545a41dda0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56545a41dd88 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56545a41dd70 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56545a3c32e0 <col:17> 'int' lvalue ->status 0x56545a3c1508
|       |     |     `-CXXThisExpr 0x56545a3c32d0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56545a41dd50 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56545a41dd20 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56545a3c3320 <col:27> 'int' lvalue ->status 0x56545a3c1508
|       |       |   `-CXXThisExpr 0x56545a3c3310 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56545a41dd38 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56545a3c3350 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c01f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56545a41de00 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56545a3c3450 <col:20> 'bool' false
|       `-IfStmt 0x56545a41e128 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56545a41de40 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56545a41de10 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56545a3c3480 <col:18> 'int' lvalue ->status 0x56545a3c1508
|         | |   `-CXXThisExpr 0x56545a3c3470 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56545a41de28 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56545a3c34b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56545a3c01f0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56545a41e060 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56545a41dfd0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56545a3c3530 <line:1076:13> '<bound member function type>' ->range_error 0x56545a3c1b18
|         | | | `-CXXThisExpr 0x56545a3c3520 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56545a41de60 <col:25> 'const ArgContext' lvalue ParmVar 0x56545a41d440 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56545a41e038 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56545a41e008 <col:31, col:50> 'const bool' lvalue Var 0x56545a07e5d0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56545a41dfa8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56545a41df90 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56545a41df78 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56545a41df58 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x56545a41d748 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x56545a41e050 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56545a3c3718 <col:20> 'bool' false
|         `-CompoundStmt 0x56545a41e108 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56545a41e0d8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x56545a41e080 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x56545a41d3d8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x56545a41e0c0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x56545a41e0a0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x56545a41d748 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x56545a41e0f8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56545a3c37b8 <col:20> 'bool' true
|-FieldDecl 0x56545a3c14a0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56545a3c1508 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56545a3c1558 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56545a3c1810 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56545a3c1598 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56545a3c1618 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56545a3c1690 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56545a3c1710 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56545a3c1b18 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56545a3c18e0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56545a3c1958 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56545a3c19f0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56545a3c40a8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56545a3c40a8
| `-ParmVarDecl 0x56545a3c41b8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56545a3c4338 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56545a3c4448 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56545a41a010 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56545a419fe0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56545a419fb0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56545a419f80 <col:7> 'IntArg' lvalue ParmVar 0x56545a3c4448 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56545a3c14a0 'base' 'int'
| | `-ImplicitCastExpr 0x56545a41a108 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56545a41a0d8 <col:7> 'int' xvalue .base 0x56545a3c14a0
| |     `-CXXStaticCastExpr 0x56545a41a0a8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56545a41a078 <col:7> 'IntArg' lvalue ParmVar 0x56545a3c4448 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56545a3c1508 'status' 'int'
| | `-ImplicitCastExpr 0x56545a41a1d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56545a41a1a8 <col:7> 'int' xvalue .status 0x56545a3c1508
| |     `-CXXStaticCastExpr 0x56545a41a178 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56545a41a148 <col:7> 'IntArg' lvalue ParmVar 0x56545a3c4448 '' 'IntArg &&'
| `-CompoundStmt 0x56545a41a230 <col:7>
`-CXXDestructorDecl 0x56545a419170 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56545a3c8640 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x56545a3c8898 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56545a419098 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56545a419610 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56545a4195f0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56545a419680 <col:19>
|-CXXConstructorDecl 0x56545a419278 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x56545a419278
| `-ParmVarDecl 0x56545a419388 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x56545a419428 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56545a419538 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56545a41a240 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56545a419f60 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56545a419f30 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x56545a419f00 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x56545a419538 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x56545a41a2b0 <col:19>
`-CXXDestructorDecl 0x56545a4196c0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
