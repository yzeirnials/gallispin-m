
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4827dfbd8 prev 0x55b4827d7378 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b4827dfcd0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55b4827dfd60 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55b4827dfdd8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55b4827dfe98 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55b4827dff60 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55b4827e00d8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55b4827e0010 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55b4827e0180 <col:24>
| `-OptimizeNoneAttr 0x55b4827e01d8 <col:34>
|-CXXMethodDecl 0x55b4827e0220 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55b4827e04d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55b4827e02d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55b4827e0348 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55b4827e03c8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55b4827e0590 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55b4827e05c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55b4827e0630 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55b4827e06b8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55b4827e09d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55b4827e0770 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55b4827e07e8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55b4827e0860 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55b4827e08e0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55b4827e0af0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55b4827e8468 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55b4827e8468
| `-ParmVarDecl 0x55b4827e8578 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55b4827e8618 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55b4827e8618
| `-ParmVarDecl 0x55b4827e8728 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55b4828b3f10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4827d2bf0 prev 0x55b4827d2970 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b4827d2ce8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55b4827d2d78 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55b4827d2dd8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55b4827d2ec8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55b4827d2fc8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55b4827d3198 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55b4827d3048 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55b4827d30c0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55b4827d3328 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55b4827d3260 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55b4827d33d0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55b4827d3508 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55b4827d3440 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55b4827d36a8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55b4827d35e8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55b4827d3848 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55b4827d3788 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55b4827d38f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55b4827d39f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55b4827d3ad0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827d39d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55b4827d39b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55b4827d3a80 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55b4827d3ae8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827d3a60 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55b4827d3a40 <col:44> 'int' 2
|-CXXMethodDecl 0x55b4827d3c30 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55b4827d3b18 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55b4827d3b98 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55b4827d3d88 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55b4827d3cf8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55b4827d3fc8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55b4827d3e48 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55b4827d3ec0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55b4827d4078 <col:20>
| `-OptimizeNoneAttr 0x55b4827d40d0 <col:30>
|-CXXMethodDecl 0x55b4827d41d8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55b4827d4110 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55b4827d4280 <col:20>
| `-OptimizeNoneAttr 0x55b4827d42d8 <col:30>
|-CXXMethodDecl 0x55b4827d4328 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55b4827d43f0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55b4827d4508 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55b4827d4590 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55b4827d4618 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55b4827d46a0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55b4827d4728 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55b4827d47b8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55b4827d4878 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55b4827d4900 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55b4827d4988 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55b4827d4a10 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55b4827d4a98 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55b4827d4b20 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55b4827d4bb0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55b4827d4c70 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55b4827d4d00 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55b4827d4e50 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55b4827d4db8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55b4827d4fe0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55b4827d4f10 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55b4827d5290 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55b4827d5098 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55b4827d5118 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55b4827d5198 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55b4827d5348 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55b4827d5450 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b4827d56e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827d5430 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55b4827d5410 <col:33> 'int' 0
| |-EnumConstantDecl 0x55b4827d54e0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b4827d56f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827d54c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55b4827d54a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55b4827d5570 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b4827d5710 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827d5550 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55b4827d5530 <col:38> 'int' 90
| |-EnumConstantDecl 0x55b4827d5600 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55b4827d5728 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827d55e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55b4827d55c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55b4827d5690 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55b4827d5740 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827d5670 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55b4827d5650 <col:32> 'int' 2000
|-CXXMethodDecl 0x55b4827d5780 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55b4827d5bc0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b4827d5a30 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55b4827d5aa8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827d5c90 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55b4827d5e10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55b4827d5d40 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827d6018 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b4827d5ec8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55b4827d5f40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827d6118 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55b4827d61b8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55b4827d6280 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b4827d6310 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55b4827d6540 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827d62f0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55b4827d62d0 <col:36> 'int' EnumConstant 0x55b4827d6280 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b4827d6360 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b4827d63b0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b4827d6400 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b4827d6450 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55b4827d64a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55b4827d64f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55b4827d6628 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55b4827d6568 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55b4827d66f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55b4827d67b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55b4827d6870 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55b4827d6930 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55b4827d6a48 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55b4827d6b10 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55b4827d6c90 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55b4827d6bc0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55b4827d6db8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55b4827d6fb8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55b4827d6e68 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55b4827d6ee8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55b4827e4908 <col:54, line:127:5>
|   |-ParenExpr 0x55b4827e47b8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55b4827e4788 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827e4478 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55b4827e4450 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55b4827e4438 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55b4827e4420 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55b4827e43f0 <col:31> 'Router *' lvalue ->_router 0x55b4827e22d0
|   |   |         `-CXXThisExpr 0x55b4827e43e0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55b4827e44d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827e44b8 <col:48> 'int' 0
|   |   `-CallExpr 0x55b4827e46e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55b4827e46d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827e46b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827e4728 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827e4548 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55b4827e4740 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827e4568 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55b4827e4758 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827e45a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55b4827e4770 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827e4698 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827e4680 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827e4638 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55b4827e4850 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55b4827e47e8 <col:9> 'Router *' lvalue ->_router 0x55b4827e22d0
|   | | `-CXXThisExpr 0x55b4827e47d8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55b4827e4838 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b4827e4818 <col:19> 'Router *' lvalue ParmVar 0x55b4827d6e68 'r' 'Router *'
|   `-BinaryOperator 0x55b4827e48e8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55b4827e4880 <col:9> 'int' lvalue ->_eindex 0x55b4827e2338
|     | `-CXXThisExpr 0x55b4827e4870 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55b4827e48d0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827e48b0 <col:19> 'int' lvalue ParmVar 0x55b4827d6ee8 'eindex' 'int'
|-CXXMethodDecl 0x55b4827d7140 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55b4827d7078 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55b4827d7210 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55b4827d72d8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55b4827d7378 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55b4827d75c8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55b4827d7440 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55b4827d74c0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55b4827d7678 <col:20>
| `-OptimizeNoneAttr 0x55b4827d76d0 <col:30>
|-CXXMethodDecl 0x55b4827d77d8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55b4827d7710 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55b4827d7880 <col:20>
| `-OptimizeNoneAttr 0x55b4827d78d8 <col:30>
|-CXXMethodDecl 0x55b4827d79a8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55b4827d7918 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55b4827d7a50 <col:20>
| `-OptimizeNoneAttr 0x55b4827d7aa8 <col:30>
|-CXXMethodDecl 0x55b4827d7c38 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55b4827d7ae0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55b4827d7b60 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55b4827d7dc8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55b4827d7d00 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55b4827d7f18 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55b4827d7e88 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55b4827d8068 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55b4827d7fd8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55b4827d81b8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55b4827d8128 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55b4827d8478 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55b4827d8270 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55b4827d82f0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55b4827d8398 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55b4827d8550 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55b4827d8610 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55b4827d88e0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55b4827d8790 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55b4827d8808 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827d8a08 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55b4827d8be0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55b4827d8ac0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55b4827d8b40 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55b4827d8dc8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55b4827d8ca8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55b4827d8d28 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55b4827d9138 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55b4827d8e88 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b4827d8f00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b4827d8f80 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b4827e3ef0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b4827e3ed0 <col:106> 'int' 0
| `-ParmVarDecl 0x55b4827d8ff8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b4827e3f28 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b4827e3f08 <col:126> 'int' 0
|-CXXMethodDecl 0x55b4827d94d8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b4827d9208 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b4827d92a0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b4827d9320 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55b4827d9398 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b4827e3f60 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b4827e3f40 <col:114> 'int' 0
|-CXXMethodDecl 0x55b4827d9868 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b4827d95b0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55b4827d9628 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55b4827d96a8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55b4827e3f78 <col:96> 'int' 0
| `-ParmVarDecl 0x55b4827d9720 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b4827e3fb8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b4827e3f98 <col:116> 'int' 0
|-CXXMethodDecl 0x55b4827d9be8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55b4827d9938 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55b4827d99b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827d9a30 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b4827e3ff0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b4827e3fd0 <col:109> 'int' 0
| `-ParmVarDecl 0x55b4827d9aa8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b4827e4028 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b4827e4008 <col:129> 'int' 0
|-CXXMethodDecl 0x55b4827d9f68 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b4827d9cb8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55b4827d9d30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827d9db0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55b4827d9e28 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b4827e4060 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b4827e4040 <col:117> 'int' 0
|-CXXMethodDecl 0x55b4827da2f8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55b4827da040 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827da0b8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827da138 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55b4827e4078 <col:99> 'int' 0
| `-ParmVarDecl 0x55b4827da1b0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55b4827e40b8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55b4827e4098 <col:119> 'int' 0
|-CXXMethodDecl 0x55b4827da718 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55b4827da3c8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55b4827da448 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55b4827da4c0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827da540 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55b4827e40f0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55b4827e40d0 <col:108> 'int' 0
| `-ParmVarDecl 0x55b4827da5c0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55b4827e4128 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55b4827e4108 <col:141> 'int' 0
|-CXXMethodDecl 0x55b4827dab38 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55b4827da7f0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55b4827da870 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55b4827da8e8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827da968 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55b4827da9e8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55b4827e4140 <col:121> 'int' 0
|-CXXMethodDecl 0x55b4827daf68 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55b4827dac18 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55b4827dac98 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55b4827dad10 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827dad90 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55b4827e4160 <col:98> 'int' 0
| `-ParmVarDecl 0x55b4827dae10 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55b4827e4180 <col:123> 'int' 0
|-CXXMethodDecl 0x55b4827db230 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55b4827db040 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55b4827db0c0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55b4827db140 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55b4827e41a0 <col:80> 'int' 0
|-EnumDecl 0x55b4827db2e8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55b4827db3f0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b4827db680 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827db3d0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55b4827db3b0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55b4827db480 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b4827db698 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827db460 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55b4827db440 <col:40> 'int' 2
| |-EnumConstantDecl 0x55b4827db510 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b4827db6b0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827db4f0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55b4827db4d0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55b4827db5a0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55b4827db6c8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827db580 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55b4827db560 <col:36> 'int' 7
| `-EnumConstantDecl 0x55b4827db630 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55b4827db6e0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827db610 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55b4827db5f0 <col:34> 'int' 6
|-CXXMethodDecl 0x55b4827db998 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55b4827db708 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55b4827db7a8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55b4827db828 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55b4827db8a0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55b4827e4258 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55b4827e4240 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55b4827e4228 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55b4827e4208 <col:98, col:105> 'String' (CXXTemporary 0x55b4827e4208)
|           `-CXXTemporaryObjectExpr 0x55b4827e41d0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55b4827dbc38 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55b4827dba68 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55b4827dbae0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55b4827dbb58 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55b4827e4308 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55b4827e42f0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55b4827e42d8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55b4827e42b8 <col:94, col:101> 'String' (CXXTemporary 0x55b4827e42b8)
| |         `-CXXTemporaryObjectExpr 0x55b4827e4280 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55b4827e4af0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55b4827e4a68 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55b4827e4a38 <col:9> '<bound member function type>' ->add_task_handlers 0x55b4827db998
|     | `-CXXThisExpr 0x55b4827e4a28 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55b4827e4aa8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4827e49a8 <col:27> 'Task *' lvalue ParmVar 0x55b4827dba68 'task' 'Task *'
|     |-ImplicitCastExpr 0x55b4827e4ac0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4827e49c8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55b4827dbae0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55b4827e4ad8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55b4827e49e8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55b4827db630 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55b4827e4a08 <col:62> 'const String' lvalue ParmVar 0x55b4827dbb58 'prefix' 'const String &'
|-CXXMethodDecl 0x55b4827dbe48 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55b4827dbd00 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55b4827dbd78 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55b4827e43b8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55b4827e43a0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55b4827e4388 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55b4827e4368 <col:70, col:77> 'String' (CXXTemporary 0x55b4827e4368)
| |         `-CXXTemporaryObjectExpr 0x55b4827e4330 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55b4827e4cc8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55b4827e4c40 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55b4827e4c10 <col:9> '<bound member function type>' ->add_task_handlers 0x55b4827db998
|     | `-CXXThisExpr 0x55b4827e4c00 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55b4827e4c80 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4827e4b80 <col:27> 'Task *' lvalue ParmVar 0x55b4827dbd00 'task' 'Task *'
|     |-ImplicitCastExpr 0x55b4827e4c98 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55b4827e4ba0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55b4827e4cb0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55b4827e4bc0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55b4827db630 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55b4827e4be0 <col:57> 'const String' lvalue ParmVar 0x55b4827dbd78 'prefix' 'const String &'
|-CXXMethodDecl 0x55b4827dc128 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55b4827dbf10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dbf90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dc008 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55b4827dc3d8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55b4827dc1f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dc278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dc2f8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55b4827dc6c8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55b4827dc4a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dc528 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dc5a0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55b4827dc978 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55b4827dc798 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dc818 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dc898 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55b4827dcc28 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55b4827dca48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dcac8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dcb48 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55b4827dced8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55b4827dccf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dcd78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dcdf0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55b4827dd188 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55b4827dcfa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dd028 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dd0a8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55b4827dd498 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55b4827dd2b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dd330 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dd3b0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55b4827dd778 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55b4827dd568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dd5e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dd690 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55b4827dda58 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55b4827dd848 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827dd8c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827dd970 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55b4827ddcc0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55b4827ddb28 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55b4827ddba8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55b4827ddc20 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55b4827ddf68 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55b4827ddd90 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55b4827dde10 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55b4827dde88 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55b4827de218 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55b4827de038 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827de0b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827de138 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55b4827de4c8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55b4827de2e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827de368 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827de3e0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55b4827de778 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55b4827de598 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827de618 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827de690 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55b4827dea48 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55b4827de848 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827de8c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55b4827de968 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55b4827ded78 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55b4827deb18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55b4827deb98 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55b4827dec10 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55b4827dec88 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b4827e43d0 <col:93> 'bool' false
|-CXXMethodDecl 0x55b4827def60 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b4827dee48 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55b4827deec8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55b4827df138 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b4827df020 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55b4827df0a0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55b4827df418 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b4827df1f8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55b4827df270 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55b4827df2f0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55b4827df368 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827df708 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55b4827df4e8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55b4827df560 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55b4827df5e0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55b4827df658 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827df940 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55b4827df7e0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55b4827df860 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55b4827dfb28 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55b4827dfa08 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55b4827dfa88 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55b4827dfbd8 prev 0x55b4827d7378 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b4827dfcd0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55b4827dfd60 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55b4827dfdd8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55b4827dfe98 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55b4827dff60 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55b4827e00d8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55b4827e0010 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55b4827e0180 <col:24>
| | `-OptimizeNoneAttr 0x55b4827e01d8 <col:34>
| |-CXXMethodDecl 0x55b4827e0220 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55b4827e04d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55b4827e02d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55b4827e0348 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55b4827e03c8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55b4827e0590 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55b4827e05c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55b4827e0630 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55b4827e06b8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55b4827e09d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55b4827e0770 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55b4827e07e8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55b4827e0860 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55b4827e08e0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55b4827e0af0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55b4827e8468 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55b4827e8468
| | `-ParmVarDecl 0x55b4827e8578 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55b4827e8618 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55b4827e8618
| | `-ParmVarDecl 0x55b4827e8728 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55b4828b3f10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55b4827e0b68 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55b4827e0c08 <col:38> "" ""
|-CXXMethodDecl 0x55b4827e0c98 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55b4827e0d38 <col:44> "" ""
|-AccessSpecDecl 0x55b4827e0da8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55b4827e0dd0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55b4827e0ed0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55b4827e0f20 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827e0eb0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55b4827e0e90 <col:27> 'int' 4
|-FieldDecl 0x55b4827e0fd8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55b4827e1188 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55b4827e1240 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55b4827e22d0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55b4827e2338 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55b4827e2488 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55b4827e23c8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55b4827e2638 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55b4827e2548 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55b4827e2818 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55b4827e26f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55b4827e2778 <col:25> col:28 'int'
|-CXXMethodDecl 0x55b4827e2ac0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827e28e0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55b4827e2960 <col:28> col:31 'int'
| `-ParmVarDecl 0x55b4827e29d8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55b4827e2b78 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55b4827e2c40 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55b4827e2c90 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55b4827e2ce0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55b4827e2ec0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55b4827e2d70 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55b4827e2de8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827e3168 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55b4827e2f88 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55b4827e3008 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55b4827e3080 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827e3388 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55b4827e3238 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55b4827e32b8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55b4827e36c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55b4827e3448 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55b4827e34c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55b4827e3540 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55b4827e35c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55b4827e38a8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55b4827e3790 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55b4827e3810 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55b4827e39f8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55b4827e3968 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55b4827e3d78 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55b4827e3ab8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55b4827e3b38 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55b4827e3bb0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55b4827e3c30 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55b4827e3e90 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Strip
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _nbytes
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4827eb5d8 <../elements/standard/strip.hh:21:1, line:36:1> line:21:7 class Strip definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55b4827eb738 <col:1, col:7> col:7 implicit referenced class Strip
|-AccessSpecDecl 0x55b4827eb7c8 <col:32, col:38> col:32 public
|-CXXConstructorDecl 0x55b4827eb850 <line:23:5, col:11> col:5 Strip 'void ()'
|-CXXMethodDecl 0x55b4827eb950 <line:25:5, col:54> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55b4827d4328 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55b4827ec748 <col:36, col:54>
|   `-ReturnStmt 0x55b4827ec738 <col:38, col:45>
|     `-ImplicitCastExpr 0x55b4827ec720 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55b4827ec700 <col:45> 'const char [6]' lvalue "Strip"
|-CXXMethodDecl 0x55b4827eba18 <line:26:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55b4827d43f0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55b4827ec7a8 <col:36, col:56>
|   `-ReturnStmt 0x55b4827ec798 <col:38, col:45>
|     `-ImplicitCastExpr 0x55b4827ec780 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55b4827ec760 <col:45> 'const char []' lvalue Var 0x55b4827d46a0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55b4827ebcf0 <line:28:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55b4827d5bc0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55b4827ebba0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55b4827ebc18 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55b4827ebe40 <line:30:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55b4827d3508 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55b4827ebdb0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55b4827ebee8 <line:32:3, col:10> col:3 private
|-FieldDecl 0x55b4827ebf28 <line:34:5, col:14> col:14 _nbytes 'unsigned int'
|-CXXConstructorDecl 0x55b4827ebfa8 <line:21:7> col:7 implicit Strip 'void (const Strip &)' inline default_delete noexcept-unevaluated 0x55b4827ebfa8
| `-ParmVarDecl 0x55b4827ec0b8 <col:7> col:7 'const Strip &'
|-CXXConstructorDecl 0x55b4827ec158 <col:7> col:7 implicit Strip 'void (Strip &&)' inline default_delete noexcept-unevaluated 0x55b4827ec158
| `-ParmVarDecl 0x55b4827ec268 <col:7> col:7 'Strip &&'
|-CXXMethodDecl 0x55b4827ec308 <col:7> col:7 implicit operator= 'Strip &(const Strip &)' inline default_delete noexcept-unevaluated 0x55b4827ec308
| `-ParmVarDecl 0x55b4827ec418 <col:7> col:7 'const Strip &'
|-CXXMethodDecl 0x55b4827ec488 <col:7> col:7 implicit operator= 'Strip &(Strip &&)' inline default_delete noexcept-unevaluated 0x55b4827ec488
| `-ParmVarDecl 0x55b4827ec598 <col:7> col:7 'Strip &&'
`-CXXDestructorDecl 0x55b4827ec620 <col:7> col:7 implicit ~Strip 'void ()' inline default noexcept-unevaluated 0x55b4827ec620
  `-Overrides: [ 0x55b4827d2ec8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Strip = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.Strip = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4825a5860 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55b4825a5978 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55b4825a5a18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55b4825a5a78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55b4825a5ad8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55b4825a5b88 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4825a5e90 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b4825a5fa8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55b4825a6050 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55b4825a60b8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55b4825a6148 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55b4825ac1e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b4825ac618 <col:12>
|-CXXConstructorDecl 0x55b4825ac2e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b4825ac3f8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b4825a6050 'data' 'const char *'
| | `-ImplicitCastExpr 0x55b4825aeba0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55b4825aeb70 <col:12> 'const char *const' lvalue .data 0x55b4825a6050
| |     `-DeclRefExpr 0x55b4825aeb50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825ac3f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b4825a60b8 'length' 'int'
| | `-ImplicitCastExpr 0x55b4825aec30 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b4825aec00 <col:12> 'const int' lvalue .length 0x55b4825a60b8
| |     `-DeclRefExpr 0x55b4825aebe0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825ac3f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55b4825a6148 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55b4825aecc0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55b4825aec90 <col:12> 'String::memo_t *const' lvalue .memo 0x55b4825a6148
| |     `-DeclRefExpr 0x55b4825aec70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825ac3f8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55b4825aed18 <col:12>
|-CXXConstructorDecl 0x55b4825ac498 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b4825ac498
| `-ParmVarDecl 0x55b4825ac5a8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55b4825b1b00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55b4825bd518 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b4825bd628 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55b4825bdb40 <col:12>
|   |-BinaryOperator 0x55b4825bd958 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55b4825bd910 <col:12> 'const char *' lvalue ->data 0x55b4825a6050
|   | | `-CXXThisExpr 0x55b4825bd900 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b4825bd940 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55b4825bd8d0 <col:12> 'const char *const' lvalue .data 0x55b4825a6050
|   |     `-DeclRefExpr 0x55b4825bd8b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825bd628 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55b4825bda20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55b4825bd9d8 <col:12> 'int' lvalue ->length 0x55b4825a60b8
|   | | `-CXXThisExpr 0x55b4825bd9c8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b4825bda08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55b4825bd998 <col:12> 'const int' lvalue .length 0x55b4825a60b8
|   |     `-DeclRefExpr 0x55b4825bd978 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825bd628 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55b4825bdae8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55b4825bdaa0 <col:12> 'String::memo_t *' lvalue ->memo 0x55b4825a6148
|   | | `-CXXThisExpr 0x55b4825bda90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55b4825bdad0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55b4825bda60 <col:12> 'String::memo_t *const' lvalue .memo 0x55b4825a6148
|   |     `-DeclRefExpr 0x55b4825bda40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825bd628 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55b4825bdb30 <col:12>
|     `-UnaryOperator 0x55b4825bdb18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b4825bdb08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55b4825bd698 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b4825bd698
  `-ParmVarDecl 0x55b4825bd7a8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b48259cdd0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b48259cee8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55b48259cf78 <col:16, col:22> col:16 public
|-TypedefDecl 0x55b48259cfb8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55b482271fd0 'const char *'
|   `-QualType 0x55b482271521 'const char' const
|     `-BuiltinType 0x55b482271520 'char'
|-TypedefDecl 0x55b48259d040 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55b48259d010 'String::const_iterator' sugar
|   |-Typedef 0x55b48259cfb8 'const_iterator'
|   `-PointerType 0x55b482271fd0 'const char *'
|     `-QualType 0x55b482271521 'const char' const
|       `-BuiltinType 0x55b482271520 'char'
|-TypedefDecl 0x55b48259d1b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55b48259d120 'int (String::*)() const'
|   |-RecordType 0x55b48259ce60 'String'
|   | `-CXXRecord 0x55b48259cdd0 'String'
|   `-ParenType 0x55b48259d0c0 'int () const' sugar
|     `-FunctionProtoType 0x55b482571c60 'int () const' const cdecl
|       `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48259d218 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55b4823c6840 'int64_t' sugar
|   |-Typedef 0x55b4822da390 'int64_t'
|   `-TypedefType 0x55b4822b3630 '__int64_t' sugar
|     |-Typedef 0x55b4822b3208 '__int64_t'
|     `-BuiltinType 0x55b4822715a0 'long'
|-TypedefDecl 0x55b48259d280 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55b4823c6760 'uint64_t' sugar
|   |-Typedef 0x55b4822da530 'uint64_t'
|   `-TypedefType 0x55b4822b36c0 '__uint64_t' sugar
|     |-Typedef 0x55b4822b3278 '__uint64_t'
|     `-BuiltinType 0x55b482271640 'unsigned long'
|-TypedefDecl 0x55b48259d310 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55b48259d2e0 'String::intmax_t' sugar
|   |-Typedef 0x55b48259d218 'intmax_t'
|   `-TypedefType 0x55b4823c6840 'int64_t' sugar
|     |-Typedef 0x55b4822da390 'int64_t'
|     `-TypedefType 0x55b4822b3630 '__int64_t' sugar
|       |-Typedef 0x55b4822b3208 '__int64_t'
|       `-BuiltinType 0x55b4822715a0 'long'
|-TypedefDecl 0x55b48259d3a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55b48259d370 'String::uintmax_t' sugar
|   |-Typedef 0x55b48259d280 'uintmax_t'
|   `-TypedefType 0x55b4823c6760 'uint64_t' sugar
|     |-Typedef 0x55b4822da530 'uint64_t'
|     `-TypedefType 0x55b4822b36c0 '__uint64_t' sugar
|       |-Typedef 0x55b4822b3278 '__uint64_t'
|       `-BuiltinType 0x55b482271640 'unsigned long'
|-CXXConstructorDecl 0x55b48259d460 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55b48259d608 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55b48259d548 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55b48259d7b8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55b48259d6f8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55b48259d910 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55b48259d880 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55b48259db28 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b48259d9d8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55b48259da58 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55b48259dd48 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55b48259dbf8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55b48259dc78 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55b48259df68 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b48259de18 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55b48259de98 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55b48259e188 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55b48259e038 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55b48259e0b8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55b48259e318 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55b48259e250 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55b48259e498 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55b48259e3d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55b48259e628 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55b48259e560 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55b48259e780 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55b48259e6f0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55b48259e8d8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55b48259e848 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55b48259ea30 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55b48259e9a0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55b48259ebb8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55b48259eaf8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55b48259ed48 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55b48259ec80 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55b48259eed8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55b48259ee10 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55b48259f068 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55b48259efa0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55b48259f160 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55b48259f288 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55b48259f408 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55b48259f340 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55b48259f558 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55b48259f4c8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55b48259f610 <col:63> "" ""
|-CXXMethodDecl 0x55b48259f758 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55b48259f698 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55b48259f968 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55b48259f818 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55b48259f898 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55b48259fb88 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55b48259fa30 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55b48259fab0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55b48259fe68 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55b48259fc48 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55b48259fcc8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55b4825abcb0 <col:55> 'int' 10
| `-ParmVarDecl 0x55b48259fd40 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b4825abcd0 <col:76> 'bool' true
|-CXXMethodDecl 0x55b4825a0148 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55b48259ff30 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55b48259ffb0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55b4825abce0 <col:56> 'int' 10
| `-ParmVarDecl 0x55b4825a0028 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b4825abd00 <col:77> 'bool' true
|-CXXMethodDecl 0x55b4825a0250 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55b4825a0318 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55b4825a03e0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55b4825a0480 <col:20>
| `-OptimizeNoneAttr 0x55b4825a04d8 <col:30>
|-CXXConversionDecl 0x55b4825a05c8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55b4825a0698 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55b4825a0758 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55b4825a0848 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55b4825a0908 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55b4825a0a88 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55b4825a09c0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55b4825a0bd8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55b4825a0b48 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55b4825a0cc8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55b4825a0d88 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55b4825a0fd8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55b4825a0e40 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55b4825a0ec0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55b4825a1238 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55b4825a10a0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55b4825a1120 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55b4825a1308 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55b4825a1518 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55b4825a13c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55b4825a1440 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55b4825a1738 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55b4825a15e0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55b4825a1660 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55b4825a18c8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55b4825a1800 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55b4825a19b8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55b4825a1b28 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55b4825a1a68 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b4825a1d38 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55b4825a1be8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b4825a1c68 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b4825a1f50 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55b4825a1df8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55b4825a1e70 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55b4825a20e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55b4825a2010 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b4825a2300 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55b4825a21a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55b4825a2220 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55b4825a2450 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55b4825a23c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55b4825a2628 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55b4825a2510 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b4825a2590 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55b4825a2778 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55b4825a26e8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55b4825a2990 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55b4825a2830 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55b4825a28b0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55b4825abd10 <col:39> 'int' 0
|-CXXMethodDecl 0x55b4825a2bb0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55b4825a2a50 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55b4825a2ad0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55b4825abd30 <col:48> 'int' 0
|-CXXMethodDecl 0x55b4825a2d90 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55b4825a2c70 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55b4825a2cf0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55b4825abd50 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55b4825a2e60 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55b4825a2f20 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55b4825a2fe0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55b4825a30a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55b4825a3160 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55b4825a3308 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55b4825a3210 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55b4825a3488 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55b4825a33c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55b4825a3660 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55b4825a3548 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55b4825a37d8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55b4825a3718 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55b4825a3920 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55b4825a3890 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55b4825a3a70 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55b4825a39e0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55b4825a3c48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55b4825a3b30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55b4825a3bb0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55b4825a3e28 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55b4825a3d10 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55b4825a3d90 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55b4825a3f78 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55b4825a3ee8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55b4825a4188 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55b4825a4038 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55b4825a40b8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55b4825a42e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55b4825a4250 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55b4825a4440 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55b4825a43a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55b4825a44e8 <col:57> "" ""
|-CXXMethodDecl 0x55b4825a45f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55b4825a4568 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55b4825a4748 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55b4825a46b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55b4825a48c8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55b4825a4800 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55b4825a4990 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55b4825a4a50 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55b4825a4b10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55b4825a4bb0 <col:49> "" ""
|-CXXMethodDecl 0x55b4825a4c40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55b4825a4d00 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55b4825a4df0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55b4825a4eb8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55b4825a4f78 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55b4825a5038 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55b4825a5130 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55b4825a51f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55b4825a52c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55b4825a5498 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55b4825a5378 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55b4825a53f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55b4825a56c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55b4825a5560 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55b4825a55e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55b4825a57d0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55b4825a5838 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55b4825a5860 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55b4825a5978 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55b4825a5a18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55b4825a5a78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55b4825a5ad8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55b4825a5b88 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55b4825a5bf0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55b4825a5e28 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55b4825a5e78 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4825a5e08 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55b4825a5d18 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55b4825a5cc0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55b4825a5d00 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55b4825a5ce0 <col:32> 'int' 8
|-CXXRecordDecl 0x55b4825a5e90 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b4825a5fa8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55b4825a6050 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55b4825a60b8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55b4825a6148 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55b4825ac1e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b4825ac618 <col:12>
| |-CXXConstructorDecl 0x55b4825ac2e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b4825ac3f8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b4825a6050 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55b4825aeba0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55b4825aeb70 <col:12> 'const char *const' lvalue .data 0x55b4825a6050
| | |     `-DeclRefExpr 0x55b4825aeb50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825ac3f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b4825a60b8 'length' 'int'
| | | `-ImplicitCastExpr 0x55b4825aec30 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55b4825aec00 <col:12> 'const int' lvalue .length 0x55b4825a60b8
| | |     `-DeclRefExpr 0x55b4825aebe0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825ac3f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55b4825a6148 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55b4825aecc0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55b4825aec90 <col:12> 'String::memo_t *const' lvalue .memo 0x55b4825a6148
| | |     `-DeclRefExpr 0x55b4825aec70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825ac3f8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55b4825aed18 <col:12>
| |-CXXConstructorDecl 0x55b4825ac498 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b4825ac498
| | `-ParmVarDecl 0x55b4825ac5a8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55b4825b1b00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55b4825bd518 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b4825bd628 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55b4825bdb40 <col:12>
| |   |-BinaryOperator 0x55b4825bd958 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55b4825bd910 <col:12> 'const char *' lvalue ->data 0x55b4825a6050
| |   | | `-CXXThisExpr 0x55b4825bd900 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b4825bd940 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55b4825bd8d0 <col:12> 'const char *const' lvalue .data 0x55b4825a6050
| |   |     `-DeclRefExpr 0x55b4825bd8b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825bd628 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55b4825bda20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55b4825bd9d8 <col:12> 'int' lvalue ->length 0x55b4825a60b8
| |   | | `-CXXThisExpr 0x55b4825bd9c8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b4825bda08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55b4825bd998 <col:12> 'const int' lvalue .length 0x55b4825a60b8
| |   |     `-DeclRefExpr 0x55b4825bd978 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825bd628 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55b4825bdae8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55b4825bdaa0 <col:12> 'String::memo_t *' lvalue ->memo 0x55b4825a6148
| |   | | `-CXXThisExpr 0x55b4825bda90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55b4825bdad0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55b4825bda60 <col:12> 'String::memo_t *const' lvalue .memo 0x55b4825a6148
| |   |     `-DeclRefExpr 0x55b4825bda40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55b4825bd628 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55b4825bdb30 <col:12>
| |     `-UnaryOperator 0x55b4825bdb18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b4825bdb08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55b4825bd698 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55b4825bd698
|   `-ParmVarDecl 0x55b4825bd7a8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55b4825a61c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55b4825a6408 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55b4825a6228 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55b4825a62a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55b4825a6320 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55b4825ac1a0 <col:79, line:261:5>
|   |-BinaryOperator 0x55b4825abe18 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55b4825abdb0 <col:2, col:5> 'const char *' lvalue .data 0x55b4825a6050
|   | | `-MemberExpr 0x55b4825abd80 <col:2> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|   | |   `-CXXThisExpr 0x55b4825abd70 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55b4825abe00 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b4825abde0 <col:12> 'const char *' lvalue ParmVar 0x55b4825a6228 'data' 'const char *'
|   |-BinaryOperator 0x55b4825abee0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55b4825abe78 <col:2, col:5> 'int' lvalue .length 0x55b4825a60b8
|   | | `-MemberExpr 0x55b4825abe48 <col:2> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|   | |   `-CXXThisExpr 0x55b4825abe38 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55b4825abec8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b4825abea8 <col:14> 'int' lvalue ParmVar 0x55b4825a62a8 'length' 'int'
|   `-IfStmt 0x55b4825ac188 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55b4825ac000 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55b4825abfe8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55b4825abfc8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55b4825abfa8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55b4825abf40 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|     |       | `-MemberExpr 0x55b4825abf10 <col:7> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|     |       |   `-CXXThisExpr 0x55b4825abf00 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55b4825abf90 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b4825abf70 <col:17> 'String::memo_t *' lvalue ParmVar 0x55b4825a6320 'memo' 'String::memo_t *'
|     `-CallExpr 0x55b4825ac160 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55b4825ac148 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b4825ac050 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55b482594e38 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55b4825ac0b8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b4825a5a18
|         `-ImplicitCastExpr 0x55b4825ac0a0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4825ac080 <col:27> 'String::memo_t *' lvalue ParmVar 0x55b4825a6320 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55b4825a66b8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55b4825a64d8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55b4825a6558 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55b4825a65d0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55b4825a61c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55b4825ac628 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55b4825ac7b8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55b4825ac720 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55b4825ac690 <col:2> '<bound member function type>' ->assign_memo 0x55b4825a6408
|     | `-ImplicitCastExpr 0x55b4825ac758 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55b4825ac680 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55b4825ac770 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4825ac6c0 <col:14> 'const char *' lvalue ParmVar 0x55b4825a64d8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55b4825ac788 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4825ac6e0 <col:20> 'int' lvalue ParmVar 0x55b4825a6558 'length' 'int'
|     `-ImplicitCastExpr 0x55b4825ac7a0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55b4825ac700 <col:28> 'String::memo_t *' lvalue ParmVar 0x55b4825a65d0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55b4825a6848 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55b4825a6788 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55b4825aca10 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55b4825ac990 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55b4825ac7e0 <col:2> '<bound member function type>' ->assign_memo 0x55b4825a6408
|     | `-CXXThisExpr 0x55b4825ac7d0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55b4825ac9c8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55b4825ac860 <col:14, col:19> 'const char *' lvalue .data 0x55b4825a6050
|     |   `-MemberExpr 0x55b4825ac830 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55b4825a61c0
|     |     `-DeclRefExpr 0x55b4825ac810 <col:14> 'const String' lvalue ParmVar 0x55b4825a6788 'x' 'const String &'
|     |-ImplicitCastExpr 0x55b4825ac9e0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55b4825ac8e0 <col:25, col:30> 'int' lvalue .length 0x55b4825a60b8
|     |   `-MemberExpr 0x55b4825ac8b0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55b4825a61c0
|     |     `-DeclRefExpr 0x55b4825ac890 <col:25> 'const String' lvalue ParmVar 0x55b4825a6788 'x' 'const String &'
|     `-ImplicitCastExpr 0x55b4825ac9f8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55b4825ac960 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|         `-MemberExpr 0x55b4825ac930 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55b4825a61c0
|           `-DeclRefExpr 0x55b4825ac910 <col:38> 'const String' lvalue ParmVar 0x55b4825a6788 'x' 'const String &'
|-CXXMethodDecl 0x55b4825a6910 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55b4825ad3d0 <col:31, line:278:5>
|   `-IfStmt 0x55b4825ad3b8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55b4825acab0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55b4825aca98 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55b4825aca68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|     |     `-MemberExpr 0x55b4825aca38 <col:6> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|     |       `-CXXThisExpr 0x55b4825aca28 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55b4825ad390 <col:15, line:277:2>
|       |-ParenExpr 0x55b4825acf60 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55b4825acf30 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55b4825acbc0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55b4825acba8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55b4825acb90 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55b4825acb50 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b4825a5a18
|       |   |       `-ImplicitCastExpr 0x55b4825acb38 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55b4825acb08 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|       |   |           `-MemberExpr 0x55b4825acad8 <col:27> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|       |   |             `-CXXThisExpr 0x55b4825acac8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55b4825acc20 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55b4825acc00 <col:54> 'int' 0
|       |   `-CallExpr 0x55b4825ace90 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55b4825ace78 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55b4825acdf8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55b4825aced0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55b4825acd08 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55b4825acee8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55b4825acd38 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55b4825acf00 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55b4825acd70 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55b4825acf18 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55b4825acde0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55b4825acdc8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55b4825acd90 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55b4825ad2b0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55b4825ad170 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55b4825ad158 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55b4825ad0d0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55b482596280 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55b4825ad0a0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55b4825a5a18
|       | |   `-ImplicitCastExpr 0x55b4825ad088 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55b4825ad058 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|       | |       `-MemberExpr 0x55b4825ad028 <col:40> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|       | |         `-CXXThisExpr 0x55b4825ad018 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55b4825ad270 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55b4825ad258 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55b4825ad198 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55b4825ab0f0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55b4825ad298 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55b4825ad1f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|       |       `-MemberExpr 0x55b4825ad1c8 <col:15> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|       |         `-CXXThisExpr 0x55b4825ad1b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55b4825ad370 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55b4825ad308 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55b4825a6148
|         | `-MemberExpr 0x55b4825ad2d8 <col:6> 'String::rep_t' lvalue ->_r 0x55b4825a61c0
|         |   `-CXXThisExpr 0x55b4825ad2c8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55b4825ad358 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55b4825ad338 <col:16> 'int' 0
|-CXXMethodDecl 0x55b4825a6ba8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55b4825a69c8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55b4825a6a48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55b4825a6ac0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55b4825a6c80 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55b4825a6ed0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55b4825a6d38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55b4825a6db8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55b4825a6e30 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55b4825a70b8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55b4825a6fa0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55b4825a7020 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55b4825a71b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55b4825ad4a8 <col:41, line:286:5>
|   `-ReturnStmt 0x55b4825ad498 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55b4825ad468 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55b4825ad430 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55b4825ad418 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55b4825ad3f8 <col:46> 'int' 1
|-CXXMethodDecl 0x55b4825a7458 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55b4825a7270 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55b4825a72f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55b4825a7370 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55b4825ab0f0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55b4825a7520 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55b4825ab1c0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55b4825ab390 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55b4825ab278 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55b4825ab2f8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55b4825ab450 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55b4825ab518 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55b4825ab618 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55b4825ab690 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55b4825ab708 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55b4825ab770 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55b4825ab870 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55b4825ab8c0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4825ab850 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55b4825ab830 <col:22> 'int' 14
|-CXXMethodDecl 0x55b4825abad8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55b4825ab8f0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55b4825ab970 <col:38> col:41 'int'
| `-ParmVarDecl 0x55b4825ab9f0 <col:43> col:46 'int'
|-FriendDecl 0x55b4825abbe0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55b4825abc70 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b48266eb10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55b48266ece8 prev 0x55b48266eb10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55b48266ed78 <col:46, col:52> col:46 public
|-TypedefDecl 0x55b48266eda0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b482670700 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55b4826706b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55b482670690 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55b48266efb8 'type'
|     `-SubstTemplateTypeParmType 0x55b48266ef80 'String' sugar
|       |-TemplateTypeParmType 0x55b482561680 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b482561630 'T'
|       `-RecordType 0x55b48259ce60 'String'
|         `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b4826707b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55b482670780 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55b482670760 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55b482670700 'type'
|     `-ElaboratedType 0x55b4826706b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55b482670690 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55b48266efb8 'type'
|         `-SubstTemplateTypeParmType 0x55b48266ef80 'String' sugar
|           |-TemplateTypeParmType 0x55b482561680 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55b482561630 'T'
|           `-RecordType 0x55b48259ce60 'String'
|             `-CXXRecord 0x55b48259cdd0 'String'
|-CXXMethodDecl 0x55b482670938 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55b482670848 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55b482670a28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55b482670b08 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55b482670b08
|-CXXMethodDecl 0x55b482670dd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55b482670ce0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55b482671018 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b482670e90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b482670f08 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b4826711e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b4826710d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b482671150 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b482671348 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55b482671418 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55b48281b618 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b48281b490 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55b48281b508 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b48281b878 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55b48281b6e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55b48281b760 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b48281ba38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55b48281b948 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b48281bbf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55b48281bb00 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b48281bcb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b48281bd60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b48281bf98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55b48281be10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b48281be88 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55b48281c238 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55b48281c140 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55b48281c300 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55b48281c350 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55b48281c3a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b4827d5830 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55b48266d578 prev 0x55b4827d5830 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55b48266ea80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55b48266ea30 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55b48266ea10 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55b48266e8c0 'type'
|     `-SubstTemplateTypeParmType 0x55b48266e750 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55b482537430 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55b4825373d8 'F'
|       `-RecordType 0x55b48266e3b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55b48266e2d0 'typed_array_memory'
|-FieldDecl 0x55b48281c3f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55b48281c440 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55b48281c478 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|   |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55b48256e948 'T'
|   `-RecordType 0x55b48259ce60 'String'
|     `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281c508 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55b48281c4d0 'String &'
|   `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|     |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b48256e948 'T'
|     `-RecordType 0x55b48259ce60 'String'
|       `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281c598 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55b48281c560 'const String &'
|   `-QualType 0x55b48266d611 'const String' const
|     `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-RecordType 0x55b48259ce60 'String'
|         `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281c628 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55b48281c5f0 'String *'
|   `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|     |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b48256e948 'T'
|     `-RecordType 0x55b48259ce60 'String'
|       `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281c6b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55b48281c680 'const String *'
|   `-QualType 0x55b48266d611 'const String' const
|     `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-RecordType 0x55b48259ce60 'String'
|         `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281d310 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55b48281d2c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55b48281d2a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55b48281d1d8 'type'
|     `-LValueReferenceType 0x55b48281d1a0 'const String &'
|       `-QualType 0x55b48281cf41 'const String' const
|         `-SubstTemplateTypeParmType 0x55b48281cf40 'String' sugar
|           |-TemplateTypeParmType 0x55b482541380 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55b482541328 'T'
|           `-RecordType 0x55b48259ce60 'String'
|             `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281d378 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55b48281c560 'const String &'
|   `-QualType 0x55b48266d611 'const String' const
|     `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-RecordType 0x55b48259ce60 'String'
|         `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281d3d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48281d438 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55b48281c5f0 'String *'
|   `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|     |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b48256e948 'T'
|     `-RecordType 0x55b48259ce60 'String'
|       `-CXXRecord 0x55b48259cdd0 'String'
|-TypedefDecl 0x55b48281d4a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55b48281c680 'const String *'
|   `-QualType 0x55b48266d611 'const String' const
|     `-SubstTemplateTypeParmType 0x55b48266d610 'String' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-RecordType 0x55b48259ce60 'String'
|         `-CXXRecord 0x55b48259cdd0 'String'
|-EnumDecl 0x55b48281d4f8 <line:134:5> col:5
| `-EnumConstantDecl 0x55b48281d5f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55b48281d5d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55b482570028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55b482570000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55b48256ffe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55b48281d678 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55b48281d908 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48281d730 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b48281d7d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55b48281db98 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55b48281da80 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55b48281de58 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55b48281dd40 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55b48281e170 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55b48281e050 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55b48281e480 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55b48281e360 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55b48281e770 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48281e5b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b48281e630 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b48281e898 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55b48281e948 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48281e9a0 <col:30> Inherited
|-CXXMethodDecl 0x55b48281e9e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55b48281ea98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48281eaf0 <col:30> Inherited
|-CXXMethodDecl 0x55b48281ebb8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b48281ec68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48281ecc0 <col:30> Inherited
|-CXXMethodDecl 0x55b48281ed08 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b48281edb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48281ee10 <col:30> Inherited
|-CXXMethodDecl 0x55b48281ee58 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b48281ef08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48281ef60 <col:30> Inherited
|-CXXMethodDecl 0x55b48281efa8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55b48281f058 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48281f0b0 <col:30> Inherited
|-CXXMethodDecl 0x55b48281f0d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b48281f188 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b48281f238 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b48281f3f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48281f2e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b48281f360 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b48281f548 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55b48281f4b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48281f6f8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55b48281f600 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b48281f7b0 <col:20>
| `-OptimizeNoneAttr 0x55b48281f808 <col:30>
|-CXXMethodDecl 0x55b48281f928 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55b48281f830 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b48281f9e0 <col:20>
| `-OptimizeNoneAttr 0x55b48281fa38 <col:30>
|-CXXMethodDecl 0x55b48281faf0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b48281fa60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48281fc38 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b48281fba8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48281fd68 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55b48281fe68 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55b48281ff38 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55b482820008 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55b482820148 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b4828200b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b482820290 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b482820200 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b4828203d8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55b482820348 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b482820490 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55b482820590 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55b482820500 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b482820648 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55b482820708 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55b482820808 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55b482820988 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55b4828208c8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55b482821148 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55b482820a40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55b4828210a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55b482820fa8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55b482821228 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b482821378 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55b4828212e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b482821430 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55b482821678 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55b4828214f0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55b482821568 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55b482821808 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55b482821748 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55b482821a18 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55b4828218d0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55b482821948 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55b482821ad8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55b482821d38 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55b482821c40 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55b482821e08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55b482821e08

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4828a3488 prev 0x55b4827532a8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b4828a3580 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55b4828a3610 <col:22, col:28> col:22 public
|-EnumDecl 0x55b4828a3638 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55b4828a3758 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3738 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55b4828a3720 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55b4828a3700 <col:14> 'int' 999
| |-EnumConstantDecl 0x55b4828a3800 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a37e0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55b4828a37c8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55b4828a37a8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55b4828a3890 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3870 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55b4828a3850 <col:17> 'int' 0
| |-EnumConstantDecl 0x55b4828a3920 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3900 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55b4828a38e0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55b4828a39b0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3990 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55b4828a3970 <col:16> 'int' 2
| |-EnumConstantDecl 0x55b4828a3a40 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3a20 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55b4828a3a00 <col:13> 'int' 3
| |-EnumConstantDecl 0x55b4828a3ad0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3ab0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55b4828a3a90 <col:15> 'int' 4
| |-EnumConstantDecl 0x55b4828a3b60 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3b40 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55b4828a3b20 <col:14> 'int' 5
| |-EnumConstantDecl 0x55b4828a3bf0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55b4828a3bd0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55b4828a3bb0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55b4828a3c80 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55b4828a3c60 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55b4828a3c40 <col:13> 'int' 7
|-VarDecl 0x55b4828a3cf0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55b4828a3d78 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55b4828a3e00 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55b4828a3e88 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55b4828a3f10 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55b4828a3f98 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55b4828a4020 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55b4828a40a8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55b4828a4130 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55b4828a41b8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55b4828a4240 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55b4828a4340 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55b4828a9678 '_nerrors' 'int'
| | `-IntegerLiteral 0x55b4828a9e08 <line:128:13> 'int' 0
| `-CompoundStmt 0x55b4828a9e78 <col:16, line:129:5>
|-CXXDestructorDecl 0x55b4828a4430 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55b4828a9e88 <col:29, line:132:5>
|-CXXMethodDecl 0x55b4828a45e8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55b4828a4520 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b4828a46b0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55b4828a4798 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55b4828a9ee0 <col:44, line:161:5>
|   `-ReturnStmt 0x55b4828a9ed0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55b4828a9eb8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55b4828a9e98 <col:9> 'ErrorHandler *' lvalue Var 0x55b4828a96d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55b4828a48d8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55b4828a4848 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55b4828a49a0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55b4828a9f40 <col:43, line:173:5>
|   `-ReturnStmt 0x55b4828a9f30 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55b4828a9f18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55b4828a9ef8 <col:9> 'ErrorHandler *' lvalue Var 0x55b4828a9750 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55b4828a4a58 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55b4828a4ad8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55b4828a4be8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55b4828a4b58 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a4d38 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55b4828a4ca8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a4e90 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55b4828a4df8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a4fe8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55b4828a4f50 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5140 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55b4828a50a8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5350 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b4828a51f8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55b4828a5278 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5528 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b4828a5410 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55b4828a5490 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5748 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b4828a55e8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55b4828a5668 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5928 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b4828a5808 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55b4828a5888 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5b08 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55b4828a59e8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55b4828a5a68 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a5c90 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55b4828a5bc8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55b4828a5e60 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55b4828a5d48 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55b4828a5dc0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55b4828aa198 <col:57, line:234:5>
|   `-ReturnStmt 0x55b4828aa188 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55b4828aa170 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55b4828aa118 <col:9, col:41> 'int'
|         |-MemberExpr 0x55b4828aa0e8 <col:9> '<bound member function type>' ->xmessage 0x55b4828a5c90
|         | `-CXXThisExpr 0x55b4828aa0d8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55b4828aa158 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b4828aa140 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b4828aa0b8 <col:18, col:40> 'String' (CXXTemporary 0x55b4828aa0b8)
|               `-CallExpr 0x55b4828aa080 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55b4828aa068 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55b4828a9fe0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55b4828a7e58 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55b4828aa000 <col:31> 'const String' lvalue ParmVar 0x55b4828a5dc0 'str' 'const String &'
|                 `-DeclRefExpr 0x55b4828aa020 <col:36> 'const String' lvalue ParmVar 0x55b4828a5d48 'anno' 'const String &'
|-CXXMethodDecl 0x55b4828a6140 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55b4828a5f20 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55b4828a5fa0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55b4828a6018 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b4828aa428 <col:68, line:243:5>
|   `-ReturnStmt 0x55b4828aa418 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55b4828aa400 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55b4828aa3a0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55b4828aa370 <col:9> '<bound member function type>' ->xmessage 0x55b4828a5e60
|         | `-CXXThisExpr 0x55b4828aa360 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55b4828aa238 <col:18> 'const String' lvalue ParmVar 0x55b4828a5f20 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55b4828aa3e8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b4828aa3d0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b4828aa340 <col:24, col:40> 'String' (CXXTemporary 0x55b4828aa340)
|               `-CXXMemberCallExpr 0x55b4828aa2d8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55b4828aa268 <col:24> '<bound member function type>' ->vformat 0x55b4828a7320
|                 | `-CXXThisExpr 0x55b4828aa258 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55b4828aa308 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55b4828aa298 <col:32> 'const char *' lvalue ParmVar 0x55b4828a5fa0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55b4828aa320 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55b4828aa2b8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b4828a6018 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b4828a63e0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55b4828a6208 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55b4828a6280 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55b4828a62f8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55b4828aa768 <col:23, line:254:5>
|   `-ReturnStmt 0x55b4828aa758 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55b4828aa740 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55b4828aa6e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55b4828aa6b0 <col:9> '<bound member function type>' ->xmessage 0x55b4828a5e60
|         | `-CXXThisExpr 0x55b4828aa6a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55b4828aa728 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55b4828aa710 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55b4828aa660 <col:18, col:65> 'String' (CXXTemporary 0x55b4828aa660)
|         |     `-CallExpr 0x55b4828aa5f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55b4828aa5e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55b4828aa4c8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55b4828a7e58 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55b4828aa4e8 <col:31> 'const String' lvalue ParmVar 0x55b4828a6280 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55b4828aa640 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55b4828aa628 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55b4828aa5c0 <col:37, col:64> 'String' (CXXTemporary 0x55b4828aa5c0)
|         |             `-CallExpr 0x55b4828aa590 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55b4828aa578 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55b4828aa508 <col:37> 'String (const String &)' lvalue CXXMethod 0x55b4828a84a8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55b4828aa528 <col:56> 'const String' lvalue ParmVar 0x55b4828a6208 'landmark' 'const String &'
|         `-DeclRefExpr 0x55b4828aa680 <col:68> 'const String' lvalue ParmVar 0x55b4828a62f8 'str' 'const String &'
|-CXXMethodDecl 0x55b4828a6760 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55b4828a64a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55b4828a6520 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55b4828a65a0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55b4828a6618 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b4828aaa20 <col:34, line:267:5>
|   `-ReturnStmt 0x55b4828aaa10 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55b4828aa9f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55b4828aa990 <col:9, col:51> 'int'
|         |-MemberExpr 0x55b4828aa960 <col:9> '<bound member function type>' ->xmessage 0x55b4828a63e0
|         | `-CXXThisExpr 0x55b4828aa950 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55b4828aa808 <col:18> 'const String' lvalue ParmVar 0x55b4828a64a8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55b4828aa828 <col:28> 'const String' lvalue ParmVar 0x55b4828a6520 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55b4828aa9e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55b4828aa9c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55b4828aa930 <col:34, col:50> 'String' (CXXTemporary 0x55b4828aa930)
|               `-CXXMemberCallExpr 0x55b4828aa8c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55b4828aa858 <col:34> '<bound member function type>' ->vformat 0x55b4828a7320
|                 | `-CXXThisExpr 0x55b4828aa848 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55b4828aa8f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55b4828aa888 <col:42> 'const char *' lvalue ParmVar 0x55b4828a65a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55b4828aa910 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55b4828aa8a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b4828a6618 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b4828a6870 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55b4828aaaa0 <col:25, line:288:5>
|   `-ReturnStmt 0x55b4828aaa90 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55b4828aaa78 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55b4828aaa48 <col:9> 'const int' lvalue ->_nerrors 0x55b4828a9678
|         `-CXXThisExpr 0x55b4828aaa38 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55b4828a6a80 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55b4828a6928 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55b4828a69a8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a6d68 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55b4828a6b48 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55b4828a6bc8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55b4828a6c40 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b4828a6f00 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55b4828a6e38 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a7148 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55b4828a6fc0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55b4828a7038 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55b4828aad00 <col:58, line:357:5>
|   `-ReturnStmt 0x55b4828aacf0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55b4828aacd8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55b4828aaca8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55b4828aac90 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55b4828aac70 <col:9, col:29> 'String' (CXXTemporary 0x55b4828aac70)
|             `-CallExpr 0x55b4828aac00 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55b4828aabe8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55b4828aab68 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55b4828a6d68 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55b4828aab08 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55b4828aac38 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55b4828aab28 <col:21> 'const char *' lvalue ParmVar 0x55b4828a6fc0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55b4828aac50 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55b4828aab48 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55b4828a7038 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b4828a7320 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55b4828a7210 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55b4828a7288 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55b4828a7478 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55b4828a73e8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55b4828a75c0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55b4828a7530 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55b4828a7860 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55b4828a7678 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55b4828a76f8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55b4828a7770 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55b4828a79c0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55b4828a7930 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55b4828aae18 <col:37, line:441:5>
|   `-IfStmt 0x55b4828aae00 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55b4828aad88 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55b4828aad58 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b4828aad18 <col:6> 'int' lvalue ParmVar 0x55b4828a7930 'level' 'int'
|     | `-ImplicitCastExpr 0x55b4828aad70 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55b4828aad38 <col:15> 'ErrorHandler::Level' EnumConstant 0x55b4828a3a40 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55b4828aade8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55b4828aadb8 <col:8> 'int' lvalue ->_nerrors 0x55b4828a9678
|         `-CXXThisExpr 0x55b4828aada8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55b4828a7a88 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55b4828aaeb0 <col:26, line:448:5>
|   `-BinaryOperator 0x55b4828aae90 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55b4828aae40 <col:2> 'int' lvalue ->_nerrors 0x55b4828a9678
|     | `-CXXThisExpr 0x55b4828aae30 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55b4828aae70 <col:13> 'int' 0
|-CXXMethodDecl 0x55b4828a7c50 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55b4828a7b40 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55b4828a7bb8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55b4828a7e58 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55b4828a7d10 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55b4828a7d88 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55b4828a8108 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55b4828a7f18 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55b4828a7f98 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55b4828a8018 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55b4828a81c0 <col:59> 0 0
|-CXXMethodDecl 0x55b4828a8358 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55b4828a8238 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55b4828a82b8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55b4828ab520 <col:70, line:534:5>
|   |-DeclStmt 0x55b4828ab020 <line:528:2, col:20>
|   | |-VarDecl 0x55b4828aaed8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55b4828aaf40 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55b4828aaf78 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55b4828aafe0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55b4828ab0f0 <line:529:2, col:23>
|   | `-VarDecl 0x55b4828ab050 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55b4828ab0d8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55b4828ab0b8 <col:18> 'const char *' lvalue ParmVar 0x55b4828a8238 'begin' 'const char *'
|   |-DoStmt 0x55b4828ab4b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55b4828ab3e8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55b4828ab3d0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55b4828ab3b0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55b4828ab108 <col:6> 'const char *' lvalue Var 0x55b4828ab050 'x' 'const char *'
|   | |     `-CallExpr 0x55b4828ab300 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55b4828ab2e8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55b4828ab2a0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55b4828a9b50 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55b4828ab368 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55b4828ab350 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55b4828ab1c0 <col:20, col:27> 'String' (CXXTemporary 0x55b4828ab1c0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55b4828ab188 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55b4828ab380 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55b4828ab1e0 <col:30> 'const char *' lvalue Var 0x55b4828ab050 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55b4828ab398 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55b4828ab200 <col:33> 'const char *' lvalue ParmVar 0x55b4828a82b8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55b4828ab240 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55b4828ab220 <col:39> 'String' lvalue Var 0x55b4828aaed8 'name' 'String'
|   | |       |-UnaryOperator 0x55b4828ab278 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55b4828ab258 <col:46> 'String' lvalue Var 0x55b4828aaf78 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55b4828ab290 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55b4828ab4a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55b4828ab488 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55b4828ab468 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55b4828ab438 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|   |         `-ImplicitCastExpr 0x55b4828ab420 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55b4828ab400 <col:11> 'String' lvalue Var 0x55b4828aaed8 'name' 'String'
|   `-ReturnStmt 0x55b4828ab510 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55b4828ab4f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55b4828ab4d8 <col:9> 'const char *' lvalue Var 0x55b4828ab050 'x' 'const char *'
|-CXXMethodDecl 0x55b4828a84a8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55b4828a8418 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55b4828abb28 <col:55, line:550:5>
|   `-IfStmt 0x55b4828abb00 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55b4828ab760 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55b4828ab748 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b4828ab730 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b4828ab710 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b4828ab6e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|     | |       `-DeclRefExpr 0x55b4828ab580 <col:6> 'const String' lvalue ParmVar 0x55b4828a8418 'x' 'const String &'
|     | `-BinaryOperator 0x55b4828ab6c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55b4828ab690 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55b4828ab640 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55b4828ab628 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55b4828ab5e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55b4825b9e00 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55b4828ab5a0 <col:11> 'const String' lvalue ParmVar 0x55b4828a8418 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55b4828ab5c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55b4828ab6a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55b4828ab678 <col:19> 'char' 123
|     |-ReturnStmt 0x55b4828ab7d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55b4828ab7a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55b4828ab780 <col:13> 'const String' lvalue ParmVar 0x55b4828a8418 'x' 'const String &'
|     `-IfStmt 0x55b4828abad8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55b4828ab868 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b4828ab850 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b4828ab830 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b4828ab800 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |       `-DeclRefExpr 0x55b4828ab7e0 <col:11> 'const String' lvalue ParmVar 0x55b4828a8418 'x' 'const String &'
|       |-ReturnStmt 0x55b4828ab9f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55b4828ab9d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55b4828ab9a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55b4828ab990 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55b4828ab970 <col:13, col:29> 'String' (CXXTemporary 0x55b4828ab970)
|       |         `-CallExpr 0x55b4828ab920 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55b4828ab908 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55b4828ab880 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55b4828a7c50 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55b4828ab950 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55b4828ab8a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55b4828ab8c0 <col:28> 'const String' lvalue ParmVar 0x55b4828a8418 'x' 'const String &'
|       `-ReturnStmt 0x55b4828abac8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55b4828abab0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55b4828aba80 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55b4828aba68 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55b4828aba48 <col:13, col:20> 'String' (CXXTemporary 0x55b4828aba48)
|                 `-CXXTemporaryObjectExpr 0x55b4828aba10 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55b4828a8670 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55b4828a8560 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55b4828a85d8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b4828a9df8 <col:71> 'bool' false
|-CXXRecordDecl 0x55b4828a8720 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55b4828a8a18 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55b4828a89b0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55b4828a8950 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55b4828a8910 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55b48259ce60 'String'
|       | `-CXXRecord 0x55b48259cdd0 'String'
|       |-BuiltinType 0x55b482271580 'int'
|       `-DecayedType 0x55b4827542f0 '__va_list_tag *' sugar
|         |-TypedefType 0x55b4827542c0 'va_list' sugar
|         | |-Typedef 0x55b48248ef20 'va_list'
|         | `-TypedefType 0x55b48248eed0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55b4823c6af8 '__gnuc_va_list'
|         |   `-TypedefType 0x55b4823c6a60 '__builtin_va_list' sugar
|         |     |-Typedef 0x55b4822b2d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55b4822b2ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55b4822722d0 '__va_list_tag'
|         |         `-CXXRecord 0x55b482272238 '__va_list_tag'
|         `-PointerType 0x55b4824947c0 '__va_list_tag *'
|           `-RecordType 0x55b4822722d0 '__va_list_tag'
|             `-CXXRecord 0x55b482272238 '__va_list_tag'
|-EnumDecl 0x55b4828a8a70 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55b4828a8b70 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a9120 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8b50 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55b4828a8b30 <col:16> 'int' 1
| |-EnumConstantDecl 0x55b4828a8c00 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a9138 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8be0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55b4828a8bc0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55b4828a8c90 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a9150 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8c70 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55b4828a8c50 <col:22> 'int' 4
| |-EnumConstantDecl 0x55b4828a8d20 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a9168 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8d00 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55b4828a8ce0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55b4828a8db0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a9180 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8d90 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55b4828a8d70 <col:22> 'int' 16
| |-EnumConstantDecl 0x55b4828a8e90 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a9198 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8e20 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55b4828a8e00 <col:19> 'int' 32
| |-EnumConstantDecl 0x55b4828a8f20 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a91b0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8f00 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55b4828a8ee0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55b4828a8fb0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a91c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a8f90 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55b4828a8f70 <col:14> 'int' 128
| |-EnumConstantDecl 0x55b4828a9040 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55b4828a91e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4828a9020 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55b4828a9000 <col:16> 'int' 256
| `-EnumConstantDecl 0x55b4828a90d0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55b4828a91f8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4828a90b0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55b4828a9090 <col:12> 'int' 1024
|-CXXMethodDecl 0x55b4828a9408 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55b4828a9220 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55b4828a92c0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55b4828a9590 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55b4828a94c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55b4828a9638 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55b4828a9678 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55b4828a96d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55b4828a9750 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55b4828a9b50 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55b4828a97c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55b4828a9848 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55b4828a98c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55b4828a9940 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55b4828a99b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55b4828a9a30 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55b4828a9c78 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55b4828a9c78
| `-ParmVarDecl 0x55b4828a9d88 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55b4828abe88 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55b4828abe88
  `-ParmVarDecl 0x55b4828abf98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b482753338 prev 0x55b4827982d8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b482753430 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55b4827534c0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55b4827535f8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55b4827534f8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55b482754a20 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55b482754a00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55b482754598 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55b482754ab0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b482754a70 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55b4827534f8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55b482754600 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55b482754b30 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55b482754af0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55b482754660 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55b482754b70 <col:54> 'bool' false
| `-CompoundStmt 0x55b482754c78 <col:61, line:38:5>
|   `-BinaryOperator 0x55b482754c58 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55b482754bf0 <col:9> 'const Element *' lvalue ->_context 0x55b482754538
|     | `-CXXThisExpr 0x55b482754be0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55b482754c40 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55b482754c20 <col:20> 'int' 0
|-CXXConstructorDecl 0x55b482753808 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b4827536b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55b482753730 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55b482754a58 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55b482754a38 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55b482754538 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55b482754cd0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b482754c90 <col:20> 'const Element *' lvalue ParmVar 0x55b4827536b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55b482754598 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55b482754d50 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b482754d10 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55b482753730 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55b482754600 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55b482754dd0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55b482754d90 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55b482754660 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55b482754e10 <col:73> 'bool' false
| `-CompoundStmt 0x55b482754e88 <col:80, line:46:5>
|-CXXMethodDecl 0x55b482753938 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55b482754f00 <col:36, line:51:5>
|   `-ReturnStmt 0x55b482754ef0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55b482754ed8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55b482754ea8 <col:16> 'const Element *const' lvalue ->_context 0x55b482754538
|         `-CXXThisExpr 0x55b482754e98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55b482753a28 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55b482754f80 <col:32, line:57:5>
|   `-ReturnStmt 0x55b482754f70 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55b482754f58 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55b482754f28 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55b482754598
|         `-CXXThisExpr 0x55b482754f18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55b482753ae8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55b482753c70 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b482753ba0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55b482753dc0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b482753d30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b482753f10 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55b482753e80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55b482754118 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55b482753fc8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55b482754040 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55b482754448 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55b4827541d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55b482754258 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55b482754320 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55b482754500 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55b482754538 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55b482754598 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55b482754600 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55b482754660 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55b4827546b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55b4827546b0
| `-ParmVarDecl 0x55b4827547c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55b482754868 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55b482754868
| `-ParmVarDecl 0x55b482754978 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55b4828b46a8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b48285fc80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55b48285fe58 prev 0x55b48285fc80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55b48285fee8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55b48285ff10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b482861ae0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55b482861a90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55b4828603c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55b4828602c0 'type'
|     `-TemplateSpecializationType 0x55b482860250 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55b482860130 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55b482860110 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55b4828600f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55b482860230 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55b482860150 'char_array'
|-TypedefDecl 0x55b482861b98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55b482861b60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55b482861b40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55b482861ae0 'type'
|     `-ElaboratedType 0x55b482861a90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55b4828603c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55b4828602c0 'type'
|         `-TemplateSpecializationType 0x55b482860250 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55b482860130 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55b482860110 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55b4828600f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55b482860230 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55b482860150 'char_array'
|-CXXMethodDecl 0x55b482861d18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55b482861c28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55b482861e08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55b482861ee8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55b4828621b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55b4828620c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55b4828623f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b482862270 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b4828622e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b4828625c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b4828624b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b482862530 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b482862728 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55b4828627f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55b482862a48 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b4828628b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55b482862930 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b482862ca8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55b482862b18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55b482862b90 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b482862e68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55b482862d78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b482863028 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55b482862f30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b4828630e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b482863190 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55b48286a780 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55b482863240 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55b4828632b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55b48286aa18 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55b48286a920 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55b48286aae0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55b48286ab30 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55b48286ab80 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b48285e688 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55b48285e898 prev 0x55b48285e688 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55b48285fbf0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55b48285fba0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55b48285fb80 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55b48285fa30 'type'
|     `-SubstTemplateTypeParmType 0x55b48285f850 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55b482536cb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b482536c58 'T'
|       `-RecordType 0x55b48285f3a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55b48285f2b8 'sized_array_memory'
|-FieldDecl 0x55b48286abd0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55b48286ac20 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55b48286ac58 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|   |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55b48256e948 'T'
|   `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286ace8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55b48286acb0 'int &'
|   `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|     |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b48256e948 'T'
|     `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286ada8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55b48286ad70 'const int &'
|   `-QualType 0x55b48285e931 'const int' const
|     `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286ae38 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55b48286ae00 'int *'
|   `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|     |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b48256e948 'T'
|     `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286aec8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55b48286ae90 'const int *'
|   `-QualType 0x55b48285e931 'const int' const
|     `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286bab0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55b48286ba60 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55b48286ba40 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55b48286b9d0 'type'
|     `-SubstTemplateTypeParmType 0x55b48286b790 'int' sugar
|       |-TemplateTypeParmType 0x55b482541ab0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b482541a60 'T'
|       `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286bb18 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55b48286ad70 'const int &'
|   `-QualType 0x55b48285e931 'const int' const
|     `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286bb70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286bbd8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55b48286ae00 'int *'
|   `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|     |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55b48256e948 'T'
|     `-BuiltinType 0x55b482271580 'int'
|-TypedefDecl 0x55b48286bc40 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55b48286ae90 'const int *'
|   `-QualType 0x55b48285e931 'const int' const
|     `-SubstTemplateTypeParmType 0x55b48285e930 'int' sugar
|       |-TemplateTypeParmType 0x55b48256e9a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55b48256e948 'T'
|       `-BuiltinType 0x55b482271580 'int'
|-EnumDecl 0x55b48286bc98 <line:134:5> col:5
| `-EnumConstantDecl 0x55b48286bd90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55b48286bd70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55b482570028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55b482570000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55b48256ffe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55b48286be18 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55b48286c068 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48286bed0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b48286bf70 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55b48286c328 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55b48286c210 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55b48286c5e8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55b48286c4d0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55b48286c930 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55b48286c810 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55b48286cc40 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55b48286cb20 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55b48286cf30 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48286cd78 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b48286cdf0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b48286d058 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55b48286d138 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48286d190 <col:30> Inherited
|-CXXMethodDecl 0x55b48286d1d8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55b48286d288 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48286d2e0 <col:30> Inherited
|-CXXMethodDecl 0x55b48286d3a8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b48286d458 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48286d4b0 <col:30> Inherited
|-CXXMethodDecl 0x55b48286d4f8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b48286d5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48286d600 <col:30> Inherited
|-CXXMethodDecl 0x55b48286d648 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b48286d6f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48286d750 <col:30> Inherited
|-CXXMethodDecl 0x55b48286d798 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55b48286d848 <col:20> Inherited
| `-OptimizeNoneAttr 0x55b48286d8a0 <col:30> Inherited
|-CXXMethodDecl 0x55b48286d8c8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b48286d978 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55b48286da28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55b48286dbe8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48286dad8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55b48286db50 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b48286dd38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55b48286dca8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48286dee8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55b48286ddf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b48286dfa0 <col:20>
| `-OptimizeNoneAttr 0x55b48286dff8 <col:30>
|-CXXMethodDecl 0x55b48286e118 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55b48286e020 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55b48286e1d0 <col:20>
| `-OptimizeNoneAttr 0x55b48286e228 <col:30>
|-CXXMethodDecl 0x55b48286e2e0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b48286e250 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48286e428 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b48286e398 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48286e558 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55b48286e688 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55b48286e758 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55b48286e828 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55b48286e968 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55b48286e8d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48286eab0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55b48286ea20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55b48286ebf8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55b48286eb68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b48286ecb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55b48286edb0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55b48286ed20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55b48286ee68 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55b48286ef28 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55b48286f028 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55b48286f1a8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55b48286f0e8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55b48286f968 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55b48286f260 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55b48286f8c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55b48286f7c8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55b48286fa48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55b48286fb98 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55b48286fb08 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b48286fc50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55b48286fe98 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55b48286fd10 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55b48286fd88 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55b482870058 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55b48286ff68 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55b4828702a8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55b482870120 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55b482870198 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55b482870368 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55b4828705c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55b4828704d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55b482870698 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b48285c7f8 prev 0x55b48283dfe8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b48285c8f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55b48285c9e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55b482882450 <col:16, line:828:9>
|-CXXDestructorDecl 0x55b48285cad0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55b482882460 <col:25, line:830:9>
|-CXXMethodDecl 0x55b48285cbd0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55b48285cc80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55b48285cd28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55b48285cd28
| `-ParmVarDecl 0x55b48285ce38 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55b48285d5f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55b48285d5f8
  `-ParmVarDecl 0x55b48285d708 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b482759ca8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55b48283df58 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55b48283dfe8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55b48283e0a0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55b48283e1a8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55b48283e0d8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b482871c58 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b482871c38 <col:31> 'int' 0
|-CXXConstructorDecl 0x55b48283e4c8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55b48283e340 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55b48283e3b8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b482871c90 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b482871c70 <col:59> 'int' 0
|-CXXConstructorDecl 0x55b48283e6a0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b48283e590 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55b48283e608 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b482871cc8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b482871ca8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55b48283ea58 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55b48283e840 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55b48283e8b8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55b48283e930 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55b482871d00 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55b482871ce0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55b48283ec18 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55b48283eb58 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55b48283ed10 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55b48283eef8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55b48283ee00 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55b48283efe8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55b4828720b0 <col:24, line:291:5>
|   `-ReturnStmt 0x55b4828720a0 <line:290:9, col:79>
|     `-BinaryOperator 0x55b482872080 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55b482871f58 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55b482871eb0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55b482871e90 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55b482871d88 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55b482871d70 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55b482871d58 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55b482871d28 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55b48285e620
|       | |   |       `-CXXThisExpr 0x55b482871d18 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55b482871e78 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55b482871e60 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55b482871e28 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55b482871df8 <col:28, col:35> '<bound member function type>' ->size 0x55b48281f0d8
|       | |           `-ImplicitCastExpr 0x55b482871e48 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55b482871de0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55b482871db0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55b48285e620
|       | |                 `-CXXThisExpr 0x55b482871da0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55b482871f40 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55b482871f28 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55b482871f10 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55b482871ee0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55b4828707e0
|       |         `-CXXThisExpr 0x55b482871ed0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55b482872060 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55b482872048 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b482872030 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b482871ff0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b482871fd8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b482871f88 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55b482870890
|         |     |   `-CXXThisExpr 0x55b482871f78 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55b482871fb8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55b482872010 <col:79> 'int' 0
|-CXXMethodDecl 0x55b48283f0a8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55b482872288 <col:32, line:296:5>
|   `-ReturnStmt 0x55b482872278 <line:295:9, col:49>
|     `-BinaryOperator 0x55b482872258 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55b482872138 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55b482872120 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55b482872108 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55b4828720d8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55b4828707e0
|       |       `-CXXThisExpr 0x55b4828720c8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55b482872238 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55b482872220 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55b482872208 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55b4828721c8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55b4828721b0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55b482872160 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55b482870890
|         |     |   `-CXXThisExpr 0x55b482872150 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55b482872190 <col:43> 'int' 0
|         `-IntegerLiteral 0x55b4828721e8 <col:49> 'int' 0
|-CXXMethodDecl 0x55b48283f198 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55b482872498 <col:19, line:306:5>
|   |-IfStmt 0x55b4828723b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55b4828722f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55b4828722e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55b4828722b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55b48285e620
|   | |     `-CXXThisExpr 0x55b4828722a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55b482872398 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55b482872368 <col:13, col:20> '<bound member function type>' ->clear 0x55b482821ad8
|   |     `-ImplicitCastExpr 0x55b482872350 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55b482872320 <col:13> 'Vector<String> *' lvalue ->_conf 0x55b48285e620
|   |         `-CXXThisExpr 0x55b482872310 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55b482872440 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55b482872410 <col:9, col:16> '<bound member function type>' .clear 0x55b482870368
|   |   `-MemberExpr 0x55b4828723e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55b482870780
|   |     `-CXXThisExpr 0x55b4828723d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55b482872488 <line:305:9, col:17>
|     `-UnaryOperator 0x55b482872470 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b482872460 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b48283f418 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55b48283f320 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55b48283f598 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55b48283f4d0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55b48283f918 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55b48283f640 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55b48283f878 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55b48283f6e8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55b48283f760 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55b482874118 <col:67, line:327:5>
|     |-WhileStmt 0x55b482872768 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55b482872580 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55b482872500 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55b4827907a8 0x55b4825d9b68 0x55b4825d9840 0x55b4825ca010 0x55b4825c9cc0 0x55b4825c95b0 0x55b48259bf20 0x55b4825293f0
|     | | |-DeclRefExpr 0x55b4828724c0 <col:16> 'Iter' lvalue ParmVar 0x55b48283f6e8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55b4828724e0 <col:25> 'Iter' lvalue ParmVar 0x55b48283f760 'end' 'Iter'
|     | `-CompoundStmt 0x55b482872748 <col:30, line:325:9>
|     |   |-CallExpr 0x55b4828726e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55b4828725c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55b4828726b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55b482872648 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|     |   |   `-DeclRefExpr 0x55b482872628 <col:24> 'Iter' lvalue ParmVar 0x55b48283f6e8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55b482872730 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55b482872710 <col:15> 'Iter' lvalue ParmVar 0x55b48283f6e8 'begin' 'Iter'
|     `-ReturnStmt 0x55b482874108 <line:326:9, col:17>
|       `-UnaryOperator 0x55b4828740f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b4828740e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b48283fa20 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55b48283f990 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55b48283fb68 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55b48283fad8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55b48283fc30 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55b4828741f8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55b482874198 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55b482874148 <col:9> '<bound member function type>' ->reset_from 0x55b482870c08
|   | | `-CXXThisExpr 0x55b482874138 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55b482874178 <col:20> 'int' 0
|   `-ReturnStmt 0x55b4828741e8 <line:352:9, col:17>
|     `-UnaryOperator 0x55b4828741d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b4828741c0 <col:17> 'Args *' this
|-VarDecl 0x55b48283fce8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b48283fd50 <col:38> 'int' 1
|-VarDecl 0x55b48283fde0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b48283fe48 <col:39> 'int' 2
|-VarDecl 0x55b48283fed8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b48283ff40 <col:39> 'int' 4
|-VarDecl 0x55b48283ffd0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55b482840038 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55b4828403b8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55b4828400b0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b482840318 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b482840160 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482840208 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55b482874350 <col:43, line:371:5>
|     `-ReturnStmt 0x55b482874340 <line:370:9, col:34>
|       `-CallExpr 0x55b482874308 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482874228 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828742a8 <col:21> 'const char *' lvalue ParmVar 0x55b482840160 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b4828742c8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55b4828742e8 <col:33> 'T' lvalue ParmVar 0x55b482840208 'x' 'T &'
|-FunctionTemplateDecl 0x55b4828406e8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55b482840420 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b482840648 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b4828404d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482840578 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55b4828744a0 <col:45, line:375:5>
|     `-ReturnStmt 0x55b482874490 <line:374:9, col:42>
|       `-CallExpr 0x55b482874458 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482874378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828743f8 <col:21> 'const char *' lvalue ParmVar 0x55b4828404d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482874418 <col:30> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55b482874438 <col:41> 'T' lvalue ParmVar 0x55b482840578 'x' 'T &'
|-FunctionTemplateDecl 0x55b482840a18 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55b482840750 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b482840978 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55b482840800 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b4828408a8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55b4828745f0 <col:45, line:379:5>
|     `-ReturnStmt 0x55b4828745e0 <line:378:9, col:43>
|       `-CallExpr 0x55b4828745a8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b4828744c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482874548 <col:21> 'const char *' lvalue ParmVar 0x55b482840800 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482874568 <col:30> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int'
|         `-DeclRefExpr 0x55b482874588 <col:42> 'T' lvalue ParmVar 0x55b4828408a8 'x' 'T &'
|-FunctionTemplateDecl 0x55b482840d48 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55b482840a80 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55b482840ca8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55b482840b30 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55b482840bd8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55b4828747f0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55b4828747e0 <line:382:9, col:55>
| |     `-CallExpr 0x55b4828747a8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55b482874618 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55b482874698 <col:21> 'const char *' lvalue ParmVar 0x55b482840b30 'keyword' 'const char *'
| |       |-BinaryOperator 0x55b482874768 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55b482874718 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55b4828746f8 <col:30> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55b482874750 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55b482874730 <col:42> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55b482874788 <col:54> 'T' lvalue ParmVar 0x55b482840bd8 'x' 'T &'
| `-CXXMethodDecl 0x55b4828b4b38 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55b4828b4958 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55b4828b4a28 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x55b482841148 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55b482840db0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b4828410a8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55b482840e60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482840ee0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b482840f88 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55b482874930 <col:54, line:388:5>
|     |-CallExpr 0x55b4828748b8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b482874808 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b482874848 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b482874858 <col:30> 'const char *' lvalue ParmVar 0x55b482840e60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b482874878 <col:39> 'int' lvalue ParmVar 0x55b482840ee0 'flags' 'int'
|     | `-DeclRefExpr 0x55b482874898 <col:46> 'T' lvalue ParmVar 0x55b482840f88 'x' 'T &'
|     `-ReturnStmt 0x55b482874920 <line:387:9, col:17>
|       `-UnaryOperator 0x55b482874908 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b4828748f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b4828415f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55b4828411b8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b482841238 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b482841558 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55b4828412f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482841398 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55b482841438 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b482874aa0 <col:74, line:403:5>
|     `-ReturnStmt 0x55b482874a90 <line:402:9, col:56>
|       `-CallExpr 0x55b482874a50 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482874960 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828749d0 <col:28> 'const char *' lvalue ParmVar 0x55b4828412f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b4828749f0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55b482874a10 <col:40> 'T' lvalue ParmVar 0x55b482841398 'x' 'T &'
|         `-DeclRefExpr 0x55b482874a30 <col:43> 'const V' lvalue ParmVar 0x55b482841438 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b482841a68 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55b482841668 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b4828416e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b4828419c8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55b4828417a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482841848 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55b4828418e8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b482874c08 <col:76, line:407:5>
|     `-ReturnStmt 0x55b482874bf8 <line:406:9, col:65>
|       `-CallExpr 0x55b482874bb8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482874ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482874b38 <col:28> 'const char *' lvalue ParmVar 0x55b4828417a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482874b58 <col:37> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int'
|         |-DeclRefExpr 0x55b482874b78 <col:49> 'T' lvalue ParmVar 0x55b482841848 'x' 'T &'
|         `-DeclRefExpr 0x55b482874b98 <col:52> 'const V' lvalue ParmVar 0x55b4828418e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b482841fb8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55b482841ad8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b482841b58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b482841f18 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55b482841c18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482841c98 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55b482841d38 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55b482841dd8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b482874d70 <col:85, line:412:5>
|     |-CallExpr 0x55b482874cf0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b482874c20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55b482874c60 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55b482874c70 <col:37> 'const char *' lvalue ParmVar 0x55b482841c18 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b482874c90 <col:46> 'int' lvalue ParmVar 0x55b482841c98 'flags' 'int'
|     | |-DeclRefExpr 0x55b482874cb0 <col:53> 'T' lvalue ParmVar 0x55b482841d38 'x' 'T &'
|     | `-DeclRefExpr 0x55b482874cd0 <col:56> 'const V' lvalue ParmVar 0x55b482841dd8 'default_value' 'const V &'
|     `-ReturnStmt 0x55b482874d60 <line:411:9, col:17>
|       `-UnaryOperator 0x55b482874d48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b482874d38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b482842448 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55b482842030 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b4828420a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b4828423a8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b482842168 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b4828421e0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55b482842288 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55b482874ef0 <col:53, line:425:5>
|     `-ReturnStmt 0x55b482874ee0 <line:424:9, col:42>
|       `-CallExpr 0x55b482874ea0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482874da0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482874e20 <col:21> 'const char *' lvalue ParmVar 0x55b482842168 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482874e40 <col:30> 'int' 0
|         |-DeclRefExpr 0x55b482874e60 <col:33> 'P' lvalue ParmVar 0x55b4828421e0 'parser' 'P'
|         `-DeclRefExpr 0x55b482874e80 <col:41> 'T' lvalue ParmVar 0x55b482842288 'x' 'T &'
|-FunctionTemplateDecl 0x55b482842898 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55b4828424b8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482842538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b4828427f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b4828425f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482842670 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b482842718 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55b482875068 <col:55, line:429:5>
|     `-ReturnStmt 0x55b482875058 <line:428:9, col:50>
|       `-CallExpr 0x55b482875018 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482874f18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482874f98 <col:21> 'const char *' lvalue ParmVar 0x55b4828425f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482874fb8 <col:30> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55b482874fd8 <col:41> 'P' lvalue ParmVar 0x55b482842670 'parser' 'P'
|         `-DeclRefExpr 0x55b482874ff8 <col:49> 'T' lvalue ParmVar 0x55b482842718 'x' 'T &'
|-FunctionTemplateDecl 0x55b482842ce8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55b482842908 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482842988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b482842c48 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b482842a48 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482842ac0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b482842b68 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55b4828751e0 <col:55, line:433:5>
|     `-ReturnStmt 0x55b4828751d0 <line:432:9, col:51>
|       `-CallExpr 0x55b482875190 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875090 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875110 <col:21> 'const char *' lvalue ParmVar 0x55b482842a48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482875130 <col:30> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int'
|         |-DeclRefExpr 0x55b482875150 <col:42> 'P' lvalue ParmVar 0x55b482842ac0 'parser' 'P'
|         `-DeclRefExpr 0x55b482875170 <col:50> 'T' lvalue ParmVar 0x55b482842b68 'x' 'T &'
|-FunctionTemplateDecl 0x55b482843138 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55b482842d58 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482842dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b482843098 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b482842e98 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482842f10 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55b482842fb8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55b482875408 <col:56, line:437:5>
|     `-ReturnStmt 0x55b4828753f8 <line:436:9, col:63>
|       `-CallExpr 0x55b4828753b8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875208 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875288 <col:21> 'const char *' lvalue ParmVar 0x55b482842e98 'keyword' 'const char *'
|         |-BinaryOperator 0x55b482875358 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b482875308 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b4828752e8 <col:30> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b482875340 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b482875320 <col:42> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55b482875378 <col:54> 'P' lvalue ParmVar 0x55b482842f10 'parser' 'P'
|         `-DeclRefExpr 0x55b482875398 <col:62> 'T' lvalue ParmVar 0x55b482842fb8 'x' 'T &'
|-FunctionTemplateDecl 0x55b482843668 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55b4828431a8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482843228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b4828435c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b4828432e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482843368 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b4828433e0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55b482843488 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55b482875570 <col:64, line:442:5>
|     |-CallExpr 0x55b4828754f0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b482875420 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b482875460 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b482875470 <col:30> 'const char *' lvalue ParmVar 0x55b4828432e8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b482875490 <col:39> 'int' lvalue ParmVar 0x55b482843368 'flags' 'int'
|     | |-DeclRefExpr 0x55b4828754b0 <col:46> 'P' lvalue ParmVar 0x55b4828433e0 'parser' 'P'
|     | `-DeclRefExpr 0x55b4828754d0 <col:54> 'T' lvalue ParmVar 0x55b482843488 'x' 'T &'
|     `-ReturnStmt 0x55b482875560 <line:441:9, col:17>
|       `-UnaryOperator 0x55b482875548 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b482875538 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b482843c68 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55b4828436e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482843758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b4828437d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b482843bc8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55b4828438a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482843918 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b4828439b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55b482843a88 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b482875708 <col:84, line:458:5>
|     `-ReturnStmt 0x55b4828756f8 <line:457:9, col:64>
|       `-CallExpr 0x55b4828756b0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b4828755a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875610 <col:28> 'const char *' lvalue ParmVar 0x55b4828438a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482875630 <col:37> 'int' 0
|         |-DeclRefExpr 0x55b482875650 <col:40> 'P' lvalue ParmVar 0x55b482843918 'parser' 'P'
|         |-DeclRefExpr 0x55b482875670 <col:48> 'T' lvalue ParmVar 0x55b4828439b8 'x' 'T &'
|         `-DeclRefExpr 0x55b482875690 <col:51> 'const V' lvalue ParmVar 0x55b482843a88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b4828441e8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55b482843ce0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482843d58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b482843dd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b482844148 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55b482843ea0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482843f18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55b482843fb8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55b482844058 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b482875898 <col:86, line:462:5>
|     `-ReturnStmt 0x55b482875888 <line:461:9, col:73>
|       `-CallExpr 0x55b482875840 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828757a0 <col:28> 'const char *' lvalue ParmVar 0x55b482843ea0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b4828757c0 <col:37> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int'
|         |-DeclRefExpr 0x55b4828757e0 <col:49> 'P' lvalue ParmVar 0x55b482843f18 'parser' 'P'
|         |-DeclRefExpr 0x55b482875800 <col:57> 'T' lvalue ParmVar 0x55b482843fb8 'x' 'T &'
|         `-DeclRefExpr 0x55b482875820 <col:60> 'const V' lvalue ParmVar 0x55b482844058 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55b482844848 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55b482844260 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b4828442d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55b482844358 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b4828447a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55b482844420 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b4828444a0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55b482844518 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55b4828445b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55b482844658 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55b482875a28 <col:95, line:467:5>
|     |-CallExpr 0x55b4828759a0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b4828758b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55b4828758f0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55b482875900 <col:37> 'const char *' lvalue ParmVar 0x55b482844420 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b482875920 <col:46> 'int' lvalue ParmVar 0x55b4828444a0 'flags' 'int'
|     | |-DeclRefExpr 0x55b482875940 <col:53> 'P' lvalue ParmVar 0x55b482844518 'parser' 'P'
|     | |-DeclRefExpr 0x55b482875960 <col:61> 'T' lvalue ParmVar 0x55b4828445b8 'x' 'T &'
|     | `-DeclRefExpr 0x55b482875980 <col:64> 'const V' lvalue ParmVar 0x55b482844658 'default_value' 'const V &'
|     `-ReturnStmt 0x55b482875a18 <line:466:9, col:17>
|       `-UnaryOperator 0x55b482875a00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b4828759f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b482844e28 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55b4828448c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482844948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b4828449c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b482844d88 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b482844a90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482844b08 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55b482844ba8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b482844c48 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b482875bd0 <col:63, line:481:5>
|     `-ReturnStmt 0x55b482875bc0 <line:480:9, col:47>
|       `-CallExpr 0x55b482875b78 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875ad8 <col:21> 'const char *' lvalue ParmVar 0x55b482844a90 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482875af8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55b482875b18 <col:33> 'P' lvalue ParmVar 0x55b482844b08 'parser' 'P'
|         |-DeclRefExpr 0x55b482875b38 <col:41> 'T1' lvalue ParmVar 0x55b482844ba8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b482875b58 <col:45> 'T2' lvalue ParmVar 0x55b482844c48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b4828453a8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55b482844ea0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482844f18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b482844f98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b482845308 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b482845060 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b4828450d8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b482845178 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b482845218 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b482875d70 <col:65, line:485:5>
|     `-ReturnStmt 0x55b482875d60 <line:484:9, col:55>
|       `-CallExpr 0x55b482875d18 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875c78 <col:21> 'const char *' lvalue ParmVar 0x55b482845060 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482875c98 <col:30> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55b482875cb8 <col:41> 'P' lvalue ParmVar 0x55b4828450d8 'parser' 'P'
|         |-DeclRefExpr 0x55b482875cd8 <col:49> 'T1' lvalue ParmVar 0x55b482845178 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b482875cf8 <col:53> 'T2' lvalue ParmVar 0x55b482845218 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b482845928 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55b482845420 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482845498 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b482845518 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b482845888 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b4828455e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482845658 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55b4828456f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b482845798 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b482875f10 <col:65, line:489:5>
|     `-ReturnStmt 0x55b482875f00 <line:488:9, col:56>
|       `-CallExpr 0x55b482875eb8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875e18 <col:21> 'const char *' lvalue ParmVar 0x55b4828455e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482875e38 <col:30> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int'
|         |-DeclRefExpr 0x55b482875e58 <col:42> 'P' lvalue ParmVar 0x55b482845658 'parser' 'P'
|         |-DeclRefExpr 0x55b482875e78 <col:50> 'T1' lvalue ParmVar 0x55b4828456f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b482875e98 <col:54> 'T2' lvalue ParmVar 0x55b482845798 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b48284b7d0 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55b4828459a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482845a18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b482845a98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b482845e08 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b482845b60 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482845bd8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55b482845c78 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b482845d18 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b482876160 <col:66, line:493:5>
|     `-ReturnStmt 0x55b482876150 <line:492:9, col:68>
|       `-CallExpr 0x55b482876108 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482875f38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482875fb8 <col:21> 'const char *' lvalue ParmVar 0x55b482845b60 'keyword' 'const char *'
|         |-BinaryOperator 0x55b482876088 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55b482876038 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b482876018 <col:30> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b482876070 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b482876050 <col:42> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55b4828760a8 <col:54> 'P' lvalue ParmVar 0x55b482845bd8 'parser' 'P'
|         |-DeclRefExpr 0x55b4828760c8 <col:62> 'T1' lvalue ParmVar 0x55b482845c78 'x1' 'T1 &'
|         `-DeclRefExpr 0x55b4828760e8 <col:66> 'T2' lvalue ParmVar 0x55b482845d18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55b48284be38 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55b48284b848 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284b8c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b48284b948 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b48284bd98 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b48284ba10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284ba90 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55b48284bb08 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284bba8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55b48284bc48 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55b4828762f0 <col:74, line:498:5>
|     |-CallExpr 0x55b482876268 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b482876178 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55b4828761b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55b4828761c8 <col:30> 'const char *' lvalue ParmVar 0x55b48284ba10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b4828761e8 <col:39> 'int' lvalue ParmVar 0x55b48284ba90 'flags' 'int'
|     | |-DeclRefExpr 0x55b482876208 <col:46> 'P' lvalue ParmVar 0x55b48284bb08 'parser' 'P'
|     | |-DeclRefExpr 0x55b482876228 <col:54> 'T1' lvalue ParmVar 0x55b48284bba8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55b482876248 <col:58> 'T2' lvalue ParmVar 0x55b48284bc48 'x2' 'T2 &'
|     `-ReturnStmt 0x55b4828762e0 <line:497:9, col:17>
|       `-UnaryOperator 0x55b4828762c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b4828762b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b48284c198 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55b48284beb8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284c0f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b48284bf70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284bfe8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55b482876438 <col:52, line:509:5>
|     `-ReturnStmt 0x55b482876428 <line:508:9, col:44>
|       `-CallExpr 0x55b4828763f0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876390 <col:26> 'const char *' lvalue ParmVar 0x55b48284bf70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b4828763b0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55b4828763d0 <col:38> 'P' lvalue ParmVar 0x55b48284bfe8 'parser' 'P'
|-FunctionTemplateDecl 0x55b48284c498 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55b48284c200 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284c3f8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b48284c2b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284c328 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55b482876578 <col:54, line:513:5>
|     `-ReturnStmt 0x55b482876568 <line:512:9, col:52>
|       `-CallExpr 0x55b482876530 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828764d0 <col:26> 'const char *' lvalue ParmVar 0x55b48284c2b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b4828764f0 <col:35> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55b482876510 <col:46> 'P' lvalue ParmVar 0x55b48284c328 'parser' 'P'
|-FunctionTemplateDecl 0x55b48284c798 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55b48284c500 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284c6f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b48284c5b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284c628 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55b4828766b8 <col:54, line:517:5>
|     `-ReturnStmt 0x55b4828766a8 <line:516:9, col:53>
|       `-CallExpr 0x55b482876670 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b4828765a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876610 <col:26> 'const char *' lvalue ParmVar 0x55b48284c5b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482876630 <col:35> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int'
|         `-DeclRefExpr 0x55b482876650 <col:47> 'P' lvalue ParmVar 0x55b48284c628 'parser' 'P'
|-FunctionTemplateDecl 0x55b48284ca98 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55b48284c800 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284c9f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b48284c8b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284c928 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55b4828768a8 <col:55, line:521:5>
|     `-ReturnStmt 0x55b482876898 <line:520:9, col:65>
|       `-CallExpr 0x55b482876860 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b4828766e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876750 <col:26> 'const char *' lvalue ParmVar 0x55b48284c8b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55b482876820 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55b4828767d0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55b4828767b0 <col:35> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55b482876808 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55b4828767e8 <col:47> 'const int' lvalue Var 0x55b48283fde0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55b482876840 <col:59> 'P' lvalue ParmVar 0x55b48284c928 'parser' 'P'
|-FunctionTemplateDecl 0x55b48284ce68 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55b48284cb00 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284cdc8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55b48284cbb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284cc30 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55b48284cca8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55b4828769e8 <col:63, line:526:5>
|     |-CallExpr 0x55b482876970 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b4828768c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55b482876900 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55b482876910 <col:35> 'const char *' lvalue ParmVar 0x55b48284cbb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55b482876930 <col:44> 'int' lvalue ParmVar 0x55b48284cc30 'flags' 'int'
|     | `-DeclRefExpr 0x55b482876950 <col:51> 'P' lvalue ParmVar 0x55b48284cca8 'parser' 'P'
|     `-ReturnStmt 0x55b4828769d8 <line:525:9, col:17>
|       `-UnaryOperator 0x55b4828769c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b4828769b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b48284d2b8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55b48284ced8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284cf58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284d218 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b48284d018 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284d090 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284d138 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55b482876b40 <col:58, line:541:5>
|     `-ReturnStmt 0x55b482876b30 <line:540:9, col:39>
|       `-CallExpr 0x55b482876af8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876a18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876a98 <col:21> 'const char *' lvalue ParmVar 0x55b48284d018 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482876ab8 <col:30> 'P' lvalue ParmVar 0x55b48284d090 'parser' 'P'
|         `-DeclRefExpr 0x55b482876ad8 <col:38> 'T' lvalue ParmVar 0x55b48284d138 'x' 'T &'
|-FunctionTemplateDecl 0x55b48284d708 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55b48284d328 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284d3a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284d668 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b48284d468 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284d4e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284d588 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55b482876c78 <col:60, line:545:5>
|     `-ReturnStmt 0x55b482876c68 <line:544:9, col:41>
|       `-CallExpr 0x55b482876c30 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876b68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876bd0 <col:23> 'const char *' lvalue ParmVar 0x55b48284d468 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482876bf0 <col:32> 'P' lvalue ParmVar 0x55b48284d4e0 'parser' 'P'
|         `-DeclRefExpr 0x55b482876c10 <col:40> 'T' lvalue ParmVar 0x55b48284d588 'x' 'T &'
|-FunctionTemplateDecl 0x55b48284db58 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55b48284d778 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284d7f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284dab8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b48284d8b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284d930 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284d9d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55b482876db0 <col:60, line:549:5>
|     `-ReturnStmt 0x55b482876da0 <line:548:9, col:41>
|       `-CallExpr 0x55b482876d68 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876ca0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876d08 <col:23> 'const char *' lvalue ParmVar 0x55b48284d8b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482876d28 <col:32> 'P' lvalue ParmVar 0x55b48284d930 'parser' 'P'
|         `-DeclRefExpr 0x55b482876d48 <col:40> 'T' lvalue ParmVar 0x55b48284d9d8 'x' 'T &'
|-FunctionTemplateDecl 0x55b48284dfa8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55b48284dbc8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284dc48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284df08 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b48284dd08 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284dd80 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284de28 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55b482876ee8 <col:61, line:553:5>
|     `-ReturnStmt 0x55b482876ed8 <line:552:9, col:42>
|       `-CallExpr 0x55b482876ea0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876dd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876e40 <col:24> 'const char *' lvalue ParmVar 0x55b48284dd08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482876e60 <col:33> 'P' lvalue ParmVar 0x55b48284dd80 'parser' 'P'
|         `-DeclRefExpr 0x55b482876e80 <col:41> 'T' lvalue ParmVar 0x55b48284de28 'x' 'T &'
|-FunctionTemplateDecl 0x55b48284e488 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55b48284e018 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284e098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284e3e8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b48284e158 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284e1d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55b48284e250 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284e2f8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55b482877060 <col:69, line:557:5>
|     `-ReturnStmt 0x55b482877050 <line:556:9, col:46>
|       `-CallExpr 0x55b482877010 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482876f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482876f90 <col:21> 'const char *' lvalue ParmVar 0x55b48284e158 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482876fb0 <col:30> 'int' lvalue ParmVar 0x55b48284e1d8 'flags' 'int'
|         |-DeclRefExpr 0x55b482876fd0 <col:37> 'P' lvalue ParmVar 0x55b48284e250 'parser' 'P'
|         `-DeclRefExpr 0x55b482876ff0 <col:45> 'T' lvalue ParmVar 0x55b48284e2f8 'x' 'T &'
|-FunctionTemplateDecl 0x55b48284e798 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55b48284e500 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284e6f8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55b48284e5b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284e628 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55b4828771a0 <col:56, line:571:5>
|     `-ReturnStmt 0x55b482877190 <line:570:9, col:48>
|       `-CallExpr 0x55b482877158 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482877088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828770f8 <col:30> 'const char *' lvalue ParmVar 0x55b48284e5b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482877118 <col:39> 'int' 0
|         `-DeclRefExpr 0x55b482877138 <col:42> 'P' lvalue ParmVar 0x55b48284e628 'parser' 'P'
|-FunctionTemplateDecl 0x55b48284eb28 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55b48284e800 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48284ea88 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55b48284e8b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284e930 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b48284e9a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55b482877370 <col:67, line:576:5>
|     |-CallExpr 0x55b4828772f8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b4828771b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55b4828771f8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55b482877208 <col:39> 'const char *' lvalue ParmVar 0x55b48284e8b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b4828772b8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b482877268 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b482877228 <col:48> 'int' lvalue ParmVar 0x55b48284e930 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b4828772a0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b482877280 <col:56> 'const int' lvalue Var 0x55b48283ffd0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55b4828772d8 <col:68> 'P' lvalue ParmVar 0x55b48284e9a8 'parser' 'P'
|     `-ReturnStmt 0x55b482877360 <line:575:9, col:17>
|       `-UnaryOperator 0x55b482877348 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b482877338 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b48284ef78 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55b48284eb98 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284ec18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284eed8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55b48284ecd8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284ed50 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284edf8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55b4828774e0 <col:62, line:592:5>
|     `-ReturnStmt 0x55b4828774d0 <line:591:9, col:51>
|       `-CallExpr 0x55b482877490 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b4828773a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482877410 <col:30> 'const char *' lvalue ParmVar 0x55b48284ecd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482877430 <col:39> 'int' 0
|         |-DeclRefExpr 0x55b482877450 <col:42> 'P' lvalue ParmVar 0x55b48284ed50 'parser' 'P'
|         `-DeclRefExpr 0x55b482877470 <col:50> 'T' lvalue ParmVar 0x55b48284edf8 'x' 'T &'
|-FunctionTemplateDecl 0x55b48284f458 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55b48284efe8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284f068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284f3b8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b48284f128 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284f1a8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b48284f220 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284f2c8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55b4828776d8 <col:73, line:597:5>
|     |-CallExpr 0x55b482877658 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b4828774f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55b482877538 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55b482877548 <col:39> 'const char *' lvalue ParmVar 0x55b48284f128 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b4828775f8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b4828775a8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b482877568 <col:48> 'int' lvalue ParmVar 0x55b48284f1a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b4828775e0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b4828775c0 <col:56> 'const int' lvalue Var 0x55b48283ffd0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55b482877618 <col:68> 'P' lvalue ParmVar 0x55b48284f220 'parser' 'P'
|     | `-DeclRefExpr 0x55b482877638 <col:76> 'T' lvalue ParmVar 0x55b48284f2c8 'x' 'T &'
|     `-ReturnStmt 0x55b4828776c8 <line:596:9, col:17>
|       `-UnaryOperator 0x55b4828776b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b4828776a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b48284fa08 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55b48284f4d0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284f548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48284f968 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b48284f608 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284f680 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55b48284f840 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b482877848 <col:65, line:614:5>
|     `-ReturnStmt 0x55b482877838 <line:613:9, col:46>
|       `-CallExpr 0x55b4828777f8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482877708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482877778 <col:25> 'const char *' lvalue ParmVar 0x55b48284f608 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482877798 <col:34> 'int' 0
|         |-DeclRefExpr 0x55b4828777b8 <col:37> 'P' lvalue ParmVar 0x55b48284f680 'parser' 'P'
|         `-DeclRefExpr 0x55b4828777d8 <col:45> 'Vector<T>' lvalue ParmVar 0x55b48284f840 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55b48284fe38 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55b48284fa78 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b48284fd98 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55b48284fb30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48284fc80 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b482877a60 <col:55, line:618:5>
|     `-ReturnStmt 0x55b482877a50 <line:617:9, col:55>
|       `-CallExpr 0x55b482877a10 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482877870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b4828778e0 <col:25> 'const char *' lvalue ParmVar 0x55b48284fb30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55b482877900 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55b4828779d0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55b4828779f0 <col:54> 'Vector<T>' lvalue ParmVar 0x55b48284fc80 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55b482850408 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55b48284fea0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48284ff18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b482850368 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b48284ffd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482850058 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b4828500d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55b482850220 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b482877c58 <col:76, line:623:5>
|     |-CallExpr 0x55b482877bd8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55b482877a78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55b482877ab8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55b482877ac8 <col:34> 'const char *' lvalue ParmVar 0x55b48284ffd8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55b482877b78 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55b482877b28 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55b482877ae8 <col:43> 'int' lvalue ParmVar 0x55b482850058 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55b482877b60 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55b482877b40 <col:51> 'const int' lvalue Var 0x55b48283ffd0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55b482877b98 <col:63> 'P' lvalue ParmVar 0x55b4828500d0 'parser' 'P'
|     | `-DeclRefExpr 0x55b482877bb8 <col:71> 'Vector<T>' lvalue ParmVar 0x55b482850220 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55b482877c48 <line:622:9, col:17>
|       `-UnaryOperator 0x55b482877c30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b482877c20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b482850948 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55b482850480 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b4828504f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b4828508a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55b4828505b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482850638 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b482850780 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55b482877ec0 <col:66, line:627:5>
|     `-ReturnStmt 0x55b482877eb0 <line:626:9, col:59>
|       `-CallExpr 0x55b482877e70 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55b482877c88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55b482877cf8 <col:25> 'const char *' lvalue ParmVar 0x55b4828505b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55b482877d18 <col:34> 'int' lvalue ParmVar 0x55b482850638 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55b482877e30 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55b482877e50 <col:58> 'Vector<T>' lvalue ParmVar 0x55b482850780 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55b4828509d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55b482877f40 <col:25, line:633:5>
|   `-ReturnStmt 0x55b482877f30 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55b482877f18 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55b482877ee8 <col:16> 'const bool' lvalue ->_status 0x55b48285e488
|         `-CXXThisExpr 0x55b482877ed8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55b482850b58 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55b482850a90 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55b482878028 <col:27, line:639:5>
|   |-BinaryOperator 0x55b482877fd0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b482877f58 <col:9> 'bool' lvalue ParmVar 0x55b482850a90 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b482877fb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b482877f88 <col:13> 'bool' lvalue ->_status 0x55b48285e488
|   |     `-CXXThisExpr 0x55b482877f78 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55b482878018 <line:638:9, col:17>
|     `-UnaryOperator 0x55b482878000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b482877ff0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b482850cd8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55b482850c18 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55b482878118 <col:39, line:644:5>
|   |-BinaryOperator 0x55b4828780c0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b482878048 <col:9> 'bool' lvalue ParmVar 0x55b482850c18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b4828780a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b482878078 <col:13> 'const bool' lvalue ->_status 0x55b48285e488
|   |     `-CXXThisExpr 0x55b482878068 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55b482878108 <line:643:9, col:17>
|     `-UnaryOperator 0x55b4828780f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b4828780e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55b482850da0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55b4828781c0 <col:30, line:651:5>
|   `-ReturnStmt 0x55b4828781b0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55b482878198 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55b482878168 <col:16> 'bool' lvalue ->_read_status 0x55b482754660
|         `-ImplicitCastExpr 0x55b482878148 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55b482878138 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55b482850ee8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55b482850e58 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55b4828782c8 <col:32, line:658:5>
|   |-BinaryOperator 0x55b482878270 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b4828781d8 <col:9> 'bool' lvalue ParmVar 0x55b482850e58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b482878258 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b482878228 <col:13> 'bool' lvalue ->_read_status 0x55b482754660
|   |     `-ImplicitCastExpr 0x55b482878208 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55b4828781f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55b4828782b8 <line:657:9, col:17>
|     `-UnaryOperator 0x55b4828782a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b482878290 <col:17> 'Args *' this
|-CXXMethodDecl 0x55b482851038 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55b482850fa8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55b4828783d8 <col:44, line:663:5>
|   |-BinaryOperator 0x55b482878380 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55b4828782e8 <col:9> 'bool' lvalue ParmVar 0x55b482850fa8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55b482878368 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55b482878338 <col:13> 'bool' lvalue ->_read_status 0x55b482754660
|   |     `-ImplicitCastExpr 0x55b482878318 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55b482878308 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55b4828783c8 <line:662:9, col:17>
|     `-UnaryOperator 0x55b4828783b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b4828783a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55b482851100 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55b4828511c8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55b482851290 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55b482851358 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55b482851668 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55b4828513f8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b4828515c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55b4828514d8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55b482878790 <col:19, line:706:5>
|     `-IfStmt 0x55b482878768 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55b4828784d8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55b482878698 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55b482878668 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55b482878628 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55b482878530 <col:42> '<bound member function type>' ->simple_slot 0x55b4828718c0
|       |     | `-CXXThisExpr 0x55b482878520 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55b4828785c8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55b482878580 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55b4825de608
|       |     | `-DeclRefExpr 0x55b482878560 <col:55> 'T' lvalue ParmVar 0x55b4828514d8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55b482878608 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55b482878758 <line:705:13, col:34>
|         `-CallExpr 0x55b482878730 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55b4828786b8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55b482878710 <col:33> 'T' lvalue ParmVar 0x55b4828514d8 'x' 'T &'
|-FunctionTemplateDecl 0x55b482851938 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55b4828516c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b482851898 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55b4828517a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55b482878b70 <col:31, line:717:5>
|     |-DeclStmt 0x55b4828788d0 <line:713:9, col:23>
|     | `-VarDecl 0x55b4828787b8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55b4828788a8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55b482878830 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55b482878888 <col:21> 'T' lvalue ParmVar 0x55b4828517a8 'x' 'T &'
|     |-IfStmt 0x55b482878b20 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55b4828789c8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55b482878b00 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55b482878aa0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55b482878a30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|     |   | `-DeclRefExpr 0x55b482878a10 <col:14> 'T *' lvalue Var 0x55b4828787b8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55b482878ae0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55b482878b58 <line:716:9, col:16>
|       `-DeclRefExpr 0x55b482878b38 <col:16> 'T *' lvalue Var 0x55b4828787b8 's' 'T *'
|-FunctionTemplateDecl 0x55b482851d48 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55b482851998 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b482851a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b482851ca8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55b482851af8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55b482851b98 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55b482878e80 <col:37, line:726:5>
|     |-IfStmt 0x55b482878e10 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55b482878e30 <line:723:13, col:26>
|     | | `-VarDecl 0x55b482878bd8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55b482878cc8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55b482878c50 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55b482878ca8 <col:25> 'T' lvalue ParmVar 0x55b482851af8 'x' 'T &'
|     | |-DeclRefExpr 0x55b482878cf0 <col:16> 'T *' lvalue Var 0x55b482878bd8 's' 'T *'
|     | `-BinaryOperator 0x55b482878df0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55b482878da0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55b482878d30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|     |   | `-DeclRefExpr 0x55b482878d10 <col:14> 'T *' lvalue Var 0x55b482878bd8 's' 'T *'
|     |   `-DeclRefExpr 0x55b482878dd0 <col:18> 'const V' lvalue ParmVar 0x55b482851b98 'value' 'const V &'
|     `-ReturnStmt 0x55b482878e70 <line:725:9, col:17>
|       `-UnaryOperator 0x55b482878e58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55b482878e48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55b482852148 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55b482851db0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55b4828520a8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55b482851e60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482851ee0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b482851f88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55b482879ca0 <col:65, line:737:5>
|     |-DeclStmt 0x55b482878f18 <line:732:9, col:26>
|     | `-VarDecl 0x55b482878eb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b482879c68 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55b482879c88 <line:733:13, col:58>
|       | `-VarDecl 0x55b482878f40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b482879120 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b4828790f0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b4828790d8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b4828790b8 <col:26, col:58> 'String' (CXXTemporary 0x55b4828790b8)
|       |           `-CXXMemberCallExpr 0x55b482879048 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b482878fb8 <col:26> '<bound member function type>' ->find 0x55b482870ed8
|       |             | `-CXXThisExpr 0x55b482878fa8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b482879080 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b482878fe8 <col:31> 'const char *' lvalue ParmVar 0x55b482851e60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b482879098 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b482879008 <col:40> 'int' lvalue ParmVar 0x55b482851ee0 'flags' 'int'
|       |             `-DeclRefExpr 0x55b482879028 <col:47> 'Args::Slot *' lvalue Var 0x55b482878eb0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b4828791d8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b4828791c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b4828791a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b482879170 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |       `-ImplicitCastExpr 0x55b482879158 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b482879138 <col:20> 'String' lvalue Var 0x55b482878f40 'str' 'String'
|       `-CompoundStmt 0x55b482879c48 <col:61, line:736:9>
|         |-DeclStmt 0x55b482879690 <line:734:13, col:76>
|         | `-VarDecl 0x55b482879228 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55b482879660 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b4828795d0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b482879618 <col:60> 'T' lvalue ParmVar 0x55b482851f88 'variable' 'T &'
|         |     `-UnaryOperator 0x55b482879648 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b482879638 <col:71> 'Args *' this
|         `-CallExpr 0x55b482879c18 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55b4828796b8 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|           | `-CXXThisExpr 0x55b4828796a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b482879bd8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55b4828796e8 <col:23> 'T *' lvalue Var 0x55b482879228 's' 'T *'
|           | `-CallExpr 0x55b482879b98 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b482879970 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55b482879a70 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55b482879a90 <col:86> 'String' lvalue Var 0x55b482878f40 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b482879b40 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b482879ad0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|           |   | `-DeclRefExpr 0x55b482879ab0 <col:92> 'T *' lvalue Var 0x55b482879228 's' 'T *'
|           |   `-UnaryOperator 0x55b482879b80 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b482879b70 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55b482879bf8 <col:103> 'Args::Slot *' lvalue Var 0x55b482878eb0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b482852698 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55b4828521b8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b482852238 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55b4828525f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55b4828522f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482852378 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55b482852418 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55b4828524b8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55b48287ab40 <col:88, line:745:5>
|     |-DeclStmt 0x55b482879d38 <line:741:9, col:26>
|     | `-VarDecl 0x55b482879cd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b482879f58 <line:742:9, col:55>
|     | `-VarDecl 0x55b482879d60 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55b482879f40 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55b482879f10 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55b482879ef8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55b482879ed8 <col:22, col:54> 'String' (CXXTemporary 0x55b482879ed8)
|     |           `-CXXMemberCallExpr 0x55b482879e68 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55b482879dd8 <col:22> '<bound member function type>' ->find 0x55b482870ed8
|     |             | `-CXXThisExpr 0x55b482879dc8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55b482879ea0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b482879e08 <col:27> 'const char *' lvalue ParmVar 0x55b4828522f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55b482879eb8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b482879e28 <col:36> 'int' lvalue ParmVar 0x55b482852378 'flags' 'int'
|     |             `-DeclRefExpr 0x55b482879e48 <col:43> 'Args::Slot *' lvalue Var 0x55b482879cd0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55b48287a330 <line:743:9, col:72>
|     | `-VarDecl 0x55b482879fa8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b48287a300 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b48287a270 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55b48287a2b8 <col:56> 'T' lvalue ParmVar 0x55b482852418 'variable' 'T &'
|     |     `-UnaryOperator 0x55b48287a2e8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b48287a2d8 <col:67> 'Args *' this
|     `-CallExpr 0x55b48287ab10 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55b48287a358 <col:9> '<bound member function type>' ->postparse 0x55b4828710e8
|       | `-CXXThisExpr 0x55b48287a348 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55b48287aad0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55b48287a388 <col:19> 'T *' lvalue Var 0x55b482879fa8 's' 'T *'
|       | `-ParenExpr 0x55b48287aab0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55b48287aa80 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55b48287aa68 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55b48287aa50 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55b48287aa30 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55b48287aa00 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |     |       `-ImplicitCastExpr 0x55b48287a9e8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55b48287a3a8 <col:25> 'String' lvalue Var 0x55b482879d60 'str' 'String'
|       |     |-CallExpr 0x55b48287a858 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55b48287a630 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55b48287a730 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55b48287a750 <col:89> 'String' lvalue Var 0x55b482879d60 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55b48287a800 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55b48287a790 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|       |     | | `-DeclRefExpr 0x55b48287a770 <col:95> 'T *' lvalue Var 0x55b482879fa8 's' 'T *'
|       |     | `-UnaryOperator 0x55b48287a840 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55b48287a830 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55b48287a9c8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55b48287a9a8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55b48287a978 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55b48287a928 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55b48287a8b8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|       |         | | `-DeclRefExpr 0x55b48287a898 <col:109> 'T *' lvalue Var 0x55b482879fa8 's' 'T *'
|       |         | `-DeclRefExpr 0x55b48287a958 <col:113> 'const V' lvalue ParmVar 0x55b4828524b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55b48287a998 <col:120> 'bool' true
|       `-DeclRefExpr 0x55b48287aaf0 <col:128> 'Args::Slot *' lvalue Var 0x55b482879cd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b482852bc8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55b482852710 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482852788 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b482852b28 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b482852848 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b4828528c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b482852940 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55b4828529e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55b48287b738 <col:75, line:754:5>
|     |-DeclStmt 0x55b48287abe8 <line:749:9, col:26>
|     | `-VarDecl 0x55b48287ab80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b48287b700 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55b48287b720 <line:750:13, col:58>
|       | `-VarDecl 0x55b48287ac10 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b48287adf0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b48287adc0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b48287ada8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b48287ad88 <col:26, col:58> 'String' (CXXTemporary 0x55b48287ad88)
|       |           `-CXXMemberCallExpr 0x55b48287ad18 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b48287ac88 <col:26> '<bound member function type>' ->find 0x55b482870ed8
|       |             | `-CXXThisExpr 0x55b48287ac78 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b48287ad50 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b48287acb8 <col:31> 'const char *' lvalue ParmVar 0x55b482852848 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b48287ad68 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b48287acd8 <col:40> 'int' lvalue ParmVar 0x55b4828528c8 'flags' 'int'
|       |             `-DeclRefExpr 0x55b48287acf8 <col:47> 'Args::Slot *' lvalue Var 0x55b48287ab80 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b48287aea8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b48287ae90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b48287ae70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b48287ae40 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |       `-ImplicitCastExpr 0x55b48287ae28 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b48287ae08 <col:20> 'String' lvalue Var 0x55b48287ac10 'str' 'String'
|       `-CompoundStmt 0x55b48287b6e0 <col:61, line:753:9>
|         |-DeclStmt 0x55b48287b280 <line:751:13, col:63>
|         | `-VarDecl 0x55b48287aef8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55b48287b250 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b48287b1c0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b48287b208 <col:47> 'T' lvalue ParmVar 0x55b4828529e8 'variable' 'T &'
|         |     `-UnaryOperator 0x55b48287b238 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b48287b228 <col:58> 'Args *' this
|         `-CallExpr 0x55b48287b6b0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55b48287b2a8 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|           | `-CXXThisExpr 0x55b48287b298 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b48287b670 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55b48287b2d8 <col:23> 'T *' lvalue Var 0x55b48287aef8 's' 'T *'
|           | `-CallExpr 0x55b48287b630 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b48287b4c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55b48287b508 <col:56> 'P' lvalue ParmVar 0x55b482852940 'parser' 'P'
|           |   |-DeclRefExpr 0x55b48287b528 <col:64> 'String' lvalue Var 0x55b48287ac10 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b48287b5d8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b48287b568 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|           |   | `-DeclRefExpr 0x55b48287b548 <col:70> 'T *' lvalue Var 0x55b48287aef8 's' 'T *'
|           |   `-UnaryOperator 0x55b48287b618 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b48287b608 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55b48287b690 <col:81> 'Args::Slot *' lvalue Var 0x55b48287ab80 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b482853228 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55b482852c40 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55b482852cb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55b482852d38 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55b482853188 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55b482852e00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b482852e80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55b482852ef8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55b482852f98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55b482853038 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55b48287e820 <col:98, line:762:5>
|     |-DeclStmt 0x55b48287b7d0 <line:758:9, col:26>
|     | `-VarDecl 0x55b48287b768 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b48287b9f0 <line:759:9, col:55>
|     | `-VarDecl 0x55b48287b7f8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55b48287b9d8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55b48287b9a8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55b48287b990 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55b48287b970 <col:22, col:54> 'String' (CXXTemporary 0x55b48287b970)
|     |           `-CXXMemberCallExpr 0x55b48287b900 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55b48287b870 <col:22> '<bound member function type>' ->find 0x55b482870ed8
|     |             | `-CXXThisExpr 0x55b48287b860 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55b48287b938 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b48287b8a0 <col:27> 'const char *' lvalue ParmVar 0x55b482852e00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55b48287b950 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55b48287b8c0 <col:36> 'int' lvalue ParmVar 0x55b482852e80 'flags' 'int'
|     |             `-DeclRefExpr 0x55b48287b8e0 <col:43> 'Args::Slot *' lvalue Var 0x55b48287b768 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55b48287be10 <line:760:9, col:59>
|     | `-VarDecl 0x55b48287ba48 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b48287bde0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b48287bd50 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55b48287bd98 <col:43> 'T' lvalue ParmVar 0x55b482852f98 'variable' 'T &'
|     |     `-UnaryOperator 0x55b48287bdc8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b48287bdb8 <col:54> 'Args *' this
|     `-CallExpr 0x55b48287e7f0 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55b48287be38 <col:9> '<bound member function type>' ->postparse 0x55b4828710e8
|       | `-CXXThisExpr 0x55b48287be28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55b48287e7b0 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55b48287be68 <col:19> 'T *' lvalue Var 0x55b48287ba48 's' 'T *'
|       | `-ParenExpr 0x55b48287e790 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55b48287e760 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55b48287e748 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55b48287e730 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55b48287e710 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55b48287e6e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |     |       `-ImplicitCastExpr 0x55b48287e6c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55b48287be88 <col:25> 'String' lvalue Var 0x55b48287b7f8 'str' 'String'
|       |     |-CallExpr 0x55b48287e538 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55b48287c070 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55b48287c0b8 <col:59> 'P' lvalue ParmVar 0x55b482852ef8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55b48287e430 <col:67> 'String' lvalue Var 0x55b48287b7f8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55b48287e4e0 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55b48287e470 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|       |     | | `-DeclRefExpr 0x55b48287e450 <col:73> 'T *' lvalue Var 0x55b48287ba48 's' 'T *'
|       |     | `-UnaryOperator 0x55b48287e520 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55b48287e510 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55b48287e6a8 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55b48287e688 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55b48287e658 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55b48287e608 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55b48287e598 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|       |         | | `-DeclRefExpr 0x55b48287e578 <col:87> 'T *' lvalue Var 0x55b48287ba48 's' 'T *'
|       |         | `-DeclRefExpr 0x55b48287e638 <col:91> 'const V' lvalue ParmVar 0x55b482853038 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55b48287e678 <col:98> 'bool' true
|       `-DeclRefExpr 0x55b48287e7d0 <col:106> 'Args::Slot *' lvalue Var 0x55b48287b768 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b48285b508 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55b4828532a8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b482853328 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55b4828533a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55b48285b468 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55b482853470 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b4828534f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55b482853568 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55b482853608 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55b4828536a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55b48287f7f8 <col:60, line:773:5>
|     |-DeclStmt 0x55b48287e8c8 <line:767:9, col:26>
|     | `-VarDecl 0x55b48287e860 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b48287f7c0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55b48287f7e0 <line:768:13, col:58>
|       | `-VarDecl 0x55b48287e8f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b48287ead0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b48287eaa0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b48287ea88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b48287ea68 <col:26, col:58> 'String' (CXXTemporary 0x55b48287ea68)
|       |           `-CXXMemberCallExpr 0x55b48287e9f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b48287e968 <col:26> '<bound member function type>' ->find 0x55b482870ed8
|       |             | `-CXXThisExpr 0x55b48287e958 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b48287ea30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b48287e998 <col:31> 'const char *' lvalue ParmVar 0x55b482853470 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b48287ea48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b48287e9b8 <col:40> 'int' lvalue ParmVar 0x55b4828534f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55b48287e9d8 <col:47> 'Args::Slot *' lvalue Var 0x55b48287e860 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b48287eb88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b48287eb70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b48287eb50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b48287eb20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |       `-ImplicitCastExpr 0x55b48287eb08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b48287eae8 <col:20> 'String' lvalue Var 0x55b48287e8f0 'str' 'String'
|       `-CompoundStmt 0x55b48287f798 <col:61, line:772:9>
|         |-DeclStmt 0x55b48287eec0 <line:769:13, col:66>
|         | `-VarDecl 0x55b48287ebd8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55b48287ee90 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b48287ee00 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b48287ee48 <col:49> 'T1' lvalue ParmVar 0x55b482853608 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55b48287ee78 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b48287ee68 <col:61> 'Args *' this
|         |-DeclStmt 0x55b48287f230 <line:770:13, col:66>
|         | `-VarDecl 0x55b48287ef48 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55b48287f200 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55b48287f170 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55b48287f1b8 <col:49> 'T2' lvalue ParmVar 0x55b4828536a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55b48287f1e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55b48287f1d8 <col:61> 'Args *' this
|         `-CallExpr 0x55b48287f768 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55b48287f258 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|           | `-CXXThisExpr 0x55b48287f248 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55b48287f728 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55b48287f2c8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55b48287f288 <col:23> 'T1 *' lvalue Var 0x55b48287ebd8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55b48287f2a8 <col:29> 'T2 *' lvalue Var 0x55b48287ef48 's2' 'T2 *'
|           | `-CallExpr 0x55b48287f6e0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55b48287f4b0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55b48287f4f8 <col:63> 'P' lvalue ParmVar 0x55b482853568 'parser' 'P'
|           |   |-DeclRefExpr 0x55b48287f518 <col:71> 'String' lvalue Var 0x55b48287e8f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55b48287f5c8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b48287f558 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|           |   | `-DeclRefExpr 0x55b48287f538 <col:77> 'T1 *' lvalue Var 0x55b48287ebd8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55b48287f688 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55b48287f618 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|           |   | `-DeclRefExpr 0x55b48287f5f8 <col:82> 'T2 *' lvalue Var 0x55b48287ef48 's2' 'T2 *'
|           |   `-UnaryOperator 0x55b48287f6c8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55b48287f6b8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55b48287f748 <col:94> 'Args::Slot *' lvalue Var 0x55b48287e860 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b48285b8f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55b48285b588 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48285b858 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55b48285b640 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48285b6c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55b48285b738 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55b48287fd10 <col:67, line:780:5>
|     |-DeclStmt 0x55b48287f890 <line:777:9, col:26>
|     | `-VarDecl 0x55b48287f828 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55b48287fcd8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55b48287fcf8 <line:778:13, col:58>
|       | `-VarDecl 0x55b48287f8b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55b48287fa98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55b48287fa68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55b48287fa50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55b48287fa30 <col:26, col:58> 'String' (CXXTemporary 0x55b48287fa30)
|       |           `-CXXMemberCallExpr 0x55b48287f9c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55b48287f930 <col:26> '<bound member function type>' ->find 0x55b482870ed8
|       |             | `-CXXThisExpr 0x55b48287f920 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55b48287f9f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b48287f960 <col:31> 'const char *' lvalue ParmVar 0x55b48285b640 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55b48287fa10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55b48287f980 <col:40> 'int' lvalue ParmVar 0x55b48285b6c0 'flags' 'int'
|       |             `-DeclRefExpr 0x55b48287f9a0 <col:47> 'Args::Slot *' lvalue Var 0x55b48287f828 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55b48287fb50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55b48287fb38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55b48287fb18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55b48287fae8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|       |       `-ImplicitCastExpr 0x55b48287fad0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55b48287fab0 <col:20> 'String' lvalue Var 0x55b48287f8b8 'str' 'String'
|       `-CallExpr 0x55b48287fca8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55b48287fb78 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|         | `-CXXThisExpr 0x55b48287fb68 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55b48287fc58 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55b48287fbc8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55b48287fba8 <col:23> 'P' lvalue ParmVar 0x55b48285b738 'parser' 'P'
|         | |-DeclRefExpr 0x55b48287fc10 <col:36> 'String' lvalue Var 0x55b48287f8b8 'str' 'String'
|         | `-UnaryOperator 0x55b48287fc40 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55b48287fc30 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55b48287fc88 <col:49> 'Args::Slot *' lvalue Var 0x55b48287f828 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55b48285bc98 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55b48285b968 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55b48285bbf8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55b48285ba20 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48285baa0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55b48285bb18 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55b482880680 <col:71, line:792:5>
|     |-DeclStmt 0x55b48287fda8 <line:784:9, col:26>
|     | `-VarDecl 0x55b48287fd40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b48287fe78 <line:785:9, col:29>
|     | `-VarDecl 0x55b48287fdd8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b48287fe60 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b48287fe40 <col:28> 'int' 1
|     |-WhileStmt 0x55b482880530 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55b482880550 <line:786:16, col:61>
|     | | `-VarDecl 0x55b48287fea0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b482880080 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b482880050 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b482880038 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b482880018 <col:29, col:61> 'String' (CXXTemporary 0x55b482880018)
|     | |           `-CXXMemberCallExpr 0x55b48287ffa8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b48287ff18 <col:29> '<bound member function type>' ->find 0x55b482870ed8
|     | |             | `-CXXThisExpr 0x55b48287ff08 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b48287ffe0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b48287ff48 <col:34> 'const char *' lvalue ParmVar 0x55b48285ba20 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b48287fff8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b48287ff68 <col:43> 'int' lvalue ParmVar 0x55b48285baa0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b48287ff88 <col:50> 'Args::Slot *' lvalue Var 0x55b48287fd40 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b482880138 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b482880120 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b482880100 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b4828800d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|     | |       `-ImplicitCastExpr 0x55b4828800b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b482880098 <col:23> 'String' lvalue Var 0x55b48287fea0 'str' 'String'
|     | `-CompoundStmt 0x55b482880508 <col:64, line:790:9>
|     |   |-CallExpr 0x55b482880290 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55b482880160 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|     |   | | `-CXXThisExpr 0x55b482880150 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55b482880240 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55b4828801b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55b482880190 <col:23> 'P' lvalue ParmVar 0x55b48285bb18 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55b4828801f8 <col:36> 'String' lvalue Var 0x55b48287fea0 'str' 'String'
|     |   | | `-UnaryOperator 0x55b482880228 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55b482880218 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55b482880270 <col:49> 'Args::Slot *' lvalue Var 0x55b48287fd40 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55b482880428 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b4828802c0 <col:13> 'int' lvalue Var 0x55b48287fdd8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b482880410 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b4828803f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b482880358 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b482880338 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b482880320 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b4828802e0 <col:28> 'int' lvalue Var 0x55b48287fdd8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b482880300 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b4828803d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b4828803a8 <col:49> 'bool' lvalue ->_read_status 0x55b482754660
|     |   |         `-ImplicitCastExpr 0x55b482880388 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b482880378 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b4828804d8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b482880448 <col:13> 'int' lvalue ParmVar 0x55b48285baa0 'flags' 'int'
|     |     `-UnaryOperator 0x55b4828804c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b4828804a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b482880488 <col:23> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b482880660 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b482880598 <col:9> 'bool' lvalue ->_read_status 0x55b482754660
|       | `-ImplicitCastExpr 0x55b482880578 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b482880568 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b482880640 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b482880620 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b482880608 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b4828805c8 <col:25> 'int' lvalue Var 0x55b48287fdd8 'read_status' 'int'
|           `-IntegerLiteral 0x55b4828805e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55b48285c178 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55b48285bd08 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48285bd88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48285c0d8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55b48285be48 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48285bec8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55b48285bf40 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55b48285bfe8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55b482881610 <col:84, line:805:5>
|     |-DeclStmt 0x55b482880728 <line:796:9, col:26>
|     | `-VarDecl 0x55b4828806c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b4828807f8 <line:797:9, col:29>
|     | `-VarDecl 0x55b482880758 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b4828807e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b4828807c0 <col:28> 'int' 1
|     |-DeclStmt 0x55b482880b30 <line:798:9, col:71>
|     | `-VarDecl 0x55b482880848 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55b482880b00 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55b482880a70 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55b482880ab8 <col:55> 'T' lvalue ParmVar 0x55b48285bfe8 'variable' 'T &'
|     |     `-UnaryOperator 0x55b482880ae8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55b482880ad8 <col:66> 'Args *' this
|     |-WhileStmt 0x55b4828814c0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55b4828814e0 <line:799:16, col:61>
|     | | `-VarDecl 0x55b482880b58 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b482880d38 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b482880d08 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b482880cf0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b482880cd0 <col:29, col:61> 'String' (CXXTemporary 0x55b482880cd0)
|     | |           `-CXXMemberCallExpr 0x55b482880c60 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b482880bd0 <col:29> '<bound member function type>' ->find 0x55b482870ed8
|     | |             | `-CXXThisExpr 0x55b482880bc0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b482880c98 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b482880c00 <col:34> 'const char *' lvalue ParmVar 0x55b48285be48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b482880cb0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b482880c20 <col:43> 'int' lvalue ParmVar 0x55b48285bec8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b482880c40 <col:50> 'Args::Slot *' lvalue Var 0x55b4828806c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b482880df0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b482880dd8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b482880db8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b482880d88 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|     | |       `-ImplicitCastExpr 0x55b482880d70 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b482880d50 <col:23> 'String' lvalue Var 0x55b482880b58 'str' 'String'
|     | `-CompoundStmt 0x55b482881498 <col:64, line:803:9>
|     |   |-CallExpr 0x55b482881220 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55b482880e18 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|     |   | | `-CXXThisExpr 0x55b482880e08 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55b4828811e0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55b482880e48 <col:23> 'T *' lvalue Var 0x55b482880848 's' 'T *'
|     |   | | `-CallExpr 0x55b4828811a0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55b482881030 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55b482881078 <col:56> 'P' lvalue ParmVar 0x55b48285bf40 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55b482881098 <col:64> 'String' lvalue Var 0x55b482880b58 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55b482881148 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55b4828810d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|     |   | |   | `-DeclRefExpr 0x55b4828810b8 <col:70> 'T *' lvalue Var 0x55b482880848 's' 'T *'
|     |   | |   `-UnaryOperator 0x55b482881188 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55b482881178 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55b482881200 <col:81> 'Args::Slot *' lvalue Var 0x55b4828806c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55b4828813b8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b482881250 <col:13> 'int' lvalue Var 0x55b482880758 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b4828813a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b482881380 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b4828812e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b4828812c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b4828812b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b482881270 <col:28> 'int' lvalue Var 0x55b482880758 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b482881290 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b482881368 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b482881338 <col:49> 'bool' lvalue ->_read_status 0x55b482754660
|     |   |         `-ImplicitCastExpr 0x55b482881318 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b482881308 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b482881468 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b4828813d8 <col:13> 'int' lvalue ParmVar 0x55b48285bec8 'flags' 'int'
|     |     `-UnaryOperator 0x55b482881450 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b482881438 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b482881418 <col:23> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b4828815f0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b482881528 <col:9> 'bool' lvalue ->_read_status 0x55b482754660
|       | `-ImplicitCastExpr 0x55b482881508 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b4828814f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b4828815d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b4828815b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b482881598 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b482881558 <col:25> 'int' lvalue Var 0x55b482880758 'read_status' 'int'
|           `-IntegerLiteral 0x55b482881578 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55b48285c758 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55b48285c1f0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55b48285c268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55b48285c6b8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55b48285c328 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55b48285c3a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55b48285c420 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55b48285c570 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55b482882418 <col:87, line:821:5>
|     |-DeclStmt 0x55b4828816c0 <line:809:9, col:26>
|     | `-VarDecl 0x55b482881658 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55b482881790 <line:810:9, col:29>
|     | `-VarDecl 0x55b4828816f0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55b482881778 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55b482881758 <col:28> 'int' 1
|     |-DeclStmt 0x55b4828819d8 <line:811:9, col:38>
|     | `-VarDecl 0x55b4828818c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55b4828819b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55b482881938 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55b482881990 <col:29> 'Vector<T>' lvalue ParmVar 0x55b48285c570 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55b4828822c8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55b4828822e8 <line:812:16, col:61>
|     | | `-VarDecl 0x55b482881a00 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55b482881be0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55b482881bb0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55b482881b98 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55b482881b78 <col:29, col:61> 'String' (CXXTemporary 0x55b482881b78)
|     | |           `-CXXMemberCallExpr 0x55b482881b08 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55b482881a78 <col:29> '<bound member function type>' ->find 0x55b482870ed8
|     | |             | `-CXXThisExpr 0x55b482881a68 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55b482881b40 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b482881aa8 <col:34> 'const char *' lvalue ParmVar 0x55b48285c328 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55b482881b58 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55b482881ac8 <col:43> 'int' lvalue ParmVar 0x55b48285c3a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55b482881ae8 <col:50> 'Args::Slot *' lvalue Var 0x55b482881658 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55b482881c98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55b482881c80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55b482881c60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55b482881c30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55b4825a05c8
|     | |       `-ImplicitCastExpr 0x55b482881c18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55b482881bf8 <col:23> 'String' lvalue Var 0x55b482881a00 'str' 'String'
|     | `-CompoundStmt 0x55b482882290 <col:64, line:819:9>
|     |   |-DeclStmt 0x55b482881d58 <line:813:13, col:23>
|     |   | `-VarDecl 0x55b482881cc0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55b482881d38 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55b482881ed8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55b482881d80 <col:13> '<bound member function type>' ->postparse 0x55b4828710e8
|     |   | | `-CXXThisExpr 0x55b482881d70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55b482881e80 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55b482881dd0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55b482881db0 <col:23> 'P' lvalue ParmVar 0x55b48285c420 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55b482881e18 <col:36> 'String' lvalue Var 0x55b482881a00 'str' 'String'
|     |   | | |-DeclRefExpr 0x55b482881e38 <col:41> 'T' lvalue Var 0x55b482881cc0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55b482881e68 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55b482881e58 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55b482881eb8 <col:53> 'Args::Slot *' lvalue Var 0x55b482881658 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55b482882030 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55b482881f68 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55b482881f38 <col:17> 'bool' lvalue ->_read_status 0x55b482754660
|     |   | |   `-ImplicitCastExpr 0x55b482881f18 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55b482881f08 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55b482882008 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55b482881fa0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55b482881f80 <col:17> 'Vector<T> *' lvalue Var 0x55b4828818c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55b482881fe8 <col:30> 'T' lvalue Var 0x55b482881cc0 'sx' 'T'
|     |   |-BinaryOperator 0x55b4828821b0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55b482882048 <col:13> 'int' lvalue Var 0x55b4828816f0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55b482882198 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55b482882178 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55b4828820e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55b4828820c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55b4828820a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55b482882068 <col:28> 'int' lvalue Var 0x55b4828816f0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55b482882088 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55b482882160 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55b482882130 <col:49> 'bool' lvalue ->_read_status 0x55b482754660
|     |   |         `-ImplicitCastExpr 0x55b482882110 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55b482882100 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55b482882260 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55b4828821d0 <col:13> 'int' lvalue ParmVar 0x55b48285c3a8 'flags' 'int'
|     |     `-UnaryOperator 0x55b482882248 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55b482882230 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55b482882210 <col:23> 'const int' lvalue Var 0x55b48283fce8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55b4828823f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55b482882330 <col:9> 'bool' lvalue ->_read_status 0x55b482754660
|       | `-ImplicitCastExpr 0x55b482882310 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55b482882300 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55b4828823d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55b4828823b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55b4828823a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55b482882360 <col:25> 'int' lvalue Var 0x55b4828816f0 'read_status' 'int'
|           `-IntegerLiteral 0x55b482882380 <col:40> 'int' 1
|-AccessSpecDecl 0x55b48285c7d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55b48285c7f8 prev 0x55b48283dfe8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55b48285c8f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55b48285c9e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55b482882450 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55b48285cad0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55b482882460 <col:25, line:830:9>
| |-CXXMethodDecl 0x55b48285cbd0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55b48285cc80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55b48285cd28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55b48285cd28
| | `-ParmVarDecl 0x55b48285ce38 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55b48285d5f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55b48285d5f8
|   `-ParmVarDecl 0x55b48285d708 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55b48285cea8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55b48285d008 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55b48285d200 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55b48285d0b0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55b48285d128 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55b482882640 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55b48285d4b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55b4828824b0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b482882470 <col:20> 'void *' lvalue ParmVar 0x55b48285d0b0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55b48285d520 '_slot' 'char *'
| | | `-CXXNewExpr 0x55b482882538 <col:32, col:45> 'char *' array Function 0x55b4823c4248 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55b482882520 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55b4828824f0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55b48285d128 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55b48285d580 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55b482882600 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55b4828825c0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55b48285d128 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55b4828826c0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55b48285d300 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55b48285cad0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55b482882748 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55b482882728 <line:840:13, col:22> 'void' array Function 0x55b4823c45a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55b482882710 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55b4828826e0 <col:22> 'char *' lvalue ->_slot 0x55b48285d520
| |         `-CXXThisExpr 0x55b4828826d0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55b48285d400 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55b48285cbd0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55b482882938 <col:22, line:844:9>
| |   `-CallExpr 0x55b4828828a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55b482882888 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55b482882868 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55b4824d0028 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55b4828828d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55b4828827b8 <col:20> 'void *' lvalue ->_ptr 0x55b48285d4b8
| |     |   `-CXXThisExpr 0x55b4828827a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55b482882908 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55b4828828f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55b4828827f8 <col:26> 'char *' lvalue ->_slot 0x55b48285d520
| |     |     `-CXXThisExpr 0x55b4828827e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55b482882920 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55b482882838 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55b48285d580
| |         `-CXXThisExpr 0x55b482882828 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55b48285d4b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55b48285d520 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55b48285d580 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55b48285d778 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55b48285d778
| | `-ParmVarDecl 0x55b48285d888 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55b48285d928 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55b48285d928
|   `-ParmVarDecl 0x55b48285da38 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55b48285dbd8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55b48285daa8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55b48285db48 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55b48285de70 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55b48285e068 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55b48285df38 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55b48285e1e8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55b482882970 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55b482882950 <col:20> 'T *' lvalue ParmVar 0x55b48285df38 'ptr' 'T *'
|   | `-CompoundStmt 0x55b4828829c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55b48285e138 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55b48285cbd0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55b482882b70 <col:22, line:857:9>
|   |   `-CallExpr 0x55b482882b40 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55b4828829d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55b482588758 0x55b482532a88
|   |     |-CXXOperatorCallExpr 0x55b482882ad0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55b482882a60 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55b482795928 0x55b482795548 0x55b482795178 0x55b482794d98 0x55b4827949b8 0x55b4827945e8
|   |     | `-MemberExpr 0x55b482882a30 <col:29> 'T *' lvalue ->_ptr 0x55b48285e1e8
|   |     |   `-CXXThisExpr 0x55b482882a20 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55b482882b10 <col:35> 'T' lvalue ->_slot 0x55b48285e248
|   |       `-CXXThisExpr 0x55b482882b00 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55b48285e1e8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55b48285e248 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55b48285e2b0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55b48285e3b0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55b48285e400 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b48285e390 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55b48285e370 <col:31> 'int' 48
|-FieldDecl 0x55b48285e428 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55b48285e488 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55b48285e4e8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55b48285e620 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55b482870780 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55b4828707e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55b482870890 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55b482870ab8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55b4828709c0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55b482870c08 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55b482870b78 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55b482870ed8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55b482870cc8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55b482870d48 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55b482870df0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55b4828710e8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55b482870fa0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55b482871018 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55b4828711b8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55b482871308 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55b482871270 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55b482871698 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55b4828713c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55b482871448 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55b4828714f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55b4828715a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55b4828718c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55b482871770 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55b4828717e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55b482871bd8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55b482871970 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55b482871b38 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55b482871a48 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b482591480 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b482591598 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55b482591628 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55b4825916f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55b4825917e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55b4825919f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b4825918a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482591ba8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55b482591ab0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55b482591cf0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55b482591c60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55b482591e38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b482591da8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482591f80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55b482591ef0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482592048 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55b482592190 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55b482592100 <col:28> col:31 'int'
|-CXXMethodDecl 0x55b482592258 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55b4825923a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55b482592310 <col:28> col:31 'int'
|-CXXMethodDecl 0x55b482592518 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55b482592458 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482592660 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55b4825925d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482592728 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55b4825928e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b4825927d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b482592850 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482592b38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b4825929a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b482592a20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b482592be8 <col:86> "" ""
|-CXXMethodDecl 0x55b482592e58 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55b482592cc8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55b482592d40 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482593008 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55b482592f18 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55b4825931b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55b4825930c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55b482593488 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55b482593270 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55b4825932e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b482593360 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482593768 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55b482593550 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55b4825935c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b482593640 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b482593820 <col:115> "" ""
|-AccessSpecDecl 0x55b482593890 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55b4825938c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b482593dd0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55b482593dd0
| `-ParmVarDecl 0x55b482593ed8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55b482593f78 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55b482593f78
| `-ParmVarDecl 0x55b482594088 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55b4825c96b8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b4827bc6e0 <col:7>
|-CXXConstructorDecl 0x55b4825c9790 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55b4825c9790
| `-ParmVarDecl 0x55b4825c98a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55b4825c9918 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55b4825c9918
| `-ParmVarDecl 0x55b4825c9a28 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55b4827bf0e0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4827ab288 prev 0x55b4827a0490 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b4827ab380 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55b4827ab470 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55b4827ab598 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55b4827ab718 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55b4827ab898 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55b4827aba18 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55b4827bc848 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b4827bd0b8 <col:11>
|-CXXDestructorDecl 0x55b4827bc920 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55b4827bca58 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55b4827bca58
| `-ParmVarDecl 0x55b4827bcb68 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55b4827bcc08 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b4827bcc08
| `-ParmVarDecl 0x55b4827bcd18 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55b4827bfad8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55b4827bfbe8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55b4827bfe68 <col:11>
|   `-ReturnStmt 0x55b4827bfe58 <col:11>
|     `-UnaryOperator 0x55b4827bfe40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55b4827bfe30 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55b4827bfc58 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b4827bfc58
  `-ParmVarDecl 0x55b4827bfd68 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b4827aba80 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b4827abb98 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55b4827abc38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55b4827abca0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55b4827abd08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55b4827abd70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55b4827abdd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55b4827abe90 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55b4827abef0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55b4827abf50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55b4827bc758 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55b4827abc38 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55b4827bd0c8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55b4827bd120 <col:12>
|-CXXConstructorDecl 0x55b4827bcd88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55b4827bcd88
| `-ParmVarDecl 0x55b4827bce98 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55b4827bcf38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55b4827bcf38
| `-ParmVarDecl 0x55b4827bd048 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55b4827bf1c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b482799ba0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55b482799cb8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55b482799d48 <col:16, col:22> col:16 public
|-EnumDecl 0x55b482799d70 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55b482799e70 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55b482799f50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b482799e50 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55b482799e30 <col:21> 'int' 28
| `-EnumConstantDecl 0x55b482799f00 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55b482799f68 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b482799ee0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55b482799ec0 <col:22> 'int' 64
|-CXXMethodDecl 0x55b48279a2a8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55b482799f90 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b48279a010 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55b48279a088 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b48279a100 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b48279a368 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55b48279a568 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55b48279a3e0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55b48279a458 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b48279a618 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55b48279a778 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55b48279a688 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b48279a820 <col:72> warn_unused_result ""
|-TypedefDecl 0x55b48279ab80 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55b48279ab10 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55b48279aab0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55b48279aa70 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55b4822714e0 'void'
|       |-PointerType 0x55b482519d20 'unsigned char *'
|       | `-BuiltinType 0x55b4822715e0 'unsigned char'
|       |-TypedefType 0x55b4823162f0 'size_t' sugar
|       | |-Typedef 0x55b4822e1be0 'size_t'
|       | `-BuiltinType 0x55b482271640 'unsigned long'
|       `-PointerType 0x55b482271ce0 'void *'
|         `-BuiltinType 0x55b4822714e0 'void'
|-CXXMethodDecl 0x55b48279aff8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55b48279abf0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55b48279ac68 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b48279ad00 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55b48279ad80 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55b4827b56f0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55b4827b56d8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55b4827b56a0 <col:58> 'int' 0
| |-ParmVarDecl 0x55b48279ae00 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55b4827b5718 <col:76> 'int' 0
| |-ParmVarDecl 0x55b48279ae80 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55b4827b5738 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55b48279b0c8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55b48279b148 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55b48279b208 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55b48279b2a8 <col:20>
| `-OptimizeNoneAttr 0x55b48279b300 <col:30>
|-CXXMethodDecl 0x55b48279b378 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55b48279b418 <col:20>
| `-OptimizeNoneAttr 0x55b48279b470 <col:30>
|-CXXMethodDecl 0x55b48279b4e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55b48279b588 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55b48279b638 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55b48279b6d8 <col:20>
| |-OptimizeNoneAttr 0x55b48279b730 <col:30>
| `-WarnUnusedResultAttr 0x55b48279b758 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55b48279b7b0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55b48279b850 <col:20>
| `-OptimizeNoneAttr 0x55b48279b8a8 <col:30>
|-CXXMethodDecl 0x55b48279b8f8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55b48279b998 <col:20>
| `-OptimizeNoneAttr 0x55b48279b9f0 <col:30>
|-CXXMethodDecl 0x55b48279ba38 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55b48279bad8 <col:20>
| `-OptimizeNoneAttr 0x55b48279bb30 <col:30>
|-CXXMethodDecl 0x55b48279bb78 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55b48279bc38 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55b48279bd00 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b48279bdc8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b48279be88 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b48279bfa8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55b4827b5800 <col:54, line:99:5>
|   `-ReturnStmt 0x55b4827b57f0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55b4827b57d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55b4827b57a8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b4827ac288
|         `-CXXThisExpr 0x55b4827b5798 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55b48279c148 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55b48279c058 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55b4827b58b0 <col:67, line:103:5>
|   `-BinaryOperator 0x55b4827b5890 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55b4827b5828 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b4827ac288
|     | `-CXXThisExpr 0x55b4827b5818 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55b4827b5878 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827b5858 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55b48279c058 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55b48279c240 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55b4827b5930 <col:33, line:107:5>
|   `-ReturnStmt 0x55b4827b5920 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55b4827b5908 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55b4827b58d8 <col:16> 'void *' lvalue ->_destructor_argument 0x55b4827ac2f0
|         `-CXXThisExpr 0x55b4827b58c8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55b48279c300 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55b4827b5f60 <col:25, line:113:5>
|   |-ParenExpr 0x55b4827b5ca8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55b4827b5c78 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b59e8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55b4827b59c0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55b4827b5988 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55b4827b5958 <col:24> '<bound member function type>' ->shared 0x55b48279b378
|   |   |       `-ImplicitCastExpr 0x55b4827b59a8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55b4827b5948 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55b4827b5a48 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b5a28 <col:42> 'int' 0
|   |   `-CallExpr 0x55b4827b5bd8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b5bc0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b5ba0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b5c18 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b5ab8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55b4827b5c30 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b5ae0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b5c48 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b5b18 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55b4827b5c60 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b5b88 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b5b70 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b5b38 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55b4827b5ea8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55b4827b5cd8 <col:2> 'unsigned char *' lvalue ->_head 0x55b4827ac090
|   | | `-CXXThisExpr 0x55b4827b5cc8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55b4827b5e90 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55b4827b5e70 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55b4827b5d18 <col:10> 'unsigned char *' lvalue ->_data 0x55b4827ac0f8
|   |     | `-CXXThisExpr 0x55b4827b5d08 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55b4827b5e58 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55b4827b5e38 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55b4827b5d58 <col:18> 'unsigned char *' lvalue ->_tail 0x55b4827ac160
|   |         | `-CXXThisExpr 0x55b4827b5d48 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55b4827b5e20 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55b4827b5e00 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55b4827b5d98 <col:26> 'unsigned char *' lvalue ->_end 0x55b4827ac1c8
|   |             | `-CXXThisExpr 0x55b4827b5d88 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55b4827b5de8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55b4827b5dc8 <col:33> 'int' 0
|   `-BinaryOperator 0x55b4827b5f40 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55b4827b5ed8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55b4827ac288
|     | `-CXXThisExpr 0x55b4827b5ec8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55b4827b5f28 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55b4827b5f08 <col:16> 'int' 0
|-CXXMethodDecl 0x55b48279c440 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b48279c3b0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b48279c4e8 <col:20>
| |-OptimizeNoneAttr 0x55b48279c540 <col:30>
| `-WarnUnusedResultAttr 0x55b48279c568 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55b48279c638 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b48279c5a8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b48279c6e0 <col:20>
| |-OptimizeNoneAttr 0x55b48279c738 <col:30>
| `-WarnUnusedResultAttr 0x55b48279c760 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55b48279c898 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55b48279c7a0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b48279c940 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55b48279ca40 <line:187:5, col:62> col:45 used pull 'void (uint32_t)'
| |-ParmVarDecl 0x55b48279c9b0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b48279cae8 <col:20>
| `-OptimizeNoneAttr 0x55b48279cb40 <col:30>
|-CXXMethodDecl 0x55b48279cc08 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55b48279cb78 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b48279ccb0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55b48279cdb0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55b48279cd20 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55b48279ce58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55b48279cf58 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55b48279cec8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b48279d000 <col:20>
| `-OptimizeNoneAttr 0x55b48279d058 <col:30>
|-CXXMethodDecl 0x55b48279d1e8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55b48279d098 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55b48279d110 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55b4827b5758 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55b48279d298 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55b48279d498 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b48279d310 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55b48279d388 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b48279d6a8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55b48279d558 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b48279d5d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b48279d8b8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55b48279d768 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55b48279d7e8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55b4827b5768 <col:39> 'int' 0
|-CXXMethodDecl 0x55b48279d988 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55b48279da50 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55b48279db18 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b48279dbd8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b48279dca0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55b48279dde8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55b48279dd58 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55b48279dfb8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b48279dea8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55b48279df20 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b48279e088 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55b48279e148 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55b48279e1e8 <col:20>
| `-OptimizeNoneAttr 0x55b48279e240 <col:30>
|-CXXMethodDecl 0x55b48279e290 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55b48279e330 <col:20>
| `-OptimizeNoneAttr 0x55b48279e388 <col:30>
|-CXXMethodDecl 0x55b48279e3d8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b48279e498 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b48279e560 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55b48279e600 <col:20>
| `-OptimizeNoneAttr 0x55b48279e658 <col:30>
|-CXXMethodDecl 0x55b48279e7a8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55b48279e698 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55b48279e710 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b48279e8f8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55b48279e868 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b48279e9d0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55b48279ea90 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55b48279eb30 <col:20>
| `-OptimizeNoneAttr 0x55b48279eb88 <col:30>
|-CXXMethodDecl 0x55b48279ebd8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55b48279ec78 <col:20>
| `-OptimizeNoneAttr 0x55b48279ecd0 <col:30>
|-CXXMethodDecl 0x55b48279ed20 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b48279ede8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55b48279ee88 <col:20>
| `-OptimizeNoneAttr 0x55b48279eee0 <col:30>
|-CXXMethodDecl 0x55b48279ef28 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55b48279f048 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55b48279f1b8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55b48279f0f8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55b48279f2a8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55b48279f348 <col:20>
| `-OptimizeNoneAttr 0x55b48279f3a0 <col:30>
|-CXXMethodDecl 0x55b48279f3f0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55b48279f4b0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55b48279f6e8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55b48279f560 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55b48279f5d8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b48279f798 <col:20>
| `-OptimizeNoneAttr 0x55b48279f7f0 <col:30>
|-CXXMethodDecl 0x55b48279f898 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55b48279f938 <col:20>
| `-OptimizeNoneAttr 0x55b48279f990 <col:30>
|-CXXMethodDecl 0x55b48279f9e0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55b48279fa80 <col:20>
| `-OptimizeNoneAttr 0x55b48279fad8 <col:30>
|-CXXMethodDecl 0x55b48279fb20 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55b48279fbc0 <col:20>
| `-OptimizeNoneAttr 0x55b48279fc18 <col:30>
|-CXXMethodDecl 0x55b48279fd18 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55b48279fc50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55b48279fdc0 <col:20>
| `-OptimizeNoneAttr 0x55b48279fe18 <col:30>
|-CXXMethodDecl 0x55b48279ffd8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55b48279fe50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55b48279fec8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b4827a0088 <col:20>
| `-OptimizeNoneAttr 0x55b4827a00e0 <col:30>
|-CXXMethodDecl 0x55b4827a0188 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55b4827a02a8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55b4827a03c8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55b4827a0468 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55b4827a0490 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55b4827a05b8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55b4827a0658 <col:20>
| `-OptimizeNoneAttr 0x55b4827a06b0 <col:30>
|-CXXMethodDecl 0x55b4827a0758 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55b4827a07f8 <col:20>
| `-OptimizeNoneAttr 0x55b4827a0850 <col:30>
|-AccessSpecDecl 0x55b4827a0878 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55b4827a08a0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55b4827a09a0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55b4827a09f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827a0980 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55b4827a0960 <col:14> 'int' 48
|-CXXMethodDecl 0x55b4827a0a58 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55b4827a0af8 <col:20>
| `-OptimizeNoneAttr 0x55b4827a0b50 <col:30>
|-CXXMethodDecl 0x55b4827a0bc8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55b4827a0c68 <col:20>
| `-OptimizeNoneAttr 0x55b4827a0cc0 <col:30>
|-CXXMethodDecl 0x55b4827a0d88 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55b4827a0cf8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55b4827a0f28 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55b4827a10c8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55b4827a0fd8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55b4827a1170 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55b4827a1270 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b4827a1620 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a1250 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55b4827a1230 <col:9> 'int' 0
| |-EnumConstantDecl 0x55b4827a1300 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b4827a1638 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a12e0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55b4827a12c0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55b4827a1390 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b4827a1650 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a1370 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55b4827a1350 <col:14> 'int' 2
| |-EnumConstantDecl 0x55b4827a1420 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b4827a1668 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a1400 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55b4827a13e0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55b4827a14b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b4827a1680 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a1490 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55b4827a1470 <col:13> 'int' 4
| |-EnumConstantDecl 0x55b4827a1540 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55b4827a1698 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a1520 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55b4827a1500 <col:13> 'int' 5
| `-EnumConstantDecl 0x55b4827a15d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55b4827a16b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827a15b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55b4827a1590 <col:14> 'int' 6
|-CXXMethodDecl 0x55b4827a1718 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55b4827a17b8 <col:20>
| `-OptimizeNoneAttr 0x55b4827a1810 <col:30>
|-CXXMethodDecl 0x55b4827a1908 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55b4827a1848 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55b4827a19b0 <col:20>
| `-OptimizeNoneAttr 0x55b4827a1a08 <col:30>
|-CXXMethodDecl 0x55b4827a1a78 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55b4827a1ba0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55b4827a1d18 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55b4827a1c50 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55b4827a1de0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55b4827a1ea8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55b4827a1fe8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55b4827a1f58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55b4827a2090 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55b4827a2190 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b4827a2390 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a2170 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55b4827a2150 <col:23> 'int' 0
| |-EnumConstantDecl 0x55b4827a2220 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b4827a23a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a2200 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55b4827a21e0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55b4827a22b0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55b4827a23c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a2290 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55b4827a2270 <col:24> 'int' 0
| `-EnumConstantDecl 0x55b4827a2340 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55b4827a23d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827a2320 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55b4827a2300 <col:47> 'int' 16
|-CXXMethodDecl 0x55b4827a2438 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55b4827a25a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55b4827a24e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55b4827a2650 <col:20>
| `-OptimizeNoneAttr 0x55b4827a26a8 <col:30>
|-CXXMethodDecl 0x55b4827a26f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55b4827b6080 <col:18, col:36>
|   `-ReturnStmt 0x55b4827b6070 <col:20, col:33>
|     `-ImplicitCastExpr 0x55b4827b6058 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55b4827b6038 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55b4827b6008 <col:27> '<bound member function type>' ->xanno 0x55b4827a0758
|           `-CXXThisExpr 0x55b4827b5ff8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55b4827a27f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55b4827b6190 <col:30, col:48>
|   `-ReturnStmt 0x55b4827b6180 <col:32, col:45>
|     `-ImplicitCastExpr 0x55b4827b6168 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55b4827b6148 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55b4827b6118 <col:39> '<bound member function type>' ->xanno 0x55b4827a05b8
|           `-CXXThisExpr 0x55b4827b6108 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55b4827a28d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55b4827b6328 <col:24, col:50>
|   `-ReturnStmt 0x55b4827b6318 <col:26, col:47>
|     `-UnaryOperator 0x55b4827b6300 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b4827b62e0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b4827b62c8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b4827b6278 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55b4827ab598
|         |   `-CXXMemberCallExpr 0x55b4827b6258 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55b4827b6228 <col:34> '<bound member function type>' ->xanno 0x55b4827a0758
|         |       `-CXXThisExpr 0x55b4827b6218 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55b4827b62a8 <col:46> 'int' 0
|-CXXMethodDecl 0x55b4827a29e0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55b4827b64f8 <col:36, col:62>
|   `-ReturnStmt 0x55b4827b64e8 <col:38, col:59>
|     `-UnaryOperator 0x55b4827b64d0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b4827b64b0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b4827b6498 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b4827b6410 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55b4827ab598
|         |   `-CXXMemberCallExpr 0x55b4827b63f0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b4827b63c0 <col:46> '<bound member function type>' ->xanno 0x55b4827a05b8
|         |       `-CXXThisExpr 0x55b4827b63b0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55b4827b6440 <col:58> 'int' 0
|-CXXMethodDecl 0x55b4827a2af8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55b4827b6690 <col:26, col:53>
|   `-ReturnStmt 0x55b4827b6680 <col:28, col:50>
|     `-UnaryOperator 0x55b4827b6668 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b4827b6648 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55b4827b6630 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b4827b65e0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55b4827ab898
|         |   `-CXXMemberCallExpr 0x55b4827b65c0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55b4827b6590 <col:36> '<bound member function type>' ->xanno 0x55b4827a0758
|         |       `-CXXThisExpr 0x55b4827b6580 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55b4827b6610 <col:49> 'int' 0
|-CXXMethodDecl 0x55b4827a2c18 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55b4827b6868 <col:38, col:65>
|   `-ReturnStmt 0x55b4827b6858 <col:40, col:62>
|     `-UnaryOperator 0x55b4827b6840 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55b4827b6820 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55b4827b6808 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b4827b6778 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55b4827ab898
|         |   `-CXXMemberCallExpr 0x55b4827b6758 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b4827b6728 <col:48> '<bound member function type>' ->xanno 0x55b4827a05b8
|         |       `-CXXThisExpr 0x55b4827b6718 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55b4827b67a8 <col:61> 'int' 0
|-CXXMethodDecl 0x55b4827a2dc8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55b4827a2cd0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55b4827b6f38 <col:34, line:463:5>
|   |-ParenExpr 0x55b4827b6d80 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55b4827b6d50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b69b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b6988 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b68d8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b68c0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b6880 <col:23> 'int' lvalue ParmVar 0x55b4827a2cd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b68a0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b6968 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b6938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b68f8 <col:33> 'int' lvalue ParmVar 0x55b4827a2cd0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55b4827b6950 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55b4827b6918 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55b4827b6a18 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b69f8 <col:56> 'int' 0
|   |   `-CallExpr 0x55b4827b6cb0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b6c98 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b6c78 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b6cf0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b6b08 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55b4827b6d08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b6b38 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b6d20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b6b70 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55b4827b6d38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b6c60 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b6c48 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b6c08 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55b4827b6f28 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55b4827b6f10 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55b4827b6ef0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55b4827b6ec0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55b4827b6e70 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55b4827ab598
|         |   `-CXXMemberCallExpr 0x55b4827b6e50 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55b4827b6e20 <col:9> '<bound member function type>' ->xanno 0x55b4827a05b8
|         |       `-CXXThisExpr 0x55b4827b6e10 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55b4827b6ed8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55b4827b6ea0 <col:21> 'int' lvalue ParmVar 0x55b4827a2cd0 'i' 'int'
|-CXXMethodDecl 0x55b4827a3018 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55b4827a2e88 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55b4827a2f00 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55b4827b75c8 <col:40, line:472:5>
|   |-ParenExpr 0x55b4827b73e0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55b4827b73b0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b7090 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b7060 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b6fb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b6f98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b6f58 <col:23> 'int' lvalue ParmVar 0x55b4827a2e88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b6f78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b7040 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b7010 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b6fd0 <col:33> 'int' lvalue ParmVar 0x55b4827a2e88 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55b4827b7028 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55b4827b6ff0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55b4827b70f0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b70d0 <col:56> 'int' 0
|   |   `-CallExpr 0x55b4827b7310 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b72f8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b72d8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b7350 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b7160 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55b4827b7368 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b7190 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b7380 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b71c8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55b4827b7398 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b72c0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b72a8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b7268 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55b4827b75a8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55b4827b7550 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55b4827b7520 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55b4827b74d0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55b4827ab598
|     | |   `-CXXMemberCallExpr 0x55b4827b74b0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55b4827b7480 <col:2> '<bound member function type>' ->xanno 0x55b4827a0758
|     | |       `-CXXThisExpr 0x55b4827b7470 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55b4827b7538 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b4827b7500 <col:14> 'int' lvalue ParmVar 0x55b4827a2e88 'i' 'int'
|     `-ImplicitCastExpr 0x55b4827b7590 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827b7570 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55b4827a2f00 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55b4827a31d8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55b4827a30e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b4827b7d48 <col:36, line:485:5>
|   |-ParenExpr 0x55b4827b7ab0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827b7a80 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b7760 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b7730 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b7640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b7628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b75e8 <col:23> 'int' lvalue ParmVar 0x55b4827a30e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b7608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b7710 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b76f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b7660 <col:33> 'int' lvalue ParmVar 0x55b4827a30e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827b76d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827b76c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827b7680 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827b76a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b4827b77c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b77a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827b79e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b79c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b79a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b7a20 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b7830 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b4827b7a38 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b7868 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b7a50 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b78a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55b4827b7a68 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b7990 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b7978 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b7938 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55b4827b7d38 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55b4827b7d20 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55b4827b7d08 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b4827b7cd8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55b4827b7c78 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b4827b7c48 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b4827b7bc0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b4827ab470
|             |   `-CXXMemberCallExpr 0x55b4827b7ba0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b4827b7b70 <col:61> '<bound member function type>' ->xanno 0x55b4827a05b8
|             |       `-CXXThisExpr 0x55b4827b7b60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b4827b7c60 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4827b7bf0 <col:74> 'int' lvalue ParmVar 0x55b4827a30e0 'i' 'int'
|-CXXMethodDecl 0x55b4827a3428 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55b4827a3298 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b4827a3310 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55b4827b8498 <col:42, line:500:5>
|   |-ParenExpr 0x55b4827b8230 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827b8200 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b7ee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b7eb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b7dc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b7da8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b7d68 <col:23> 'int' lvalue ParmVar 0x55b4827a3298 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b7d88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b7e90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b7e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b7de0 <col:33> 'int' lvalue ParmVar 0x55b4827a3298 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827b7e58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827b7e40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827b7e00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827b7e20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b4827b7f40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b7f20 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827b8160 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b8148 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b8128 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b81a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b7fb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b4827b81b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b7fe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b81d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b8020 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55b4827b81e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b8110 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b80f8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b80b8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55b4827b8478 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55b4827b8428 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b4827b83f8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55b4827b83a0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b4827b8370 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b4827b8320 <col:48, col:57> 'char [48]' lvalue ->c 0x55b4827ab470
|     |     |   `-CXXMemberCallExpr 0x55b4827b8300 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b4827b82d0 <col:48> '<bound member function type>' ->xanno 0x55b4827a0758
|     |     |       `-CXXThisExpr 0x55b4827b82c0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b4827b8388 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b4827b8350 <col:61> 'int' lvalue ParmVar 0x55b4827a3298 'i' 'int'
|     `-ImplicitCastExpr 0x55b4827b8460 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827b8440 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55b4827a3310 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55b4827a35e8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55b4827a34f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55b4827b8bf8 <col:35, line:513:5>
|   |-ParenExpr 0x55b4827b8908 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827b88d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b8630 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b8600 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b8510 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b84f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b84b8 <col:23> 'int' lvalue ParmVar 0x55b4827a34f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b84d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b85e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b85c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b8530 <col:33> 'int' lvalue ParmVar 0x55b4827a34f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827b85a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827b8590 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827b8550 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827b8570 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b4827b8690 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b8670 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827b8838 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b8820 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b8800 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b8878 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b8700 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b4827b8890 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b8738 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b88a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b8770 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55b4827b88c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b87e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b87d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b8790 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55b4827b8be8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55b4827b8bd0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55b4827b8bb8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b4827b8b88 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55b4827b8b00 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b4827b8ad0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b4827b8a80 <col:60, col:69> 'char const[48]' lvalue ->c 0x55b4827ab470
|             |   `-CXXMemberCallExpr 0x55b4827b8a60 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b4827b8a30 <col:60> '<bound member function type>' ->xanno 0x55b4827a05b8
|             |       `-CXXThisExpr 0x55b4827b8a20 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b4827b8ae8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4827b8ab0 <col:73> 'int' lvalue ParmVar 0x55b4827a34f0 'i' 'int'
|-CXXMethodDecl 0x55b4827a3838 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55b4827a36a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b4827a3720 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55b4827b9318 <col:41, line:528:5>
|   |-ParenExpr 0x55b4827b90a0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827b9070 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b8d90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b8d60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b8c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b8c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b8c18 <col:23> 'int' lvalue ParmVar 0x55b4827a36a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b8c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b8d40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b8d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b8c90 <col:33> 'int' lvalue ParmVar 0x55b4827a36a8 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827b8d08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827b8cf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827b8cb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827b8cd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55b4827b8df0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b8dd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827b8fd0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b8fb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b8f98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b9010 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b8e60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55b4827b9028 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b8e98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b9040 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b8ed0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55b4827b9058 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b8f80 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b8f68 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b8f28 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55b4827b92f8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55b4827b92a8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b4827b9278 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55b4827b9220 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b4827b91e0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b4827b9190 <col:47, col:56> 'char [48]' lvalue ->c 0x55b4827ab470
|     |     |   `-CXXMemberCallExpr 0x55b4827b9170 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b4827b9140 <col:47> '<bound member function type>' ->xanno 0x55b4827a0758
|     |     |       `-CXXThisExpr 0x55b4827b9130 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b4827b91f8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b4827b91c0 <col:60> 'int' lvalue ParmVar 0x55b4827a36a8 'i' 'int'
|     `-ImplicitCastExpr 0x55b4827b92e0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827b92c0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55b4827a3720 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55b4827a39f8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55b4827a3900 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b4827b99e8 <col:36, line:541:5>
|   |-ParenExpr 0x55b4827b9788 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827b9758 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b94b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b9480 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b9390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b9378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b9338 <col:23> 'int' lvalue ParmVar 0x55b4827a3900 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b9358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b9460 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b9448 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b93b0 <col:33> 'int' lvalue ParmVar 0x55b4827a3900 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827b9428 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827b9410 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827b93d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827b93f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b4827b9510 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b94f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827b96b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b96a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b9680 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b96f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b9580 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b4827b9710 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b95b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b9728 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b95f0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55b4827b9740 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b9668 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b9650 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b9610 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55b4827b99d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55b4827b99c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55b4827b99a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b4827b9978 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55b4827b9920 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b4827b98f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b4827b98a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b4827ab470
|             |   `-CXXMemberCallExpr 0x55b4827b9880 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b4827b9850 <col:61> '<bound member function type>' ->xanno 0x55b4827a05b8
|             |       `-CXXThisExpr 0x55b4827b9840 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b4827b9908 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4827b98d0 <col:74> 'int' lvalue ParmVar 0x55b4827a3900 'i' 'int'
|-CXXMethodDecl 0x55b4827a3bc8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55b4827a3ab8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55b4827a3b30 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55b4827a3c78 <col:20>
| `-OptimizeNoneAttr 0x55b4827a3cd0 <col:30>
|-CXXMethodDecl 0x55b4827a3e08 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55b4827a3d10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55b4827ba0b8 <col:35, line:562:5>
|   |-ParenExpr 0x55b4827b9e58 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827b9e28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827b9b80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827b9b50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827b9a60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827b9a48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827b9a08 <col:23> 'int' lvalue ParmVar 0x55b4827a3d10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827b9a28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827b9b30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827b9b18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827b9a80 <col:33> 'int' lvalue ParmVar 0x55b4827a3d10 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827b9af8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827b9ae0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827b9aa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827b9ac0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b4827b9be0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827b9bc0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827b9d88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827b9d70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827b9d50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827b9dc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b9c50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b4827b9de0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827b9c88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827b9df8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827b9cc0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55b4827b9e10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827b9d38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827b9d20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827b9ce0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55b4827ba0a8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55b4827ba090 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55b4827ba078 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b4827ba048 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55b4827b9ff0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b4827b9fc0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b4827b9f70 <col:60, col:69> 'char const[48]' lvalue ->c 0x55b4827ab470
|             |   `-CXXMemberCallExpr 0x55b4827b9f50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b4827b9f20 <col:60> '<bound member function type>' ->xanno 0x55b4827a05b8
|             |       `-CXXThisExpr 0x55b4827b9f10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b4827b9fd8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4827b9fa0 <col:73> 'int' lvalue ParmVar 0x55b4827a3d10 'i' 'int'
|-CXXMethodDecl 0x55b4827a4018 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55b4827a3ec8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b4827a3f40 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55b4827ba798 <col:41, line:577:5>
|   |-ParenExpr 0x55b4827ba528 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827ba4f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827ba250 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827ba220 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827ba130 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827ba118 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827ba0d8 <col:23> 'int' lvalue ParmVar 0x55b4827a3ec8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827ba0f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827ba200 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827ba1e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827ba150 <col:33> 'int' lvalue ParmVar 0x55b4827a3ec8 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827ba1c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827ba1b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827ba170 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827ba190 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55b4827ba2b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827ba290 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827ba458 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827ba440 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827ba420 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827ba498 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827ba320 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55b4827ba4b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827ba358 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827ba4c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827ba390 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55b4827ba4e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827ba408 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827ba3f0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827ba3b0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55b4827ba778 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55b4827ba728 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b4827ba6f8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55b4827ba698 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b4827ba668 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b4827ba618 <col:47, col:56> 'char [48]' lvalue ->c 0x55b4827ab470
|     |     |   `-CXXMemberCallExpr 0x55b4827ba5f8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b4827ba5c8 <col:47> '<bound member function type>' ->xanno 0x55b4827a0758
|     |     |       `-CXXThisExpr 0x55b4827ba5b8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b4827ba680 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b4827ba648 <col:60> 'int' lvalue ParmVar 0x55b4827a3ec8 'i' 'int'
|     `-ImplicitCastExpr 0x55b4827ba760 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827ba740 <col:65> 'int32_t':'int' lvalue ParmVar 0x55b4827a3f40 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55b4827a41d8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55b4827a40e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55b4827baec8 <col:36, line:591:5>
|   |-ParenExpr 0x55b4827bac08 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827babd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827ba930 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827ba900 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827ba810 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827ba7f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827ba7b8 <col:23> 'int' lvalue ParmVar 0x55b4827a40e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827ba7d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827ba8e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827ba8c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827ba830 <col:33> 'int' lvalue ParmVar 0x55b4827a40e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827ba8a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827ba890 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827ba850 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827ba870 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55b4827ba990 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827ba970 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827bab38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827bab20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827bab00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827bab78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827baa00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55b4827bab90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827baa38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827baba8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827baa70 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55b4827babc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827baae8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827baad0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827baa90 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55b4827baeb8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55b4827baea0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55b4827bae88 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b4827bae58 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55b4827badd0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b4827bada0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b4827bad50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55b4827ab470
|             |   `-CXXMemberCallExpr 0x55b4827bad30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b4827bad00 <col:61> '<bound member function type>' ->xanno 0x55b4827a05b8
|             |       `-CXXThisExpr 0x55b4827bacf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b4827badb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4827bad80 <col:74> 'int' lvalue ParmVar 0x55b4827a40e0 'i' 'int'
|-CXXMethodDecl 0x55b4827a4428 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55b4827a4298 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b4827a4310 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55b4827bb5a8 <col:42, line:606:5>
|   |-ParenExpr 0x55b4827bb338 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55b4827bb308 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827bb060 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827bb030 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827baf40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827baf28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827baee8 <col:23> 'int' lvalue ParmVar 0x55b4827a4298 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827baf08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827bb010 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55b4827baff8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827baf60 <col:33> 'int' lvalue ParmVar 0x55b4827a4298 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827bafd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827bafc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827baf80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55b4827bafa0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55b4827bb0c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827bb0a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55b4827bb268 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55b4827bb250 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827bb230 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827bb2a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827bb130 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55b4827bb2c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827bb168 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827bb2d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827bb1a0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55b4827bb2f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827bb218 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827bb200 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827bb1c0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55b4827bb588 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55b4827bb538 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b4827bb508 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55b4827bb4a8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b4827bb478 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b4827bb428 <col:48, col:57> 'char [48]' lvalue ->c 0x55b4827ab470
|     |     |   `-CXXMemberCallExpr 0x55b4827bb408 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b4827bb3d8 <col:48> '<bound member function type>' ->xanno 0x55b4827a0758
|     |     |       `-CXXThisExpr 0x55b4827bb3c8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b4827bb490 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b4827bb458 <col:61> 'int' lvalue ParmVar 0x55b4827a4298 'i' 'int'
|     `-ImplicitCastExpr 0x55b4827bb570 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55b4827bb550 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55b4827a4310 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55b4827a45c0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55b4827a44f0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55b4827bbe18 <col:33, line:620:5>
|   |-ParenExpr 0x55b4827bbb90 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55b4827bbb60 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827bb7b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827bb780 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827bb620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827bb608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827bb5c8 <col:23> 'int' lvalue ParmVar 0x55b4827a44f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827bb5e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827bb760 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55b4827bb748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827bb640 <col:33> 'int' lvalue ParmVar 0x55b4827a44f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827bb728 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827bb710 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827bb660 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55b4827bb6e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55b4827bb6d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55b4827bb698 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55b4827bb810 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827bb7f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55b4827bbac0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55b4827bbaa8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827bba88 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827bbb00 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827bb8f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55b4827bbb18 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827bb940 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827bbb30 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827bb978 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55b4827bbb48 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827bba70 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827bba58 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827bba18 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55b4827bbe08 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55b4827bbdf0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55b4827bbdd8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55b4827bbda8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55b4827bbd20 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55b4827bbcf0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55b4827bbca0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55b4827ab470
|             |   `-CXXMemberCallExpr 0x55b4827bbc80 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55b4827bbc50 <col:67> '<bound member function type>' ->xanno 0x55b4827a05b8
|             |       `-CXXThisExpr 0x55b4827bbc40 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55b4827bbd08 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4827bbcd0 <col:80> 'int' lvalue ParmVar 0x55b4827a44f0 'i' 'int'
|-CXXMethodDecl 0x55b4827a47d8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55b4827a4680 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55b4827a4700 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55b4827bc640 <col:45, line:635:5>
|   |-ParenExpr 0x55b4827bc388 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55b4827bc358 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55b4827bc020 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55b4827bbff0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55b4827bbe90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55b4827bbe78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55b4827bbe38 <col:23> 'int' lvalue ParmVar 0x55b4827a4680 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55b4827bbe58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55b4827bbfd0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55b4827bbfb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55b4827bbeb0 <col:33> 'int' lvalue ParmVar 0x55b4827a4680 'i' 'int'
|   |   |     `-BinaryOperator 0x55b4827bbf98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55b4827bbf80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55b4827bbed0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55b4827a09a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55b4827bbf58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55b4827bbf40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55b4827bbf08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55b4827bc080 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55b4827bc060 <col:79> 'int' 0
|   |   `-CallExpr 0x55b4827bc2b8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55b4827bc2a0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55b4827bc280 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55b48230d050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55b4827bc2f8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827bc0f0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55b4827bc310 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55b4827bc138 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55b4827bc328 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55b4827bc170 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55b4827bc340 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55b4827bc268 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55b4827bc250 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55b4827bc208 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55b4827bc620 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55b4827bc588 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55b4827bc558 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55b4827bc4f8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55b4827bc4c8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55b4827bc478 <col:54, col:63> 'char [48]' lvalue ->c 0x55b4827ab470
|     |     |   `-CXXMemberCallExpr 0x55b4827bc458 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55b4827bc428 <col:54> '<bound member function type>' ->xanno 0x55b4827a0758
|     |     |       `-CXXThisExpr 0x55b4827bc418 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55b4827bc4e0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55b4827bc4a8 <col:67> 'int' lvalue ParmVar 0x55b4827a4680 'i' 'int'
|     `-CXXConstCastExpr 0x55b4827bc5f0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55b4827bc5d8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55b4827bc5a0 <col:91> 'const void *' lvalue ParmVar 0x55b4827a4700 'x' 'const void *'
|-CXXMethodDecl 0x55b4827a48a8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55b4827bc6c8 <col:34, line:640:5>
|   `-ReturnStmt 0x55b4827bc6b8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55b4827bc6a0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55b4827bc670 <col:16> 'Packet *' lvalue ->_data_packet 0x55b4827ac028
|         `-CXXThisExpr 0x55b4827bc660 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55b4827a49e8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55b4827a4958 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55b4827b5788 <col:46> 'bool' true
|-CXXMethodDecl 0x55b4827a4b68 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55b4827a4aa0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55b4827a4c10 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55b4827a53c0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55b4827a4d10 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a5430 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a4cf0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55b4827a4cd0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55b482799e70 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55b4827a4da0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a5448 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a4d80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55b4827a4d60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55b482799f00 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55b4827a4e30 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a5460 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a4e10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55b4827a4df0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55b4827a4ec0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a5478 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a4ea0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55b4827a4e80 <col:19> 'int' 16
| |-EnumConstantDecl 0x55b4827a4f50 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a5490 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a4f30 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55b4827a4f10 <col:21> 'int' 16
| |-EnumConstantDecl 0x55b4827a4fe0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a54a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a4fc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55b4827a4fa0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55b4827a5070 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a54c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a5050 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55b4827a5030 <col:19> 'int' EnumConstant 0x55b4827a4ec0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55b4827a5100 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a54d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a50e0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55b4827a50c0 <col:19> 'int' EnumConstant 0x55b4827a4fe0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55b4827a51d0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a54f0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a51b0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55b4827a5190 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55b4827a5150 <col:23> 'int' EnumConstant 0x55b4827a5100 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55b4827a5170 <col:40> 'int' 2
| |-EnumConstantDecl 0x55b4827a52a0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55b4827a5508 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b4827a5280 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55b4827a5260 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55b4827a5220 <col:23> 'int' EnumConstant 0x55b4827a5100 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55b4827a5240 <col:40> 'int' 4
| `-EnumConstantDecl 0x55b4827a5370 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55b4827a5520 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55b4827a5350 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55b4827a5330 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55b4827a52f0 <col:23> 'int' EnumConstant 0x55b4827a5100 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55b4827a5310 <col:40> 'int' 8
|-CXXMethodDecl 0x55b4827a5560 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55b4827a5600 <col:68> "" ""
|-CXXMethodDecl 0x55b4827a5698 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55b4827a5738 <col:45> "" ""
|-CXXMethodDecl 0x55b4827a57d0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55b4827a5870 <col:57> "" ""
|-CXXMethodDecl 0x55b4827a5908 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55b4827a59a8 <col:45> "" ""
|-CXXMethodDecl 0x55b4827a5a40 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55b4827a5ae0 <col:57> "" ""
|-CXXMethodDecl 0x55b4827a5b70 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55b4827a5c10 <col:51> "" ""
|-CXXMethodDecl 0x55b4827a5ca0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55b4827a5d40 <col:63> "" ""
|-CXXMethodDecl 0x55b4827a5dd0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55b4827a5e70 <col:53> "" ""
|-CXXMethodDecl 0x55b4827a5f00 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55b4827a5fa0 <col:65> "" ""
|-CXXMethodDecl 0x55b4827a60b8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55b4827a6028 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55b4827a6160 <col:61> "" ""
|-CXXMethodDecl 0x55b4827a62f8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55b4827a61e8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55b4827a6260 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55b4827a63a8 <col:67> "" ""
|-CXXMethodDecl 0x55b4827a64c0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55b4827a6430 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b4827a6568 <col:63> "" ""
|-CXXMethodDecl 0x55b4827a6700 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55b4827a65f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b4827a6668 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55b4827a67b0 <col:69> "" ""
|-CXXMethodDecl 0x55b4827a68c8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55b4827a6838 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b4827a6970 <col:63> "" ""
|-CXXMethodDecl 0x55b4827a9048 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55b4827a8f38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b4827a8fb0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b4827a90f8 <col:69> "" ""
|-CXXMethodDecl 0x55b4827a9210 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55b4827a9180 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55b4827a92b8 <col:62> "" ""
|-CXXMethodDecl 0x55b4827a9450 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55b4827a9340 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b4827a93b8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55b4827a9500 <col:68> "" ""
|-CXXMethodDecl 0x55b4827a9618 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55b4827a9588 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55b4827a96c0 <col:63> "" ""
|-CXXMethodDecl 0x55b4827a9858 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55b4827a9748 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55b4827a97c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55b4827a9908 <col:69> "" ""
|-CXXMethodDecl 0x55b4827a9998 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55b4827a9a38 <col:64> "" ""
|-CXXMethodDecl 0x55b4827a9ac8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55b4827a9b68 <col:52> "" ""
|-CXXMethodDecl 0x55b4827a9bf8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55b4827a9c98 <col:67> "" ""
|-CXXMethodDecl 0x55b4827a9d28 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55b4827a9dc8 <col:55> "" ""
|-CXXMethodDecl 0x55b4827a9ee0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55b4827a9e50 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b4827a9f88 <col:58> "" ""
|-CXXMethodDecl 0x55b4827aa120 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55b4827aa010 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b4827aa088 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55b4827aa1d0 <col:62> "" ""
|-CXXMethodDecl 0x55b4827aa2e8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55b4827aa258 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b4827aa390 <col:58> "" ""
|-CXXMethodDecl 0x55b4827aa528 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55b4827aa418 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b4827aa490 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55b4827aa5d8 <col:62> "" ""
|-CXXMethodDecl 0x55b4827aa6f0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55b4827aa660 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55b4827aa798 <col:60> "" ""
|-CXXMethodDecl 0x55b4827aa930 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55b4827aa820 <col:34> col:37 'int'
| |-ParmVarDecl 0x55b4827aa898 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55b4827aa9e0 <col:64> "" ""
|-CXXMethodDecl 0x55b4827aaaf8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55b4827aaa68 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55b4827aaba0 <col:58> "" ""
|-CXXMethodDecl 0x55b4827aad38 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55b4827aac28 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b4827aaca0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55b4827aade8 <col:62> "" ""
|-CXXMethodDecl 0x55b4827aaf00 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55b4827aae70 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55b4827aafa8 <col:59> "" ""
|-CXXMethodDecl 0x55b4827ab140 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55b4827ab030 <col:33> col:36 'int'
| |-ParmVarDecl 0x55b4827ab0a8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55b4827ab1f0 <col:63> "" ""
|-AccessSpecDecl 0x55b4827ab260 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55b4827ab288 prev 0x55b4827a0490 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b4827ab380 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55b4827ab470 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55b4827ab598 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55b4827ab718 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55b4827ab898 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55b4827aba18 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55b4827bc848 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55b4827bd0b8 <col:11>
| |-CXXDestructorDecl 0x55b4827bc920 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55b4827bca58 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55b4827bca58
| | `-ParmVarDecl 0x55b4827bcb68 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55b4827bcc08 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b4827bcc08
| | `-ParmVarDecl 0x55b4827bcd18 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55b4827bfad8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55b4827bfbe8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55b4827bfe68 <col:11>
| |   `-ReturnStmt 0x55b4827bfe58 <col:11>
| |     `-UnaryOperator 0x55b4827bfe40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55b4827bfe30 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55b4827bfc58 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55b4827bfc58
|   `-ParmVarDecl 0x55b4827bfd68 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55b4827aba80 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55b4827abb98 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55b4827abc38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55b4827abca0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55b4827abd08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55b4827abd70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55b4827abdd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55b4827abe90 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55b4827abef0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55b4827abf50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55b4827bc758 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55b4827abc38 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55b4827bd0c8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55b4827bd120 <col:12>
| |-CXXConstructorDecl 0x55b4827bcd88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55b4827bcd88
| | `-ParmVarDecl 0x55b4827bce98 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55b4827bcf38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55b4827bcf38
| | `-ParmVarDecl 0x55b4827bd048 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55b4827bf1c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55b4827abfc8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55b4827ac028 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55b4827ac090 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55b4827ac0f8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55b4827ac160 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55b4827ac1c8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55b4827ac228 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55b4827ac288 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55b4827ac2f0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55b4827ac378 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55b4827abfc8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55b4827bc6f0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55b4827ac228 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55b4827bd130 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55b4827bd190 <col:21, line:755:5>
|-CXXConstructorDecl 0x55b4827ac518 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55b4827ac458 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55b4827ac610 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55b4827ac7f8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55b4827ac700 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55b4827acac8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55b4827ac8b0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55b4827ac928 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55b4827ac9a0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b4827acce8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55b4827acb98 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55b4827acc10 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55b4827b52c8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55b4827acda8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55b4827ace20 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55b4827ace98 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55b4827b5420 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55b4827b5390 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55b4827b5568 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55b4827b54d8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55b4827b5660 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b48288dd20 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55b48288de38 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55b48288dec8 <col:16, col:22> col:16 public
|-EnumDecl 0x55b48288def0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55b48288dff0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b48288e240 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b48288dfd0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55b48288dfb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55b48288e080 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b48288e258 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b48288e060 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55b48288e040 <col:24> 'int' 22
| |-EnumConstantDecl 0x55b48288e110 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b48288e270 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b48288e0f0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55b48288e0d0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55b48288e1a0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55b48288e288 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55b48288e180 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55b48288e160 <col:25> 'int' 95
| `-EnumConstantDecl 0x55b48288e1f0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55b48288fc00 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55b482890038 <col:7>
|-CXXConstructorDecl 0x55b48288fd08 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55b48288fd08
| `-ParmVarDecl 0x55b48288fe18 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55b48288feb8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b48288ffc8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55b4828e6e20 <col:7>
`-CXXDestructorDecl 0x55b482892148 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55b48288e2b8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55b48288e418 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55b48288e4a8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55b48288e4e0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55b4823c65a0 'uint32_t' sugar
|   |-Typedef 0x55b4822da4c8 'uint32_t'
|   `-TypedefType 0x55b4822b35a0 '__uint32_t' sugar
|     |-Typedef 0x55b4822b3198 '__uint32_t'
|     `-BuiltinType 0x55b482271620 'unsigned int'
|-CXXConstructorDecl 0x55b48288e628 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55b48288e550 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55b48288fb08 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55b482890048 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55b48288f3c0 'base' 'int'
| | `-ImplicitCastExpr 0x55b48288fba8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b48288fb68 <col:16> 'int' lvalue ParmVar 0x55b48288e550 'b' 'int'
| `-CompoundStmt 0x55b4828900b8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55b48288eb20 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55b48288e6f0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55b48288e770 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55b48288e7e8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55b48288e868 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55b48288e928 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55b48288e9a8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55b48288ef78 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55b48288ebf0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55b48288eed8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55b48288ec98 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55b48288ed38 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55b48288edb0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55b48288fb28 <col:82> 'const ArgContext' lvalue Var 0x55b482882b98 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55b482890ff8 <col:94, line:1067:5>
| |   |-DeclStmt 0x55b482890248 <line:1054:9, col:64>
| |   | `-VarDecl 0x55b4828900d8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55b482890200 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55b482890468 <line:1055:9, col:91>
| |   | `-VarDecl 0x55b482890278 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55b482890440 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55b482890420 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55b4828903d0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55b4828903b0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55b482890358 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55b482890308 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55b482890338 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55b482890398 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55b482890378 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55b482890400 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55b4828905c8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55b482890560 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55b482890a10 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55b482890940 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55b4828908c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55b4827907a8 0x55b4825d9b68 0x55b4825d9840 0x55b4825ca010 0x55b4825c9cc0 0x55b4825c95b0 0x55b48259bf20 0x55b4825293f0
| |   | | |-CallExpr 0x55b482890800 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55b4828905f0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55b4828906a0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55b482890670 <col:19, col:23> '<bound member function type>' .begin 0x55b4825b9218
| |   | | | |   `-DeclRefExpr 0x55b482890650 <col:19> 'const String' lvalue ParmVar 0x55b48288ec98 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55b482890710 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55b4828906e0 <col:32, col:36> '<bound member function type>' .end 0x55b4825b9430
| |   | | | |   `-DeclRefExpr 0x55b4828906c0 <col:32> 'const String' lvalue ParmVar 0x55b48288ec98 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55b482890730 <col:43> 'const bool' lvalue Var 0x55b4828900d8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55b482890798 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55b482890778 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55b4828907c0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55b482890560 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55b4828907e0 <col:73> 'const int' lvalue Var 0x55b482890278 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55b4828908a0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55b482890870 <col:16, col:20> '<bound member function type>' .end 0x55b4825b9430
| |   | |     `-DeclRefExpr 0x55b482890850 <col:16> 'const String' lvalue ParmVar 0x55b48288ec98 'str' 'const String &'
| |   | `-BinaryOperator 0x55b4828909f0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55b482890988 <col:13> 'int' lvalue ->status 0x55b48288f428
| |   |   | `-CXXThisExpr 0x55b482890978 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55b4828909d8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55b4828909b8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e080 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55b482890c60 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55b482890b48 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55b482890b30 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55b482890b18 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55b482890a38 <col:13> 'int' lvalue ->status 0x55b48288f428
| |   | | |     `-CXXThisExpr 0x55b482890a28 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55b482890af8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55b482890ac8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55b482890a78 <col:23> 'int' lvalue ->status 0x55b48288f428
| |   | |   |   `-CXXThisExpr 0x55b482890a68 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55b482890ae0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55b482890aa8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e110 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55b482890c40 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55b482890be0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55b482890b88 <col:13, col:18> '<bound member function type>' .error 0x55b482753c70
| |   |   | | `-DeclRefExpr 0x55b482890b68 <col:13> 'const ArgContext' lvalue ParmVar 0x55b48288edb0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55b482890c08 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55b482890bb8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55b482890c30 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55b482890c20 <col:20> 'bool' false
| |   |-DeclStmt 0x55b482890e38 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55b482890de0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55b482890d70 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55b482890fa8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55b482890e60 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55b48255d3b8
| |   | |-DeclRefExpr 0x55b482890ea8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55b482890560 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55b482890f78 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55b482890ef0 <col:64> 'V' lvalue ParmVar 0x55b48288ed38 'result' 'V &'
| |   `-ReturnStmt 0x55b482890fe8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55b482890fd8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55b4828ea988 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55b4828ea760 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55b4828ea838 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55b4828ea8a0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55b4828f3b30 <col:94, line:1067:5>
|     |-DeclStmt 0x55b4828eb198 <line:1054:9, col:64>
|     | `-VarDecl 0x55b4828eafb8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55b4828eb128 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55b4828eb0f8 <col:36, col:55> 'const bool' lvalue Var 0x55b48254c5d0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55b4828eb378 <line:1055:9, col:91>
|     | `-VarDecl 0x55b4828eb1b0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55b4828eb2f8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55b4828eb2e0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55b4828eb2c0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55b4828eb2a0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55b4828eb280 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55b4828eb248 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55b4828eb228 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55b482890338 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55b4828eb268 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55b482890378 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55b482890400 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55b4828f2920 <line:1056:9, col:27>
|     | `-VarDecl 0x55b4828f28b8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55b4828f2da8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55b4828f2d50 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55b4828f2c08 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55b4828f2bd8 <col:13> '<bound member function type>' ->parse 0x55b48288eb20
|     | | | | `-CXXThisExpr 0x55b4828f2bc8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55b4828f2a68 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55b4828f2a38 <col:19, col:23> '<bound member function type>' .begin 0x55b4825b9218
|     | | | |   `-DeclRefExpr 0x55b4828f2a18 <col:19> 'const String' lvalue ParmVar 0x55b4828ea760 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55b4828f2ad8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55b4828f2aa8 <col:32, col:36> '<bound member function type>' .end 0x55b4825b9430
|     | | | |   `-DeclRefExpr 0x55b4828f2a88 <col:32> 'const String' lvalue ParmVar 0x55b4828ea760 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55b4828f2c78 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55b4828f2c58 <col:43> 'const bool' lvalue Var 0x55b4828eafb8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55b4828f2b60 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55b4828f2b48 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55b4828f2b28 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55b4828f2c90 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55b4828f2b88 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55b4828f28b8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55b4828f2cc8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55b4828f2ca8 <col:73> 'const int' lvalue Var 0x55b4828eb1b0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55b4828f2d30 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55b4828f2d00 <col:16, col:20> '<bound member function type>' .end 0x55b4825b9430
|     | |     `-DeclRefExpr 0x55b4828f2ce0 <col:16> 'const String' lvalue ParmVar 0x55b4828ea760 'str' 'const String &'
|     | `-BinaryOperator 0x55b4828f2d88 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55b482890988 <col:13> 'int' lvalue ->status 0x55b48288f428
|     |   | `-CXXThisExpr 0x55b482890978 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55b4828f2d70 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55b4828909b8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e080 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55b4828f2f20 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55b4828f2e40 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55b4828f2e28 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55b4828f2e10 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55b482890a38 <col:13> 'int' lvalue ->status 0x55b48288f428
|     | | |     `-CXXThisExpr 0x55b482890a28 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55b4828f2df0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55b4828f2dc0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55b482890a78 <col:23> 'int' lvalue ->status 0x55b48288f428
|     | |   |   `-CXXThisExpr 0x55b482890a68 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55b4828f2dd8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55b482890aa8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e110 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55b4828f2f00 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55b4828f2eb0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55b4828f2e80 <col:13, col:18> '<bound member function type>' .error 0x55b482753c70
|     |   | | `-DeclRefExpr 0x55b4828f2e60 <col:13> 'const ArgContext' lvalue ParmVar 0x55b4828ea8a0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55b4828f2ed8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55b482890bb8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55b4828f2ef0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55b482890c20 <col:20> 'bool' false
|     |-DeclStmt 0x55b4828f3468 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55b4828f3410 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55b4828f33c0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55b4828f33a0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55b4828f3330 'type'
|     |       `-ElaboratedType 0x55b4828f32e0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55b4828f32c0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55b48254c728 'unsigned_type'
|     |           `-BuiltinType 0x55b482271620 'unsigned int'
|     |-CallExpr 0x55b4828f3ac0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55b4828f3aa8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55b4828f3a28 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55b4828f3908 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55b48255d3b8 'extract_integer')
|     | |-ImplicitCastExpr 0x55b4828f3b08 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55b4828f3af0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55b4828f34c8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55b4828f28b8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55b4828f3598 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55b4828f3548 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55b4828ea838 'result' 'unsigned int &'
|     `-ReturnStmt 0x55b4828f3b20 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55b482890fd8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55b48288f338 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55b48288efe8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55b48288f298 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55b48288f098 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55b48288f138 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55b48288f1b0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55b48288fb48 <col:71> 'const ArgContext' lvalue Var 0x55b482882b98 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55b482891768 <col:83, line:1083:5>
| |   |-DeclStmt 0x55b4828910c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55b482891058 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55b482891740 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55b482891350 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55b4828911d8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55b4828911a0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55b4828910e8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55b482891140 <col:31> 'const String' lvalue ParmVar 0x55b48288f098 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55b482891160 <col:36> 'V' lvalue Var 0x55b482891058 'x' 'V'
| |     | |   `-DeclRefExpr 0x55b482891180 <col:39> 'const ArgContext' lvalue ParmVar 0x55b48288f1b0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55b482891330 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55b482891310 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55b4828912f8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55b4828912e0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55b482891200 <col:17> 'int' lvalue ->status 0x55b48288f428
| |     |     |     `-CXXThisExpr 0x55b4828911f0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55b4828912c0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55b482891290 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55b482891240 <col:27> 'int' lvalue ->status 0x55b48288f428
| |     |       |   `-CXXThisExpr 0x55b482891230 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55b4828912a8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55b482891270 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e110 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55b482891380 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55b482891370 <col:20> 'bool' false
| |     `-IfStmt 0x55b482891718 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55b482891420 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55b4828913f0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55b4828913a0 <col:18> 'int' lvalue ->status 0x55b48288f428
| |       | |   `-CXXThisExpr 0x55b482891390 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55b482891408 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55b4828913d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e110 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55b482891658 <col:42, line:1079:9>
| |       | |-CallExpr 0x55b482891600 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55b482891450 <line:1076:13> '<bound member function type>' ->range_error 0x55b48288fa38
| |       | | | `-CXXThisExpr 0x55b482891440 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55b482891480 <col:25> 'const ArgContext' lvalue ParmVar 0x55b48288f1b0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55b482891560 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55b4828915d8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55b4828915b8 <col:43> 'V' lvalue Var 0x55b482891058 'x' 'V'
| |       | `-ReturnStmt 0x55b482891648 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55b482891638 <col:20> 'bool' false
| |       `-CompoundStmt 0x55b4828916f8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55b4828916b8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55b482891678 <col:13> 'V' lvalue ParmVar 0x55b48288f138 'result' 'V &'
| |         | `-DeclRefExpr 0x55b482891698 <col:22> 'V' lvalue Var 0x55b482891058 'x' 'V'
| |         `-ReturnStmt 0x55b4828916e8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55b4828916d8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55b4828ea348 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55b4828ea120 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55b4828ea1f8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55b4828ea260 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55b4828eaf98 <col:83, line:1083:5>
|     |-DeclStmt 0x55b4828ea5d0 <line:1071:9, col:12>
|     | `-VarDecl 0x55b4828ea568 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55b4828eaf70 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55b4828eac00 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55b4828eab28 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55b4828eaaf0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55b4828eaaa8 <col:14> '<bound member function type>' ->parse_saturating 0x55b4828ea988
|       | |   | `-CXXThisExpr 0x55b4828eaa98 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55b4828ea640 <col:31> 'const String' lvalue ParmVar 0x55b4828ea120 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55b4828ea660 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55b4828ea568 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55b4828ea680 <col:39> 'const ArgContext' lvalue ParmVar 0x55b4828ea260 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55b4828eabe0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55b4828eabc0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55b4828eaba8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55b4828eab90 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55b482891200 <col:17> 'int' lvalue ->status 0x55b48288f428
|       |     |     `-CXXThisExpr 0x55b4828911f0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55b4828eab70 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55b4828eab40 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55b482891240 <col:27> 'int' lvalue ->status 0x55b48288f428
|       |       |   `-CXXThisExpr 0x55b482891230 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55b4828eab58 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55b482891270 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e110 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55b4828eac20 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55b482891370 <col:20> 'bool' false
|       `-IfStmt 0x55b4828eaf48 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55b4828eac60 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55b4828eac30 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55b4828913a0 <col:18> 'int' lvalue ->status 0x55b48288f428
|         | |   `-CXXThisExpr 0x55b482891390 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55b4828eac48 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55b4828913d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55b48288e110 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55b4828eae80 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55b4828eadf0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55b482891450 <line:1076:13> '<bound member function type>' ->range_error 0x55b48288fa38
|         | | | `-CXXThisExpr 0x55b482891440 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55b4828eac80 <col:25> 'const ArgContext' lvalue ParmVar 0x55b4828ea260 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55b4828eae58 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55b4828eae28 <col:31, col:50> 'const bool' lvalue Var 0x55b48254c5d0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55b4828eadc8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55b4828eadb0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55b4828ead98 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55b4828ead78 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55b4828ea568 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55b4828eae70 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55b482891638 <col:20> 'bool' false
|         `-CompoundStmt 0x55b4828eaf28 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55b4828eaef8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55b4828eaea0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55b4828ea1f8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55b4828eaee0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55b4828eaec0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55b4828ea568 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55b4828eaf18 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55b4828916d8 <col:20> 'bool' true
|-FieldDecl 0x55b48288f3c0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55b48288f428 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55b48288f478 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55b48288f730 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55b48288f4b8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55b48288f538 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55b48288f5b0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55b48288f630 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55b48288fa38 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55b48288f800 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55b48288f878 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55b48288f910 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55b482891fc8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55b482891fc8
| `-ParmVarDecl 0x55b4828920d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55b482892258 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b482892368 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55b4828e6e30 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b4828e6e00 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55b4828e6dd0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55b4828e6da0 <col:7> 'IntArg' lvalue ParmVar 0x55b482892368 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55b48288f3c0 'base' 'int'
| | `-ImplicitCastExpr 0x55b4828e6f28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b4828e6ef8 <col:7> 'int' xvalue .base 0x55b48288f3c0
| |     `-CXXStaticCastExpr 0x55b4828e6ec8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55b4828e6e98 <col:7> 'IntArg' lvalue ParmVar 0x55b482892368 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55b48288f428 'status' 'int'
| | `-ImplicitCastExpr 0x55b4828e6ff8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55b4828e6fc8 <col:7> 'int' xvalue .status 0x55b48288f428
| |     `-CXXStaticCastExpr 0x55b4828e6f98 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55b4828e6f68 <col:7> 'IntArg' lvalue ParmVar 0x55b482892368 '' 'IntArg &&'
| `-CompoundStmt 0x55b4828e7050 <col:7>
`-CXXDestructorDecl 0x55b4828e5f90 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55b482896560 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55b4828967b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55b4828e5eb8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55b4828e6430 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55b4828e6410 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55b4828e64a0 <col:19>
|-CXXConstructorDecl 0x55b4828e6098 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55b4828e6098
| `-ParmVarDecl 0x55b4828e61a8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55b4828e6248 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55b4828e6358 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55b4828e7060 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55b4828e6d80 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55b4828e6d50 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55b4828e6d20 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55b4828e6358 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55b4828e70d0 <col:19>
`-CXXDestructorDecl 0x55b4828e64e0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
