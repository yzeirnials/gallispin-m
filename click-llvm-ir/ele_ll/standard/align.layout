
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb784c58 prev 0x559ffb77c3f8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb784d50 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x559ffb784de0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x559ffb784e58 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x559ffb784f18 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x559ffb784fe0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x559ffb785158 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x559ffb785090 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x559ffb785200 <col:24>
| `-OptimizeNoneAttr 0x559ffb785258 <col:34>
|-CXXMethodDecl 0x559ffb7852a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x559ffb785558 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x559ffb785350 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559ffb7853c8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x559ffb785448 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x559ffb785610 <line:229:7, col:14> col:7 private
|-FieldDecl 0x559ffb785648 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x559ffb7856b0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x559ffb785738 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x559ffb785a58 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x559ffb7857f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559ffb785868 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x559ffb7858e0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x559ffb785960 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x559ffb785b70 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x559ffb78d4e8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559ffb78d4e8
| `-ParmVarDecl 0x559ffb78d5f8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x559ffb78d698 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559ffb78d698
| `-ParmVarDecl 0x559ffb78d7a8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x559ffb8591d0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb777c70 prev 0x559ffb7779f0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ffb777d68 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x559ffb777df8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x559ffb777e58 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x559ffb777f48 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x559ffb778048 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x559ffb778218 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x559ffb7780c8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x559ffb778140 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x559ffb7783a8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x559ffb7782e0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x559ffb778450 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x559ffb778588 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x559ffb7784c0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x559ffb778728 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x559ffb778668 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x559ffb7788c8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x559ffb778808 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x559ffb778970 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x559ffb778a70 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x559ffb778b50 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb778a50 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x559ffb778a30 <col:26> 'int' 1
| `-EnumConstantDecl 0x559ffb778b00 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x559ffb778b68 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb778ae0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x559ffb778ac0 <col:44> 'int' 2
|-CXXMethodDecl 0x559ffb778cb0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x559ffb778b98 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x559ffb778c18 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x559ffb778e08 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x559ffb778d78 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x559ffb779048 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x559ffb778ec8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x559ffb778f40 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x559ffb7790f8 <col:20>
| `-OptimizeNoneAttr 0x559ffb779150 <col:30>
|-CXXMethodDecl 0x559ffb779258 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x559ffb779190 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x559ffb779300 <col:20>
| `-OptimizeNoneAttr 0x559ffb779358 <col:30>
|-CXXMethodDecl 0x559ffb7793a8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x559ffb779470 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x559ffb779588 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x559ffb779610 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x559ffb779698 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x559ffb779720 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x559ffb7797a8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x559ffb779838 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x559ffb7798f8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x559ffb779980 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x559ffb779a08 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x559ffb779a90 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x559ffb779b18 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x559ffb779ba0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x559ffb779c30 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x559ffb779cf0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x559ffb779d80 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x559ffb779ed0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x559ffb779e38 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x559ffb77a060 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x559ffb779f90 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x559ffb77a310 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x559ffb77a118 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x559ffb77a198 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x559ffb77a218 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x559ffb77a3c8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x559ffb77a4d0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ffb77a760 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb77a4b0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x559ffb77a490 <col:33> 'int' 0
| |-EnumConstantDecl 0x559ffb77a560 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ffb77a778 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb77a540 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x559ffb77a520 <col:32> 'int' 20
| |-EnumConstantDecl 0x559ffb77a5f0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ffb77a790 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb77a5d0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x559ffb77a5b0 <col:38> 'int' 90
| |-EnumConstantDecl 0x559ffb77a680 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559ffb77a7a8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb77a660 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x559ffb77a640 <col:35> 'int' 100
| `-EnumConstantDecl 0x559ffb77a710 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x559ffb77a7c0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb77a6f0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x559ffb77a6d0 <col:32> 'int' 2000
|-CXXMethodDecl 0x559ffb77a800 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x559ffb77ac40 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559ffb77aab0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x559ffb77ab28 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb77ad10 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x559ffb77ae90 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x559ffb77adc0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb77b098 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559ffb77af48 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x559ffb77afc0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb77b198 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x559ffb77b238 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x559ffb77b300 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ffb77b390 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x559ffb77b5c0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb77b370 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x559ffb77b350 <col:36> 'int' EnumConstant 0x559ffb77b300 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ffb77b3e0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ffb77b430 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ffb77b480 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ffb77b4d0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559ffb77b520 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x559ffb77b570 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x559ffb77b6a8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x559ffb77b5e8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x559ffb77b770 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x559ffb77b830 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x559ffb77b8f0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x559ffb77b9b0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x559ffb77bac8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x559ffb77bb90 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x559ffb77bd10 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x559ffb77bc40 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x559ffb77be38 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x559ffb77c038 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x559ffb77bee8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x559ffb77bf68 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x559ffb789988 <col:54, line:127:5>
|   |-ParenExpr 0x559ffb789838 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x559ffb789808 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb7894f8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559ffb7894d0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x559ffb7894b8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x559ffb7894a0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x559ffb789470 <col:31> 'Router *' lvalue ->_router 0x559ffb787350
|   |   |         `-CXXThisExpr 0x559ffb789460 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559ffb789558 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb789538 <col:48> 'int' 0
|   |   `-CallExpr 0x559ffb789768 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x559ffb789750 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb789730 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb7897a8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb7895c8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x559ffb7897c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb7895e8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x559ffb7897d8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb789620 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x559ffb7897f0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb789718 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb789700 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb7896b8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x559ffb7898d0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x559ffb789868 <col:9> 'Router *' lvalue ->_router 0x559ffb787350
|   | | `-CXXThisExpr 0x559ffb789858 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x559ffb7898b8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559ffb789898 <col:19> 'Router *' lvalue ParmVar 0x559ffb77bee8 'r' 'Router *'
|   `-BinaryOperator 0x559ffb789968 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x559ffb789900 <col:9> 'int' lvalue ->_eindex 0x559ffb7873b8
|     | `-CXXThisExpr 0x559ffb7898f0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x559ffb789950 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb789930 <col:19> 'int' lvalue ParmVar 0x559ffb77bf68 'eindex' 'int'
|-CXXMethodDecl 0x559ffb77c1c0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x559ffb77c0f8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x559ffb77c290 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x559ffb77c358 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x559ffb77c3f8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x559ffb77c648 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x559ffb77c4c0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x559ffb77c540 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x559ffb77c6f8 <col:20>
| `-OptimizeNoneAttr 0x559ffb77c750 <col:30>
|-CXXMethodDecl 0x559ffb77c858 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559ffb77c790 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x559ffb77c900 <col:20>
| `-OptimizeNoneAttr 0x559ffb77c958 <col:30>
|-CXXMethodDecl 0x559ffb77ca28 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559ffb77c998 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x559ffb77cad0 <col:20>
| `-OptimizeNoneAttr 0x559ffb77cb28 <col:30>
|-CXXMethodDecl 0x559ffb77ccb8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x559ffb77cb60 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x559ffb77cbe0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x559ffb77ce48 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559ffb77cd80 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559ffb77cf98 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559ffb77cf08 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559ffb77d0e8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559ffb77d058 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559ffb77d238 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559ffb77d1a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559ffb77d4f8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x559ffb77d2f0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x559ffb77d370 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x559ffb77d418 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x559ffb77d5d0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x559ffb77d690 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x559ffb77d960 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559ffb77d810 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x559ffb77d888 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb77da88 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x559ffb77dc60 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x559ffb77db40 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x559ffb77dbc0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x559ffb77de48 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x559ffb77dd28 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x559ffb77dda8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x559ffb77e1b8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559ffb77df08 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559ffb77df80 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559ffb77e000 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559ffb788f70 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb788f50 <col:106> 'int' 0
| `-ParmVarDecl 0x559ffb77e078 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ffb788fa8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ffb788f88 <col:126> 'int' 0
|-CXXMethodDecl 0x559ffb77e558 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ffb77e288 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559ffb77e320 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559ffb77e3a0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x559ffb77e418 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ffb788fe0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ffb788fc0 <col:114> 'int' 0
|-CXXMethodDecl 0x559ffb77e8e8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ffb77e630 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x559ffb77e6a8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559ffb77e728 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x559ffb788ff8 <col:96> 'int' 0
| `-ParmVarDecl 0x559ffb77e7a0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ffb789038 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ffb789018 <col:116> 'int' 0
|-CXXMethodDecl 0x559ffb77ec68 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559ffb77e9b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559ffb77ea30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb77eab0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559ffb789070 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb789050 <col:109> 'int' 0
| `-ParmVarDecl 0x559ffb77eb28 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ffb7890a8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ffb789088 <col:129> 'int' 0
|-CXXMethodDecl 0x559ffb77efe8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ffb77ed38 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559ffb77edb0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb77ee30 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x559ffb77eea8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ffb7890e0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ffb7890c0 <col:117> 'int' 0
|-CXXMethodDecl 0x559ffb77f378 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559ffb77f0c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb77f138 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb77f1b8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x559ffb7890f8 <col:99> 'int' 0
| `-ParmVarDecl 0x559ffb77f230 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559ffb789138 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559ffb789118 <col:119> 'int' 0
|-CXXMethodDecl 0x559ffb77f798 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x559ffb77f448 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559ffb77f4c8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559ffb77f540 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb77f5c0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559ffb789170 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb789150 <col:108> 'int' 0
| `-ParmVarDecl 0x559ffb77f640 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x559ffb7891a8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x559ffb789188 <col:141> 'int' 0
|-CXXMethodDecl 0x559ffb77fbb8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559ffb77f870 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559ffb77f8f0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559ffb77f968 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb77f9e8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x559ffb77fa68 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559ffb7891c0 <col:121> 'int' 0
|-CXXMethodDecl 0x559ffb77ffe8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559ffb77fc98 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x559ffb77fd18 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x559ffb77fd90 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb77fe10 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x559ffb7891e0 <col:98> 'int' 0
| `-ParmVarDecl 0x559ffb77fe90 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559ffb789200 <col:123> 'int' 0
|-CXXMethodDecl 0x559ffb7802b0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x559ffb7800c0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559ffb780140 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x559ffb7801c0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x559ffb789220 <col:80> 'int' 0
|-EnumDecl 0x559ffb780368 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x559ffb780470 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ffb780700 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb780450 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x559ffb780430 <col:42> 'int' 1
| |-EnumConstantDecl 0x559ffb780500 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ffb780718 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb7804e0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x559ffb7804c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x559ffb780590 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ffb780730 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb780570 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x559ffb780550 <col:44> 'int' 4
| |-EnumConstantDecl 0x559ffb780620 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559ffb780748 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb780600 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x559ffb7805e0 <col:36> 'int' 7
| `-EnumConstantDecl 0x559ffb7806b0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x559ffb780760 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb780690 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x559ffb780670 <col:34> 'int' 6
|-CXXMethodDecl 0x559ffb780a18 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x559ffb780788 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x559ffb780828 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x559ffb7808a8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x559ffb780920 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x559ffb7892d8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x559ffb7892c0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x559ffb7892a8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x559ffb789288 <col:98, col:105> 'String' (CXXTemporary 0x559ffb789288)
|           `-CXXTemporaryObjectExpr 0x559ffb789250 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x559ffb780cb8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x559ffb780ae8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x559ffb780b60 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x559ffb780bd8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559ffb789388 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559ffb789370 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559ffb789358 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559ffb789338 <col:94, col:101> 'String' (CXXTemporary 0x559ffb789338)
| |         `-CXXTemporaryObjectExpr 0x559ffb789300 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x559ffb789b70 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x559ffb789ae8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x559ffb789ab8 <col:9> '<bound member function type>' ->add_task_handlers 0x559ffb780a18
|     | `-CXXThisExpr 0x559ffb789aa8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559ffb789b28 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ffb789a28 <col:27> 'Task *' lvalue ParmVar 0x559ffb780ae8 'task' 'Task *'
|     |-ImplicitCastExpr 0x559ffb789b40 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ffb789a48 <col:33> 'NotifierSignal *' lvalue ParmVar 0x559ffb780b60 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x559ffb789b58 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559ffb789a68 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559ffb7806b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559ffb789a88 <col:62> 'const String' lvalue ParmVar 0x559ffb780bd8 'prefix' 'const String &'
|-CXXMethodDecl 0x559ffb780ec8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x559ffb780d80 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x559ffb780df8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559ffb789438 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559ffb789420 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559ffb789408 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559ffb7893e8 <col:70, col:77> 'String' (CXXTemporary 0x559ffb7893e8)
| |         `-CXXTemporaryObjectExpr 0x559ffb7893b0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x559ffb789d48 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x559ffb789cc0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x559ffb789c90 <col:9> '<bound member function type>' ->add_task_handlers 0x559ffb780a18
|     | `-CXXThisExpr 0x559ffb789c80 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559ffb789d00 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ffb789c00 <col:27> 'Task *' lvalue ParmVar 0x559ffb780d80 'task' 'Task *'
|     |-ImplicitCastExpr 0x559ffb789d18 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x559ffb789c20 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x559ffb789d30 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559ffb789c40 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559ffb7806b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559ffb789c60 <col:57> 'const String' lvalue ParmVar 0x559ffb780df8 'prefix' 'const String &'
|-CXXMethodDecl 0x559ffb7811a8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x559ffb780f90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb781010 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb781088 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x559ffb781458 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x559ffb781278 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb7812f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb781378 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x559ffb781748 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x559ffb781528 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb7815a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb781620 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x559ffb7819f8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x559ffb781818 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb781898 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb781918 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x559ffb781ca8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x559ffb781ac8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb781b48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb781bc8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x559ffb781f58 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x559ffb781d78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb781df8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb781e70 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x559ffb782208 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x559ffb782028 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb7820a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb782128 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x559ffb782518 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x559ffb782330 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb7823b0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb782430 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x559ffb7827f8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x559ffb7825e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb782668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb782710 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x559ffb782ad8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x559ffb7828c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb782948 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb7829f0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x559ffb782d40 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x559ffb782ba8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559ffb782c28 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559ffb782ca0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x559ffb782fe8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x559ffb782e10 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559ffb782e90 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559ffb782f08 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x559ffb783298 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x559ffb7830b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb783138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb7831b8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x559ffb783548 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x559ffb783368 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb7833e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb783460 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x559ffb7837f8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x559ffb783618 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb783698 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb783710 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x559ffb783ac8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x559ffb7838c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb783948 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559ffb7839e8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x559ffb783df8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x559ffb783b98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559ffb783c18 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x559ffb783c90 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x559ffb783d08 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ffb789450 <col:93> 'bool' false
|-CXXMethodDecl 0x559ffb783fe0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ffb783ec8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x559ffb783f48 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x559ffb7841b8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ffb7840a0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x559ffb784120 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x559ffb784498 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ffb784278 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x559ffb7842f0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x559ffb784370 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x559ffb7843e8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb784788 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559ffb784568 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x559ffb7845e0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x559ffb784660 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x559ffb7846d8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb7849c0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x559ffb784860 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x559ffb7848e0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x559ffb784ba8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x559ffb784a88 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x559ffb784b08 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x559ffb784c58 prev 0x559ffb77c3f8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ffb784d50 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x559ffb784de0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x559ffb784e58 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x559ffb784f18 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x559ffb784fe0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x559ffb785158 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x559ffb785090 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x559ffb785200 <col:24>
| | `-OptimizeNoneAttr 0x559ffb785258 <col:34>
| |-CXXMethodDecl 0x559ffb7852a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x559ffb785558 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x559ffb785350 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559ffb7853c8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x559ffb785448 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x559ffb785610 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x559ffb785648 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x559ffb7856b0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x559ffb785738 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x559ffb785a58 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x559ffb7857f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559ffb785868 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x559ffb7858e0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x559ffb785960 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x559ffb785b70 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x559ffb78d4e8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559ffb78d4e8
| | `-ParmVarDecl 0x559ffb78d5f8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x559ffb78d698 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559ffb78d698
| | `-ParmVarDecl 0x559ffb78d7a8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x559ffb8591d0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559ffb785be8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x559ffb785c88 <col:38> "" ""
|-CXXMethodDecl 0x559ffb785d18 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x559ffb785db8 <col:44> "" ""
|-AccessSpecDecl 0x559ffb785e28 <line:260:3, col:10> col:3 private
|-EnumDecl 0x559ffb785e50 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x559ffb785f50 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x559ffb785fa0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb785f30 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x559ffb785f10 <col:27> 'int' 4
|-FieldDecl 0x559ffb786058 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x559ffb786208 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x559ffb7862c0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x559ffb787350 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x559ffb7873b8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x559ffb787508 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x559ffb787448 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x559ffb7876b8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x559ffb7875c8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x559ffb787898 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x559ffb787778 <col:20> col:23 'int'
| `-ParmVarDecl 0x559ffb7877f8 <col:25> col:28 'int'
|-CXXMethodDecl 0x559ffb787b40 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb787960 <col:23> col:26 'int'
| |-ParmVarDecl 0x559ffb7879e0 <col:28> col:31 'int'
| `-ParmVarDecl 0x559ffb787a58 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x559ffb787bf8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x559ffb787cc0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x559ffb787d10 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x559ffb787d60 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x559ffb787f40 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x559ffb787df0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x559ffb787e68 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb7881e8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x559ffb788008 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x559ffb788088 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x559ffb788100 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb788408 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x559ffb7882b8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x559ffb788338 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x559ffb788740 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x559ffb7884c8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x559ffb788548 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x559ffb7885c0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x559ffb788640 <col:57> col:60 'int'
|-CXXMethodDecl 0x559ffb788928 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559ffb788810 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x559ffb788890 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x559ffb788a78 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x559ffb7889e8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x559ffb788df8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x559ffb788b38 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x559ffb788bb8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x559ffb788c30 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x559ffb788cb0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x559ffb788f10 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Align
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _offset
       112 |   int _mask
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb790658 <../elements/standard/align.hh:27:1, line:45:1> line:27:7 class Align definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x559ffb7907b8 <col:1, col:7> col:7 implicit referenced class Align
|-FieldDecl 0x559ffb790860 <line:29:3, col:7> col:7 _offset 'int'
|-FieldDecl 0x559ffb7908c8 <line:30:3, col:7> col:7 _mask 'int'
|-AccessSpecDecl 0x559ffb790918 <line:32:2, col:8> col:2 public
|-CXXConstructorDecl 0x559ffb7909a0 <line:34:3, col:9> col:3 Align 'void ()'
|-CXXMethodDecl 0x559ffb790aa0 <line:36:3, col:52> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x559ffb7793a8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x559ffb791b28 <col:34, col:52>
|   `-ReturnStmt 0x559ffb791b18 <col:36, col:43>
|     `-ImplicitCastExpr 0x559ffb791b00 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x559ffb791ae0 <col:43> 'const char [6]' lvalue "Align"
|-CXXMethodDecl 0x559ffb790b68 <line:37:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x559ffb779470 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x559ffb791b88 <col:34, col:54>
|   `-ReturnStmt 0x559ffb791b78 <col:36, col:43>
|     `-ImplicitCastExpr 0x559ffb791b60 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x559ffb791b40 <col:43> 'const char []' lvalue Var 0x559ffb779720 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x559ffb790e40 <line:39:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x559ffb77ac40 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x559ffb790cf0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x559ffb790d68 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb790f90 <line:41:3, col:28> col:11 smaction 'Packet *(Packet *)'
| `-ParmVarDecl 0x559ffb790f00 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x559ffb791160 <line:42:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x559ffb778218 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x559ffb791050 <col:13> col:16 'int'
| `-ParmVarDecl 0x559ffb7910c8 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x559ffb7912b8 <line:43:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x559ffb7783a8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x559ffb791228 <col:16> col:19 'int'
|-CXXConstructorDecl 0x559ffb791388 <line:27:7> col:7 implicit Align 'void (const Align &)' inline default_delete noexcept-unevaluated 0x559ffb791388
| `-ParmVarDecl 0x559ffb791498 <col:7> col:7 'const Align &'
|-CXXConstructorDecl 0x559ffb791538 <col:7> col:7 implicit Align 'void (Align &&)' inline default_delete noexcept-unevaluated 0x559ffb791538
| `-ParmVarDecl 0x559ffb791648 <col:7> col:7 'Align &&'
|-CXXMethodDecl 0x559ffb7916e8 <col:7> col:7 implicit operator= 'Align &(const Align &)' inline default_delete noexcept-unevaluated 0x559ffb7916e8
| `-ParmVarDecl 0x559ffb7917f8 <col:7> col:7 'const Align &'
|-CXXMethodDecl 0x559ffb791868 <col:7> col:7 implicit operator= 'Align &(Align &&)' inline default_delete noexcept-unevaluated 0x559ffb791868
| `-ParmVarDecl 0x559ffb791978 <col:7> col:7 'Align &&'
`-CXXDestructorDecl 0x559ffb791a00 <col:7> col:7 implicit ~Align 'void ()' inline default noexcept-unevaluated 0x559ffb791a00
  `-Overrides: [ 0x559ffb777f48 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Align = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.Align.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb54ab00 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x559ffb54ac18 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x559ffb54acb8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x559ffb54ad18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x559ffb54ad78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x559ffb54ae28 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb54b130 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb54b248 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x559ffb54b2f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x559ffb54b358 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x559ffb54b3e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x559ffb551480 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ffb5518b8 <col:12>
|-CXXConstructorDecl 0x559ffb551588 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb551698 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559ffb54b2f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x559ffb553e40 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x559ffb553e10 <col:12> 'const char *const' lvalue .data 0x559ffb54b2f0
| |     `-DeclRefExpr 0x559ffb553df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb551698 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559ffb54b358 'length' 'int'
| | `-ImplicitCastExpr 0x559ffb553ed0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ffb553ea0 <col:12> 'const int' lvalue .length 0x559ffb54b358
| |     `-DeclRefExpr 0x559ffb553e80 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb551698 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559ffb54b3e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x559ffb553f60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x559ffb553f30 <col:12> 'String::memo_t *const' lvalue .memo 0x559ffb54b3e8
| |     `-DeclRefExpr 0x559ffb553f10 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb551698 '' 'const String::rep_t &'
| `-CompoundStmt 0x559ffb553fb8 <col:12>
|-CXXConstructorDecl 0x559ffb551738 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ffb551738
| `-ParmVarDecl 0x559ffb551848 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x559ffb556da0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559ffb5627b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb5628c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x559ffb562de0 <col:12>
|   |-BinaryOperator 0x559ffb562bf8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559ffb562bb0 <col:12> 'const char *' lvalue ->data 0x559ffb54b2f0
|   | | `-CXXThisExpr 0x559ffb562ba0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559ffb562be0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb562b70 <col:12> 'const char *const' lvalue .data 0x559ffb54b2f0
|   |     `-DeclRefExpr 0x559ffb562b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb5628c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559ffb562cc0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x559ffb562c78 <col:12> 'int' lvalue ->length 0x559ffb54b358
|   | | `-CXXThisExpr 0x559ffb562c68 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559ffb562ca8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb562c38 <col:12> 'const int' lvalue .length 0x559ffb54b358
|   |     `-DeclRefExpr 0x559ffb562c18 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb5628c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559ffb562d88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x559ffb562d40 <col:12> 'String::memo_t *' lvalue ->memo 0x559ffb54b3e8
|   | | `-CXXThisExpr 0x559ffb562d30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559ffb562d70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb562d00 <col:12> 'String::memo_t *const' lvalue .memo 0x559ffb54b3e8
|   |     `-DeclRefExpr 0x559ffb562ce0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb5628c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x559ffb562dd0 <col:12>
|     `-UnaryOperator 0x559ffb562db8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb562da8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x559ffb562938 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ffb562938
  `-ParmVarDecl 0x559ffb562a48 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb542070 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ffb542188 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x559ffb542218 <col:16, col:22> col:16 public
|-TypedefDecl 0x559ffb542258 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x559ffb216fd0 'const char *'
|   `-QualType 0x559ffb216521 'const char' const
|     `-BuiltinType 0x559ffb216520 'char'
|-TypedefDecl 0x559ffb5422e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x559ffb5422b0 'String::const_iterator' sugar
|   |-Typedef 0x559ffb542258 'const_iterator'
|   `-PointerType 0x559ffb216fd0 'const char *'
|     `-QualType 0x559ffb216521 'const char' const
|       `-BuiltinType 0x559ffb216520 'char'
|-TypedefDecl 0x559ffb542450 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x559ffb5423c0 'int (String::*)() const'
|   |-RecordType 0x559ffb542100 'String'
|   | `-CXXRecord 0x559ffb542070 'String'
|   `-ParenType 0x559ffb542360 'int () const' sugar
|     `-FunctionProtoType 0x559ffb516f00 'int () const' const cdecl
|       `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb5424b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x559ffb36b8c0 'int64_t' sugar
|   |-Typedef 0x559ffb27f390 'int64_t'
|   `-TypedefType 0x559ffb258630 '__int64_t' sugar
|     |-Typedef 0x559ffb258208 '__int64_t'
|     `-BuiltinType 0x559ffb2165a0 'long'
|-TypedefDecl 0x559ffb542520 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x559ffb36b7e0 'uint64_t' sugar
|   |-Typedef 0x559ffb27f530 'uint64_t'
|   `-TypedefType 0x559ffb2586c0 '__uint64_t' sugar
|     |-Typedef 0x559ffb258278 '__uint64_t'
|     `-BuiltinType 0x559ffb216640 'unsigned long'
|-TypedefDecl 0x559ffb5425b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x559ffb542580 'String::intmax_t' sugar
|   |-Typedef 0x559ffb5424b8 'intmax_t'
|   `-TypedefType 0x559ffb36b8c0 'int64_t' sugar
|     |-Typedef 0x559ffb27f390 'int64_t'
|     `-TypedefType 0x559ffb258630 '__int64_t' sugar
|       |-Typedef 0x559ffb258208 '__int64_t'
|       `-BuiltinType 0x559ffb2165a0 'long'
|-TypedefDecl 0x559ffb542640 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x559ffb542610 'String::uintmax_t' sugar
|   |-Typedef 0x559ffb542520 'uintmax_t'
|   `-TypedefType 0x559ffb36b7e0 'uint64_t' sugar
|     |-Typedef 0x559ffb27f530 'uint64_t'
|     `-TypedefType 0x559ffb2586c0 '__uint64_t' sugar
|       |-Typedef 0x559ffb258278 '__uint64_t'
|       `-BuiltinType 0x559ffb216640 'unsigned long'
|-CXXConstructorDecl 0x559ffb542700 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x559ffb5428a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x559ffb5427e8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x559ffb542a58 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x559ffb542998 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x559ffb542bb0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x559ffb542b20 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x559ffb542dc8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x559ffb542c78 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x559ffb542cf8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x559ffb542fe8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x559ffb542e98 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x559ffb542f18 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x559ffb543208 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x559ffb5430b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x559ffb543138 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x559ffb543428 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x559ffb5432d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x559ffb543358 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x559ffb5435b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x559ffb5434f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x559ffb543738 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x559ffb543678 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x559ffb5438c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x559ffb543800 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x559ffb543a20 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x559ffb543990 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x559ffb543b78 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x559ffb543ae8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x559ffb543cd0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x559ffb543c40 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x559ffb543e58 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x559ffb543d98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x559ffb543fe8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x559ffb543f20 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x559ffb544178 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x559ffb5440b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x559ffb544308 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x559ffb544240 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x559ffb544400 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x559ffb544528 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x559ffb5446a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x559ffb5445e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x559ffb5447f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x559ffb544768 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x559ffb5448b0 <col:63> "" ""
|-CXXMethodDecl 0x559ffb5449f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x559ffb544938 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x559ffb544c08 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x559ffb544ab8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x559ffb544b38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x559ffb544e28 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x559ffb544cd0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x559ffb544d50 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x559ffb545108 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x559ffb544ee8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x559ffb544f68 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x559ffb550f50 <col:55> 'int' 10
| `-ParmVarDecl 0x559ffb544fe0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ffb550f70 <col:76> 'bool' true
|-CXXMethodDecl 0x559ffb5453e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x559ffb5451d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x559ffb545250 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x559ffb550f80 <col:56> 'int' 10
| `-ParmVarDecl 0x559ffb5452c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ffb550fa0 <col:77> 'bool' true
|-CXXMethodDecl 0x559ffb5454f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x559ffb5455b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x559ffb545680 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x559ffb545720 <col:20>
| `-OptimizeNoneAttr 0x559ffb545778 <col:30>
|-CXXConversionDecl 0x559ffb545868 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x559ffb545938 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x559ffb5459f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x559ffb545ae8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x559ffb545ba8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x559ffb545d28 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x559ffb545c60 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x559ffb545e78 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x559ffb545de8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x559ffb545f68 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x559ffb546028 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x559ffb546278 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x559ffb5460e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x559ffb546160 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x559ffb5464d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x559ffb546340 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x559ffb5463c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x559ffb5465a8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb5467b8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x559ffb546660 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x559ffb5466e0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x559ffb5469d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x559ffb546880 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x559ffb546900 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x559ffb546b68 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x559ffb546aa0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x559ffb546c58 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x559ffb546dc8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x559ffb546d08 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559ffb546fd8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x559ffb546e88 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x559ffb546f08 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x559ffb5471f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x559ffb547098 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x559ffb547110 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x559ffb547380 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x559ffb5472b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559ffb5475a0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x559ffb547440 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x559ffb5474c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x559ffb5476f0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x559ffb547660 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x559ffb5478c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x559ffb5477b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x559ffb547830 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x559ffb547a18 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x559ffb547988 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x559ffb547c30 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x559ffb547ad0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x559ffb547b50 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x559ffb550fb0 <col:39> 'int' 0
|-CXXMethodDecl 0x559ffb547e50 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x559ffb547cf0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x559ffb547d70 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x559ffb550fd0 <col:48> 'int' 0
|-CXXMethodDecl 0x559ffb548030 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x559ffb547f10 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x559ffb547f90 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x559ffb550ff0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x559ffb548100 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x559ffb5481c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x559ffb548280 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x559ffb548340 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x559ffb548400 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x559ffb5485a8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x559ffb5484b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x559ffb548728 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x559ffb548660 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x559ffb548900 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x559ffb5487e8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x559ffb548a78 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x559ffb5489b8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x559ffb548bc0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x559ffb548b30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559ffb548d10 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x559ffb548c80 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x559ffb548ee8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x559ffb548dd0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x559ffb548e50 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x559ffb5490c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x559ffb548fb0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x559ffb549030 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x559ffb549218 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x559ffb549188 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x559ffb549428 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x559ffb5492d8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x559ffb549358 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x559ffb549588 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x559ffb5494f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x559ffb5496e0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x559ffb549648 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x559ffb549788 <col:57> "" ""
|-CXXMethodDecl 0x559ffb549898 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x559ffb549808 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x559ffb5499e8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x559ffb549958 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x559ffb549b68 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x559ffb549aa0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x559ffb549c30 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x559ffb549cf0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x559ffb549db0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x559ffb549e50 <col:49> "" ""
|-CXXMethodDecl 0x559ffb549ee0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x559ffb549fa0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x559ffb54a090 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x559ffb54a158 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x559ffb54a218 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x559ffb54a2d8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x559ffb54a3d0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x559ffb54a498 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x559ffb54a560 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x559ffb54a738 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x559ffb54a618 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x559ffb54a698 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x559ffb54a960 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x559ffb54a800 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x559ffb54a880 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x559ffb54aa70 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x559ffb54aad8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x559ffb54ab00 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x559ffb54ac18 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x559ffb54acb8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x559ffb54ad18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x559ffb54ad78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x559ffb54ae28 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x559ffb54ae90 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x559ffb54b0c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x559ffb54b118 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb54b0a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x559ffb54afb8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x559ffb54af60 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x559ffb54afa0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x559ffb54af80 <col:32> 'int' 8
|-CXXRecordDecl 0x559ffb54b130 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ffb54b248 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x559ffb54b2f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x559ffb54b358 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x559ffb54b3e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x559ffb551480 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559ffb5518b8 <col:12>
| |-CXXConstructorDecl 0x559ffb551588 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ffb551698 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559ffb54b2f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x559ffb553e40 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x559ffb553e10 <col:12> 'const char *const' lvalue .data 0x559ffb54b2f0
| | |     `-DeclRefExpr 0x559ffb553df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb551698 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559ffb54b358 'length' 'int'
| | | `-ImplicitCastExpr 0x559ffb553ed0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x559ffb553ea0 <col:12> 'const int' lvalue .length 0x559ffb54b358
| | |     `-DeclRefExpr 0x559ffb553e80 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb551698 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559ffb54b3e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x559ffb553f60 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x559ffb553f30 <col:12> 'String::memo_t *const' lvalue .memo 0x559ffb54b3e8
| | |     `-DeclRefExpr 0x559ffb553f10 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb551698 '' 'const String::rep_t &'
| | `-CompoundStmt 0x559ffb553fb8 <col:12>
| |-CXXConstructorDecl 0x559ffb551738 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ffb551738
| | `-ParmVarDecl 0x559ffb551848 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x559ffb556da0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x559ffb5627b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ffb5628c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x559ffb562de0 <col:12>
| |   |-BinaryOperator 0x559ffb562bf8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x559ffb562bb0 <col:12> 'const char *' lvalue ->data 0x559ffb54b2f0
| |   | | `-CXXThisExpr 0x559ffb562ba0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559ffb562be0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x559ffb562b70 <col:12> 'const char *const' lvalue .data 0x559ffb54b2f0
| |   |     `-DeclRefExpr 0x559ffb562b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb5628c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559ffb562cc0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x559ffb562c78 <col:12> 'int' lvalue ->length 0x559ffb54b358
| |   | | `-CXXThisExpr 0x559ffb562c68 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559ffb562ca8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x559ffb562c38 <col:12> 'const int' lvalue .length 0x559ffb54b358
| |   |     `-DeclRefExpr 0x559ffb562c18 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb5628c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559ffb562d88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x559ffb562d40 <col:12> 'String::memo_t *' lvalue ->memo 0x559ffb54b3e8
| |   | | `-CXXThisExpr 0x559ffb562d30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559ffb562d70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x559ffb562d00 <col:12> 'String::memo_t *const' lvalue .memo 0x559ffb54b3e8
| |   |     `-DeclRefExpr 0x559ffb562ce0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559ffb5628c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x559ffb562dd0 <col:12>
| |     `-UnaryOperator 0x559ffb562db8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559ffb562da8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x559ffb562938 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559ffb562938
|   `-ParmVarDecl 0x559ffb562a48 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x559ffb54b460 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x559ffb54b6a8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x559ffb54b4c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x559ffb54b548 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x559ffb54b5c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x559ffb551440 <col:79, line:261:5>
|   |-BinaryOperator 0x559ffb5510b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559ffb551050 <col:2, col:5> 'const char *' lvalue .data 0x559ffb54b2f0
|   | | `-MemberExpr 0x559ffb551020 <col:2> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|   | |   `-CXXThisExpr 0x559ffb551010 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x559ffb5510a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559ffb551080 <col:12> 'const char *' lvalue ParmVar 0x559ffb54b4c8 'data' 'const char *'
|   |-BinaryOperator 0x559ffb551180 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x559ffb551118 <col:2, col:5> 'int' lvalue .length 0x559ffb54b358
|   | | `-MemberExpr 0x559ffb5510e8 <col:2> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|   | |   `-CXXThisExpr 0x559ffb5510d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x559ffb551168 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559ffb551148 <col:14> 'int' lvalue ParmVar 0x559ffb54b548 'length' 'int'
|   `-IfStmt 0x559ffb551428 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x559ffb5512a0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x559ffb551288 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x559ffb551268 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x559ffb551248 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x559ffb5511e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|     |       | `-MemberExpr 0x559ffb5511b0 <col:7> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|     |       |   `-CXXThisExpr 0x559ffb5511a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x559ffb551230 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ffb551210 <col:17> 'String::memo_t *' lvalue ParmVar 0x559ffb54b5c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x559ffb551400 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x559ffb5513e8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559ffb5512f0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x559ffb53a0d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x559ffb551358 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559ffb54acb8
|         `-ImplicitCastExpr 0x559ffb551340 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559ffb551320 <col:27> 'String::memo_t *' lvalue ParmVar 0x559ffb54b5c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x559ffb54b958 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x559ffb54b778 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x559ffb54b7f8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x559ffb54b870 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x559ffb54b460 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x559ffb5518c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559ffb551a58 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x559ffb5519c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x559ffb551930 <col:2> '<bound member function type>' ->assign_memo 0x559ffb54b6a8
|     | `-ImplicitCastExpr 0x559ffb5519f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x559ffb551920 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x559ffb551a10 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x559ffb551960 <col:14> 'const char *' lvalue ParmVar 0x559ffb54b778 'data' 'const char *'
|     |-ImplicitCastExpr 0x559ffb551a28 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559ffb551980 <col:20> 'int' lvalue ParmVar 0x559ffb54b7f8 'length' 'int'
|     `-ImplicitCastExpr 0x559ffb551a40 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb5519a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x559ffb54b870 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x559ffb54bae8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x559ffb54ba28 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x559ffb551cb0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x559ffb551c30 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x559ffb551a80 <col:2> '<bound member function type>' ->assign_memo 0x559ffb54b6a8
|     | `-CXXThisExpr 0x559ffb551a70 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x559ffb551c68 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x559ffb551b00 <col:14, col:19> 'const char *' lvalue .data 0x559ffb54b2f0
|     |   `-MemberExpr 0x559ffb551ad0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x559ffb54b460
|     |     `-DeclRefExpr 0x559ffb551ab0 <col:14> 'const String' lvalue ParmVar 0x559ffb54ba28 'x' 'const String &'
|     |-ImplicitCastExpr 0x559ffb551c80 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x559ffb551b80 <col:25, col:30> 'int' lvalue .length 0x559ffb54b358
|     |   `-MemberExpr 0x559ffb551b50 <col:25, col:27> 'String::rep_t' lvalue ._r 0x559ffb54b460
|     |     `-DeclRefExpr 0x559ffb551b30 <col:25> 'const String' lvalue ParmVar 0x559ffb54ba28 'x' 'const String &'
|     `-ImplicitCastExpr 0x559ffb551c98 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x559ffb551c00 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|         `-MemberExpr 0x559ffb551bd0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x559ffb54b460
|           `-DeclRefExpr 0x559ffb551bb0 <col:38> 'const String' lvalue ParmVar 0x559ffb54ba28 'x' 'const String &'
|-CXXMethodDecl 0x559ffb54bbb0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x559ffb552670 <col:31, line:278:5>
|   `-IfStmt 0x559ffb552658 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x559ffb551d50 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x559ffb551d38 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x559ffb551d08 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|     |     `-MemberExpr 0x559ffb551cd8 <col:6> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|     |       `-CXXThisExpr 0x559ffb551cc8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x559ffb552630 <col:15, line:277:2>
|       |-ParenExpr 0x559ffb552200 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x559ffb5521d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x559ffb551e60 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x559ffb551e48 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x559ffb551e30 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x559ffb551df0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559ffb54acb8
|       |   |       `-ImplicitCastExpr 0x559ffb551dd8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x559ffb551da8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|       |   |           `-MemberExpr 0x559ffb551d78 <col:27> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|       |   |             `-CXXThisExpr 0x559ffb551d68 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x559ffb551ec0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x559ffb551ea0 <col:54> 'int' 0
|       |   `-CallExpr 0x559ffb552130 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x559ffb552118 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x559ffb552098 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x559ffb552170 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x559ffb551fa8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x559ffb552188 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x559ffb551fd8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x559ffb5521a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x559ffb552010 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x559ffb5521b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x559ffb552080 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x559ffb552068 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x559ffb552030 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x559ffb552550 <line:274:6, line:275:22>
|       | |-CallExpr 0x559ffb552410 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x559ffb5523f8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559ffb552370 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x559ffb53b520 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x559ffb552340 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559ffb54acb8
|       | |   `-ImplicitCastExpr 0x559ffb552328 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x559ffb5522f8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|       | |       `-MemberExpr 0x559ffb5522c8 <col:40> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|       | |         `-CXXThisExpr 0x559ffb5522b8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x559ffb552510 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x559ffb5524f8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559ffb552438 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x559ffb550390 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x559ffb552538 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x559ffb552498 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|       |       `-MemberExpr 0x559ffb552468 <col:15> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|       |         `-CXXThisExpr 0x559ffb552458 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x559ffb552610 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x559ffb5525a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x559ffb54b3e8
|         | `-MemberExpr 0x559ffb552578 <col:6> 'String::rep_t' lvalue ->_r 0x559ffb54b460
|         |   `-CXXThisExpr 0x559ffb552568 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x559ffb5525f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x559ffb5525d8 <col:16> 'int' 0
|-CXXMethodDecl 0x559ffb54be48 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x559ffb54bc68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x559ffb54bce8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x559ffb54bd60 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x559ffb54bf20 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x559ffb54c170 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x559ffb54bfd8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x559ffb54c058 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x559ffb54c0d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x559ffb54c358 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x559ffb54c240 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x559ffb54c2c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x559ffb54c458 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x559ffb552748 <col:41, line:286:5>
|   `-ReturnStmt 0x559ffb552738 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x559ffb552708 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x559ffb5526d0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x559ffb5526b8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x559ffb552698 <col:46> 'int' 1
|-CXXMethodDecl 0x559ffb54c6f8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x559ffb54c510 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x559ffb54c590 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x559ffb54c610 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x559ffb550390 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x559ffb54c7c0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x559ffb550460 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x559ffb550630 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x559ffb550518 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x559ffb550598 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x559ffb5506f0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x559ffb5507b8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x559ffb5508b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x559ffb550930 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x559ffb5509a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x559ffb550a10 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x559ffb550b10 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x559ffb550b60 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb550af0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x559ffb550ad0 <col:22> 'int' 14
|-CXXMethodDecl 0x559ffb550d78 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x559ffb550b90 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x559ffb550c10 <col:38> col:41 'int'
| `-ParmVarDecl 0x559ffb550c90 <col:43> col:46 'int'
|-FriendDecl 0x559ffb550e80 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x559ffb550f10 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ffb613ea0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x559ffb614078 prev 0x559ffb613ea0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x559ffb614108 <col:46, col:52> col:46 public
|-TypedefDecl 0x559ffb614130 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb615a90 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x559ffb615a40 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x559ffb615a20 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x559ffb614348 'type'
|     `-SubstTemplateTypeParmType 0x559ffb614310 'String' sugar
|       |-TemplateTypeParmType 0x559ffb506920 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb5068d0 'T'
|       `-RecordType 0x559ffb542100 'String'
|         `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb615b48 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x559ffb615b10 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x559ffb615af0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x559ffb615a90 'type'
|     `-ElaboratedType 0x559ffb615a40 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x559ffb615a20 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x559ffb614348 'type'
|         `-SubstTemplateTypeParmType 0x559ffb614310 'String' sugar
|           |-TemplateTypeParmType 0x559ffb506920 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x559ffb5068d0 'T'
|           `-RecordType 0x559ffb542100 'String'
|             `-CXXRecord 0x559ffb542070 'String'
|-CXXMethodDecl 0x559ffb615cc8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x559ffb615bd8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x559ffb615db8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x559ffb615e98 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x559ffb615e98
|-CXXMethodDecl 0x559ffb616168 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x559ffb616070 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x559ffb6163a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ffb616220 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ffb616298 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c0588 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ffb616468 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ffb7c04f0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c06e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559ffb7c07b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559ffb7c0a08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ffb7c0878 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559ffb7c08f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c0c68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x559ffb7c0ad8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559ffb7c0b50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c0e28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x559ffb7c0d38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c0fe8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x559ffb7c0ef0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c10a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ffb7c1150 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559ffb7c1388 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559ffb7c1200 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ffb7c1278 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559ffb7c1628 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x559ffb7c1530 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x559ffb7c16f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x559ffb7c1740 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559ffb7c1790 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ffb77a8b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x559ffb612908 prev 0x559ffb77a8b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x559ffb613e10 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x559ffb613dc0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x559ffb613da0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x559ffb613c50 'type'
|     `-SubstTemplateTypeParmType 0x559ffb613ae0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x559ffb4dc6d0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x559ffb4dc678 'F'
|       `-RecordType 0x559ffb613740 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x559ffb613660 'typed_array_memory'
|-FieldDecl 0x559ffb7c17e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x559ffb7c1830 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559ffb7c1868 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|   |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x559ffb513be8 'T'
|   `-RecordType 0x559ffb542100 'String'
|     `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c18f8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x559ffb7c18c0 'String &'
|   `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|     |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ffb513be8 'T'
|     `-RecordType 0x559ffb542100 'String'
|       `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c1988 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x559ffb7c1950 'const String &'
|   `-QualType 0x559ffb6129a1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-RecordType 0x559ffb542100 'String'
|         `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c1a18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x559ffb7c19e0 'String *'
|   `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|     |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ffb513be8 'T'
|     `-RecordType 0x559ffb542100 'String'
|       `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c1aa8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x559ffb7c1a70 'const String *'
|   `-QualType 0x559ffb6129a1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-RecordType 0x559ffb542100 'String'
|         `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c2700 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x559ffb7c26b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x559ffb7c2690 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x559ffb7c25c8 'type'
|     `-LValueReferenceType 0x559ffb7c2590 'const String &'
|       `-QualType 0x559ffb7c2331 'const String' const
|         `-SubstTemplateTypeParmType 0x559ffb7c2330 'String' sugar
|           |-TemplateTypeParmType 0x559ffb4e6620 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x559ffb4e65c8 'T'
|           `-RecordType 0x559ffb542100 'String'
|             `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c2768 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x559ffb7c1950 'const String &'
|   `-QualType 0x559ffb6129a1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-RecordType 0x559ffb542100 'String'
|         `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c27c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb7c2828 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x559ffb7c19e0 'String *'
|   `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|     |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ffb513be8 'T'
|     `-RecordType 0x559ffb542100 'String'
|       `-CXXRecord 0x559ffb542070 'String'
|-TypedefDecl 0x559ffb7c2890 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x559ffb7c1a70 'const String *'
|   `-QualType 0x559ffb6129a1 'const String' const
|     `-SubstTemplateTypeParmType 0x559ffb6129a0 'String' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-RecordType 0x559ffb542100 'String'
|         `-CXXRecord 0x559ffb542070 'String'
|-EnumDecl 0x559ffb7c28e8 <line:134:5> col:5
| `-EnumConstantDecl 0x559ffb7c29e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559ffb7c29c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x559ffb5152c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x559ffb5152a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x559ffb515280 <col:40> 'int' 1
|-CXXConstructorDecl 0x559ffb7c2a68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559ffb7c2cf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb7c2b20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ffb7c2bc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x559ffb7c2f88 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x559ffb7c2e70 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x559ffb7c3248 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x559ffb7c3130 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x559ffb7c3560 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x559ffb7c3440 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x559ffb7c3870 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x559ffb7c3750 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x559ffb7c3b60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb7c39a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ffb7c3a20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ffb7c3c88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559ffb7c3d38 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb7c3d90 <col:30> Inherited
|-CXXMethodDecl 0x559ffb7c3dd8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559ffb7c3e88 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb7c3ee0 <col:30> Inherited
|-CXXMethodDecl 0x559ffb7c3fa8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ffb7c4058 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb7c40b0 <col:30> Inherited
|-CXXMethodDecl 0x559ffb7c40f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ffb7c41a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb7c4200 <col:30> Inherited
|-CXXMethodDecl 0x559ffb7c4248 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ffb7c42f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb7c4350 <col:30> Inherited
|-CXXMethodDecl 0x559ffb7c4398 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559ffb7c4448 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb7c44a0 <col:30> Inherited
|-CXXMethodDecl 0x559ffb7c44c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ffb7c4578 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ffb7c4628 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x559ffb7c47e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb7c46d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ffb7c4750 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ffb7c4938 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559ffb7c48a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb7c4ae8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x559ffb7c49f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ffb7c4ba0 <col:20>
| `-OptimizeNoneAttr 0x559ffb7c4bf8 <col:30>
|-CXXMethodDecl 0x559ffb7c4d18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x559ffb7c4c20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ffb7c4dd0 <col:20>
| `-OptimizeNoneAttr 0x559ffb7c4e28 <col:30>
|-CXXMethodDecl 0x559ffb7c4ee0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ffb7c4e50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb7c5028 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ffb7c4f98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb7c5158 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x559ffb7c5258 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x559ffb7c5328 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x559ffb7c53f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x559ffb7c5538 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ffb7c54a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb7c5680 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ffb7c55f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb7c57c8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x559ffb7c5738 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ffb7c5880 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559ffb7c5980 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x559ffb7c58f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ffb7c5a38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559ffb7c5af8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x559ffb7c5bf8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x559ffb7c5d78 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559ffb7c5cb8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x559ffb7c6538 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559ffb7c5e30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x559ffb7c6498 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x559ffb7c6398 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x559ffb7c6618 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ffb7c6768 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559ffb7c66d8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ffb7c6820 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x559ffb7c6a68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb7c68e0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559ffb7c6958 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559ffb7c6bf8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x559ffb7c6b38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559ffb7c6e08 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x559ffb7c6cc0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559ffb7c6d38 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559ffb7c6ec8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x559ffb7c7128 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x559ffb7c7030 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x559ffb7c71f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x559ffb7c71f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb848778 prev 0x559ffb6f8688 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ffb848870 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x559ffb848900 <col:22, col:28> col:22 public
|-EnumDecl 0x559ffb848928 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x559ffb848a48 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848a28 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x559ffb848a10 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559ffb8489f0 <col:14> 'int' 999
| |-EnumConstantDecl 0x559ffb848af0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848ad0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x559ffb848ab8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559ffb848a98 <col:14> 'int' 1
| |-EnumConstantDecl 0x559ffb848b80 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848b60 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x559ffb848b40 <col:17> 'int' 0
| |-EnumConstantDecl 0x559ffb848c10 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848bf0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x559ffb848bd0 <col:13> 'int' 1
| |-EnumConstantDecl 0x559ffb848ca0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848c80 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x559ffb848c60 <col:16> 'int' 2
| |-EnumConstantDecl 0x559ffb848d30 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848d10 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x559ffb848cf0 <col:13> 'int' 3
| |-EnumConstantDecl 0x559ffb848dc0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848da0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x559ffb848d80 <col:15> 'int' 4
| |-EnumConstantDecl 0x559ffb848e50 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848e30 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x559ffb848e10 <col:14> 'int' 5
| |-EnumConstantDecl 0x559ffb848ee0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x559ffb848ec0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x559ffb848ea0 <col:12> 'int' 6
| `-EnumConstantDecl 0x559ffb848f70 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x559ffb848f50 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x559ffb848f30 <col:13> 'int' 7
|-VarDecl 0x559ffb848fe0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x559ffb849068 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x559ffb8490f0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x559ffb849178 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x559ffb849200 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x559ffb849288 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x559ffb849310 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x559ffb849398 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x559ffb849420 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x559ffb8494a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x559ffb849530 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x559ffb849630 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x559ffb84e938 '_nerrors' 'int'
| | `-IntegerLiteral 0x559ffb84f0c8 <line:128:13> 'int' 0
| `-CompoundStmt 0x559ffb84f138 <col:16, line:129:5>
|-CXXDestructorDecl 0x559ffb849720 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x559ffb84f148 <col:29, line:132:5>
|-CXXMethodDecl 0x559ffb8498d8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x559ffb849810 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb8499a0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559ffb849a88 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559ffb84f1a0 <col:44, line:161:5>
|   `-ReturnStmt 0x559ffb84f190 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x559ffb84f178 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb84f158 <col:9> 'ErrorHandler *' lvalue Var 0x559ffb84e998 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb849bc8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x559ffb849b38 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559ffb849c90 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559ffb84f200 <col:43, line:173:5>
|   `-ReturnStmt 0x559ffb84f1f0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x559ffb84f1d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb84f1b8 <col:9> 'ErrorHandler *' lvalue Var 0x559ffb84ea10 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x559ffb849d48 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x559ffb849dc8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x559ffb849ed8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x559ffb849e48 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84a028 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x559ffb849f98 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84a180 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x559ffb84a0e8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84a2d8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x559ffb84a240 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84a430 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x559ffb84a398 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84a640 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ffb84a4e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x559ffb84a568 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84a818 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ffb84a700 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x559ffb84a780 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84aa38 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ffb84a8d8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x559ffb84a958 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84ac18 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ffb84aaf8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559ffb84ab78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84adf8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559ffb84acd8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559ffb84ad58 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84af80 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x559ffb84aeb8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x559ffb84b150 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x559ffb84b038 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559ffb84b0b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x559ffb84f458 <col:57, line:234:5>
|   `-ReturnStmt 0x559ffb84f448 <line:233:2, col:41>
|     `-ExprWithCleanups 0x559ffb84f430 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559ffb84f3d8 <col:9, col:41> 'int'
|         |-MemberExpr 0x559ffb84f3a8 <col:9> '<bound member function type>' ->xmessage 0x559ffb84af80
|         | `-CXXThisExpr 0x559ffb84f398 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x559ffb84f418 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559ffb84f400 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559ffb84f378 <col:18, col:40> 'String' (CXXTemporary 0x559ffb84f378)
|               `-CallExpr 0x559ffb84f340 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x559ffb84f328 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x559ffb84f2a0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x559ffb84d148 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x559ffb84f2c0 <col:31> 'const String' lvalue ParmVar 0x559ffb84b0b0 'str' 'const String &'
|                 `-DeclRefExpr 0x559ffb84f2e0 <col:36> 'const String' lvalue ParmVar 0x559ffb84b038 'anno' 'const String &'
|-CXXMethodDecl 0x559ffb84b430 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559ffb84b210 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559ffb84b290 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x559ffb84b308 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559ffb84f6e8 <col:68, line:243:5>
|   `-ReturnStmt 0x559ffb84f6d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x559ffb84f6c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559ffb84f660 <col:9, col:41> 'int'
|         |-MemberExpr 0x559ffb84f630 <col:9> '<bound member function type>' ->xmessage 0x559ffb84b150
|         | `-CXXThisExpr 0x559ffb84f620 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559ffb84f4f8 <col:18> 'const String' lvalue ParmVar 0x559ffb84b210 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559ffb84f6a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559ffb84f690 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559ffb84f600 <col:24, col:40> 'String' (CXXTemporary 0x559ffb84f600)
|               `-CXXMemberCallExpr 0x559ffb84f598 <col:24, col:40> 'String'
|                 |-MemberExpr 0x559ffb84f528 <col:24> '<bound member function type>' ->vformat 0x559ffb84c610
|                 | `-CXXThisExpr 0x559ffb84f518 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559ffb84f5c8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559ffb84f558 <col:32> 'const char *' lvalue ParmVar 0x559ffb84b290 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559ffb84f5e0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559ffb84f578 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559ffb84b308 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ffb84b6d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x559ffb84b4f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559ffb84b570 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559ffb84b5e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x559ffb84fa28 <col:23, line:254:5>
|   `-ReturnStmt 0x559ffb84fa18 <line:253:2, col:71>
|     `-ExprWithCleanups 0x559ffb84fa00 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x559ffb84f9a0 <col:9, col:71> 'int'
|         |-MemberExpr 0x559ffb84f970 <col:9> '<bound member function type>' ->xmessage 0x559ffb84b150
|         | `-CXXThisExpr 0x559ffb84f960 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x559ffb84f9e8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x559ffb84f9d0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x559ffb84f920 <col:18, col:65> 'String' (CXXTemporary 0x559ffb84f920)
|         |     `-CallExpr 0x559ffb84f8b8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x559ffb84f8a0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x559ffb84f788 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x559ffb84d148 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x559ffb84f7a8 <col:31> 'const String' lvalue ParmVar 0x559ffb84b570 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x559ffb84f900 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x559ffb84f8e8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x559ffb84f880 <col:37, col:64> 'String' (CXXTemporary 0x559ffb84f880)
|         |             `-CallExpr 0x559ffb84f850 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x559ffb84f838 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x559ffb84f7c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x559ffb84d798 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x559ffb84f7e8 <col:56> 'const String' lvalue ParmVar 0x559ffb84b4f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x559ffb84f940 <col:68> 'const String' lvalue ParmVar 0x559ffb84b5e8 'str' 'const String &'
|-CXXMethodDecl 0x559ffb84ba50 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559ffb84b798 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559ffb84b810 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559ffb84b890 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x559ffb84b908 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559ffb84fce0 <col:34, line:267:5>
|   `-ReturnStmt 0x559ffb84fcd0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x559ffb84fcb8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x559ffb84fc50 <col:9, col:51> 'int'
|         |-MemberExpr 0x559ffb84fc20 <col:9> '<bound member function type>' ->xmessage 0x559ffb84b6d0
|         | `-CXXThisExpr 0x559ffb84fc10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559ffb84fac8 <col:18> 'const String' lvalue ParmVar 0x559ffb84b798 'landmark' 'const String &'
|         |-DeclRefExpr 0x559ffb84fae8 <col:28> 'const String' lvalue ParmVar 0x559ffb84b810 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559ffb84fca0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x559ffb84fc88 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559ffb84fbf0 <col:34, col:50> 'String' (CXXTemporary 0x559ffb84fbf0)
|               `-CXXMemberCallExpr 0x559ffb84fb88 <col:34, col:50> 'String'
|                 |-MemberExpr 0x559ffb84fb18 <col:34> '<bound member function type>' ->vformat 0x559ffb84c610
|                 | `-CXXThisExpr 0x559ffb84fb08 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559ffb84fbb8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559ffb84fb48 <col:42> 'const char *' lvalue ParmVar 0x559ffb84b890 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559ffb84fbd0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559ffb84fb68 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559ffb84b908 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ffb84bb60 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x559ffb84fd60 <col:25, line:288:5>
|   `-ReturnStmt 0x559ffb84fd50 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x559ffb84fd38 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x559ffb84fd08 <col:9> 'const int' lvalue ->_nerrors 0x559ffb84e938
|         `-CXXThisExpr 0x559ffb84fcf8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x559ffb84bd70 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x559ffb84bc18 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x559ffb84bc98 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84c058 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559ffb84be38 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x559ffb84beb8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x559ffb84bf30 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ffb84c1f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x559ffb84c128 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84c438 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559ffb84c2b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x559ffb84c328 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559ffb84ffc0 <col:58, line:357:5>
|   `-ReturnStmt 0x559ffb84ffb0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x559ffb84ff98 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x559ffb84ff68 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559ffb84ff50 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x559ffb84ff30 <col:9, col:29> 'String' (CXXTemporary 0x559ffb84ff30)
|             `-CallExpr 0x559ffb84fec0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x559ffb84fea8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559ffb84fe28 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x559ffb84c058 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x559ffb84fdc8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x559ffb84fef8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x559ffb84fde8 <col:21> 'const char *' lvalue ParmVar 0x559ffb84c2b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x559ffb84ff10 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x559ffb84fe08 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559ffb84c328 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ffb84c610 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x559ffb84c500 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x559ffb84c578 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559ffb84c768 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x559ffb84c6d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x559ffb84c8b0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x559ffb84c820 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x559ffb84cb50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x559ffb84c968 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x559ffb84c9e8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x559ffb84ca60 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x559ffb84ccb0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x559ffb84cc20 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x559ffb8500d8 <col:37, line:441:5>
|   `-IfStmt 0x559ffb8500c0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x559ffb850048 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x559ffb850018 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x559ffb84ffd8 <col:6> 'int' lvalue ParmVar 0x559ffb84cc20 'level' 'int'
|     | `-ImplicitCastExpr 0x559ffb850030 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x559ffb84fff8 <col:15> 'ErrorHandler::Level' EnumConstant 0x559ffb848d30 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x559ffb8500a8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x559ffb850078 <col:8> 'int' lvalue ->_nerrors 0x559ffb84e938
|         `-CXXThisExpr 0x559ffb850068 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x559ffb84cd78 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x559ffb850170 <col:26, line:448:5>
|   `-BinaryOperator 0x559ffb850150 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x559ffb850100 <col:2> 'int' lvalue ->_nerrors 0x559ffb84e938
|     | `-CXXThisExpr 0x559ffb8500f0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x559ffb850130 <col:13> 'int' 0
|-CXXMethodDecl 0x559ffb84cf40 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x559ffb84ce30 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x559ffb84cea8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x559ffb84d148 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x559ffb84d000 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x559ffb84d078 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x559ffb84d3f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x559ffb84d208 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x559ffb84d288 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x559ffb84d308 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x559ffb84d4b0 <col:59> 0 0
|-CXXMethodDecl 0x559ffb84d648 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x559ffb84d528 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x559ffb84d5a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x559ffb8507e0 <col:70, line:534:5>
|   |-DeclStmt 0x559ffb8502e0 <line:528:2, col:20>
|   | |-VarDecl 0x559ffb850198 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x559ffb850200 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x559ffb850238 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x559ffb8502a0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x559ffb8503b0 <line:529:2, col:23>
|   | `-VarDecl 0x559ffb850310 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x559ffb850398 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559ffb850378 <col:18> 'const char *' lvalue ParmVar 0x559ffb84d528 'begin' 'const char *'
|   |-DoStmt 0x559ffb850778 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x559ffb8506a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x559ffb850690 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x559ffb850670 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x559ffb8503c8 <col:6> 'const char *' lvalue Var 0x559ffb850310 'x' 'const char *'
|   | |     `-CallExpr 0x559ffb8505c0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x559ffb8505a8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x559ffb850560 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x559ffb84ee10 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x559ffb850628 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x559ffb850610 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x559ffb850480 <col:20, col:27> 'String' (CXXTemporary 0x559ffb850480)
|   | |       |     `-CXXTemporaryObjectExpr 0x559ffb850448 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x559ffb850640 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x559ffb8504a0 <col:30> 'const char *' lvalue Var 0x559ffb850310 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x559ffb850658 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x559ffb8504c0 <col:33> 'const char *' lvalue ParmVar 0x559ffb84d5a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x559ffb850500 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x559ffb8504e0 <col:39> 'String' lvalue Var 0x559ffb850198 'name' 'String'
|   | |       |-UnaryOperator 0x559ffb850538 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x559ffb850518 <col:46> 'String' lvalue Var 0x559ffb850238 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x559ffb850550 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x559ffb850760 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x559ffb850748 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x559ffb850728 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x559ffb8506f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|   |         `-ImplicitCastExpr 0x559ffb8506e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x559ffb8506c0 <col:11> 'String' lvalue Var 0x559ffb850198 'name' 'String'
|   `-ReturnStmt 0x559ffb8507d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x559ffb8507b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb850798 <col:9> 'const char *' lvalue Var 0x559ffb850310 'x' 'const char *'
|-CXXMethodDecl 0x559ffb84d798 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x559ffb84d708 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x559ffb850de8 <col:55, line:550:5>
|   `-IfStmt 0x559ffb850dc0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x559ffb850a20 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x559ffb850a08 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ffb8509f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ffb8509d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ffb8509a0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|     | |       `-DeclRefExpr 0x559ffb850840 <col:6> 'const String' lvalue ParmVar 0x559ffb84d708 'x' 'const String &'
|     | `-BinaryOperator 0x559ffb850980 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x559ffb850950 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x559ffb850900 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x559ffb8508e8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x559ffb8508a0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x559ffb55f0a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x559ffb850860 <col:11> 'const String' lvalue ParmVar 0x559ffb84d708 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x559ffb850880 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x559ffb850968 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x559ffb850938 <col:19> 'char' 123
|     |-ReturnStmt 0x559ffb850a90 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x559ffb850a60 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x559ffb850a40 <col:13> 'const String' lvalue ParmVar 0x559ffb84d708 'x' 'const String &'
|     `-IfStmt 0x559ffb850d98 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x559ffb850b28 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ffb850b10 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ffb850af0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ffb850ac0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |       `-DeclRefExpr 0x559ffb850aa0 <col:11> 'const String' lvalue ParmVar 0x559ffb84d708 'x' 'const String &'
|       |-ReturnStmt 0x559ffb850cb0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x559ffb850c98 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x559ffb850c68 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x559ffb850c50 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x559ffb850c30 <col:13, col:29> 'String' (CXXTemporary 0x559ffb850c30)
|       |         `-CallExpr 0x559ffb850be0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x559ffb850bc8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x559ffb850b40 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x559ffb84cf40 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x559ffb850c10 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x559ffb850b60 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x559ffb850b80 <col:28> 'const String' lvalue ParmVar 0x559ffb84d708 'x' 'const String &'
|       `-ReturnStmt 0x559ffb850d88 <line:549:6, col:20>
|         `-ExprWithCleanups 0x559ffb850d70 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x559ffb850d40 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x559ffb850d28 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x559ffb850d08 <col:13, col:20> 'String' (CXXTemporary 0x559ffb850d08)
|                 `-CXXTemporaryObjectExpr 0x559ffb850cd0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x559ffb84d960 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x559ffb84d850 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x559ffb84d8c8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ffb84f0b8 <col:71> 'bool' false
|-CXXRecordDecl 0x559ffb84da10 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x559ffb84dd08 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x559ffb84dca0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x559ffb84dc40 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x559ffb84dc00 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x559ffb542100 'String'
|       | `-CXXRecord 0x559ffb542070 'String'
|       |-BuiltinType 0x559ffb216580 'int'
|       `-DecayedType 0x559ffb6f96d0 '__va_list_tag *' sugar
|         |-TypedefType 0x559ffb6f96a0 'va_list' sugar
|         | |-Typedef 0x559ffb4341c0 'va_list'
|         | `-TypedefType 0x559ffb434170 '__gnuc_va_list' sugar
|         |   |-Typedef 0x559ffb36bb78 '__gnuc_va_list'
|         |   `-TypedefType 0x559ffb36bae0 '__builtin_va_list' sugar
|         |     |-Typedef 0x559ffb257d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x559ffb257ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x559ffb2172d0 '__va_list_tag'
|         |         `-CXXRecord 0x559ffb217238 '__va_list_tag'
|         `-PointerType 0x559ffb439a60 '__va_list_tag *'
|           `-RecordType 0x559ffb2172d0 '__va_list_tag'
|             `-CXXRecord 0x559ffb217238 '__va_list_tag'
|-EnumDecl 0x559ffb84dd60 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x559ffb84de60 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e3e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84de40 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x559ffb84de20 <col:16> 'int' 1
| |-EnumConstantDecl 0x559ffb84df10 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e3f8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84ded0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x559ffb84deb0 <col:21> 'int' 2
| |-EnumConstantDecl 0x559ffb84dfa0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e410 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84df80 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x559ffb84df60 <col:22> 'int' 4
| |-EnumConstantDecl 0x559ffb84e030 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e428 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84e010 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x559ffb84dff0 <col:17> 'int' 8
| |-EnumConstantDecl 0x559ffb84e0c0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e440 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84e0a0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x559ffb84e080 <col:22> 'int' 16
| |-EnumConstantDecl 0x559ffb84e150 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e458 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84e130 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x559ffb84e110 <col:19> 'int' 32
| |-EnumConstantDecl 0x559ffb84e1e0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e470 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84e1c0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x559ffb84e1a0 <col:17> 'int' 64
| |-EnumConstantDecl 0x559ffb84e270 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84e250 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x559ffb84e230 <col:14> 'int' 128
| |-EnumConstantDecl 0x559ffb84e300 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559ffb84e4a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb84e2e0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x559ffb84e2c0 <col:16> 'int' 256
| `-EnumConstantDecl 0x559ffb84e390 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x559ffb84e4b8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb84e370 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x559ffb84e350 <col:12> 'int' 1024
|-CXXMethodDecl 0x559ffb84e6c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x559ffb84e4e0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x559ffb84e580 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x559ffb84e850 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x559ffb84e788 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x559ffb84e8f8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x559ffb84e938 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x559ffb84e998 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x559ffb84ea10 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x559ffb84ee10 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x559ffb84ea88 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x559ffb84eb08 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x559ffb84eb88 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x559ffb84ec00 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x559ffb84ec78 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x559ffb84ecf0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x559ffb84ef38 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x559ffb84ef38
| `-ParmVarDecl 0x559ffb84f048 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x559ffb851148 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x559ffb851148
  `-ParmVarDecl 0x559ffb851258 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb6f8718 prev 0x559ffb73d358 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb6f8810 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x559ffb6f88a0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x559ffb6f89d8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x559ffb6f88d8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559ffb6f9e00 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb6f9de0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559ffb6f9978 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559ffb6f9e90 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ffb6f9e50 <col:17> 'ErrorHandler *' lvalue ParmVar 0x559ffb6f88d8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559ffb6f99e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559ffb6f9f10 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb6f9ed0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559ffb6f9a40 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559ffb6f9f50 <col:54> 'bool' false
| `-CompoundStmt 0x559ffb6fa058 <col:61, line:38:5>
|   `-BinaryOperator 0x559ffb6fa038 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x559ffb6f9fd0 <col:9> 'const Element *' lvalue ->_context 0x559ffb6f9918
|     | `-CXXThisExpr 0x559ffb6f9fc0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x559ffb6fa020 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x559ffb6fa000 <col:20> 'int' 0
|-CXXConstructorDecl 0x559ffb6f8be8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb6f8a98 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x559ffb6f8b10 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559ffb6f9e38 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb6f9e18 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x559ffb6f9918 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x559ffb6fa0b0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ffb6fa070 <col:20> 'const Element *' lvalue ParmVar 0x559ffb6f8a98 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x559ffb6f9978 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559ffb6fa130 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559ffb6fa0f0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x559ffb6f8b10 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559ffb6f99e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559ffb6fa1b0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559ffb6fa170 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x559ffb6f9a40 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559ffb6fa1f0 <col:73> 'bool' false
| `-CompoundStmt 0x559ffb6fa268 <col:80, line:46:5>
|-CXXMethodDecl 0x559ffb6f8d18 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x559ffb6fa2e0 <col:36, line:51:5>
|   `-ReturnStmt 0x559ffb6fa2d0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x559ffb6fa2b8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x559ffb6fa288 <col:16> 'const Element *const' lvalue ->_context 0x559ffb6f9918
|         `-CXXThisExpr 0x559ffb6fa278 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559ffb6f8e08 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x559ffb6fa360 <col:32, line:57:5>
|   `-ReturnStmt 0x559ffb6fa350 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x559ffb6fa338 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x559ffb6fa308 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x559ffb6f9978
|         `-CXXThisExpr 0x559ffb6fa2f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559ffb6f8ec8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x559ffb6f9050 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x559ffb6f8f80 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559ffb6f91a0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x559ffb6f9110 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559ffb6f92f0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x559ffb6f9260 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559ffb6f94f8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x559ffb6f93a8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x559ffb6f9420 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x559ffb6f9828 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x559ffb6f95b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x559ffb6f9638 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x559ffb6f9700 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x559ffb6f98e0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x559ffb6f9918 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x559ffb6f9978 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x559ffb6f99e0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x559ffb6f9a40 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x559ffb6f9a90 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x559ffb6f9a90
| `-ParmVarDecl 0x559ffb6f9ba8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x559ffb6f9c48 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x559ffb6f9c48
| `-ParmVarDecl 0x559ffb6f9d58 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x559ffb859a00 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ffb805040 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x559ffb805218 prev 0x559ffb805040 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x559ffb8052a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x559ffb8052d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb806ea0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x559ffb806e50 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x559ffb805780 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x559ffb805680 'type'
|     `-TemplateSpecializationType 0x559ffb805610 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x559ffb8054f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x559ffb8054d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x559ffb8054b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x559ffb8055f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x559ffb805510 'char_array'
|-TypedefDecl 0x559ffb806f58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x559ffb806f20 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x559ffb806f00 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x559ffb806ea0 'type'
|     `-ElaboratedType 0x559ffb806e50 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x559ffb805780 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x559ffb805680 'type'
|         `-TemplateSpecializationType 0x559ffb805610 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x559ffb8054f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x559ffb8054d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x559ffb8054b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x559ffb8055f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x559ffb805510 'char_array'
|-CXXMethodDecl 0x559ffb8070d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x559ffb806fe8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x559ffb8071c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x559ffb8072a8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x559ffb807578 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x559ffb807480 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x559ffb8077b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ffb807630 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ffb8076a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb807988 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ffb807878 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ffb8078f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb807ae8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x559ffb807bb8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x559ffb807e08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ffb807c78 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x559ffb807cf0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb808068 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x559ffb807ed8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x559ffb807f50 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb808228 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x559ffb808138 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb8083e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x559ffb8082f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb80f800 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ffb80f8b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559ffb80fae8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559ffb80f960 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559ffb80f9d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559ffb80fd88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x559ffb80fc90 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x559ffb80fe50 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x559ffb80fea0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559ffb80fef0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ffb803a48 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x559ffb803c58 prev 0x559ffb803a48 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x559ffb804fb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x559ffb804f60 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x559ffb804f40 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x559ffb804df0 'type'
|     `-SubstTemplateTypeParmType 0x559ffb804c10 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x559ffb4dbf50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb4dbef8 'T'
|       `-RecordType 0x559ffb804760 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x559ffb804678 'sized_array_memory'
|-FieldDecl 0x559ffb80ff40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x559ffb80ff90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559ffb80ffc8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|   |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x559ffb513be8 'T'
|   `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810058 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x559ffb810020 'int &'
|   `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|     |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ffb513be8 'T'
|     `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810118 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x559ffb8100e0 'const int &'
|   `-QualType 0x559ffb803cf1 'const int' const
|     `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb8101a8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x559ffb810170 'int *'
|   `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|     |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ffb513be8 'T'
|     `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810238 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x559ffb810200 'const int *'
|   `-QualType 0x559ffb803cf1 'const int' const
|     `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810e20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x559ffb810dd0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x559ffb810db0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x559ffb810d40 'type'
|     `-SubstTemplateTypeParmType 0x559ffb810b00 'int' sugar
|       |-TemplateTypeParmType 0x559ffb4e6d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb4e6d00 'T'
|       `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810e88 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x559ffb8100e0 'const int &'
|   `-QualType 0x559ffb803cf1 'const int' const
|     `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810ee0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810f48 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x559ffb810170 'int *'
|   `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|     |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559ffb513be8 'T'
|     `-BuiltinType 0x559ffb216580 'int'
|-TypedefDecl 0x559ffb810fb0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x559ffb810200 'const int *'
|   `-QualType 0x559ffb803cf1 'const int' const
|     `-SubstTemplateTypeParmType 0x559ffb803cf0 'int' sugar
|       |-TemplateTypeParmType 0x559ffb513c40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559ffb513be8 'T'
|       `-BuiltinType 0x559ffb216580 'int'
|-EnumDecl 0x559ffb811008 <line:134:5> col:5
| `-EnumConstantDecl 0x559ffb811100 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559ffb8110e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x559ffb5152c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x559ffb5152a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x559ffb515280 <col:40> 'int' 1
|-CXXConstructorDecl 0x559ffb811188 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559ffb8113d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb811240 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ffb8112e0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x559ffb811698 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x559ffb811580 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x559ffb811958 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x559ffb811840 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x559ffb811ca0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x559ffb811b80 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x559ffb811fb0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x559ffb811e90 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x559ffb8122a0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb8120e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ffb812160 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ffb8123c8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x559ffb8124a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb812500 <col:30> Inherited
|-CXXMethodDecl 0x559ffb812548 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x559ffb8125f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb812650 <col:30> Inherited
|-CXXMethodDecl 0x559ffb812718 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ffb8127c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb812820 <col:30> Inherited
|-CXXMethodDecl 0x559ffb812868 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ffb812918 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb812970 <col:30> Inherited
|-CXXMethodDecl 0x559ffb8129b8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ffb812a68 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb812ac0 <col:30> Inherited
|-CXXMethodDecl 0x559ffb812b08 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559ffb812bb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559ffb812c10 <col:30> Inherited
|-CXXMethodDecl 0x559ffb812c38 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ffb812ce8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559ffb812d98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x559ffb812f58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb812e48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559ffb812ec0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ffb8130a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559ffb813018 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb813258 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x559ffb813160 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ffb813310 <col:20>
| `-OptimizeNoneAttr 0x559ffb813368 <col:30>
|-CXXMethodDecl 0x559ffb813488 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x559ffb813390 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559ffb813540 <col:20>
| `-OptimizeNoneAttr 0x559ffb813598 <col:30>
|-CXXMethodDecl 0x559ffb813650 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ffb8135c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb813798 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ffb813708 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb8138c8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x559ffb8139f8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x559ffb813ac8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x559ffb813b98 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x559ffb813cd8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x559ffb813c48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb813e20 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559ffb813d90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559ffb813f68 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x559ffb813ed8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ffb814020 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559ffb814120 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x559ffb814090 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559ffb8141d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559ffb814298 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x559ffb814398 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x559ffb814518 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x559ffb814458 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x559ffb814cd8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559ffb8145d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x559ffb814c38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x559ffb814b38 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x559ffb814db8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559ffb814f08 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x559ffb814e78 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ffb814fc0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x559ffb815208 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559ffb815080 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x559ffb8150f8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559ffb8153c8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x559ffb8152d8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x559ffb815618 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x559ffb815490 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x559ffb815508 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x559ffb8156d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x559ffb815938 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x559ffb815840 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x559ffb815a08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb801bb8 prev 0x559ffb7e3568 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ffb801cb0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x559ffb801da0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x559ffb827760 <col:16, line:828:9>
|-CXXDestructorDecl 0x559ffb801e90 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x559ffb827770 <col:25, line:830:9>
|-CXXMethodDecl 0x559ffb801f90 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x559ffb802040 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x559ffb8020e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x559ffb8020e8
| `-ParmVarDecl 0x559ffb8021f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x559ffb8029b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x559ffb8029b8
  `-ParmVarDecl 0x559ffb802ac8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb7e3378 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x559ffb7e34d8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x559ffb7e3568 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x559ffb7e3620 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x559ffb7e3728 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x559ffb7e3658 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ffb816fc8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ffb816fa8 <col:31> 'int' 0
|-CXXConstructorDecl 0x559ffb7e3a48 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb7e38c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x559ffb7e3938 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ffb817000 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ffb816fe0 <col:59> 'int' 0
|-CXXConstructorDecl 0x559ffb7e3c20 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb7e3b10 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x559ffb7e3b88 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ffb817038 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ffb817018 <col:55> 'int' 0
|-CXXConstructorDecl 0x559ffb7e3fd8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559ffb7e3dc0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x559ffb7e3e38 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x559ffb7e3eb0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559ffb817070 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559ffb817050 <col:31> 'int' 0
|-CXXConstructorDecl 0x559ffb7e4198 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x559ffb7e40d8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x559ffb7e4290 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x559ffb7e4478 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x559ffb7e4380 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x559ffb7e4568 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x559ffb817420 <col:24, line:291:5>
|   `-ReturnStmt 0x559ffb817410 <line:290:9, col:79>
|     `-BinaryOperator 0x559ffb8173f0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x559ffb8172c8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x559ffb817220 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x559ffb817200 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x559ffb8170f8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x559ffb8170e0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x559ffb8170c8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x559ffb817098 <col:18> 'Vector<String> *const' lvalue ->_conf 0x559ffb8039e0
|       | |   |       `-CXXThisExpr 0x559ffb817088 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x559ffb8171e8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x559ffb8171d0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x559ffb817198 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x559ffb817168 <col:28, col:35> '<bound member function type>' ->size 0x559ffb7c44c8
|       | |           `-ImplicitCastExpr 0x559ffb8171b8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x559ffb817150 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x559ffb817120 <col:28> 'Vector<String> *const' lvalue ->_conf 0x559ffb8039e0
|       | |                 `-CXXThisExpr 0x559ffb817110 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x559ffb8172b0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x559ffb817298 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x559ffb817280 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x559ffb817250 <col:47> 'Args::Slot *const' lvalue ->_slots 0x559ffb815b50
|       |         `-CXXThisExpr 0x559ffb817240 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x559ffb8173d0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x559ffb8173b8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x559ffb8173a0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x559ffb817360 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x559ffb817348 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x559ffb8172f8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x559ffb815c00
|         |     |   `-CXXThisExpr 0x559ffb8172e8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x559ffb817328 <col:73> 'int' 0
|         `-IntegerLiteral 0x559ffb817380 <col:79> 'int' 0
|-CXXMethodDecl 0x559ffb7e4628 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x559ffb8175f8 <col:32, line:296:5>
|   `-ReturnStmt 0x559ffb8175e8 <line:295:9, col:49>
|     `-BinaryOperator 0x559ffb8175c8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x559ffb8174a8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x559ffb817490 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x559ffb817478 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x559ffb817448 <col:17> 'Args::Slot *const' lvalue ->_slots 0x559ffb815b50
|       |       `-CXXThisExpr 0x559ffb817438 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x559ffb8175a8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x559ffb817590 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x559ffb817578 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x559ffb817538 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x559ffb817520 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x559ffb8174d0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x559ffb815c00
|         |     |   `-CXXThisExpr 0x559ffb8174c0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x559ffb817500 <col:43> 'int' 0
|         `-IntegerLiteral 0x559ffb817558 <col:49> 'int' 0
|-CXXMethodDecl 0x559ffb7e4718 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x559ffb819170 <col:19, line:306:5>
|   |-IfStmt 0x559ffb817728 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x559ffb817668 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x559ffb817650 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x559ffb817620 <col:13> 'Vector<String> *' lvalue ->_conf 0x559ffb8039e0
|   | |     `-CXXThisExpr 0x559ffb817610 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x559ffb817708 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x559ffb8176d8 <col:13, col:20> '<bound member function type>' ->clear 0x559ffb7c6ec8
|   |     `-ImplicitCastExpr 0x559ffb8176c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x559ffb817690 <col:13> 'Vector<String> *' lvalue ->_conf 0x559ffb8039e0
|   |         `-CXXThisExpr 0x559ffb817680 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x559ffb8177b0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x559ffb817780 <col:9, col:16> '<bound member function type>' .clear 0x559ffb8156d8
|   |   `-MemberExpr 0x559ffb817750 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x559ffb815af0
|   |     `-CXXThisExpr 0x559ffb817740 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x559ffb819160 <line:305:9, col:17>
|     `-UnaryOperator 0x559ffb8177e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb8177d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ffb7e4998 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x559ffb7e48a0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x559ffb7e4b18 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x559ffb7e4a50 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x559ffb7e4e98 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x559ffb7e4bc0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x559ffb7e4df8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x559ffb7e4c68 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x559ffb7e4ce0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x559ffb819490 <col:67, line:327:5>
|     |-WhileStmt 0x559ffb819440 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x559ffb819258 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x559ffb8191d8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x559ffb735828 0x559ffb57ee08 0x559ffb57eae0 0x559ffb56f2b0 0x559ffb56ef60 0x559ffb56e850 0x559ffb5411c0 0x559ffb4ce690
|     | | |-DeclRefExpr 0x559ffb819198 <col:16> 'Iter' lvalue ParmVar 0x559ffb7e4c68 'begin' 'Iter'
|     | | `-DeclRefExpr 0x559ffb8191b8 <col:25> 'Iter' lvalue ParmVar 0x559ffb7e4ce0 'end' 'Iter'
|     | `-CompoundStmt 0x559ffb819420 <col:30, line:325:9>
|     |   |-CallExpr 0x559ffb8193c0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x559ffb8192a0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x559ffb819390 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x559ffb819320 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|     |   |   `-DeclRefExpr 0x559ffb819300 <col:24> 'Iter' lvalue ParmVar 0x559ffb7e4c68 'begin' 'Iter'
|     |   `-UnaryOperator 0x559ffb819408 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x559ffb8193e8 <col:15> 'Iter' lvalue ParmVar 0x559ffb7e4c68 'begin' 'Iter'
|     `-ReturnStmt 0x559ffb819480 <line:326:9, col:17>
|       `-UnaryOperator 0x559ffb819468 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb819458 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ffb7e4fa0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x559ffb7e4f10 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x559ffb7e50e8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x559ffb7e5058 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x559ffb7e51b0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x559ffb819570 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x559ffb819510 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x559ffb8194c0 <col:9> '<bound member function type>' ->reset_from 0x559ffb815f78
|   | | `-CXXThisExpr 0x559ffb8194b0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x559ffb8194f0 <col:20> 'int' 0
|   `-ReturnStmt 0x559ffb819560 <line:352:9, col:17>
|     `-UnaryOperator 0x559ffb819548 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb819538 <col:17> 'Args *' this
|-VarDecl 0x559ffb7e5268 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ffb7e52d0 <col:38> 'int' 1
|-VarDecl 0x559ffb7e5360 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ffb7e53c8 <col:39> 'int' 2
|-VarDecl 0x559ffb7e5458 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ffb7e54c0 <col:39> 'int' 4
|-VarDecl 0x559ffb7e5550 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x559ffb7e55b8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x559ffb7e5938 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x559ffb7e5630 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7e5898 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x559ffb7e56e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e5788 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x559ffb8196c8 <col:43, line:371:5>
|     `-ReturnStmt 0x559ffb8196b8 <line:370:9, col:34>
|       `-CallExpr 0x559ffb819680 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb8195a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb819620 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e56e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb819640 <col:30> 'int' 0
|         `-DeclRefExpr 0x559ffb819660 <col:33> 'T' lvalue ParmVar 0x559ffb7e5788 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e5c68 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x559ffb7e59a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7e5bc8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x559ffb7e5a50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e5af8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x559ffb819818 <col:45, line:375:5>
|     `-ReturnStmt 0x559ffb819808 <line:374:9, col:42>
|       `-CallExpr 0x559ffb8197d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb8196f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb819770 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e5a50 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb819790 <col:30> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int'
|         `-DeclRefExpr 0x559ffb8197b0 <col:41> 'T' lvalue ParmVar 0x559ffb7e5af8 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e5f98 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x559ffb7e5cd0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7e5ef8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x559ffb7e5d80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e5e28 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x559ffb819968 <col:45, line:379:5>
|     `-ReturnStmt 0x559ffb819958 <line:378:9, col:43>
|       `-CallExpr 0x559ffb819920 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb819840 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb8198c0 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e5d80 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb8198e0 <col:30> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int'
|         `-DeclRefExpr 0x559ffb819900 <col:42> 'T' lvalue ParmVar 0x559ffb7e5e28 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e62c8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x559ffb7e6000 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x559ffb7e6228 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x559ffb7e60b0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559ffb7e6158 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x559ffb819b68 <col:46, line:383:5>
| |   `-ReturnStmt 0x559ffb819b58 <line:382:9, col:55>
| |     `-CallExpr 0x559ffb819b20 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559ffb819990 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559ffb819a10 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e60b0 'keyword' 'const char *'
| |       |-BinaryOperator 0x559ffb819ae0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x559ffb819a90 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x559ffb819a70 <col:30> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x559ffb819ac8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559ffb819aa8 <col:42> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x559ffb819b00 <col:54> 'T' lvalue ParmVar 0x559ffb7e6158 'x' 'T &'
| |-CXXMethodDecl 0x559ffb859e68 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x559ffb859c88 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x559ffb859d58 <col:40, col:43> col:43 x 'unsigned int &'
| `-CXXMethodDecl 0x559ffb85a2e8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x559ffb85a108 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x559ffb85a1d8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x559ffb7e66c8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x559ffb7e6330 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7e6628 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x559ffb7e63e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e6460 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7e6508 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x559ffb819ca8 <col:54, line:388:5>
|     |-CallExpr 0x559ffb819c30 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb819b80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559ffb819bc0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559ffb819bd0 <col:30> 'const char *' lvalue ParmVar 0x559ffb7e63e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ffb819bf0 <col:39> 'int' lvalue ParmVar 0x559ffb7e6460 'flags' 'int'
|     | `-DeclRefExpr 0x559ffb819c10 <col:46> 'T' lvalue ParmVar 0x559ffb7e6508 'x' 'T &'
|     `-ReturnStmt 0x559ffb819c98 <line:387:9, col:17>
|       `-UnaryOperator 0x559ffb819c80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb819c70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7e6b78 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x559ffb7e6738 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ffb7e67b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ffb7e6ad8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7e6878 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e6918 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7e69b8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ffb819e18 <col:74, line:403:5>
|     `-ReturnStmt 0x559ffb819e08 <line:402:9, col:56>
|       `-CallExpr 0x559ffb819dc8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb819cd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb819d48 <col:28> 'const char *' lvalue ParmVar 0x559ffb7e6878 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb819d68 <col:37> 'int' 0
|         |-DeclRefExpr 0x559ffb819d88 <col:40> 'T' lvalue ParmVar 0x559ffb7e6918 'x' 'T &'
|         `-DeclRefExpr 0x559ffb819da8 <col:43> 'const V' lvalue ParmVar 0x559ffb7e69b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ffb7e6fe8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559ffb7e6be8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ffb7e6c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ffb7e6f48 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7e6d28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e6dc8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7e6e68 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ffb819f80 <col:76, line:407:5>
|     `-ReturnStmt 0x559ffb819f70 <line:406:9, col:65>
|       `-CallExpr 0x559ffb819f30 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb819e40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb819eb0 <col:28> 'const char *' lvalue ParmVar 0x559ffb7e6d28 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb819ed0 <col:37> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int'
|         |-DeclRefExpr 0x559ffb819ef0 <col:49> 'T' lvalue ParmVar 0x559ffb7e6dc8 'x' 'T &'
|         `-DeclRefExpr 0x559ffb819f10 <col:52> 'const V' lvalue ParmVar 0x559ffb7e6e68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ffb7e7538 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x559ffb7e7058 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ffb7e70d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ffb7e7498 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7e7198 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e7218 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7e72b8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7e7358 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ffb81a0e8 <col:85, line:412:5>
|     |-CallExpr 0x559ffb81a068 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb819f98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x559ffb819fd8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x559ffb819fe8 <col:37> 'const char *' lvalue ParmVar 0x559ffb7e7198 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ffb81a008 <col:46> 'int' lvalue ParmVar 0x559ffb7e7218 'flags' 'int'
|     | |-DeclRefExpr 0x559ffb81a028 <col:53> 'T' lvalue ParmVar 0x559ffb7e72b8 'x' 'T &'
|     | `-DeclRefExpr 0x559ffb81a048 <col:56> 'const V' lvalue ParmVar 0x559ffb7e7358 'default_value' 'const V &'
|     `-ReturnStmt 0x559ffb81a0d8 <line:411:9, col:17>
|       `-UnaryOperator 0x559ffb81a0c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81a0b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7e79c8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x559ffb7e75b0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e7628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7e7928 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7e76e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e7760 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e7808 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81a268 <col:53, line:425:5>
|     `-ReturnStmt 0x559ffb81a258 <line:424:9, col:42>
|       `-CallExpr 0x559ffb81a218 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81a118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81a198 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e76e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81a1b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x559ffb81a1d8 <col:33> 'P' lvalue ParmVar 0x559ffb7e7760 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81a1f8 <col:41> 'T' lvalue ParmVar 0x559ffb7e7808 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e7e18 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x559ffb7e7a38 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e7ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7e7d78 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7e7b78 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e7bf0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e7c98 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81a3e0 <col:55, line:429:5>
|     `-ReturnStmt 0x559ffb81a3d0 <line:428:9, col:50>
|       `-CallExpr 0x559ffb81a390 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81a290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81a310 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e7b78 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81a330 <col:30> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int'
|         |-DeclRefExpr 0x559ffb81a350 <col:41> 'P' lvalue ParmVar 0x559ffb7e7bf0 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81a370 <col:49> 'T' lvalue ParmVar 0x559ffb7e7c98 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e8268 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x559ffb7e7e88 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e7f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7e81c8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7e7fc8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e8040 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e80e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81a558 <col:55, line:433:5>
|     `-ReturnStmt 0x559ffb81a548 <line:432:9, col:51>
|       `-CallExpr 0x559ffb81a508 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81a408 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81a488 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e7fc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81a4a8 <col:30> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int'
|         |-DeclRefExpr 0x559ffb81a4c8 <col:42> 'P' lvalue ParmVar 0x559ffb7e8040 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81a4e8 <col:50> 'T' lvalue ParmVar 0x559ffb7e80e8 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e86b8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x559ffb7e82d8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e8358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7e8618 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7e8418 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e8490 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e8538 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81a780 <col:56, line:437:5>
|     `-ReturnStmt 0x559ffb81a770 <line:436:9, col:63>
|       `-CallExpr 0x559ffb81a730 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81a580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81a600 <col:21> 'const char *' lvalue ParmVar 0x559ffb7e8418 'keyword' 'const char *'
|         |-BinaryOperator 0x559ffb81a6d0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x559ffb81a680 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559ffb81a660 <col:30> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559ffb81a6b8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559ffb81a698 <col:42> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x559ffb81a6f0 <col:54> 'P' lvalue ParmVar 0x559ffb7e8490 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81a710 <col:62> 'T' lvalue ParmVar 0x559ffb7e8538 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7e8be8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x559ffb7e8728 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e87a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7e8b48 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ffb7e8868 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e88e8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7e8960 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e8a08 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81a8e8 <col:64, line:442:5>
|     |-CallExpr 0x559ffb81a868 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81a798 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559ffb81a7d8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81a7e8 <col:30> 'const char *' lvalue ParmVar 0x559ffb7e8868 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ffb81a808 <col:39> 'int' lvalue ParmVar 0x559ffb7e88e8 'flags' 'int'
|     | |-DeclRefExpr 0x559ffb81a828 <col:46> 'P' lvalue ParmVar 0x559ffb7e8960 'parser' 'P'
|     | `-DeclRefExpr 0x559ffb81a848 <col:54> 'T' lvalue ParmVar 0x559ffb7e8a08 'x' 'T &'
|     `-ReturnStmt 0x559ffb81a8d8 <line:441:9, col:17>
|       `-UnaryOperator 0x559ffb81a8c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81a8b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7e91e8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x559ffb7e8c60 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e8cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559ffb7e8d58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ffb7e9148 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7e8e20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e8e98 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e8f38 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7e9008 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ffb81aa80 <col:84, line:458:5>
|     `-ReturnStmt 0x559ffb81aa70 <line:457:9, col:64>
|       `-CallExpr 0x559ffb81aa28 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81a918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81a988 <col:28> 'const char *' lvalue ParmVar 0x559ffb7e8e20 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81a9a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x559ffb81a9c8 <col:40> 'P' lvalue ParmVar 0x559ffb7e8e98 'parser' 'P'
|         |-DeclRefExpr 0x559ffb81a9e8 <col:48> 'T' lvalue ParmVar 0x559ffb7e8f38 'x' 'T &'
|         `-DeclRefExpr 0x559ffb81aa08 <col:51> 'const V' lvalue ParmVar 0x559ffb7e9008 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ffb7e9768 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559ffb7e9260 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e92d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559ffb7e9358 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ffb7e96c8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7e9420 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e9498 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e9538 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7e95d8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ffb81ac10 <col:86, line:462:5>
|     `-ReturnStmt 0x559ffb81ac00 <line:461:9, col:73>
|       `-CallExpr 0x559ffb81abb8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81aaa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81ab18 <col:28> 'const char *' lvalue ParmVar 0x559ffb7e9420 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81ab38 <col:37> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int'
|         |-DeclRefExpr 0x559ffb81ab58 <col:49> 'P' lvalue ParmVar 0x559ffb7e9498 'parser' 'P'
|         |-DeclRefExpr 0x559ffb81ab78 <col:57> 'T' lvalue ParmVar 0x559ffb7e9538 'x' 'T &'
|         `-DeclRefExpr 0x559ffb81ab98 <col:60> 'const V' lvalue ParmVar 0x559ffb7e95d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559ffb7e9dc8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x559ffb7e97e0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e9858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559ffb7e98d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ffb7e9d28 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7e99a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7e9a20 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7e9a98 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7e9b38 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7e9bd8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x559ffb81ada0 <col:95, line:467:5>
|     |-CallExpr 0x559ffb81ad18 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81ac28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x559ffb81ac68 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81ac78 <col:37> 'const char *' lvalue ParmVar 0x559ffb7e99a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ffb81ac98 <col:46> 'int' lvalue ParmVar 0x559ffb7e9a20 'flags' 'int'
|     | |-DeclRefExpr 0x559ffb81acb8 <col:53> 'P' lvalue ParmVar 0x559ffb7e9a98 'parser' 'P'
|     | |-DeclRefExpr 0x559ffb81acd8 <col:61> 'T' lvalue ParmVar 0x559ffb7e9b38 'x' 'T &'
|     | `-DeclRefExpr 0x559ffb81acf8 <col:64> 'const V' lvalue ParmVar 0x559ffb7e9bd8 'default_value' 'const V &'
|     `-ReturnStmt 0x559ffb81ad90 <line:466:9, col:17>
|       `-UnaryOperator 0x559ffb81ad78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81ad68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7ea3a8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x559ffb7e9e48 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7e9ec8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ffb7e9f48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ffb7ea308 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ffb7ea010 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7ea088 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7ea128 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ffb7ea1c8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ffb81af48 <col:63, line:481:5>
|     `-ReturnStmt 0x559ffb81af38 <line:480:9, col:47>
|       `-CallExpr 0x559ffb81aef0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81add0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81ae50 <col:21> 'const char *' lvalue ParmVar 0x559ffb7ea010 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81ae70 <col:30> 'int' 0
|         |-DeclRefExpr 0x559ffb81ae90 <col:33> 'P' lvalue ParmVar 0x559ffb7ea088 'parser' 'P'
|         |-DeclRefExpr 0x559ffb81aeb0 <col:41> 'T1' lvalue ParmVar 0x559ffb7ea128 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ffb81aed0 <col:45> 'T2' lvalue ParmVar 0x559ffb7ea1c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ffb7ea928 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x559ffb7ea420 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7ea498 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ffb7ea518 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ffb7ea888 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ffb7ea5e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7ea658 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7ea6f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ffb7ea798 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ffb81b0e8 <col:65, line:485:5>
|     `-ReturnStmt 0x559ffb81b0d8 <line:484:9, col:55>
|       `-CallExpr 0x559ffb81b090 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81af70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81aff0 <col:21> 'const char *' lvalue ParmVar 0x559ffb7ea5e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81b010 <col:30> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int'
|         |-DeclRefExpr 0x559ffb81b030 <col:41> 'P' lvalue ParmVar 0x559ffb7ea658 'parser' 'P'
|         |-DeclRefExpr 0x559ffb81b050 <col:49> 'T1' lvalue ParmVar 0x559ffb7ea6f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ffb81b070 <col:53> 'T2' lvalue ParmVar 0x559ffb7ea798 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ffb7eaea8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x559ffb7ea9a0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7eaa18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ffb7eaa98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ffb7eae08 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ffb7eab60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7eabd8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7eac78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ffb7ead18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ffb81b288 <col:65, line:489:5>
|     `-ReturnStmt 0x559ffb81b278 <line:488:9, col:56>
|       `-CallExpr 0x559ffb81b230 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81b110 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81b190 <col:21> 'const char *' lvalue ParmVar 0x559ffb7eab60 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81b1b0 <col:30> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int'
|         |-DeclRefExpr 0x559ffb81b1d0 <col:42> 'P' lvalue ParmVar 0x559ffb7eabd8 'parser' 'P'
|         |-DeclRefExpr 0x559ffb81b1f0 <col:50> 'T1' lvalue ParmVar 0x559ffb7eac78 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ffb81b210 <col:54> 'T2' lvalue ParmVar 0x559ffb7ead18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ffb7f0b98 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x559ffb7eaf20 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7eaf98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ffb7eb018 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ffb7f0af8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ffb7f0850 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f08c8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f0968 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ffb7f0a08 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ffb81b4d8 <col:66, line:493:5>
|     `-ReturnStmt 0x559ffb81b4c8 <line:492:9, col:68>
|       `-CallExpr 0x559ffb81b480 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81b2b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81b330 <col:21> 'const char *' lvalue ParmVar 0x559ffb7f0850 'keyword' 'const char *'
|         |-BinaryOperator 0x559ffb81b400 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x559ffb81b3b0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559ffb81b390 <col:30> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559ffb81b3e8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559ffb81b3c8 <col:42> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x559ffb81b420 <col:54> 'P' lvalue ParmVar 0x559ffb7f08c8 'parser' 'P'
|         |-DeclRefExpr 0x559ffb81b440 <col:62> 'T1' lvalue ParmVar 0x559ffb7f0968 'x1' 'T1 &'
|         `-DeclRefExpr 0x559ffb81b460 <col:66> 'T2' lvalue ParmVar 0x559ffb7f0a08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559ffb7f11f8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x559ffb7f0c10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f0c88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ffb7f0d08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ffb7f1158 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ffb7f0dd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f0e50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f0ec8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f0f68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559ffb7f1008 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x559ffb81b668 <col:74, line:498:5>
|     |-CallExpr 0x559ffb81b5e0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81b4f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559ffb81b530 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81b540 <col:30> 'const char *' lvalue ParmVar 0x559ffb7f0dd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ffb81b560 <col:39> 'int' lvalue ParmVar 0x559ffb7f0e50 'flags' 'int'
|     | |-DeclRefExpr 0x559ffb81b580 <col:46> 'P' lvalue ParmVar 0x559ffb7f0ec8 'parser' 'P'
|     | |-DeclRefExpr 0x559ffb81b5a0 <col:54> 'T1' lvalue ParmVar 0x559ffb7f0f68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x559ffb81b5c0 <col:58> 'T2' lvalue ParmVar 0x559ffb7f1008 'x2' 'T2 &'
|     `-ReturnStmt 0x559ffb81b658 <line:497:9, col:17>
|       `-UnaryOperator 0x559ffb81b640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81b630 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7f1558 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x559ffb7f1278 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f14b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ffb7f1330 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f13a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81b7b0 <col:52, line:509:5>
|     `-ReturnStmt 0x559ffb81b7a0 <line:508:9, col:44>
|       `-CallExpr 0x559ffb81b768 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81b698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81b708 <col:26> 'const char *' lvalue ParmVar 0x559ffb7f1330 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81b728 <col:35> 'int' 0
|         `-DeclRefExpr 0x559ffb81b748 <col:38> 'P' lvalue ParmVar 0x559ffb7f13a8 'parser' 'P'
|-FunctionTemplateDecl 0x559ffb7f1858 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x559ffb7f15c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f17b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ffb7f1670 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f16e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81b8f0 <col:54, line:513:5>
|     `-ReturnStmt 0x559ffb81b8e0 <line:512:9, col:52>
|       `-CallExpr 0x559ffb81b8a8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81b7d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81b848 <col:26> 'const char *' lvalue ParmVar 0x559ffb7f1670 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81b868 <col:35> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int'
|         `-DeclRefExpr 0x559ffb81b888 <col:46> 'P' lvalue ParmVar 0x559ffb7f16e8 'parser' 'P'
|-FunctionTemplateDecl 0x559ffb7f1b58 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x559ffb7f18c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f1ab8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ffb7f1970 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f19e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81ba30 <col:54, line:517:5>
|     `-ReturnStmt 0x559ffb81ba20 <line:516:9, col:53>
|       `-CallExpr 0x559ffb81b9e8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81b918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81b988 <col:26> 'const char *' lvalue ParmVar 0x559ffb7f1970 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81b9a8 <col:35> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int'
|         `-DeclRefExpr 0x559ffb81b9c8 <col:47> 'P' lvalue ParmVar 0x559ffb7f19e8 'parser' 'P'
|-FunctionTemplateDecl 0x559ffb7f1e58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x559ffb7f1bc0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f1db8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ffb7f1c70 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f1ce8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81bc20 <col:55, line:521:5>
|     `-ReturnStmt 0x559ffb81bc10 <line:520:9, col:65>
|       `-CallExpr 0x559ffb81bbd8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81ba58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81bac8 <col:26> 'const char *' lvalue ParmVar 0x559ffb7f1c70 'keyword' 'const char *'
|         |-BinaryOperator 0x559ffb81bb98 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x559ffb81bb48 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559ffb81bb28 <col:35> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559ffb81bb80 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559ffb81bb60 <col:47> 'const int' lvalue Var 0x559ffb7e5360 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x559ffb81bbb8 <col:59> 'P' lvalue ParmVar 0x559ffb7f1ce8 'parser' 'P'
|-FunctionTemplateDecl 0x559ffb7f2228 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x559ffb7f1ec0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f2188 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x559ffb7f1f70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f1ff0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f2068 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81bd60 <col:63, line:526:5>
|     |-CallExpr 0x559ffb81bce8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81bc38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x559ffb81bc78 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81bc88 <col:35> 'const char *' lvalue ParmVar 0x559ffb7f1f70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559ffb81bca8 <col:44> 'int' lvalue ParmVar 0x559ffb7f1ff0 'flags' 'int'
|     | `-DeclRefExpr 0x559ffb81bcc8 <col:51> 'P' lvalue ParmVar 0x559ffb7f2068 'parser' 'P'
|     `-ReturnStmt 0x559ffb81bd50 <line:525:9, col:17>
|       `-UnaryOperator 0x559ffb81bd38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81bd28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7f2678 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x559ffb7f2298 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f2318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f25d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7f23d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f2450 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f24f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81beb8 <col:58, line:541:5>
|     `-ReturnStmt 0x559ffb81bea8 <line:540:9, col:39>
|       `-CallExpr 0x559ffb81be70 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81bd90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81be10 <col:21> 'const char *' lvalue ParmVar 0x559ffb7f23d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81be30 <col:30> 'P' lvalue ParmVar 0x559ffb7f2450 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81be50 <col:38> 'T' lvalue ParmVar 0x559ffb7f24f8 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f2ac8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x559ffb7f26e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f2768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f2a28 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7f2828 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f28a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f2948 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81bff0 <col:60, line:545:5>
|     `-ReturnStmt 0x559ffb81bfe0 <line:544:9, col:41>
|       `-CallExpr 0x559ffb81bfa8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81bee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81bf48 <col:23> 'const char *' lvalue ParmVar 0x559ffb7f2828 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81bf68 <col:32> 'P' lvalue ParmVar 0x559ffb7f28a0 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81bf88 <col:40> 'T' lvalue ParmVar 0x559ffb7f2948 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f2f18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x559ffb7f2b38 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f2bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f2e78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7f2c78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f2cf0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f2d98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81c128 <col:60, line:549:5>
|     `-ReturnStmt 0x559ffb81c118 <line:548:9, col:41>
|       `-CallExpr 0x559ffb81c0e0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81c018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81c080 <col:23> 'const char *' lvalue ParmVar 0x559ffb7f2c78 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81c0a0 <col:32> 'P' lvalue ParmVar 0x559ffb7f2cf0 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81c0c0 <col:40> 'T' lvalue ParmVar 0x559ffb7f2d98 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f3368 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x559ffb7f2f88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f3008 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f32c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7f30c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f3140 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f31e8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81c260 <col:61, line:553:5>
|     `-ReturnStmt 0x559ffb81c250 <line:552:9, col:42>
|       `-CallExpr 0x559ffb81c218 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81c150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81c1b8 <col:24> 'const char *' lvalue ParmVar 0x559ffb7f30c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81c1d8 <col:33> 'P' lvalue ParmVar 0x559ffb7f3140 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81c1f8 <col:41> 'T' lvalue ParmVar 0x559ffb7f31e8 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f3848 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x559ffb7f33d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f3458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f37a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ffb7f3518 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f3598 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f3610 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f36b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81c3d8 <col:69, line:557:5>
|     `-ReturnStmt 0x559ffb81c3c8 <line:556:9, col:46>
|       `-CallExpr 0x559ffb81c388 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81c288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81c308 <col:21> 'const char *' lvalue ParmVar 0x559ffb7f3518 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81c328 <col:30> 'int' lvalue ParmVar 0x559ffb7f3598 'flags' 'int'
|         |-DeclRefExpr 0x559ffb81c348 <col:37> 'P' lvalue ParmVar 0x559ffb7f3610 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81c368 <col:45> 'T' lvalue ParmVar 0x559ffb7f36b8 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f3b58 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x559ffb7f38c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f3ab8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559ffb7f3970 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f39e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81c518 <col:56, line:571:5>
|     `-ReturnStmt 0x559ffb81c508 <line:570:9, col:48>
|       `-CallExpr 0x559ffb81c4d0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81c400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81c470 <col:30> 'const char *' lvalue ParmVar 0x559ffb7f3970 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81c490 <col:39> 'int' 0
|         `-DeclRefExpr 0x559ffb81c4b0 <col:42> 'P' lvalue ParmVar 0x559ffb7f39e8 'parser' 'P'
|-FunctionTemplateDecl 0x559ffb7f3ee8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x559ffb7f3bc0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb7f3e48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x559ffb7f3c70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f3cf0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f3d68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x559ffb81c6e8 <col:67, line:576:5>
|     |-CallExpr 0x559ffb81c670 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81c530 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x559ffb81c570 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81c580 <col:39> 'const char *' lvalue ParmVar 0x559ffb7f3c70 'keyword' 'const char *'
|     | |-BinaryOperator 0x559ffb81c630 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x559ffb81c5e0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559ffb81c5a0 <col:48> 'int' lvalue ParmVar 0x559ffb7f3cf0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559ffb81c618 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559ffb81c5f8 <col:56> 'const int' lvalue Var 0x559ffb7e5550 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x559ffb81c650 <col:68> 'P' lvalue ParmVar 0x559ffb7f3d68 'parser' 'P'
|     `-ReturnStmt 0x559ffb81c6d8 <line:575:9, col:17>
|       `-UnaryOperator 0x559ffb81c6c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81c6b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7f4338 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x559ffb7f3f58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f3fd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f4298 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559ffb7f4098 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f4110 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f41b8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81c858 <col:62, line:592:5>
|     `-ReturnStmt 0x559ffb81c848 <line:591:9, col:51>
|       `-CallExpr 0x559ffb81c808 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81c718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81c788 <col:30> 'const char *' lvalue ParmVar 0x559ffb7f4098 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81c7a8 <col:39> 'int' 0
|         |-DeclRefExpr 0x559ffb81c7c8 <col:42> 'P' lvalue ParmVar 0x559ffb7f4110 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81c7e8 <col:50> 'T' lvalue ParmVar 0x559ffb7f41b8 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f4818 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x559ffb7f43a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f4428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f4778 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ffb7f44e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f4568 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f45e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f4688 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81ca50 <col:73, line:597:5>
|     |-CallExpr 0x559ffb81c9d0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81c870 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x559ffb81c8b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81c8c0 <col:39> 'const char *' lvalue ParmVar 0x559ffb7f44e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x559ffb81c970 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x559ffb81c920 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559ffb81c8e0 <col:48> 'int' lvalue ParmVar 0x559ffb7f4568 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559ffb81c958 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559ffb81c938 <col:56> 'const int' lvalue Var 0x559ffb7e5550 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x559ffb81c990 <col:68> 'P' lvalue ParmVar 0x559ffb7f45e0 'parser' 'P'
|     | `-DeclRefExpr 0x559ffb81c9b0 <col:76> 'T' lvalue ParmVar 0x559ffb7f4688 'x' 'T &'
|     `-ReturnStmt 0x559ffb81ca40 <line:596:9, col:17>
|       `-UnaryOperator 0x559ffb81ca28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81ca18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7f4dc8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x559ffb7f4890 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f4908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f4d28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x559ffb7f49c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f4a40 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f4c00 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ffb81cbc0 <col:65, line:614:5>
|     `-ReturnStmt 0x559ffb81cbb0 <line:613:9, col:46>
|       `-CallExpr 0x559ffb81cb70 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81ca80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81caf0 <col:25> 'const char *' lvalue ParmVar 0x559ffb7f49c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81cb10 <col:34> 'int' 0
|         |-DeclRefExpr 0x559ffb81cb30 <col:37> 'P' lvalue ParmVar 0x559ffb7f4a40 'parser' 'P'
|         `-DeclRefExpr 0x559ffb81cb50 <col:45> 'Vector<T>' lvalue ParmVar 0x559ffb7f4c00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x559ffb7f51f8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x559ffb7f4e38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7f5158 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x559ffb7f4ef0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f5040 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ffb81cde0 <col:55, line:618:5>
|     `-ReturnStmt 0x559ffb81cdd0 <line:617:9, col:55>
|       `-CallExpr 0x559ffb81cd90 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81cbe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81cc58 <col:25> 'const char *' lvalue ParmVar 0x559ffb7f4ef0 'keyword' 'const char *'
|         |-IntegerLiteral 0x559ffb81cc78 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x559ffb81cd50 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x559ffb81cd70 <col:54> 'Vector<T>' lvalue ParmVar 0x559ffb7f5040 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x559ffb7f57c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x559ffb7f5260 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f52d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f5728 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x559ffb7f5398 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f5418 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f5490 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f55e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ffb81cfd8 <col:76, line:623:5>
|     |-CallExpr 0x559ffb81cf58 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559ffb81cdf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x559ffb81ce38 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x559ffb81ce48 <col:34> 'const char *' lvalue ParmVar 0x559ffb7f5398 'keyword' 'const char *'
|     | |-BinaryOperator 0x559ffb81cef8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x559ffb81cea8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559ffb81ce68 <col:43> 'int' lvalue ParmVar 0x559ffb7f5418 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559ffb81cee0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559ffb81cec0 <col:51> 'const int' lvalue Var 0x559ffb7e5550 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x559ffb81cf18 <col:63> 'P' lvalue ParmVar 0x559ffb7f5490 'parser' 'P'
|     | `-DeclRefExpr 0x559ffb81cf38 <col:71> 'Vector<T>' lvalue ParmVar 0x559ffb7f55e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x559ffb81cfc8 <line:622:9, col:17>
|       `-UnaryOperator 0x559ffb81cfb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81cfa0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7f5d08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x559ffb7f5840 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f58b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f5c68 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x559ffb7f5978 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f59f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f5b40 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559ffb81d240 <col:66, line:627:5>
|     `-ReturnStmt 0x559ffb81d230 <line:626:9, col:59>
|       `-CallExpr 0x559ffb81d1f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559ffb81d008 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559ffb81d078 <col:25> 'const char *' lvalue ParmVar 0x559ffb7f5978 'keyword' 'const char *'
|         |-DeclRefExpr 0x559ffb81d098 <col:34> 'int' lvalue ParmVar 0x559ffb7f59f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x559ffb81d1b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x559ffb81d1d0 <col:58> 'Vector<T>' lvalue ParmVar 0x559ffb7f5b40 'x' 'Vector<T> &'
|-CXXMethodDecl 0x559ffb7f5d98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x559ffb81d2c0 <col:25, line:633:5>
|   `-ReturnStmt 0x559ffb81d2b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x559ffb81d298 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x559ffb81d268 <col:16> 'const bool' lvalue ->_status 0x559ffb803848
|         `-CXXThisExpr 0x559ffb81d258 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x559ffb7f5f18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x559ffb7f5e50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x559ffb81d3a8 <col:27, line:639:5>
|   |-BinaryOperator 0x559ffb81d350 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ffb81d2d8 <col:9> 'bool' lvalue ParmVar 0x559ffb7f5e50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ffb81d338 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb81d308 <col:13> 'bool' lvalue ->_status 0x559ffb803848
|   |     `-CXXThisExpr 0x559ffb81d2f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x559ffb81d398 <line:638:9, col:17>
|     `-UnaryOperator 0x559ffb81d380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb81d370 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ffb7f6098 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x559ffb7f5fd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x559ffb81d498 <col:39, line:644:5>
|   |-BinaryOperator 0x559ffb81d440 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ffb81d3c8 <col:9> 'bool' lvalue ParmVar 0x559ffb7f5fd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ffb81d428 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb81d3f8 <col:13> 'const bool' lvalue ->_status 0x559ffb803848
|   |     `-CXXThisExpr 0x559ffb81d3e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x559ffb81d488 <line:643:9, col:17>
|     `-UnaryOperator 0x559ffb81d470 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb81d460 <col:17> 'const Args *' this
|-CXXMethodDecl 0x559ffb7f6160 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x559ffb81d540 <col:30, line:651:5>
|   `-ReturnStmt 0x559ffb81d530 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x559ffb81d518 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x559ffb81d4e8 <col:16> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|         `-ImplicitCastExpr 0x559ffb81d4c8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x559ffb81d4b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x559ffb7f62a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x559ffb7f6218 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x559ffb81d648 <col:32, line:658:5>
|   |-BinaryOperator 0x559ffb81d5f0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ffb81d558 <col:9> 'bool' lvalue ParmVar 0x559ffb7f6218 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ffb81d5d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb81d5a8 <col:13> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|   |     `-ImplicitCastExpr 0x559ffb81d588 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x559ffb81d578 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x559ffb81d638 <line:657:9, col:17>
|     `-UnaryOperator 0x559ffb81d620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb81d610 <col:17> 'Args *' this
|-CXXMethodDecl 0x559ffb7f63f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x559ffb7f6368 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x559ffb81d758 <col:44, line:663:5>
|   |-BinaryOperator 0x559ffb81d700 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559ffb81d668 <col:9> 'bool' lvalue ParmVar 0x559ffb7f6368 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559ffb81d6e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559ffb81d6b8 <col:13> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|   |     `-ImplicitCastExpr 0x559ffb81d698 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x559ffb81d688 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x559ffb81d748 <line:662:9, col:17>
|     `-UnaryOperator 0x559ffb81d730 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb81d720 <col:17> 'const Args *' this
|-CXXMethodDecl 0x559ffb7f64c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x559ffb7f6588 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x559ffb7f6650 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x559ffb7f6718 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x559ffb7f6a28 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x559ffb7f67b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7f6988 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x559ffb7f6898 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81db10 <col:19, line:706:5>
|     `-IfStmt 0x559ffb81dae8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x559ffb81d858 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x559ffb81da18 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x559ffb81d9e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x559ffb81d9a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x559ffb81d8b0 <col:42> '<bound member function type>' ->simple_slot 0x559ffb816c30
|       |     | `-CXXThisExpr 0x559ffb81d8a0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x559ffb81d948 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x559ffb81d900 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x559ffb5838a8
|       |     | `-DeclRefExpr 0x559ffb81d8e0 <col:55> 'T' lvalue ParmVar 0x559ffb7f6898 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x559ffb81d988 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x559ffb81dad8 <line:705:13, col:34>
|         `-CallExpr 0x559ffb81dab0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x559ffb81da38 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x559ffb81da90 <col:33> 'T' lvalue ParmVar 0x559ffb7f6898 'x' 'T &'
|-FunctionTemplateDecl 0x559ffb7f6cf8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x559ffb7f6a88 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7f6c58 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x559ffb7f6b68 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x559ffb81def0 <col:31, line:717:5>
|     |-DeclStmt 0x559ffb81dc50 <line:713:9, col:23>
|     | `-VarDecl 0x559ffb81db38 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x559ffb81dc28 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x559ffb81dbb0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x559ffb81dc08 <col:21> 'T' lvalue ParmVar 0x559ffb7f6b68 'x' 'T &'
|     |-IfStmt 0x559ffb81dea0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x559ffb81dd48 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x559ffb81de80 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x559ffb81de20 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x559ffb81ddb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|     |   | `-DeclRefExpr 0x559ffb81dd90 <col:14> 'T *' lvalue Var 0x559ffb81db38 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x559ffb81de60 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x559ffb81ded8 <line:716:9, col:16>
|       `-DeclRefExpr 0x559ffb81deb8 <col:16> 'T *' lvalue Var 0x559ffb81db38 's' 'T *'
|-FunctionTemplateDecl 0x559ffb7f7108 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x559ffb7f6d58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ffb7f6dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ffb7f7068 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x559ffb7f6eb8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x559ffb7f6f58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x559ffb81e200 <col:37, line:726:5>
|     |-IfStmt 0x559ffb81e190 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x559ffb81e1b0 <line:723:13, col:26>
|     | | `-VarDecl 0x559ffb81df58 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x559ffb81e048 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x559ffb81dfd0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x559ffb81e028 <col:25> 'T' lvalue ParmVar 0x559ffb7f6eb8 'x' 'T &'
|     | |-DeclRefExpr 0x559ffb81e070 <col:16> 'T *' lvalue Var 0x559ffb81df58 's' 'T *'
|     | `-BinaryOperator 0x559ffb81e170 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x559ffb81e120 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x559ffb81e0b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|     |   | `-DeclRefExpr 0x559ffb81e090 <col:14> 'T *' lvalue Var 0x559ffb81df58 's' 'T *'
|     |   `-DeclRefExpr 0x559ffb81e150 <col:18> 'const V' lvalue ParmVar 0x559ffb7f6f58 'value' 'const V &'
|     `-ReturnStmt 0x559ffb81e1f0 <line:725:9, col:17>
|       `-UnaryOperator 0x559ffb81e1d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559ffb81e1c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559ffb7f7508 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x559ffb7f7170 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559ffb7f7468 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x559ffb7f7220 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f72a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f7348 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x559ffb81f020 <col:65, line:737:5>
|     |-DeclStmt 0x559ffb81e298 <line:732:9, col:26>
|     | `-VarDecl 0x559ffb81e230 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ffb81efe8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x559ffb81f008 <line:733:13, col:58>
|       | `-VarDecl 0x559ffb81e2c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ffb81e4a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ffb81e470 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ffb81e458 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ffb81e438 <col:26, col:58> 'String' (CXXTemporary 0x559ffb81e438)
|       |           `-CXXMemberCallExpr 0x559ffb81e3c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ffb81e338 <col:26> '<bound member function type>' ->find 0x559ffb816248
|       |             | `-CXXThisExpr 0x559ffb81e328 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ffb81e400 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb81e368 <col:31> 'const char *' lvalue ParmVar 0x559ffb7f7220 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ffb81e418 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb81e388 <col:40> 'int' lvalue ParmVar 0x559ffb7f72a0 'flags' 'int'
|       |             `-DeclRefExpr 0x559ffb81e3a8 <col:47> 'Args::Slot *' lvalue Var 0x559ffb81e230 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ffb81e558 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ffb81e540 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ffb81e520 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ffb81e4f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |       `-ImplicitCastExpr 0x559ffb81e4d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ffb81e4b8 <col:20> 'String' lvalue Var 0x559ffb81e2c0 'str' 'String'
|       `-CompoundStmt 0x559ffb81efc8 <col:61, line:736:9>
|         |-DeclStmt 0x559ffb81ea10 <line:734:13, col:76>
|         | `-VarDecl 0x559ffb81e5a8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x559ffb81e9e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ffb81e950 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ffb81e998 <col:60> 'T' lvalue ParmVar 0x559ffb7f7348 'variable' 'T &'
|         |     `-UnaryOperator 0x559ffb81e9c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ffb81e9b8 <col:71> 'Args *' this
|         `-CallExpr 0x559ffb81ef98 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x559ffb81ea38 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|           | `-CXXThisExpr 0x559ffb81ea28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559ffb81ef58 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x559ffb81ea68 <col:23> 'T *' lvalue Var 0x559ffb81e5a8 's' 'T *'
|           | `-CallExpr 0x559ffb81ef18 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559ffb81ecf0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x559ffb81edf0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x559ffb81ee10 <col:86> 'String' lvalue Var 0x559ffb81e2c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559ffb81eec0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ffb81ee50 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|           |   | `-DeclRefExpr 0x559ffb81ee30 <col:92> 'T *' lvalue Var 0x559ffb81e5a8 's' 'T *'
|           |   `-UnaryOperator 0x559ffb81ef00 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559ffb81eef0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x559ffb81ef78 <col:103> 'Args::Slot *' lvalue Var 0x559ffb81e230 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ffb7f7a58 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x559ffb7f7578 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ffb7f75f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559ffb7f79b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7f76b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f7738 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f77d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x559ffb7f7878 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x559ffb81fec0 <col:88, line:745:5>
|     |-DeclStmt 0x559ffb81f0b8 <line:741:9, col:26>
|     | `-VarDecl 0x559ffb81f050 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ffb81f2d8 <line:742:9, col:55>
|     | `-VarDecl 0x559ffb81f0e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x559ffb81f2c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x559ffb81f290 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x559ffb81f278 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x559ffb81f258 <col:22, col:54> 'String' (CXXTemporary 0x559ffb81f258)
|     |           `-CXXMemberCallExpr 0x559ffb81f1e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x559ffb81f158 <col:22> '<bound member function type>' ->find 0x559ffb816248
|     |             | `-CXXThisExpr 0x559ffb81f148 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x559ffb81f220 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ffb81f188 <col:27> 'const char *' lvalue ParmVar 0x559ffb7f76b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x559ffb81f238 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ffb81f1a8 <col:36> 'int' lvalue ParmVar 0x559ffb7f7738 'flags' 'int'
|     |             `-DeclRefExpr 0x559ffb81f1c8 <col:43> 'Args::Slot *' lvalue Var 0x559ffb81f050 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x559ffb81f6b0 <line:743:9, col:72>
|     | `-VarDecl 0x559ffb81f328 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559ffb81f680 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559ffb81f5f0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x559ffb81f638 <col:56> 'T' lvalue ParmVar 0x559ffb7f77d8 'variable' 'T &'
|     |     `-UnaryOperator 0x559ffb81f668 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559ffb81f658 <col:67> 'Args *' this
|     `-CallExpr 0x559ffb81fe90 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x559ffb81f6d8 <col:9> '<bound member function type>' ->postparse 0x559ffb816458
|       | `-CXXThisExpr 0x559ffb81f6c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x559ffb81fe50 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x559ffb81f708 <col:19> 'T *' lvalue Var 0x559ffb81f328 's' 'T *'
|       | `-ParenExpr 0x559ffb81fe30 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x559ffb81fe00 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x559ffb81fde8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x559ffb81fdd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x559ffb81fdb0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x559ffb81fd80 <col:25> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |     |       `-ImplicitCastExpr 0x559ffb81fd68 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x559ffb81f728 <col:25> 'String' lvalue Var 0x559ffb81f0e0 'str' 'String'
|       |     |-CallExpr 0x559ffb81fbd8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x559ffb81f9b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x559ffb81fab0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x559ffb81fad0 <col:89> 'String' lvalue Var 0x559ffb81f0e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x559ffb81fb80 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x559ffb81fb10 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|       |     | | `-DeclRefExpr 0x559ffb81faf0 <col:95> 'T *' lvalue Var 0x559ffb81f328 's' 'T *'
|       |     | `-UnaryOperator 0x559ffb81fbc0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x559ffb81fbb0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x559ffb81fd48 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x559ffb81fd28 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x559ffb81fcf8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x559ffb81fca8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x559ffb81fc38 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|       |         | | `-DeclRefExpr 0x559ffb81fc18 <col:109> 'T *' lvalue Var 0x559ffb81f328 's' 'T *'
|       |         | `-DeclRefExpr 0x559ffb81fcd8 <col:113> 'const V' lvalue ParmVar 0x559ffb7f7878 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x559ffb81fd18 <col:120> 'bool' true
|       `-DeclRefExpr 0x559ffb81fe70 <col:128> 'Args::Slot *' lvalue Var 0x559ffb81f050 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ffb7f7f88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x559ffb7f7ad0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f7b48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb7f7ee8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ffb7f7c08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f7c88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f7d00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f7da8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x559ffb820ab8 <col:75, line:754:5>
|     |-DeclStmt 0x559ffb81ff68 <line:749:9, col:26>
|     | `-VarDecl 0x559ffb81ff00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ffb820a80 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x559ffb820aa0 <line:750:13, col:58>
|       | `-VarDecl 0x559ffb81ff90 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ffb820170 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ffb820140 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ffb820128 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ffb820108 <col:26, col:58> 'String' (CXXTemporary 0x559ffb820108)
|       |           `-CXXMemberCallExpr 0x559ffb820098 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ffb820008 <col:26> '<bound member function type>' ->find 0x559ffb816248
|       |             | `-CXXThisExpr 0x559ffb81fff8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ffb8200d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb820038 <col:31> 'const char *' lvalue ParmVar 0x559ffb7f7c08 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ffb8200e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb820058 <col:40> 'int' lvalue ParmVar 0x559ffb7f7c88 'flags' 'int'
|       |             `-DeclRefExpr 0x559ffb820078 <col:47> 'Args::Slot *' lvalue Var 0x559ffb81ff00 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ffb820228 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ffb820210 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ffb8201f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ffb8201c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |       `-ImplicitCastExpr 0x559ffb8201a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ffb820188 <col:20> 'String' lvalue Var 0x559ffb81ff90 'str' 'String'
|       `-CompoundStmt 0x559ffb820a60 <col:61, line:753:9>
|         |-DeclStmt 0x559ffb820600 <line:751:13, col:63>
|         | `-VarDecl 0x559ffb820278 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x559ffb8205d0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ffb820540 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ffb820588 <col:47> 'T' lvalue ParmVar 0x559ffb7f7da8 'variable' 'T &'
|         |     `-UnaryOperator 0x559ffb8205b8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ffb8205a8 <col:58> 'Args *' this
|         `-CallExpr 0x559ffb820a30 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x559ffb820628 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|           | `-CXXThisExpr 0x559ffb820618 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559ffb8209f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x559ffb820658 <col:23> 'T *' lvalue Var 0x559ffb820278 's' 'T *'
|           | `-CallExpr 0x559ffb8209b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559ffb820840 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x559ffb820888 <col:56> 'P' lvalue ParmVar 0x559ffb7f7d00 'parser' 'P'
|           |   |-DeclRefExpr 0x559ffb8208a8 <col:64> 'String' lvalue Var 0x559ffb81ff90 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559ffb820958 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ffb8208e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|           |   | `-DeclRefExpr 0x559ffb8208c8 <col:70> 'T *' lvalue Var 0x559ffb820278 's' 'T *'
|           |   `-UnaryOperator 0x559ffb820998 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559ffb820988 <col:74> 'Args *' this
|           `-DeclRefExpr 0x559ffb820a10 <col:81> 'Args::Slot *' lvalue Var 0x559ffb81ff00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ffb7f85e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x559ffb7f8000 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559ffb7f8078 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x559ffb7f80f8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559ffb7f8548 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559ffb7f81c0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb7f8240 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb7f82b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb7f8358 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x559ffb7f83f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x559ffb823b28 <col:98, line:762:5>
|     |-DeclStmt 0x559ffb820b50 <line:758:9, col:26>
|     | `-VarDecl 0x559ffb820ae8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ffb820d70 <line:759:9, col:55>
|     | `-VarDecl 0x559ffb820b78 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x559ffb820d58 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x559ffb820d28 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x559ffb820d10 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x559ffb820cf0 <col:22, col:54> 'String' (CXXTemporary 0x559ffb820cf0)
|     |           `-CXXMemberCallExpr 0x559ffb820c80 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x559ffb820bf0 <col:22> '<bound member function type>' ->find 0x559ffb816248
|     |             | `-CXXThisExpr 0x559ffb820be0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x559ffb820cb8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ffb820c20 <col:27> 'const char *' lvalue ParmVar 0x559ffb7f81c0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x559ffb820cd0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559ffb820c40 <col:36> 'int' lvalue ParmVar 0x559ffb7f8240 'flags' 'int'
|     |             `-DeclRefExpr 0x559ffb820c60 <col:43> 'Args::Slot *' lvalue Var 0x559ffb820ae8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x559ffb823470 <line:760:9, col:59>
|     | `-VarDecl 0x559ffb820dc8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559ffb823440 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559ffb8210d0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x559ffb821118 <col:43> 'T' lvalue ParmVar 0x559ffb7f8358 'variable' 'T &'
|     |     `-UnaryOperator 0x559ffb821148 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559ffb821138 <col:54> 'Args *' this
|     `-CallExpr 0x559ffb823af8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x559ffb823498 <col:9> '<bound member function type>' ->postparse 0x559ffb816458
|       | `-CXXThisExpr 0x559ffb823488 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x559ffb823ab8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x559ffb8234c8 <col:19> 'T *' lvalue Var 0x559ffb820dc8 's' 'T *'
|       | `-ParenExpr 0x559ffb823a98 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x559ffb823a68 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x559ffb823a50 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x559ffb823a38 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x559ffb823a18 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x559ffb8239e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |     |       `-ImplicitCastExpr 0x559ffb8239d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x559ffb8234e8 <col:25> 'String' lvalue Var 0x559ffb820b78 'str' 'String'
|       |     |-CallExpr 0x559ffb823840 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x559ffb8236d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x559ffb823718 <col:59> 'P' lvalue ParmVar 0x559ffb7f82b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x559ffb823738 <col:67> 'String' lvalue Var 0x559ffb820b78 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x559ffb8237e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x559ffb823778 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|       |     | | `-DeclRefExpr 0x559ffb823758 <col:73> 'T *' lvalue Var 0x559ffb820dc8 's' 'T *'
|       |     | `-UnaryOperator 0x559ffb823828 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x559ffb823818 <col:77> 'Args *' this
|       |     `-ParenExpr 0x559ffb8239b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x559ffb823990 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x559ffb823960 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x559ffb823910 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x559ffb8238a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|       |         | | `-DeclRefExpr 0x559ffb823880 <col:87> 'T *' lvalue Var 0x559ffb820dc8 's' 'T *'
|       |         | `-DeclRefExpr 0x559ffb823940 <col:91> 'const V' lvalue ParmVar 0x559ffb7f83f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x559ffb823980 <col:98> 'bool' true
|       `-DeclRefExpr 0x559ffb823ad8 <col:106> 'Args::Slot *' lvalue Var 0x559ffb820ae8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ffb8008c8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x559ffb7f8668 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb7f86e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559ffb7f8768 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559ffb800828 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559ffb8004a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb800520 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb800598 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb800638 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x559ffb8006d8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x559ffb824b08 <col:60, line:773:5>
|     |-DeclStmt 0x559ffb823bd0 <line:767:9, col:26>
|     | `-VarDecl 0x559ffb823b68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ffb824ad0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x559ffb824af0 <line:768:13, col:58>
|       | `-VarDecl 0x559ffb823bf8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ffb823dd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ffb823da8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ffb823d90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ffb823d70 <col:26, col:58> 'String' (CXXTemporary 0x559ffb823d70)
|       |           `-CXXMemberCallExpr 0x559ffb823d00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ffb823c70 <col:26> '<bound member function type>' ->find 0x559ffb816248
|       |             | `-CXXThisExpr 0x559ffb823c60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ffb823d38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb823ca0 <col:31> 'const char *' lvalue ParmVar 0x559ffb8004a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ffb823d50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb823cc0 <col:40> 'int' lvalue ParmVar 0x559ffb800520 'flags' 'int'
|       |             `-DeclRefExpr 0x559ffb823ce0 <col:47> 'Args::Slot *' lvalue Var 0x559ffb823b68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ffb823e90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ffb823e78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ffb823e58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ffb823e28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |       `-ImplicitCastExpr 0x559ffb823e10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ffb823df0 <col:20> 'String' lvalue Var 0x559ffb823bf8 'str' 'String'
|       `-CompoundStmt 0x559ffb824aa8 <col:61, line:772:9>
|         |-DeclStmt 0x559ffb8241d0 <line:769:13, col:66>
|         | `-VarDecl 0x559ffb823ee8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x559ffb8241a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ffb824110 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ffb824158 <col:49> 'T1' lvalue ParmVar 0x559ffb800638 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x559ffb824188 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ffb824178 <col:61> 'Args *' this
|         |-DeclStmt 0x559ffb824540 <line:770:13, col:66>
|         | `-VarDecl 0x559ffb824258 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x559ffb824510 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559ffb824480 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559ffb8244c8 <col:49> 'T2' lvalue ParmVar 0x559ffb8006d8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x559ffb8244f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559ffb8244e8 <col:61> 'Args *' this
|         `-CallExpr 0x559ffb824a78 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x559ffb824568 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|           | `-CXXThisExpr 0x559ffb824558 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559ffb824a38 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x559ffb8245d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x559ffb824598 <col:23> 'T1 *' lvalue Var 0x559ffb823ee8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x559ffb8245b8 <col:29> 'T2 *' lvalue Var 0x559ffb824258 's2' 'T2 *'
|           | `-CallExpr 0x559ffb8249f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559ffb8247c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x559ffb824808 <col:63> 'P' lvalue ParmVar 0x559ffb800598 'parser' 'P'
|           |   |-DeclRefExpr 0x559ffb824828 <col:71> 'String' lvalue Var 0x559ffb823bf8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559ffb8248d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ffb824868 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|           |   | `-DeclRefExpr 0x559ffb824848 <col:77> 'T1 *' lvalue Var 0x559ffb823ee8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x559ffb824998 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559ffb824928 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|           |   | `-DeclRefExpr 0x559ffb824908 <col:82> 'T2 *' lvalue Var 0x559ffb824258 's2' 'T2 *'
|           |   `-UnaryOperator 0x559ffb8249d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559ffb8249c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x559ffb824a58 <col:94> 'Args::Slot *' lvalue Var 0x559ffb823b68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ffb800cb8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x559ffb800948 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb800c18 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x559ffb800a00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb800a80 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb800af8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x559ffb825020 <col:67, line:780:5>
|     |-DeclStmt 0x559ffb824ba0 <line:777:9, col:26>
|     | `-VarDecl 0x559ffb824b38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559ffb824fe8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x559ffb825008 <line:778:13, col:58>
|       | `-VarDecl 0x559ffb824bc8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559ffb824da8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559ffb824d78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559ffb824d60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559ffb824d40 <col:26, col:58> 'String' (CXXTemporary 0x559ffb824d40)
|       |           `-CXXMemberCallExpr 0x559ffb824cd0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559ffb824c40 <col:26> '<bound member function type>' ->find 0x559ffb816248
|       |             | `-CXXThisExpr 0x559ffb824c30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559ffb824d08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb824c70 <col:31> 'const char *' lvalue ParmVar 0x559ffb800a00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559ffb824d20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559ffb824c90 <col:40> 'int' lvalue ParmVar 0x559ffb800a80 'flags' 'int'
|       |             `-DeclRefExpr 0x559ffb824cb0 <col:47> 'Args::Slot *' lvalue Var 0x559ffb824b38 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559ffb824e60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559ffb824e48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559ffb824e28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559ffb824df8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|       |       `-ImplicitCastExpr 0x559ffb824de0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559ffb824dc0 <col:20> 'String' lvalue Var 0x559ffb824bc8 'str' 'String'
|       `-CallExpr 0x559ffb824fb8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x559ffb824e88 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|         | `-CXXThisExpr 0x559ffb824e78 <col:13> 'Args *' implicit this
|         |-CallExpr 0x559ffb824f68 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x559ffb824ed8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x559ffb824eb8 <col:23> 'P' lvalue ParmVar 0x559ffb800af8 'parser' 'P'
|         | |-DeclRefExpr 0x559ffb824f20 <col:36> 'String' lvalue Var 0x559ffb824bc8 'str' 'String'
|         | `-UnaryOperator 0x559ffb824f50 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x559ffb824f40 <col:42> 'Args *' this
|         `-DeclRefExpr 0x559ffb824f98 <col:49> 'Args::Slot *' lvalue Var 0x559ffb824b38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559ffb801058 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x559ffb800d28 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559ffb800fb8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x559ffb800de0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb800e60 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb800ed8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x559ffb825990 <col:71, line:792:5>
|     |-DeclStmt 0x559ffb8250b8 <line:784:9, col:26>
|     | `-VarDecl 0x559ffb825050 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ffb825188 <line:785:9, col:29>
|     | `-VarDecl 0x559ffb8250e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559ffb825170 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559ffb825150 <col:28> 'int' 1
|     |-WhileStmt 0x559ffb825840 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x559ffb825860 <line:786:16, col:61>
|     | | `-VarDecl 0x559ffb8251b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559ffb825390 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559ffb825360 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559ffb825348 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559ffb825328 <col:29, col:61> 'String' (CXXTemporary 0x559ffb825328)
|     | |           `-CXXMemberCallExpr 0x559ffb8252b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559ffb825228 <col:29> '<bound member function type>' ->find 0x559ffb816248
|     | |             | `-CXXThisExpr 0x559ffb825218 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559ffb8252f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ffb825258 <col:34> 'const char *' lvalue ParmVar 0x559ffb800de0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559ffb825308 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ffb825278 <col:43> 'int' lvalue ParmVar 0x559ffb800e60 'flags' 'int'
|     | |             `-DeclRefExpr 0x559ffb825298 <col:50> 'Args::Slot *' lvalue Var 0x559ffb825050 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559ffb825448 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ffb825430 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ffb825410 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ffb8253e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|     | |       `-ImplicitCastExpr 0x559ffb8253c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559ffb8253a8 <col:23> 'String' lvalue Var 0x559ffb8251b0 'str' 'String'
|     | `-CompoundStmt 0x559ffb825818 <col:64, line:790:9>
|     |   |-CallExpr 0x559ffb8255a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x559ffb825470 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|     |   | | `-CXXThisExpr 0x559ffb825460 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x559ffb825550 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x559ffb8254c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x559ffb8254a0 <col:23> 'P' lvalue ParmVar 0x559ffb800ed8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x559ffb825508 <col:36> 'String' lvalue Var 0x559ffb8251b0 'str' 'String'
|     |   | | `-UnaryOperator 0x559ffb825538 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x559ffb825528 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x559ffb825580 <col:49> 'Args::Slot *' lvalue Var 0x559ffb825050 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x559ffb825738 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559ffb8255d0 <col:13> 'int' lvalue Var 0x559ffb8250e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559ffb825720 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559ffb825700 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559ffb825668 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559ffb825648 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559ffb825630 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559ffb8255f0 <col:28> 'int' lvalue Var 0x559ffb8250e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559ffb825610 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559ffb8256e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559ffb8256b8 <col:49> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|     |   |         `-ImplicitCastExpr 0x559ffb825698 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559ffb825688 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559ffb8257e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559ffb825758 <col:13> 'int' lvalue ParmVar 0x559ffb800e60 'flags' 'int'
|     |     `-UnaryOperator 0x559ffb8257d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559ffb8257b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ffb825798 <col:23> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559ffb825970 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559ffb8258a8 <col:9> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|       | `-ImplicitCastExpr 0x559ffb825888 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559ffb825878 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559ffb825950 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559ffb825930 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559ffb825918 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559ffb8258d8 <col:25> 'int' lvalue Var 0x559ffb8250e8 'read_status' 'int'
|           `-IntegerLiteral 0x559ffb8258f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x559ffb801538 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x559ffb8010c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb801148 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb801498 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x559ffb801208 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb801288 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb801300 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb8013a8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x559ffb826920 <col:84, line:805:5>
|     |-DeclStmt 0x559ffb825a38 <line:796:9, col:26>
|     | `-VarDecl 0x559ffb8259d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ffb825b08 <line:797:9, col:29>
|     | `-VarDecl 0x559ffb825a68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559ffb825af0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559ffb825ad0 <col:28> 'int' 1
|     |-DeclStmt 0x559ffb825e40 <line:798:9, col:71>
|     | `-VarDecl 0x559ffb825b58 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559ffb825e10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559ffb825d80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x559ffb825dc8 <col:55> 'T' lvalue ParmVar 0x559ffb8013a8 'variable' 'T &'
|     |     `-UnaryOperator 0x559ffb825df8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559ffb825de8 <col:66> 'Args *' this
|     |-WhileStmt 0x559ffb8267d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x559ffb8267f0 <line:799:16, col:61>
|     | | `-VarDecl 0x559ffb825e68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559ffb826048 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559ffb826018 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559ffb826000 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559ffb825fe0 <col:29, col:61> 'String' (CXXTemporary 0x559ffb825fe0)
|     | |           `-CXXMemberCallExpr 0x559ffb825f70 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559ffb825ee0 <col:29> '<bound member function type>' ->find 0x559ffb816248
|     | |             | `-CXXThisExpr 0x559ffb825ed0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559ffb825fa8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ffb825f10 <col:34> 'const char *' lvalue ParmVar 0x559ffb801208 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559ffb825fc0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ffb825f30 <col:43> 'int' lvalue ParmVar 0x559ffb801288 'flags' 'int'
|     | |             `-DeclRefExpr 0x559ffb825f50 <col:50> 'Args::Slot *' lvalue Var 0x559ffb8259d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559ffb826100 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ffb8260e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ffb8260c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ffb826098 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|     | |       `-ImplicitCastExpr 0x559ffb826080 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559ffb826060 <col:23> 'String' lvalue Var 0x559ffb825e68 'str' 'String'
|     | `-CompoundStmt 0x559ffb8267a8 <col:64, line:803:9>
|     |   |-CallExpr 0x559ffb826530 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x559ffb826128 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|     |   | | `-CXXThisExpr 0x559ffb826118 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x559ffb8264f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x559ffb826158 <col:23> 'T *' lvalue Var 0x559ffb825b58 's' 'T *'
|     |   | | `-CallExpr 0x559ffb8264b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x559ffb826340 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x559ffb826388 <col:56> 'P' lvalue ParmVar 0x559ffb801300 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x559ffb8263a8 <col:64> 'String' lvalue Var 0x559ffb825e68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x559ffb826458 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x559ffb8263e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|     |   | |   | `-DeclRefExpr 0x559ffb8263c8 <col:70> 'T *' lvalue Var 0x559ffb825b58 's' 'T *'
|     |   | |   `-UnaryOperator 0x559ffb826498 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x559ffb826488 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x559ffb826510 <col:81> 'Args::Slot *' lvalue Var 0x559ffb8259d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x559ffb8266c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559ffb826560 <col:13> 'int' lvalue Var 0x559ffb825a68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559ffb8266b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559ffb826690 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559ffb8265f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559ffb8265d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559ffb8265c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559ffb826580 <col:28> 'int' lvalue Var 0x559ffb825a68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559ffb8265a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559ffb826678 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559ffb826648 <col:49> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|     |   |         `-ImplicitCastExpr 0x559ffb826628 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559ffb826618 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559ffb826778 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559ffb8266e8 <col:13> 'int' lvalue ParmVar 0x559ffb801288 'flags' 'int'
|     |     `-UnaryOperator 0x559ffb826760 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559ffb826748 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ffb826728 <col:23> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559ffb826900 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559ffb826838 <col:9> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|       | `-ImplicitCastExpr 0x559ffb826818 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559ffb826808 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559ffb8268e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559ffb8268c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559ffb8268a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559ffb826868 <col:25> 'int' lvalue Var 0x559ffb825a68 'read_status' 'int'
|           `-IntegerLiteral 0x559ffb826888 <col:40> 'int' 1
|-FunctionTemplateDecl 0x559ffb801b18 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x559ffb8015b0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559ffb801628 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559ffb801a78 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x559ffb8016e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559ffb801768 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x559ffb8017e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x559ffb801930 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x559ffb827728 <col:87, line:821:5>
|     |-DeclStmt 0x559ffb8269d0 <line:809:9, col:26>
|     | `-VarDecl 0x559ffb826968 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559ffb826aa0 <line:810:9, col:29>
|     | `-VarDecl 0x559ffb826a00 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559ffb826a88 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559ffb826a68 <col:28> 'int' 1
|     |-DeclStmt 0x559ffb826ce8 <line:811:9, col:38>
|     | `-VarDecl 0x559ffb826bd0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x559ffb826cc0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x559ffb826c48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x559ffb826ca0 <col:29> 'Vector<T>' lvalue ParmVar 0x559ffb801930 'variable' 'Vector<T> &'
|     |-WhileStmt 0x559ffb8275d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x559ffb8275f8 <line:812:16, col:61>
|     | | `-VarDecl 0x559ffb826d10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559ffb826ef0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559ffb826ec0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559ffb826ea8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559ffb826e88 <col:29, col:61> 'String' (CXXTemporary 0x559ffb826e88)
|     | |           `-CXXMemberCallExpr 0x559ffb826e18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559ffb826d88 <col:29> '<bound member function type>' ->find 0x559ffb816248
|     | |             | `-CXXThisExpr 0x559ffb826d78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559ffb826e50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ffb826db8 <col:34> 'const char *' lvalue ParmVar 0x559ffb8016e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559ffb826e68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559ffb826dd8 <col:43> 'int' lvalue ParmVar 0x559ffb801768 'flags' 'int'
|     | |             `-DeclRefExpr 0x559ffb826df8 <col:50> 'Args::Slot *' lvalue Var 0x559ffb826968 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559ffb826fa8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559ffb826f90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559ffb826f70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559ffb826f40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559ffb545868
|     | |       `-ImplicitCastExpr 0x559ffb826f28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559ffb826f08 <col:23> 'String' lvalue Var 0x559ffb826d10 'str' 'String'
|     | `-CompoundStmt 0x559ffb8275a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x559ffb827068 <line:813:13, col:23>
|     |   | `-VarDecl 0x559ffb826fd0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x559ffb827048 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x559ffb8271e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x559ffb827090 <col:13> '<bound member function type>' ->postparse 0x559ffb816458
|     |   | | `-CXXThisExpr 0x559ffb827080 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x559ffb827190 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x559ffb8270e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x559ffb8270c0 <col:23> 'P' lvalue ParmVar 0x559ffb8017e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x559ffb827128 <col:36> 'String' lvalue Var 0x559ffb826d10 'str' 'String'
|     |   | | |-DeclRefExpr 0x559ffb827148 <col:41> 'T' lvalue Var 0x559ffb826fd0 'sx' 'T'
|     |   | | `-UnaryOperator 0x559ffb827178 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x559ffb827168 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x559ffb8271c8 <col:53> 'Args::Slot *' lvalue Var 0x559ffb826968 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x559ffb827340 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x559ffb827278 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x559ffb827248 <col:17> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|     |   | |   `-ImplicitCastExpr 0x559ffb827228 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x559ffb827218 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x559ffb827318 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x559ffb8272b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x559ffb827290 <col:17> 'Vector<T> *' lvalue Var 0x559ffb826bd0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x559ffb8272f8 <col:30> 'T' lvalue Var 0x559ffb826fd0 'sx' 'T'
|     |   |-BinaryOperator 0x559ffb8274c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559ffb827358 <col:13> 'int' lvalue Var 0x559ffb826a00 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559ffb8274a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559ffb827488 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559ffb8273f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559ffb8273d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559ffb8273b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559ffb827378 <col:28> 'int' lvalue Var 0x559ffb826a00 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559ffb827398 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559ffb827470 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559ffb827440 <col:49> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|     |   |         `-ImplicitCastExpr 0x559ffb827420 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559ffb827410 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559ffb827570 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559ffb8274e0 <col:13> 'int' lvalue ParmVar 0x559ffb801768 'flags' 'int'
|     |     `-UnaryOperator 0x559ffb827558 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559ffb827540 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559ffb827520 <col:23> 'const int' lvalue Var 0x559ffb7e5268 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559ffb827708 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559ffb827640 <col:9> 'bool' lvalue ->_read_status 0x559ffb6f9a40
|       | `-ImplicitCastExpr 0x559ffb827620 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559ffb827610 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559ffb8276e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559ffb8276c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559ffb8276b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559ffb827670 <col:25> 'int' lvalue Var 0x559ffb826a00 'read_status' 'int'
|           `-IntegerLiteral 0x559ffb827690 <col:40> 'int' 1
|-AccessSpecDecl 0x559ffb801b90 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x559ffb801bb8 prev 0x559ffb7e3568 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x559ffb801cb0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x559ffb801da0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x559ffb827760 <col:16, line:828:9>
| |-CXXDestructorDecl 0x559ffb801e90 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x559ffb827770 <col:25, line:830:9>
| |-CXXMethodDecl 0x559ffb801f90 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x559ffb802040 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x559ffb8020e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x559ffb8020e8
| | `-ParmVarDecl 0x559ffb8021f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x559ffb8029b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x559ffb8029b8
|   `-ParmVarDecl 0x559ffb802ac8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x559ffb802268 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x559ffb8023c8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x559ffb8025c0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x559ffb802470 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x559ffb8024e8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x559ffb827950 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x559ffb802878 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x559ffb8277c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559ffb827780 <col:20> 'void *' lvalue ParmVar 0x559ffb802470 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x559ffb8028e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x559ffb827848 <col:32, col:45> 'char *' array Function 0x559ffb3692c8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x559ffb827830 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x559ffb827800 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x559ffb8024e8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x559ffb802940 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x559ffb827910 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x559ffb8278d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x559ffb8024e8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x559ffb8279d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x559ffb8026c0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x559ffb801e90 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x559ffb827a58 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x559ffb827a38 <line:840:13, col:22> 'void' array Function 0x559ffb369628 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x559ffb827a20 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x559ffb8279f0 <col:22> 'char *' lvalue ->_slot 0x559ffb8028e0
| |         `-CXXThisExpr 0x559ffb8279e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x559ffb8027c0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x559ffb801f90 Slot::store 'void ()' ]
| | `-CompoundStmt 0x559ffb827c48 <col:22, line:844:9>
| |   `-CallExpr 0x559ffb827bb0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x559ffb827b98 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559ffb827b78 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x559ffb4752c8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x559ffb827be8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x559ffb827ac8 <col:20> 'void *' lvalue ->_ptr 0x559ffb802878
| |     |   `-CXXThisExpr 0x559ffb827ab8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x559ffb827c18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x559ffb827c00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x559ffb827b08 <col:26> 'char *' lvalue ->_slot 0x559ffb8028e0
| |     |     `-CXXThisExpr 0x559ffb827af8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x559ffb827c30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x559ffb827b48 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x559ffb802940
| |         `-CXXThisExpr 0x559ffb827b38 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x559ffb802878 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x559ffb8028e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x559ffb802940 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x559ffb802b38 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x559ffb802b38
| | `-ParmVarDecl 0x559ffb802c48 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x559ffb802ce8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x559ffb802ce8
|   `-ParmVarDecl 0x559ffb802df8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x559ffb802f98 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x559ffb802e68 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x559ffb802f08 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x559ffb803230 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x559ffb803428 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x559ffb8032f8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x559ffb8035a8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x559ffb827c80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x559ffb827c60 <col:20> 'T *' lvalue ParmVar 0x559ffb8032f8 'ptr' 'T *'
|   | `-CompoundStmt 0x559ffb827cd0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x559ffb8034f8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x559ffb801f90 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x559ffb827e80 <col:22, line:857:9>
|   |   `-CallExpr 0x559ffb827e50 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x559ffb827ce0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x559ffb52d9f8 0x559ffb4d7d28
|   |     |-CXXOperatorCallExpr 0x559ffb827de0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x559ffb827d70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559ffb73a9a8 0x559ffb73a5c8 0x559ffb73a1f8 0x559ffb739e18 0x559ffb739a38 0x559ffb739668
|   |     | `-MemberExpr 0x559ffb827d40 <col:29> 'T *' lvalue ->_ptr 0x559ffb8035a8
|   |     |   `-CXXThisExpr 0x559ffb827d30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x559ffb827e20 <col:35> 'T' lvalue ->_slot 0x559ffb803608
|   |       `-CXXThisExpr 0x559ffb827e10 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x559ffb8035a8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x559ffb803608 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x559ffb803670 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x559ffb803770 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x559ffb8037c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb803750 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x559ffb803730 <col:31> 'int' 48
|-FieldDecl 0x559ffb8037e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x559ffb803848 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x559ffb8038a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x559ffb8039e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x559ffb815af0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x559ffb815b50 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x559ffb815c00 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x559ffb815e28 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x559ffb815d30 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x559ffb815f78 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x559ffb815ee8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x559ffb816248 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x559ffb816038 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x559ffb8160b8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x559ffb816160 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x559ffb816458 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x559ffb816310 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x559ffb816388 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x559ffb816528 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x559ffb816678 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x559ffb8165e0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x559ffb816a08 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x559ffb816738 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x559ffb8167b8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x559ffb816860 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x559ffb816918 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x559ffb816c30 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x559ffb816ae0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x559ffb816b58 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x559ffb816f48 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x559ffb816ce0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x559ffb816ea8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x559ffb816db8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb536720 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb536838 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x559ffb5368c8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x559ffb536998 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x559ffb536a80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb536c98 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559ffb536b40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb536e48 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x559ffb536d50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x559ffb536f90 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x559ffb536f00 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x559ffb5370d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559ffb537048 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb537220 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559ffb537190 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb5372e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x559ffb537430 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x559ffb5373a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x559ffb5374f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x559ffb537640 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x559ffb5375b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x559ffb5377b8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x559ffb5376f8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb537900 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x559ffb537870 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb5379c8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x559ffb537b88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559ffb537a78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ffb537af0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb537dd8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559ffb537c48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ffb537cc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ffb537e88 <col:86> "" ""
|-CXXMethodDecl 0x559ffb5380f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x559ffb537f68 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x559ffb537fe0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb5382a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x559ffb5381b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x559ffb538458 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x559ffb538360 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x559ffb538728 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x559ffb538510 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x559ffb538588 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ffb538600 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb538a08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x559ffb5387f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x559ffb538868 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ffb5388e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ffb538ac0 <col:115> "" ""
|-AccessSpecDecl 0x559ffb538b30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x559ffb538b68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb539070 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559ffb539070
| `-ParmVarDecl 0x559ffb539178 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x559ffb539218 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559ffb539218
| `-ParmVarDecl 0x559ffb539328 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x559ffb56e958 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ffb761760 <col:7>
|-CXXConstructorDecl 0x559ffb56ea30 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559ffb56ea30
| `-ParmVarDecl 0x559ffb56eb48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x559ffb56ebb8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559ffb56ebb8
| `-ParmVarDecl 0x559ffb56ecc8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x559ffb764160 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb750308 prev 0x559ffb745510 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb750400 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x559ffb7504f0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x559ffb750618 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x559ffb750798 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x559ffb750918 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x559ffb750a98 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x559ffb7618c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ffb762138 <col:11>
|-CXXDestructorDecl 0x559ffb7619a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559ffb761ad8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x559ffb761ad8
| `-ParmVarDecl 0x559ffb761be8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x559ffb761c88 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ffb761c88
| `-ParmVarDecl 0x559ffb761d98 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x559ffb764b58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb764c68 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x559ffb764ee8 <col:11>
|   `-ReturnStmt 0x559ffb764ed8 <col:11>
|     `-UnaryOperator 0x559ffb764ec0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559ffb764eb0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x559ffb764cd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ffb764cd8
  `-ParmVarDecl 0x559ffb764de8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb750b00 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb750c18 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x559ffb750cb8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x559ffb750d20 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x559ffb750d88 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x559ffb750df0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x559ffb750e50 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x559ffb750f10 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x559ffb750f70 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x559ffb750fd0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x559ffb7617d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x559ffb750cb8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x559ffb762148 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x559ffb7621a0 <col:12>
|-CXXConstructorDecl 0x559ffb761e08 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x559ffb761e08
| `-ParmVarDecl 0x559ffb761f18 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x559ffb761fb8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x559ffb761fb8
| `-ParmVarDecl 0x559ffb7620c8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x559ffb764240 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb73ec20 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559ffb73ed38 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x559ffb73edc8 <col:16, col:22> col:16 public
|-EnumDecl 0x559ffb73edf0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x559ffb73eef0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x559ffb73efd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb73eed0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x559ffb73eeb0 <col:21> 'int' 28
| `-EnumConstantDecl 0x559ffb73ef80 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x559ffb73efe8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb73ef60 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x559ffb73ef40 <col:22> 'int' 64
|-CXXMethodDecl 0x559ffb73f328 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x559ffb73f010 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ffb73f090 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x559ffb73f108 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ffb73f180 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ffb73f3e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x559ffb73f5e8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x559ffb73f460 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x559ffb73f4d8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ffb73f698 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x559ffb73f7f8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x559ffb73f708 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ffb73f8a0 <col:72> warn_unused_result ""
|-TypedefDecl 0x559ffb73fc00 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x559ffb73fb90 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x559ffb73fb30 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x559ffb73faf0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x559ffb2164e0 'void'
|       |-PointerType 0x559ffb4befc0 'unsigned char *'
|       | `-BuiltinType 0x559ffb2165e0 'unsigned char'
|       |-TypedefType 0x559ffb2bb370 'size_t' sugar
|       | |-Typedef 0x559ffb286be0 'size_t'
|       | `-BuiltinType 0x559ffb216640 'unsigned long'
|       `-PointerType 0x559ffb216ce0 'void *'
|         `-BuiltinType 0x559ffb2164e0 'void'
|-CXXMethodDecl 0x559ffb740078 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x559ffb73fc70 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x559ffb73fce8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ffb73fd80 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x559ffb73fe00 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x559ffb75a770 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x559ffb75a758 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x559ffb75a720 <col:58> 'int' 0
| |-ParmVarDecl 0x559ffb73fe80 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x559ffb75a798 <col:76> 'int' 0
| |-ParmVarDecl 0x559ffb73ff00 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x559ffb75a7b8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x559ffb740148 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x559ffb7401c8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559ffb740288 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x559ffb740328 <col:20>
| `-OptimizeNoneAttr 0x559ffb740380 <col:30>
|-CXXMethodDecl 0x559ffb7403f8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x559ffb740498 <col:20>
| `-OptimizeNoneAttr 0x559ffb7404f0 <col:30>
|-CXXMethodDecl 0x559ffb740568 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x559ffb740608 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x559ffb7406b8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x559ffb740758 <col:20>
| |-OptimizeNoneAttr 0x559ffb7407b0 <col:30>
| `-WarnUnusedResultAttr 0x559ffb7407d8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x559ffb740830 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x559ffb7408d0 <col:20>
| `-OptimizeNoneAttr 0x559ffb740928 <col:30>
|-CXXMethodDecl 0x559ffb740978 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x559ffb740a18 <col:20>
| `-OptimizeNoneAttr 0x559ffb740a70 <col:30>
|-CXXMethodDecl 0x559ffb740ab8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x559ffb740b58 <col:20>
| `-OptimizeNoneAttr 0x559ffb740bb0 <col:30>
|-CXXMethodDecl 0x559ffb740bf8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb740cb8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb740d80 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ffb740e48 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ffb740f08 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb741028 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x559ffb75a880 <col:54, line:99:5>
|   `-ReturnStmt 0x559ffb75a870 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x559ffb75a858 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x559ffb75a828 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559ffb751308
|         `-CXXThisExpr 0x559ffb75a818 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x559ffb7411c8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x559ffb7410d8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x559ffb75a930 <col:67, line:103:5>
|   `-BinaryOperator 0x559ffb75a910 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559ffb75a8a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559ffb751308
|     | `-CXXThisExpr 0x559ffb75a898 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559ffb75a8f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb75a8d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x559ffb7410d8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x559ffb7412c0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x559ffb75a9b0 <col:33, line:107:5>
|   `-ReturnStmt 0x559ffb75a9a0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x559ffb75a988 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x559ffb75a958 <col:16> 'void *' lvalue ->_destructor_argument 0x559ffb751370
|         `-CXXThisExpr 0x559ffb75a948 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x559ffb741380 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x559ffb75afe0 <col:25, line:113:5>
|   |-ParenExpr 0x559ffb75ad28 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x559ffb75acf8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75aa68 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559ffb75aa40 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x559ffb75aa08 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x559ffb75a9d8 <col:24> '<bound member function type>' ->shared 0x559ffb7403f8
|   |   |       `-ImplicitCastExpr 0x559ffb75aa28 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x559ffb75a9c8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559ffb75aac8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75aaa8 <col:42> 'int' 0
|   |   `-CallExpr 0x559ffb75ac58 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75ac40 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75ac20 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75ac98 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75ab38 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x559ffb75acb0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75ab60 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75acc8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75ab98 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x559ffb75ace0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75ac08 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75abf0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75abb8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x559ffb75af28 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x559ffb75ad58 <col:2> 'unsigned char *' lvalue ->_head 0x559ffb751110
|   | | `-CXXThisExpr 0x559ffb75ad48 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x559ffb75af10 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x559ffb75aef0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x559ffb75ad98 <col:10> 'unsigned char *' lvalue ->_data 0x559ffb751178
|   |     | `-CXXThisExpr 0x559ffb75ad88 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x559ffb75aed8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x559ffb75aeb8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x559ffb75add8 <col:18> 'unsigned char *' lvalue ->_tail 0x559ffb7511e0
|   |         | `-CXXThisExpr 0x559ffb75adc8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x559ffb75aea0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x559ffb75ae80 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x559ffb75ae18 <col:26> 'unsigned char *' lvalue ->_end 0x559ffb751248
|   |             | `-CXXThisExpr 0x559ffb75ae08 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x559ffb75ae68 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x559ffb75ae48 <col:33> 'int' 0
|   `-BinaryOperator 0x559ffb75afc0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559ffb75af58 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559ffb751308
|     | `-CXXThisExpr 0x559ffb75af48 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559ffb75afa8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x559ffb75af88 <col:16> 'int' 0
|-CXXMethodDecl 0x559ffb7414c0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559ffb741430 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb741568 <col:20>
| |-OptimizeNoneAttr 0x559ffb7415c0 <col:30>
| `-WarnUnusedResultAttr 0x559ffb7415e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x559ffb7416b8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559ffb741628 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb741760 <col:20>
| |-OptimizeNoneAttr 0x559ffb7417b8 <col:30>
| `-WarnUnusedResultAttr 0x559ffb7417e0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x559ffb741918 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x559ffb741820 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ffb7419c0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x559ffb741ac0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x559ffb741a30 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb741b68 <col:20>
| `-OptimizeNoneAttr 0x559ffb741bc0 <col:30>
|-CXXMethodDecl 0x559ffb741c88 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559ffb741bf8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ffb741d30 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x559ffb741e30 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x559ffb741da0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559ffb741ed8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x559ffb741fd8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x559ffb741f48 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb742080 <col:20>
| `-OptimizeNoneAttr 0x559ffb7420d8 <col:30>
|-CXXMethodDecl 0x559ffb742268 <line:269:5, col:99> col:13 used shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x559ffb742118 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x559ffb742190 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x559ffb75a7d8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x559ffb742318 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x559ffb742518 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559ffb742390 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x559ffb742408 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb742728 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559ffb7425d8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ffb742650 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb742938 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x559ffb7427e8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x559ffb742868 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x559ffb75a7e8 <col:39> 'int' 0
|-CXXMethodDecl 0x559ffb742a08 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x559ffb742ad0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559ffb742b98 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ffb742c58 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb742d20 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x559ffb742e68 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x559ffb742dd8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x559ffb743038 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559ffb742f28 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x559ffb742fa0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb743108 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x559ffb7431c8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x559ffb743268 <col:20>
| `-OptimizeNoneAttr 0x559ffb7432c0 <col:30>
|-CXXMethodDecl 0x559ffb743310 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x559ffb7433b0 <col:20>
| `-OptimizeNoneAttr 0x559ffb743408 <col:30>
|-CXXMethodDecl 0x559ffb743458 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ffb743518 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb7435e0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x559ffb743680 <col:20>
| `-OptimizeNoneAttr 0x559ffb7436d8 <col:30>
|-CXXMethodDecl 0x559ffb743828 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559ffb743718 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x559ffb743790 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb743978 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x559ffb7438e8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb743a50 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x559ffb743b10 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x559ffb743bb0 <col:20>
| `-OptimizeNoneAttr 0x559ffb743c08 <col:30>
|-CXXMethodDecl 0x559ffb743c58 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x559ffb743cf8 <col:20>
| `-OptimizeNoneAttr 0x559ffb743d50 <col:30>
|-CXXMethodDecl 0x559ffb743da0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ffb743e68 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x559ffb743f08 <col:20>
| `-OptimizeNoneAttr 0x559ffb743f60 <col:30>
|-CXXMethodDecl 0x559ffb743fa8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x559ffb7440c8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x559ffb744238 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x559ffb744178 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x559ffb744328 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x559ffb7443c8 <col:20>
| `-OptimizeNoneAttr 0x559ffb744420 <col:30>
|-CXXMethodDecl 0x559ffb744470 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x559ffb744530 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559ffb744768 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x559ffb7445e0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x559ffb744658 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb744818 <col:20>
| `-OptimizeNoneAttr 0x559ffb744870 <col:30>
|-CXXMethodDecl 0x559ffb744918 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x559ffb7449b8 <col:20>
| `-OptimizeNoneAttr 0x559ffb744a10 <col:30>
|-CXXMethodDecl 0x559ffb744a60 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x559ffb744b00 <col:20>
| `-OptimizeNoneAttr 0x559ffb744b58 <col:30>
|-CXXMethodDecl 0x559ffb744ba0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x559ffb744c40 <col:20>
| `-OptimizeNoneAttr 0x559ffb744c98 <col:30>
|-CXXMethodDecl 0x559ffb744d98 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x559ffb744cd0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x559ffb744e40 <col:20>
| `-OptimizeNoneAttr 0x559ffb744e98 <col:30>
|-CXXMethodDecl 0x559ffb745058 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x559ffb744ed0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x559ffb744f48 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb745108 <col:20>
| `-OptimizeNoneAttr 0x559ffb745160 <col:30>
|-CXXMethodDecl 0x559ffb745208 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x559ffb745328 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x559ffb745448 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x559ffb7454e8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x559ffb745510 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x559ffb745638 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x559ffb7456d8 <col:20>
| `-OptimizeNoneAttr 0x559ffb745730 <col:30>
|-CXXMethodDecl 0x559ffb7457d8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x559ffb745878 <col:20>
| `-OptimizeNoneAttr 0x559ffb7458d0 <col:30>
|-AccessSpecDecl 0x559ffb7458f8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x559ffb745920 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x559ffb745a20 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x559ffb745a70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb745a00 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x559ffb7459e0 <col:14> 'int' 48
|-CXXMethodDecl 0x559ffb745ad8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x559ffb745b78 <col:20>
| `-OptimizeNoneAttr 0x559ffb745bd0 <col:30>
|-CXXMethodDecl 0x559ffb745c48 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x559ffb745ce8 <col:20>
| `-OptimizeNoneAttr 0x559ffb745d40 <col:30>
|-CXXMethodDecl 0x559ffb745e08 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x559ffb745d78 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x559ffb745fa8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x559ffb746148 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x559ffb746058 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x559ffb7461f0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x559ffb7462f0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ffb7466a0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb7462d0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x559ffb7462b0 <col:9> 'int' 0
| |-EnumConstantDecl 0x559ffb746380 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ffb7466b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb746360 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x559ffb746340 <col:14> 'int' 1
| |-EnumConstantDecl 0x559ffb746410 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ffb7466d0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb7463f0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x559ffb7463d0 <col:14> 'int' 2
| |-EnumConstantDecl 0x559ffb7464a0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ffb7466e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb746480 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x559ffb746460 <col:14> 'int' 3
| |-EnumConstantDecl 0x559ffb746530 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ffb746700 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb746510 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x559ffb7464f0 <col:13> 'int' 4
| |-EnumConstantDecl 0x559ffb7465c0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559ffb746718 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb7465a0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x559ffb746580 <col:13> 'int' 5
| `-EnumConstantDecl 0x559ffb746650 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x559ffb746730 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb746630 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x559ffb746610 <col:14> 'int' 6
|-CXXMethodDecl 0x559ffb746798 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x559ffb746838 <col:20>
| `-OptimizeNoneAttr 0x559ffb746890 <col:30>
|-CXXMethodDecl 0x559ffb746988 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x559ffb7468c8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x559ffb746a30 <col:20>
| `-OptimizeNoneAttr 0x559ffb746a88 <col:30>
|-CXXMethodDecl 0x559ffb746af8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x559ffb746c20 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x559ffb746d98 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x559ffb746cd0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x559ffb746e60 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x559ffb746f28 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x559ffb747068 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x559ffb746fd8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x559ffb747110 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x559ffb747210 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559ffb747410 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb7471f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x559ffb7471d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x559ffb7472a0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559ffb747428 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb747280 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x559ffb747260 <col:45> 'int' 4
| |-EnumConstantDecl 0x559ffb747330 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559ffb747440 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb747310 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x559ffb7472f0 <col:24> 'int' 0
| `-EnumConstantDecl 0x559ffb7473c0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x559ffb747458 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb7473a0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x559ffb747380 <col:47> 'int' 16
|-CXXMethodDecl 0x559ffb7474b8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x559ffb747628 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x559ffb747568 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x559ffb7476d0 <col:20>
| `-OptimizeNoneAttr 0x559ffb747728 <col:30>
|-CXXMethodDecl 0x559ffb747778 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x559ffb75b100 <col:18, col:36>
|   `-ReturnStmt 0x559ffb75b0f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x559ffb75b0d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x559ffb75b0b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x559ffb75b088 <col:27> '<bound member function type>' ->xanno 0x559ffb7457d8
|           `-CXXThisExpr 0x559ffb75b078 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x559ffb747870 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x559ffb75b210 <col:30, col:48>
|   `-ReturnStmt 0x559ffb75b200 <col:32, col:45>
|     `-ImplicitCastExpr 0x559ffb75b1e8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x559ffb75b1c8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x559ffb75b198 <col:39> '<bound member function type>' ->xanno 0x559ffb745638
|           `-CXXThisExpr 0x559ffb75b188 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x559ffb747958 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x559ffb75b3a8 <col:24, col:50>
|   `-ReturnStmt 0x559ffb75b398 <col:26, col:47>
|     `-UnaryOperator 0x559ffb75b380 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ffb75b360 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x559ffb75b348 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ffb75b2f8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x559ffb750618
|         |   `-CXXMemberCallExpr 0x559ffb75b2d8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x559ffb75b2a8 <col:34> '<bound member function type>' ->xanno 0x559ffb7457d8
|         |       `-CXXThisExpr 0x559ffb75b298 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x559ffb75b328 <col:46> 'int' 0
|-CXXMethodDecl 0x559ffb747a60 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x559ffb75b578 <col:36, col:62>
|   `-ReturnStmt 0x559ffb75b568 <col:38, col:59>
|     `-UnaryOperator 0x559ffb75b550 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ffb75b530 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559ffb75b518 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ffb75b490 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x559ffb750618
|         |   `-CXXMemberCallExpr 0x559ffb75b470 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559ffb75b440 <col:46> '<bound member function type>' ->xanno 0x559ffb745638
|         |       `-CXXThisExpr 0x559ffb75b430 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559ffb75b4c0 <col:58> 'int' 0
|-CXXMethodDecl 0x559ffb747b78 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x559ffb75b710 <col:26, col:53>
|   `-ReturnStmt 0x559ffb75b700 <col:28, col:50>
|     `-UnaryOperator 0x559ffb75b6e8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ffb75b6c8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x559ffb75b6b0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ffb75b660 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x559ffb750918
|         |   `-CXXMemberCallExpr 0x559ffb75b640 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x559ffb75b610 <col:36> '<bound member function type>' ->xanno 0x559ffb7457d8
|         |       `-CXXThisExpr 0x559ffb75b600 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x559ffb75b690 <col:49> 'int' 0
|-CXXMethodDecl 0x559ffb747c98 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x559ffb75b8e8 <col:38, col:65>
|   `-ReturnStmt 0x559ffb75b8d8 <col:40, col:62>
|     `-UnaryOperator 0x559ffb75b8c0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559ffb75b8a0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x559ffb75b888 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ffb75b7f8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x559ffb750918
|         |   `-CXXMemberCallExpr 0x559ffb75b7d8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559ffb75b7a8 <col:48> '<bound member function type>' ->xanno 0x559ffb745638
|         |       `-CXXThisExpr 0x559ffb75b798 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559ffb75b828 <col:61> 'int' 0
|-CXXMethodDecl 0x559ffb747e48 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x559ffb747d50 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x559ffb75bfb8 <col:34, line:463:5>
|   |-ParenExpr 0x559ffb75be00 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x559ffb75bdd0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75ba38 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75ba08 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75b958 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75b940 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75b900 <col:23> 'int' lvalue ParmVar 0x559ffb747d50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75b920 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75b9e8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75b9b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75b978 <col:33> 'int' lvalue ParmVar 0x559ffb747d50 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559ffb75b9d0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559ffb75b998 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559ffb75ba98 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75ba78 <col:56> 'int' 0
|   |   `-CallExpr 0x559ffb75bd30 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75bd18 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75bcf8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75bd70 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75bb88 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559ffb75bd88 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75bbb8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75bda0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75bbf0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x559ffb75bdb8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75bce0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75bcc8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75bc88 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x559ffb75bfa8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x559ffb75bf90 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x559ffb75bf70 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559ffb75bf40 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559ffb75bef0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x559ffb750618
|         |   `-CXXMemberCallExpr 0x559ffb75bed0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559ffb75bea0 <col:9> '<bound member function type>' ->xanno 0x559ffb745638
|         |       `-CXXThisExpr 0x559ffb75be90 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x559ffb75bf58 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x559ffb75bf20 <col:21> 'int' lvalue ParmVar 0x559ffb747d50 'i' 'int'
|-CXXMethodDecl 0x559ffb748098 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x559ffb747f08 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x559ffb747f80 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559ffb75c648 <col:40, line:472:5>
|   |-ParenExpr 0x559ffb75c460 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x559ffb75c430 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75c110 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75c0e0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75c030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75c018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75bfd8 <col:23> 'int' lvalue ParmVar 0x559ffb747f08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75bff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75c0c0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75c090 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75c050 <col:33> 'int' lvalue ParmVar 0x559ffb747f08 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559ffb75c0a8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559ffb75c070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559ffb75c170 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75c150 <col:56> 'int' 0
|   |   `-CallExpr 0x559ffb75c390 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75c378 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75c358 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75c3d0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75c1e0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559ffb75c3e8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75c210 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75c400 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75c248 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x559ffb75c418 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75c340 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75c328 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75c2e8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x559ffb75c628 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x559ffb75c5d0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x559ffb75c5a0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x559ffb75c550 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x559ffb750618
|     | |   `-CXXMemberCallExpr 0x559ffb75c530 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x559ffb75c500 <col:2> '<bound member function type>' ->xanno 0x559ffb7457d8
|     | |       `-CXXThisExpr 0x559ffb75c4f0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x559ffb75c5b8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x559ffb75c580 <col:14> 'int' lvalue ParmVar 0x559ffb747f08 'i' 'int'
|     `-ImplicitCastExpr 0x559ffb75c610 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb75c5f0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x559ffb747f80 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x559ffb748258 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x559ffb748160 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559ffb75cdc8 <col:36, line:485:5>
|   |-ParenExpr 0x559ffb75cb30 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75cb00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75c7e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75c7b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75c6c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75c6a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75c668 <col:23> 'int' lvalue ParmVar 0x559ffb748160 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75c688 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75c790 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75c778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75c6e0 <col:33> 'int' lvalue ParmVar 0x559ffb748160 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75c758 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75c740 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75c700 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75c720 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ffb75c840 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75c820 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75ca60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75ca48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75ca28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75caa0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75c8b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ffb75cab8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75c8e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75cad0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75c920 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x559ffb75cae8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75ca10 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75c9f8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75c9b8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x559ffb75cdb8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x559ffb75cda0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x559ffb75cd88 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ffb75cd58 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x559ffb75ccf8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ffb75ccc8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ffb75cc40 <col:61, col:70> 'char const[48]' lvalue ->c 0x559ffb7504f0
|             |   `-CXXMemberCallExpr 0x559ffb75cc20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ffb75cbf0 <col:61> '<bound member function type>' ->xanno 0x559ffb745638
|             |       `-CXXThisExpr 0x559ffb75cbe0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ffb75cce0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ffb75cc70 <col:74> 'int' lvalue ParmVar 0x559ffb748160 'i' 'int'
|-CXXMethodDecl 0x559ffb7484a8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x559ffb748318 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ffb748390 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x559ffb75d518 <col:42, line:500:5>
|   |-ParenExpr 0x559ffb75d2b0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75d280 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75cf60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75cf30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75ce40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75ce28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75cde8 <col:23> 'int' lvalue ParmVar 0x559ffb748318 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75ce08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75cf10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75cef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75ce60 <col:33> 'int' lvalue ParmVar 0x559ffb748318 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75ced8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75cec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75ce80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75cea0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ffb75cfc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75cfa0 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75d1e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75d1c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75d1a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75d220 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75d030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ffb75d238 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75d068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75d250 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75d0a0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x559ffb75d268 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75d190 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75d178 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75d138 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x559ffb75d4f8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x559ffb75d4a8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ffb75d478 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x559ffb75d420 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ffb75d3f0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ffb75d3a0 <col:48, col:57> 'char [48]' lvalue ->c 0x559ffb7504f0
|     |     |   `-CXXMemberCallExpr 0x559ffb75d380 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ffb75d350 <col:48> '<bound member function type>' ->xanno 0x559ffb7457d8
|     |     |       `-CXXThisExpr 0x559ffb75d340 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ffb75d408 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ffb75d3d0 <col:61> 'int' lvalue ParmVar 0x559ffb748318 'i' 'int'
|     `-ImplicitCastExpr 0x559ffb75d4e0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb75d4c0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x559ffb748390 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x559ffb748668 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x559ffb748570 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559ffb75dc78 <col:35, line:513:5>
|   |-ParenExpr 0x559ffb75d988 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75d958 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75d6b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75d680 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75d590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75d578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75d538 <col:23> 'int' lvalue ParmVar 0x559ffb748570 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75d558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75d660 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75d648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75d5b0 <col:33> 'int' lvalue ParmVar 0x559ffb748570 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75d628 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75d610 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75d5d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75d5f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ffb75d710 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75d6f0 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75d8b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75d8a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75d880 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75d8f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75d780 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ffb75d910 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75d7b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75d928 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75d7f0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x559ffb75d940 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75d868 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75d850 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75d810 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x559ffb75dc68 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x559ffb75dc50 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x559ffb75dc38 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ffb75dc08 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x559ffb75db80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ffb75db50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ffb75db00 <col:60, col:69> 'char const[48]' lvalue ->c 0x559ffb7504f0
|             |   `-CXXMemberCallExpr 0x559ffb75dae0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ffb75dab0 <col:60> '<bound member function type>' ->xanno 0x559ffb745638
|             |       `-CXXThisExpr 0x559ffb75daa0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ffb75db68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ffb75db30 <col:73> 'int' lvalue ParmVar 0x559ffb748570 'i' 'int'
|-CXXMethodDecl 0x559ffb7488b8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x559ffb748728 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ffb7487a0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x559ffb75e398 <col:41, line:528:5>
|   |-ParenExpr 0x559ffb75e120 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75e0f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75de10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75dde0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75dcf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75dcd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75dc98 <col:23> 'int' lvalue ParmVar 0x559ffb748728 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75dcb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75ddc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75dda8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75dd10 <col:33> 'int' lvalue ParmVar 0x559ffb748728 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75dd88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75dd70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75dd30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75dd50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559ffb75de70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75de50 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75e050 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75e038 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75e018 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75e090 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75dee0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559ffb75e0a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75df18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75e0c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75df50 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x559ffb75e0d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75e000 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75dfe8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75dfa8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x559ffb75e378 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x559ffb75e328 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ffb75e2f8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x559ffb75e2a0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ffb75e260 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ffb75e210 <col:47, col:56> 'char [48]' lvalue ->c 0x559ffb7504f0
|     |     |   `-CXXMemberCallExpr 0x559ffb75e1f0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ffb75e1c0 <col:47> '<bound member function type>' ->xanno 0x559ffb7457d8
|     |     |       `-CXXThisExpr 0x559ffb75e1b0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ffb75e278 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ffb75e240 <col:60> 'int' lvalue ParmVar 0x559ffb748728 'i' 'int'
|     `-ImplicitCastExpr 0x559ffb75e360 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb75e340 <col:65> 'int16_t':'short' lvalue ParmVar 0x559ffb7487a0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x559ffb748a78 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x559ffb748980 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559ffb75ea68 <col:36, line:541:5>
|   |-ParenExpr 0x559ffb75e808 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75e7d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75e530 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75e500 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75e410 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75e3f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75e3b8 <col:23> 'int' lvalue ParmVar 0x559ffb748980 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75e3d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75e4e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75e4c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75e430 <col:33> 'int' lvalue ParmVar 0x559ffb748980 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75e4a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75e490 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75e450 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75e470 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559ffb75e590 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75e570 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75e738 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75e720 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75e700 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75e778 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75e600 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559ffb75e790 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75e638 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75e7a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75e670 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x559ffb75e7c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75e6e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75e6d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75e690 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x559ffb75ea58 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x559ffb75ea40 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x559ffb75ea28 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ffb75e9f8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x559ffb75e9a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ffb75e970 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ffb75e920 <col:61, col:70> 'char const[48]' lvalue ->c 0x559ffb7504f0
|             |   `-CXXMemberCallExpr 0x559ffb75e900 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ffb75e8d0 <col:61> '<bound member function type>' ->xanno 0x559ffb745638
|             |       `-CXXThisExpr 0x559ffb75e8c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ffb75e988 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ffb75e950 <col:74> 'int' lvalue ParmVar 0x559ffb748980 'i' 'int'
|-CXXMethodDecl 0x559ffb748c48 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x559ffb748b38 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x559ffb748bb0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559ffb748cf8 <col:20>
| `-OptimizeNoneAttr 0x559ffb748d50 <col:30>
|-CXXMethodDecl 0x559ffb748e88 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x559ffb748d90 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559ffb75f138 <col:35, line:562:5>
|   |-ParenExpr 0x559ffb75eed8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75eea8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75ec00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75ebd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75eae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75eac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75ea88 <col:23> 'int' lvalue ParmVar 0x559ffb748d90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75eaa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75ebb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75eb98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75eb00 <col:33> 'int' lvalue ParmVar 0x559ffb748d90 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75eb78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75eb60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75eb20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75eb40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559ffb75ec60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75ec40 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75ee08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75edf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75edd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75ee48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75ecd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559ffb75ee60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75ed08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75ee78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75ed40 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x559ffb75ee90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75edb8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75eda0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75ed60 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x559ffb75f128 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x559ffb75f110 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x559ffb75f0f8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ffb75f0c8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x559ffb75f070 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ffb75f040 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ffb75eff0 <col:60, col:69> 'char const[48]' lvalue ->c 0x559ffb7504f0
|             |   `-CXXMemberCallExpr 0x559ffb75efd0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ffb75efa0 <col:60> '<bound member function type>' ->xanno 0x559ffb745638
|             |       `-CXXThisExpr 0x559ffb75ef90 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ffb75f058 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ffb75f020 <col:73> 'int' lvalue ParmVar 0x559ffb748d90 'i' 'int'
|-CXXMethodDecl 0x559ffb749098 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x559ffb748f48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ffb748fc0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x559ffb75f818 <col:41, line:577:5>
|   |-ParenExpr 0x559ffb75f5a8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75f578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75f2d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75f2a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75f1b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75f198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75f158 <col:23> 'int' lvalue ParmVar 0x559ffb748f48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75f178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75f280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75f268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75f1d0 <col:33> 'int' lvalue ParmVar 0x559ffb748f48 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75f248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75f230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75f1f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75f210 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559ffb75f330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75f310 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75f4d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75f4c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75f4a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75f518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75f3a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559ffb75f530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75f3d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75f548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75f410 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x559ffb75f560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75f488 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75f470 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75f430 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x559ffb75f7f8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x559ffb75f7a8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ffb75f778 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x559ffb75f718 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ffb75f6e8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ffb75f698 <col:47, col:56> 'char [48]' lvalue ->c 0x559ffb7504f0
|     |     |   `-CXXMemberCallExpr 0x559ffb75f678 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ffb75f648 <col:47> '<bound member function type>' ->xanno 0x559ffb7457d8
|     |     |       `-CXXThisExpr 0x559ffb75f638 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ffb75f700 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ffb75f6c8 <col:60> 'int' lvalue ParmVar 0x559ffb748f48 'i' 'int'
|     `-ImplicitCastExpr 0x559ffb75f7e0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb75f7c0 <col:65> 'int32_t':'int' lvalue ParmVar 0x559ffb748fc0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x559ffb749258 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x559ffb749160 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559ffb75ff48 <col:36, line:591:5>
|   |-ParenExpr 0x559ffb75fc88 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb75fc58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb75f9b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb75f980 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75f890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75f878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75f838 <col:23> 'int' lvalue ParmVar 0x559ffb749160 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75f858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb75f960 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb75f948 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75f8b0 <col:33> 'int' lvalue ParmVar 0x559ffb749160 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb75f928 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb75f910 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb75f8d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb75f8f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559ffb75fa10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb75f9f0 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb75fbb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb75fba0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb75fb80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb75fbf8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75fa80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559ffb75fc10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb75fab8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb75fc28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb75faf0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x559ffb75fc40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb75fb68 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb75fb50 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb75fb10 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x559ffb75ff38 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x559ffb75ff20 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x559ffb75ff08 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ffb75fed8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x559ffb75fe50 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ffb75fe20 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ffb75fdd0 <col:61, col:70> 'char const[48]' lvalue ->c 0x559ffb7504f0
|             |   `-CXXMemberCallExpr 0x559ffb75fdb0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ffb75fd80 <col:61> '<bound member function type>' ->xanno 0x559ffb745638
|             |       `-CXXThisExpr 0x559ffb75fd70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ffb75fe38 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ffb75fe00 <col:74> 'int' lvalue ParmVar 0x559ffb749160 'i' 'int'
|-CXXMethodDecl 0x559ffb7494a8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x559ffb749318 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ffb749390 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x559ffb760628 <col:42, line:606:5>
|   |-ParenExpr 0x559ffb7603b8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x559ffb760388 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb7600e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb7600b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb75ffc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb75ffa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb75ff68 <col:23> 'int' lvalue ParmVar 0x559ffb749318 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb75ff88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb760090 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559ffb760078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb75ffe0 <col:33> 'int' lvalue ParmVar 0x559ffb749318 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb760058 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb760040 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb760000 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559ffb760020 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559ffb760140 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb760120 <col:60> 'int' 0
|   |   `-CallExpr 0x559ffb7602e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559ffb7602d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb7602b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb760328 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb7601b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559ffb760340 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb7601e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb760358 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb760220 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x559ffb760370 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb760298 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb760280 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb760240 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x559ffb760608 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x559ffb7605b8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ffb760588 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x559ffb760528 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ffb7604f8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ffb7604a8 <col:48, col:57> 'char [48]' lvalue ->c 0x559ffb7504f0
|     |     |   `-CXXMemberCallExpr 0x559ffb760488 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ffb760458 <col:48> '<bound member function type>' ->xanno 0x559ffb7457d8
|     |     |       `-CXXThisExpr 0x559ffb760448 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ffb760510 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ffb7604d8 <col:61> 'int' lvalue ParmVar 0x559ffb749318 'i' 'int'
|     `-ImplicitCastExpr 0x559ffb7605f0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x559ffb7605d0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x559ffb749390 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x559ffb749640 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x559ffb749570 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x559ffb760e98 <col:33, line:620:5>
|   |-ParenExpr 0x559ffb760c10 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x559ffb760be0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb760830 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb760800 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb7606a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb760688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb760648 <col:23> 'int' lvalue ParmVar 0x559ffb749570 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb760668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb7607e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559ffb7607c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb7606c0 <col:33> 'int' lvalue ParmVar 0x559ffb749570 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb7607a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb760790 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb7606e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559ffb760768 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559ffb760750 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559ffb760718 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559ffb760890 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb760870 <col:79> 'int' 0
|   |   `-CallExpr 0x559ffb760b40 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x559ffb760b28 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb760b08 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb760b80 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb760978 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x559ffb760b98 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb7609c0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb760bb0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb7609f8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x559ffb760bc8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb760af0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb760ad8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb760a98 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x559ffb760e88 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x559ffb760e70 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x559ffb760e58 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559ffb760e28 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x559ffb760da0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x559ffb760d70 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559ffb760d20 <col:67, col:76> 'char const[48]' lvalue ->c 0x559ffb7504f0
|             |   `-CXXMemberCallExpr 0x559ffb760d00 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559ffb760cd0 <col:67> '<bound member function type>' ->xanno 0x559ffb745638
|             |       `-CXXThisExpr 0x559ffb760cc0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559ffb760d88 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559ffb760d50 <col:80> 'int' lvalue ParmVar 0x559ffb749570 'i' 'int'
|-CXXMethodDecl 0x559ffb749858 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x559ffb749700 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559ffb749780 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x559ffb7616c0 <col:45, line:635:5>
|   |-ParenExpr 0x559ffb761408 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x559ffb7613d8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559ffb7610a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559ffb761070 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559ffb760f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559ffb760ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559ffb760eb8 <col:23> 'int' lvalue ParmVar 0x559ffb749700 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559ffb760ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559ffb761050 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559ffb761038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559ffb760f30 <col:33> 'int' lvalue ParmVar 0x559ffb749700 'i' 'int'
|   |   |     `-BinaryOperator 0x559ffb761018 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559ffb761000 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559ffb760f50 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559ffb745a20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559ffb760fd8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559ffb760fc0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559ffb760f88 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559ffb761100 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559ffb7610e0 <col:79> 'int' 0
|   |   `-CallExpr 0x559ffb761338 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x559ffb761320 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559ffb761300 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559ffb2b20d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559ffb761378 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb761170 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x559ffb761390 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559ffb7611b8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559ffb7613a8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559ffb7611f0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x559ffb7613c0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559ffb7612e8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559ffb7612d0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559ffb761288 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x559ffb7616a0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x559ffb761608 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559ffb7615d8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x559ffb761578 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559ffb761548 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559ffb7614f8 <col:54, col:63> 'char [48]' lvalue ->c 0x559ffb7504f0
|     |     |   `-CXXMemberCallExpr 0x559ffb7614d8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559ffb7614a8 <col:54> '<bound member function type>' ->xanno 0x559ffb7457d8
|     |     |       `-CXXThisExpr 0x559ffb761498 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559ffb761560 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559ffb761528 <col:67> 'int' lvalue ParmVar 0x559ffb749700 'i' 'int'
|     `-CXXConstCastExpr 0x559ffb761670 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x559ffb761658 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x559ffb761620 <col:91> 'const void *' lvalue ParmVar 0x559ffb749780 'x' 'const void *'
|-CXXMethodDecl 0x559ffb749928 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x559ffb761748 <col:34, line:640:5>
|   `-ReturnStmt 0x559ffb761738 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x559ffb761720 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x559ffb7616f0 <col:16> 'Packet *' lvalue ->_data_packet 0x559ffb7510a8
|         `-CXXThisExpr 0x559ffb7616e0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x559ffb749a68 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x559ffb7499d8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559ffb75a808 <col:46> 'bool' true
|-CXXMethodDecl 0x559ffb749be8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x559ffb749b20 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x559ffb749c90 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x559ffb74a440 <line:660:22> "" ""
| |-EnumConstantDecl 0x559ffb749d90 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a4b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb749d70 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x559ffb749d50 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x559ffb73eef0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x559ffb749e20 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a4c8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb749e00 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x559ffb749de0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x559ffb73ef80 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x559ffb749eb0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a4e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb749e90 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559ffb749e70 <col:21> 'int' 0
| |-EnumConstantDecl 0x559ffb749f40 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a4f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb749f20 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x559ffb749f00 <col:19> 'int' 16
| |-EnumConstantDecl 0x559ffb749fd0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a510 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb749fb0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x559ffb749f90 <col:21> 'int' 16
| |-EnumConstantDecl 0x559ffb74a060 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a528 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb74a040 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x559ffb74a020 <col:19> 'int' 32
| |-EnumConstantDecl 0x559ffb74a0f0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a540 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb74a0d0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x559ffb74a0b0 <col:19> 'int' EnumConstant 0x559ffb749f40 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x559ffb74a180 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a558 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb74a160 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x559ffb74a140 <col:19> 'int' EnumConstant 0x559ffb74a060 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x559ffb74a250 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a570 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb74a230 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x559ffb74a210 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x559ffb74a1d0 <col:23> 'int' EnumConstant 0x559ffb74a180 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x559ffb74a1f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x559ffb74a320 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559ffb74a588 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb74a300 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x559ffb74a2e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x559ffb74a2a0 <col:23> 'int' EnumConstant 0x559ffb74a180 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x559ffb74a2c0 <col:40> 'int' 4
| `-EnumConstantDecl 0x559ffb74a3f0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x559ffb74a5a0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559ffb74a3d0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x559ffb74a3b0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x559ffb74a370 <col:23> 'int' EnumConstant 0x559ffb74a180 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x559ffb74a390 <col:40> 'int' 8
|-CXXMethodDecl 0x559ffb74a5e0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x559ffb74a680 <col:68> "" ""
|-CXXMethodDecl 0x559ffb74a718 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x559ffb74a7b8 <col:45> "" ""
|-CXXMethodDecl 0x559ffb74a850 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x559ffb74a8f0 <col:57> "" ""
|-CXXMethodDecl 0x559ffb74a988 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x559ffb74aa28 <col:45> "" ""
|-CXXMethodDecl 0x559ffb74aac0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x559ffb74ab60 <col:57> "" ""
|-CXXMethodDecl 0x559ffb74abf0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x559ffb74ac90 <col:51> "" ""
|-CXXMethodDecl 0x559ffb74ad20 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x559ffb74adc0 <col:63> "" ""
|-CXXMethodDecl 0x559ffb74ae50 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x559ffb74aef0 <col:53> "" ""
|-CXXMethodDecl 0x559ffb74af80 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x559ffb74b020 <col:65> "" ""
|-CXXMethodDecl 0x559ffb74b138 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x559ffb74b0a8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x559ffb74b1e0 <col:61> "" ""
|-CXXMethodDecl 0x559ffb74b378 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x559ffb74b268 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x559ffb74b2e0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x559ffb74b428 <col:67> "" ""
|-CXXMethodDecl 0x559ffb74b540 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x559ffb74b4b0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559ffb74b5e8 <col:63> "" ""
|-CXXMethodDecl 0x559ffb74b780 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x559ffb74b670 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ffb74b6e8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x559ffb74b830 <col:69> "" ""
|-CXXMethodDecl 0x559ffb74b948 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x559ffb74b8b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559ffb74b9f0 <col:63> "" ""
|-CXXMethodDecl 0x559ffb74e0c8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559ffb74dfb8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ffb74e030 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ffb74e178 <col:69> "" ""
|-CXXMethodDecl 0x559ffb74e290 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x559ffb74e200 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x559ffb74e338 <col:62> "" ""
|-CXXMethodDecl 0x559ffb74e4d0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x559ffb74e3c0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ffb74e438 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x559ffb74e580 <col:68> "" ""
|-CXXMethodDecl 0x559ffb74e698 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x559ffb74e608 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559ffb74e740 <col:63> "" ""
|-CXXMethodDecl 0x559ffb74e8d8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x559ffb74e7c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559ffb74e840 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x559ffb74e988 <col:69> "" ""
|-CXXMethodDecl 0x559ffb74ea18 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x559ffb74eab8 <col:64> "" ""
|-CXXMethodDecl 0x559ffb74eb48 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x559ffb74ebe8 <col:52> "" ""
|-CXXMethodDecl 0x559ffb74ec78 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x559ffb74ed18 <col:67> "" ""
|-CXXMethodDecl 0x559ffb74eda8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x559ffb74ee48 <col:55> "" ""
|-CXXMethodDecl 0x559ffb74ef60 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x559ffb74eed0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559ffb74f008 <col:58> "" ""
|-CXXMethodDecl 0x559ffb74f1a0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x559ffb74f090 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ffb74f108 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x559ffb74f250 <col:62> "" ""
|-CXXMethodDecl 0x559ffb74f368 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x559ffb74f2d8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559ffb74f410 <col:58> "" ""
|-CXXMethodDecl 0x559ffb74f5a8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x559ffb74f498 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ffb74f510 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x559ffb74f658 <col:62> "" ""
|-CXXMethodDecl 0x559ffb74f770 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x559ffb74f6e0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x559ffb74f818 <col:60> "" ""
|-CXXMethodDecl 0x559ffb74f9b0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x559ffb74f8a0 <col:34> col:37 'int'
| |-ParmVarDecl 0x559ffb74f918 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x559ffb74fa60 <col:64> "" ""
|-CXXMethodDecl 0x559ffb74fb78 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x559ffb74fae8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559ffb74fc20 <col:58> "" ""
|-CXXMethodDecl 0x559ffb74fdb8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x559ffb74fca8 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ffb74fd20 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x559ffb74fe68 <col:62> "" ""
|-CXXMethodDecl 0x559ffb74ff80 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x559ffb74fef0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x559ffb750028 <col:59> "" ""
|-CXXMethodDecl 0x559ffb7501c0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559ffb7500b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x559ffb750128 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559ffb750270 <col:63> "" ""
|-AccessSpecDecl 0x559ffb7502e0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x559ffb750308 prev 0x559ffb745510 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ffb750400 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x559ffb7504f0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x559ffb750618 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x559ffb750798 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x559ffb750918 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x559ffb750a98 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x559ffb7618c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559ffb762138 <col:11>
| |-CXXDestructorDecl 0x559ffb7619a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x559ffb761ad8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x559ffb761ad8
| | `-ParmVarDecl 0x559ffb761be8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x559ffb761c88 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ffb761c88
| | `-ParmVarDecl 0x559ffb761d98 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x559ffb764b58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559ffb764c68 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x559ffb764ee8 <col:11>
| |   `-ReturnStmt 0x559ffb764ed8 <col:11>
| |     `-UnaryOperator 0x559ffb764ec0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559ffb764eb0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x559ffb764cd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559ffb764cd8
|   `-ParmVarDecl 0x559ffb764de8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x559ffb750b00 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559ffb750c18 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x559ffb750cb8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x559ffb750d20 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x559ffb750d88 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x559ffb750df0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x559ffb750e50 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x559ffb750f10 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x559ffb750f70 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x559ffb750fd0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x559ffb7617d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x559ffb750cb8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x559ffb762148 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x559ffb7621a0 <col:12>
| |-CXXConstructorDecl 0x559ffb761e08 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x559ffb761e08
| | `-ParmVarDecl 0x559ffb761f18 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x559ffb761fb8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x559ffb761fb8
| | `-ParmVarDecl 0x559ffb7620c8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x559ffb764240 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x559ffb751048 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x559ffb7510a8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x559ffb751110 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x559ffb751178 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x559ffb7511e0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x559ffb751248 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x559ffb7512a8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x559ffb751308 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x559ffb751370 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x559ffb7513f8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x559ffb751048 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x559ffb761770 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559ffb7512a8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x559ffb7621b0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x559ffb762210 <col:21, line:755:5>
|-CXXConstructorDecl 0x559ffb751598 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x559ffb7514d8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x559ffb751690 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x559ffb751878 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x559ffb751780 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x559ffb751b48 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x559ffb751930 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559ffb7519a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559ffb751a20 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb751d68 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x559ffb751c18 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x559ffb751c90 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x559ffb75a348 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x559ffb751e28 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x559ffb751ea0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x559ffb751f18 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x559ffb75a4a0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559ffb75a410 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559ffb75a5e8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559ffb75a558 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x559ffb75a6e0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb833070 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559ffb833188 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x559ffb833218 <col:16, col:22> col:16 public
|-EnumDecl 0x559ffb833240 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x559ffb833340 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ffb833590 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb833320 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559ffb833300 <col:21> 'int' 0
| |-EnumConstantDecl 0x559ffb8333d0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ffb8335a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb8333b0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x559ffb833390 <col:24> 'int' 22
| |-EnumConstantDecl 0x559ffb833460 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ffb8335c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb833440 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x559ffb833420 <col:24> 'int' 34
| |-EnumConstantDecl 0x559ffb8334f0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559ffb8335d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559ffb8334d0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x559ffb8334b0 <col:25> 'int' 95
| `-EnumConstantDecl 0x559ffb833540 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x559ffb834f50 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559ffb835388 <col:7>
|-CXXConstructorDecl 0x559ffb835058 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x559ffb835058
| `-ParmVarDecl 0x559ffb835168 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x559ffb835208 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb835318 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x559ffb895270 <col:7>
`-CXXDestructorDecl 0x559ffb8374a8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559ffb833608 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x559ffb833768 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x559ffb8337f8 <col:32, col:38> col:32 public
|-TypedefDecl 0x559ffb833830 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x559ffb36b620 'uint32_t' sugar
|   |-Typedef 0x559ffb27f4c8 'uint32_t'
|   `-TypedefType 0x559ffb2585a0 '__uint32_t' sugar
|     |-Typedef 0x559ffb258198 '__uint32_t'
|     `-BuiltinType 0x559ffb216620 'unsigned int'
|-CXXConstructorDecl 0x559ffb833978 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x559ffb8338a0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x559ffb834e58 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559ffb835398 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559ffb834710 'base' 'int'
| | `-ImplicitCastExpr 0x559ffb834ef8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x559ffb834eb8 <col:16> 'int' lvalue ParmVar 0x559ffb8338a0 'b' 'int'
| `-CompoundStmt 0x559ffb835408 <col:19, line:1046:5>
|-CXXMethodDecl 0x559ffb833e70 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x559ffb833a40 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x559ffb833ac0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x559ffb833b38 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x559ffb833bb8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x559ffb833c78 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x559ffb833cf8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x559ffb8342c8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x559ffb833f40 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x559ffb834228 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x559ffb833fe8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x559ffb834088 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x559ffb834100 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x559ffb834e78 <col:82> 'const ArgContext' lvalue Var 0x559ffb827ea8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x559ffb836358 <col:94, line:1067:5>
| |   |-DeclStmt 0x559ffb835598 <line:1054:9, col:64>
| |   | `-VarDecl 0x559ffb835428 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x559ffb835550 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x559ffb8357b8 <line:1055:9, col:91>
| |   | `-VarDecl 0x559ffb8355c8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x559ffb835790 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x559ffb835770 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x559ffb835720 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x559ffb835700 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x559ffb8356a8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x559ffb835658 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x559ffb835688 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x559ffb8356e8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x559ffb8356c8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x559ffb835750 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x559ffb835918 <line:1056:9, col:27>
| |   | `-VarDecl 0x559ffb8358b0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x559ffb835d60 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x559ffb835c90 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x559ffb835c10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x559ffb735828 0x559ffb57ee08 0x559ffb57eae0 0x559ffb56f2b0 0x559ffb56ef60 0x559ffb56e850 0x559ffb5411c0 0x559ffb4ce690
| |   | | |-CallExpr 0x559ffb835b50 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x559ffb835940 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x559ffb8359f0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x559ffb8359c0 <col:19, col:23> '<bound member function type>' .begin 0x559ffb55e4b8
| |   | | | |   `-DeclRefExpr 0x559ffb8359a0 <col:19> 'const String' lvalue ParmVar 0x559ffb833fe8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x559ffb835a60 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x559ffb835a30 <col:32, col:36> '<bound member function type>' .end 0x559ffb55e6d0
| |   | | | |   `-DeclRefExpr 0x559ffb835a10 <col:32> 'const String' lvalue ParmVar 0x559ffb833fe8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x559ffb835a80 <col:43> 'const bool' lvalue Var 0x559ffb835428 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x559ffb835ae8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x559ffb835ac8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x559ffb835b10 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x559ffb8358b0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x559ffb835b30 <col:73> 'const int' lvalue Var 0x559ffb8355c8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x559ffb835bf0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x559ffb835bc0 <col:16, col:20> '<bound member function type>' .end 0x559ffb55e6d0
| |   | |     `-DeclRefExpr 0x559ffb835ba0 <col:16> 'const String' lvalue ParmVar 0x559ffb833fe8 'str' 'const String &'
| |   | `-BinaryOperator 0x559ffb835d40 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x559ffb835cd8 <col:13> 'int' lvalue ->status 0x559ffb834778
| |   |   | `-CXXThisExpr 0x559ffb835cc8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x559ffb835d28 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x559ffb835d08 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb8333d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x559ffb835fd8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x559ffb835e98 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x559ffb835e80 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x559ffb835e68 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x559ffb835d88 <col:13> 'int' lvalue ->status 0x559ffb834778
| |   | | |     `-CXXThisExpr 0x559ffb835d78 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x559ffb835e48 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x559ffb835e18 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x559ffb835dc8 <col:23> 'int' lvalue ->status 0x559ffb834778
| |   | |   |   `-CXXThisExpr 0x559ffb835db8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x559ffb835e30 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x559ffb835df8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x559ffb835fb8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x559ffb835f58 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x559ffb835f00 <col:13, col:18> '<bound member function type>' .error 0x559ffb6f9050
| |   |   | | `-DeclRefExpr 0x559ffb835ee0 <col:13> 'const ArgContext' lvalue ParmVar 0x559ffb834100 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x559ffb835f80 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x559ffb835f30 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x559ffb835fa8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x559ffb835f98 <col:20> 'bool' false
| |   |-DeclStmt 0x559ffb8361a8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x559ffb836150 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x559ffb8360e0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x559ffb836308 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x559ffb8361c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x559ffb502658
| |   | |-DeclRefExpr 0x559ffb836208 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x559ffb8358b0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x559ffb8362d8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x559ffb836250 <col:64> 'V' lvalue ParmVar 0x559ffb834088 'result' 'V &'
| |   `-ReturnStmt 0x559ffb836348 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x559ffb836338 <col:16> 'bool' true
| |-CXXMethodDecl 0x559ffb89da78 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x559ffb89d850 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x559ffb89d928 <col:46, col:49> col:49 used result 'unsigned int &'
| | |-ParmVarDecl 0x559ffb89d990 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x559ffb89f810 <col:94, line:1067:5>
| |   |-DeclStmt 0x559ffb89e288 <line:1054:9, col:64>
| |   | `-VarDecl 0x559ffb89e0a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x559ffb89e218 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x559ffb89e1e8 <col:36, col:55> 'const bool' lvalue Var 0x559ffb4f1870 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x559ffb89e468 <line:1055:9, col:91>
| |   | `-VarDecl 0x559ffb89e2a0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x559ffb89e3e8 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x559ffb89e3d0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x559ffb89e3b0 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x559ffb89e390 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x559ffb89e370 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x559ffb89e338 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x559ffb89e318 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x559ffb835688 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x559ffb89e358 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x559ffb8356c8 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x559ffb835750 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x559ffb89e600 <line:1056:9, col:27>
| |   | `-VarDecl 0x559ffb89e598 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x559ffb89ea88 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x559ffb89ea30 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x559ffb89e8e8 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x559ffb89e8b8 <col:13> '<bound member function type>' ->parse 0x559ffb833e70
| |   | | | | `-CXXThisExpr 0x559ffb89e8a8 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x559ffb89e748 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x559ffb89e718 <col:19, col:23> '<bound member function type>' .begin 0x559ffb55e4b8
| |   | | | |   `-DeclRefExpr 0x559ffb89e6f8 <col:19> 'const String' lvalue ParmVar 0x559ffb89d850 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x559ffb89e7b8 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x559ffb89e788 <col:32, col:36> '<bound member function type>' .end 0x559ffb55e6d0
| |   | | | |   `-DeclRefExpr 0x559ffb89e768 <col:32> 'const String' lvalue ParmVar 0x559ffb89d850 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x559ffb89e958 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x559ffb89e938 <col:43> 'const bool' lvalue Var 0x559ffb89e0a8 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x559ffb89e840 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x559ffb89e828 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x559ffb89e808 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
| |   | | | |-ImplicitCastExpr 0x559ffb89e970 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x559ffb89e868 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x559ffb89e598 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x559ffb89e9a8 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x559ffb89e988 <col:73> 'const int' lvalue Var 0x559ffb89e2a0 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x559ffb89ea10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x559ffb89e9e0 <col:16, col:20> '<bound member function type>' .end 0x559ffb55e6d0
| |   | |     `-DeclRefExpr 0x559ffb89e9c0 <col:16> 'const String' lvalue ParmVar 0x559ffb89d850 'str' 'const String &'
| |   | `-BinaryOperator 0x559ffb89ea68 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x559ffb835cd8 <col:13> 'int' lvalue ->status 0x559ffb834778
| |   |   | `-CXXThisExpr 0x559ffb835cc8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x559ffb89ea50 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x559ffb835d08 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb8333d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x559ffb89ec00 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x559ffb89eb20 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x559ffb89eb08 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x559ffb89eaf0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x559ffb835d88 <col:13> 'int' lvalue ->status 0x559ffb834778
| |   | | |     `-CXXThisExpr 0x559ffb835d78 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x559ffb89ead0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x559ffb89eaa0 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x559ffb835dc8 <col:23> 'int' lvalue ->status 0x559ffb834778
| |   | |   |   `-CXXThisExpr 0x559ffb835db8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x559ffb89eab8 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x559ffb835df8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x559ffb89ebe0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x559ffb89eb90 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x559ffb89eb60 <col:13, col:18> '<bound member function type>' .error 0x559ffb6f9050
| |   |   | | `-DeclRefExpr 0x559ffb89eb40 <col:13> 'const ArgContext' lvalue ParmVar 0x559ffb89d990 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x559ffb89ebb8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x559ffb835f30 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x559ffb89ebd0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x559ffb835f98 <col:20> 'bool' false
| |   |-DeclStmt 0x559ffb89f148 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x559ffb89f0f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x559ffb89f0a0 'typename make_unsigned<unsigned int>::type' sugar
| |   |     `-TypedefType 0x559ffb89f080 'make_unsigned<unsigned int>::type' sugar
| |   |       |-Typedef 0x559ffb89f010 'type'
| |   |       `-ElaboratedType 0x559ffb89efc0 'typename integer_traits<unsigned int>::unsigned_type' sugar
| |   |         `-TypedefType 0x559ffb89efa0 'integer_traits<unsigned int>::unsigned_type' sugar
| |   |           |-Typedef 0x559ffb4f19c8 'unsigned_type'
| |   |           `-BuiltinType 0x559ffb216620 'unsigned int'
| |   |-CallExpr 0x559ffb89f7a0 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x559ffb89f788 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x559ffb89f708 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x559ffb89f5e8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x559ffb502658 'extract_integer')
| |   | |-ImplicitCastExpr 0x559ffb89f7e8 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x559ffb89f7d0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x559ffb89f1a8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x559ffb89e598 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x559ffb89f278 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
| |   |   `-DeclRefExpr 0x559ffb89f228 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x559ffb89d928 'result' 'unsigned int &'
| |   `-ReturnStmt 0x559ffb89f800 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x559ffb836338 <col:16> 'bool' true
| `-CXXMethodDecl 0x559ffb8ab298 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x559ffb8ab070 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x559ffb8ab148 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x559ffb8ab1b0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x559ffb8acb68 <col:94, line:1067:5>
|     |-DeclStmt 0x559ffb8abaa8 <line:1054:9, col:64>
|     | `-VarDecl 0x559ffb8ab8c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x559ffb8aba38 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x559ffb8aba08 <col:36, col:55> 'const bool' lvalue Var 0x559ffb4f25c8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x559ffb8abc88 <line:1055:9, col:91>
|     | `-VarDecl 0x559ffb8abac0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x559ffb8abc08 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x559ffb8abbf0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x559ffb8abbd0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x559ffb8abbb0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x559ffb8abb90 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x559ffb8abb58 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x559ffb8abb38 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x559ffb835688 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x559ffb8abb78 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x559ffb8356c8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x559ffb835750 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x559ffb8abda0 <line:1056:9, col:27>
|     | `-VarDecl 0x559ffb8abd38 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x559ffb8ac228 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x559ffb8ac1d0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x559ffb8ac088 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x559ffb8ac058 <col:13> '<bound member function type>' ->parse 0x559ffb833e70
|     | | | | `-CXXThisExpr 0x559ffb8ac048 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x559ffb8abee8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559ffb8abeb8 <col:19, col:23> '<bound member function type>' .begin 0x559ffb55e4b8
|     | | | |   `-DeclRefExpr 0x559ffb8abe98 <col:19> 'const String' lvalue ParmVar 0x559ffb8ab070 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x559ffb8abf58 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559ffb8abf28 <col:32, col:36> '<bound member function type>' .end 0x559ffb55e6d0
|     | | | |   `-DeclRefExpr 0x559ffb8abf08 <col:32> 'const String' lvalue ParmVar 0x559ffb8ab070 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x559ffb8ac0f8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x559ffb8ac0d8 <col:43> 'const bool' lvalue Var 0x559ffb8ab8c8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x559ffb8abfe0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x559ffb8abfc8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x559ffb8abfa8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x559ffb8ac110 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x559ffb8ac008 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x559ffb8abd38 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x559ffb8ac148 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x559ffb8ac128 <col:73> 'const int' lvalue Var 0x559ffb8abac0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x559ffb8ac1b0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x559ffb8ac180 <col:16, col:20> '<bound member function type>' .end 0x559ffb55e6d0
|     | |     `-DeclRefExpr 0x559ffb8ac160 <col:16> 'const String' lvalue ParmVar 0x559ffb8ab070 'str' 'const String &'
|     | `-BinaryOperator 0x559ffb8ac208 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x559ffb835cd8 <col:13> 'int' lvalue ->status 0x559ffb834778
|     |   | `-CXXThisExpr 0x559ffb835cc8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x559ffb8ac1f0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x559ffb835d08 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb8333d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x559ffb8ac3a0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x559ffb8ac2c0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x559ffb8ac2a8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x559ffb8ac290 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x559ffb835d88 <col:13> 'int' lvalue ->status 0x559ffb834778
|     | | |     `-CXXThisExpr 0x559ffb835d78 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x559ffb8ac270 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x559ffb8ac240 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x559ffb835dc8 <col:23> 'int' lvalue ->status 0x559ffb834778
|     | |   |   `-CXXThisExpr 0x559ffb835db8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x559ffb8ac258 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x559ffb835df8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x559ffb8ac380 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x559ffb8ac330 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x559ffb8ac300 <col:13, col:18> '<bound member function type>' .error 0x559ffb6f9050
|     |   | | `-DeclRefExpr 0x559ffb8ac2e0 <col:13> 'const ArgContext' lvalue ParmVar 0x559ffb8ab1b0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x559ffb8ac358 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x559ffb835f30 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x559ffb8ac370 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x559ffb835f98 <col:20> 'bool' false
|     |-DeclStmt 0x559ffb8ac8e8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x559ffb8ac890 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x559ffb8ac840 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x559ffb8ac820 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x559ffb8ac7b0 'type'
|     |       `-ElaboratedType 0x559ffb8ac760 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x559ffb8ac740 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x559ffb4f2720 'unsigned_type'
|     |           `-BuiltinType 0x559ffb216620 'unsigned int'
|     |-CallExpr 0x559ffb8acaf8 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x559ffb8acae0 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x559ffb8acab8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x559ffb89f5e8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x559ffb502658 'extract_integer')
|     | |-ImplicitCastExpr 0x559ffb8acb40 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x559ffb8acb28 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x559ffb8ac948 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x559ffb8abd38 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x559ffb8aca18 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x559ffb8ac9c8 <col:64> 'int':'int' lvalue ParmVar 0x559ffb8ab148 'result' 'int &'
|     `-ReturnStmt 0x559ffb8acb58 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x559ffb836338 <col:16> 'bool' true
|-FunctionTemplateDecl 0x559ffb834688 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x559ffb834338 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x559ffb8345e8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x559ffb8343e8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x559ffb834488 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x559ffb834500 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x559ffb834e98 <col:71> 'const ArgContext' lvalue Var 0x559ffb827ea8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x559ffb836ac8 <col:83, line:1083:5>
| |   |-DeclStmt 0x559ffb836420 <line:1071:9, col:12>
| |   | `-VarDecl 0x559ffb8363b8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x559ffb836aa0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x559ffb8366b0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x559ffb836538 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x559ffb836500 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x559ffb836448 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x559ffb8364a0 <col:31> 'const String' lvalue ParmVar 0x559ffb8343e8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x559ffb8364c0 <col:36> 'V' lvalue Var 0x559ffb8363b8 'x' 'V'
| |     | |   `-DeclRefExpr 0x559ffb8364e0 <col:39> 'const ArgContext' lvalue ParmVar 0x559ffb834500 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x559ffb836690 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x559ffb836670 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x559ffb836658 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x559ffb836640 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x559ffb836560 <col:17> 'int' lvalue ->status 0x559ffb834778
| |     |     |     `-CXXThisExpr 0x559ffb836550 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x559ffb836620 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x559ffb8365f0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x559ffb8365a0 <col:27> 'int' lvalue ->status 0x559ffb834778
| |     |       |   `-CXXThisExpr 0x559ffb836590 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x559ffb836608 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x559ffb8365d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x559ffb8366e0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x559ffb8366d0 <col:20> 'bool' false
| |     `-IfStmt 0x559ffb836a78 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x559ffb836780 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x559ffb836750 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x559ffb836700 <col:18> 'int' lvalue ->status 0x559ffb834778
| |       | |   `-CXXThisExpr 0x559ffb8366f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x559ffb836768 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x559ffb836730 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x559ffb8369b8 <col:42, line:1079:9>
| |       | |-CallExpr 0x559ffb836960 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x559ffb8367b0 <line:1076:13> '<bound member function type>' ->range_error 0x559ffb834d88
| |       | | | `-CXXThisExpr 0x559ffb8367a0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x559ffb8367e0 <col:25> 'const ArgContext' lvalue ParmVar 0x559ffb834500 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x559ffb8368c0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x559ffb836938 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x559ffb836918 <col:43> 'V' lvalue Var 0x559ffb8363b8 'x' 'V'
| |       | `-ReturnStmt 0x559ffb8369a8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x559ffb836998 <col:20> 'bool' false
| |       `-CompoundStmt 0x559ffb836a58 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x559ffb836a18 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x559ffb8369d8 <col:13> 'V' lvalue ParmVar 0x559ffb834488 'result' 'V &'
| |         | `-DeclRefExpr 0x559ffb8369f8 <col:22> 'V' lvalue Var 0x559ffb8363b8 'x' 'V'
| |         `-ReturnStmt 0x559ffb836a48 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x559ffb836a38 <col:20> 'bool' true
| |-CXXMethodDecl 0x559ffb89d438 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x559ffb89d210 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x559ffb89d2e8 <col:35, col:38> col:38 used result 'unsigned int &'
| | |-ParmVarDecl 0x559ffb89d350 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x559ffb89e088 <col:83, line:1083:5>
| |   |-DeclStmt 0x559ffb89d6c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x559ffb89d658 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
| |   `-IfStmt 0x559ffb89e060 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x559ffb89dcf0 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x559ffb89dc18 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x559ffb89dbe0 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x559ffb89db98 <col:14> '<bound member function type>' ->parse_saturating 0x559ffb89da78
| |     | |   | `-CXXThisExpr 0x559ffb89db88 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x559ffb89d730 <col:31> 'const String' lvalue ParmVar 0x559ffb89d210 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x559ffb89d750 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x559ffb89d658 'x' 'unsigned int':'unsigned int'
| |     | |   `-DeclRefExpr 0x559ffb89d770 <col:39> 'const ArgContext' lvalue ParmVar 0x559ffb89d350 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x559ffb89dcd0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x559ffb89dcb0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x559ffb89dc98 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x559ffb89dc80 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x559ffb836560 <col:17> 'int' lvalue ->status 0x559ffb834778
| |     |     |     `-CXXThisExpr 0x559ffb836550 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x559ffb89dc60 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x559ffb89dc30 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x559ffb8365a0 <col:27> 'int' lvalue ->status 0x559ffb834778
| |     |       |   `-CXXThisExpr 0x559ffb836590 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x559ffb89dc48 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x559ffb8365d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x559ffb89dd10 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x559ffb8366d0 <col:20> 'bool' false
| |     `-IfStmt 0x559ffb89e038 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x559ffb89dd50 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x559ffb89dd20 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x559ffb836700 <col:18> 'int' lvalue ->status 0x559ffb834778
| |       | |   `-CXXThisExpr 0x559ffb8366f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x559ffb89dd38 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x559ffb836730 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x559ffb89df70 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x559ffb89dee0 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x559ffb8367b0 <line:1076:13> '<bound member function type>' ->range_error 0x559ffb834d88
| |       | | | `-CXXThisExpr 0x559ffb8367a0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x559ffb89dd70 <col:25> 'const ArgContext' lvalue ParmVar 0x559ffb89d350 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x559ffb89df48 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x559ffb89df18 <col:31, col:50> 'const bool' lvalue Var 0x559ffb4f1870 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x559ffb89deb8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x559ffb89dea0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x559ffb89de88 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x559ffb89de68 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x559ffb89d658 'x' 'unsigned int':'unsigned int'
| |       | `-ReturnStmt 0x559ffb89df60 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x559ffb836998 <col:20> 'bool' false
| |       `-CompoundStmt 0x559ffb89e018 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x559ffb89dfe8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
| |         | |-DeclRefExpr 0x559ffb89df90 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x559ffb89d2e8 'result' 'unsigned int &'
| |         | `-ImplicitCastExpr 0x559ffb89dfd0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x559ffb89dfb0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x559ffb89d658 'x' 'unsigned int':'unsigned int'
| |         `-ReturnStmt 0x559ffb89e008 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x559ffb836a38 <col:20> 'bool' true
| `-CXXMethodDecl 0x559ffb8aacd8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x559ffb8aaab0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x559ffb8aab88 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x559ffb8aabf0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x559ffb8ab8a8 <col:83, line:1083:5>
|     |-DeclStmt 0x559ffb8aaf60 <line:1071:9, col:12>
|     | `-VarDecl 0x559ffb8aaef8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x559ffb8ab880 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x559ffb8ab510 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x559ffb8ab438 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x559ffb8ab400 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x559ffb8ab3b8 <col:14> '<bound member function type>' ->parse_saturating 0x559ffb8ab298
|       | |   | `-CXXThisExpr 0x559ffb8ab3a8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x559ffb8aafd0 <col:31> 'const String' lvalue ParmVar 0x559ffb8aaab0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x559ffb8aaff0 <col:36> 'int':'int' lvalue Var 0x559ffb8aaef8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x559ffb8ab010 <col:39> 'const ArgContext' lvalue ParmVar 0x559ffb8aabf0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x559ffb8ab4f0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x559ffb8ab4d0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x559ffb8ab4b8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x559ffb8ab4a0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x559ffb836560 <col:17> 'int' lvalue ->status 0x559ffb834778
|       |     |     `-CXXThisExpr 0x559ffb836550 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x559ffb8ab480 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x559ffb8ab450 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x559ffb8365a0 <col:27> 'int' lvalue ->status 0x559ffb834778
|       |       |   `-CXXThisExpr 0x559ffb836590 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x559ffb8ab468 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x559ffb8365d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x559ffb8ab530 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x559ffb8366d0 <col:20> 'bool' false
|       `-IfStmt 0x559ffb8ab858 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x559ffb8ab570 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x559ffb8ab540 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x559ffb836700 <col:18> 'int' lvalue ->status 0x559ffb834778
|         | |   `-CXXThisExpr 0x559ffb8366f0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x559ffb8ab558 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x559ffb836730 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559ffb833460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x559ffb8ab790 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x559ffb8ab700 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x559ffb8367b0 <line:1076:13> '<bound member function type>' ->range_error 0x559ffb834d88
|         | | | `-CXXThisExpr 0x559ffb8367a0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x559ffb8ab590 <col:25> 'const ArgContext' lvalue ParmVar 0x559ffb8aabf0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x559ffb8ab768 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x559ffb8ab738 <col:31, col:50> 'const bool' lvalue Var 0x559ffb4f25c8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x559ffb8ab6d8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x559ffb8ab6c0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x559ffb8ab6a8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x559ffb8ab688 <col:43> 'int':'int' lvalue Var 0x559ffb8aaef8 'x' 'int':'int'
|         | `-ReturnStmt 0x559ffb8ab780 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x559ffb836998 <col:20> 'bool' false
|         `-CompoundStmt 0x559ffb8ab838 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x559ffb8ab808 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x559ffb8ab7b0 <col:13> 'int':'int' lvalue ParmVar 0x559ffb8aab88 'result' 'int &'
|           | `-ImplicitCastExpr 0x559ffb8ab7f0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x559ffb8ab7d0 <col:22> 'int':'int' lvalue Var 0x559ffb8aaef8 'x' 'int':'int'
|           `-ReturnStmt 0x559ffb8ab828 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x559ffb836a38 <col:20> 'bool' true
|-FieldDecl 0x559ffb834710 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x559ffb834778 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x559ffb8347c8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x559ffb834a80 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x559ffb834808 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x559ffb834888 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x559ffb834900 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x559ffb834980 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x559ffb834d88 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x559ffb834b50 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x559ffb834bc8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x559ffb834c60 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x559ffb837328 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x559ffb837328
| `-ParmVarDecl 0x559ffb837438 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x559ffb8375b8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb8376c8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559ffb895280 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ffb895250 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x559ffb895220 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ffb8951f0 <col:7> 'IntArg' lvalue ParmVar 0x559ffb8376c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x559ffb834710 'base' 'int'
| | `-ImplicitCastExpr 0x559ffb895378 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ffb895348 <col:7> 'int' xvalue .base 0x559ffb834710
| |     `-CXXStaticCastExpr 0x559ffb895318 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ffb8952e8 <col:7> 'IntArg' lvalue ParmVar 0x559ffb8376c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x559ffb834778 'status' 'int'
| | `-ImplicitCastExpr 0x559ffb895448 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559ffb895418 <col:7> 'int' xvalue .status 0x559ffb834778
| |     `-CXXStaticCastExpr 0x559ffb8953e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x559ffb8953b8 <col:7> 'IntArg' lvalue ParmVar 0x559ffb8376c8 '' 'IntArg &&'
| `-CompoundStmt 0x559ffb8954a0 <col:7>
`-CXXDestructorDecl 0x559ffb8943e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ffb83b8c0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x559ffb83bb18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559ffb894308 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ffb894880 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x559ffb894860 <<invalid sloc>> 'int'
| `-CompoundStmt 0x559ffb8948f0 <col:19>
|-CXXConstructorDecl 0x559ffb8944e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x559ffb8944e8
| `-ParmVarDecl 0x559ffb8945f8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x559ffb894698 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb8947a8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ffb8954b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ffb8951d0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x559ffb8951a0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x559ffb895170 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x559ffb8947a8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x559ffb895520 <col:19>
`-CXXDestructorDecl 0x559ffb894930 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559ffb83bbf0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x559ffb83be48 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x559ffb8a7228 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ffb8a76c0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x559ffb8a76a0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x559ffb8a7730 <col:19>
|-CXXConstructorDecl 0x559ffb8a7328 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x559ffb8a7328
| `-ParmVarDecl 0x559ffb8a7438 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x559ffb8a74d8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559ffb8a75e8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x559ffb8a7fd0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559ffb8a7fb0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x559ffb8a7f80 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x559ffb8a7f50 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x559ffb8a75e8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x559ffb8a8040 <col:19>
`-CXXDestructorDecl 0x559ffb8a7770 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
