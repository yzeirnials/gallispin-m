
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Port
         0 |   int idx
         4 |   int port
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct Router::element_landmark_t
         0 |   uint32_t first_landmarkid
         8 |   class String filename
         8 |     struct String::rep_t _r
         8 |       const char * data
        16 |       int length
        24 |       struct String::memo_t * memo
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Connection
         0 |   struct Router::Port [2] p
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756572d998 prev 0x557565725138 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55756572da90 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55756572db20 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55756572db98 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55756572dc58 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55756572dd20 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55756572de98 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55756572ddd0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55756572df40 <col:24>
| `-OptimizeNoneAttr 0x55756572df98 <col:34>
|-CXXMethodDecl 0x55756572dfe0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55756572e298 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55756572e090 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55756572e108 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55756572e188 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55756572e350 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55756572e388 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55756572e3f0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55756572e478 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55756572e798 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55756572e530 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55756572e5a8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55756572e620 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55756572e6a0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55756572e8b0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x557565736228 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x557565736228
| `-ParmVarDecl 0x557565736338 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5575657363d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5575657363d8
| `-ParmVarDecl 0x5575657364e8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x557565924b10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Element *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<unsigned int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<struct Router::element_landmark_t> >
         0 |   vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::element_landmark_t>
         0 |   class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
         0 |     vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::Connection>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<void *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Router
         0 |   class Master * _master
         8 |   class atomic_uint32_t _runcount
         8 |     uint32_t _val
        12 |   volatile int _state
    16:0-0 |   _Bool _have_connections
    16:1-1 |   _Bool _conn_sorted
    16:2-2 |   _Bool _have_configuration
        20 |   volatile int _running
        24 |   class atomic_uint32_t _refcount
        24 |     uint32_t _val
        32 |   class Vector<class Element *> _elements
        32 |     class vector_memory<class sized_array_memory<8> > vm_
        32 |       vector_memory<class sized_array_memory<8> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
        48 |   class Vector<class String> _element_names
        48 |     class vector_memory<class typed_array_memory<class String> > vm_
        48 |       vector_memory<class typed_array_memory<class String> >::type * l_
        56 |       vector_memory::size_type n_
        60 |       vector_memory::size_type capacity_
        64 |   class Vector<class String> _element_configurations
        64 |     class vector_memory<class typed_array_memory<class String> > vm_
        64 |       vector_memory<class typed_array_memory<class String> >::type * l_
        72 |       vector_memory::size_type n_
        76 |       vector_memory::size_type capacity_
        80 |   class Vector<unsigned int> _element_landmarkids
        80 |     class vector_memory<class sized_array_memory<4> > vm_
        80 |       vector_memory<class sized_array_memory<4> >::type * l_
        88 |       vector_memory::size_type n_
        92 |       vector_memory::size_type capacity_
        96 |   class Vector<int> _element_home_thread_ids
        96 |     class vector_memory<class sized_array_memory<4> > vm_
        96 |       vector_memory<class sized_array_memory<4> >::type * l_
       104 |       vector_memory::size_type n_
       108 |       vector_memory::size_type capacity_
       112 |   class Vector<struct Router::element_landmark_t> _element_landmarks
       112 |     class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
       112 |       vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   uint32_t _last_landmarkid
       136 |   class Vector<int> _element_name_sorter
       136 |     class vector_memory<class sized_array_memory<4> > vm_
       136 |       vector_memory<class sized_array_memory<4> >::type * l_
       144 |       vector_memory::size_type n_
       148 |       vector_memory::size_type capacity_
       152 |   Vector<int> [2] _element_gport_offset
       184 |   class Vector<int> _element_configure_order
       184 |     class vector_memory<class sized_array_memory<4> > vm_
       184 |       vector_memory<class sized_array_memory<4> >::type * l_
       192 |       vector_memory::size_type n_
       196 |       vector_memory::size_type capacity_
       200 |   class Vector<struct Router::Connection> _conn
       200 |     class vector_memory<class sized_array_memory<16> > vm_
       200 |       vector_memory<class sized_array_memory<16> >::type * l_
       208 |       vector_memory::size_type n_
       212 |       vector_memory::size_type capacity_
       216 |   class Vector<int> _conn_output_sorter
       216 |     class vector_memory<class sized_array_memory<4> > vm_
       216 |       vector_memory<class sized_array_memory<4> >::type * l_
       224 |       vector_memory::size_type n_
       228 |       vector_memory::size_type capacity_
       232 |   class Vector<class String> _requirements
       232 |     class vector_memory<class typed_array_memory<class String> > vm_
       232 |       vector_memory<class typed_array_memory<class String> >::type * l_
       240 |       vector_memory::size_type n_
       244 |       vector_memory::size_type capacity_
       248 |   class Vector<int> _ehandler_first_by_element
       248 |     class vector_memory<class sized_array_memory<4> > vm_
       248 |       vector_memory<class sized_array_memory<4> >::type * l_
       256 |       vector_memory::size_type n_
       260 |       vector_memory::size_type capacity_
       264 |   class Vector<int> _ehandler_to_handler
       264 |     class vector_memory<class sized_array_memory<4> > vm_
       264 |       vector_memory<class sized_array_memory<4> >::type * l_
       272 |       vector_memory::size_type n_
       276 |       vector_memory::size_type capacity_
       280 |   class Vector<int> _ehandler_next
       280 |     class vector_memory<class sized_array_memory<4> > vm_
       280 |       vector_memory<class sized_array_memory<4> >::type * l_
       288 |       vector_memory::size_type n_
       292 |       vector_memory::size_type capacity_
       296 |   class Vector<int> _handler_first_by_name
       296 |     class vector_memory<class sized_array_memory<4> > vm_
       296 |       vector_memory<class sized_array_memory<4> >::type * l_
       304 |       vector_memory::size_type n_
       308 |       vector_memory::size_type capacity_
       312 |   class Handler ** _handler_bufs
       320 |   int _nhandlers_bufs
       324 |   int _free_handler
       328 |   class Vector<class String> _attachment_names
       328 |     class vector_memory<class typed_array_memory<class String> > vm_
       328 |       vector_memory<class typed_array_memory<class String> >::type * l_
       336 |       vector_memory::size_type n_
       340 |       vector_memory::size_type capacity_
       344 |   class Vector<void *> _attachments
       344 |     class vector_memory<class sized_array_memory<8> > vm_
       344 |       vector_memory<class sized_array_memory<8> >::type * l_
       352 |       vector_memory::size_type n_
       356 |       vector_memory::size_type capacity_
       360 |   class Element * _root_element
       368 |   class String _configuration
       368 |     struct String::rep_t _r
       368 |       const char * data
       376 |       int length
       384 |       struct String::memo_t * memo
       392 |   struct Router::notifier_signals_t * _notifier_signals
       400 |   class HashMap_ArenaFactory * _arena_factory
       408 |   class Router * _hotswap_router
       416 |   class ThreadSched * _thread_sched
       424 |   class NameInfo * _name_info
       432 |   class Vector<int> _flow_code_override_eindex
       432 |     class vector_memory<class sized_array_memory<4> > vm_
       432 |       vector_memory<class sized_array_memory<4> >::type * l_
       440 |       vector_memory::size_type n_
       444 |       vector_memory::size_type capacity_
       448 |   class Vector<class String> _flow_code_override
       448 |     class vector_memory<class typed_array_memory<class String> > vm_
       448 |       vector_memory<class typed_array_memory<class String> >::type * l_
       456 |       vector_memory::size_type n_
       460 |       vector_memory::size_type capacity_
       464 |   class Router * _next_router
           | [sizeof=472, dsize=472, align=8,
           |  nvsize=472, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575654df460 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575654df578 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5575654df608 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5575654df6d8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5575654df7c0 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5575654df9d8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5575654df880 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654dfb88 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5575654dfa90 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5575654dfcd0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5575654dfc40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5575654dfe18 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5575654dfd88 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654dff60 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5575654dfed0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e0028 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x5575654e0170 <line:68:5, col:31> col:17 used operator++ 'void (int)' inline
| `-ParmVarDecl 0x5575654e00e0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5575654e0238 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x5575654e0380 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5575654e02f0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5575654e04f8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5575654e0438 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e0640 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5575654e05b0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e0708 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5575654e08c8 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5575654e07b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5575654e0830 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e0b18 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5575654e0988 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575654e0a00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575654e0bc8 <col:86> "" ""
|-CXXMethodDecl 0x5575654e0e38 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5575654e0ca8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5575654e0d20 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e0fe8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5575654e0ef8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5575654e1198 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5575654e10a0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5575654e1468 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5575654e1250 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5575654e12c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5575654e1340 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e1748 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5575654e1530 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5575654e15a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575654e1620 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575654e1800 <col:115> "" ""
|-AccessSpecDecl 0x5575654e1870 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5575654e18a8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575654e2dc0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5575654e2dc0
| `-ParmVarDecl 0x5575654e2ec8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5575654e2f68 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5575654e2f68
| `-ParmVarDecl 0x5575654e3078 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5575655186a8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55756570a4a0 <col:7>
|-CXXConstructorDecl 0x557565518780 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x557565518780
| `-ParmVarDecl 0x557565518898 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x557565518908 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x557565518908
| `-ParmVarDecl 0x557565518a18 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55756570cea0 <col:7> col:7 implicit referenced ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55756576e850 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x55756576ea28 prev 0x55756576e850 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55756576eab8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55756576eae0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575657706b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x557565770660 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x55756576ef90 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x55756576ee90 'type'
|     `-TemplateSpecializationType 0x55756576ee20 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55756576ed00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x55756576ece0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55756576ecc0 <col:24> 'unsigned long' 8
|       `-RecordType 0x55756576ee00 'char_array<8>'
|         `-ClassTemplateSpecialization 0x55756576ed20 'char_array'
|-TypedefDecl 0x557565770768 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x557565770730 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x557565770710 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5575657706b0 'type'
|     `-ElaboratedType 0x557565770660 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x55756576ef90 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x55756576ee90 'type'
|         `-TemplateSpecializationType 0x55756576ee20 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55756576ed00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x55756576ece0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55756576ecc0 <col:24> 'unsigned long' 8
|           `-RecordType 0x55756576ee00 'char_array<8>'
|             `-ClassTemplateSpecialization 0x55756576ed20 'char_array'
|-CXXMethodDecl 0x5575657708e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5575657707f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5575657709d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x557565770ab8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x557565770ab8
|-CXXMethodDecl 0x557565770d88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x557565770c90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x557565770fc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x557565770e40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565770eb8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x557565771198 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x557565771088 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565771100 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5575657712f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5575657713c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x557565771618 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x557565771488 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x557565771500 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x557565771878 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5575657716e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x557565771760 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x557565771a38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x557565771948 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x557565771bf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x557565771b00 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x557565771cb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557565771d60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557565771f98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x557565771e10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565771e88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x557565772238 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x557565772140 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x557565772300 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x557565772350 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5575657723a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658bcaf8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Element *'
|-CXXRecordDecl 0x5575655d4c58 prev 0x5575658bcaf8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575655d5c70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Element *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5575655d5c20 'typename array_memory<Element *>::type' sugar
|   `-TypedefType 0x5575655d5c00 'conditional<true, sized_array_memory<8>, typed_array_memory<Element *> >::type' sugar
|     |-Typedef 0x5575655d5ab0 'type'
|     `-SubstTemplateTypeParmType 0x55756576e420 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x55756576df70 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55756576de88 'sized_array_memory'
|-FieldDecl 0x5575655d5d70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Element *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5575655d5dc0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575655d5df8 <line:118:5, col:15> col:15 value_type 'Element *':'Element *'
| `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-PointerType 0x557565716ee0 'Element *'
|     `-RecordType 0x557565716c60 'Element'
|       `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d5e88 <line:119:5, col:16> col:16 reference 'Element *&'
| `-LValueReferenceType 0x5575655d5e50 'Element *&'
|   `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x557565716ee0 'Element *'
|       `-RecordType 0x557565716c60 'Element'
|         `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d5f48 <line:120:5, col:22> col:22 const_reference 'Element *const &'
| `-LValueReferenceType 0x5575655d5f10 'Element *const &'
|   `-QualType 0x5575655d4cf1 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565716ee0 'Element *'
|         `-RecordType 0x557565716c60 'Element'
|           `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d5fd8 <line:121:5, col:16> col:16 pointer 'Element **'
| `-PointerType 0x5575655d5fa0 'Element **'
|   `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x557565716ee0 'Element *'
|       `-RecordType 0x557565716c60 'Element'
|         `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d6098 <line:122:5, col:22> col:22 const_pointer 'Element *const *'
| `-PointerType 0x5575655d6060 'Element *const *'
|   `-QualType 0x5575655d4cf1 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565716ee0 'Element *'
|         `-RecordType 0x557565716c60 'Element'
|           `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d6c70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Element *>::type':'Element *'
| `-ElaboratedType 0x5575655d6c20 'typename fast_argument<Element *>::type' sugar
|   `-TypedefType 0x5575655d6c00 'fast_argument<Element *, false>::type' sugar
|     |-Typedef 0x5575655d6b90 'type'
|     `-SubstTemplateTypeParmType 0x5575655d6950 'Element *' sugar
|       |-TemplateTypeParmType 0x55756548fa90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55756548fa40 'T'
|       `-PointerType 0x557565716ee0 'Element *'
|         `-RecordType 0x557565716c60 'Element'
|           `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d6cd8 <line:126:5, col:22> col:22 const_access_type 'Element *const &'
| `-LValueReferenceType 0x5575655d5f10 'Element *const &'
|   `-QualType 0x5575655d4cf1 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565716ee0 'Element *'
|         `-RecordType 0x557565716c60 'Element'
|           `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d6d30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575655d6d98 <line:130:5, col:16> col:16 iterator 'Element **'
| `-PointerType 0x5575655d5fa0 'Element **'
|   `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x557565716ee0 'Element *'
|       `-RecordType 0x557565716c60 'Element'
|         `-CXXRecord 0x5575657209b0 'Element'
|-TypedefDecl 0x5575655d6e00 <line:131:5, col:22> col:22 const_iterator 'Element *const *'
| `-PointerType 0x5575655d6060 'Element *const *'
|   `-QualType 0x5575655d4cf1 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5575655d4cf0 'Element *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565716ee0 'Element *'
|         `-RecordType 0x557565716c60 'Element'
|           `-CXXRecord 0x5575657209b0 'Element'
|-EnumDecl 0x5575655d6e58 <line:134:5> col:5
| `-EnumConstantDecl 0x5575655d6f50 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Element *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575655d6f30 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575655d6fd8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575655d7268 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575655d7090 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575655d7130 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXConstructorDecl 0x5575655d74f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5575655d73e0 <col:19, col:36> col:36 x 'const Vector<Element *> &'
|-CXXConstructorDecl 0x5575655d77b8 <line:141:5, col:32> col:12 Vector 'void (Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5575655d76a0 <col:19, col:31> col:31 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5575655d7ad0 <line:144:5, col:51> col:23 operator= 'Vector<Element *> &(const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5575655d79b0 <col:33, col:50> col:50 x 'const Vector<Element *> &'
|-CXXMethodDecl 0x5575655d7de0 <line:146:5, col:46> col:23 operator= 'Vector<Element *> &(Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5575655d7cc0 <col:33, col:45> col:45 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5575655d80d0 <line:148:5, col:70> col:23 assign 'Vector<Element *> &(Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575655d7f18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575655d7f90 <col:43, col:69> col:63 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5575655d8228 <line:150:5, col:55> col:49 begin 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5575655d8308 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575655d8360 <col:30> Inherited
|-CXXMethodDecl 0x5575655d83a8 <line:151:5, col:53> col:49 end 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5575655d8458 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575655d84b0 <col:30> Inherited
|-CXXMethodDecl 0x5575655d8578 <line:152:5, col:63> col:55 begin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5575655d8628 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575655d8680 <col:30> Inherited
|-CXXMethodDecl 0x5575655d86c8 <line:153:5, col:61> col:55 end 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5575655d8778 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575655d87d0 <col:30> Inherited
|-CXXMethodDecl 0x5575655d8818 <line:154:5, col:64> col:55 cbegin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5575655d88c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575655d8920 <col:30> Inherited
|-CXXMethodDecl 0x5575655d8968 <line:155:5, col:62> col:55 cend 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5575655d8a18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575655d8a70 <col:30> Inherited
|-CXXMethodDecl 0x5575655d8a98 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575655d8b48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575655d8bf8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575655d8db8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575655d8ca8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575655d8d20 <col:37, col:63> col:57 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5575655d8f08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575655d8e78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575655d90b8 <line:163:5, col:65> col:43 operator[] 'Element *&(Vector::size_type)'
| |-ParmVarDecl 0x5575655d8fc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575655d9170 <col:20>
| `-OptimizeNoneAttr 0x5575655d91c8 <col:30>
|-CXXMethodDecl 0x5575658c32d0 <line:164:5, col:73> col:49 operator[] 'Element *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5575655d91f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658c3388 <col:20>
| `-OptimizeNoneAttr 0x5575658c33e0 <col:30>
|-CXXMethodDecl 0x5575658c3498 <line:165:5, col:29> col:15 at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658c3408 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658c35e0 <line:166:5, col:37> col:21 at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658c3550 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658c3718 <line:167:5, col:21> col:15 front 'Element *&()' inline
|-CXXMethodDecl 0x5575658c3848 <line:168:5, col:29> col:21 front 'Element *const &() const' inline
|-CXXMethodDecl 0x5575658c3918 <line:169:5, col:20> col:15 back 'Element *&()' inline
|-CXXMethodDecl 0x5575658c39e8 <line:170:5, col:28> col:21 back 'Element *const &() const' inline
|-CXXMethodDecl 0x5575658c3b28 <line:172:5, col:39> col:15 unchecked_at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658c3a98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658c3c70 <line:173:5, col:47> col:21 unchecked_at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658c3be0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658c3db8 <line:174:5, col:59> col:15 at_u 'Element *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5575658c3d28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658c3e70 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575658c3f70 <line:175:5, col:71> col:21 at_u 'Element *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575658c3ee0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658c4028 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575658c40e8 <line:177:5, col:20> col:15 data 'Element **()' inline
|-CXXMethodDecl 0x5575658c41e8 <line:178:5, col:28> col:21 data 'Element *const *() const' inline
|-CXXMethodDecl 0x5575658c4368 <line:180:5, col:48> col:17 push_back 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658c42a8 <col:27, col:47> col:47 v 'Vector<Element *>::value_argument_type':'Element *'
|-FunctionTemplateDecl 0x5575658c4b28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575658c4420 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Element *>':'fast_argument<Element *, false>'
| `-CXXMethodDecl 0x5575658c4a88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Element *&&)' inline
|   `-ParmVarDecl 0x5575658c4988 <col:58, col:62> col:62 v 'Element *&&'
|-CXXMethodDecl 0x5575658c4c08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658c4d58 <line:186:5, col:49> col:17 push_front 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658c4cc8 <col:28, col:48> col:48 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5575658c4e10 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575658c5058 <line:189:5, col:62> col:21 insert 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658c4ed0 <col:28, col:37> col:37 it 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5575658c4f48 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5575658c5218 <line:190:5, col:38> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator)' inline
| `-ParmVarDecl 0x5575658c5128 <col:27, col:36> col:36 it 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5575658c5468 <line:191:5, col:49> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::iterator)' inline
| |-ParmVarDecl 0x5575658c52e0 <col:27, col:36> col:36 a 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5575658c5358 <col:39, col:48> col:48 b 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5575658c5528 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575658c5788 <line:195:5, col:34> col:17 swap 'void (Vector<Element *> &)' inline
| `-ParmVarDecl 0x5575658c5690 <col:22, col:33> col:33 x 'Vector<Element *> &'
`-CXXDestructorDecl 0x5575658c5858 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575658c5858

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575654f4850 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5575654f4968 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5575654f4a08 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5575654f4a68 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5575654f4ac8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5575654f4b78 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575654f4e80 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575654f4f98 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5575654f5040 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5575654f50a8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5575654f5138 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5575654fb1d0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5575654fb608 <col:12>
|-CXXConstructorDecl 0x5575654fb2d8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5575654fb3e8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5575654f5040 'data' 'const char *'
| | `-ImplicitCastExpr 0x5575654fdb90 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5575654fdb60 <col:12> 'const char *const' lvalue .data 0x5575654f5040
| |     `-DeclRefExpr 0x5575654fdb40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5575654fb3e8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5575654f50a8 'length' 'int'
| | `-ImplicitCastExpr 0x5575654fdc20 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5575654fdbf0 <col:12> 'const int' lvalue .length 0x5575654f50a8
| |     `-DeclRefExpr 0x5575654fdbd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5575654fb3e8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5575654f5138 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5575654fdcb0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5575654fdc80 <col:12> 'String::memo_t *const' lvalue .memo 0x5575654f5138
| |     `-DeclRefExpr 0x5575654fdc60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5575654fb3e8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5575654fdd08 <col:12>
|-CXXConstructorDecl 0x5575654fb488 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5575654fb488
| `-ParmVarDecl 0x5575654fb598 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x557565500af0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55756550c508 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55756550c618 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55756550cb30 <col:12>
|   |-BinaryOperator 0x55756550c948 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55756550c900 <col:12> 'const char *' lvalue ->data 0x5575654f5040
|   | | `-CXXThisExpr 0x55756550c8f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55756550c930 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55756550c8c0 <col:12> 'const char *const' lvalue .data 0x5575654f5040
|   |     `-DeclRefExpr 0x55756550c8a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55756550c618 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55756550ca10 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55756550c9c8 <col:12> 'int' lvalue ->length 0x5575654f50a8
|   | | `-CXXThisExpr 0x55756550c9b8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55756550c9f8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55756550c988 <col:12> 'const int' lvalue .length 0x5575654f50a8
|   |     `-DeclRefExpr 0x55756550c968 <col:12> 'const String::rep_t' lvalue ParmVar 0x55756550c618 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55756550cad8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55756550ca90 <col:12> 'String::memo_t *' lvalue ->memo 0x5575654f5138
|   | | `-CXXThisExpr 0x55756550ca80 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55756550cac0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55756550ca50 <col:12> 'String::memo_t *const' lvalue .memo 0x5575654f5138
|   |     `-DeclRefExpr 0x55756550ca30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55756550c618 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55756550cb20 <col:12>
|     `-UnaryOperator 0x55756550cb08 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55756550caf8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55756550c688 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55756550c688
  `-ParmVarDecl 0x55756550c798 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575654ebdc0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575654ebed8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5575654ebf68 <col:16, col:22> col:16 public
|-TypedefDecl 0x5575654ebfa8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5575651badc0 'const char *'
|   `-QualType 0x5575651ba311 'const char' const
|     `-BuiltinType 0x5575651ba310 'char'
|-TypedefDecl 0x5575654ec030 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5575654ec000 'String::const_iterator' sugar
|   |-Typedef 0x5575654ebfa8 'const_iterator'
|   `-PointerType 0x5575651badc0 'const char *'
|     `-QualType 0x5575651ba311 'const char' const
|       `-BuiltinType 0x5575651ba310 'char'
|-TypedefDecl 0x5575654ec1a0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5575654ec110 'int (String::*)() const'
|   |-RecordType 0x5575654ebe50 'String'
|   | `-CXXRecord 0x5575654ebdc0 'String'
|   `-ParenType 0x5575654ec0b0 'int () const' sugar
|     `-FunctionProtoType 0x5575654bfc40 'int () const' const cdecl
|       `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575654ec208 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x557565314600 'int64_t' sugar
|   |-Typedef 0x5575652232d0 'int64_t'
|   `-TypedefType 0x5575651fc4d0 '__int64_t' sugar
|     |-Typedef 0x5575651fc0a8 '__int64_t'
|     `-BuiltinType 0x5575651ba390 'long'
|-TypedefDecl 0x5575654ec270 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x557565314520 'uint64_t' sugar
|   |-Typedef 0x557565223470 'uint64_t'
|   `-TypedefType 0x5575651fc560 '__uint64_t' sugar
|     |-Typedef 0x5575651fc118 '__uint64_t'
|     `-BuiltinType 0x5575651ba430 'unsigned long'
|-TypedefDecl 0x5575654ec300 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5575654ec2d0 'String::intmax_t' sugar
|   |-Typedef 0x5575654ec208 'intmax_t'
|   `-TypedefType 0x557565314600 'int64_t' sugar
|     |-Typedef 0x5575652232d0 'int64_t'
|     `-TypedefType 0x5575651fc4d0 '__int64_t' sugar
|       |-Typedef 0x5575651fc0a8 '__int64_t'
|       `-BuiltinType 0x5575651ba390 'long'
|-TypedefDecl 0x5575654ec390 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5575654ec360 'String::uintmax_t' sugar
|   |-Typedef 0x5575654ec270 'uintmax_t'
|   `-TypedefType 0x557565314520 'uint64_t' sugar
|     |-Typedef 0x557565223470 'uint64_t'
|     `-TypedefType 0x5575651fc560 '__uint64_t' sugar
|       |-Typedef 0x5575651fc118 '__uint64_t'
|       `-BuiltinType 0x5575651ba430 'unsigned long'
|-CXXConstructorDecl 0x5575654ec450 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5575654ec5f8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5575654ec538 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5575654ec7a8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5575654ec6e8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5575654ec900 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5575654ec870 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5575654ecb18 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5575654ec9c8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5575654eca48 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5575654ecd38 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5575654ecbe8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5575654ecc68 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5575654ecf58 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5575654ece08 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5575654ece88 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5575654ed178 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5575654ed028 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5575654ed0a8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5575654ed308 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5575654ed240 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5575654ed488 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5575654ed3c8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5575654ed618 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5575654ed550 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5575654ed770 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5575654ed6e0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5575654ed8c8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5575654ed838 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5575654eda20 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5575654ed990 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5575654edba8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5575654edae8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5575654edd38 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5575654edc70 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5575654edec8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5575654ede00 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5575654ee058 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5575654edf90 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5575654ee150 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5575654ee278 <line:69:5, col:44> col:33 used make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5575654ee3f8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5575654ee330 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5575654ee548 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5575654ee4b8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5575654ee600 <col:63> "" ""
|-CXXMethodDecl 0x5575654ee748 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5575654ee688 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5575654ee958 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5575654ee808 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5575654ee888 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5575654eeb78 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5575654eea20 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5575654eeaa0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5575654eee58 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5575654eec38 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5575654eecb8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5575654faca0 <col:55> 'int' 10
| `-ParmVarDecl 0x5575654eed30 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5575654facc0 <col:76> 'bool' true
|-CXXMethodDecl 0x5575654ef138 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5575654eef20 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5575654eefa0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5575654facd0 <col:56> 'int' 10
| `-ParmVarDecl 0x5575654ef018 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5575654facf0 <col:77> 'bool' true
|-CXXMethodDecl 0x5575654ef240 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5575654ef308 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5575654ef3d0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5575654ef470 <col:20>
| `-OptimizeNoneAttr 0x5575654ef4c8 <col:30>
|-CXXConversionDecl 0x5575654ef5b8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5575654ef688 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5575654ef748 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5575654ef838 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5575654ef8f8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5575654efa78 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5575654ef9b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5575654efbc8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5575654efb38 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5575654efcb8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5575654efd78 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5575654effc8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5575654efe30 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5575654efeb0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5575654f0228 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5575654f0090 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5575654f0110 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5575654f02f8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5575654f0508 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5575654f03b0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5575654f0430 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5575654f0728 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5575654f05d0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5575654f0650 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5575654f08b8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5575654f07f0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5575654f09a8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5575654f0b18 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5575654f0a58 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5575654f0d28 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5575654f0bd8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5575654f0c58 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5575654f0f40 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5575654f0de8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5575654f0e60 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5575654f10d0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5575654f1000 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5575654f12f0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5575654f1190 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5575654f1210 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5575654f1440 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5575654f13b0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5575654f1618 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5575654f1500 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5575654f1580 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5575654f1768 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5575654f16d8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5575654f1980 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5575654f1820 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5575654f18a0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5575654fad00 <col:39> 'int' 0
|-CXXMethodDecl 0x5575654f1ba0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5575654f1a40 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5575654f1ac0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5575654fad20 <col:48> 'int' 0
|-CXXMethodDecl 0x5575654f1d80 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5575654f1c60 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5575654f1ce0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5575654fad40 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5575654f1e50 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5575654f1f10 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5575654f1fd0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5575654f2090 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5575654f2150 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5575654f22f8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5575654f2200 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5575654f2478 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5575654f23b0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5575654f2650 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5575654f2538 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5575654f27c8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5575654f2708 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5575654f2910 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5575654f2880 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5575654f2a60 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5575654f29d0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5575654f2c38 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5575654f2b20 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5575654f2ba0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5575654f2e18 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5575654f2d00 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5575654f2d80 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5575654f2f68 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5575654f2ed8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5575654f3178 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5575654f3028 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5575654f30a8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5575654f32d8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5575654f3240 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5575654f3430 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5575654f3398 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5575654f34d8 <col:57> "" ""
|-CXXMethodDecl 0x5575654f35e8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5575654f3558 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5575654f3738 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5575654f36a8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5575654f38b8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5575654f37f0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5575654f3980 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5575654f3a40 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5575654f3b00 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5575654f3ba0 <col:49> "" ""
|-CXXMethodDecl 0x5575654f3c30 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5575654f3cf0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5575654f3de0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5575654f3ea8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5575654f3f68 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5575654f4028 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5575654f4120 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5575654f41e8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5575654f42b0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5575654f4488 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5575654f4368 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5575654f43e8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5575654f46b0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5575654f4550 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5575654f45d0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5575654f47c0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5575654f4828 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5575654f4850 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5575654f4968 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5575654f4a08 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5575654f4a68 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5575654f4ac8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5575654f4b78 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5575654f4be0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5575654f4e18 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5575654f4e68 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575654f4df8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5575654f4d08 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5575654f4cb0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5575654f4cf0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5575654f4cd0 <col:32> 'int' 8
|-CXXRecordDecl 0x5575654f4e80 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575654f4f98 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5575654f5040 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5575654f50a8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5575654f5138 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5575654fb1d0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5575654fb608 <col:12>
| |-CXXConstructorDecl 0x5575654fb2d8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5575654fb3e8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5575654f5040 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5575654fdb90 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5575654fdb60 <col:12> 'const char *const' lvalue .data 0x5575654f5040
| | |     `-DeclRefExpr 0x5575654fdb40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5575654fb3e8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5575654f50a8 'length' 'int'
| | | `-ImplicitCastExpr 0x5575654fdc20 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5575654fdbf0 <col:12> 'const int' lvalue .length 0x5575654f50a8
| | |     `-DeclRefExpr 0x5575654fdbd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5575654fb3e8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5575654f5138 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5575654fdcb0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5575654fdc80 <col:12> 'String::memo_t *const' lvalue .memo 0x5575654f5138
| | |     `-DeclRefExpr 0x5575654fdc60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5575654fb3e8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5575654fdd08 <col:12>
| |-CXXConstructorDecl 0x5575654fb488 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5575654fb488
| | `-ParmVarDecl 0x5575654fb598 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x557565500af0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55756550c508 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55756550c618 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55756550cb30 <col:12>
| |   |-BinaryOperator 0x55756550c948 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55756550c900 <col:12> 'const char *' lvalue ->data 0x5575654f5040
| |   | | `-CXXThisExpr 0x55756550c8f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55756550c930 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55756550c8c0 <col:12> 'const char *const' lvalue .data 0x5575654f5040
| |   |     `-DeclRefExpr 0x55756550c8a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55756550c618 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55756550ca10 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55756550c9c8 <col:12> 'int' lvalue ->length 0x5575654f50a8
| |   | | `-CXXThisExpr 0x55756550c9b8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55756550c9f8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55756550c988 <col:12> 'const int' lvalue .length 0x5575654f50a8
| |   |     `-DeclRefExpr 0x55756550c968 <col:12> 'const String::rep_t' lvalue ParmVar 0x55756550c618 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55756550cad8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55756550ca90 <col:12> 'String::memo_t *' lvalue ->memo 0x5575654f5138
| |   | | `-CXXThisExpr 0x55756550ca80 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55756550cac0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55756550ca50 <col:12> 'String::memo_t *const' lvalue .memo 0x5575654f5138
| |   |     `-DeclRefExpr 0x55756550ca30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55756550c618 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55756550cb20 <col:12>
| |     `-UnaryOperator 0x55756550cb08 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55756550caf8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55756550c688 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55756550c688
|   `-ParmVarDecl 0x55756550c798 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5575654f51b0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5575654f53f8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5575654f5218 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5575654f5298 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5575654f5310 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5575654fb190 <col:79, line:261:5>
|   |-BinaryOperator 0x5575654fae08 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5575654fada0 <col:2, col:5> 'const char *' lvalue .data 0x5575654f5040
|   | | `-MemberExpr 0x5575654fad70 <col:2> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|   | |   `-CXXThisExpr 0x5575654fad60 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5575654fadf0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5575654fadd0 <col:12> 'const char *' lvalue ParmVar 0x5575654f5218 'data' 'const char *'
|   |-BinaryOperator 0x5575654faed0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5575654fae68 <col:2, col:5> 'int' lvalue .length 0x5575654f50a8
|   | | `-MemberExpr 0x5575654fae38 <col:2> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|   | |   `-CXXThisExpr 0x5575654fae28 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5575654faeb8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5575654fae98 <col:14> 'int' lvalue ParmVar 0x5575654f5298 'length' 'int'
|   `-IfStmt 0x5575654fb178 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5575654faff0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5575654fafd8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5575654fafb8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5575654faf98 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5575654faf30 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5575654f5138
|     |       | `-MemberExpr 0x5575654faf00 <col:7> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|     |       |   `-CXXThisExpr 0x5575654faef0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5575654faf80 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5575654faf60 <col:17> 'String::memo_t *' lvalue ParmVar 0x5575654f5310 'memo' 'String::memo_t *'
|     `-CallExpr 0x5575654fb150 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5575654fb138 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575654fb040 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5575654e3e28 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5575654fb0a8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5575654f4a08
|         `-ImplicitCastExpr 0x5575654fb090 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5575654fb070 <col:27> 'String::memo_t *' lvalue ParmVar 0x5575654f5310 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5575654f56a8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5575654f54c8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5575654f5548 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5575654f55c0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5575654f51b0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5575654fb618 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575654fb7a8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5575654fb710 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5575654fb680 <col:2> '<bound member function type>' ->assign_memo 0x5575654f53f8
|     | `-ImplicitCastExpr 0x5575654fb748 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5575654fb670 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5575654fb760 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5575654fb6b0 <col:14> 'const char *' lvalue ParmVar 0x5575654f54c8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5575654fb778 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5575654fb6d0 <col:20> 'int' lvalue ParmVar 0x5575654f5548 'length' 'int'
|     `-ImplicitCastExpr 0x5575654fb790 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5575654fb6f0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5575654f55c0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5575654f5838 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5575654f5778 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5575654fba00 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5575654fb980 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5575654fb7d0 <col:2> '<bound member function type>' ->assign_memo 0x5575654f53f8
|     | `-CXXThisExpr 0x5575654fb7c0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5575654fb9b8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5575654fb850 <col:14, col:19> 'const char *' lvalue .data 0x5575654f5040
|     |   `-MemberExpr 0x5575654fb820 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5575654f51b0
|     |     `-DeclRefExpr 0x5575654fb800 <col:14> 'const String' lvalue ParmVar 0x5575654f5778 'x' 'const String &'
|     |-ImplicitCastExpr 0x5575654fb9d0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5575654fb8d0 <col:25, col:30> 'int' lvalue .length 0x5575654f50a8
|     |   `-MemberExpr 0x5575654fb8a0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5575654f51b0
|     |     `-DeclRefExpr 0x5575654fb880 <col:25> 'const String' lvalue ParmVar 0x5575654f5778 'x' 'const String &'
|     `-ImplicitCastExpr 0x5575654fb9e8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5575654fb950 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5575654f5138
|         `-MemberExpr 0x5575654fb920 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5575654f51b0
|           `-DeclRefExpr 0x5575654fb900 <col:38> 'const String' lvalue ParmVar 0x5575654f5778 'x' 'const String &'
|-CXXMethodDecl 0x5575654f5900 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5575654fc3c0 <col:31, line:278:5>
|   `-IfStmt 0x5575654fc3a8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5575654fbaa0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5575654fba88 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5575654fba58 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5575654f5138
|     |     `-MemberExpr 0x5575654fba28 <col:6> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|     |       `-CXXThisExpr 0x5575654fba18 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5575654fc380 <col:15, line:277:2>
|       |-ParenExpr 0x5575654fbf50 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5575654fbf20 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5575654fbbb0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5575654fbb98 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5575654fbb80 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5575654fbb40 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5575654f4a08
|       |   |       `-ImplicitCastExpr 0x5575654fbb28 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5575654fbaf8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5575654f5138
|       |   |           `-MemberExpr 0x5575654fbac8 <col:27> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|       |   |             `-CXXThisExpr 0x5575654fbab8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5575654fbc10 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5575654fbbf0 <col:54> 'int' 0
|       |   `-CallExpr 0x5575654fbe80 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5575654fbe68 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5575654fbde8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5575654fbec0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5575654fbcf8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5575654fbed8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5575654fbd28 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5575654fbef0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5575654fbd60 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5575654fbf08 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5575654fbdd0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5575654fbdb8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5575654fbd80 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5575654fc2a0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5575654fc160 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5575654fc148 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5575654fc0c0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5575654e5270 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5575654fc090 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5575654f4a08
|       | |   `-ImplicitCastExpr 0x5575654fc078 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5575654fc048 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5575654f5138
|       | |       `-MemberExpr 0x5575654fc018 <col:40> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|       | |         `-CXXThisExpr 0x5575654fc008 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5575654fc260 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5575654fc248 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5575654fc188 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5575654fa0e0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5575654fc288 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5575654fc1e8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5575654f5138
|       |       `-MemberExpr 0x5575654fc1b8 <col:15> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|       |         `-CXXThisExpr 0x5575654fc1a8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5575654fc360 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5575654fc2f8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5575654f5138
|         | `-MemberExpr 0x5575654fc2c8 <col:6> 'String::rep_t' lvalue ->_r 0x5575654f51b0
|         |   `-CXXThisExpr 0x5575654fc2b8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5575654fc348 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5575654fc328 <col:16> 'int' 0
|-CXXMethodDecl 0x5575654f5b98 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5575654f59b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5575654f5a38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5575654f5ab0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5575654f5c70 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5575654f5ec0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5575654f5d28 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5575654f5da8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5575654f5e20 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5575654f60a8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5575654f5f90 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5575654f6010 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5575654f61a8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5575654fc498 <col:41, line:286:5>
|   `-ReturnStmt 0x5575654fc488 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5575654fc458 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5575654fc420 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5575654fc408 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5575654fc3e8 <col:46> 'int' 1
|-CXXMethodDecl 0x5575654f6448 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5575654f6260 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5575654f62e0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5575654f6360 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5575654fa0e0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5575654f6510 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5575654fa1b0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5575654fa380 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5575654fa268 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5575654fa2e8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5575654fa440 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5575654fa508 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5575654fa608 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5575654fa680 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5575654fa6f8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5575654fa760 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5575654fa860 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5575654fa8b0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575654fa840 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5575654fa820 <col:22> 'int' 14
|-CXXMethodDecl 0x5575654faac8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5575654fa8e0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5575654fa960 <col:38> col:41 'int'
| `-ParmVarDecl 0x5575654fa9e0 <col:43> col:46 'int'
|-FriendDecl 0x5575654fabd0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5575654fac60 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55756581de90 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55756581e068 prev 0x55756581de90 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55756581e0f8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55756581e120 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x55756581fa80 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55756581fa30 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55756581fa10 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55756581e338 'type'
|     `-SubstTemplateTypeParmType 0x55756581e300 'String' sugar
|       |-TemplateTypeParmType 0x5575654af660 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654af610 'T'
|       `-RecordType 0x5575654ebe50 'String'
|         `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x55756581fb38 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55756581fb00 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55756581fae0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55756581fa80 'type'
|     `-ElaboratedType 0x55756581fa30 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55756581fa10 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55756581e338 'type'
|         `-SubstTemplateTypeParmType 0x55756581e300 'String' sugar
|           |-TemplateTypeParmType 0x5575654af660 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5575654af610 'T'
|           `-RecordType 0x5575654ebe50 'String'
|             `-CXXRecord 0x5575654ebdc0 'String'
|-CXXMethodDecl 0x55756581fcb8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55756581fbc8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55756581fda8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55756581fe88 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55756581fe88
|-CXXMethodDecl 0x557565820158 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x557565820060 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x557565820398 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557565820210 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565820288 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557565820568 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557565820458 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575658204d0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5575658206c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x557565820798 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5575658209e8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x557565820858 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5575658208d0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557565820c48 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x557565820ab8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x557565820b30 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557565820e08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x557565820d18 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557565820fc8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x557565820ed0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557565821080 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557565821130 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557565821368 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5575658211e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565821258 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x557565821608 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x557565821510 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5575658216d0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x557565821720 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x557565821770 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575657235f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55756581cc38 prev 0x5575657235f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55756581de00 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55756581ddb0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55756581dd90 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55756581dc40 'type'
|     `-SubstTemplateTypeParmType 0x55756581dad0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x557565485410 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5575654853b8 'F'
|       `-RecordType 0x55756581d730 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55756581d650 'typed_array_memory'
|-FieldDecl 0x5575658217c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x557565821810 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557565821848 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-RecordType 0x5575654ebe50 'String'
|     `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x5575658218d8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5575658218a0 'String &'
|   `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575654ebe50 'String'
|       `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x557565821968 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x557565821930 'const String &'
|   `-QualType 0x55756581ccd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575654ebe50 'String'
|         `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x5575658219f8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5575658219c0 'String *'
|   `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575654ebe50 'String'
|       `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x557565821a88 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x557565821a50 'const String *'
|   `-QualType 0x55756581ccd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575654ebe50 'String'
|         `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x5575658226e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x557565822690 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x557565822670 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5575658225a8 'type'
|     `-LValueReferenceType 0x557565822570 'const String &'
|       `-QualType 0x557565822311 'const String' const
|         `-SubstTemplateTypeParmType 0x557565822310 'String' sugar
|           |-TemplateTypeParmType 0x55756548f360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55756548f308 'T'
|           `-RecordType 0x5575654ebe50 'String'
|             `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x557565822748 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x557565821930 'const String &'
|   `-QualType 0x55756581ccd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575654ebe50 'String'
|         `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x5575658227a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565822808 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5575658219c0 'String *'
|   `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575654ebe50 'String'
|       `-CXXRecord 0x5575654ebdc0 'String'
|-TypedefDecl 0x557565822870 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x557565821a50 'const String *'
|   `-QualType 0x55756581ccd1 'const String' const
|     `-SubstTemplateTypeParmType 0x55756581ccd0 'String' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575654ebe50 'String'
|         `-CXXRecord 0x5575654ebdc0 'String'
|-EnumDecl 0x5575658228c8 <line:134:5> col:5
| `-EnumConstantDecl 0x5575658229c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575658229a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x557565822a48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557565822cd8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557565822b00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565822ba0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x557565822f68 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x557565822e50 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x557565823228 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x557565823110 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x557565823540 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x557565823420 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5575658248d0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x557565823730 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x557565824bc0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557565824a08 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565824a80 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557565824ce8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x557565824d98 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565824df0 <col:30> Inherited
|-CXXMethodDecl 0x557565824e38 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x557565824ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565824f40 <col:30> Inherited
|-CXXMethodDecl 0x557565825008 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5575658250b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565825110 <col:30> Inherited
|-CXXMethodDecl 0x557565825158 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x557565825208 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565825260 <col:30> Inherited
|-CXXMethodDecl 0x5575658252a8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x557565825358 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658253b0 <col:30> Inherited
|-CXXMethodDecl 0x5575658253f8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5575658254a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565825500 <col:30> Inherited
|-CXXMethodDecl 0x557565825528 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658255d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557565825688 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x557565825848 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557565825738 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658257b0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557565825998 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x557565825908 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x557565825b48 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x557565825a50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557565825c00 <col:20>
| `-OptimizeNoneAttr 0x557565825c58 <col:30>
|-CXXMethodDecl 0x557565825d78 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x557565825c80 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557565825e30 <col:20>
| `-OptimizeNoneAttr 0x557565825e88 <col:30>
|-CXXMethodDecl 0x557565825f40 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x557565825eb0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557565826088 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557565825ff8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658261b8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5575658262b8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x557565826388 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x557565826458 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x557565826598 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x557565826508 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658266e0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557565826650 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557565826828 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x557565826798 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658268e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575658269e0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x557565826950 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557565826a98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x557565826b58 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x557565826c58 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x557565826dd8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x557565826d18 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x557565827568 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x557565826e90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5575658274c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5575658273c8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x557565827648 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557565827798 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x557565827708 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557565827850 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x557565827a98 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x557565827910 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x557565827988 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x557565827c28 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x557565827b68 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x557565827e38 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x557565827cf0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x557565827d68 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x557565827ef8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x557565828158 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x557565828060 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x557565828228 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x557565828228

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557565863de0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x557565863fb8 prev 0x557565863de0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x557565864048 <col:46, col:52> col:46 public
|-TypedefDecl 0x557565864070 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565865c40 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x557565865bf0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x557565864520 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x557565864420 'type'
|     `-TemplateSpecializationType 0x5575658643b0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x557565864290 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x557565864270 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x557565864250 <col:24> 'unsigned long' 4
|       `-RecordType 0x557565864390 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5575658642b0 'char_array'
|-TypedefDecl 0x557565865cf8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x557565865cc0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x557565865ca0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x557565865c40 'type'
|     `-ElaboratedType 0x557565865bf0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x557565864520 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x557565864420 'type'
|         `-TemplateSpecializationType 0x5575658643b0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x557565864290 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x557565864270 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x557565864250 <col:24> 'unsigned long' 4
|           `-RecordType 0x557565864390 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5575658642b0 'char_array'
|-CXXMethodDecl 0x557565865e78 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x557565865d88 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x557565865f68 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x557565866048 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x557565866048
|-CXXMethodDecl 0x557565866318 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x557565866220 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x557565866558 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5575658663d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565866448 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557565866728 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557565866618 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565866690 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557565866888 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x557565866958 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x557565866ba8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557565866a18 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x557565866a90 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557565866e08 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x557565866c78 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x557565866cf0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557565866fc8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x557565866ed8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557565867188 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x557565867090 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557565867240 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658672f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557565867528 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5575658673a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565867418 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5575658677c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5575658676d0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x557565867890 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5575658678e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x557565867930 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658c5ba0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5575658c5da8 prev 0x5575658c5ba0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575658c6dc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5575658c6d70 'typename array_memory<unsigned int>::type' sugar
|   `-TypedefType 0x5575658c6d50 'conditional<true, sized_array_memory<4>, typed_array_memory<unsigned int> >::type' sugar
|     |-Typedef 0x5575658c6c00 'type'
|     `-SubstTemplateTypeParmType 0x5575658639b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x557565863500 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x557565863418 'sized_array_memory'
|-FieldDecl 0x5575658c6ec0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5575658c6f10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575658c6f48 <line:118:5, col:15> col:15 value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c6fd8 <line:119:5, col:16> col:16 reference 'unsigned int &'
| `-LValueReferenceType 0x5575658c6fa0 'unsigned int &'
|   `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c7098 <line:120:5, col:22> col:22 const_reference 'const unsigned int &'
| `-LValueReferenceType 0x5575658c7060 'const unsigned int &'
|   `-QualType 0x5575658c5e41 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c7128 <line:121:5, col:16> col:16 pointer 'unsigned int *'
| `-PointerType 0x5575658c70f0 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c71b8 <line:122:5, col:22> col:22 const_pointer 'const unsigned int *'
| `-PointerType 0x5575658c7180 'const unsigned int *'
|   `-QualType 0x5575658c5e41 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c7da0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned int>::type':'unsigned int'
| `-ElaboratedType 0x5575658c7d50 'typename fast_argument<unsigned int>::type' sugar
|   `-TypedefType 0x5575658c7d30 'fast_argument<unsigned int, false>::type' sugar
|     |-Typedef 0x5575658c7cc0 'type'
|     `-SubstTemplateTypeParmType 0x5575658c7a80 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55756548fa90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55756548fa40 'T'
|       `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c7e08 <line:126:5, col:22> col:22 const_access_type 'const unsigned int &'
| `-LValueReferenceType 0x5575658c7060 'const unsigned int &'
|   `-QualType 0x5575658c5e41 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c7e60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658c7ec8 <line:130:5, col:16> col:16 iterator 'unsigned int *'
| `-PointerType 0x5575658c70f0 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-BuiltinType 0x5575651ba410 'unsigned int'
|-TypedefDecl 0x5575658c7f30 <line:131:5, col:22> col:22 const_iterator 'const unsigned int *'
| `-PointerType 0x5575658c7180 'const unsigned int *'
|   `-QualType 0x5575658c5e41 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5575658c5e40 'unsigned int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba410 'unsigned int'
|-EnumDecl 0x5575658c7f88 <line:134:5> col:5
| `-EnumConstantDecl 0x5575658c8080 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575658c8060 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575658c8108 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575658c8358 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658c81c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658c8260 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXConstructorDecl 0x5575658c8618 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5575658c8500 <col:19, col:36> col:36 x 'const Vector<unsigned int> &'
|-CXXConstructorDecl 0x5575658c88d8 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5575658c87c0 <col:19, col:31> col:31 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5575658c8c20 <line:144:5, col:51> col:23 operator= 'Vector<unsigned int> &(const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5575658c8b00 <col:33, col:50> col:50 x 'const Vector<unsigned int> &'
|-CXXMethodDecl 0x5575658c8f30 <line:146:5, col:46> col:23 operator= 'Vector<unsigned int> &(Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5575658c8e10 <col:33, col:45> col:45 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5575658c9220 <line:148:5, col:70> col:23 assign 'Vector<unsigned int> &(Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658c9068 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658c90e0 <col:43, col:69> col:63 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5575658c9348 <line:150:5, col:55> col:49 begin 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5575658c9428 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658c9480 <col:30> Inherited
|-CXXMethodDecl 0x5575658c94c8 <line:151:5, col:53> col:49 end 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5575658c9578 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658c95d0 <col:30> Inherited
|-CXXMethodDecl 0x5575658c9668 <line:152:5, col:63> col:55 begin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5575658c9718 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658c9770 <col:30> Inherited
|-CXXMethodDecl 0x5575658c97b8 <line:153:5, col:61> col:55 end 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5575658c9868 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658c98c0 <col:30> Inherited
|-CXXMethodDecl 0x5575658c9908 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5575658c99b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658c9a10 <col:30> Inherited
|-CXXMethodDecl 0x5575658c9a58 <line:155:5, col:62> col:55 cend 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5575658c9b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658c9b60 <col:30> Inherited
|-CXXMethodDecl 0x5575658c9b88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658c9c38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658c9ce8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575658c9ea8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658c9d98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658c9e10 <col:37, col:63> col:57 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5575658c9ff8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575658c9f68 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658ca1a8 <line:163:5, col:65> col:43 operator[] 'unsigned int &(Vector::size_type)'
| |-ParmVarDecl 0x5575658ca0b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658ca260 <col:20>
| `-OptimizeNoneAttr 0x5575658ca2b8 <col:30>
|-CXXMethodDecl 0x5575658ca3d8 <line:164:5, col:73> col:49 operator[] 'const unsigned int &(Vector::size_type) const'
| |-ParmVarDecl 0x5575658ca2e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658ca490 <col:20>
| `-OptimizeNoneAttr 0x5575658ca4e8 <col:30>
|-CXXMethodDecl 0x5575658ca5a0 <line:165:5, col:29> col:15 at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658ca510 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658ca6e8 <line:166:5, col:37> col:21 at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658ca658 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658ca818 <line:167:5, col:21> col:15 front 'unsigned int &()' inline
|-CXXMethodDecl 0x5575658ca948 <line:168:5, col:29> col:21 front 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5575658caa18 <line:169:5, col:20> col:15 back 'unsigned int &()' inline
|-CXXMethodDecl 0x5575658caae8 <line:170:5, col:28> col:21 back 'const unsigned int &() const' inline
|-CXXMethodDecl 0x5575658cac28 <line:172:5, col:39> col:15 unchecked_at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658cab98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658cad70 <line:173:5, col:47> col:21 unchecked_at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658cace0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658caeb8 <line:174:5, col:59> col:15 at_u 'unsigned int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5575658cae28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658caf70 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575658cb070 <line:175:5, col:71> col:21 at_u 'const unsigned int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575658cafe0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658cb128 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575658cb1e8 <line:177:5, col:20> col:15 data 'unsigned int *()' inline
|-CXXMethodDecl 0x5575658cb300 <line:178:5, col:28> col:21 data 'const unsigned int *() const' inline
|-CXXMethodDecl 0x5575658cb488 <line:180:5, col:48> col:17 push_back 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658cb3c0 <col:27, col:47> col:47 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-FunctionTemplateDecl 0x5575658cbc48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575658cb540 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned int>':'fast_argument<unsigned int, false>'
| `-CXXMethodDecl 0x5575658cbba8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned int &&)' inline
|   `-ParmVarDecl 0x5575658cbaa8 <col:58, col:62> col:62 v 'unsigned int &&'
|-CXXMethodDecl 0x5575658cbd28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658cbe78 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658cbde8 <col:28, col:48> col:48 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5575658cbf30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575658cc178 <line:189:5, col:62> col:21 insert 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658cbff0 <col:28, col:37> col:37 it 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5575658cc068 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5575658cc338 <line:190:5, col:38> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator)' inline
| `-ParmVarDecl 0x5575658cc248 <col:27, col:36> col:36 it 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5575658cc588 <line:191:5, col:49> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::iterator)' inline
| |-ParmVarDecl 0x5575658cc400 <col:27, col:36> col:36 a 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5575658cc478 <col:39, col:48> col:48 b 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5575658cc648 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575658cc8a8 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5575658cc7b0 <col:22, col:33> col:33 x 'Vector<unsigned int> &'
`-CXXDestructorDecl 0x5575658cc978 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575658cc978

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658629f8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x557565862c08 prev 0x5575658629f8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x557565863d50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x557565863d00 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x557565863ce0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x557565863b90 'type'
|     `-SubstTemplateTypeParmType 0x5575658639b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x557565863500 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x557565863418 'sized_array_memory'
|-FieldDecl 0x557565867980 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5575658679d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557565867a08 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565867a98 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x557565867a60 'int &'
|   `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565867b58 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x557565867b20 'const int &'
|   `-QualType 0x557565862ca1 'const int' const
|     `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565867be8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x557565867bb0 'int *'
|   `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565867c78 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x557565867c40 'const int *'
|   `-QualType 0x557565862ca1 'const int' const
|     `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565868860 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x557565868810 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5575658687f0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x557565868780 'type'
|     `-SubstTemplateTypeParmType 0x557565868540 'int' sugar
|       |-TemplateTypeParmType 0x55756548fa90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55756548fa40 'T'
|       `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658688c8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x557565867b20 'const int &'
|   `-QualType 0x557565862ca1 'const int' const
|     `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565868920 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565868988 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x557565867bb0 'int *'
|   `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658689f0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x557565867c40 'const int *'
|   `-QualType 0x557565862ca1 'const int' const
|     `-SubstTemplateTypeParmType 0x557565862ca0 'int' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-BuiltinType 0x5575651ba370 'int'
|-EnumDecl 0x557565868a48 <line:134:5> col:5
| `-EnumConstantDecl 0x557565868b40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557565868b20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x557565868bc8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557565868e18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557565868c80 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565868d20 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5575658690d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x557565868fc0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x557565869398 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x557565869280 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5575658696e0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5575658695c0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5575658699f0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5575658698d0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x557565869ce0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557565869b28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565869ba0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x557565869e08 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x557565869ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565869f40 <col:30> Inherited
|-CXXMethodDecl 0x557565869f88 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55756586a038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756586a090 <col:30> Inherited
|-CXXMethodDecl 0x55756586a158 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55756586a208 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756586a260 <col:30> Inherited
|-CXXMethodDecl 0x55756586a2a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55756586a358 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756586a3b0 <col:30> Inherited
|-CXXMethodDecl 0x55756586a3f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55756586a4a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756586a500 <col:30> Inherited
|-CXXMethodDecl 0x55756586a548 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55756586a5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756586a650 <col:30> Inherited
|-CXXMethodDecl 0x55756586d660 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55756586d710 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55756586d7c0 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55756586d980 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55756586d870 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55756586d8e8 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55756586dad0 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55756586da40 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756586dc78 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55756586db88 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55756586dd30 <col:20>
| `-OptimizeNoneAttr 0x55756586dd88 <col:30>
|-CXXMethodDecl 0x55756586dea8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55756586ddb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55756586df60 <col:20>
| `-OptimizeNoneAttr 0x55756586dfb8 <col:30>
|-CXXMethodDecl 0x55756586e070 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55756586dfe0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756586e1b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55756586e128 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756586e2e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55756586e418 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55756586e4e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55756586e5b8 <line:170:5, col:28> col:21 used back 'const int &() const' inline
|-CXXMethodDecl 0x55756586e6f8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55756586e668 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756586e840 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55756586e7b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756586e988 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55756586e8f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55756586ea40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55756586eb40 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55756586eab0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55756586ebf8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55756586ecb8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55756586edb8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55756586ef38 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55756586ee78 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55756586f6f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55756586eff0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55756586f658 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55756586f558 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55756586f7d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55756586f928 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55756586f898 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55756586f9e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55756586fc28 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55756586faa0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55756586fb18 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55756586fde8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55756586fcf8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x557565870038 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55756586feb0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55756586ff28 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5575658700f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x557565870358 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x557565870260 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x557565870428 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x557565870428

Layout: <CGRecordLayout
  LLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575658ccbc0 <../dummy_inc/click/router.hh:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
|-DefinitionData aggregate standard_layout has_mutable_fields
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5575658cccd8 <col:5, col:12> col:12 implicit struct element_landmark_t
|-FieldDecl 0x5575658ccd78 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5575658ccdd8 <line:249:9, col:16> col:16 filename 'String'
|-CXXConstructorDecl 0x5575658cce70 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5575658cce70
| `-ParmVarDecl 0x5575658ccf88 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5575658cd028 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5575658cd028
| `-ParmVarDecl 0x5575658cd138 <col:12> col:12 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5575658cd1d8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5575658cd1d8
| `-ParmVarDecl 0x5575658cd2e8 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5575658cd358 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5575658cd358
| `-ParmVarDecl 0x5575658cd468 <col:12> col:12 'Router::element_landmark_t &&'
`-CXXDestructorDecl 0x5575658cd4f0 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x5575658cd4f0

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  NonVirtualBaseLLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658cea80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<Router::element_landmark_t>'
|-CXXRecordDecl 0x5575658cec58 prev 0x5575658cea80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5575658cece8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5575658ced10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658d06d0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<element_landmark_t>::type':'Router::element_landmark_t'
| `-ElaboratedType 0x5575658d0680 'typename typed_array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x5575658d0660 'typed_array_memory<Router::element_landmark_t>::type' sugar
|     |-Typedef 0x5575658cef28 'type'
|     `-SubstTemplateTypeParmType 0x5575658ceef0 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5575654af660 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654af610 'T'
|       `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|         `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d0788 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-PointerType 0x5575658d0750 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|   `-TypedefType 0x5575658d0730 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x5575658d06d0 'type'
|     `-ElaboratedType 0x5575658d0680 'typename typed_array_memory<element_landmark_t>::type' sugar
|       `-TypedefType 0x5575658d0660 'typed_array_memory<Router::element_landmark_t>::type' sugar
|         |-Typedef 0x5575658cef28 'type'
|         `-SubstTemplateTypeParmType 0x5575658ceef0 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x5575654af660 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5575654af610 'T'
|           `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|             `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-CXXMethodDecl 0x5575658d0908 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *) const' inline
| `-ParmVarDecl 0x5575658d0818 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXConstructorDecl 0x5575658d09f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5575658d0ad8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5575658d0ad8
|-CXXMethodDecl 0x5575658d0da8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x5575658d0cb0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-CXXMethodDecl 0x5575658d0fe8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5575658d0e60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575658d0ed8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d11b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5575658d10a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575658d1120 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d1318 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x5575658d13e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x5575658d1638 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5575658d14a8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x5575658d1520 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d1898 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator)'
| |-ParmVarDecl 0x5575658d1708 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x5575658d1780 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d1a58 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x5575658d1968 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d1c18 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x5575658d1b20 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d1cd0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658d1d80 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575658d1fb8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x5575658d1e30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575658d1ea8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x5575658d2258 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x5575658d2160 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-FieldDecl 0x5575658d2320 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-FieldDecl 0x5575658d2370 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5575658d23c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658cd5e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::element_landmark_t'
|-CXXRecordDecl 0x5575658cd7e8 prev 0x5575658cd5e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575658ce9f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<element_landmark_t>::type':'typed_array_memory<Router::element_landmark_t>'
| `-ElaboratedType 0x5575658ce9a0 'typename array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x5575658ce980 'conditional<false, sized_array_memory<32>, typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x5575658ce830 'type'
|     `-SubstTemplateTypeParmType 0x5575658ce6c0 'typed_array_memory<Router::element_landmark_t>' sugar
|       |-TemplateTypeParmType 0x557565485410 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5575654853b8 'F'
|       `-RecordType 0x5575658ce320 'typed_array_memory<Router::element_landmark_t>'
|         `-ClassTemplateSpecialization 0x5575658ce240 'typed_array_memory'
|-FieldDecl 0x5575658d2410 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::element_landmark_t>::array_memory_type>':'vector_memory<typed_array_memory<Router::element_landmark_t> >' mutable
|-AccessSpecDecl 0x5575658d2460 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575658d2498 <line:118:5, col:15> col:15 value_type 'Router::element_landmark_t':'Router::element_landmark_t'
| `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|     `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d2528 <line:119:5, col:16> col:16 reference 'Router::element_landmark_t &'
| `-LValueReferenceType 0x5575658d24f0 'Router::element_landmark_t &'
|   `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|       `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d25b8 <line:120:5, col:22> col:22 const_reference 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x5575658d2580 'const Router::element_landmark_t &'
|   `-QualType 0x5575658cd881 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|         `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d2648 <line:121:5, col:16> col:16 pointer 'Router::element_landmark_t *'
| `-PointerType 0x5575658d2610 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|       `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d26d8 <line:122:5, col:22> col:22 const_pointer 'const Router::element_landmark_t *'
| `-PointerType 0x5575658d26a0 'const Router::element_landmark_t *'
|   `-QualType 0x5575658cd881 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|         `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d3340 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<element_landmark_t>::type':'const Router::element_landmark_t &'
| `-ElaboratedType 0x5575658d32f0 'typename fast_argument<element_landmark_t>::type' sugar
|   `-TypedefType 0x5575658d32c0 'fast_argument<Router::element_landmark_t, true>::type' sugar
|     |-Typedef 0x5575658d31f8 'type'
|     `-LValueReferenceType 0x5575658d31c0 'const Router::element_landmark_t &'
|       `-QualType 0x5575658d2f61 'const Router::element_landmark_t' const
|         `-SubstTemplateTypeParmType 0x5575658d2f60 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x55756548f360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55756548f308 'T'
|           `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|             `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d33a8 <line:126:5, col:22> col:22 const_access_type 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x5575658d2580 'const Router::element_landmark_t &'
|   `-QualType 0x5575658cd881 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|         `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d3400 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658d3468 <line:130:5, col:16> col:16 iterator 'Router::element_landmark_t *'
| `-PointerType 0x5575658d2610 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|       `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-TypedefDecl 0x5575658d34d0 <line:131:5, col:22> col:22 const_iterator 'const Router::element_landmark_t *'
| `-PointerType 0x5575658d26a0 'const Router::element_landmark_t *'
|   `-QualType 0x5575658cd881 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x5575658cd880 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575658ccc50 'Router::element_landmark_t'
|         `-CXXRecord 0x5575658ccbc0 'element_landmark_t'
|-EnumDecl 0x5575658d3528 <line:134:5> col:5
| `-EnumConstantDecl 0x5575658d3620 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::element_landmark_t>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575658d3600 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575658d36a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575658d3938 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658d3760 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658d3800 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5575658d3bf8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5575658d3ae0 <col:19, col:36> col:36 x 'const Vector<Router::element_landmark_t> &'
|-CXXConstructorDecl 0x5575658d3eb8 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x5575658d3da0 <col:19, col:31> col:31 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5575658d4200 <line:144:5, col:51> col:23 operator= 'Vector<Router::element_landmark_t> &(const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5575658d40e0 <col:33, col:50> col:50 x 'const Vector<Router::element_landmark_t> &'
|-CXXMethodDecl 0x5575658d4510 <line:146:5, col:46> col:23 operator= 'Vector<Router::element_landmark_t> &(Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x5575658d43f0 <col:33, col:45> col:45 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5575658d4800 <line:148:5, col:70> col:23 assign 'Vector<Router::element_landmark_t> &(Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658d4648 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658d46c0 <col:43, col:69> col:63 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5575658d4928 <line:150:5, col:55> col:49 begin 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5575658d4a08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658d4a60 <col:30> Inherited
|-CXXMethodDecl 0x5575658d4aa8 <line:151:5, col:53> col:49 end 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5575658d4b58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658d4bb0 <col:30> Inherited
|-CXXMethodDecl 0x5575658d4c78 <line:152:5, col:63> col:55 begin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5575658d4d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658d4d80 <col:30> Inherited
|-CXXMethodDecl 0x5575658d4dc8 <line:153:5, col:61> col:55 end 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5575658d4e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658d4ed0 <col:30> Inherited
|-CXXMethodDecl 0x5575658d4f18 <line:154:5, col:64> col:55 cbegin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5575658d4fc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658d5020 <col:30> Inherited
|-CXXMethodDecl 0x5575658d5068 <line:155:5, col:62> col:55 cend 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5575658d5118 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658d5170 <col:30> Inherited
|-CXXMethodDecl 0x5575658d5198 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658d5248 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658d52f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575658d54b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658d53a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658d5420 <col:37, col:63> col:57 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5575658d5608 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575658d5578 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658d57b8 <line:163:5, col:65> col:43 operator[] 'Router::element_landmark_t &(Vector::size_type)'
| |-ParmVarDecl 0x5575658d56c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658d5870 <col:20>
| `-OptimizeNoneAttr 0x5575658d58c8 <col:30>
|-CXXMethodDecl 0x5575658d59e8 <line:164:5, col:73> col:49 operator[] 'const Router::element_landmark_t &(Vector::size_type) const'
| |-ParmVarDecl 0x5575658d58f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658d5aa0 <col:20>
| `-OptimizeNoneAttr 0x5575658d5af8 <col:30>
|-CXXMethodDecl 0x5575658d5bb0 <line:165:5, col:29> col:15 at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658d5b20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658d5cf8 <line:166:5, col:37> col:21 at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658d5c68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658d5e28 <line:167:5, col:21> col:15 front 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5575658d5f58 <line:168:5, col:29> col:21 front 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5575658d6028 <line:169:5, col:20> col:15 back 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5575658d60f8 <line:170:5, col:28> col:21 back 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5575658d6238 <line:172:5, col:39> col:15 unchecked_at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658d61a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658d6380 <line:173:5, col:47> col:21 unchecked_at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658d62f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658d64c8 <line:174:5, col:59> col:15 at_u 'Router::element_landmark_t &(Vector::size_type)' inline
| |-ParmVarDecl 0x5575658d6438 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658d6580 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575658d6680 <line:175:5, col:71> col:21 at_u 'const Router::element_landmark_t &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575658d65f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658d6738 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575658d67f8 <line:177:5, col:20> col:15 data 'Router::element_landmark_t *()' inline
|-CXXMethodDecl 0x5575658d68f8 <line:178:5, col:28> col:21 data 'const Router::element_landmark_t *() const' inline
|-CXXMethodDecl 0x5575658d6a78 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658d69b8 <col:27, col:47> col:47 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-FunctionTemplateDecl 0x5575658d7208 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575658d6b30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::element_landmark_t>':'fast_argument<Router::element_landmark_t, true>'
| `-CXXMethodDecl 0x5575658d7168 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::element_landmark_t &&)' inline
|   `-ParmVarDecl 0x5575658d7068 <col:58, col:62> col:62 v 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5575658d72e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658d7438 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658d73a8 <col:28, col:48> col:48 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5575658d74f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575658d7738 <line:189:5, col:62> col:21 insert 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658d75b0 <col:28, col:37> col:37 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5575658d7628 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5575658d78c8 <line:190:5, col:38> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator)' inline
| `-ParmVarDecl 0x5575658d7808 <col:27, col:36> col:36 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5575658d7ad8 <line:191:5, col:49> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::iterator)' inline
| |-ParmVarDecl 0x5575658d7990 <col:27, col:36> col:36 a 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5575658d7a08 <col:39, col:48> col:48 b 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5575658d7b98 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575658d7df8 <line:195:5, col:34> col:17 swap 'void (Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5575658d7d00 <col:22, col:33> col:33 x 'Vector<Router::element_landmark_t> &'
`-CXXDestructorDecl 0x5575658d7ec8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575658d7ec8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55756575fa70 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x55756575fc48 prev 0x55756575fa70 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55756575fcd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55756575fd00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565765700 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5575657656b0 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5575657601b0 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5575657600b0 'type'
|     `-TemplateSpecializationType 0x557565760040 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55756575ff20 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x55756575ff00 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55756575fee0 <col:24> 'unsigned long' 16
|       `-RecordType 0x557565760020 'char_array<16>'
|         `-ClassTemplateSpecialization 0x55756575ff40 'char_array'
|-TypedefDecl 0x5575657657b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x557565765780 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x557565765760 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x557565765700 'type'
|     `-ElaboratedType 0x5575657656b0 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5575657601b0 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5575657600b0 'type'
|         `-TemplateSpecializationType 0x557565760040 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55756575ff20 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x55756575ff00 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55756575fee0 <col:24> 'unsigned long' 16
|           `-RecordType 0x557565760020 'char_array<16>'
|             `-ClassTemplateSpecialization 0x55756575ff40 'char_array'
|-CXXMethodDecl 0x557565765938 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x557565765848 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x557565765a28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x557565765b08 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x557565765b08
|-CXXMethodDecl 0x557565765dd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x557565765ce0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x557565766018 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x557565765e90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565765f08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5575657661e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5575657660d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565766150 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557565766348 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x557565766418 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x557565766668 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5575657664d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x557565766550 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5575657668c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x557565766738 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5575657667b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557565766a88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x557565766998 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557565766c48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x557565766b50 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557565766d00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557565766db0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557565766fe8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x557565766e60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557565766ed8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557565767288 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x557565767190 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x557565767350 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5575657673a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5575657673f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658d85e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::Connection'
|-CXXRecordDecl 0x5575658d87e8 prev 0x5575658d85e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575658d98b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Connection>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5575658d9860 'typename array_memory<Connection>::type' sugar
|   `-TypedefType 0x5575658d9840 'conditional<true, sized_array_memory<16>, typed_array_memory<Router::Connection> >::type' sugar
|     |-Typedef 0x5575658d96f0 'type'
|     `-SubstTemplateTypeParmType 0x55756575f640 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x55756575f190 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x55756575f0a8 'sized_array_memory'
|-FieldDecl 0x5575658d99b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::Connection>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5575658d9a00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575658d9a38 <line:118:5, col:15> col:15 value_type 'Router::Connection':'Router::Connection'
| `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-RecordType 0x5575655d32f0 'Router::Connection'
|     `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658d9af8 <line:119:5, col:16> col:16 reference 'Router::Connection &'
| `-LValueReferenceType 0x5575658d9ac0 'Router::Connection &'
|   `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575655d32f0 'Router::Connection'
|       `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658d9b88 <line:120:5, col:22> col:22 const_reference 'const Router::Connection &'
| `-LValueReferenceType 0x5575658d9b50 'const Router::Connection &'
|   `-QualType 0x5575658d8881 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575655d32f0 'Router::Connection'
|         `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658d9c18 <line:121:5, col:16> col:16 pointer 'Router::Connection *'
| `-PointerType 0x5575658d9be0 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575655d32f0 'Router::Connection'
|       `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658d9ca8 <line:122:5, col:22> col:22 const_pointer 'const Router::Connection *'
| `-PointerType 0x5575658d9c70 'const Router::Connection *'
|   `-QualType 0x5575658d8881 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575655d32f0 'Router::Connection'
|         `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658da900 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Connection>::type':'const Router::Connection &'
| `-ElaboratedType 0x5575658da8b0 'typename fast_argument<Connection>::type' sugar
|   `-TypedefType 0x5575658da890 'fast_argument<Router::Connection, true>::type' sugar
|     |-Typedef 0x5575658da7c8 'type'
|     `-LValueReferenceType 0x5575658da790 'const Router::Connection &'
|       `-QualType 0x5575658da531 'const Router::Connection' const
|         `-SubstTemplateTypeParmType 0x5575658da530 'Router::Connection' sugar
|           |-TemplateTypeParmType 0x55756548f360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55756548f308 'T'
|           `-RecordType 0x5575655d32f0 'Router::Connection'
|             `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658da968 <line:126:5, col:22> col:22 const_access_type 'const Router::Connection &'
| `-LValueReferenceType 0x5575658d9b50 'const Router::Connection &'
|   `-QualType 0x5575658d8881 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575655d32f0 'Router::Connection'
|         `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658da9c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658daa28 <line:130:5, col:16> col:16 iterator 'Router::Connection *'
| `-PointerType 0x5575658d9be0 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575655d32f0 'Router::Connection'
|       `-CXXRecord 0x5575655d3260 'Connection'
|-TypedefDecl 0x5575658daa90 <line:131:5, col:22> col:22 const_iterator 'const Router::Connection *'
| `-PointerType 0x5575658d9c70 'const Router::Connection *'
|   `-QualType 0x5575658d8881 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x5575658d8880 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575655d32f0 'Router::Connection'
|         `-CXXRecord 0x5575655d3260 'Connection'
|-EnumDecl 0x5575658daae8 <line:134:5> col:5
| `-EnumConstantDecl 0x5575658dabe0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::Connection>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575658dabc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575658dac68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575658daef8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658dad20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658dadc0 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXConstructorDecl 0x5575658db1b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5575658db0a0 <col:19, col:36> col:36 x 'const Vector<Router::Connection> &'
|-CXXConstructorDecl 0x5575658dc298 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x5575658dc180 <col:19, col:31> col:31 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x5575658dc5e0 <line:144:5, col:51> col:23 operator= 'Vector<Router::Connection> &(const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5575658dc4c0 <col:33, col:50> col:50 x 'const Vector<Router::Connection> &'
|-CXXMethodDecl 0x5575658dc8f0 <line:146:5, col:46> col:23 operator= 'Vector<Router::Connection> &(Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x5575658dc7d0 <col:33, col:45> col:45 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x5575658dcbe0 <line:148:5, col:70> col:23 assign 'Vector<Router::Connection> &(Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658dca28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658dcaa0 <col:43, col:69> col:63 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5575658dcd38 <line:150:5, col:55> col:49 begin 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x5575658dce18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658dce70 <col:30> Inherited
|-CXXMethodDecl 0x5575658dceb8 <line:151:5, col:53> col:49 end 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x5575658dcf68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658dcfc0 <col:30> Inherited
|-CXXMethodDecl 0x5575658dd088 <line:152:5, col:63> col:55 begin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5575658dd138 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658dd190 <col:30> Inherited
|-CXXMethodDecl 0x5575658dd1d8 <line:153:5, col:61> col:55 end 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5575658dd288 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658dd2e0 <col:30> Inherited
|-CXXMethodDecl 0x5575658dd328 <line:154:5, col:64> col:55 cbegin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5575658dd3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658dd430 <col:30> Inherited
|-CXXMethodDecl 0x5575658dd478 <line:155:5, col:62> col:55 cend 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x5575658dd528 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658dd580 <col:30> Inherited
|-CXXMethodDecl 0x5575658dd5a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658dd658 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658dd708 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575658dd8c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658dd7b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658dd830 <col:37, col:63> col:57 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5575658dda18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575658dd988 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658ddbc8 <line:163:5, col:65> col:43 operator[] 'Router::Connection &(Vector::size_type)'
| |-ParmVarDecl 0x5575658ddad0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658ddc80 <col:20>
| `-OptimizeNoneAttr 0x5575658ddcd8 <col:30>
|-CXXMethodDecl 0x5575658dddf8 <line:164:5, col:73> col:49 operator[] 'const Router::Connection &(Vector::size_type) const'
| |-ParmVarDecl 0x5575658ddd00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658ddeb0 <col:20>
| `-OptimizeNoneAttr 0x5575658ddf08 <col:30>
|-CXXMethodDecl 0x5575658ddfc0 <line:165:5, col:29> col:15 at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658ddf30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658de108 <line:166:5, col:37> col:21 at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658de078 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658de238 <line:167:5, col:21> col:15 front 'Router::Connection &()' inline
|-CXXMethodDecl 0x5575658de368 <line:168:5, col:29> col:21 front 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x5575658de438 <line:169:5, col:20> col:15 back 'Router::Connection &()' inline
|-CXXMethodDecl 0x5575658de508 <line:170:5, col:28> col:21 back 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x5575658de648 <line:172:5, col:39> col:15 unchecked_at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658de5b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658de790 <line:173:5, col:47> col:21 unchecked_at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658de700 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658de8d8 <line:174:5, col:59> col:15 at_u 'Router::Connection &(Vector::size_type)' inline
| |-ParmVarDecl 0x5575658de848 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658de990 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575658dea90 <line:175:5, col:71> col:21 at_u 'const Router::Connection &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575658dea00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658deb48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575658dec08 <line:177:5, col:20> col:15 data 'Router::Connection *()' inline
|-CXXMethodDecl 0x5575658ded08 <line:178:5, col:28> col:21 data 'const Router::Connection *() const' inline
|-CXXMethodDecl 0x5575658deeb8 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658dedc8 <col:27, col:47> col:47 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-FunctionTemplateDecl 0x5575658df678 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575658def70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::Connection>':'fast_argument<Router::Connection, true>'
| `-CXXMethodDecl 0x5575658df5d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::Connection &&)' inline
|   `-ParmVarDecl 0x5575658df4d8 <col:58, col:62> col:62 v 'Router::Connection &&'
|-CXXMethodDecl 0x5575658df758 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658df8a8 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658df818 <col:28, col:48> col:48 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5575658df960 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575658dfba8 <line:189:5, col:62> col:21 insert 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658dfa20 <col:28, col:37> col:37 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x5575658dfa98 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x5575658dfd68 <line:190:5, col:38> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator)' inline
| `-ParmVarDecl 0x5575658dfc78 <col:27, col:36> col:36 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x5575658dffb8 <line:191:5, col:49> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::iterator)' inline
| |-ParmVarDecl 0x5575658dfe30 <col:27, col:36> col:36 a 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x5575658dfea8 <col:39, col:48> col:48 b 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x5575658e0078 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575658e02d8 <line:195:5, col:34> col:17 swap 'void (Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x5575658e01e0 <col:22, col:33> col:33 x 'Vector<Router::Connection> &'
`-CXXDestructorDecl 0x5575658e03a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575658e03a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5)
         0 |   HandlerCallback h
         0 |   ReadHandlerCallback r
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5)
         0 |   HandlerCallback h
         0 |   WriteHandlerCallback w
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Handler
         0 |   class String _name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5) _read_hook
        24 |     HandlerCallback h
        24 |     ReadHandlerCallback r
        32 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5) _write_hook
        32 |     HandlerCallback h
        32 |     WriteHandlerCallback w
        40 |   void * _read_user_data
        48 |   void * _write_user_data
        56 |   uint32_t _flags
        60 |   int _use_count
        64 |   int _next_by_name
           | [sizeof=72, dsize=68, align=8,
           |  nvsize=68, nvalign=8]

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656dbb58 prev 0x5575658332b8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575656dbc50 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5575656dbce0 <col:22, col:28> col:22 public
|-EnumDecl 0x5575656dbd08 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5575656dbe28 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dbe08 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5575656dbdf0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5575656dbdd0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5575656dbed0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dbeb0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5575656dbe98 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5575656dbe78 <col:14> 'int' 1
| |-EnumConstantDecl 0x5575656dbf60 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dbf40 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5575656dbf20 <col:17> 'int' 0
| |-EnumConstantDecl 0x5575656dbff0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dbfd0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5575656dbfb0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5575656dc080 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dc060 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5575656dc040 <col:16> 'int' 2
| |-EnumConstantDecl 0x5575656dc110 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dc0f0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5575656dc0d0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5575656dc1a0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dc180 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5575656dc160 <col:15> 'int' 4
| |-EnumConstantDecl 0x5575656dc230 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dc210 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5575656dc1f0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5575656dc2c0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5575656dc2a0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5575656dc280 <col:12> 'int' 6
| `-EnumConstantDecl 0x5575656dc350 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5575656dc330 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5575656dc310 <col:13> 'int' 7
|-VarDecl 0x5575656dc3c0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5575656dc448 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5575656dc4d0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5575656dc558 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5575656dc5e0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5575656dc668 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5575658ab2a0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5575658ab328 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5575658ab3b0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5575658ab438 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5575658ab4c0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5575658ab5c0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5575658b08a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5575658b1038 <line:128:13> 'int' 0
| `-CompoundStmt 0x5575658b10a8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5575658ab6b0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5575658b10b8 <col:29, line:132:5>
|-CXXMethodDecl 0x5575658ab868 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5575658ab7a0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5575658ab930 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5575658aba18 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5575658b1110 <col:44, line:161:5>
|   `-ReturnStmt 0x5575658b1100 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5575658b10e8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5575658b10c8 <col:9> 'ErrorHandler *' lvalue Var 0x5575658b0908 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5575658abb58 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5575658abac8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5575658abc20 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5575658b1170 <col:43, line:173:5>
|   `-ReturnStmt 0x5575658b1160 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5575658b1148 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5575658b1128 <col:9> 'ErrorHandler *' lvalue Var 0x5575658b0980 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5575658abcd8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5575658abd58 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5575658abe68 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5575658abdd8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5575658abfb8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5575658abf28 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5575658ac110 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5575658ac078 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5575658ac268 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5575658ac1d0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5575658ac3c0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5575658ac328 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5575658ac5d0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5575658ac478 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5575658ac4f8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5575658ac7a8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5575658ac690 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5575658ac710 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5575658ac9c8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5575658ac868 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5575658ac8e8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5575658acba8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5575658aca88 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5575658acb08 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5575658acd88 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5575658acc68 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5575658acce8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5575658acf10 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5575658ace48 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5575658ad0e0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5575658acfc8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5575658ad040 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5575658b13c8 <col:57, line:234:5>
|   `-ReturnStmt 0x5575658b13b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5575658b13a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5575658b1348 <col:9, col:41> 'int'
|         |-MemberExpr 0x5575658b1318 <col:9> '<bound member function type>' ->xmessage 0x5575658acf10
|         | `-CXXThisExpr 0x5575658b1308 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5575658b1388 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5575658b1370 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5575658b12e8 <col:18, col:40> 'String' (CXXTemporary 0x5575658b12e8)
|               `-CallExpr 0x5575658b12b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5575658b1298 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5575658b1210 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5575658af0d8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5575658b1230 <col:31> 'const String' lvalue ParmVar 0x5575658ad040 'str' 'const String &'
|                 `-DeclRefExpr 0x5575658b1250 <col:36> 'const String' lvalue ParmVar 0x5575658acfc8 'anno' 'const String &'
|-CXXMethodDecl 0x5575658ad3c0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5575658ad1a0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5575658ad220 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5575658ad298 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5575658b1658 <col:68, line:243:5>
|   `-ReturnStmt 0x5575658b1648 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5575658b1630 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5575658b15d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5575658b15a0 <col:9> '<bound member function type>' ->xmessage 0x5575658ad0e0
|         | `-CXXThisExpr 0x5575658b1590 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5575658b1468 <col:18> 'const String' lvalue ParmVar 0x5575658ad1a0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5575658b1618 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5575658b1600 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5575658b1570 <col:24, col:40> 'String' (CXXTemporary 0x5575658b1570)
|               `-CXXMemberCallExpr 0x5575658b1508 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5575658b1498 <col:24> '<bound member function type>' ->vformat 0x5575658ae5a0
|                 | `-CXXThisExpr 0x5575658b1488 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5575658b1538 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5575658b14c8 <col:32> 'const char *' lvalue ParmVar 0x5575658ad220 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5575658b1550 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5575658b14e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5575658ad298 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5575658ad660 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5575658ad488 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5575658ad500 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5575658ad578 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5575658b1998 <col:23, line:254:5>
|   `-ReturnStmt 0x5575658b1988 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5575658b1970 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5575658b1910 <col:9, col:71> 'int'
|         |-MemberExpr 0x5575658b18e0 <col:9> '<bound member function type>' ->xmessage 0x5575658ad0e0
|         | `-CXXThisExpr 0x5575658b18d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5575658b1958 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5575658b1940 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5575658b1890 <col:18, col:65> 'String' (CXXTemporary 0x5575658b1890)
|         |     `-CallExpr 0x5575658b1828 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5575658b1810 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5575658b16f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5575658af0d8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5575658b1718 <col:31> 'const String' lvalue ParmVar 0x5575658ad500 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5575658b1870 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5575658b1858 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5575658b17f0 <col:37, col:64> 'String' (CXXTemporary 0x5575658b17f0)
|         |             `-CallExpr 0x5575658b17c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5575658b17a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5575658b1738 <col:37> 'String (const String &)' lvalue CXXMethod 0x5575658af728 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5575658b1758 <col:56> 'const String' lvalue ParmVar 0x5575658ad488 'landmark' 'const String &'
|         `-DeclRefExpr 0x5575658b18b0 <col:68> 'const String' lvalue ParmVar 0x5575658ad578 'str' 'const String &'
|-CXXMethodDecl 0x5575658ad9e0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5575658ad728 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5575658ad7a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5575658ad820 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5575658ad898 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5575658b1c50 <col:34, line:267:5>
|   `-ReturnStmt 0x5575658b1c40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5575658b1c28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5575658b1bc0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5575658b1b90 <col:9> '<bound member function type>' ->xmessage 0x5575658ad660
|         | `-CXXThisExpr 0x5575658b1b80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5575658b1a38 <col:18> 'const String' lvalue ParmVar 0x5575658ad728 'landmark' 'const String &'
|         |-DeclRefExpr 0x5575658b1a58 <col:28> 'const String' lvalue ParmVar 0x5575658ad7a0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5575658b1c10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5575658b1bf8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5575658b1b60 <col:34, col:50> 'String' (CXXTemporary 0x5575658b1b60)
|               `-CXXMemberCallExpr 0x5575658b1af8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5575658b1a88 <col:34> '<bound member function type>' ->vformat 0x5575658ae5a0
|                 | `-CXXThisExpr 0x5575658b1a78 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5575658b1b28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5575658b1ab8 <col:42> 'const char *' lvalue ParmVar 0x5575658ad820 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5575658b1b40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5575658b1ad8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5575658ad898 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5575658adaf0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5575658b1cd0 <col:25, line:288:5>
|   `-ReturnStmt 0x5575658b1cc0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5575658b1ca8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5575658b1c78 <col:9> 'const int' lvalue ->_nerrors 0x5575658b08a8
|         `-CXXThisExpr 0x5575658b1c68 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5575658add00 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5575658adba8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5575658adc28 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5575658adfe8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5575658addc8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5575658ade48 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5575658adec0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5575658ae180 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5575658ae0b8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5575658ae3c8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5575658ae240 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5575658ae2b8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5575658b1f30 <col:58, line:357:5>
|   `-ReturnStmt 0x5575658b1f20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5575658b1f08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5575658b1ed8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5575658b1ec0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5575658b1ea0 <col:9, col:29> 'String' (CXXTemporary 0x5575658b1ea0)
|             `-CallExpr 0x5575658b1e30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5575658b1e18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5575658b1d98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5575658adfe8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5575658b1d38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5575658b1e68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5575658b1d58 <col:21> 'const char *' lvalue ParmVar 0x5575658ae240 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5575658b1e80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5575658b1d78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5575658ae2b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5575658ae5a0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5575658ae490 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5575658ae508 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5575658ae6f8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5575658ae668 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5575658ae840 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5575658ae7b0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5575658aeae0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5575658ae8f8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5575658ae978 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5575658ae9f0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5575658aec40 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5575658aebb0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5575658b2048 <col:37, line:441:5>
|   `-IfStmt 0x5575658b2030 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5575658b1fb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5575658b1f88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5575658b1f48 <col:6> 'int' lvalue ParmVar 0x5575658aebb0 'level' 'int'
|     | `-ImplicitCastExpr 0x5575658b1fa0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5575658b1f68 <col:15> 'ErrorHandler::Level' EnumConstant 0x5575656dc110 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5575658b2018 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5575658b1fe8 <col:8> 'int' lvalue ->_nerrors 0x5575658b08a8
|         `-CXXThisExpr 0x5575658b1fd8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5575658aed08 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5575658b20e0 <col:26, line:448:5>
|   `-BinaryOperator 0x5575658b20c0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5575658b2070 <col:2> 'int' lvalue ->_nerrors 0x5575658b08a8
|     | `-CXXThisExpr 0x5575658b2060 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5575658b20a0 <col:13> 'int' 0
|-CXXMethodDecl 0x5575658aeed0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5575658aedc0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5575658aee38 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5575658af0d8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5575658aef90 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5575658af008 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5575658af388 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5575658af198 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5575658af218 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5575658af298 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5575658af440 <col:59> 0 0
|-CXXMethodDecl 0x5575658af5d8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5575658af4b8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5575658af538 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5575658b2750 <col:70, line:534:5>
|   |-DeclStmt 0x5575658b2250 <line:528:2, col:20>
|   | |-VarDecl 0x5575658b2108 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5575658b2170 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5575658b21a8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5575658b2210 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5575658b2320 <line:529:2, col:23>
|   | `-VarDecl 0x5575658b2280 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5575658b2308 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5575658b22e8 <col:18> 'const char *' lvalue ParmVar 0x5575658af4b8 'begin' 'const char *'
|   |-DoStmt 0x5575658b26e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5575658b2618 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5575658b2600 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5575658b25e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5575658b2338 <col:6> 'const char *' lvalue Var 0x5575658b2280 'x' 'const char *'
|   | |     `-CallExpr 0x5575658b2530 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5575658b2518 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5575658b24d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5575658b0d80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5575658b2598 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5575658b2580 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5575658b23f0 <col:20, col:27> 'String' (CXXTemporary 0x5575658b23f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5575658b23b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5575658b25b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5575658b2410 <col:30> 'const char *' lvalue Var 0x5575658b2280 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5575658b25c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5575658b2430 <col:33> 'const char *' lvalue ParmVar 0x5575658af538 'end' 'const char *'
|   | |       |-UnaryOperator 0x5575658b2470 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5575658b2450 <col:39> 'String' lvalue Var 0x5575658b2108 'name' 'String'
|   | |       |-UnaryOperator 0x5575658b24a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5575658b2488 <col:46> 'String' lvalue Var 0x5575658b21a8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5575658b24c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5575658b26d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5575658b26b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5575658b2698 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5575658b2668 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|   |         `-ImplicitCastExpr 0x5575658b2650 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5575658b2630 <col:11> 'String' lvalue Var 0x5575658b2108 'name' 'String'
|   `-ReturnStmt 0x5575658b2740 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5575658b2728 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5575658b2708 <col:9> 'const char *' lvalue Var 0x5575658b2280 'x' 'const char *'
|-CXXMethodDecl 0x5575658af728 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5575658af698 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5575658b2d58 <col:55, line:550:5>
|   `-IfStmt 0x5575658b2d30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5575658b2990 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5575658b2978 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5575658b2960 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5575658b2940 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5575658b2910 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|     | |       `-DeclRefExpr 0x5575658b27b0 <col:6> 'const String' lvalue ParmVar 0x5575658af698 'x' 'const String &'
|     | `-BinaryOperator 0x5575658b28f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5575658b28c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5575658b2870 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5575658b2858 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5575658b2810 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x557565508df0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5575658b27d0 <col:11> 'const String' lvalue ParmVar 0x5575658af698 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5575658b27f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5575658b28d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5575658b28a8 <col:19> 'char' 123
|     |-ReturnStmt 0x5575658b2a00 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5575658b29d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5575658b29b0 <col:13> 'const String' lvalue ParmVar 0x5575658af698 'x' 'const String &'
|     `-IfStmt 0x5575658b2d08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5575658b2a98 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5575658b2a80 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5575658b2a60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5575658b2a30 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |       `-DeclRefExpr 0x5575658b2a10 <col:11> 'const String' lvalue ParmVar 0x5575658af698 'x' 'const String &'
|       |-ReturnStmt 0x5575658b2c20 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5575658b2c08 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5575658b2bd8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5575658b2bc0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5575658b2ba0 <col:13, col:29> 'String' (CXXTemporary 0x5575658b2ba0)
|       |         `-CallExpr 0x5575658b2b50 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5575658b2b38 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5575658b2ab0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5575658aeed0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5575658b2b80 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5575658b2ad0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5575658b2af0 <col:28> 'const String' lvalue ParmVar 0x5575658af698 'x' 'const String &'
|       `-ReturnStmt 0x5575658b2cf8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5575658b2ce0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5575658b2cb0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5575658b2c98 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5575658b2c78 <col:13, col:20> 'String' (CXXTemporary 0x5575658b2c78)
|                 `-CXXTemporaryObjectExpr 0x5575658b2c40 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5575658af8f0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5575658af7e0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5575658af858 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5575658b1028 <col:71> 'bool' false
|-CXXRecordDecl 0x5575658af9a0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5575658afc98 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5575658afc30 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5575658afbd0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5575658afb90 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5575654ebe50 'String'
|       | `-CXXRecord 0x5575654ebdc0 'String'
|       |-BuiltinType 0x5575651ba370 'int'
|       `-DecayedType 0x557565834300 '__va_list_tag *' sugar
|         |-TypedefType 0x5575658342d0 'va_list' sugar
|         | |-Typedef 0x5575653dcf00 'va_list'
|         | `-TypedefType 0x5575653dceb0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5575653148b8 '__gnuc_va_list'
|         |   `-TypedefType 0x557565314820 '__builtin_va_list' sugar
|         |     |-Typedef 0x5575651fbbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5575651fbb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5575651bb0c0 '__va_list_tag'
|         |         `-CXXRecord 0x5575651bb028 '__va_list_tag'
|         `-PointerType 0x5575653e27a0 '__va_list_tag *'
|           `-RecordType 0x5575651bb0c0 '__va_list_tag'
|             `-CXXRecord 0x5575651bb028 '__va_list_tag'
|-EnumDecl 0x5575658afcf0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5575658afdf0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b0350 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658afdd0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5575658afdb0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5575658afe80 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b0368 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658afe60 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5575658afe40 <col:21> 'int' 2
| |-EnumConstantDecl 0x5575658aff10 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b0380 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658afef0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5575658afed0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5575658affa0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b0398 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658aff80 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5575658aff60 <col:17> 'int' 8
| |-EnumConstantDecl 0x5575658b0030 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b03b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658b0010 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5575658afff0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5575658b00c0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b03c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658b00a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5575658b0080 <col:19> 'int' 32
| |-EnumConstantDecl 0x5575658b0150 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b03e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658b0130 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5575658b0110 <col:17> 'int' 64
| |-EnumConstantDecl 0x5575658b01e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b03f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658b01c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5575658b01a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5575658b0270 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5575658b0410 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575658b0250 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5575658b0230 <col:16> 'int' 256
| `-EnumConstantDecl 0x5575658b0300 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5575658b0428 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575658b02e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5575658b02c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5575658b0638 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5575658b0450 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5575658b04f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5575658b07c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5575658b06f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5575658b0868 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5575658b08a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5575658b0908 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5575658b0980 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5575658b0d80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5575658b09f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5575658b0a78 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5575658b0af8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5575658b0b70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5575658b0be8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5575658b0c60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5575658b0ea8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5575658b0ea8
| `-ParmVarDecl 0x5575658b0fb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5575658b30b8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5575658b30b8
  `-ParmVarDecl 0x5575658b31c8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756571bf10 <../dummy_inc/click/handler.hh:290:5, line:293:5> line:290:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55756571c060 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x55756571c0e0 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
|-CXXConstructorDecl 0x55756571ced8 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x55756571ced8
| `-ParmVarDecl 0x55756571cfe8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXConstructorDecl 0x55756571d088 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x55756571d088
| `-ParmVarDecl 0x55756571d198 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
|-CXXDestructorDecl 0x55756571d208 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55756571d208
|-CXXMethodDecl 0x55756571dad8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x55756571dad8
| `-ParmVarDecl 0x55756571dbe8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXMethodDecl 0x55756571dc58 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x55756571dc58
| `-ParmVarDecl 0x55756571dd68 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
`-CXXConstructorDecl 0x5575658fb958 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5575658fba30 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756571c210 <../dummy_inc/click/handler.hh:294:5, line:297:5> line:294:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55756571c338 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x55756571c3c0 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
|-CXXConstructorDecl 0x55756571d338 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x55756571d338
| `-ParmVarDecl 0x55756571d448 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXConstructorDecl 0x55756571d4e8 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x55756571d4e8
| `-ParmVarDecl 0x55756571d5f8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
|-CXXDestructorDecl 0x55756571d668 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55756571d668
|-CXXMethodDecl 0x55756571de08 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x55756571de08
| `-ParmVarDecl 0x55756571df18 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXMethodDecl 0x55756571df88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x55756571df88
| `-ParmVarDecl 0x55756571e098 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
`-CXXConstructorDecl 0x5575658fba90 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5575658fbb70 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon.11 = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557565717898 prev 0x557565716d30 <../dummy_inc/click/handler.hh:19:1, line:313:1> line:19:7 class Handler definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x557565717990 <col:1, col:7> col:7 implicit referenced class Handler
|-AccessSpecDecl 0x557565717a20 <col:17, col:23> col:17 public
|-EnumDecl 0x557565717a48 <line:21:5, line:59:5> line:21:10 Flags
| |-EnumConstantDecl 0x557565717b50 <line:22:2, col:11> col:2 referenced f_read 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657188a0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717b30 <col:11> 'int' Int: 1
| |     `-IntegerLiteral 0x557565717b10 <col:11> 'int' 1
| |-EnumConstantDecl 0x557565717be0 <line:23:2, col:12> col:2 referenced f_write 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657188b8 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717bc0 <col:12> 'int' Int: 2
| |     `-IntegerLiteral 0x557565717ba0 <col:12> 'int' 2
| |-EnumConstantDecl 0x557565717c70 <line:24:2, col:17> col:2 referenced f_read_param 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657188d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717c50 <col:17> 'int' Int: 4
| |     `-IntegerLiteral 0x557565717c30 <col:17> 'int' 4
| |-EnumConstantDecl 0x557565717d00 <line:25:2, col:16> col:2 referenced f_exclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657188e8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717ce0 <col:16> 'int' Int: 0
| |     `-IntegerLiteral 0x557565717cc0 <col:16> 'int' 0
| |-EnumConstantDecl 0x557565717d90 <line:28:2, col:19> col:2 referenced f_nonexclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718900 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717d70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x557565717d50 <col:19> 'int' 32
| |-EnumConstantDecl 0x557565717e20 <line:31:2, col:10> col:2 referenced f_raw 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718918 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717e00 <col:10> 'int' Int: 64
| |     `-IntegerLiteral 0x557565717de0 <col:10> 'int' 64
| |-EnumConstantDecl 0x557565717eb0 <line:32:2, col:19> col:2 referenced f_read_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718930 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717e90 <col:19> 'int' Int: 128
| |     `-IntegerLiteral 0x557565717e70 <col:19> 'int' 128
| |-EnumConstantDecl 0x557565717f40 <line:34:2, col:20> col:2 referenced f_write_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718948 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717f20 <col:20> 'int' Int: 256
| |     `-IntegerLiteral 0x557565717f00 <col:20> 'int' 256
| |-EnumConstantDecl 0x557565717fd0 <line:36:2, col:17> col:2 referenced f_deprecated 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718960 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565717fb0 <col:17> 'int' Int: 512
| |     `-IntegerLiteral 0x557565717f90 <col:17> 'int' 512
| |-EnumConstantDecl 0x557565718060 <line:38:2, col:15> col:2 referenced f_uncommon 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718978 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565718040 <col:15> 'int' Int: 1024
| |     `-IntegerLiteral 0x557565718020 <col:15> 'int' 1024
| |-EnumConstantDecl 0x5575657180f0 <line:40:2, col:11> col:2 referenced f_calm 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718990 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657180d0 <col:11> 'int' Int: 2048
| |     `-IntegerLiteral 0x5575657180b0 <col:11> 'int' 2048
| |-EnumConstantDecl 0x557565718180 <line:41:2, col:16> col:2 referenced f_expensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657189a8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565718160 <col:16> 'int' Int: 4096
| |     `-IntegerLiteral 0x557565718140 <col:16> 'int' 4096
| |-EnumConstantDecl 0x557565718210 <line:42:2, col:13> col:2 referenced f_button 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657189c0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657181f0 <col:13> 'int' Int: 8192
| |     `-IntegerLiteral 0x5575657181d0 <col:13> 'int' 8192
| |-EnumConstantDecl 0x5575657182a0 <line:43:2, col:15> col:2 referenced f_checkbox 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657189d8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565718280 <col:15> 'int' Int: 16384
| |     `-IntegerLiteral 0x557565718260 <col:15> 'int' 16384
| |-EnumConstantDecl 0x557565718370 <line:45:2, col:20> col:2 referenced f_driver0 'Handler::Flags'
| | `-ConstantExpr 0x557565718350 <col:14, col:20> 'unsigned int' Int: 67108864
| |   `-BinaryOperator 0x557565718330 <col:14, col:20> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5575657182f0 <col:14> 'unsigned int' 1
| |     `-IntegerLiteral 0x557565718310 <col:20> 'int' 26
| |-EnumConstantDecl 0x557565718440 <line:46:9, col:27> col:9 referenced f_driver1 'Handler::Flags'
| | `-ConstantExpr 0x557565718420 <col:21, col:27> 'unsigned int' Int: 134217728
| |   `-BinaryOperator 0x557565718400 <col:21, col:27> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5575657183c0 <col:21> 'unsigned int' 1
| |     `-IntegerLiteral 0x5575657183e0 <col:27> 'int' 27
| |-EnumConstantDecl 0x5575657184d0 <line:48:2, col:17> col:2 referenced f_user_shift 'Handler::Flags'
| | `-ImplicitCastExpr 0x5575657189f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657184b0 <col:17> 'int' Int: 28
| |     `-IntegerLiteral 0x557565718490 <col:17> 'int' 28
| |-EnumConstantDecl 0x5575657185a0 <line:49:2, col:18> col:2 referenced f_user0 'Handler::Flags'
| | `-ConstantExpr 0x557565718580 <col:12, col:18> 'unsigned int' Int: 268435456
| |   `-BinaryOperator 0x557565718560 <col:12, col:18> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x557565718520 <col:12> 'unsigned int' 1
| |     `-DeclRefExpr 0x557565718540 <col:18> 'int' EnumConstant 0x5575657184d0 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x557565718630 <line:54:2, col:25> col:2 referenced f_read_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718a08 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565718610 <col:25> 'int' Int: 8
| |     `-IntegerLiteral 0x5575657185f0 <col:25> 'int' 8
| |-EnumConstantDecl 0x5575657186c0 <line:55:2, col:26> col:2 referenced f_write_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x557565718a20 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657186a0 <col:26> 'int' Int: 16
| |     `-IntegerLiteral 0x557565718680 <col:26> 'int' 16
| `-EnumConstantDecl 0x557565718850 <line:56:2, col:71> col:2 referenced f_special 'Handler::Flags'
|   `-ImplicitCastExpr 0x557565718a38 <col:14, col:71> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557565718830 <col:14, col:71> 'int' Int: 31
|       `-BinaryOperator 0x557565718810 <col:14, col:71> 'int' '|'
|         |-BinaryOperator 0x5575657187d0 <col:14, col:48> 'int' '|'
|         | |-BinaryOperator 0x557565718790 <col:14, col:33> 'int' '|'
|         | | |-BinaryOperator 0x557565718750 <col:14, col:23> 'int' '|'
|         | | | |-DeclRefExpr 0x557565718710 <col:14> 'int' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
|         | | | `-DeclRefExpr 0x557565718730 <col:23> 'int' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
|         | | `-DeclRefExpr 0x557565718770 <col:33> 'int' EnumConstant 0x557565717c70 'f_read_param' 'Handler::Flags'
|         | `-DeclRefExpr 0x5575657187b0 <col:48> 'int' EnumConstant 0x557565718630 'f_read_comprehensive' 'Handler::Flags'
|         `-DeclRefExpr 0x5575657187f0 <col:71> 'int' EnumConstant 0x5575657186c0 'f_write_comprehensive' 'Handler::Flags'
|-CXXMethodDecl 0x557565718a98 <line:62:5, line:64:5> line:62:26 name 'const String &() const' inline
| `-CompoundStmt 0x55756571e4b8 <col:39, line:64:5>
|   `-ReturnStmt 0x55756571e4a8 <line:63:2, col:9>
|     `-MemberExpr 0x55756571e478 <col:9> 'const String' lvalue ->_name 0x55756571bec0
|       `-CXXThisExpr 0x55756571e468 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x557565718b58 <line:69:5, line:71:5> line:69:21 flags 'uint32_t () const' inline
| `-CompoundStmt 0x55756571e538 <col:35, line:71:5>
|   `-ReturnStmt 0x55756571e528 <line:70:2, col:9>
|     `-ImplicitCastExpr 0x55756571e510 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55756571e4e0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|         `-CXXThisExpr 0x55756571e4d0 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x557565718ca8 <line:75:5, line:77:5> line:75:18 user_data 'void *(int) const' inline
| |-ParmVarDecl 0x557565718c10 <col:28, col:32> col:32 used op 'int'
| `-CompoundStmt 0x55756571e6b8 <col:42, line:77:5>
|   `-ReturnStmt 0x55756571e6a8 <line:76:2, col:44>
|     `-ImplicitCastExpr 0x55756571e690 <col:9, col:44> 'void *' <LValueToRValue>
|       `-ConditionalOperator 0x55756571e660 <col:9, col:44> 'void *const' lvalue
|         |-BinaryOperator 0x55756571e5c0 <col:9, col:15> 'bool' '=='
|         | |-ImplicitCastExpr 0x55756571e590 <col:9> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55756571e550 <col:9> 'int' lvalue ParmVar 0x557565718c10 'op' 'int'
|         | `-ImplicitCastExpr 0x55756571e5a8 <col:15> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55756571e570 <col:15> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
|         |-MemberExpr 0x55756571e5f0 <col:25> 'void *const' lvalue ->_write_user_data 0x55756571c570
|         | `-CXXThisExpr 0x55756571e5e0 <col:25> 'const Handler *' implicit this
|         `-MemberExpr 0x55756571e630 <col:44> 'void *const' lvalue ->_read_user_data 0x55756571c508
|           `-CXXThisExpr 0x55756571e620 <col:44> 'const Handler *' implicit this
|-CXXMethodDecl 0x557565718d78 <line:80:5, line:82:5> line:80:18 read_user_data 'void *() const' inline
| `-CompoundStmt 0x55756571e738 <col:41, line:82:5>
|   `-ReturnStmt 0x55756571e728 <line:81:2, col:9>
|     `-ImplicitCastExpr 0x55756571e710 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55756571e6e0 <col:9> 'void *const' lvalue ->_read_user_data 0x55756571c508
|         `-CXXThisExpr 0x55756571e6d0 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x557565718e40 <line:85:5, line:87:5> line:85:18 write_user_data 'void *() const' inline
| `-CompoundStmt 0x55756571e7b8 <col:42, line:87:5>
|   `-ReturnStmt 0x55756571e7a8 <line:86:2, col:9>
|     `-ImplicitCastExpr 0x55756571e790 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55756571e760 <col:9> 'void *const' lvalue ->_write_user_data 0x55756571c570
|         `-CXXThisExpr 0x55756571e750 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x557565718f08 <line:90:5, col:63> col:18 user_data1 'void *() const' inline
| `-DeprecatedAttr 0x557565718fa8 <col:52> "" ""
|-CXXMethodDecl 0x557565719040 <line:91:5, col:63> col:18 user_data2 'void *() const' inline
| `-DeprecatedAttr 0x5575657190e0 <col:52> "" ""
|-CXXMethodDecl 0x557565719170 <line:96:5, line:98:5> line:96:17 readable 'bool () const' inline
| `-CompoundStmt 0x55756571e8a8 <col:34, line:98:5>
|   `-ReturnStmt 0x55756571e898 <line:97:2, col:18>
|     `-ImplicitCastExpr 0x55756571e880 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55756571e860 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x55756571e830 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x55756571e7e0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|         |   `-CXXThisExpr 0x55756571e7d0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x55756571e848 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x55756571e810 <col:18> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x557565719230 <line:102:5, line:104:5> line:102:17 read_param 'bool () const' inline
| `-CompoundStmt 0x55756571e998 <col:36, line:104:5>
|   `-ReturnStmt 0x55756571e988 <line:103:2, col:18>
|     `-ImplicitCastExpr 0x55756571e970 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55756571e950 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x55756571e920 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x55756571e8d0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|         |   `-CXXThisExpr 0x55756571e8c0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x55756571e938 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x55756571e900 <col:18> 'Handler::Flags' EnumConstant 0x557565717c70 'f_read_param' 'Handler::Flags'
|-CXXMethodDecl 0x5575657192f0 <line:111:5, line:113:5> line:111:17 used read_visible 'bool () const' inline
| `-CompoundStmt 0x55756571eb78 <col:38, line:113:5>
|   `-ReturnStmt 0x55756571eb68 <line:112:2, col:49>
|     `-BinaryOperator 0x55756571eb48 <col:9, col:49> 'bool' '=='
|       |-ParenExpr 0x55756571eaf0 <col:9, col:44> 'unsigned int'
|       | `-BinaryOperator 0x55756571ead0 <col:10, col:43> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55756571eaa0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55756571e9c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|       |   |   `-CXXThisExpr 0x55756571e9b0 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x55756571eab8 <col:19, col:43> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x55756571ea80 <col:19, col:43> 'int'
|       |       `-BinaryOperator 0x55756571ea60 <col:20, col:29> 'int' '|'
|       |         |-ImplicitCastExpr 0x55756571ea30 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x55756571e9f0 <col:20> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x55756571ea48 <col:29> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x55756571ea10 <col:29> 'Handler::Flags' EnumConstant 0x557565717eb0 'f_read_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x55756571eb30 <col:49> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x55756571eb10 <col:49> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5575657193b0 <line:116:5, line:118:5> line:116:17 writable 'bool () const' inline
| `-CompoundStmt 0x55756571ec68 <col:34, line:118:5>
|   `-ReturnStmt 0x55756571ec58 <line:117:2, col:18>
|     `-ImplicitCastExpr 0x55756571ec40 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55756571ec20 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x55756571ebf0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x55756571eba0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|         |   `-CXXThisExpr 0x55756571eb90 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x55756571ec08 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x55756571ebd0 <col:18> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x557565719470 <line:125:5, line:127:5> line:125:17 used write_visible 'bool () const' inline
| `-CompoundStmt 0x55756571ee48 <col:39, line:127:5>
|   `-ReturnStmt 0x55756571ee38 <line:126:2, col:51>
|     `-BinaryOperator 0x55756571ee18 <col:9, col:51> 'bool' '=='
|       |-ParenExpr 0x55756571edc0 <col:9, col:46> 'unsigned int'
|       | `-BinaryOperator 0x55756571eda0 <col:10, col:45> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55756571ed70 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55756571ec90 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|       |   |   `-CXXThisExpr 0x55756571ec80 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x55756571ed88 <col:19, col:45> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x55756571ed50 <col:19, col:45> 'int'
|       |       `-BinaryOperator 0x55756571ed30 <col:20, col:30> 'int' '|'
|       |         |-ImplicitCastExpr 0x55756571ed00 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x55756571ecc0 <col:20> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x55756571ed18 <col:30> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x55756571ece0 <col:30> 'Handler::Flags' EnumConstant 0x557565717f40 'f_write_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x55756571ee00 <col:51> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x55756571ede0 <col:51> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x557565719530 <line:130:5, line:132:5> line:130:17 visible 'bool () const' inline
| `-CompoundStmt 0x55756571ef50 <col:33, line:132:5>
|   `-ReturnStmt 0x55756571ef40 <line:131:2, col:41>
|     `-BinaryOperator 0x55756571ef20 <col:9, col:41> 'bool' '||'
|       |-CXXMemberCallExpr 0x55756571eea0 <col:9, col:22> 'bool'
|       | `-MemberExpr 0x55756571ee70 <col:9> '<bound member function type>' ->read_visible 0x5575657192f0
|       |   `-CXXThisExpr 0x55756571ee60 <col:9> 'const Handler *' implicit this
|       `-CXXMemberCallExpr 0x55756571ef00 <col:27, col:41> 'bool'
|         `-MemberExpr 0x55756571eed0 <col:27> '<bound member function type>' ->write_visible 0x557565719470
|           `-CXXThisExpr 0x55756571eec0 <col:27> 'const Handler *' implicit this
|-CXXMethodDecl 0x5575657195f0 <line:136:5, line:138:5> line:136:17 allow_concurrent_handlers 'bool () const' inline
| `-CompoundStmt 0x55756571f088 <col:51, line:138:5>
|   `-ReturnStmt 0x55756571f078 <line:137:9, col:40>
|     `-ImplicitCastExpr 0x55756571f060 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55756571f040 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x55756571eff8 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x55756571efc8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x55756571ef78 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|           |   `-CXXThisExpr 0x55756571ef68 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x55756571efe0 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x55756571efa8 <col:26> 'Handler::Flags' EnumConstant 0x557565717d90 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5575657196b0 <line:142:5, line:144:5> line:142:17 allow_concurrent_threads 'bool () const' inline
| `-CompoundStmt 0x55756571f198 <col:50, line:144:5>
|   `-ReturnStmt 0x55756571f188 <line:143:9, col:40>
|     `-ImplicitCastExpr 0x55756571f170 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x55756571f150 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x55756571f130 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x55756571f100 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x55756571f0b0 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|           |   `-CXXThisExpr 0x55756571f0a0 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x55756571f118 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x55756571f0e0 <col:26> 'Handler::Flags' EnumConstant 0x557565717d90 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x557565719770 <line:164:5, line:166:5> line:164:17 raw 'bool () const' inline
| `-CompoundStmt 0x55756571f288 <col:29, line:166:5>
|   `-ReturnStmt 0x55756571f278 <line:165:2, col:18>
|     `-ImplicitCastExpr 0x55756571f260 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55756571f240 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x55756571f210 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x55756571f1c0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|         |   `-CXXThisExpr 0x55756571f1b0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x55756571f228 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x55756571f1f0 <col:18> 'Handler::Flags' EnumConstant 0x557565717e20 'f_raw' 'Handler::Flags'
|-CXXMethodDecl 0x5575657199f8 <line:177:5, col:75> col:12 used call_read 'String (Element *, const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x557565719820 <col:22, col:31> col:31 e 'Element *'
| |-ParmVarDecl 0x557565719898 <col:34, col:48> col:48 param 'const String &'
| `-ParmVarDecl 0x557565719910 <col:55, col:69> col:69 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557565719c08 <line:186:5, line:188:5> line:186:19 call_read 'String (Element *, ErrorHandler *) const' inline
| |-ParmVarDecl 0x557565719ac0 <col:29, col:38> col:38 used e 'Element *'
| |-ParmVarDecl 0x557565719b38 <col:41, col:62> col:55 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55756571e3a0 <col:62> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55756571e380 <col:62> 'int' 0
| `-CompoundStmt 0x55756571f528 <col:71, line:188:5>
|   `-ReturnStmt 0x55756571f518 <line:187:2, col:36>
|     `-ExprWithCleanups 0x55756571f500 <col:9, col:36> 'String'
|       `-CXXConstructExpr 0x55756571f4d0 <col:9, col:36> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55756571f4b8 <col:9, col:36> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55756571f498 <col:9, col:36> 'String' (CXXTemporary 0x55756571f498)
|             `-CXXMemberCallExpr 0x55756571f3f8 <col:9, col:36> 'String'
|               |-MemberExpr 0x55756571f3c8 <col:9> '<bound member function type>' ->call_read 0x5575657199f8
|               | `-CXXThisExpr 0x55756571f3b8 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x55756571f430 <col:19> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x55756571f310 <col:19> 'Element *' lvalue ParmVar 0x557565719ac0 'e' 'Element *'
|               |-MaterializeTemporaryExpr 0x55756571f460 <col:22, col:29> 'const String' lvalue
|               | `-ImplicitCastExpr 0x55756571f448 <col:22, col:29> 'const String' <NoOp>
|               |   `-CXXBindTemporaryExpr 0x55756571f378 <col:22, col:29> 'String' (CXXTemporary 0x55756571f378)
|               |     `-CXXTemporaryObjectExpr 0x55756571f340 <col:22, col:29> 'String' 'void ()'
|               `-ImplicitCastExpr 0x55756571f478 <col:32> 'ErrorHandler *' <LValueToRValue>
|                 `-DeclRefExpr 0x55756571f398 <col:32> 'ErrorHandler *' lvalue ParmVar 0x557565719b38 'errh' 'ErrorHandler *'
|-CXXMethodDecl 0x557565719ea0 <line:198:5, col:73> col:9 used call_write 'int (const String &, Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x557565719cc8 <col:20, col:34> col:34 value 'const String &'
| |-ParmVarDecl 0x557565719d40 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x557565719db8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55756571a028 <line:207:5, col:37> col:12 unparse_name 'String (Element *) const'
| `-ParmVarDecl 0x557565719f68 <col:25, col:34> col:34 e 'Element *'
|-CXXMethodDecl 0x55756571a258 <line:216:5, col:63> col:19 unparse_name 'String (Element *, const String &)' static
| |-ParmVarDecl 0x55756571a0e0 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x55756571a158 <col:44, col:58> col:58 hname 'const String &'
|-CXXMethodDecl 0x55756571a358 <line:223:5, line:225:5> line:223:34 used blank_handler 'const Handler *()' static inline
| `-CompoundStmt 0x55756571f588 <col:50, line:225:5>
|   `-ReturnStmt 0x55756571f578 <line:224:2, col:9>
|     `-ImplicitCastExpr 0x55756571f560 <col:9> 'const Handler *' <LValueToRValue>
|       `-DeclRefExpr 0x55756571f540 <col:9> 'const Handler *' lvalue Var 0x55756571c700 'the_blank_handler' 'const Handler *'
|-EnumDecl 0x55756571a3f8 <line:229:5, line:251:5> line:229:5
| |-EnumConstantDecl 0x55756571a500 <line:230:2, col:11> col:2 h_read 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b0a0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a4e0 <col:11> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x55756571a4c0 <col:11> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a590 <line:231:2, col:12> col:2 h_write 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b0b8 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a570 <col:12> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x55756571a550 <col:12> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a620 <line:232:2, col:17> col:2 h_read_param 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b0d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a600 <col:17> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x55756571a5e0 <col:17> 'Handler::Flags' EnumConstant 0x557565717c70 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a6b0 <line:233:2, col:16> col:2 h_exclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b0e8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a690 <col:16> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x55756571a670 <col:16> 'Handler::Flags' EnumConstant 0x557565717d00 'f_exclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a740 <line:234:2, col:19> col:2 h_nonexclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b100 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a720 <col:19> 'Handler::Flags' Int: 32
| |     `-DeclRefExpr 0x55756571a700 <col:19> 'Handler::Flags' EnumConstant 0x557565717d90 'f_nonexclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a7d0 <line:235:2, col:10> col:2 h_raw 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b118 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a7b0 <col:10> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x55756571a790 <col:10> 'Handler::Flags' EnumConstant 0x557565717e20 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a860 <line:236:2, col:19> col:2 h_read_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b130 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a840 <col:19> 'Handler::Flags' Int: 128
| |     `-DeclRefExpr 0x55756571a820 <col:19> 'Handler::Flags' EnumConstant 0x557565717eb0 'f_read_private' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a8f0 <line:237:2, col:20> col:2 h_write_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b148 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a8d0 <col:20> 'Handler::Flags' Int: 256
| |     `-DeclRefExpr 0x55756571a8b0 <col:20> 'Handler::Flags' EnumConstant 0x557565717f40 'f_write_private' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571a980 <line:238:2, col:17> col:2 h_deprecated 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b160 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a960 <col:17> 'Handler::Flags' Int: 512
| |     `-DeclRefExpr 0x55756571a940 <col:17> 'Handler::Flags' EnumConstant 0x557565717fd0 'f_deprecated' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571aa10 <line:239:2, col:15> col:2 h_uncommon 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b178 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571a9f0 <col:15> 'Handler::Flags' Int: 1024
| |     `-DeclRefExpr 0x55756571a9d0 <col:15> 'Handler::Flags' EnumConstant 0x557565718060 'f_uncommon' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571aaa0 <line:240:2, col:11> col:2 h_calm 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b190 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571aa80 <col:11> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x55756571aa60 <col:11> 'Handler::Flags' EnumConstant 0x5575657180f0 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571ab30 <line:241:2, col:16> col:2 h_expensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b1a8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571ab10 <col:16> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x55756571aaf0 <col:16> 'Handler::Flags' EnumConstant 0x557565718180 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571abc0 <line:242:2, col:13> col:2 h_button 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b1c0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571aba0 <col:13> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x55756571ab80 <col:13> 'Handler::Flags' EnumConstant 0x557565718210 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571ac50 <line:243:2, col:15> col:2 h_checkbox 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b1d8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571ac30 <col:15> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x55756571ac10 <col:15> 'Handler::Flags' EnumConstant 0x5575657182a0 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571ace0 <line:244:2, col:20> col:2 h_driver_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b1f0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571acc0 <col:20> 'Handler::Flags' Int: 67108864
| |     `-DeclRefExpr 0x55756571aca0 <col:20> 'Handler::Flags' EnumConstant 0x557565718370 'f_driver0' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571ad70 <line:245:9, col:27> col:9 h_driver_flag_1 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b208 <col:27> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571ad50 <col:27> 'Handler::Flags' Int: 134217728
| |     `-DeclRefExpr 0x55756571ad30 <col:27> 'Handler::Flags' EnumConstant 0x557565718440 'f_driver1' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571ae00 <line:246:2, col:22> col:2 h_user_flag_shift 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b220 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571ade0 <col:22> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x55756571adc0 <col:22> 'Handler::Flags' EnumConstant 0x5575657184d0 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571ae90 <line:247:2, col:18> col:2 h_user_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b238 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571ae70 <col:18> 'Handler::Flags' Int: 268435456
| |     `-DeclRefExpr 0x55756571ae50 <col:18> 'Handler::Flags' EnumConstant 0x5575657185a0 'f_user0' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571af20 <line:248:2, col:25> col:2 h_read_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b250 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571af00 <col:25> 'Handler::Flags' Int: 8
| |     `-DeclRefExpr 0x55756571aee0 <col:25> 'Handler::Flags' EnumConstant 0x557565718630 'f_read_comprehensive' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571afb0 <line:249:2, col:26> col:2 h_write_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x55756571b268 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571af90 <col:26> 'Handler::Flags' Int: 16
| |     `-DeclRefExpr 0x55756571af70 <col:26> 'Handler::Flags' EnumConstant 0x5575657186c0 'f_write_comprehensive' 'Handler::Flags'
| `-EnumConstantDecl 0x55756571b050 <line:250:2, col:20> col:2 h_special_flags 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
|   `-ImplicitCastExpr 0x55756571b280 <col:20> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55756571b030 <col:20> 'Handler::Flags' Int: 31
|       `-DeclRefExpr 0x55756571b000 <col:20> 'Handler::Flags' EnumConstant 0x557565718850 'f_special' 'Handler::Flags'
|-EnumDecl 0x55756571b298 <line:252:5, line:267:5> line:252:10 DeprecatedFlags
| |-EnumConstantDecl 0x55756571b3a0 <line:253:2, col:12> col:2 OP_READ 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b900 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b380 <col:12> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x55756571b360 <col:12> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b430 <line:254:2, col:13> col:2 OP_WRITE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b918 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b410 <col:13> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x55756571b3f0 <col:13> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b4c0 <line:255:2, col:15> col:2 READ_PARAM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b930 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b4a0 <col:15> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x55756571b480 <col:15> 'Handler::Flags' EnumConstant 0x557565717c70 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b550 <line:256:2, col:8> col:2 RAW 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b948 <col:8> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b530 <col:8> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x55756571b510 <col:8> 'Handler::Flags' EnumConstant 0x557565717e20 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b5e0 <line:261:2, col:9> col:2 CALM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b960 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b5c0 <col:9> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x55756571b5a0 <col:9> 'Handler::Flags' EnumConstant 0x5575657180f0 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b670 <line:262:2, col:14> col:2 EXPENSIVE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b978 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b650 <col:14> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x55756571b630 <col:14> 'Handler::Flags' EnumConstant 0x557565718180 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b700 <line:263:2, col:11> col:2 BUTTON 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b990 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b6e0 <col:11> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x55756571b6c0 <col:11> 'Handler::Flags' EnumConstant 0x557565718210 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b790 <line:264:2, col:13> col:2 CHECKBOX 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b9a8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b770 <col:13> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x55756571b750 <col:13> 'Handler::Flags' EnumConstant 0x5575657182a0 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x55756571b820 <line:265:2, col:20> col:2 USER_FLAG_SHIFT 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x55756571b9c0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571b800 <col:20> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x55756571b7e0 <col:20> 'Handler::Flags' EnumConstant 0x5575657184d0 'f_user_shift' 'Handler::Flags'
| `-EnumConstantDecl 0x55756571b8b0 <line:266:2, col:16> col:2 USER_FLAG_0 'Handler::DeprecatedFlags'
|   `-ImplicitCastExpr 0x55756571b9d8 <col:16> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55756571b890 <col:16> 'Handler::Flags' Int: 268435456
|       `-DeclRefExpr 0x55756571b870 <col:16> 'Handler::Flags' EnumConstant 0x5575657185a0 'f_user0' 'Handler::Flags'
|-EnumDecl 0x55756571b9f0 <line:268:5, line:271:5> line:268:5
| |-DeprecatedAttr 0x55756571bab0 <col:25> "" ""
| |-EnumConstantDecl 0x55756571bb60 <line:269:2, col:14> col:2 EXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
| | `-ImplicitCastExpr 0x55756571bc40 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756571bb40 <col:14> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x55756571bb20 <col:14> 'Handler::Flags' EnumConstant 0x557565717d00 'f_exclusive' 'Handler::Flags'
| `-EnumConstantDecl 0x55756571bbf0 <line:270:2, col:17> col:2 NONEXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
|   `-ImplicitCastExpr 0x55756571bc58 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55756571bbd0 <col:17> 'Handler::Flags' Int: 32
|       `-DeclRefExpr 0x55756571bbb0 <col:17> 'Handler::Flags' EnumConstant 0x557565717d90 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x55756571bdd8 <line:281:5, line:284:5> line:281:19 __call_read 'String (Element *, void *) const' inline
| |-ParmVarDecl 0x55756571bc80 <col:31, col:40> col:40 used e 'Element *'
| |-ParmVarDecl 0x55756571bd00 <col:43, col:49> col:49 used new_user_data 'void *'
| `-CompoundStmt 0x55756571fc48 <col:70, line:284:5>
|   |-ParenExpr 0x55756571fa68 <line:282:2, col:233> 'void'
|   | `-ConditionalOperator 0x55756571fa38 <col:3, col:232> 'void'
|   |   |-CXXStaticCastExpr 0x55756571f768 <col:3, col:75> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55756571f738 <col:23, col:69> 'bool' '=='
|   |   |   |-ParenExpr 0x55756571f6e0 <col:23, col:64> 'unsigned int'
|   |   |   | `-BinaryOperator 0x55756571f6c0 <col:24, col:63> 'unsigned int' '&'
|   |   |   |   |-ImplicitCastExpr 0x55756571f690 <col:24> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x55756571f5b0 <col:24> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x55756571c5d0
|   |   |   |   |   `-CXXThisExpr 0x55756571f5a0 <col:24> 'const Handler *' implicit this
|   |   |   |   `-ImplicitCastExpr 0x55756571f6a8 <col:33, col:63> 'unsigned int' <IntegralCast>
|   |   |   |     `-ParenExpr 0x55756571f670 <col:33, col:63> 'int'
|   |   |   |       `-BinaryOperator 0x55756571f650 <col:34, col:43> 'int' '|'
|   |   |   |         |-ImplicitCastExpr 0x55756571f620 <col:34> 'int' <IntegralCast>
|   |   |   |         | `-DeclRefExpr 0x55756571f5e0 <col:34> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
|   |   |   |         `-ImplicitCastExpr 0x55756571f638 <col:43> 'int' <IntegralCast>
|   |   |   |           `-DeclRefExpr 0x55756571f600 <col:43> 'Handler::Flags' EnumConstant 0x557565718630 'f_read_comprehensive' 'Handler::Flags'
|   |   |   `-ImplicitCastExpr 0x55756571f720 <col:69> 'unsigned int' <IntegralCast>
|   |   |     `-DeclRefExpr 0x55756571f700 <col:69> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
|   |   |-CXXFunctionalCastExpr 0x55756571f7c8 <col:79, col:86> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55756571f7a8 <col:85> 'int' 0
|   |   `-CallExpr 0x55756571f998 <col:90, col:232> 'void'
|   |     |-ImplicitCastExpr 0x55756571f980 <col:90> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55756571f960 <col:90> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55756571f9d8 <col:105> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55756571f838 <col:105> 'const char [53]' lvalue "(_flags & (f_read | f_read_comprehensive)) == f_read"
|   |     |-ImplicitCastExpr 0x55756571f9f0 <col:161> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55756571f888 <col:161> 'const char [30]' lvalue "../dummy_inc/click/handler.hh"
|   |     |-ImplicitCastExpr 0x55756571fa08 <col:194> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55756571f8c0 <col:194> 'int' 282
|   |     `-ImplicitCastExpr 0x55756571fa20 <col:199, col:213> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55756571f948 <col:199, col:213> 'const char [53]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55756571f930 <col:213> 'const char [53]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55756571f8e0 <col:213> 'const char [53]' lvalue "String Handler::__call_read(Element *, void *) const"
|   `-ReturnStmt 0x55756571fc38 <line:283:2, col:38>
|     `-ExprWithCleanups 0x55756571fc20 <col:9, col:38> 'String'
|       `-CXXConstructExpr 0x55756571fbf0 <col:9, col:38> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55756571fbd8 <col:9, col:38> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55756571fbb8 <col:9, col:38> 'String' (CXXTemporary 0x55756571fbb8)
|             `-CallExpr 0x55756571fb50 <col:9, col:38> 'String'
|               |-ImplicitCastExpr 0x55756571fb38 <col:9, col:20> 'ReadHandlerCallback':'String (*)(Element *, void *)' <LValueToRValue>
|               | `-MemberExpr 0x55756571fac8 <col:9, col:20> 'const ReadHandlerCallback':'String (*const)(Element *, void *)' lvalue .r 0x55756571c0e0
|               |   `-MemberExpr 0x55756571fa98 <col:9> 'const union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)' lvalue ->_read_hook 0x55756571c1a8
|               |     `-CXXThisExpr 0x55756571fa88 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x55756571fb80 <col:22> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x55756571faf8 <col:22> 'Element *' lvalue ParmVar 0x55756571bc80 'e' 'Element *'
|               `-ImplicitCastExpr 0x55756571fb98 <col:25> 'void *' <LValueToRValue>
|                 `-DeclRefExpr 0x55756571fb18 <col:25> 'void *' lvalue ParmVar 0x55756571bd00 'new_user_data' 'void *'
|-AccessSpecDecl 0x55756571be88 <line:287:3, col:10> col:3 private
|-FieldDecl 0x55756571bec0 <line:289:5, col:12> col:12 referenced _name 'String'
|-CXXRecordDecl 0x55756571bf10 <line:290:5, line:293:5> line:290:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55756571c060 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x55756571c0e0 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-CXXConstructorDecl 0x55756571ced8 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x55756571ced8
| | `-ParmVarDecl 0x55756571cfe8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXConstructorDecl 0x55756571d088 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x55756571d088
| | `-ParmVarDecl 0x55756571d198 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| |-CXXDestructorDecl 0x55756571d208 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55756571d208
| |-CXXMethodDecl 0x55756571dad8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x55756571dad8
| | `-ParmVarDecl 0x55756571dbe8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXMethodDecl 0x55756571dc58 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x55756571dc58
| | `-ParmVarDecl 0x55756571dd68 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| `-CXXConstructorDecl 0x5575658fb958 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5575658fba30 <col:5>
|-FieldDecl 0x55756571c1a8 <col:5, line:293:7> col:7 referenced _read_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)'
|-CXXRecordDecl 0x55756571c210 <line:294:5, line:297:5> line:294:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55756571c338 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x55756571c3c0 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-CXXConstructorDecl 0x55756571d338 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x55756571d338
| | `-ParmVarDecl 0x55756571d448 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXConstructorDecl 0x55756571d4e8 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x55756571d4e8
| | `-ParmVarDecl 0x55756571d5f8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| |-CXXDestructorDecl 0x55756571d668 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x55756571d668
| |-CXXMethodDecl 0x55756571de08 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x55756571de08
| | `-ParmVarDecl 0x55756571df18 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXMethodDecl 0x55756571df88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x55756571df88
| | `-ParmVarDecl 0x55756571e098 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| `-CXXConstructorDecl 0x5575658fba90 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5575658fbb70 <col:5>
|-FieldDecl 0x55756571c488 <col:5, line:297:7> col:7 referenced _write_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:294:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5)'
|-FieldDecl 0x55756571c508 <line:298:5, col:11> col:11 referenced _read_user_data 'void *'
|-FieldDecl 0x55756571c570 <line:299:5, col:11> col:11 referenced _write_user_data 'void *'
|-FieldDecl 0x55756571c5d0 <line:300:5, col:14> col:14 referenced _flags 'uint32_t':'unsigned int'
|-FieldDecl 0x55756571c638 <line:301:5, col:9> col:9 _use_count 'int'
|-FieldDecl 0x55756571c6a0 <line:302:5, col:9> col:9 _next_by_name 'int'
|-VarDecl 0x55756571c700 <line:304:5, col:27> col:27 used the_blank_handler 'const Handler *' static
|-CXXConstructorDecl 0x55756571c820 <line:306:5, col:38> col:5 Handler 'void (const String &)'
| `-ParmVarDecl 0x55756571c778 <col:13, col:37> col:28 'const String &' cinit
|   `-ExprWithCleanups 0x55756571e450 <col:30, col:37> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55756571e438 <col:30, col:37> 'const String' lvalue
|       `-ImplicitCastExpr 0x55756571e420 <col:30, col:37> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55756571e400 <col:30, col:37> 'String' (CXXTemporary 0x55756571e400)
|           `-CXXTemporaryObjectExpr 0x55756571e3c8 <col:30, col:37> 'String' 'void ()'
|-CXXMethodDecl 0x55756571c9c8 <line:308:5, col:41> col:17 combine 'void (const Handler &)' inline
| `-ParmVarDecl 0x55756571c908 <col:25, col:40> col:40 x 'const Handler &'
|-CXXMethodDecl 0x55756571cb48 <line:309:5, col:46> col:17 compatible 'bool (const Handler &) const' inline
| `-ParmVarDecl 0x55756571ca80 <col:28, col:43> col:43 x 'const Handler &'
|-FriendDecl 0x55756571cd08 <line:311:5, col:18> col:12 'class Router':'Router'
|-CXXConstructorDecl 0x55756571cd48 <line:19:7> col:7 implicit Handler 'void (const Handler &)' inline default noexcept-unevaluated 0x55756571cd48
| `-ParmVarDecl 0x55756571ce28 <col:7> col:7 'const Handler &'
|-CXXConstructorDecl 0x55756571d778 <col:7> col:7 implicit Handler 'void (Handler &&)' inline default noexcept-unevaluated 0x55756571d778
| `-ParmVarDecl 0x55756571d888 <col:7> col:7 'Handler &&'
|-CXXMethodDecl 0x55756571d928 <col:7> col:7 implicit operator= 'Handler &(const Handler &)' inline default noexcept-unevaluated 0x55756571d928
| `-ParmVarDecl 0x55756571da38 <col:7> col:7 'const Handler &'
|-CXXMethodDecl 0x55756571e108 <col:7> col:7 implicit operator= 'Handler &(Handler &&)' inline default noexcept-unevaluated 0x55756571e108
| `-ParmVarDecl 0x55756571e218 <col:7> col:7 'Handler &&'
`-CXXDestructorDecl 0x55756571e2a0 <col:7> col:7 implicit ~Handler 'void ()' inline default noexcept-unevaluated 0x55756571e2a0

Layout: <CGRecordLayout
  LLVMType:%class.Handler = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Handler.base = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658e0f18 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'void *'
|-CXXRecordDecl 0x5575658e1128 prev 0x5575658e0f18 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575658e2140 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<void *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5575658e20f0 'typename array_memory<void *>::type' sugar
|   `-TypedefType 0x5575658e20d0 'conditional<true, sized_array_memory<8>, typed_array_memory<void *> >::type' sugar
|     |-Typedef 0x5575658e1f80 'type'
|     `-SubstTemplateTypeParmType 0x55756576e420 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x55756576df70 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55756576de88 'sized_array_memory'
|-FieldDecl 0x5575658e2240 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<void *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5575658e2290 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575658e22c8 <line:118:5, col:15> col:15 value_type 'void *':'void *'
| `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-PointerType 0x5575651baad0 'void *'
|     `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e2358 <line:119:5, col:16> col:16 reference 'void *&'
| `-LValueReferenceType 0x5575658e2320 'void *&'
|   `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x5575651baad0 'void *'
|       `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e2418 <line:120:5, col:22> col:22 const_reference 'void *const &'
| `-LValueReferenceType 0x5575658e23e0 'void *const &'
|   `-QualType 0x5575658e11c1 'void *const' const
|     `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x5575651baad0 'void *'
|         `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e24a8 <line:121:5, col:16> col:16 pointer 'void **'
| `-PointerType 0x5575658e2470 'void **'
|   `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x5575651baad0 'void *'
|       `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e2538 <line:122:5, col:22> col:22 const_pointer 'void *const *'
| `-PointerType 0x5575658e2500 'void *const *'
|   `-QualType 0x5575658e11c1 'void *const' const
|     `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x5575651baad0 'void *'
|         `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e3120 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<void *>::type':'void *'
| `-ElaboratedType 0x5575658e30d0 'typename fast_argument<void *>::type' sugar
|   `-TypedefType 0x5575658e30b0 'fast_argument<void *, false>::type' sugar
|     |-Typedef 0x5575658e3040 'type'
|     `-SubstTemplateTypeParmType 0x5575658e2e00 'void *' sugar
|       |-TemplateTypeParmType 0x55756548fa90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55756548fa40 'T'
|       `-PointerType 0x5575651baad0 'void *'
|         `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e3188 <line:126:5, col:22> col:22 const_access_type 'void *const &'
| `-LValueReferenceType 0x5575658e23e0 'void *const &'
|   `-QualType 0x5575658e11c1 'void *const' const
|     `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x5575651baad0 'void *'
|         `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e31e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575658e3248 <line:130:5, col:16> col:16 iterator 'void **'
| `-PointerType 0x5575658e2470 'void **'
|   `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x5575651baad0 'void *'
|       `-BuiltinType 0x5575651ba2d0 'void'
|-TypedefDecl 0x5575658e32b0 <line:131:5, col:22> col:22 const_iterator 'void *const *'
| `-PointerType 0x5575658e2500 'void *const *'
|   `-QualType 0x5575658e11c1 'void *const' const
|     `-SubstTemplateTypeParmType 0x5575658e11c0 'void *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x5575651baad0 'void *'
|         `-BuiltinType 0x5575651ba2d0 'void'
|-EnumDecl 0x5575658e3308 <line:134:5> col:5
| `-EnumConstantDecl 0x5575658e3400 <col:12, col:40> col:12 RESERVE_GROW 'Vector<void *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575658e33e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575658e3488 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575658e36d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658e3540 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658e35e0 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXConstructorDecl 0x5575658e3998 <line:139:5, col:37> col:12 Vector 'void (const Vector<void *> &)' inline
| `-ParmVarDecl 0x5575658e3880 <col:19, col:36> col:36 x 'const Vector<void *> &'
|-CXXConstructorDecl 0x5575658e3c58 <line:141:5, col:32> col:12 Vector 'void (Vector<void *> &&)' inline
| `-ParmVarDecl 0x5575658e3b40 <col:19, col:31> col:31 x 'Vector<void *> &&'
|-CXXMethodDecl 0x5575658e3fa0 <line:144:5, col:51> col:23 operator= 'Vector<void *> &(const Vector<void *> &)' inline
| `-ParmVarDecl 0x5575658e3e80 <col:33, col:50> col:50 x 'const Vector<void *> &'
|-CXXMethodDecl 0x5575658e6a00 <line:146:5, col:46> col:23 operator= 'Vector<void *> &(Vector<void *> &&)' inline
| `-ParmVarDecl 0x5575658e68e0 <col:33, col:45> col:45 x 'Vector<void *> &&'
|-CXXMethodDecl 0x5575658e6cf0 <line:148:5, col:70> col:23 assign 'Vector<void *> &(Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658e6b38 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658e6bb0 <col:43, col:69> col:63 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5575658e6e48 <line:150:5, col:55> col:49 begin 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x5575658e6f28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658e6f80 <col:30> Inherited
|-CXXMethodDecl 0x5575658e6fc8 <line:151:5, col:53> col:49 end 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x5575658e7078 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658e70d0 <col:30> Inherited
|-CXXMethodDecl 0x5575658e7198 <line:152:5, col:63> col:55 begin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5575658e7248 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658e72a0 <col:30> Inherited
|-CXXMethodDecl 0x5575658e72e8 <line:153:5, col:61> col:55 end 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5575658e7398 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658e73f0 <col:30> Inherited
|-CXXMethodDecl 0x5575658e7438 <line:154:5, col:64> col:55 cbegin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5575658e74e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658e7540 <col:30> Inherited
|-CXXMethodDecl 0x5575658e7588 <line:155:5, col:62> col:55 cend 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5575658e7638 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575658e7690 <col:30> Inherited
|-CXXMethodDecl 0x5575658e76b8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658e7768 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575658e7818 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575658e79d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658e78c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575658e7940 <col:37, col:63> col:57 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5575658e7b28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575658e7a98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658e7cd8 <line:163:5, col:65> col:43 operator[] 'void *&(Vector::size_type)'
| |-ParmVarDecl 0x5575658e7be0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658e7d90 <col:20>
| `-OptimizeNoneAttr 0x5575658e7de8 <col:30>
|-CXXMethodDecl 0x5575658e7f08 <line:164:5, col:73> col:49 operator[] 'void *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5575658e7e10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575658e7fc0 <col:20>
| `-OptimizeNoneAttr 0x5575658e8018 <col:30>
|-CXXMethodDecl 0x5575658e80d0 <line:165:5, col:29> col:15 at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658e8040 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658e8218 <line:166:5, col:37> col:21 at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658e8188 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658e8348 <line:167:5, col:21> col:15 front 'void *&()' inline
|-CXXMethodDecl 0x5575658e8478 <line:168:5, col:29> col:21 front 'void *const &() const' inline
|-CXXMethodDecl 0x5575658e8548 <line:169:5, col:20> col:15 back 'void *&()' inline
|-CXXMethodDecl 0x5575658e8618 <line:170:5, col:28> col:21 back 'void *const &() const' inline
|-CXXMethodDecl 0x5575658e8758 <line:172:5, col:39> col:15 unchecked_at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5575658e86c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658e88a0 <line:173:5, col:47> col:21 unchecked_at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575658e8810 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575658e89e8 <line:174:5, col:59> col:15 at_u 'void *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5575658e8958 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658e8aa0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575658e8ba0 <line:175:5, col:71> col:21 at_u 'void *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575658e8b10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575658e8c58 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575658e8d18 <line:177:5, col:20> col:15 data 'void **()' inline
|-CXXMethodDecl 0x5575658e8e18 <line:178:5, col:28> col:21 data 'void *const *() const' inline
|-CXXMethodDecl 0x5575658e8f98 <line:180:5, col:48> col:17 push_back 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658e8ed8 <col:27, col:47> col:47 v 'Vector<void *>::value_argument_type':'void *'
|-FunctionTemplateDecl 0x5575658e9758 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575658e9050 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<void *>':'fast_argument<void *, false>'
| `-CXXMethodDecl 0x5575658e96b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (void *&&)' inline
|   `-ParmVarDecl 0x5575658e95b8 <col:58, col:62> col:62 v 'void *&&'
|-CXXMethodDecl 0x5575658e9838 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575658e9988 <line:186:5, col:49> col:17 push_front 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x5575658e98f8 <col:28, col:48> col:48 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5575658e9a40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575658e9c88 <line:189:5, col:62> col:21 insert 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x5575658e9b00 <col:28, col:37> col:37 it 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x5575658e9b78 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5575658e9e48 <line:190:5, col:38> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator)' inline
| `-ParmVarDecl 0x5575658e9d58 <col:27, col:36> col:36 it 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5575658ea098 <line:191:5, col:49> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::iterator)' inline
| |-ParmVarDecl 0x5575658e9f10 <col:27, col:36> col:36 a 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x5575658e9f88 <col:39, col:48> col:48 b 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5575658ea158 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575658ea3b8 <line:195:5, col:34> col:17 swap 'void (Vector<void *> &)' inline
| `-ParmVarDecl 0x5575658ea2c0 <col:22, col:33> col:33 x 'Vector<void *> &'
`-CXXDestructorDecl 0x5575658ea488 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575658ea488

Layout: <CGRecordLayout
  LLVMType:%class.Vector.12 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.12 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Router::notifier_signals_t
         0 |   class String name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   int nsig
        28 |   class atomic_uint32_t [128] sig
       544 |   struct Router::notifier_signals_t * next
           | [sizeof=552, dsize=552, align=8,
           |  nvsize=552, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575658ea680 <../dummy_inc/click/router.hh:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5575658ea798 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
|-EnumDecl 0x5575658ea828 <line:281:9, col:32> col:9
| `-EnumConstantDecl 0x5575658ea930 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
|   `-ImplicitCastExpr 0x5575658ea980 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575658ea910 <col:27> 'int' Int: 4096
|       `-IntegerLiteral 0x5575658ea8f0 <col:27> 'int' 4096
|-FieldDecl 0x5575658ea9a8 <line:282:9, col:16> col:16 name 'String'
|-FieldDecl 0x5575658eaa10 <line:283:9, col:13> col:13 nsig 'int'
|-FieldDecl 0x5575658eac08 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
|-FieldDecl 0x5575658eac98 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
|-CXXConstructorDecl 0x5575658eae58 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| |-ParmVarDecl 0x5575658eacf8 <col:28, col:42> col:42 used n 'const String &'
| |-ParmVarDecl 0x5575658ead70 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| |-CXXCtorInitializer Field 0x5575658ea9a8 'name' 'String'
| | `-CXXConstructExpr 0x5575658f5998 <line:287:15, col:21> 'String' 'void (const String &)'
| |   `-DeclRefExpr 0x5575658f5958 <col:20> 'const String' lvalue ParmVar 0x5575658eacf8 'n' 'const String &'
| |-CXXCtorInitializer Field 0x5575658eaa10 'nsig' 'int'
| | `-IntegerLiteral 0x5575658f59f0 <col:29> 'int' 0
| |-CXXCtorInitializer Field 0x5575658eac08 'sig' 'atomic_uint32_t [128]'
| | `-CXXConstructExpr 0x5575658f5ad8 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5575658eac98 'next' 'Router::notifier_signals_t *'
| | `-ImplicitCastExpr 0x5575658f5a98 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| |   `-DeclRefExpr 0x5575658f5a58 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x5575658ead70 'nx' 'Router::notifier_signals_t *'
| `-CompoundStmt 0x5575658f5d68 <col:42, line:289:9>
|   `-CallExpr 0x5575658f5d18 <line:288:13, col:43> 'void *'
|     |-ImplicitCastExpr 0x5575658f5d00 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575658f5ce0 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x55756541f348 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x5575658f5d50 <col:20, col:26> 'void *' <BitCast>
|     | `-UnaryOperator 0x5575658f5c28 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
|     |   `-ArraySubscriptExpr 0x5575658f5c08 <col:21, col:26> 'atomic_uint32_t' lvalue
|     |     |-ImplicitCastExpr 0x5575658f5bf0 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5575658f5ba0 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x5575658eac08
|     |     |   `-CXXThisExpr 0x5575658f5b90 <col:21> 'Router::notifier_signals_t *' implicit this
|     |     `-IntegerLiteral 0x5575658f5bd0 <col:25> 'int' 0
|     |-IntegerLiteral 0x5575658f5c40 <col:29> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5575658f5cc0 <col:32, col:42> 'unsigned long' sizeof
|       `-ParenExpr 0x5575658f5ca0 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
|         `-MemberExpr 0x5575658f5c70 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x5575658eac08 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5575658f5c60 <col:39> 'Router::notifier_signals_t *' implicit this
|-CXXConstructorDecl 0x5575658eaf38 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5575658eaf38
| `-ParmVarDecl 0x5575658eb048 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXConstructorDecl 0x5575658eb0e8 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5575658eb0e8
| `-ParmVarDecl 0x5575658eb1f8 <col:12> col:12 'Router::notifier_signals_t &&'
|-CXXMethodDecl 0x5575658eb298 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5575658eb298
| `-ParmVarDecl 0x5575658eb3a8 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXMethodDecl 0x5575658eb418 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5575658eb418
| `-ParmVarDecl 0x5575658eb528 <col:12> col:12 'Router::notifier_signals_t &&'
`-CXXDestructorDecl 0x5575658eb5b0 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x5575658eb5b0

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  NonVirtualBaseLLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ThreadSched
         0 |   (ThreadSched vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575658bafd8 <../dummy_inc/click/standard/threadsched.hh:6:1, line:15:1> line:6:7 class ThreadSched definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575658bb0f8 <col:1, col:7> col:7 implicit referenced class ThreadSched
|-AccessSpecDecl 0x5575658bb188 <col:21, col:27> col:21 public
|-EnumDecl 0x5575658bb1b0 <line:8:5, col:58> col:5
| |-EnumConstantDecl 0x5575658bb2e0 <col:12, col:32> col:12 THREAD_QUIESCENT 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
| | `-ConstantExpr 0x5575658bb2c0 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5575658bb290 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5575658bb270 <col:32> 'int' 1
| `-EnumConstantDecl 0x5575658bb388 <col:35, col:53> col:35 THREAD_UNKNOWN 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
|   `-ConstantExpr 0x5575658bb368 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5575658bb350 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5575658bb330 <col:53> 'int' 1000
|-CXXConstructorDecl 0x5575658bb440 <line:10:5, col:21> col:5 ThreadSched 'void ()'
| `-CompoundStmt 0x5575658bb978 <col:19, col:21>
|-CXXDestructorDecl 0x5575658bb530 <line:11:5, col:30> col:13 ~ThreadSched 'void () noexcept' virtual
| `-CompoundStmt 0x5575658bb988 <col:28, col:30>
|-CXXMethodDecl 0x5575658bb6f0 <line:13:5, col:56> col:17 initial_home_thread_id 'int (const Element *)' virtual
| `-ParmVarDecl 0x5575658bb620 <col:40, col:55> col:55 e 'const Element *'
`-CXXMethodDecl 0x5575658bb7f8 <line:6:7> col:7 implicit operator= 'ThreadSched &(const ThreadSched &)' inline default noexcept-unevaluated 0x5575658bb7f8
  `-ParmVarDecl 0x5575658bb908 <col:7> col:7 'const ThreadSched &'

Layout: <CGRecordLayout
  LLVMType:%class.ThreadSched = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.ThreadSched = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575658bbf30 prev 0x5575657fa788 <../dummy_inc/click/router.hh:23:1, line:352:1> line:23:7 referenced class Router definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5575658bc028 <col:1, col:7> col:7 implicit referenced class Router
|-AccessSpecDecl 0x5575658bc0b8 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x5575658bc128 <line:28:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5575658bc1e8 <line:31:5, col:31> col:17 used initialized 'bool () const' inline
|-CXXMethodDecl 0x5575658bc2a8 <line:32:5, col:34> col:17 handlers_ready 'bool () const' inline
|-CXXMethodDecl 0x5575658bc368 <line:33:5, col:27> col:17 running 'bool () const' inline
|-CXXMethodDecl 0x5575658bc428 <line:34:5, col:25> col:17 dying 'bool () const' inline
|-EnumDecl 0x5575658bc4c8 <line:37:5, col:44> col:5
| `-EnumConstantDecl 0x5575658bc628 <col:12, col:42> col:12 STOP_RUNCOUNT 'Router::(anonymous enum at ../dummy_inc/click/router.hh:37:5)'
|   `-ConstantExpr 0x5575658bc608 <col:28, col:42> 'int' Int: -2147483648
|     `-BinaryOperator 0x5575658bc5e8 <col:28, col:42> 'int' '-'
|       |-UnaryOperator 0x5575658bc5b0 <col:28, col:29> 'int' prefix '-'
|       | `-IntegerLiteral 0x5575658bc590 <col:29> 'int' 2147483647
|       `-IntegerLiteral 0x5575658bc5c8 <col:42> 'int' 1
|-CXXMethodDecl 0x5575658bc6c8 <line:38:5, col:31> col:20 runcount 'int32_t () const' inline
|-CXXMethodDecl 0x5575658bc838 <line:39:5, col:39> col:10 used adjust_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5575658bc778 <col:26, col:34> col:34 delta 'int32_t':'int'
|-CXXMethodDecl 0x5575658bc980 <line:40:5, col:33> col:10 set_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5575658bc8f0 <col:23, col:31> col:31 rc 'int32_t':'int'
|-CXXMethodDecl 0x5575658bca48 <line:41:5, col:36> col:17 please_stop_driver 'void ()' inline
|-CXXMethodDecl 0x5575658bcd70 <line:44:5, col:47> col:36 elements 'const Vector<Element *> &() const' inline
|-CXXMethodDecl 0x5575658bce38 <line:45:5, col:28> col:16 nelements 'int () const' inline
|-CXXMethodDecl 0x5575658bcfb8 <line:46:5, col:36> col:21 element 'Element *(int) const' inline
| `-ParmVarDecl 0x5575658bcef0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5575658bd080 <line:47:5, col:36> col:21 root_element 'Element *() const' inline
|-CXXMethodDecl 0x5575658bd288 <line:48:5, col:56> col:21 used element 'Element *(const Router *, int)' static
| |-ParmVarDecl 0x5575658bd130 <col:29, col:43> col:43 router 'const Router *'
| `-ParmVarDecl 0x5575658bd1b0 <col:51, col:55> col:55 i 'int'
|-CXXMethodDecl 0x5575658bd3e0 <line:50:5, col:32> col:19 ename 'const String &(int) const'
| `-ParmVarDecl 0x5575658bd350 <col:25, col:29> col:29 i 'int'
|-CXXMethodDecl 0x5575658bd530 <line:51:5, col:33> col:12 ename_context 'String (int) const'
| `-ParmVarDecl 0x5575658bd4a0 <col:26, col:30> col:30 i 'int'
|-CXXMethodDecl 0x5575658bd680 <line:52:5, col:29> col:12 elandmark 'String (int) const'
| `-ParmVarDecl 0x5575658bd5f0 <col:22, col:26> col:26 i 'int'
|-CXXMethodDecl 0x5575658bd7d0 <line:53:5, col:41> col:19 econfiguration 'const String &(int) const'
| `-ParmVarDecl 0x5575658bd740 <col:34, col:38> col:38 i 'int'
|-CXXMethodDecl 0x5575658bd9a0 <line:54:5, col:54> col:10 set_econfiguration 'void (int, const String &)'
| |-ParmVarDecl 0x5575658bd890 <col:29, col:33> col:33 i 'int'
| `-ParmVarDecl 0x5575658bd908 <col:36, col:50> col:50 conf 'const String &'
|-CXXMethodDecl 0x5575658bdba8 <line:56:5, col:63> col:14 find 'Element *(const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5575658bda60 <col:19, col:33> col:33 name 'const String &'
| `-ParmVarDecl 0x5575658bdad8 <col:39, col:60> col:53 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5575658f25e0 <col:60> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5575658f25c0 <col:60> 'int' 0
|-CXXMethodDecl 0x5575658bde38 <line:57:5, col:79> col:14 used find 'Element *(const String &, String, ErrorHandler *) const'
| |-ParmVarDecl 0x5575658bdc68 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5575658bdce0 <col:39, col:46> col:46 context 'String' destroyed
| `-ParmVarDecl 0x5575658bdd58 <col:55, col:76> col:69 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5575658f2618 <col:76> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5575658f25f8 <col:76> 'int' 0
|-CXXMethodDecl 0x5575658be0d8 <line:58:5, col:87> col:14 find 'Element *(const String &, const Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5575658bdf00 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5575658bdf78 <col:39, col:54> col:54 context 'const Element *'
| `-ParmVarDecl 0x5575658bdff0 <col:63, col:84> col:77 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5575658f2650 <col:84> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5575658f2630 <col:84> 'int' 0
|-CXXMethodDecl 0x5575658be430 <line:60:5, col:76> col:9 used visit 'int (Element *, bool, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5575658be1a0 <col:15, col:24> col:24 e 'Element *'
| |-ParmVarDecl 0x5575658be218 <col:27, col:32> col:32 isoutput 'bool'
| |-ParmVarDecl 0x5575658be298 <col:42, col:46> col:46 port 'int'
| `-ParmVarDecl 0x5575658be338 <col:52, col:67> col:67 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5575658be6e0 <line:61:5, col:72> col:9 visit_downstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5575658be500 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x5575658be580 <col:38, col:42> col:42 port 'int'
| `-ParmVarDecl 0x5575658be5f8 <col:48, col:63> col:63 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5575658be948 <line:62:5, col:70> col:9 visit_upstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5575658be7a8 <col:24, col:33> col:33 e 'Element *'
| |-ParmVarDecl 0x5575658be828 <col:36, col:40> col:40 port 'int'
| `-ParmVarDecl 0x5575658be8a0 <col:46, col:61> col:61 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x5575658bee00 <line:64:5, col:126> col:9 downstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x5575658bea10 <col:29, col:38> col:38 e 'Element *'
| |-ParmVarDecl 0x5575658bea90 <col:41, col:45> col:45 port 'int'
| |-ParmVarDecl 0x5575658beb38 <col:51, col:66> col:66 filter 'ElementFilter *'
| |-ParmVarDecl 0x5575658becb0 <col:74, col:92> col:92 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x5575658beec0 <col:115> "" ""
|-CXXMethodDecl 0x5575658bf280 <line:65:5, col:124> col:9 upstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x5575658bef40 <col:27, col:36> col:36 e 'Element *'
| |-ParmVarDecl 0x5575658befc0 <col:39, col:43> col:43 port 'int'
| |-ParmVarDecl 0x5575658bf038 <col:49, col:64> col:64 filter 'ElementFilter *'
| |-ParmVarDecl 0x5575658bf180 <col:72, col:90> col:90 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x5575658bf340 <col:113> "" ""
|-CXXMethodDecl 0x5575658bf490 <line:67:5, col:55> col:24 flow_code_override 'const char *(int) const' inline
| `-ParmVarDecl 0x5575658bf3c8 <col:43, col:47> col:47 eindex 'int'
|-CXXMethodDecl 0x5575658bf660 <line:68:5, col:68> col:10 set_flow_code_override 'void (int, const String &)'
| |-ParmVarDecl 0x5575658bf550 <col:33, col:37> col:37 eindex 'int'
| `-ParmVarDecl 0x5575658bf5c8 <col:45, col:59> col:59 flow_code 'const String &'
|-CXXMethodDecl 0x5575658bf868 <line:72:5, col:72> col:27 handler 'const Handler *(const Element *, const String &)' static
| |-ParmVarDecl 0x5575658bf720 <col:35, col:50> col:50 e 'const Element *'
| `-ParmVarDecl 0x5575658bf798 <col:53, col:67> col:67 hname 'const String &'
|-CXXMethodDecl 0x5575658bfc68 <line:73:5, col:138> col:17 add_read_handler 'void (const Element *, const String &, ReadHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x5575658bf928 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x5575658bf9a0 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x5575658bfa18 <col:73, col:93> col:93 callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5575658bfa98 <col:103, col:109> col:109 user_data 'void *'
| `-ParmVarDecl 0x5575658bfb10 <col:120, col:137> col:129 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5575658f2688 <col:137> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5575658f2668 <col:137> 'int' 0
|-CXXMethodDecl 0x5575658c0078 <line:74:5, col:140> col:17 add_write_handler 'void (const Element *, const String &, WriteHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x5575658bfd40 <col:35, col:50> col:50 e 'const Element *'
| |-ParmVarDecl 0x5575658bfdb8 <col:53, col:67> col:67 hname 'const String &'
| |-ParmVarDecl 0x5575658bfe30 <col:74, col:95> col:95 callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5575658bfeb0 <col:105, col:111> col:111 user_data 'void *'
| `-ParmVarDecl 0x5575658bff28 <col:122, col:139> col:131 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5575658f26c0 <col:139> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5575658f26a0 <col:139> 'int' 0
|-CXXMethodDecl 0x5575658c0528 <line:75:5, col:161> col:17 set_handler 'void (const Element *, const String &, uint32_t, HandlerCallback, void *, void *)' static
| |-ParmVarDecl 0x5575658c0150 <col:29, col:44> col:44 e 'const Element *'
| |-ParmVarDecl 0x5575658c01c8 <col:47, col:61> col:61 hname 'const String &'
| |-ParmVarDecl 0x5575658c0240 <col:68, col:77> col:77 flags 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575658c02b8 <col:84, col:100> col:100 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5575658c0338 <col:110, col:133> col:116 read_user_data 'void *' cinit
| | `-ImplicitCastExpr 0x5575658f26f8 <col:133> 'void *' <NullToPointer>
| |   `-IntegerLiteral 0x5575658f26d8 <col:133> 'int' 0
| `-ParmVarDecl 0x5575658c03b8 <col:136, col:160> col:142 write_user_data 'void *' cinit
|   `-ImplicitCastExpr 0x5575658f2730 <col:160> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x5575658f2710 <col:160> 'int' 0
|-CXXMethodDecl 0x5575658c08c0 <line:76:5, col:117> col:16 set_handler_flags 'int (const Element *, const String &, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5575658c0608 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x5575658c0680 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x5575658c06f8 <col:73, col:82> col:82 set_flags 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5575658c0770 <col:93, col:116> col:102 clear_flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5575658f2768 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5575658f2748 <col:116> 'int' 0
|-EnumDecl 0x5575658c0980 <line:78:5, col:46> col:5
| `-EnumConstantDecl 0x5575658c0a80 <col:12, col:35> col:12 FIRST_GLOBAL_HANDLER 'Router::(anonymous enum at ../dummy_inc/click/router.hh:78:5)'
|   `-ImplicitCastExpr 0x5575658c0ad0 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575658c0a60 <col:35> 'int' Int: 1073741824
|       `-IntegerLiteral 0x5575658c0a40 <col:35> 'int' 1073741824
|-CXXMethodDecl 0x5575658c0c50 <line:79:5, col:60> col:16 hindex 'int (const Element *, const String &)' static
| |-ParmVarDecl 0x5575658c0af8 <col:23, col:38> col:38 e 'const Element *'
| `-ParmVarDecl 0x5575658c0b70 <col:41, col:55> col:55 hname 'const String &'
|-CXXMethodDecl 0x5575658c0e68 <line:80:5, col:67> col:27 handler 'const Handler *(const Router *, int)' static
| |-ParmVarDecl 0x5575658c0d10 <col:35, col:49> col:49 router 'const Router *'
| `-ParmVarDecl 0x5575658c0d90 <col:57, col:61> col:61 hindex 'int'
|-CXXMethodDecl 0x5575658c1198 <line:81:5, col:71> col:17 element_hindexes 'void (const Element *, Vector<int> &)' static
| |-ParmVarDecl 0x5575658c0f28 <col:34, col:49> col:49 e 'const Element *'
| `-ParmVarDecl 0x5575658c1080 <col:52, col:65> col:65 result 'Vector<int> &'
|-CXXMethodDecl 0x5575658c1320 <line:84:5, col:43> col:11 attachment 'void *(const String &) const'
| `-ParmVarDecl 0x5575658c1258 <col:22, col:36> col:36 aname 'const String &'
|-CXXMethodDecl 0x5575658c14a0 <line:85:5, col:48> col:12 force_attachment 'void *&(const String &)'
| `-ParmVarDecl 0x5575658c13d8 <col:29, col:43> col:43 aname 'const String &'
|-CXXMethodDecl 0x5575658c16b0 <line:86:5, col:58> col:11 set_attachment 'void *(const String &, void *)'
| |-ParmVarDecl 0x5575658c1558 <col:26, col:40> col:40 aname 'const String &'
| `-ParmVarDecl 0x5575658c15d8 <col:47, col:53> col:53 value 'void *'
|-CXXMethodDecl 0x5575658c1838 <line:88:5, col:63> col:19 chatter_channel 'ErrorHandler *(const String &) const'
| `-ParmVarDecl 0x5575658c1770 <col:35, col:49> col:49 channel_name 'const String &'
|-CXXMethodDecl 0x5575658c1958 <line:89:5, col:43> col:27 arena_factory 'HashMap_ArenaFactory *() const'
|-CXXMethodDecl 0x5575658c1a48 <line:91:5, col:40> col:25 thread_sched 'ThreadSched *() const' inline
|-CXXMethodDecl 0x5575658c1bb8 <line:92:5, col:56> col:17 set_thread_sched 'void (ThreadSched *)' inline
| `-ParmVarDecl 0x5575658c1af8 <col:34, col:47> col:47 scheduler 'ThreadSched *'
|-CXXMethodDecl 0x5575658c1d40 <line:93:5, col:49> col:16 home_thread_id 'int (const Element *) const' inline
| `-ParmVarDecl 0x5575658c1c70 <col:31, col:46> col:46 e 'const Element *'
|-CXXMethodDecl 0x5575658c1f48 <line:94:5, col:69> col:17 set_home_thread_id 'void (const Element *, int)' inline
| |-ParmVarDecl 0x5575658c1df8 <col:36, col:51> col:51 e 'const Element *'
| `-ParmVarDecl 0x5575658c1e78 <col:54, col:58> col:58 home_thread 'int'
|-CXXMethodDecl 0x5575658c2078 <line:98:5, col:34> col:22 name_info 'NameInfo *() const' inline
|-CXXMethodDecl 0x5575658c2168 <line:99:5, col:31> col:15 force_name_info 'NameInfo *()'
|-CXXMethodDecl 0x5575658c2228 <line:103:5, col:35> col:12 configuration_string 'String () const'
|-CXXMethodDecl 0x5575658c2428 <line:104:5, col:68> col:10 unparse 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5575658c22d8 <col:18, col:31> col:31 sa 'StringAccum &'
| `-ParmVarDecl 0x5575658c2350 <col:35, col:65> col:49 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5575658f2818 <col:58, col:65> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5575658f2800 <col:58, col:65> 'const String' lvalue
|       `-ImplicitCastExpr 0x5575658f27e8 <col:58, col:65> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5575658f27c8 <col:58, col:65> 'String' (CXXTemporary 0x5575658f27c8)
|           `-CXXTemporaryObjectExpr 0x5575658f2790 <col:58, col:65> 'String' 'void ()'
|-CXXMethodDecl 0x5575658c25f8 <line:105:5, col:81> col:10 unparse_requirements 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5575658c24e8 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x5575658c2560 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5575658f28c8 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5575658f28b0 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5575658f2898 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5575658f2878 <col:71, col:78> 'String' (CXXTemporary 0x5575658f2878)
|           `-CXXTemporaryObjectExpr 0x5575658f2840 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x5575658c27c8 <line:106:5, col:81> col:10 unparse_declarations 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5575658c26b8 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x5575658c2730 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5575658f2978 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5575658f2960 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5575658f2948 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5575658f2928 <col:71, col:78> 'String' (CXXTemporary 0x5575658f2928)
|           `-CXXTemporaryObjectExpr 0x5575658f28f0 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x5575658c2998 <line:107:5, col:80> col:10 unparse_connections 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x5575658c2888 <col:30, col:43> col:43 sa 'StringAccum &'
| `-ParmVarDecl 0x5575658c2900 <col:47, col:77> col:61 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5575658f2a28 <col:70, col:77> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5575658f2a10 <col:70, col:77> 'const String' lvalue
|       `-ImplicitCastExpr 0x5575658f29f8 <col:70, col:77> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5575658f29d8 <col:70, col:77> 'String' (CXXTemporary 0x5575658f29d8)
|           `-CXXTemporaryObjectExpr 0x5575658f29a0 <col:70, col:77> 'String' 'void ()'
|-CXXMethodDecl 0x5575658c2b18 <line:109:5, col:51> col:12 element_ports_string 'String (const Element *) const'
| `-ParmVarDecl 0x5575658c2a58 <col:33, col:48> col:48 e 'const Element *'
|-CXXConstructorDecl 0x5575658c2d38 <line:115:5, col:55> col:5 Router 'void (const String &, Master *)'
| |-ParmVarDecl 0x5575658c2bd0 <col:12, col:26> col:26 configuration 'const String &'
| `-ParmVarDecl 0x5575658c2c48 <col:41, col:49> col:49 master 'Master *'
|-CXXDestructorDecl 0x5575658c2e38 <line:116:5, col:13> col:5 ~Router 'void ()' noexcept-unevaluated 0x5575658c2e38
|-CXXMethodDecl 0x5575658c2f40 <line:118:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5575658c3000 <line:119:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5575658c30c0 <line:121:5, col:21> col:17 use 'void ()' inline
|-CXXMethodDecl 0x5575658c3180 <line:122:5, col:16> col:10 unuse 'void ()'
|-CXXMethodDecl 0x5575655d13c8 <line:124:5, col:65> col:10 add_requirement 'void (const String &, const String &)'
| |-ParmVarDecl 0x5575658c3230 <col:26, col:40> col:40 type 'const String &'
| `-ParmVarDecl 0x5575655d12f0 <col:46, col:60> col:60 value 'const String &'
|-CXXMethodDecl 0x5575655d1780 <line:125:5, col:112> col:9 add_element 'int (Element *, const String &, const String &, const String &, unsigned int)'
| |-ParmVarDecl 0x5575655d1488 <col:21, col:30> col:30 e 'Element *'
| |-ParmVarDecl 0x5575655d1500 <col:33, col:47> col:47 name 'const String &'
| |-ParmVarDecl 0x5575655d1578 <col:53, col:67> col:67 conf 'const String &'
| |-ParmVarDecl 0x5575655d15f0 <col:73, col:87> col:87 filename 'const String &'
| `-ParmVarDecl 0x5575655d1670 <col:97, col:106> col:106 lineno 'unsigned int'
|-CXXMethodDecl 0x5575655d1ae0 <line:126:5, col:76> col:9 add_connection 'int (int, int, int, int)'
| |-ParmVarDecl 0x5575655d1860 <col:24, col:28> col:28 from_idx 'int'
| |-ParmVarDecl 0x5575655d18e0 <col:38, col:42> col:42 from_port 'int'
| |-ParmVarDecl 0x5575655d1960 <col:53, col:57> col:57 to_idx 'int'
| `-ParmVarDecl 0x5575655d19e0 <col:65, col:69> col:69 to_port 'int'
|-CXXMethodDecl 0x5575655d1bc0 <line:131:5, col:37> col:20 hotswap_router 'Router *() const' inline
|-CXXMethodDecl 0x5575655d1d00 <line:132:5, col:43> col:10 set_hotswap_router 'void (Router *)'
| `-ParmVarDecl 0x5575655d1c70 <col:29, col:37> col:37 router 'Router *'
|-CXXMethodDecl 0x5575655d1e50 <line:134:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5575655d1db8 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5575655d2058 <line:135:5, col:54> col:10 used activate 'void (bool, ErrorHandler *)'
| |-ParmVarDecl 0x5575655d1f08 <col:19, col:24> col:24 foreground 'bool'
| `-ParmVarDecl 0x5575655d1f80 <col:36, col:50> col:50 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5575655d21a8 <line:136:5, col:44> col:17 activate 'void (ErrorHandler *)' inline
| `-ParmVarDecl 0x5575655d2118 <col:26, col:40> col:40 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5575655d22f0 <line:137:5, col:47> col:17 set_foreground 'void (bool)' inline
| `-ParmVarDecl 0x5575655d2260 <col:32, col:37> col:37 foreground 'bool'
|-CXXMethodDecl 0x5575655d2500 <line:139:5, col:69> col:9 new_notifier_signal 'int (const char *, NotifierSignal &)'
| |-ParmVarDecl 0x5575655d23b0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5575655d2428 <col:47, col:63> col:63 signal 'NotifierSignal &'
|-CXXMethodDecl 0x5575655d2688 <line:140:5, col:64> col:12 notifier_signal_name 'String (const atomic_uint32_t *) const'
| `-ParmVarDecl 0x5575655d25c0 <col:33, col:56> col:56 signal 'const atomic_uint32_t *'
|-CXXRecordDecl 0x5575655d2730 <line:145:5, line:167:5> line:145:12 referenced struct Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575655d2848 <col:5, col:12> col:12 implicit referenced struct Port
| |-FieldDecl 0x5575655d28f0 <line:146:9, col:13> col:13 referenced idx 'int'
| |-FieldDecl 0x5575655d2958 <line:147:9, col:13> col:13 referenced port 'int'
| |-CXXConstructorDecl 0x5575655d2a10 <line:149:9, line:150:9> line:149:9 used Port 'void ()'
| | `-CompoundStmt 0x5575658f2a50 <col:16, line:150:9>
| |-CXXConstructorDecl 0x5575655d2be8 <line:151:9, line:153:9> line:151:9 used Port 'void (int, int)'
| | |-ParmVarDecl 0x5575655d2ad0 <col:14, col:18> col:18 used i 'int'
| | |-ParmVarDecl 0x5575655d2b50 <col:21, col:25> col:25 used p 'int'
| | |-CXXCtorInitializer Field 0x5575655d28f0 'idx' 'int'
| | | `-ImplicitCastExpr 0x5575658f2aa0 <line:152:19> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575658f2a60 <col:19> 'int' lvalue ParmVar 0x5575655d2ad0 'i' 'int'
| | |-CXXCtorInitializer Field 0x5575655d2958 'port' 'int'
| | | `-ImplicitCastExpr 0x5575658f2b20 <col:28> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575658f2ae0 <col:28> 'int' lvalue ParmVar 0x5575655d2b50 'p' 'int'
| | `-CompoundStmt 0x5575658f2b70 <col:31, line:153:9>
| |-CXXMethodDecl 0x5575655d2dc8 <line:155:9, line:157:9> line:155:14 used operator== 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5575655d2cd8 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5575658f2d70 <col:46, line:157:9>
| |   `-ReturnStmt 0x5575658f2d60 <line:156:13, col:46>
| |     `-BinaryOperator 0x5575658f2d40 <col:20, col:46> 'bool' '&&'
| |       |-BinaryOperator 0x5575658f2c40 <col:20, col:29> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5575658f2c10 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5575658f2b90 <col:20> 'const int' lvalue ->idx 0x5575655d28f0
| |       | |   `-CXXThisExpr 0x5575658f2b80 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5575658f2c28 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5575658f2be0 <col:27, col:29> 'const int' lvalue .idx 0x5575655d28f0
| |       |     `-DeclRefExpr 0x5575658f2bc0 <col:27> 'const Router::Port' lvalue ParmVar 0x5575655d2cd8 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5575658f2d20 <col:36, col:46> 'bool' '=='
| |         |-ImplicitCastExpr 0x5575658f2cf0 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5575658f2c70 <col:36> 'const int' lvalue ->port 0x5575655d2958
| |         |   `-CXXThisExpr 0x5575658f2c60 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5575658f2d08 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5575658f2cc0 <col:44, col:46> 'const int' lvalue .port 0x5575655d2958
| |             `-DeclRefExpr 0x5575658f2ca0 <col:44> 'const Router::Port' lvalue ParmVar 0x5575655d2cd8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5575655d2f10 <line:158:9, line:160:9> line:158:14 operator!= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5575655d2e80 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5575658f2f78 <col:46, line:160:9>
| |   `-ReturnStmt 0x5575658f2f68 <line:159:13, col:46>
| |     `-BinaryOperator 0x5575658f2f48 <col:20, col:46> 'bool' '||'
| |       |-BinaryOperator 0x5575658f2e48 <col:20, col:29> 'bool' '!='
| |       | |-ImplicitCastExpr 0x5575658f2e18 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5575658f2d98 <col:20> 'const int' lvalue ->idx 0x5575655d28f0
| |       | |   `-CXXThisExpr 0x5575658f2d88 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5575658f2e30 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5575658f2de8 <col:27, col:29> 'const int' lvalue .idx 0x5575655d28f0
| |       |     `-DeclRefExpr 0x5575658f2dc8 <col:27> 'const Router::Port' lvalue ParmVar 0x5575655d2e80 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5575658f2f28 <col:36, col:46> 'bool' '!='
| |         |-ImplicitCastExpr 0x5575658f2ef8 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5575658f2e78 <col:36> 'const int' lvalue ->port 0x5575655d2958
| |         |   `-CXXThisExpr 0x5575658f2e68 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5575658f2f10 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5575658f2ec8 <col:44, col:46> 'const int' lvalue .port 0x5575655d2958
| |             `-DeclRefExpr 0x5575658f2ea8 <col:44> 'const Router::Port' lvalue ParmVar 0x5575655d2e80 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5575655d3058 <line:161:9, line:163:9> line:161:14 used operator< 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5575655d2fc8 <col:24, col:36> col:36 used x 'const Router::Port &'
| | `-CompoundStmt 0x5575658f32a0 <col:45, line:163:9>
| |   `-ReturnStmt 0x5575658f3290 <line:162:13, col:65>
| |     `-BinaryOperator 0x5575658f3270 <col:20, col:65> 'bool' '||'
| |       |-BinaryOperator 0x5575658f3050 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5575658f3020 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5575658f2fa0 <col:20> 'const int' lvalue ->idx 0x5575655d28f0
| |       | |   `-CXXThisExpr 0x5575658f2f90 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5575658f3038 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5575658f2ff0 <col:26, col:28> 'const int' lvalue .idx 0x5575655d28f0
| |       |     `-DeclRefExpr 0x5575658f2fd0 <col:26> 'const Router::Port' lvalue ParmVar 0x5575655d2fc8 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5575658f3250 <col:35, col:65> 'bool'
| |         `-BinaryOperator 0x5575658f3230 <col:36, col:61> 'bool' '&&'
| |           |-BinaryOperator 0x5575658f3130 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5575658f3100 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5575658f3080 <col:36> 'const int' lvalue ->idx 0x5575655d28f0
| |           | |   `-CXXThisExpr 0x5575658f3070 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5575658f3118 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5575658f30d0 <col:43, col:45> 'const int' lvalue .idx 0x5575655d28f0
| |           |     `-DeclRefExpr 0x5575658f30b0 <col:43> 'const Router::Port' lvalue ParmVar 0x5575655d2fc8 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5575658f3210 <col:52, col:61> 'bool' '<'
| |             |-ImplicitCastExpr 0x5575658f31e0 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5575658f3160 <col:52> 'const int' lvalue ->port 0x5575655d2958
| |             |   `-CXXThisExpr 0x5575658f3150 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5575658f31f8 <col:59, col:61> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5575658f31b0 <col:59, col:61> 'const int' lvalue .port 0x5575655d2958
| |                 `-DeclRefExpr 0x5575658f3190 <col:59> 'const Router::Port' lvalue ParmVar 0x5575655d2fc8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5575655d31a0 <line:164:9, line:166:9> line:164:14 operator<= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5575655d3110 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5575658f35c8 <col:46, line:166:9>
| |   `-ReturnStmt 0x5575658f35b8 <line:165:13, col:66>
| |     `-BinaryOperator 0x5575658f3598 <col:20, col:66> 'bool' '||'
| |       |-BinaryOperator 0x5575658f3378 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5575658f3348 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5575658f32c8 <col:20> 'const int' lvalue ->idx 0x5575655d28f0
| |       | |   `-CXXThisExpr 0x5575658f32b8 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5575658f3360 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5575658f3318 <col:26, col:28> 'const int' lvalue .idx 0x5575655d28f0
| |       |     `-DeclRefExpr 0x5575658f32f8 <col:26> 'const Router::Port' lvalue ParmVar 0x5575655d3110 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5575658f3578 <col:35, col:66> 'bool'
| |         `-BinaryOperator 0x5575658f3558 <col:36, col:62> 'bool' '&&'
| |           |-BinaryOperator 0x5575658f3458 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5575658f3428 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5575658f33a8 <col:36> 'const int' lvalue ->idx 0x5575655d28f0
| |           | |   `-CXXThisExpr 0x5575658f3398 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5575658f3440 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5575658f33f8 <col:43, col:45> 'const int' lvalue .idx 0x5575655d28f0
| |           |     `-DeclRefExpr 0x5575658f33d8 <col:43> 'const Router::Port' lvalue ParmVar 0x5575655d3110 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5575658f3538 <col:52, col:62> 'bool' '<='
| |             |-ImplicitCastExpr 0x5575658f3508 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5575658f3488 <col:52> 'const int' lvalue ->port 0x5575655d2958
| |             |   `-CXXThisExpr 0x5575658f3478 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5575658f3520 <col:60, col:62> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5575658f34d8 <col:60, col:62> 'const int' lvalue .port 0x5575655d2958
| |                 `-DeclRefExpr 0x5575658f34b8 <col:60> 'const Router::Port' lvalue ParmVar 0x5575655d3110 'x' 'const Router::Port &'
| |-CXXConstructorDecl 0x5575658f35e0 <line:145:12> col:12 implicit constexpr Port 'void (const Router::Port &)' inline default trivial noexcept-unevaluated 0x5575658f35e0
| | `-ParmVarDecl 0x5575658f36f8 <col:12> col:12 'const Router::Port &'
| |-CXXConstructorDecl 0x5575658f3798 <col:12> col:12 implicit constexpr Port 'void (Router::Port &&)' inline default trivial noexcept-unevaluated 0x5575658f3798
| | `-ParmVarDecl 0x5575658f38a8 <col:12> col:12 'Router::Port &&'
| |-CXXDestructorDecl 0x5575658f3940 <col:12> col:12 implicit referenced ~Port 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5575658f3c10 <col:12> col:12 implicit operator= 'Router::Port &(const Router::Port &)' inline default trivial noexcept-unevaluated 0x5575658f3c10
| | `-ParmVarDecl 0x5575658f3d18 <col:12> col:12 'const Router::Port &'
| `-CXXMethodDecl 0x5575658f3d88 <col:12> col:12 implicit used operator= 'Router::Port &(Router::Port &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5575658f3e98 <col:12> col:12 used 'Router::Port &&'
|   `-CompoundStmt 0x5575658f41b8 <col:12>
|     |-BinaryOperator 0x5575658f4058 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5575658f4010 <col:12> 'int' lvalue ->idx 0x5575655d28f0
|     | | `-CXXThisExpr 0x5575658f4000 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5575658f4040 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5575658f3fd0 <col:12> 'int' xvalue .idx 0x5575655d28f0
|     |     `-CXXStaticCastExpr 0x5575658f3fa0 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5575658f3f70 <col:12> 'Router::Port' lvalue ParmVar 0x5575658f3e98 '' 'Router::Port &&'
|     |-BinaryOperator 0x5575658f4160 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5575658f4118 <col:12> 'int' lvalue ->port 0x5575655d2958
|     | | `-CXXThisExpr 0x5575658f4108 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5575658f4148 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5575658f40d8 <col:12> 'int' xvalue .port 0x5575655d2958
|     |     `-CXXStaticCastExpr 0x5575658f40a8 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5575658f4078 <col:12> 'Router::Port' lvalue ParmVar 0x5575658f3e98 '' 'Router::Port &&'
|     `-ReturnStmt 0x5575658f41a8 <col:12>
|       `-UnaryOperator 0x5575658f4190 <col:12> 'Router::Port' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5575658f4180 <col:12> 'Router::Port *' this
|-CXXRecordDecl 0x5575655d3260 <line:169:5, line:194:5> line:169:12 referenced struct Connection definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5575655d3378 <col:5, col:12> col:12 implicit referenced struct Connection
| |-FieldDecl 0x5575655d3568 <line:170:9, col:17> col:14 referenced p 'Router::Port [2]'
| |-CXXConstructorDecl 0x5575655d3620 <line:172:9, line:173:9> line:172:9 Connection 'void ()'
| | |-CXXCtorInitializer Field 0x5575655d3568 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5575658f3918 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5575658f3a50 <col:22, line:173:9>
| |-CXXConstructorDecl 0x5575655d3958 <line:174:9, line:177:9> line:174:9 Connection 'void (int, int, int, int)'
| | |-ParmVarDecl 0x5575655d36e0 <col:20, col:24> col:24 used from_idx 'int'
| | |-ParmVarDecl 0x5575655d3760 <col:34, col:38> col:38 used from_port 'int'
| | |-ParmVarDecl 0x5575655d37e0 <col:49, col:53> col:53 used to_idx 'int'
| | |-ParmVarDecl 0x5575655d3860 <col:61, col:65> col:65 used to_port 'int'
| | |-CXXCtorInitializer Field 0x5575655d3568 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5575658f3a60 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5575658f4498 <col:74, line:177:9>
| |   |-ExprWithCleanups 0x5575658f4288 <line:175:13, col:40> 'Router::Port' lvalue
| |   | `-CXXOperatorCallExpr 0x5575658f4250 <col:13, col:40> 'Router::Port' lvalue
| |   |   |-ImplicitCastExpr 0x5575658f4238 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5575658f3f20 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5575658f3d88 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |   |   |-ArraySubscriptExpr 0x5575658f3b30 <col:13, col:16> 'Router::Port' lvalue
| |   |   | |-ImplicitCastExpr 0x5575658f3b18 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |   |   | | `-MemberExpr 0x5575658f3ac8 <col:13> 'Router::Port [2]' lvalue ->p 0x5575655d3568
| |   |   | |   `-CXXThisExpr 0x5575658f3ab8 <col:13> 'Router::Connection *' implicit this
| |   |   | `-IntegerLiteral 0x5575658f3af8 <col:15> 'int' 0
| |   |   `-MaterializeTemporaryExpr 0x5575658f3f08 <col:20, col:40> 'Router::Port' xvalue
| |   |     `-CXXTemporaryObjectExpr 0x5575658f3bd0 <col:20, col:40> 'Router::Port' 'void (int, int)'
| |   |       |-ImplicitCastExpr 0x5575658f3ba0 <col:25> 'int' <LValueToRValue>
| |   |       | `-DeclRefExpr 0x5575658f3b60 <col:25> 'int' lvalue ParmVar 0x5575655d37e0 'to_idx' 'int'
| |   |       `-ImplicitCastExpr 0x5575658f3bb8 <col:33> 'int' <LValueToRValue>
| |   |         `-DeclRefExpr 0x5575658f3b80 <col:33> 'int' lvalue ParmVar 0x5575655d3860 'to_port' 'int'
| |   `-ExprWithCleanups 0x5575658f4480 <line:176:13, col:44> 'Router::Port' lvalue
| |     `-CXXOperatorCallExpr 0x5575658f4448 <col:13, col:44> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5575658f4430 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5575658f4410 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5575658f3d88 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |       |-ArraySubscriptExpr 0x5575658f4318 <col:13, col:16> 'Router::Port' lvalue
| |       | |-ImplicitCastExpr 0x5575658f4300 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |       | | `-MemberExpr 0x5575658f42b0 <col:13> 'Router::Port [2]' lvalue ->p 0x5575655d3568
| |       | |   `-CXXThisExpr 0x5575658f42a0 <col:13> 'Router::Connection *' implicit this
| |       | `-IntegerLiteral 0x5575658f42e0 <col:15> 'int' 1
| |       `-MaterializeTemporaryExpr 0x5575658f43f8 <col:20, col:44> 'Router::Port' xvalue
| |         `-CXXTemporaryObjectExpr 0x5575658f43b8 <col:20, col:44> 'Router::Port' 'void (int, int)'
| |           |-ImplicitCastExpr 0x5575658f4388 <col:25> 'int' <LValueToRValue>
| |           | `-DeclRefExpr 0x5575658f4348 <col:25> 'int' lvalue ParmVar 0x5575655d36e0 'from_idx' 'int'
| |           `-ImplicitCastExpr 0x5575658f43a0 <col:35> 'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5575658f4368 <col:35> 'int' lvalue ParmVar 0x5575655d3760 'from_port' 'int'
| |-CXXMethodDecl 0x5575655d3b28 <line:179:9, line:182:9> line:179:21 operator[] 'const Router::Port &(int) const'
| | |-ParmVarDecl 0x5575655d3a38 <col:32, col:36> col:36 used i 'int'
| | `-CompoundStmt 0x5575658f4a58 <col:45, line:182:9>
| |   |-ParenExpr 0x5575658f4938 <line:180:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5575658f4908 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5575658f45d8 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5575658f45a8 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5575658f4510 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5575658f44f8 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5575658f44b8 <col:34> 'int' lvalue ParmVar 0x5575655d3a38 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5575658f44d8 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5575658f4588 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5575658f4570 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5575658f4530 <col:44> 'int' lvalue ParmVar 0x5575655d3a38 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5575658f4550 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5575658f4638 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5575658f4618 <col:59> 'int' 0
| |   |   `-CallExpr 0x5575658f4868 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5575658f4850 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5575658f4830 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5575658f48a8 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5575658f46a8 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5575658f48c0 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5575658f46d0 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5575658f48d8 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5575658f4708 <col:130> 'int' 180
| |   |     `-ImplicitCastExpr 0x5575658f48f0 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5575658f4818 <col:135, col:149> 'const char [62]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5575658f4800 <col:149> 'const char [62]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5575658f47a8 <col:149> 'const char [62]' lvalue "const Router::Port &Router::Connection::operator[](int) const"
| |   `-ReturnStmt 0x5575658f4a48 <line:181:13, col:23>
| |     `-ArraySubscriptExpr 0x5575658f4a28 <col:20, col:23> 'const Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5575658f49f8 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5575658f4968 <col:20> 'Router::Port const[2]' lvalue ->p 0x5575655d3568
| |       |   `-CXXThisExpr 0x5575658f4958 <col:20> 'const Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5575658f4a10 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5575658f4998 <col:22> 'int' lvalue ParmVar 0x5575655d3a38 'i' 'int'
| |-CXXMethodDecl 0x5575655d3cd8 <line:183:9, line:186:9> line:183:15 operator[] 'Router::Port &(int)'
| | |-ParmVarDecl 0x5575655d3be8 <col:26, col:30> col:30 used i 'int'
| | `-CompoundStmt 0x5575658f4fd0 <col:33, line:186:9>
| |   |-ParenExpr 0x5575658f4ef0 <line:184:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5575658f4ec0 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5575658f4b98 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5575658f4b68 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5575658f4ad0 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5575658f4ab8 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5575658f4a78 <col:34> 'int' lvalue ParmVar 0x5575655d3be8 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5575658f4a98 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5575658f4b48 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5575658f4b30 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5575658f4af0 <col:44> 'int' lvalue ParmVar 0x5575655d3be8 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5575658f4b10 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5575658f4bf8 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5575658f4bd8 <col:59> 'int' 0
| |   |   `-CallExpr 0x5575658f4e20 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5575658f4e08 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5575658f4de8 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5575658f4e60 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5575658f4c68 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5575658f4e78 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5575658f4c90 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5575658f4e90 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5575658f4cc8 <col:130> 'int' 184
| |   |     `-ImplicitCastExpr 0x5575658f4ea8 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5575658f4dd0 <col:135, col:149> 'const char [50]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5575658f4db8 <col:149> 'const char [50]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5575658f4d68 <col:149> 'const char [50]' lvalue "Router::Port &Router::Connection::operator[](int)"
| |   `-ReturnStmt 0x5575658f4fc0 <line:185:13, col:23>
| |     `-ArraySubscriptExpr 0x5575658f4fa0 <col:20, col:23> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5575658f4f70 <col:20> 'Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5575658f4f20 <col:20> 'Router::Port [2]' lvalue ->p 0x5575655d3568
| |       |   `-CXXThisExpr 0x5575658f4f10 <col:20> 'Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5575658f4f88 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5575658f4f50 <col:22> 'int' lvalue ParmVar 0x5575655d3be8 'i' 'int'
| |-CXXMethodDecl 0x5575655d3e78 <line:188:9, line:190:9> line:188:14 operator== 'bool (const Router::Connection &) const'
| | |-ParmVarDecl 0x5575655d3db8 <col:25, col:43> col:43 used x 'const Router::Connection &'
| | `-CompoundStmt 0x5575658f53a8 <col:52, line:190:9>
| |   `-ReturnStmt 0x5575658f5398 <line:189:13, col:51>
| |     `-BinaryOperator 0x5575658f5378 <col:20, col:51> 'bool' '&&'
| |       |-CXXOperatorCallExpr 0x5575658f5190 <col:20, col:33> 'bool'
| |       | |-ImplicitCastExpr 0x5575658f5178 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5575658f5130 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5575655d2dc8 'operator==' 'bool (const Router::Port &) const'
| |       | |-ArraySubscriptExpr 0x5575658f5068 <col:20, col:23> 'const Router::Port' lvalue
| |       | | |-ImplicitCastExpr 0x5575658f5050 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | | | `-MemberExpr 0x5575658f5000 <col:20> 'Router::Port const[2]' lvalue ->p 0x5575655d3568
| |       | | |   `-CXXThisExpr 0x5575658f4ff0 <col:20> 'const Router::Connection *' implicit this
| |       | | `-IntegerLiteral 0x5575658f5030 <col:22> 'int' 0
| |       | `-ArraySubscriptExpr 0x5575658f5110 <col:28, col:33> 'const Router::Port' lvalue
| |       |   |-ImplicitCastExpr 0x5575658f50f8 <col:28, col:30> 'const Router::Port *' <ArrayToPointerDecay>
| |       |   | `-MemberExpr 0x5575658f50a8 <col:28, col:30> 'Router::Port const[2]' lvalue .p 0x5575655d3568
| |       |   |   `-DeclRefExpr 0x5575658f5088 <col:28> 'const Router::Connection' lvalue ParmVar 0x5575655d3db8 'x' 'const Router::Connection &'
| |       |   `-IntegerLiteral 0x5575658f50d8 <col:32> 'int' 0
| |       `-CXXOperatorCallExpr 0x5575658f5340 <col:38, col:51> 'bool'
| |         |-ImplicitCastExpr 0x5575658f5328 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5575658f5308 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5575655d2dc8 'operator==' 'bool (const Router::Port &) const'
| |         |-ArraySubscriptExpr 0x5575658f5240 <col:38, col:41> 'const Router::Port' lvalue
| |         | |-ImplicitCastExpr 0x5575658f5228 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
| |         | | `-MemberExpr 0x5575658f51d8 <col:38> 'Router::Port const[2]' lvalue ->p 0x5575655d3568
| |         | |   `-CXXThisExpr 0x5575658f51c8 <col:38> 'const Router::Connection *' implicit this
| |         | `-IntegerLiteral 0x5575658f5208 <col:40> 'int' 1
| |         `-ArraySubscriptExpr 0x5575658f52e8 <col:46, col:51> 'const Router::Port' lvalue
| |           |-ImplicitCastExpr 0x5575658f52d0 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
| |           | `-MemberExpr 0x5575658f5280 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5575655d3568
| |           |   `-DeclRefExpr 0x5575658f5260 <col:46> 'const Router::Connection' lvalue ParmVar 0x5575655d3db8 'x' 'const Router::Connection &'
| |           `-IntegerLiteral 0x5575658f52b0 <col:50> 'int' 1
| `-CXXMethodDecl 0x5575655d3fc0 <line:191:9, line:193:9> line:191:14 operator< 'bool (const Router::Connection &) const'
|   |-ParmVarDecl 0x5575655d3f30 <col:24, col:42> col:42 used x 'const Router::Connection &'
|   `-CompoundStmt 0x5575658f5940 <col:51, line:193:9>
|     `-ReturnStmt 0x5575658f5930 <line:192:13, col:69>
|       `-BinaryOperator 0x5575658f5910 <col:20, col:69> 'bool' '||'
|         |-CXXOperatorCallExpr 0x5575658f5538 <col:20, col:32> 'bool'
|         | |-ImplicitCastExpr 0x5575658f5520 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5575658f5500 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5575655d3058 'operator<' 'bool (const Router::Port &) const'
|         | |-ArraySubscriptExpr 0x5575658f5438 <col:20, col:23> 'const Router::Port' lvalue
|         | | |-ImplicitCastExpr 0x5575658f5420 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
|         | | | `-MemberExpr 0x5575658f53d0 <col:20> 'Router::Port const[2]' lvalue ->p 0x5575655d3568
|         | | |   `-CXXThisExpr 0x5575658f53c0 <col:20> 'const Router::Connection *' implicit this
|         | | `-IntegerLiteral 0x5575658f5400 <col:22> 'int' 0
|         | `-ArraySubscriptExpr 0x5575658f54e0 <col:27, col:32> 'const Router::Port' lvalue
|         |   |-ImplicitCastExpr 0x5575658f54c8 <col:27, col:29> 'const Router::Port *' <ArrayToPointerDecay>
|         |   | `-MemberExpr 0x5575658f5478 <col:27, col:29> 'Router::Port const[2]' lvalue .p 0x5575655d3568
|         |   |   `-DeclRefExpr 0x5575658f5458 <col:27> 'const Router::Connection' lvalue ParmVar 0x5575655d3f30 'x' 'const Router::Connection &'
|         |   `-IntegerLiteral 0x5575658f54a8 <col:31> 'int' 0
|         `-ParenExpr 0x5575658f58f0 <col:37, col:69> 'bool'
|           `-BinaryOperator 0x5575658f58d0 <col:38, col:68> 'bool' '&&'
|             |-CXXOperatorCallExpr 0x5575658f56e8 <col:38, col:51> 'bool'
|             | |-ImplicitCastExpr 0x5575658f56d0 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x5575658f56b0 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5575655d2dc8 'operator==' 'bool (const Router::Port &) const'
|             | |-ArraySubscriptExpr 0x5575658f55e8 <col:38, col:41> 'const Router::Port' lvalue
|             | | |-ImplicitCastExpr 0x5575658f55d0 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
|             | | | `-MemberExpr 0x5575658f5580 <col:38> 'Router::Port const[2]' lvalue ->p 0x5575655d3568
|             | | |   `-CXXThisExpr 0x5575658f5570 <col:38> 'const Router::Connection *' implicit this
|             | | `-IntegerLiteral 0x5575658f55b0 <col:40> 'int' 0
|             | `-ArraySubscriptExpr 0x5575658f5690 <col:46, col:51> 'const Router::Port' lvalue
|             |   |-ImplicitCastExpr 0x5575658f5678 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
|             |   | `-MemberExpr 0x5575658f5628 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5575655d3568
|             |   |   `-DeclRefExpr 0x5575658f5608 <col:46> 'const Router::Connection' lvalue ParmVar 0x5575655d3f30 'x' 'const Router::Connection &'
|             |   `-IntegerLiteral 0x5575658f5658 <col:50> 'int' 0
|             `-CXXOperatorCallExpr 0x5575658f5898 <col:56, col:68> 'bool'
|               |-ImplicitCastExpr 0x5575658f5880 <col:61> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5575658f5860 <col:61> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5575655d3058 'operator<' 'bool (const Router::Port &) const'
|               |-ArraySubscriptExpr 0x5575658f5798 <col:56, col:59> 'const Router::Port' lvalue
|               | |-ImplicitCastExpr 0x5575658f5780 <col:56> 'const Router::Port *' <ArrayToPointerDecay>
|               | | `-MemberExpr 0x5575658f5730 <col:56> 'Router::Port const[2]' lvalue ->p 0x5575655d3568
|               | |   `-CXXThisExpr 0x5575658f5720 <col:56> 'const Router::Connection *' implicit this
|               | `-IntegerLiteral 0x5575658f5760 <col:58> 'int' 1
|               `-ArraySubscriptExpr 0x5575658f5840 <col:63, col:68> 'const Router::Port' lvalue
|                 |-ImplicitCastExpr 0x5575658f5828 <col:63, col:65> 'const Router::Port *' <ArrayToPointerDecay>
|                 | `-MemberExpr 0x5575658f57d8 <col:63, col:65> 'Router::Port const[2]' lvalue .p 0x5575655d3568
|                 |   `-DeclRefExpr 0x5575658f57b8 <col:63> 'const Router::Connection' lvalue ParmVar 0x5575655d3f30 'x' 'const Router::Connection &'
|                 `-IntegerLiteral 0x5575658f5808 <col:67> 'int' 1
|-AccessSpecDecl 0x5575655d4080 <line:216:3, col:10> col:3 private
|-CXXRecordDecl 0x5575655d40a8 <line:218:5, col:11> col:11 class RouterContextErrh
|-EnumDecl 0x5575655d4160 <line:220:5, line:223:5> line:220:5
| |-EnumConstantDecl 0x5575655d4220 <line:221:9> col:9 ROUTER_NEW 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5575655d4270 <col:21> col:21 referenced ROUTER_PRECONFIGURE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5575655d42c0 <col:42> col:42 ROUTER_PREINITIALIZE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5575655d4310 <line:222:9> col:9 referenced ROUTER_LIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| `-EnumConstantDecl 0x5575655d4360 <col:22> col:22 ROUTER_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
|-EnumDecl 0x5575655d43b0 <line:224:5, line:227:5> line:224:5
| |-EnumConstantDecl 0x5575655d44c8 <line:225:9, col:25> col:9 referenced RUNNING_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5575655d44a8 <col:24, col:25> 'int' Int: -2
| |   `-UnaryOperator 0x5575655d4490 <col:24, col:25> 'int' prefix '-'
| |     `-IntegerLiteral 0x5575655d4470 <col:25> 'int' 2
| |-EnumConstantDecl 0x5575655d4570 <col:28, col:48> col:28 RUNNING_INACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5575655d4550 <col:47, col:48> 'int' Int: -1
| |   `-UnaryOperator 0x5575655d4538 <col:47, col:48> 'int' prefix '-'
| |     `-IntegerLiteral 0x5575655d4518 <col:48> 'int' 1
| |-EnumConstantDecl 0x5575655d4600 <col:51, col:71> col:51 RUNNING_PREPARING 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5575655d45e0 <col:71> 'int' Int: 0
| |   `-IntegerLiteral 0x5575655d45c0 <col:71> 'int' 0
| |-EnumConstantDecl 0x5575655d4690 <line:226:9, col:30> col:9 referenced RUNNING_BACKGROUND 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5575655d4670 <col:30> 'int' Int: 1
| |   `-IntegerLiteral 0x5575655d4650 <col:30> 'int' 1
| `-EnumConstantDecl 0x5575655d4720 <col:33, col:50> col:33 referenced RUNNING_ACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
|   `-ConstantExpr 0x5575655d4700 <col:50> 'int' Int: 2
|     `-IntegerLiteral 0x5575655d46e0 <col:50> 'int' 2
|-FieldDecl 0x5575655d4780 <line:229:5, col:13> col:13 referenced _master 'Master *'
|-FieldDecl 0x5575655d47e0 <line:231:5, col:21> col:21 referenced _runcount 'atomic_uint32_t'
|-FieldDecl 0x5575655d4848 <line:233:5, col:18> col:18 referenced _state 'volatile int'
|-FieldDecl 0x5575655d48e8 <line:234:5, col:30> col:10 _have_connections 'bool'
| `-ConstantExpr 0x5575655d48c8 <col:30> 'int' Int: 1
|   `-IntegerLiteral 0x5575655d4898 <col:30> 'int' 1
|-FieldDecl 0x5575655d4988 <line:235:5, col:33> col:18 _conn_sorted 'bool' mutable
| `-ConstantExpr 0x5575655d4968 <col:33> 'int' Int: 1
|   `-IntegerLiteral 0x5575655d4938 <col:33> 'int' 1
|-FieldDecl 0x5575655d4a28 <line:236:5, col:32> col:10 _have_configuration 'bool'
| `-ConstantExpr 0x5575655d4a08 <col:32> 'int' Int: 1
|   `-IntegerLiteral 0x5575655d49d8 <col:32> 'int' 1
|-FieldDecl 0x5575655d4a90 <line:237:5, col:18> col:18 referenced _running 'volatile int'
|-FieldDecl 0x5575655d4af0 <line:239:5, col:21> col:21 referenced _refcount 'atomic_uint32_t'
|-FieldDecl 0x5575658c5940 <line:241:5, col:23> col:23 referenced _elements 'Vector<Element *>':'Vector<Element *>'
|-FieldDecl 0x5575658c5a40 <line:242:5, col:20> col:20 _element_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5575658c5b40 <line:243:5, col:20> col:20 _element_configurations 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5575658cca60 <line:244:5, col:22> col:22 _element_landmarkids 'Vector<uint32_t>':'Vector<unsigned int>'
|-FieldDecl 0x5575658ccb70 <line:245:5, col:25> col:25 referenced _element_home_thread_ids 'Vector<int>':'Vector<int>' mutable
|-CXXRecordDecl 0x5575658ccbc0 <line:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
| |-DefinitionData aggregate standard_layout has_mutable_fields
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x5575658cccd8 <col:5, col:12> col:12 implicit struct element_landmark_t
| |-FieldDecl 0x5575658ccd78 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
| |-FieldDecl 0x5575658ccdd8 <line:249:9, col:16> col:16 filename 'String'
| |-CXXConstructorDecl 0x5575658cce70 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5575658cce70
| | `-ParmVarDecl 0x5575658ccf88 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXConstructorDecl 0x5575658cd028 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5575658cd028
| | `-ParmVarDecl 0x5575658cd138 <col:12> col:12 'Router::element_landmark_t &&'
| |-CXXMethodDecl 0x5575658cd1d8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5575658cd1d8
| | `-ParmVarDecl 0x5575658cd2e8 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXMethodDecl 0x5575658cd358 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5575658cd358
| | `-ParmVarDecl 0x5575658cd468 <col:12> col:12 'Router::element_landmark_t &&'
| `-CXXDestructorDecl 0x5575658cd4f0 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x5575658cd4f0
|-FieldDecl 0x5575658d7fb0 <line:251:5, col:32> col:32 _element_landmarks 'Vector<Router::element_landmark_t>':'Vector<Router::element_landmark_t>'
|-FieldDecl 0x5575658d8010 <line:252:5, col:14> col:14 _last_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5575658d8120 <line:254:5, col:25> col:25 _element_name_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x5575658d8478 <line:255:5, col:40> col:17 referenced _element_gport_offset 'Vector<int> [2]'
|-FieldDecl 0x5575658d8580 <line:256:5, col:17> col:17 _element_configure_order 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5575658e0490 <line:258:5, col:32> col:32 _conn 'Vector<Router::Connection>':'Vector<Router::Connection>' mutable
|-FieldDecl 0x5575658e05a0 <line:259:5, col:25> col:25 _conn_output_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x5575658e06a0 <line:261:5, col:20> col:20 _requirements 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5575658e07b0 <line:263:5, col:17> col:17 _ehandler_first_by_element 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5575658e08c0 <line:264:5, col:17> col:17 _ehandler_to_handler 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5575658e09d0 <line:265:5, col:17> col:17 _ehandler_next 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5575658e0ae0 <line:267:5, col:17> col:17 _handler_first_by_name 'Vector<int>':'Vector<int>'
|-EnumDecl 0x5575658e0b30 <line:269:5, col:33> col:5
| `-EnumConstantDecl 0x5575658e0c30 <col:12, col:29> col:12 HANDLER_BUFSIZ 'Router::(anonymous enum at ../dummy_inc/click/router.hh:269:5)'
|   `-ImplicitCastExpr 0x5575658e0c80 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575658e0c10 <col:29> 'int' Int: 256
|       `-IntegerLiteral 0x5575658e0bf0 <col:29> 'int' 256
|-FieldDecl 0x5575658e0ce0 <line:270:5, col:15> col:15 _handler_bufs 'Handler **'
|-FieldDecl 0x5575658e0d48 <line:271:5, col:9> col:9 _nhandlers_bufs 'int'
|-FieldDecl 0x5575658e0db0 <line:272:5, col:9> col:9 _free_handler 'int'
|-FieldDecl 0x5575658e0eb0 <line:274:5, col:20> col:20 _attachment_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5575658ea570 <line:275:5, col:19> col:19 _attachments 'Vector<void *>':'Vector<void *>'
|-FieldDecl 0x5575658ea5d0 <line:277:5, col:14> col:14 referenced _root_element 'Element *'
|-FieldDecl 0x5575658ea630 <line:278:5, col:12> col:12 _configuration 'String'
|-CXXRecordDecl 0x5575658ea680 <line:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
| |-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x5575658ea798 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
| |-EnumDecl 0x5575658ea828 <line:281:9, col:32> col:9
| | `-EnumConstantDecl 0x5575658ea930 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
| |   `-ImplicitCastExpr 0x5575658ea980 <col:27> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x5575658ea910 <col:27> 'int' Int: 4096
| |       `-IntegerLiteral 0x5575658ea8f0 <col:27> 'int' 4096
| |-FieldDecl 0x5575658ea9a8 <line:282:9, col:16> col:16 name 'String'
| |-FieldDecl 0x5575658eaa10 <line:283:9, col:13> col:13 nsig 'int'
| |-FieldDecl 0x5575658eac08 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
| |-FieldDecl 0x5575658eac98 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
| |-CXXConstructorDecl 0x5575658eae58 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| | |-ParmVarDecl 0x5575658eacf8 <col:28, col:42> col:42 used n 'const String &'
| | |-ParmVarDecl 0x5575658ead70 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| | |-CXXCtorInitializer Field 0x5575658ea9a8 'name' 'String'
| | | `-CXXConstructExpr 0x5575658f5998 <line:287:15, col:21> 'String' 'void (const String &)'
| | |   `-DeclRefExpr 0x5575658f5958 <col:20> 'const String' lvalue ParmVar 0x5575658eacf8 'n' 'const String &'
| | |-CXXCtorInitializer Field 0x5575658eaa10 'nsig' 'int'
| | | `-IntegerLiteral 0x5575658f59f0 <col:29> 'int' 0
| | |-CXXCtorInitializer Field 0x5575658eac08 'sig' 'atomic_uint32_t [128]'
| | | `-CXXConstructExpr 0x5575658f5ad8 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| | |-CXXCtorInitializer Field 0x5575658eac98 'next' 'Router::notifier_signals_t *'
| | | `-ImplicitCastExpr 0x5575658f5a98 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575658f5a58 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x5575658ead70 'nx' 'Router::notifier_signals_t *'
| | `-CompoundStmt 0x5575658f5d68 <col:42, line:289:9>
| |   `-CallExpr 0x5575658f5d18 <line:288:13, col:43> 'void *'
| |     |-ImplicitCastExpr 0x5575658f5d00 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5575658f5ce0 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x55756541f348 'memset' 'void *(void *, int, size_t) throw()'
| |     |-ImplicitCastExpr 0x5575658f5d50 <col:20, col:26> 'void *' <BitCast>
| |     | `-UnaryOperator 0x5575658f5c28 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
| |     |   `-ArraySubscriptExpr 0x5575658f5c08 <col:21, col:26> 'atomic_uint32_t' lvalue
| |     |     |-ImplicitCastExpr 0x5575658f5bf0 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
| |     |     | `-MemberExpr 0x5575658f5ba0 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x5575658eac08
| |     |     |   `-CXXThisExpr 0x5575658f5b90 <col:21> 'Router::notifier_signals_t *' implicit this
| |     |     `-IntegerLiteral 0x5575658f5bd0 <col:25> 'int' 0
| |     |-IntegerLiteral 0x5575658f5c40 <col:29> 'int' 0
| |     `-UnaryExprOrTypeTraitExpr 0x5575658f5cc0 <col:32, col:42> 'unsigned long' sizeof
| |       `-ParenExpr 0x5575658f5ca0 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
| |         `-MemberExpr 0x5575658f5c70 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x5575658eac08 non_odr_use_unevaluated
| |           `-CXXThisExpr 0x5575658f5c60 <col:39> 'Router::notifier_signals_t *' implicit this
| |-CXXConstructorDecl 0x5575658eaf38 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5575658eaf38
| | `-ParmVarDecl 0x5575658eb048 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXConstructorDecl 0x5575658eb0e8 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5575658eb0e8
| | `-ParmVarDecl 0x5575658eb1f8 <col:12> col:12 'Router::notifier_signals_t &&'
| |-CXXMethodDecl 0x5575658eb298 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x5575658eb298
| | `-ParmVarDecl 0x5575658eb3a8 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXMethodDecl 0x5575658eb418 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x5575658eb418
| | `-ParmVarDecl 0x5575658eb528 <col:12> col:12 'Router::notifier_signals_t &&'
| `-CXXDestructorDecl 0x5575658eb5b0 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x5575658eb5b0
|-FieldDecl 0x5575658eb6a0 <line:291:5, col:25> col:25 _notifier_signals 'Router::notifier_signals_t *'
|-FieldDecl 0x5575658eb700 <line:292:5, col:27> col:27 referenced _arena_factory 'HashMap_ArenaFactory *'
|-FieldDecl 0x5575658eb760 <line:293:5, col:13> col:13 referenced _hotswap_router 'Router *'
|-FieldDecl 0x5575658eb7c0 <line:294:5, col:18> col:18 referenced _thread_sched 'ThreadSched *'
|-FieldDecl 0x5575658eb820 <line:295:5, col:23> col:23 referenced _name_info 'NameInfo *' mutable
|-FieldDecl 0x5575658eb930 <line:296:5, col:17> col:17 _flow_code_override_eindex 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5575658eba30 <line:297:5, col:20> col:20 referenced _flow_code_override 'Vector<String>':'Vector<String>'
|-FieldDecl 0x5575658eba90 <line:299:5, col:13> col:13 _next_router 'Router *'
|-CXXConstructorDecl 0x5575658ebbd8 <line:305:5, col:25> col:5 Router 'void (const Router &)'
| `-ParmVarDecl 0x5575658ebb18 <col:12, col:24> col:25 'const Router &'
|-CXXMethodDecl 0x5575658ebd88 <line:306:5, col:36> col:13 operator= 'Router &(const Router &)'
| `-ParmVarDecl 0x5575658ebc98 <col:23, col:35> col:36 'const Router &'
|-CXXMethodDecl 0x5575658ebed0 <line:308:5, col:49> col:17 remove_connection 'Router::Connection *(Router::Connection *)'
| `-ParmVarDecl 0x5575658ebe40 <col:35, col:47> col:47 cp 'Router::Connection *'
|-CXXMethodDecl 0x5575658ec278 <line:309:5, line:310:62> line:309:10 hookup_error 'void (const Router::Port &, bool, const char *, ErrorHandler *, bool)'
| |-ParmVarDecl 0x5575658ebf88 <col:23, col:35> col:35 p 'const Router::Port &'
| |-ParmVarDecl 0x5575658ec000 <col:38, col:43> col:43 isoutput 'bool'
| |-ParmVarDecl 0x5575658ec080 <col:53, col:65> col:65 message 'const char *'
| |-ParmVarDecl 0x5575658ec0f8 <line:310:23, col:37> col:37 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5575658ec170 <col:43, col:57> col:48 active 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5575658f2a40 <col:57> 'bool' false
|-CXXMethodDecl 0x5575658ec3e8 <line:311:5, col:44> col:9 check_hookup_elements 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5575658ec350 <col:31, col:43> col:44 'ErrorHandler *'
|-CXXMethodDecl 0x5575658ec538 <line:312:5, col:41> col:9 check_hookup_range 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5575658ec4a0 <col:28, col:40> col:41 'ErrorHandler *'
|-CXXMethodDecl 0x5575658ec688 <line:313:5, col:48> col:9 check_hookup_completeness 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5575658ec5f0 <col:35, col:47> col:48 'ErrorHandler *'
|-CXXMethodDecl 0x5575658ec7e0 <line:315:5, col:48> col:17 used hard_flow_code_override 'const char *(int) const'
| `-ParmVarDecl 0x5575658ec748 <col:41, col:45> col:45 e 'int'
|-CXXMethodDecl 0x5575658ecb00 <line:316:5, col:74> col:9 processing_error 'int (const Router::Connection &, bool, int, ErrorHandler *)'
| |-ParmVarDecl 0x5575658ec898 <col:26, col:44> col:44 conn 'const Router::Connection &'
| |-ParmVarDecl 0x5575658ec910 <col:50> col:54 'bool'
| |-ParmVarDecl 0x5575658ec990 <col:56> col:59 'int'
| `-ParmVarDecl 0x5575658eca08 <col:61, col:73> col:74 'ErrorHandler *'
|-CXXMethodDecl 0x5575658ecc68 <line:317:5, col:42> col:9 check_push_and_pull 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5575658ecbd0 <col:29, col:41> col:42 'ErrorHandler *'
|-CXXMethodDecl 0x5575658ecd30 <line:319:5, col:26> col:10 set_connections 'void ()'
|-CXXMethodDecl 0x5575658ecdf0 <line:320:5, col:29> col:10 sort_connections 'void () const'
|-CXXMethodDecl 0x5575658ecff0 <line:321:5, col:64> col:9 connindex_lower_bound 'int (bool, const Router::Port &) const'
| |-ParmVarDecl 0x5575658ecea0 <col:31, col:36> col:36 isoutput 'bool'
| `-ParmVarDecl 0x5575658ecf18 <col:46, col:58> col:58 port 'const Router::Port &'
|-CXXMethodDecl 0x5575658ed0c0 <line:323:5, col:22> col:10 make_gports 'void ()'
|-CXXMethodDecl 0x5575658ed208 <line:324:5, line:326:5> line:324:16 ngports 'int (bool) const' inline
| |-ParmVarDecl 0x5575658ed170 <col:24, col:29> col:29 used isout 'bool'
| `-CompoundStmt 0x5575658f5fa0 <col:42, line:326:5>
|   `-ReturnStmt 0x5575658f5f90 <line:325:9, col:50>
|     `-ImplicitCastExpr 0x5575658f5f78 <col:16, col:50> 'int':'int' <LValueToRValue>
|       `-CXXMemberCallExpr 0x5575658f5f58 <col:16, col:50> 'const int':'const int' lvalue
|         `-MemberExpr 0x5575658f5f28 <col:16, col:45> '<bound member function type>' .back 0x55756586e5b8
|           `-ArraySubscriptExpr 0x5575658f5ea8 <col:16, col:43> 'const Vector<int>':'const Vector<int>' lvalue
|             |-ImplicitCastExpr 0x5575658f5e78 <col:16> 'const Vector<int> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5575658f5d90 <col:16> 'Vector<int> const[2]' lvalue ->_element_gport_offset 0x5575658d8478
|             |   `-CXXThisExpr 0x5575658f5d80 <col:16> 'const Router *' implicit this
|             `-ImplicitCastExpr 0x5575658f5e90 <col:38> 'bool' <LValueToRValue>
|               `-DeclRefExpr 0x5575658f5dc0 <col:38> 'bool' lvalue ParmVar 0x5575658ed170 'isout' 'bool'
|-CXXMethodDecl 0x5575658ed3d8 <line:327:5, col:55> col:16 gport 'int (bool, const Router::Port &) const' inline
| |-ParmVarDecl 0x5575658ed2c0 <col:22, col:27> col:27 isoutput 'bool'
| `-ParmVarDecl 0x5575658ed338 <col:37, col:49> col:49 port 'const Router::Port &'
|-CXXMethodDecl 0x5575658ed530 <line:329:5, col:47> col:9 used hard_home_thread_id 'int (const Element *) const'
| `-ParmVarDecl 0x5575658ed498 <col:29, col:44> col:44 e 'const Element *'
|-CXXMethodDecl 0x5575658ed7d8 <line:331:5, col:67> col:9 element_lerror 'int (ErrorHandler *, Element *, const char *, ...) const'
| |-ParmVarDecl 0x5575658ed5e8 <col:24, col:36> col:37 'ErrorHandler *'
| |-ParmVarDecl 0x5575658ed660 <col:39, col:46> col:47 'Element *'
| `-ParmVarDecl 0x5575658ed6e0 <col:49, col:59> col:60 'const char *'
|-CXXMethodDecl 0x5575658ed9b0 <line:334:5, col:40> col:10 initialize_handlers 'void (bool, bool)'
| |-ParmVarDecl 0x5575658ed8a0 <col:30> col:34 'bool'
| `-ParmVarDecl 0x5575658ed918 <col:36> col:40 'bool'
|-CXXMethodDecl 0x5575658edb38 <line:335:5, col:35> col:21 xhandler 'Handler *(int) const' inline
| `-ParmVarDecl 0x5575658eda78 <col:30> col:33 'int'
|-CXXMethodDecl 0x5575658eddd0 <line:336:5, col:60> col:9 find_ehandler 'int (int, const String &, bool) const'
| |-ParmVarDecl 0x5575658edbf8 <col:23> col:26 'int'
| |-ParmVarDecl 0x5575658edc70 <col:28, col:40> col:41 'const String &'
| `-ParmVarDecl 0x5575658edce8 <col:43, col:48> col:48 allow_star 'bool'
|-CXXMethodDecl 0x5575658edfe8 <line:337:5, col:70> col:27 fetch_handler 'Handler (const Element *, const String &)' static inline
| |-ParmVarDecl 0x5575658ede98 <col:41, col:54> col:55 'const Element *'
| `-ParmVarDecl 0x5575658edf10 <col:57, col:69> col:70 'const String &'
|-CXXMethodDecl 0x5575658ee1f8 <line:338:5, col:52> col:10 store_local_handler 'void (int, Handler &)'
| |-ParmVarDecl 0x5575658ee0b0 <col:30, col:34> col:34 eindex 'int'
| `-ParmVarDecl 0x5575658ee128 <col:42, col:51> col:51 h 'Handler &'
|-CXXMethodDecl 0x5575658ee378 <line:339:5, col:48> col:17 store_global_handler 'void (Handler &)' static
| `-ParmVarDecl 0x5575658ee2b8 <col:38, col:47> col:47 h 'Handler &'
|-CXXMethodDecl 0x5575658ee578 <line:340:5, col:72> col:24 store_handler 'void (const Element *, Handler &)' static inline
| |-ParmVarDecl 0x5575658ee430 <col:38, col:53> col:53 element 'const Element *'
| `-ParmVarDecl 0x5575658ee4a8 <col:62, col:71> col:71 h 'Handler &'
|-CXXMethodDecl 0x5575658ee750 <line:343:5, col:66> col:19 router_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5575658ee638 <col:39, col:48> col:48 e 'Element *'
| `-ParmVarDecl 0x5575658ee6b8 <col:51, col:57> col:57 user_data 'void *'
|-CXXMethodDecl 0x5575658f21c0 <line:344:5, col:103> col:16 router_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5575658f1fa0 <col:37, col:51> col:51 str 'const String &'
| |-ParmVarDecl 0x5575658f2018 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5575658f2098 <col:68, col:74> col:74 user_data 'void *'
| `-ParmVarDecl 0x5575658f2110 <col:85, col:99> col:99 errh 'ErrorHandler *'
|-FriendDecl 0x5575658f22a0 <line:347:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5575658f2300 <line:348:5, col:18> col:12 'class Task':'Task'
`-FriendDecl 0x5575658f2580 <line:349:5, col:44> col:25
  `-CXXMethodDecl 0x5575658f2480 parent 0x5575657209b0 prev 0x5575657305d8 <col:5, col:44> col:25 set_nports 'int (int, int)'
    |-ParmVarDecl 0x5575658f2360 <col:36> col:39 'int'
    `-ParmVarDecl 0x5575658f23e0 <col:41> col:44 'int'

Layout: <CGRecordLayout
  LLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  NonVirtualBaseLLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:2 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657209b0 prev 0x557565720730 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557565720aa8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x557565720b38 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x557565720b98 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x557565720c88 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x557565720d88 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x557565720f58 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x557565720e08 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x557565720e80 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5575657210e8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x557565721020 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x557565721190 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5575657212c8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x557565721200 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x557565721468 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5575657213a8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x557565721608 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x557565721548 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5575657216b0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5575657217b0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x557565721890 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565721790 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x557565721770 <col:26> 'int' 1
| `-EnumConstantDecl 0x557565721840 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5575657218a8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557565721820 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x557565721800 <col:44> 'int' 2
|-CXXMethodDecl 0x5575657219f0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5575657218d8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x557565721958 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x557565721b48 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x557565721ab8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x557565721d88 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x557565721c08 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x557565721c80 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x557565721e38 <col:20>
| `-OptimizeNoneAttr 0x557565721e90 <col:30>
|-CXXMethodDecl 0x557565721f98 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x557565721ed0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x557565722040 <col:20>
| `-OptimizeNoneAttr 0x557565722098 <col:30>
|-CXXMethodDecl 0x5575657220e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5575657221b0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5575657222c8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x557565722350 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x5575657223d8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x557565722460 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5575657224e8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x557565722578 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x557565722638 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5575657226c0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x557565722748 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5575657227d0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x557565722858 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5575657228e0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x557565722970 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x557565722a30 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x557565722ac0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x557565722c10 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x557565722b78 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x557565722da0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x557565722cd0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x557565723050 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x557565722e58 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x557565722ed8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x557565722f58 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x557565723108 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x557565723210 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5575657234a0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657231f0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5575657231d0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5575657232a0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5575657234b8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565723280 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x557565723260 <col:32> 'int' 20
| |-EnumConstantDecl 0x557565723330 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5575657234d0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565723310 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5575657232f0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5575657233c0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5575657234e8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657233a0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x557565723380 <col:35> 'int' 100
| `-EnumConstantDecl 0x557565723450 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x557565723500 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557565723430 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x557565723410 <col:32> 'int' 2000
|-CXXMethodDecl 0x557565723540 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x557565723980 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5575657237f0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x557565723868 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557565723a50 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x557565723bd0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x557565723b00 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557565723dd8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x557565723c88 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x557565723d00 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557565723ed8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x557565723f78 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x557565724040 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5575657240d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x557565724300 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657240b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x557565724090 <col:36> 'int' EnumConstant 0x557565724040 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x557565724120 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x557565724170 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5575657241c0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x557565724210 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x557565724260 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5575657242b0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5575657243e8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x557565724328 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5575657244b0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x557565724570 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x557565724630 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5575657246f0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x557565724808 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5575657248d0 <line:117:5, col:25> col:16 used eindex 'int () const' inline
|-CXXMethodDecl 0x557565724a50 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x557565724980 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x557565724b78 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x557565724d78 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x557565724c28 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x557565724ca8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5575657326c8 <col:54, line:127:5>
|   |-ParenExpr 0x557565732578 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x557565732548 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x557565732238 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x557565732210 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5575657321f8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5575657321e0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5575657321b0 <col:31> 'Router *' lvalue ->_router 0x557565730090
|   |   |         `-CXXThisExpr 0x5575657321a0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x557565732298 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565732278 <col:48> 'int' 0
|   |   `-CallExpr 0x5575657324a8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x557565732490 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565732470 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5575657324e8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565732308 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x557565732500 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565732328 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x557565732518 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565732360 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x557565732530 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565732458 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565732440 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5575657323f8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x557565732610 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5575657325a8 <col:9> 'Router *' lvalue ->_router 0x557565730090
|   | | `-CXXThisExpr 0x557565732598 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5575657325f8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5575657325d8 <col:19> 'Router *' lvalue ParmVar 0x557565724c28 'r' 'Router *'
|   `-BinaryOperator 0x5575657326a8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x557565732640 <col:9> 'int' lvalue ->_eindex 0x5575657300f8
|     | `-CXXThisExpr 0x557565732630 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x557565732690 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x557565732670 <col:19> 'int' lvalue ParmVar 0x557565724ca8 'eindex' 'int'
|-CXXMethodDecl 0x557565724f00 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x557565724e38 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x557565724fd0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x557565725098 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x557565725138 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x557565725388 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x557565725200 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x557565725280 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x557565725438 <col:20>
| `-OptimizeNoneAttr 0x557565725490 <col:30>
|-CXXMethodDecl 0x557565725598 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5575657254d0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x557565725640 <col:20>
| `-OptimizeNoneAttr 0x557565725698 <col:30>
|-CXXMethodDecl 0x557565725768 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5575657256d8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x557565725810 <col:20>
| `-OptimizeNoneAttr 0x557565725868 <col:30>
|-CXXMethodDecl 0x5575657259f8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5575657258a0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x557565725920 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x557565725b88 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x557565725ac0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x557565725cd8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x557565725c48 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x557565725e28 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x557565725d98 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x557565725f78 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x557565725ee8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x557565726238 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x557565726030 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5575657260b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x557565726158 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x557565726310 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5575657263d0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5575657266a0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x557565726550 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5575657265c8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5575657267c8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5575657269a0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x557565726880 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x557565726900 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x557565726b88 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x557565726a68 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x557565726ae8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x557565726ef8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x557565726c48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x557565726cc0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x557565726d40 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x557565731cb0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x557565731c90 <col:106> 'int' 0
| `-ParmVarDecl 0x557565726db8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557565731ce8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557565731cc8 <col:126> 'int' 0
|-CXXMethodDecl 0x557565727298 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557565726fc8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x557565727060 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5575657270e0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x557565727158 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557565731d20 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557565731d00 <col:114> 'int' 0
|-CXXMethodDecl 0x557565727628 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557565727370 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5575657273e8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x557565727468 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x557565731d38 <col:96> 'int' 0
| `-ParmVarDecl 0x5575657274e0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557565731d78 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557565731d58 <col:116> 'int' 0
|-CXXMethodDecl 0x5575657279a8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5575657276f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x557565727770 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5575657277f0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x557565731db0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x557565731d90 <col:109> 'int' 0
| `-ParmVarDecl 0x557565727868 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557565731de8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557565731dc8 <col:129> 'int' 0
|-CXXMethodDecl 0x557565727d28 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557565727a78 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x557565727af0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x557565727b70 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x557565727be8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557565731e20 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557565731e00 <col:117> 'int' 0
|-CXXMethodDecl 0x5575657280b8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557565727e00 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x557565727e78 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x557565727ef8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x557565731e38 <col:99> 'int' 0
| `-ParmVarDecl 0x557565727f70 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557565731e78 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557565731e58 <col:119> 'int' 0
|-CXXMethodDecl 0x5575657284d8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x557565728188 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x557565728208 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x557565728280 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x557565728300 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x557565731eb0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x557565731e90 <col:108> 'int' 0
| `-ParmVarDecl 0x557565728380 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x557565731ee8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x557565731ec8 <col:141> 'int' 0
|-CXXMethodDecl 0x5575657288f8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5575657285b0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x557565728630 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5575657286a8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x557565728728 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5575657287a8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x557565731f00 <col:121> 'int' 0
|-CXXMethodDecl 0x557565728d28 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5575657289d8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x557565728a58 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x557565728ad0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x557565728b50 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x557565731f20 <col:98> 'int' 0
| `-ParmVarDecl 0x557565728bd0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x557565731f40 <col:123> 'int' 0
|-CXXMethodDecl 0x557565728ff0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x557565728e00 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x557565728e80 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x557565728f00 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x557565731f60 <col:80> 'int' 0
|-EnumDecl 0x5575657290a8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5575657291b0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557565729440 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565729190 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x557565729170 <col:42> 'int' 1
| |-EnumConstantDecl 0x557565729240 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557565729458 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565729220 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x557565729200 <col:40> 'int' 2
| |-EnumConstantDecl 0x5575657292d0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557565729470 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657292b0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x557565729290 <col:44> 'int' 4
| |-EnumConstantDecl 0x557565729360 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557565729488 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565729340 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x557565729320 <col:36> 'int' 7
| `-EnumConstantDecl 0x5575657293f0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5575657294a0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575657293d0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5575657293b0 <col:34> 'int' 6
|-CXXMethodDecl 0x557565729758 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5575657294c8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x557565729568 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5575657295e8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x557565729660 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x557565732018 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x557565732000 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x557565731fe8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x557565731fc8 <col:98, col:105> 'String' (CXXTemporary 0x557565731fc8)
|           `-CXXTemporaryObjectExpr 0x557565731f90 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5575657299f8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x557565729828 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5575657298a0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x557565729918 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5575657320c8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5575657320b0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x557565732098 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x557565732078 <col:94, col:101> 'String' (CXXTemporary 0x557565732078)
| |         `-CXXTemporaryObjectExpr 0x557565732040 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5575657328b0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x557565732828 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5575657327f8 <col:9> '<bound member function type>' ->add_task_handlers 0x557565729758
|     | `-CXXThisExpr 0x5575657327e8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x557565732868 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x557565732768 <col:27> 'Task *' lvalue ParmVar 0x557565729828 'task' 'Task *'
|     |-ImplicitCastExpr 0x557565732880 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x557565732788 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5575657298a0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x557565732898 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5575657327a8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5575657293f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5575657327c8 <col:62> 'const String' lvalue ParmVar 0x557565729918 'prefix' 'const String &'
|-CXXMethodDecl 0x557565729c08 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x557565729ac0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x557565729b38 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x557565732178 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x557565732160 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x557565732148 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x557565732128 <col:70, col:77> 'String' (CXXTemporary 0x557565732128)
| |         `-CXXTemporaryObjectExpr 0x5575657320f0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x557565732a88 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x557565732a00 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5575657329d0 <col:9> '<bound member function type>' ->add_task_handlers 0x557565729758
|     | `-CXXThisExpr 0x5575657329c0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x557565732a40 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x557565732940 <col:27> 'Task *' lvalue ParmVar 0x557565729ac0 'task' 'Task *'
|     |-ImplicitCastExpr 0x557565732a58 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x557565732960 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x557565732a70 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x557565732980 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5575657293f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5575657329a0 <col:57> 'const String' lvalue ParmVar 0x557565729b38 'prefix' 'const String &'
|-CXXMethodDecl 0x557565729ee8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x557565729cd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x557565729d50 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x557565729dc8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55756572a198 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x557565729fb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572a038 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572a0b8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55756572a488 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55756572a268 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572a2e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572a360 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55756572a738 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55756572a558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572a5d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572a658 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55756572a9e8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55756572a808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572a888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572a908 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55756572ac98 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55756572aab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572ab38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572abb0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55756572af48 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55756572ad68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572ade8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572ae68 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55756572b258 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55756572b070 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572b0f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572b170 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55756572b538 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55756572b328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572b3a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572b450 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55756572b818 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55756572b608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572b688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572b730 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55756572ba80 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55756572b8e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55756572b968 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55756572b9e0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55756572bd28 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55756572bb50 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55756572bbd0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55756572bc48 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55756572bfd8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55756572bdf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572be78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572bef8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55756572c288 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55756572c0a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572c128 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572c1a0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55756572c538 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55756572c358 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572c3d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572c450 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55756572c808 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55756572c608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572c688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55756572c728 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55756572cb38 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55756572c8d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55756572c958 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55756572c9d0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55756572ca48 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557565732190 <col:93> 'bool' false
|-CXXMethodDecl 0x55756572cd20 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55756572cc08 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55756572cc88 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55756572cef8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55756572cde0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55756572ce60 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55756572d1d8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55756572cfb8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55756572d030 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55756572d0b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55756572d128 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55756572d4c8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55756572d2a8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55756572d320 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55756572d3a0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55756572d418 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55756572d700 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55756572d5a0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55756572d620 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55756572d8e8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55756572d7c8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55756572d848 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55756572d998 prev 0x557565725138 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55756572da90 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55756572db20 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55756572db98 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55756572dc58 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55756572dd20 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55756572de98 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55756572ddd0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55756572df40 <col:24>
| | `-OptimizeNoneAttr 0x55756572df98 <col:34>
| |-CXXMethodDecl 0x55756572dfe0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55756572e298 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55756572e090 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55756572e108 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55756572e188 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55756572e350 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55756572e388 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55756572e3f0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55756572e478 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55756572e798 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55756572e530 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55756572e5a8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55756572e620 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55756572e6a0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55756572e8b0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x557565736228 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x557565736228
| | `-ParmVarDecl 0x557565736338 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5575657363d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5575657363d8
| | `-ParmVarDecl 0x5575657364e8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x557565924b10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55756572e928 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55756572e9c8 <col:38> "" ""
|-CXXMethodDecl 0x55756572ea58 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55756572eaf8 <col:44> "" ""
|-AccessSpecDecl 0x55756572eb68 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55756572eb90 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55756572ec90 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55756572ece0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55756572ec70 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55756572ec50 <col:27> 'int' 4
|-FieldDecl 0x55756572ed98 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55756572ef48 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55756572f000 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x557565730090 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5575657300f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x557565730248 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x557565730188 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5575657303f8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x557565730308 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5575657305d8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5575657304b8 <col:20> col:23 'int'
| `-ParmVarDecl 0x557565730538 <col:25> col:28 'int'
|-CXXMethodDecl 0x557565730880 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5575657306a0 <col:23> col:26 'int'
| |-ParmVarDecl 0x557565730720 <col:28> col:31 'int'
| `-ParmVarDecl 0x557565730798 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x557565730938 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x557565730a00 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x557565730a50 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x557565730aa0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x557565730c80 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x557565730b30 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x557565730ba8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557565730f28 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x557565730d48 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x557565730dc8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x557565730e40 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x557565731148 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x557565730ff8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x557565731078 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x557565731480 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x557565731208 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x557565731288 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x557565731300 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x557565731380 <col:57> col:60 'int'
|-CXXMethodDecl 0x557565731668 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x557565731550 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5575657315d0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5575657317b8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x557565731728 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x557565731b38 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x557565731878 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5575657318f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x557565731970 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5575657319f0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x557565731c50 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union NotifierSignal::vmvalue
         0 |   class atomic_uint32_t * v1
         0 |   struct NotifierSignal::vmpair * vm
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class NotifierSignal
         0 |   union NotifierSignal::vmvalue _v
         0 |     class atomic_uint32_t * v1
         0 |     struct NotifierSignal::vmpair * vm
         8 |   uint32_t _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Notifier
         0 |   (Notifier vtable pointer)
         8 |   class NotifierSignal _signal
         8 |     union NotifierSignal::vmvalue _v
         8 |       class atomic_uint32_t * v1
         8 |       struct NotifierSignal::vmpair * vm
        16 |     uint32_t _mask
        24 |   enum Notifier::SearchOp _search_op
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct NotifierSignal::vmpair
         0 |   class atomic_uint32_t * value
         8 |   uint32_t mask
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657da0a8 <../dummy_inc/click/notifier.hh:50:5, line:53:5> line:50:12 referenced struct vmpair definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575657da1c8 <col:5, col:12> col:12 implicit struct vmpair
|-FieldDecl 0x5575657da268 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
|-FieldDecl 0x5575657da2c8 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x5575657e3768 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x5575657e3768

Layout: <CGRecordLayout
  LLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  NonVirtualBaseLLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657da330 <../dummy_inc/click/notifier.hh:54:5, line:57:5> line:54:11 referenced union vmvalue definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575657da448 <col:5, col:11> col:11 implicit union vmvalue
|-FieldDecl 0x5575657da4e8 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
|-FieldDecl 0x5575657da578 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
|-CXXConstructorDecl 0x5575657e2300 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5575657e2738 <col:11>
|-CXXConstructorDecl 0x5575657e2408 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x5575657e2408
| `-ParmVarDecl 0x5575657e2518 <col:11> col:11 'const NotifierSignal::vmvalue &'
|-CXXConstructorDecl 0x5575657e25b8 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x5575657e25b8
| `-ParmVarDecl 0x5575657e26c8 <col:11> col:11 'NotifierSignal::vmvalue &&'
`-CXXDestructorDecl 0x5575657e3430 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.NotifierSignal::vmvalue" = type { %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657d7fe0 prev 0x557565720680 <../dummy_inc/click/notifier.hh:12:1, line:71:1> line:12:7 referenced class NotifierSignal definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575657d80d8 <col:1, col:7> col:7 implicit referenced class NotifierSignal
|-AccessSpecDecl 0x5575657d8168 <line:13:3, col:9> col:3 public
|-TypedefDecl 0x5575657d8298 <line:14:5, col:61> col:36 referenced unspecified_bool_type 'bool (NotifierSignal::*)() const'
| `-MemberPointerType 0x5575657d8210 'bool (NotifierSignal::*)() const'
|   |-RecordType 0x557565720710 'NotifierSignal'
|   | `-CXXRecord 0x5575657d7fe0 'NotifierSignal'
|   `-ParenType 0x5575657d81b0 'bool () const' sugar
|     `-FunctionProtoType 0x557565266d90 'bool () const' const cdecl
|       `-BuiltinType 0x5575651ba2f0 'bool'
|-CXXConstructorDecl 0x5575657d8328 <line:16:5, col:27> col:12 NotifierSignal 'void ()' inline
|-CXXConstructorDecl 0x5575657d8568 <line:17:5, col:64> col:12 used NotifierSignal 'void (atomic_uint32_t *, uint32_t)' inline
| |-ParmVarDecl 0x5575657d83e0 <col:27, col:44> col:44 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x5575657d8458 <col:51, col:60> col:60 mask 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5575657d8718 <line:18:5, col:50> col:12 used NotifierSignal 'void (const NotifierSignal &)' inline
| `-ParmVarDecl 0x5575657d8658 <col:27, col:49> col:49 x 'const NotifierSignal &'
|-CXXDestructorDecl 0x5575657d8810 <line:19:5, col:28> col:12 used ~NotifierSignal 'void () noexcept' inline
|-CXXMethodDecl 0x5575657d8938 <line:21:5, col:46> col:34 idle_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5575657d89f8 <line:22:5, col:46> col:34 busy_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5575657d8ab8 <line:23:5, col:53> col:34 overderived_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5575657d8b78 <line:24:5, col:55> col:34 used uninitialized_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5575657d8c68 <line:26:5, col:26> col:17 used active 'bool () const' inline
|-CXXConversionDecl 0x5575657d8dd8 <line:27:5, col:45> col:12 operator bool (NotifierSignal::*)() const 'NotifierSignal::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5575657d8f58 <line:29:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x5575657d8e98 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x5575657d9020 <line:31:5, col:24> col:17 idle 'bool () const' inline
|-CXXMethodDecl 0x5575657d90e0 <line:32:5, col:24> col:17 busy 'bool () const' inline
|-CXXMethodDecl 0x5575657d91a0 <line:33:5, col:31> col:17 overderived 'bool () const' inline
|-CXXMethodDecl 0x5575657d9260 <line:34:5, col:31> col:17 used initialized 'bool () const' inline
|-FriendDecl 0x5575657d9518 <line:36:5, col:76> col:17
| `-FunctionDecl 0x5575657d9458 parent 0x5575651ba278 <col:5, col:76> col:17 used operator== 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x5575657d9310 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x5575657d9388 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-FriendDecl 0x5575657d9738 <line:37:5, col:76> col:17
| `-FunctionDecl 0x5575657d9678 parent 0x5575651ba278 <col:5, col:76> col:17 operator!= 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x5575657d9568 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x5575657d95e0 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-CXXMethodDecl 0x5575657d9878 <line:39:5, col:54> col:21 operator= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x5575657d9788 <col:31, col:53> col:53 x 'const NotifierSignal &'
|-CXXMethodDecl 0x5575657d99c0 <line:40:5, col:55> col:21 used operator+= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x5575657d9930 <col:32, col:54> col:54 x 'const NotifierSignal &'
|-FriendDecl 0x5575657d9c88 <line:41:5, col:78> col:27
| `-FunctionDecl 0x5575657d9bc8 parent 0x5575651ba278 <col:5, col:78> col:27 operator+ 'NotifierSignal (NotifierSignal, const NotifierSignal &)'
|   |-ParmVarDecl 0x5575657d9a78 <col:37, col:52> col:52 a 'NotifierSignal' destroyed
|   `-ParmVarDecl 0x5575657d9af0 <col:55, col:77> col:77 b 'const NotifierSignal &'
|-CXXMethodDecl 0x5575657d9d98 <line:43:5, col:39> col:17 used swap 'void (NotifierSignal &)' inline
| `-ParmVarDecl 0x5575657d9cd8 <col:22, col:38> col:38 x 'NotifierSignal &'
|-CXXMethodDecl 0x5575657d9f18 <line:45:5, col:36> col:12 unparse 'String (Router *) const'
| `-ParmVarDecl 0x5575657d9e50 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x5575657d9fe0 <line:47:5, col:35> col:17 static_initialize 'void ()' static
|-AccessSpecDecl 0x5575657da080 <line:49:3, col:10> col:3 private
|-CXXRecordDecl 0x5575657da0a8 <line:50:5, line:53:5> line:50:12 referenced struct vmpair definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575657da1c8 <col:5, col:12> col:12 implicit struct vmpair
| |-FieldDecl 0x5575657da268 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
| |-FieldDecl 0x5575657da2c8 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x5575657e3768 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x5575657e3768
|-CXXRecordDecl 0x5575657da330 <line:54:5, line:57:5> line:54:11 referenced union vmvalue definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575657da448 <col:5, col:11> col:11 implicit union vmvalue
| |-FieldDecl 0x5575657da4e8 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
| |-FieldDecl 0x5575657da578 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
| |-CXXConstructorDecl 0x5575657e2300 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5575657e2738 <col:11>
| |-CXXConstructorDecl 0x5575657e2408 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x5575657e2408
| | `-ParmVarDecl 0x5575657e2518 <col:11> col:11 'const NotifierSignal::vmvalue &'
| |-CXXConstructorDecl 0x5575657e25b8 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x5575657e25b8
| | `-ParmVarDecl 0x5575657e26c8 <col:11> col:11 'NotifierSignal::vmvalue &&'
| `-CXXDestructorDecl 0x5575657e3430 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial
|-FieldDecl 0x5575657da5f0 <line:59:5, col:13> col:13 referenced _v 'NotifierSignal::vmvalue'
|-FieldDecl 0x5575657da650 <line:60:5, col:14> col:14 referenced _mask 'uint32_t':'unsigned int'
|-EnumDecl 0x5575657da6a0 <line:62:5, line:65:5> line:62:5
| |-EnumConstantDecl 0x5575657da7a0 <line:63:2, col:14> col:2 referenced true_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x5575657da9a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657da780 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5575657da760 <col:14> 'int' 1
| |-EnumConstantDecl 0x5575657da830 <col:17, col:30> col:17 referenced false_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x5575657da9b8 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657da810 <col:30> 'int' Int: 2
| |     `-IntegerLiteral 0x5575657da7f0 <col:30> 'int' 2
| |-EnumConstantDecl 0x5575657da8c0 <col:33, col:52> col:33 referenced overderived_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x5575657da9d0 <col:52> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657da8a0 <col:52> 'int' Int: 4
| |     `-IntegerLiteral 0x5575657da880 <col:52> 'int' 4
| `-EnumConstantDecl 0x5575657da950 <line:64:2, col:23> col:2 referenced uninitialized_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
|   `-ImplicitCastExpr 0x5575657da9e8 <col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575657da930 <col:23> 'int' Int: 8
|       `-IntegerLiteral 0x5575657da910 <col:23> 'int' 8
|-VarDecl 0x5575657daa10 <line:66:5, col:28> col:28 used static_value 'atomic_uint32_t' static
|-CXXMethodDecl 0x5575657dab18 <line:68:5, col:48> col:10 used hard_assign_vm 'void (const NotifierSignal &)'
| `-ParmVarDecl 0x5575657daa88 <col:25, col:47> col:47 x 'const NotifierSignal &'
|-CXXMethodDecl 0x5575657dace0 <line:69:5, col:63> col:10 hard_derive_one 'void (atomic_uint32_t *, uint32_t)'
| |-ParmVarDecl 0x5575657dabd0 <col:26, col:43> col:43 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x5575657dac48 <col:50, col:59> col:59 mask 'uint32_t':'unsigned int'
`-CXXMethodDecl 0x5575657daf18 <line:70:5, col:61> col:17 used hard_equals 'bool (const NotifierSignal::vmpair *, const NotifierSignal::vmpair *)' static
  |-ParmVarDecl 0x5575657dadc8 <col:29, col:43> col:43 a 'const NotifierSignal::vmpair *'
  `-ParmVarDecl 0x5575657dae40 <col:46, col:60> col:60 b 'const NotifierSignal::vmpair *'

Layout: <CGRecordLayout
  LLVMType:%class.NotifierSignal = type <{ %"union.NotifierSignal::vmvalue", i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.NotifierSignal.base = type <{ %"union.NotifierSignal::vmvalue", i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657dafc8 <../dummy_inc/click/notifier.hh:73:1, line:130:1> line:73:7 referenced class Notifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5575657db0e8 <col:1, col:7> col:7 implicit referenced class Notifier
|-AccessSpecDecl 0x5575657db178 <col:18, col:24> col:18 public
|-EnumDecl 0x5575657db1a0 <line:75:5, col:76> col:10 referenced SearchOp
| |-EnumConstantDecl 0x5575657db2a0 <col:21, col:35> col:21 referenced SEARCH_STOP 'Notifier::SearchOp'
| | `-ImplicitCastExpr 0x5575657db390 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575657db280 <col:35> 'int' Int: 0
| |     `-IntegerLiteral 0x5575657db260 <col:35> 'int' 0
| |-EnumConstantDecl 0x5575657db2f0 <col:38> col:38 SEARCH_CONTINUE 'Notifier::SearchOp'
| `-EnumConstantDecl 0x5575657db340 <col:55> col:55 SEARCH_CONTINUE_WAKE 'Notifier::SearchOp'
|-TypedefDecl 0x5575657db5d8 <line:76:5, col:53> col:20 referenced callback_type 'void (*)(void *, Notifier *)'
| `-PointerType 0x5575657db570 'void (*)(void *, Notifier *)'
|   `-ParenType 0x5575657db510 'void (void *, Notifier *)' sugar
|     `-FunctionProtoType 0x5575657db4d0 'void (void *, Notifier *)' cdecl
|       |-BuiltinType 0x5575651ba2d0 'void'
|       |-PointerType 0x5575651baad0 'void *'
|       | `-BuiltinType 0x5575651ba2d0 'void'
|       `-PointerType 0x5575657db430 'Notifier *'
|         `-RecordType 0x5575657db060 'Notifier'
|           `-CXXRecord 0x5575657dafc8 'Notifier'
|-CXXConstructorDecl 0x5575657db718 <line:78:5, col:46> col:12 Notifier 'void (Notifier::SearchOp)' inline
| `-ParmVarDecl 0x5575657db640 <col:21, col:35> col:30 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x5575657e0508 <col:35> 'Notifier::SearchOp' EnumConstant 0x5575657db2a0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXConstructorDecl 0x5575657db928 <line:79:5, col:76> col:12 Notifier 'void (const NotifierSignal &, Notifier::SearchOp)' inline
| |-ParmVarDecl 0x5575657db7d8 <col:21, col:43> col:43 signal 'const NotifierSignal &'
| `-ParmVarDecl 0x5575657db850 <col:51, col:65> col:60 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x5575657e0528 <col:65> 'Notifier::SearchOp' EnumConstant 0x5575657db2a0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x5575657dba28 <line:80:5, col:23> col:13 ~Notifier 'void () noexcept' virtual
|-CXXMethodDecl 0x5575657dbb58 <line:83:5, line:85:5> line:83:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5575657e05e8 <col:37, line:85:5>
|   `-ReturnStmt 0x5575657e05d8 <line:84:2, col:29>
|     `-CXXMemberCallExpr 0x5575657e05b8 <col:9, col:29> 'bool'
|       `-MemberExpr 0x5575657e0588 <col:9, col:17> '<bound member function type>' .initialized 0x5575657d9260
|         `-MemberExpr 0x5575657e0558 <col:9> 'const NotifierSignal' lvalue ->_signal 0x5575657dff28
|           `-CXXThisExpr 0x5575657e0548 <col:9> 'const Notifier *' implicit this
|-CXXMethodDecl 0x5575657dbd60 <line:87:5, col:52> col:9 initialize 'int (const char *, Router *)'
| |-ParmVarDecl 0x5575657dbc10 <col:20, col:32> col:32 name 'const char *'
| `-ParmVarDecl 0x5575657dbc88 <col:38, col:46> col:46 router 'Router *'
|-CXXMethodDecl 0x5575657dbe58 <line:89:5, col:43> col:34 signal 'const NotifierSignal &() const' inline
|-CXXMethodDecl 0x5575657dbf48 <line:90:5, col:33> col:21 search_op 'Notifier::SearchOp () const' inline
|-CXXMethodDecl 0x5575657dc008 <line:92:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5575657dc148 <line:94:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x5575657dc0b8 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x5575657dc210 <line:95:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x5575657dd130 <line:96:5, col:23> col:17 sleep 'void ()' inline
|-CXXMethodDecl 0x5575657dd3a0 <line:98:5, col:71> col:17 used add_activate_callback 'int (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x5575657dd200 <col:39, col:53> col:53 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657dd280 <col:56, col:62> col:62 user_data 'void *'
|-CXXMethodDecl 0x5575657dd5f8 <line:99:5, col:75> col:18 used remove_activate_callback 'void (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x5575657dd460 <col:43, col:57> col:57 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657dd4e0 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x5575657dd780 <line:100:5, col:39> col:16 add_listener 'int (Task *)' inline
| `-ParmVarDecl 0x5575657dd6b8 <col:29, col:35> col:35 task 'Task *'
|-CXXMethodDecl 0x5575657dd8c8 <line:101:5, col:43> col:17 remove_listener 'void (Task *)' inline
| `-ParmVarDecl 0x5575657dd838 <col:33, col:39> col:39 task 'Task *'
|-CXXMethodDecl 0x5575657dda50 <line:102:5, col:59> col:16 add_dependent_signal 'int (NotifierSignal *)' inline
| `-ParmVarDecl 0x5575657dd980 <col:37, col:53> col:53 signal 'NotifierSignal *'
|-CXXMethodDecl 0x5575657ddbc8 <line:103:5, col:63> col:17 remove_dependent_signal 'void (NotifierSignal *)' inline
| `-ParmVarDecl 0x5575657ddb08 <col:41, col:57> col:57 signal 'NotifierSignal *'
|-VarDecl 0x5575657ddc90 <line:105:5, col:38> col:23 EMPTY_NOTIFIER 'const char []' static
|-VarDecl 0x5575657ddd18 <line:106:5, col:37> col:23 FULL_NOTIFIER 'const char []' static
|-CXXMethodDecl 0x5575657ddee8 <line:108:5, col:76> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x5575657ddd90 <col:56, col:65> col:65 e 'Element *'
| `-ParmVarDecl 0x5575657dde10 <col:68, col:72> col:72 port 'int'
|-CXXMethodDecl 0x5575657de188 <line:109:5, col:88> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x5575657ddfa8 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5575657de028 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x5575657de0a0 <col:78, col:84> col:84 task 'Task *'
|-CXXMethodDecl 0x5575657de428 <line:110:5, col:106> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x5575657de250 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5575657de2d0 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x5575657de348 <col:78, col:88> col:88 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x5575657de7a8 <line:111:5, col:103> col:27 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x5575657de4f0 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x5575657de570 <col:61, col:65> col:65 port 'int'
| |-ParmVarDecl 0x5575657de5e8 <col:71, col:85> col:85 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657de668 <col:88, col:94> col:94 user_data 'void *'
|-CXXMethodDecl 0x5575657de990 <line:113:5, col:77> col:34 used downstream_full_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x5575657de878 <col:57, col:66> col:66 e 'Element *'
| `-ParmVarDecl 0x5575657de8f8 <col:69, col:73> col:73 port 'int'
|-CXXMethodDecl 0x5575657debe8 <line:114:5, col:89> col:34 downstream_full_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x5575657dea50 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5575657dead0 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x5575657deb48 <col:79, col:85> col:85 task 'Task *'
|-CXXMethodDecl 0x5575657dee48 <line:115:5, col:107> col:34 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x5575657decb0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5575657ded30 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x5575657deda8 <col:79, col:89> col:89 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x5575657df130 <line:116:5, col:104> col:27 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x5575657def10 <col:50, col:59> col:59 e 'Element *'
| |-ParmVarDecl 0x5575657def90 <col:62, col:66> col:66 port 'int'
| |-ParmVarDecl 0x5575657df008 <col:72, col:86> col:86 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657df088 <col:89, col:95> col:95 user_data 'void *'
|-CXXMethodDecl 0x5575657df3e8 <line:118:5, col:109> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x5575657df200 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5575657df280 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x5575657df300 <col:78> col:81 'int'
| `-DeprecatedAttr 0x5575657df4a0 <col:98> "" ""
|-CXXMethodDecl 0x5575657df788 <line:119:5, col:121> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x5575657df520 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5575657df5a0 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x5575657df620 <col:78> col:81 'int'
| |-ParmVarDecl 0x5575657df698 <col:83, col:92> col:93 'Notifier *'
| `-DeprecatedAttr 0x5575657df848 <col:110> "" ""
|-CXXMethodDecl 0x5575657dfa68 <line:120:5, col:110> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x5575657df8c8 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5575657df948 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x5575657df9c8 <col:79> col:82 'int'
| `-DeprecatedAttr 0x5575657dfb20 <col:99> "" ""
|-CXXMethodDecl 0x5575657dfdc0 <line:121:5, col:122> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x5575657dfba0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5575657dfc20 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x5575657dfca0 <col:79> col:82 'int'
| |-ParmVarDecl 0x5575657dfd18 <col:84, col:93> col:94 'Notifier *'
| `-DeprecatedAttr 0x5575657dfe80 <col:111> "" ""
|-AccessSpecDecl 0x5575657dfef0 <line:123:3, col:10> col:3 private
|-FieldDecl 0x5575657dff28 <line:125:5, col:20> col:20 referenced _signal 'NotifierSignal'
|-FieldDecl 0x5575657dff88 <line:126:5, col:14> col:14 referenced _search_op 'Notifier::SearchOp'
|-CXXMethodDecl 0x5575657e0100 <line:128:5, col:61> col:17 used dependent_signal_callback 'void (void *, Notifier *)' static
| |-ParmVarDecl 0x5575657dfff0 <col:43, col:48> col:49 'void *'
| `-ParmVarDecl 0x5575657e0068 <col:51, col:60> col:61 'Notifier *'
|-CXXConstructorDecl 0x5575657e01d8 <line:73:7> col:7 implicit Notifier 'void (const Notifier &)' inline default noexcept-unevaluated 0x5575657e01d8
| `-ParmVarDecl 0x5575657e02e8 <col:7> col:7 'const Notifier &'
`-CXXMethodDecl 0x5575657e0388 <col:7> col:7 implicit operator= 'Notifier &(const Notifier &)' inline default noexcept-unevaluated 0x5575657e0388
  `-ParmVarDecl 0x5575657e0498 <col:7> col:7 'const Notifier &'

Layout: <CGRecordLayout
  LLVMType:%class.Notifier = type <{ i32 (...)**, %class.NotifierSignal, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Notifier.base = type <{ i32 (...)**, %class.NotifierSignal, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ActiveNotifier
         0 |   class Notifier (primary base)
         0 |     (Notifier vtable pointer)
         8 |     class NotifierSignal _signal
         8 |       union NotifierSignal::vmvalue _v
         8 |         class atomic_uint32_t * v1
         8 |         struct NotifierSignal::vmpair * vm
        16 |       uint32_t _mask
        24 |     enum Notifier::SearchOp _search_op
        32 |   class Task * _listener1
        40 |   ActiveNotifier::task_or_signal_t * _listeners
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756573e2d0 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55756573e3e8 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x55756573e4b8 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x55756573e518 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x55756573e580 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x55756573e608 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x55756573e870 <col:16, line:46:5>
|   |-BinaryOperator 0x55756573e7b8 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x55756573e6d8 <col:9> 'TaskLink *' lvalue ->_prev 0x55756573e4b8
|   | | `-CXXThisExpr 0x55756573e6c8 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x55756573e7a0 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x55756573e780 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x55756573e718 <col:17> 'TaskLink *' lvalue ->_next 0x55756573e518
|   |     | `-CXXThisExpr 0x55756573e708 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x55756573e768 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x55756573e748 <col:25> 'int' 0
|   `-BinaryOperator 0x55756573e850 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x55756573e7e8 <col:9> 'unsigned int' lvalue ->_pass 0x55756573e580
|     | `-CXXThisExpr 0x55756573e7d8 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x55756573e838 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55756573e818 <col:17> 'int' 0
|-CXXConstructorDecl 0x5575657cada8 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x5575657cada8
| `-ParmVarDecl 0x5575657caeb8 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5575657caf58 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5575657caf58
| `-ParmVarDecl 0x5575657cb068 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x5575657cb258 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5575657cba58 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x5575657cba58
| `-ParmVarDecl 0x5575657cbb68 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x5575657cbbd8 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x5575657cbbd8
  `-ParmVarDecl 0x5575657cbce8 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656a1998 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5575656a1ac8 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x5575656a1b28 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x5575656a1b88 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5575657d1f68 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5575657d2040 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5575657d22f8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5575657d22f8
| `-ParmVarDecl 0x5575657d2408 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x5575657d24a8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5575657d24a8
  `-ParmVarDecl 0x5575657d25b8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656a17e8 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575656a1908 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x5575656a1998 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5575656a1ac8 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x5575656a1b28 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x5575656a1b88 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5575657d1f68 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5575657d2040 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5575657d22f8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5575657d22f8
| | `-ParmVarDecl 0x5575657d2408 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x5575657d24a8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5575657d24a8
|   `-ParmVarDecl 0x5575657d25b8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x5575656a1c48 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x5575656a1ca8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x5575656a1c48 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5575656a1ac8 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x5575656a1d00 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x5575656a1c48 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5575656a1b28 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x5575656a1d58 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x5575656a1c48 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5575656a1b88 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x5575656a1db0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5575657d1e78 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5575657d27d8 <col:11>
|-CXXConstructorDecl 0x5575657d2148 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5575657d2148
| `-ParmVarDecl 0x5575657d2258 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x5575657d2658 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5575657d2658
| `-ParmVarDecl 0x5575657d2768 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x557565924bf0 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656b92e0 prev 0x5575656b0120 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575656b93d8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5575656b9478 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5575656c0240 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5575656c0628 <col:11>
|-CXXConstructorDecl 0x5575656c0320 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5575656c0408 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5575656c0d70 <col:11>
|-CXXConstructorDecl 0x5575656c04a8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5575656c05b8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5575656c25c8 <col:11>
|-CXXDestructorDecl 0x5575656c18d8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5575653c8488 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5575653c8598 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5575653c8e60 <col:11>
|   `-ReturnStmt 0x5575653c8e50 <col:11>
|     `-UnaryOperator 0x5575653c8e38 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5575653c8e28 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5575653c8608 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5575653c8718 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x55756575ad00 <col:11>
    `-ReturnStmt 0x55756575acf0 <col:11>
      `-UnaryOperator 0x55756575acd8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55756575acc8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656af2d8 prev 0x5575656aefe8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575656af3d0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5575656af460 <col:19, col:25> col:19 public
|-TypedefDecl 0x5575656af498 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x557565314440 'int32_t' sugar
|   |-Typedef 0x557565223268 'int32_t'
|   `-TypedefType 0x5575651fc3b0 '__int32_t' sugar
|     |-Typedef 0x5575651fbfc8 '__int32_t'
|     `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575656af500 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x557565314600 'int64_t' sugar
|   |-Typedef 0x5575652232d0 'int64_t'
|   `-TypedefType 0x5575651fc4d0 '__int64_t' sugar
|     |-Typedef 0x5575651fc0a8 '__int64_t'
|     `-BuiltinType 0x5575651ba390 'long'
|-EnumDecl 0x5575656af558 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5575656af6d0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5575656af6b0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5575656af688 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5575656af670 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5575656af640 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5575656af7c8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5575656af7a8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5575656af780 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5575656af768 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5575656af740 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5575656af720 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5575656af818 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5575656af920 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656afe70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656af900 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5575656af8e0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5575656af9b0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656afe88 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656af990 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5575656af970 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5575656afa40 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656afea0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656afa20 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5575656afa00 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5575656afad0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656afeb8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656afab0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5575656afa90 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5575656afb60 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656afed0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656afb40 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5575656afb20 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5575656afbf0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656afee8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656afbd0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5575656afbb0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5575656afc80 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656aff00 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656afc60 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5575656afc40 <col:26> 'int' EnumConstant 0x5575656af920 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5575656afd50 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5575656aff18 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656afd30 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5575656afd10 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5575656afcd0 <col:27> 'int' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5575656afcf0 <col:44> 'int' EnumConstant 0x5575656afbf0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5575656afe20 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5575656aff30 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656afe00 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5575656afde0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5575656afda0 <col:27> 'int' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5575656afdc0 <col:44> 'int' EnumConstant 0x5575656afad0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5575656aff48 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5575656b0050 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5575656b00a0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656b0030 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5575656b0010 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5575656b00c8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x557565314070 'uninitialized_type'
|   `-CXXRecord 0x557565313fd8 'uninitialized_type'
|-CXXRecordDecl 0x5575656b0120 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5575656b0230 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c0638 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575656c0758 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5575656c0710 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5575656c06a0 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656c0690 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5575656c06d0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5575656c0740 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5575656c06f0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5575656b0478 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5575656b02f0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5575656b0368 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5575656bbf70 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5575656bbf50 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c0770 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575656c08c0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5575656c0848 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5575656c07d8 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656c07c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5575656c0890 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5575656c0878 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575656c0808 <col:16> 'long' lvalue ParmVar 0x5575656b02f0 'sec' 'long'
|     `-ImplicitCastExpr 0x5575656c08a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5575656c0828 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b0368 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5575656b06d8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5575656b0548 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5575656b05c0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5575656bbfa8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5575656bbf88 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c08d8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575656c0a10 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5575656c09b0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5575656c0940 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656c0930 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5575656c09e0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5575656c0970 <col:16> 'int' lvalue ParmVar 0x5575656b0548 'sec' 'int'
|     `-ImplicitCastExpr 0x5575656c09f8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5575656c0990 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b05c0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5575656b0938 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5575656b07a8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5575656b0820 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5575656bbfe0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5575656bbfc0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c0a28 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575656c0b78 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5575656c0b00 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5575656c0a90 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656c0a80 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5575656c0b48 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5575656c0b30 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575656c0ac0 <col:16> 'unsigned long' lvalue ParmVar 0x5575656b07a8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5575656c0b60 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5575656c0ae0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b0820 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5575656b1ad0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5575656b0a08 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5575656b0a80 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5575656bc018 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5575656bbff8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c0b90 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575656c0ce0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5575656c0c68 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5575656c0bf8 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656c0be8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5575656c0cb0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5575656c0c98 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575656c0c28 <col:16> 'unsigned int' lvalue ParmVar 0x5575656b0a08 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5575656c0cc8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5575656c0c48 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b0a80 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5575656b1c30 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5575656b1ba0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5575656b1dc8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5575656b1d08 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5575656b1ff8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5575656b1f00 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5575656b21a8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5575656b20e8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c0d80 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5575656c0cf8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5575656b20e8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5575656c0de0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5575656b2378 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5575656b22b8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c0df0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5575656c0ea0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5575656c0e78 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5575656c0e48 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5575656b22b8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5575656b2568 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5575656b24e0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5575656af080 'Timestamp'
|   | `-CXXRecord 0x5575656af2d8 'Timestamp'
|   `-ParenType 0x5575656b2480 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5575656b2450 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5575656af620 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5575656af498 'seconds_type'
|         `-TypedefType 0x557565314440 'int32_t' sugar
|           |-Typedef 0x557565223268 'int32_t'
|           `-TypedefType 0x5575651fc3b0 '__int32_t' sugar
|             |-Typedef 0x5575651fbfc8 '__int32_t'
|             `-BuiltinType 0x5575651ba370 'int'
|-CXXConversionDecl 0x5575656b26a8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5575656b2778 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5575656c0fa8 <col:37, line:231:5>
|   `-ReturnStmt 0x5575656c0f98 <line:227:9, col:23>
|     `-BinaryOperator 0x5575656c0f78 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5575656c0f48 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5575656c0ef8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5575656b9478
|       |   `-MemberExpr 0x5575656c0ec8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5575656ba428
|       |     `-CXXThisExpr 0x5575656c0eb8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5575656c0f60 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5575656c0f28 <col:23> 'int' 0
|-CXXMethodDecl 0x5575656b2838 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5575656b28f8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656b29b8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656b2a78 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656b2b38 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656b2ca8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5575656b2be8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5575656b2df0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5575656b2d60 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b2eb8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5575656b2f58 <col:54> "" ""
|-CXXMethodDecl 0x5575656b2fe8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5575656b3088 <col:54> "" ""
|-CXXMethodDecl 0x5575656b3118 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5575656b31b8 <col:54> "" ""
|-CXXMethodDecl 0x5575656b32b8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5575656b3388 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5575656b34b8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5575656b35b0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5575656b36e8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5575656c11c0 <col:39, line:271:5>
|   `-ReturnStmt 0x5575656c11b0 <line:267:9, col:61>
|     `-CallExpr 0x5575656c1150 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5575656c1138 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575656c0fc0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5575656ba758 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5575656c1180 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5575656c1020 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5575656b9478
|       |   `-MemberExpr 0x5575656c0ff0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5575656ba428
|       |     `-CXXThisExpr 0x5575656c0fe0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5575656c1198 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5575656c10c0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5575656c1090 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5575656c1050 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5575656c10a8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5575656c1070 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afbf0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b37a8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5575656c1380 <col:39, line:279:5>
|   `-ReturnStmt 0x5575656c1370 <line:275:9, col:61>
|     `-CallExpr 0x5575656c1310 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5575656c12f8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575656c11d8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5575656ba758 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5575656c1340 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5575656c1238 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5575656b9478
|       |   `-MemberExpr 0x5575656c1208 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5575656ba428
|       |     `-CXXThisExpr 0x5575656c11f8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5575656c1358 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5575656c12d8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5575656c12a8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5575656c1268 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5575656c12c0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5575656c1288 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afad0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b3868 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5575656c1518 <col:39, line:287:5>
|   `-ReturnStmt 0x5575656c1508 <line:283:9, col:53>
|     `-BinaryOperator 0x5575656c14e8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5575656c14b8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5575656c13d8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5575656b9478
|       |   `-MemberExpr 0x5575656c13a8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5575656ba428
|       |     `-CXXThisExpr 0x5575656c1398 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5575656c14d0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5575656c1498 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5575656c1478 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5575656c1448 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656c1408 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656af920 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656c1460 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656c1428 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b3958 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5575656c27b0 <col:40, line:293:5>
|   |-DeclStmt 0x5575656c1660 <line:291:9, col:48>
|   | `-VarDecl 0x5575656c1540 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5575656c1640 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5575656c15e8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5575656c15b8 <col:22> '<bound member function type>' ->subsec 0x5575656b28f8
|   |     |   `-CXXThisExpr 0x5575656c15a8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5575656c1628 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5575656c1608 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afd50 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5575656c27a0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5575656c2788 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5575656c2758 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656c2740 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5575656c2720 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5575656c26f0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5575656c2488 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5575656c2470 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5575656c1678 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5575656c1540 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5575656c2690 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5575656c2678 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5575656c2648 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5575656c24a0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5575656c2410 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5575656c23f8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5575656c23a8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5575656af228 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5575656c2348 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5575656c16a8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5575656c1698 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5575656c2390 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5575656c2378 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5575656c1b68 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5575656c16d0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5575656c1760 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5575656c1730 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5575656c16f0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afd50 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5575656c1748 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5575656c1710 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5575656c1540 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5575656c26c0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5575656c2458 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5575656c2448 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5575656b3a18 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5575656c2d08 <col:40, line:302:5>
|   |-DeclStmt 0x5575656c2900 <line:297:9, col:48>
|   | `-VarDecl 0x5575656c27e0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5575656c28e0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5575656c2888 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5575656c2858 <col:22> '<bound member function type>' ->subsec 0x5575656b28f8
|   |     |   `-CXXThisExpr 0x5575656c2848 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5575656c28c8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5575656c28a8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afe20 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5575656c2cf8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5575656c2ce0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5575656c2cb0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656c2c98 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5575656c2c78 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5575656c2c48 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5575656c2b70 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5575656c2b58 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5575656c2918 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5575656c27e0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5575656c2be8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5575656c2bd0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5575656c2ba0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5575656c2b88 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5575656c2af8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5575656c2ae0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5575656c2ac0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5575656af228 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5575656c2a60 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5575656c2948 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5575656c2938 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5575656c2aa8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5575656c2a90 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5575656c2a20 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5575656c2970 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5575656c2a00 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5575656c29d0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5575656c2990 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afe20 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5575656c29e8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5575656c29b0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5575656c27e0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5575656c2c18 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5575656c2b40 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5575656c2b30 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5575656b3ad8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5575656c2d90 <col:40, line:306:5>
|   `-ReturnStmt 0x5575656c2d80 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5575656c2d50 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5575656c2d38 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5575656c2d28 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5575656b3c78 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5575656b3b88 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5575656b3e48 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5575656b3d50 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5575656b3f38 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5575656b40a8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5575656b3fe8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5575656c2ed8 <col:56, line:320:5>
|   `-ReturnStmt 0x5575656c2ec8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5575656c2eb0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5575656c2e80 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656c2e68 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5575656c2e28 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5575656c2df8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5575656c2db8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b3fe8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5575656c2e10 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5575656c2dd8 <col:31> 'int' 0
|-CXXMethodDecl 0x5575656b42e8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5575656b4160 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b41d8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656c30a8 <col:72, line:326:5>
|   `-ReturnStmt 0x5575656c3098 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5575656c3080 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5575656c3050 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656c3038 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5575656c2ff8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5575656c2fe0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5575656c2f00 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b4160 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5575656c2fa0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5575656c2f88 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5575656c2f20 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5575656b8bd0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5575656c2fc8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5575656c2f40 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b41d8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b4498 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5575656b43a8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5575656c3770 <col:56, line:337:5>
|   |-DeclStmt 0x5575656c33a8 <line:329:9, col:51>
|   | `-VarDecl 0x5575656c30d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5575656c3390 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5575656c3360 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5575656c3348 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5575656c3330 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5575656c3300 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5575656c32e8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5575656c32d0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5575656c31c0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5575656c3560 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5575656c3410 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5575656b9478
|   | | `-MemberExpr 0x5575656c33e0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5575656ba428
|   | |   `-DeclRefExpr 0x5575656c33c0 <col:9> 'Timestamp' lvalue Var 0x5575656c30d0 't' 'Timestamp'
|   | `-BinaryOperator 0x5575656c3540 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5575656c3510 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5575656c3440 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5575656b43a8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5575656c3528 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5575656c34f0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5575656c34d0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5575656c34a0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5575656c3460 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5575656c34b8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5575656c3480 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afbf0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5575656c3758 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5575656c3728 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5575656c3710 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5575656c36f0 <col:16> 'Timestamp' lvalue Var 0x5575656c30d0 't' 'Timestamp'
|-CXXMethodDecl 0x5575656b4660 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5575656b4550 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b45c8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656c3928 <col:72, line:343:5>
|   `-ReturnStmt 0x5575656c3918 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5575656c3900 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5575656c38d0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656c38b8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5575656c3878 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5575656c3860 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5575656c37a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b4550 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5575656c3820 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5575656c3808 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5575656c37c8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5575656b8d18 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5575656c3848 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5575656c37e8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b45c8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b47b0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5575656b4720 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5575656c3d70 <col:56, line:354:5>
|   |-DeclStmt 0x5575656c3b18 <line:346:9, col:51>
|   | `-VarDecl 0x5575656c3950 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5575656c3b00 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5575656c3ad0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5575656c3ab8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5575656c3aa0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5575656c3a70 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5575656c3a58 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5575656c3a40 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5575656c3a10 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5575656c3cd0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5575656c3b80 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5575656b9478
|   | | `-MemberExpr 0x5575656c3b50 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5575656ba428
|   | |   `-DeclRefExpr 0x5575656c3b30 <col:9> 'Timestamp' lvalue Var 0x5575656c3950 't' 'Timestamp'
|   | `-BinaryOperator 0x5575656c3cb0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5575656c3c80 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5575656c3bb0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5575656b4720 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5575656c3c98 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5575656c3c60 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5575656c3c40 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5575656c3c10 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5575656c3bd0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5575656c3c28 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5575656c3bf0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afad0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5575656c3d58 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5575656c3d28 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5575656c3d10 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5575656c3cf0 <col:16> 'Timestamp' lvalue Var 0x5575656c3950 't' 'Timestamp'
|-CXXMethodDecl 0x5575656b4978 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5575656b4868 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b48e0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656c3f28 <col:72, line:360:5>
|   `-ReturnStmt 0x5575656c3f18 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5575656c3f00 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5575656c3ed0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656c3eb8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5575656c3e78 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5575656c3e60 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5575656c3da8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b4868 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5575656c3e20 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5575656c3e08 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5575656c3dc8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5575656b8e60 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5575656c3e48 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5575656c3de8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b48e0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b4ac8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5575656b4a38 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5575656d0898 <col:56, line:371:5>
|   |-DeclStmt 0x5575656c4118 <line:363:9, col:51>
|   | `-VarDecl 0x5575656c3f50 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5575656c4100 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5575656c40d0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5575656c40b8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5575656c40a0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5575656c4070 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5575656c4058 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5575656c4040 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5575656c4010 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5575656d07f8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5575656c4180 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5575656b9478
|   | | `-MemberExpr 0x5575656c4150 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5575656ba428
|   | |   `-DeclRefExpr 0x5575656c4130 <col:9> 'Timestamp' lvalue Var 0x5575656c3f50 't' 'Timestamp'
|   | `-CallExpr 0x5575656d0798 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5575656d0780 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5575656c41b0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5575656ba758 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5575656d07c8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5575656c41d0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5575656b4a38 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5575656d07e0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5575656d0760 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5575656d0730 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5575656c41f0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656af920 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5575656d0748 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5575656c4210 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5575656d0880 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5575656d0850 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5575656d0838 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5575656d0818 <col:16> 'Timestamp' lvalue Var 0x5575656c3f50 't' 'Timestamp'
|-CXXMethodDecl 0x5575656b4bb8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5575656d09d8 <col:39, line:377:5>
|   `-ReturnStmt 0x5575656d09c8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5575656d09b0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5575656d0980 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5575656d0968 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5575656d0928 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5575656d08d0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5575656d0910 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5575656d08f0 <col:29> 'int' 1
|-CXXMethodDecl 0x5575656b4c78 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5575656d0ab8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5575656d0a70 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5575656d0a00 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656d09f0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5575656d0a30 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5575656d0aa0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5575656d0a50 <col:19> 'int' 0
|-CXXMethodDecl 0x5575656b4e78 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5575656b4d28 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b4da0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5575656bc050 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5575656bc030 <col:60> 'int' 0
| `-CompoundStmt 0x5575656d0cb0 <col:63, line:395:5>
|   `-BinaryOperator 0x5575656d0c90 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5575656d0b10 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5575656b9478
|     | `-MemberExpr 0x5575656d0ae0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5575656ba428
|     |   `-CXXThisExpr 0x5575656d0ad0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5575656d0c70 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5575656d0c00 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5575656d0ba0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5575656d0b88 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5575656d0b70 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5575656d0b40 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b4d28 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5575656d0be8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5575656d0bc8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5575656d0c58 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5575656d0c40 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5575656d0c20 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b4da0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b5048 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5575656b4f38 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b4fb0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d0e08 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5575656d0dc0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5575656d0cd8 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656d0cc8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5575656d0df0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5575656d0d08 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b4f38 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5575656d0d80 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575656d0d68 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575656d0d28 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5575656b8d18 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5575656d0da8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5575656d0d48 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b4fb0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b5218 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5575656b5108 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b5180 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d0f60 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5575656d0f18 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5575656d0e30 <col:9> '<bound member function type>' ->assign 0x5575656b4e78
|     | `-CXXThisExpr 0x5575656d0e20 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5575656d0f48 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5575656d0e60 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5575656b5108 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5575656d0ed8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5575656d0ec0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575656d0e80 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5575656b8e60 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5575656d0f00 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5575656d0ea0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b5180 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656b53e8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5575656b52d8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b5350 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5575656bc088 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5575656bc068 <col:57> 'int' 0
| `-DeprecatedAttr 0x5575656b5498 <col:75> "" ""
|-CXXMethodDecl 0x5575656b5628 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5575656b5518 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b5590 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656b56d8 <col:74> "" ""
|-CXXMethodDecl 0x5575656b5868 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5575656b5758 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5575656b57d0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656b5918 <col:74> "" ""
|-CXXMethodDecl 0x5575656b59a8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5575656b5a48 <col:42> "" ""
|-CXXMethodDecl 0x5575656b8280 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5575656b8160 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5575656b81e0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5575656b8350 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5575656b8410 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5575656b84b0 <col:20>
| `-OptimizeNoneAttr 0x5575656b8508 <col:30>
|-CXXMethodDecl 0x5575656b8550 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5575656b8610 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5575656b86d0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5575656b8790 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5575656b8850 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5575656b8910 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5575656b89d0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5575656b8a90 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5575656b8bd0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5575656b8b40 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d10a8 <col:58, line:512:5>
|   `-ReturnStmt 0x5575656d1098 <line:511:9, col:53>
|     `-BinaryOperator 0x5575656d1078 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5575656d1048 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d0f78 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b8b40 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575656d1060 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5575656d1028 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5575656d1008 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5575656d0fd8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656d0f98 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656d0ff0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656d0fb8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afbf0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b8d18 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5575656b8c88 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d11f0 <col:58, line:516:5>
|   `-ReturnStmt 0x5575656d11e0 <line:515:9, col:53>
|     `-BinaryOperator 0x5575656d11c0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5575656d1190 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d10c0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b8c88 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575656d11a8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5575656d1170 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5575656d1150 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5575656d1120 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656d10e0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656d1138 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656d1100 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afad0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b8e60 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5575656b8dd0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d1338 <col:58, line:520:5>
|   `-ReturnStmt 0x5575656d1328 <line:519:9, col:53>
|     `-BinaryOperator 0x5575656d1308 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5575656d12d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d1208 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b8dd0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575656d12f0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5575656d12b8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5575656d1298 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5575656d1268 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656d1228 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656af920 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656d1280 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656d1248 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b8fa8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5575656b8f18 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d1480 <col:60, line:524:5>
|   `-ReturnStmt 0x5575656d1470 <line:523:9, col:55>
|     `-BinaryOperator 0x5575656d1450 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5575656d1420 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d1350 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b8f18 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575656d1438 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5575656d1400 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5575656d13e0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5575656d13b0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656d1370 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656d13c8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656d1390 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afbf0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b90f0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5575656b9060 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d15c8 <col:60, line:528:5>
|   `-ReturnStmt 0x5575656d15b8 <line:527:9, col:55>
|     `-BinaryOperator 0x5575656d1598 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5575656d1568 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d1498 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b9060 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575656d1580 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5575656d1548 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5575656d1528 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5575656d14f8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656d14b8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656d1510 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656d14d8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afad0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5575656b9238 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5575656b91a8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d1710 <col:60, line:532:5>
|   `-ReturnStmt 0x5575656d1700 <line:531:9, col:55>
|     `-BinaryOperator 0x5575656d16e0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5575656d16b0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d15e0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656b91a8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5575656d16c8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5575656d1690 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5575656d1670 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5575656d1640 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5575656d1600 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656af920 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5575656d1658 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5575656d1620 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5575656afc80 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5575656b92e0 prev 0x5575656b0120 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575656b93d8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5575656b9478 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5575656c0240 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5575656c0628 <col:11>
| |-CXXConstructorDecl 0x5575656c0320 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5575656c0408 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5575656c0d70 <col:11>
| |-CXXConstructorDecl 0x5575656c04a8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5575656c05b8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5575656c25c8 <col:11>
| |-CXXDestructorDecl 0x5575656c18d8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5575653c8488 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5575653c8598 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5575653c8e60 <col:11>
| |   `-ReturnStmt 0x5575653c8e50 <col:11>
| |     `-UnaryOperator 0x5575653c8e38 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5575653c8e28 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5575653c8608 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5575653c8718 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x55756575ad00 <col:11>
|     `-ReturnStmt 0x55756575acf0 <col:11>
|       `-UnaryOperator 0x55756575acd8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55756575acc8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5575656b94e0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5575656b95e0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5575656b97e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656b95c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5575656b95a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5575656b9670 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5575656b97f8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656b9650 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5575656b9630 <col:23> 'int' 1
| |-EnumConstantDecl 0x5575656b9700 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5575656b9810 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656b96e0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5575656b96c0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5575656b9790 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5575656b9828 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656b9770 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5575656b9750 <col:27> 'int' 3
|-CXXMethodDecl 0x5575656b9868 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5575656b9930 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5575656b9b38 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5575656b99e0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5575656b9a60 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5575656bc0a0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5575656b9d48 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5575656b9bf8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5575656b9c70 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5575656b9e18 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5575656b9ed8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5575656ba048 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5575656b9f88 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5575656ba110 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5575656ba1d0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5575656ba290 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5575656ba350 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5575656ba3f0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5575656ba428 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5575656ba498 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5575656d1728 <col:27, line:684:5>
|-CXXMethodDecl 0x5575656ba558 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5575656d1738 <col:27, line:696:5>
|-CXXMethodDecl 0x5575656ba758 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5575656ba608 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5575656ba680 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d18c0 <col:66, line:700:5>
|   `-ReturnStmt 0x5575656d18b0 <line:699:9, col:31>
|     `-CallExpr 0x5575656d1850 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5575656d1838 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575656d17e8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55756553cb08 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5575656d1880 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5575656d17a8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5575656ba608 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5575656d1898 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5575656d17c8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656ba680 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656baac8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5575656ba818 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5575656ba890 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5575656ba908 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5575656ba980 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5575656d1c10 <col:64, line:707:5>
|   |-DeclStmt 0x5575656d1950 <line:704:9, col:24>
|   | `-VarDecl 0x5575656d18e8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5575656d1b60 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5575656d1968 <col:9> 'int32_t':'int' lvalue ParmVar 0x5575656ba890 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5575656d1b48 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5575656d1ae0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5575656d1ac8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575656d1a48 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x557565541dd8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5575656d1b18 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5575656d19e8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5575656ba908 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5575656d1b30 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5575656d1a08 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656ba980 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5575656d1a28 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5575656d18e8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5575656d1bf0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5575656d1b80 <col:9> 'int32_t':'int' lvalue ParmVar 0x5575656ba818 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5575656d1bd8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5575656d1bc0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5575656d1ba0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5575656d18e8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5575656bad68 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5575656bab98 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5575656bac10 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5575656bac88 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5575656bb008 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5575656bae30 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5575656baea8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5575656baf20 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5575656bb198 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5575656bb0d0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5575656bb398 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5575656bb250 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5575656bb2c8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5575656bb668 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5575656bb5a8 parent 0x5575651ba278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5575656bb458 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5575656bb4d0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5575656bb888 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5575656bb7c8 parent 0x5575651ba278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5575656bb6b8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5575656bb730 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5575656bba50 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5575656bb998 parent 0x5575651ba278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5575656bb8d8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5575656bbcd8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5575656bbc18 parent 0x5575651ba278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5575656bbac8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5575656bbb40 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5575656bbef8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5575656bbe38 parent 0x5575651ba278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5575656bbd28 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5575656bbda0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5575656c1780 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5575656c1868 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c22d8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5575656c2290 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5575656ba428
| |     `-DeclRefExpr 0x5575656c2270 <col:7> 'const Timestamp' lvalue ParmVar 0x5575656c1868 '' 'const Timestamp &'
| `-CompoundStmt 0x5575656c2338 <col:7>
|-CXXConstructorDecl 0x5575656c19e8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5575656c1af8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5575656ba428 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5575656c25d8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5575656c2580 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5575656ba428
| |     `-CXXStaticCastExpr 0x5575656c2550 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5575656c2520 <col:7> 'Timestamp' lvalue ParmVar 0x5575656c1af8 '' 'Timestamp &&'
| `-CompoundStmt 0x5575656c2638 <col:7>
|-CXXDestructorDecl 0x5575656c1ba8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5575653c82d8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5575653c83e8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5575653c8ed8 <col:7>
|   |-CXXMemberCallExpr 0x5575653c8e78 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5575653c8db8 <col:7> '<bound member function type>' .operator= 0x5575653c8488
|   | | `-MemberExpr 0x5575653c8cc8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5575656ba428
|   | |   `-CXXThisExpr 0x5575653c8cb8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5575653c8d88 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5575656ba428
|   |   `-DeclRefExpr 0x5575653c8d68 <col:7> 'const Timestamp' lvalue ParmVar 0x5575653c83e8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5575653c8ec8 <col:7>
|     `-UnaryOperator 0x5575653c8eb0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5575653c8ea0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5575653c8788 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5575653c8898 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x55756575ad78 <col:7>
    |-CXXMemberCallExpr 0x55756575ad18 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x55756575ac80 <col:7> '<bound member function type>' .operator= 0x5575653c8608
    | | `-MemberExpr 0x55756575ab50 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5575656ba428
    | |   `-CXXThisExpr 0x55756575ab40 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x55756575ac50 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5575656ba428
    |   `-CXXStaticCastExpr 0x55756575ac20 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x55756575abf0 <col:7> 'Timestamp' lvalue ParmVar 0x5575653c8898 '' 'Timestamp &&'
    `-ReturnStmt 0x55756575ad68 <col:7>
      `-UnaryOperator 0x55756575ad50 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55756575ad40 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55756575e388 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x55756575e598 prev 0x55756575e388 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55756575f9e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x55756575f990 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x55756575f970 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x55756575f820 'type'
|     `-SubstTemplateTypeParmType 0x55756575f640 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x55756575f190 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x55756575f0a8 'sized_array_memory'
|-FieldDecl 0x557565767440 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x557565767490 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575657674c8 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-RecordType 0x55756575d590 'TimerSet::heap_element'
|     `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x557565767588 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x557565767550 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x55756575d590 'TimerSet::heap_element'
|       `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x557565767618 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5575657675e0 'const TimerSet::heap_element &'
|   `-QualType 0x55756575e631 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x55756575d590 'TimerSet::heap_element'
|         `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x5575657676a8 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x557565767670 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x55756575d590 'TimerSet::heap_element'
|       `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x557565767768 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x557565767730 'const TimerSet::heap_element *'
|   `-QualType 0x55756575e631 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x55756575d590 'TimerSet::heap_element'
|         `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x5575657685d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x557565768580 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x557565768560 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x557565768498 'type'
|     `-LValueReferenceType 0x557565768460 'const TimerSet::heap_element &'
|       `-QualType 0x557565768201 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x557565768200 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x55756548f360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55756548f308 'T'
|           `-RecordType 0x55756575d590 'TimerSet::heap_element'
|             `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x557565768638 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5575657675e0 'const TimerSet::heap_element &'
|   `-QualType 0x55756575e631 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x55756575d590 'TimerSet::heap_element'
|         `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x557565768690 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575657686f8 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x557565767670 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x55756575d590 'TimerSet::heap_element'
|       `-CXXRecord 0x55756575d500 'heap_element'
|-TypedefDecl 0x557565768760 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x557565767730 'const TimerSet::heap_element *'
|   `-QualType 0x55756575e631 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55756575e630 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x55756575d590 'TimerSet::heap_element'
|         `-CXXRecord 0x55756575d500 'heap_element'
|-EnumDecl 0x5575657687b8 <line:134:5> col:5
| `-EnumConstantDecl 0x5575657688b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557565768890 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x557565768938 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557565768bc8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657689f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565768a90 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x557565768e88 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x557565768d70 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x557565769148 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x557565769030 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x557565769490 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x557565769370 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x5575657697a0 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x557565769680 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x557565769a90 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657698d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565769950 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x557565769be8 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x557565769cc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565769d20 <col:30> Inherited
|-CXXMethodDecl 0x557565769d68 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x557565769e18 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565769e70 <col:30> Inherited
|-CXXMethodDecl 0x557565769f38 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x557565769fe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756576a040 <col:30> Inherited
|-CXXMethodDecl 0x55756576a088 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55756576a138 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756576a190 <col:30> Inherited
|-CXXMethodDecl 0x55756576a1d8 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55756576a288 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756576a2e0 <col:30> Inherited
|-CXXMethodDecl 0x55756576a328 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55756576a3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55756576a430 <col:30> Inherited
|-CXXMethodDecl 0x55756576a458 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55756576a508 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55756576a5b8 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55756576a778 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x55756576a668 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55756576a6e0 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55756576a8c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55756576a838 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756576aa78 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x55756576a980 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55756576ab30 <col:20>
| `-OptimizeNoneAttr 0x55756576ab88 <col:30>
|-CXXMethodDecl 0x55756576aca8 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x55756576abb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55756576ad60 <col:20>
| `-OptimizeNoneAttr 0x55756576adb8 <col:30>
|-CXXMethodDecl 0x55756576ae70 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x55756576ade0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756576afb8 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55756576af28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756576b0e8 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x55756576b218 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x55756576b2e8 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x55756576b3b8 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x55756576b4f8 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x55756576b468 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756576b640 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55756576b5b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756576b788 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x55756576b6f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55756576b840 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55756576b940 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55756576b8b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55756576b9f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55756576bab8 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x55756576bbb8 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x55756576bd68 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x55756576bc78 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x55756576c558 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55756576be20 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x55756576c4b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x55756576c3b8 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x55756576c638 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55756576c788 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x55756576c6f8 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55756576c840 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55756576ca88 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x55756576c900 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x55756576c978 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55756576cce0 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x55756576cb58 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x55756576cf38 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x55756576cda8 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x55756576ce20 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x55756576cff8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55756576d258 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x55756576d160 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x55756576d328 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55756576d328

Layout: <CGRecordLayout
  LLVMType:%class.Vector.13 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.13 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55756576d470 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x55756576d678 prev 0x55756576d470 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55756576e7c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x55756576e770 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x55756576e750 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x55756576e600 'type'
|     `-SubstTemplateTypeParmType 0x55756576e420 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x55756576df70 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55756576de88 'sized_array_memory'
|-FieldDecl 0x5575657723f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x557565772440 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557565772478 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-PointerType 0x557565721510 'Timer *'
|     `-RecordType 0x557565720660 'Timer'
|       `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x557565772538 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x557565772500 'Timer *&'
|   `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x557565721510 'Timer *'
|       `-RecordType 0x557565720660 'Timer'
|         `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x5575657725f8 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x5575657725c0 'Timer *const &'
|   `-QualType 0x55756576d711 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565721510 'Timer *'
|         `-RecordType 0x557565720660 'Timer'
|           `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x5575657726b8 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x557565772680 'Timer **'
|   `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x557565721510 'Timer *'
|       `-RecordType 0x557565720660 'Timer'
|         `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x557565772778 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x557565772740 'Timer *const *'
|   `-QualType 0x55756576d711 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565721510 'Timer *'
|         `-RecordType 0x557565720660 'Timer'
|           `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x557565773350 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x557565773300 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x5575657732e0 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x557565773270 'type'
|     `-SubstTemplateTypeParmType 0x557565773030 'Timer *' sugar
|       |-TemplateTypeParmType 0x55756548fa90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55756548fa40 'T'
|       `-PointerType 0x557565721510 'Timer *'
|         `-RecordType 0x557565720660 'Timer'
|           `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x5575657733b8 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x5575657725c0 'Timer *const &'
|   `-QualType 0x55756576d711 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565721510 'Timer *'
|         `-RecordType 0x557565720660 'Timer'
|           `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x557565773410 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x557565773478 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x557565772680 'Timer **'
|   `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-PointerType 0x557565721510 'Timer *'
|       `-RecordType 0x557565720660 'Timer'
|         `-CXXRecord 0x5575656a42f8 'Timer'
|-TypedefDecl 0x5575657734e0 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x557565772740 'Timer *const *'
|   `-QualType 0x55756576d711 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55756576d710 'Timer *' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-PointerType 0x557565721510 'Timer *'
|         `-RecordType 0x557565720660 'Timer'
|           `-CXXRecord 0x5575656a42f8 'Timer'
|-EnumDecl 0x557565773538 <line:134:5> col:5
| `-EnumConstantDecl 0x557565773630 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557565773610 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575657736b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557565773948 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x557565773770 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557565773810 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x557565773c08 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x557565773af0 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x557565773ec8 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x557565773db0 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x557565774210 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5575657740f0 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x557565774520 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x557565774400 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x557565774810 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x557565774658 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657746d0 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x557565774968 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x557565774a48 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565774aa0 <col:30> Inherited
|-CXXMethodDecl 0x557565774ae8 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x557565774b98 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565774bf0 <col:30> Inherited
|-CXXMethodDecl 0x557565778d00 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x557565778db0 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565778e08 <col:30> Inherited
|-CXXMethodDecl 0x557565778e50 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x557565778f00 <col:20> Inherited
| `-OptimizeNoneAttr 0x557565778f58 <col:30> Inherited
|-CXXMethodDecl 0x557565778fa0 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x557565779050 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657790a8 <col:30> Inherited
|-CXXMethodDecl 0x5575657790f0 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5575657791a0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657791f8 <col:30> Inherited
|-CXXMethodDecl 0x557565779220 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575657792d0 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557565779380 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x557565779540 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x557565779430 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657794a8 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x557565779690 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x557565779600 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x557565779838 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x557565779748 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575657798f0 <col:20>
| `-OptimizeNoneAttr 0x557565779948 <col:30>
|-CXXMethodDecl 0x557565779a68 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x557565779970 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557565779b20 <col:20>
| `-OptimizeNoneAttr 0x557565779b78 <col:30>
|-CXXMethodDecl 0x557565779c30 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x557565779ba0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557565779d78 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557565779ce8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557565779ea8 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x557565779fd8 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x55756577a0a8 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x55756577a178 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x55756577a2b8 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x55756577a228 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756577a400 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55756577a370 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55756577a548 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x55756577a4b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55756577a600 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55756577a700 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55756577a670 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55756577a7b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55756577a878 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x55756577a978 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x55756577aaf8 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x55756577aa38 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x55756577b2b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55756577abb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x55756577b218 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x55756577b118 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x55756577b398 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55756577b4e8 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x55756577b458 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x55756577b5a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55756577b7e8 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x55756577b660 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x55756577b6d8 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x55756577b9a8 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x55756577b8b8 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x55756577bbf8 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x55756577ba70 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x55756577bae8 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x55756577bcb8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55756577bf18 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x55756577be20 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x55756577bfe8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55756577bfe8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.14 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.14 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756573abc0 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55756573acd8 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x55756573ad68 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x55756573adf0 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x55756573aee0 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x55756573afe0 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x55756573b0a0 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x55756573b160 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x55756573b288 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x55756573b288
| `-ParmVarDecl 0x55756573b398 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x55756577cd98 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x55756577cd98
  `-ParmVarDecl 0x55756577cea8 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756575c680 prev 0x5575656a84a8 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x55756575c778 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x55756575c808 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x55756575c890 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x55756575c988 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x55756577d210 <col:43, col:67>
|   `-ReturnStmt 0x55756577d200 <col:45, col:52>
|     `-CXXConstructExpr 0x55756577d1d0 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x55756577d1a0 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x55756575e170
|         `-CXXThisExpr 0x55756577d190 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x55756575ca48 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x55756575cc50 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x55756575caf8 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x55756575cb70 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x55756575cd48 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x55756575ce10 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x55756577d290 <col:39, col:67>
|   `-ReturnStmt 0x55756577d280 <col:41, col:48>
|     `-ImplicitCastExpr 0x55756577d268 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55756577d238 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x55756575e258
|         `-CXXThisExpr 0x55756577d228 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x55756575ced8 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x55756577d310 <col:35, col:59>
|   `-ReturnStmt 0x55756577d300 <col:37, col:44>
|     `-ImplicitCastExpr 0x55756577d2e8 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55756577d2b8 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x55756575e2c0
|         `-CXXThisExpr 0x55756577d2a8 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x55756575d020 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x55756575cf90 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x55756575d168 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x55756575d0d8 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x55756575d368 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x55756575d220 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x55756575d298 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x55756575d438 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x55756575d4d8 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x55756575d500 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55756575d618 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x55756575d6b8 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x55756575d718 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x55756575d848 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x55756575d778 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x55756575d6b8 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x55756577d3e8 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x55756577d390 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x55756577d360 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x5575656a5938
|   |       `-ImplicitCastExpr 0x55756577d3b0 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x55756577d348 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x55756577d328 <col:17> 'Timer *' lvalue ParmVar 0x55756575d778 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x55756575d718 't' 'Timer *'
|   | `-ImplicitCastExpr 0x55756577d480 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55756577d440 <col:41> 'Timer *' lvalue ParmVar 0x55756575d778 't_' 'Timer *'
|   `-CompoundStmt 0x55756577d4d0 <col:45, line:44:2>
|-CXXRecordDecl 0x55756575d910 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55756575da28 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x55756575dc78 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x55756575daf8 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x55756575db70 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x55756577d600 <col:71, line:49:2>
|     `-ReturnStmt 0x55756577d5f0 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x55756577d5b8 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x55756577d5a0 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55756577d580 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x5575656de878 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x55756577d500 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x55756575d6b8
|         | `-DeclRefExpr 0x55756577d4e0 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x55756575daf8 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x55756577d550 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x55756575d6b8
|           `-DeclRefExpr 0x55756577d530 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x55756575db70 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x55756575dd40 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55756575de58 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x55756575e078 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x55756575def8 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x55756575df70 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x55756577d808 <col:63, line:54:2>
|     `-BinaryOperator 0x55756577d7e8 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x55756577d698 <col:6, col:12> 'int' lvalue ->_schedpos1 0x5575656a7948
|       | `-ImplicitCastExpr 0x55756577d680 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x55756577d650 <col:6, col:9> 'Timer *' lvalue ->t 0x55756575d718
|       |     `-ImplicitCastExpr 0x55756577d638 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55756577d618 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x55756575df70 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x55756577d7d0 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x55756577d7b0 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x55756577d758 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x55756577d738 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x55756577d708 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x55756577d6c8 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x55756575df70 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x55756577d720 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x55756577d6e8 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x55756575def8 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x55756577d798 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x55756577d778 <col:39> 'int' 1
|-FieldDecl 0x55756575e170 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x55756575e1e0 <col:44, col:53> aligned
|   `-ConstantExpr 0x55756575e1c0 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x55756575e140 <col:52> 'int' 8
|-FieldDecl 0x55756575e258 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x55756575e2c0 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x55756575e328 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x55756576d410 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x55756577c0d0 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x55756577c130 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x55756577c190 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x55756577c1f0 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55756577c2e0 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x55756577c250 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x55756577c3a8 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x55756577dc60 <col:29, line:81:5>
|   `-IfStmt 0x55756577dc38 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x55756577d8f0 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x55756577d890 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x55756577d860 <col:6, col:18> '<bound member function type>' .size 0x55756576a458
|     |     `-ImplicitCastExpr 0x55756577d8d8 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x55756577d830 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x55756576d410
|     |         `-CXXThisExpr 0x55756577d820 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x55756577dae0 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x55756577dac8 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55756577daa8 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x5575653c82d8 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x55756577d918 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x55756575e170
|     | | `-CXXThisExpr 0x55756577d908 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x55756577da90 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x55756577da60 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x55756575d6b8
|     |     `-CXXMemberCallExpr 0x55756577da38 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x55756577da08 <col:22, col:34> '<bound member function type>' .unchecked_at 0x55756576b4f8
|     |       | `-MemberExpr 0x55756577d958 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x55756576d410
|     |       |   `-CXXThisExpr 0x55756577d948 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x55756577d9e8 <col:47> 'int' 0
|     `-ExprWithCleanups 0x55756577dc20 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x55756577dbe8 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x55756577dbd0 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55756577dbb0 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5575653c8788 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x55756577db28 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x55756575e170
|         | `-CXXThisExpr 0x55756577db18 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x55756577db98 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55756577db68 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x55756577c4e8 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x55756577c458 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x55756577c5b0 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x55756577c670 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x55756577c730 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x55756577c820 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x55756577c888 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x55756577c888
| `-ParmVarDecl 0x55756577c998 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x55756577ca38 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x55756577ca38
| `-ParmVarDecl 0x55756577cb48 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x55756577cbe8 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x55756577cbe8
| `-ParmVarDecl 0x55756577ccf8 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x55756577cf18 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x55756577cf18
| `-ParmVarDecl 0x55756577d028 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x55756577d0b0 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x55756577d0b0

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.13, %class.Vector.14, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.13, %class.Vector.14, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575657b3af8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x5575657b3d08 prev 0x5575657b3af8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575657b4de0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5575657b4d90 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x5575657b4d70 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x5575657b4c20 'type'
|     `-SubstTemplateTypeParmType 0x55756576e420 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x55756576df70 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55756576de88 'sized_array_memory'
|-FieldDecl 0x5575657b4ee0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5575657b4f30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575657b4f68 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-RecordType 0x5575657a7b70 'pollfd'
|     `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5028 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x5575657b4ff0 'pollfd &'
|   `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575657a7b70 'pollfd'
|       `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b50e8 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x5575657b50b0 'const pollfd &'
|   `-QualType 0x5575657b3da1 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657a7b70 'pollfd'
|         `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5178 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x5575657b5140 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575657a7b70 'pollfd'
|       `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5238 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x5575657b5200 'const pollfd *'
|   `-QualType 0x5575657b3da1 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657a7b70 'pollfd'
|         `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5e10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x5575657b5dc0 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x5575657b5da0 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x5575657b5d30 'type'
|     `-SubstTemplateTypeParmType 0x5575657b5af0 'pollfd' sugar
|       |-TemplateTypeParmType 0x55756548fa90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55756548fa40 'T'
|       `-RecordType 0x5575657a7b70 'pollfd'
|         `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5e78 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x5575657b50b0 'const pollfd &'
|   `-QualType 0x5575657b3da1 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657a7b70 'pollfd'
|         `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5ed0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575657b5f38 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x5575657b5140 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575657a7b70 'pollfd'
|       `-CXXRecord 0x5575657a7ae0 'pollfd'
|-TypedefDecl 0x5575657b5fa0 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x5575657b5200 'const pollfd *'
|   `-QualType 0x5575657b3da1 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5575657b3da0 'pollfd' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657a7b70 'pollfd'
|         `-CXXRecord 0x5575657a7ae0 'pollfd'
|-EnumDecl 0x5575657b5ff8 <line:134:5> col:5
| `-EnumConstantDecl 0x5575657b60f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575657b60d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575657b6178 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575657b6408 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657b6230 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657b62d0 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x5575657b66c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5575657b65b0 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x5575657b6988 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5575657b6870 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5575657b6cd0 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5575657b6bb0 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x5575657b6fe0 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5575657b6ec0 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5575657b72d0 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657b7118 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657b7190 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5575657b7428 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5575657b7508 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657b7560 <col:30> Inherited
|-CXXMethodDecl 0x5575657b75a8 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5575657b7658 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657b76b0 <col:30> Inherited
|-CXXMethodDecl 0x5575657b7778 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5575657b7828 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657b7880 <col:30> Inherited
|-CXXMethodDecl 0x5575657b78c8 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5575657b7978 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657b79d0 <col:30> Inherited
|-CXXMethodDecl 0x5575657b7a18 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5575657b7ac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657b7b20 <col:30> Inherited
|-CXXMethodDecl 0x5575657b7b68 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5575657b7c18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657b7c70 <col:30> Inherited
|-CXXMethodDecl 0x5575657b7c98 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575657b7d48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575657b7df8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575657b7fb8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657b7ea8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657b7f20 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5575657b8108 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575657b8078 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657b82b8 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x5575657b81c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575657b8370 <col:20>
| `-OptimizeNoneAttr 0x5575657b83c8 <col:30>
|-CXXMethodDecl 0x5575657b84e8 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x5575657b83f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575657b85a0 <col:20>
| `-OptimizeNoneAttr 0x5575657b85f8 <col:30>
|-CXXMethodDecl 0x5575657b86b0 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575657b8620 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657b87f8 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575657b8768 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657b8928 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x5575657b8a58 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x5575657b8b28 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x5575657b8bf8 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x5575657b8d38 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575657b8ca8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657b8e80 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575657b8df0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657b8fc8 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x5575657b8f38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575657b9080 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575657b9180 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575657b90f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575657b9238 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575657b92f8 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x5575657b93f8 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x5575657b95a8 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5575657b94b8 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x5575657b9d68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575657b9660 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x5575657b9cc8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x5575657b9bc8 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x5575657b9e48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575657b9f98 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5575657b9f08 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5575657ba050 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575657ba298 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657ba110 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5575657ba188 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5575657ba458 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x5575657ba368 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5575657ba6a8 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x5575657ba520 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5575657ba598 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5575657ba768 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575657ba9e8 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5575657ba8d0 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x5575657baab8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575657baab8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.15 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.15 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575657bc0a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x5575657bc278 prev 0x5575657bc0a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5575657bc308 <col:46, col:52> col:46 public
|-TypedefDecl 0x5575657bc330 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575657bdf00 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x5575657bdeb0 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x5575657bc7e0 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x5575657bc6e0 'type'
|     `-TemplateSpecializationType 0x5575657bc670 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5575657bc550 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x5575657bc530 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5575657bc510 <col:24> 'unsigned long' 24
|       `-RecordType 0x5575657bc650 'char_array<24>'
|         `-ClassTemplateSpecialization 0x5575657bc570 'char_array'
|-TypedefDecl 0x5575657bdfb8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x5575657bdf80 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x5575657bdf60 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x5575657bdf00 'type'
|     `-ElaboratedType 0x5575657bdeb0 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x5575657bc7e0 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x5575657bc6e0 'type'
|         `-TemplateSpecializationType 0x5575657bc670 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5575657bc550 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x5575657bc530 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5575657bc510 <col:24> 'unsigned long' 24
|           `-RecordType 0x5575657bc650 'char_array<24>'
|             `-ClassTemplateSpecialization 0x5575657bc570 'char_array'
|-CXXMethodDecl 0x5575657be138 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x5575657be048 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x5575657be228 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5575657be308 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5575657be308
|-CXXMethodDecl 0x5575657be5d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5575657be4e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x5575657be818 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5575657be690 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575657be708 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657be9e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5575657be8d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575657be950 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657beb48 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5575657bec18 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5575657bee68 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5575657becd8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5575657bed50 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657bf0c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x5575657bef38 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5575657befb0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657bf288 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5575657bf198 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657bf448 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5575657bf350 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657bf500 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575657bf5b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575657bf7e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5575657bf660 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5575657bf6d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5575657bfa88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5575657bf990 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x5575657bfb50 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x5575657bfba0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5575657bfbf0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.17 = type { %struct.char_array.18*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.17 = type { %struct.char_array.18*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575657bac00 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x5575657bae08 prev 0x5575657bac00 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5575657bc010 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x5575657bbfc0 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x5575657bbfa0 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x5575657bbe50 'type'
|     `-SubstTemplateTypeParmType 0x5575657bbc70 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x557565484c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x557565484c38 'T'
|       `-RecordType 0x5575657bb7c0 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x5575657bb6e0 'sized_array_memory'
|-FieldDecl 0x5575657bfc40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x5575657bfc90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5575657bfcc8 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5575654bc928 'T'
|   `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657bfd88 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5575657bfd50 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657bfe48 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5575657bfe10 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5575657baea1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657bfed8 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x5575657bfea0 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657bff98 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5575657bff60 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5575657baea1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657c0bf0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x5575657c0ba0 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x5575657c0b80 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x5575657c0ab8 'type'
|     `-LValueReferenceType 0x5575657c0a80 'const SelectSet::SelectorInfo &'
|       `-QualType 0x5575657c0821 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x5575657c0820 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x55756548f360 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55756548f308 'T'
|           `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657c0c58 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5575657bfe10 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5575657baea1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657c0cb0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-TypedefDecl 0x5575657c0d18 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x5575657bfea0 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5575654bc928 'T'
|     `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-TypedefDecl 0x5575657c0d80 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5575657bff60 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5575657baea1 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5575657baea0 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5575654bc980 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5575654bc928 'T'
|       `-RecordType 0x5575657b3660 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5575657b35d0 'SelectorInfo'
|-EnumDecl 0x5575657c0dd8 <line:134:5> col:5
| `-EnumConstantDecl 0x5575657c0ed0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5575657c0eb0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5575654be008 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5575654bdfe0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5575654bdfc0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5575657c0f58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5575657c11e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657c1010 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657c10b0 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x5575657c14a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5575657c1390 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x5575657c1768 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5575657c1650 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5575657c1ab0 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5575657c1990 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x5575657c1dc0 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5575657c1ca0 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5575657c20b0 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657c1ef8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657c1f70 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5575657c2208 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5575657c22e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657c2340 <col:30> Inherited
|-CXXMethodDecl 0x5575657c2388 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5575657c2438 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657c2490 <col:30> Inherited
|-CXXMethodDecl 0x5575657c2558 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5575657c2608 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657c2660 <col:30> Inherited
|-CXXMethodDecl 0x5575657c26a8 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5575657c2758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657c27b0 <col:30> Inherited
|-CXXMethodDecl 0x5575657c27f8 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5575657c28a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657c2900 <col:30> Inherited
|-CXXMethodDecl 0x5575657c29a0 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5575657c2a50 <col:20> Inherited
| `-OptimizeNoneAttr 0x5575657c2aa8 <col:30> Inherited
|-CXXMethodDecl 0x5575657c2ad0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575657c2b80 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5575657c2c30 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5575657c2df0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657c2ce0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5575657c2d58 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5575657c2f40 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5575657c2eb0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657c30e8 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x5575657c2ff8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575657c31a0 <col:20>
| `-OptimizeNoneAttr 0x5575657c31f8 <col:30>
|-CXXMethodDecl 0x5575657c3318 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x5575657c3220 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5575657c33d0 <col:20>
| `-OptimizeNoneAttr 0x5575657c3428 <col:30>
|-CXXMethodDecl 0x5575657c34e0 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575657c3450 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657c3628 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575657c3598 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657c3758 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5575657c3888 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5575657c3958 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5575657c3a28 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5575657c3b68 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5575657c3ad8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657c3cb0 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5575657c3c20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5575657c3df8 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x5575657c3d68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575657c3eb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5575657c3fb0 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5575657c3f20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5575657c4068 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5575657c4128 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x5575657c4228 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x5575657c43d8 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5575657c42e8 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x5575657c4b98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5575657c4490 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x5575657c4af8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x5575657c49f8 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x5575657c4c78 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5575657c4dc8 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5575657c4d38 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5575657c4e80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5575657c50c8 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5575657c4f40 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5575657c4fb8 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5575657c5288 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x5575657c5198 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5575657c54d8 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x5575657c5350 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5575657c53c8 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5575657c5598 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5575657c57f8 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5575657c5700 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x5575657c58c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5575657c58c8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.16 = type { %class.vector_memory.17 }
  NonVirtualBaseLLVMType:%class.Vector.16 = type { %class.vector_memory.17 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657a8770 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575657a8888 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x5575657a8918 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5575657b29e0 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x5575657b2ad0 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x5575657b2ad0
|-CXXMethodDecl 0x5575657b2bd0 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x5575657b2e70 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5575657b2c88 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x5575657b2d00 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x5575657b2d80 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x5575657b30e0 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5575657b2f40 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x5575657b2fb8 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x5575657b3038 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x5575657b3238 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x5575657b31a8 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x5575657b3300 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x5575657c6f78 <col:34, line:50:5>
|   |-BinaryOperator 0x5575657c6948 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x5575657c6908 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x5575657b3a88
|   | | `-CXXThisExpr 0x5575657c68f8 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x5575657c6938 <col:23> 'bool' true
|   `-CallExpr 0x5575657c6f50 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5575657c6f38 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575657c6eb8 <col:2> 'void (long)' lvalue Function 0x5575657c6db8 'ignore_result' 'void (long)' (FunctionTemplate 0x55756547fc38 'ignore_result')
|     `-CallExpr 0x5575657c6b60 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x5575657c6b48 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575657c6ac8 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x557565780d10 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x5575657c6b98 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x5575657c6a70 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x5575657c6a58 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x5575657c6a08 <col:22> 'int [2]' lvalue ->_wake_pipe 0x5575657b3a28
|       |   |   `-CXXThisExpr 0x5575657c69f8 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x5575657c6a38 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x5575657c6bc8 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x5575657c6bb0 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x5575657c6a90 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x5575657c6be0 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5575657c6aa8 <col:41> 'int' 1
|-CXXMethodDecl 0x5575657b3440 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5575657b33b0 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5575657b3508 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5575657b35a8 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x5575657b35d0 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5575657b36e8 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x5575657b3788 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x5575657b37e8 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x5575657b3850 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x5575657b3900 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x5575657b3788 'read' 'Element *'
|   | `-ImplicitCastExpr 0x5575657c6fd8 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5575657c6f98 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x5575657b37e8 'write' 'Element *'
|   | `-ImplicitCastExpr 0x5575657c7058 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5575657c7018 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x5575657b3850 'pollfd' 'int'
|   | `-UnaryOperator 0x5575657c70b8 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5575657c7098 <col:35> 'int' 1
|   `-CompoundStmt 0x5575657c7130 <line:64:2, line:65:2>
|-FieldDecl 0x5575657b3a28 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x5575657b3a88 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x5575657baba0 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x5575657c59b0 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x5575657c5be8 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x5575657c5a18 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x5575657c5a90 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x5575657c5b08 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x5575657c5dd0 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x5575657c5cb8 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x5575657c5d38 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x5575657c6018 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x5575657c5e98 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x5575657c5f18 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x5575657c6228 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x5575657c60d8 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x5575657c6150 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x5575657c6378 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x5575657c62e8 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x5575657c6440 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x5575657c6500 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x5575657c65c8 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x5575657c65c8
| `-ParmVarDecl 0x5575657c66d8 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x5575657c6778 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x5575657c6778
  `-ParmVarDecl 0x5575657c6888 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.15, %class.Vector.16 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.15, %class.Vector.16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557565739b28 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557565739c48 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x557565739cd8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x557565739d60 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x557565739e50 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x557565739f50 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x55756573a010 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x55756573a0d0 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x55756573a1b8 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x55756573a2d8 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x55756573a2d8
| `-ParmVarDecl 0x55756573a3e8 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x5575657cbd88 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x5575657cbd88
  `-ParmVarDecl 0x5575657cbe98 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656a2068 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575656a2188 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x5575656a2228 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x5575656a2288 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x5575657cb388 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5575657cb388
| `-ParmVarDecl 0x5575657cb498 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x5575657cb538 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5575657cb538
| `-ParmVarDecl 0x5575657cb648 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x5575657cb6b8 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5575657cbf38 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5575657cbf38
| `-ParmVarDecl 0x5575657cc048 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x5575657cc0b8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5575657cc0b8
| `-ParmVarDecl 0x5575657cc1c8 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x5575657d2838 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x5575657d2910 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756573ba20 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55756573bb38 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x55756573bbc8 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x55756573bc50 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x55756573bd10 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x5575651ba370 'int'
|-CXXMethodDecl 0x55756573bdd8 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x55756573be78 <col:45> always_inline
|-CXXMethodDecl 0x55756573bfa8 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x55756573bee0 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x55756573c050 <col:49> always_inline
|-CXXConstructorDecl 0x55756573c148 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x55756573c148
| `-ParmVarDecl 0x55756573c258 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x55756573c2f8 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x55756573c2f8
| `-ParmVarDecl 0x55756573c408 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x5575657cb7a0 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x5575657cb7a0
|-CXXMethodDecl 0x5575657cc268 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5575657cc268
| `-ParmVarDecl 0x5575657cc378 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x5575657cc3e8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5575657cc3e8
  `-ParmVarDecl 0x5575657cc4f8 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657c75a0 prev 0x5575657a86e0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5575657c7698 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x5575657c7728 <col:22, col:28> col:22 public
|-EnumDecl 0x5575657c7750 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x5575657c7868 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x5575657c7848 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5575657c7830 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5575657c7810 <col:32> 'int' 1
| `-EnumConstantDecl 0x5575657c7910 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x5575657c78f0 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5575657c78d8 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5575657c78b8 <col:53> 'int' 1000
|-CXXMethodDecl 0x5575657c79b0 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x5575657c7a70 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5575657c7b58 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x5575657cc5b8 <col:34, col:52>
|   `-ReturnStmt 0x5575657cc5a8 <col:36, col:43>
|     `-MemberExpr 0x5575657cc578 <col:43> 'TimerSet' lvalue ->_timers 0x5575657c9828
|       `-CXXThisExpr 0x5575657cc568 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5575657c7c48 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x5575657cc620 <col:46, col:64>
|   `-ReturnStmt 0x5575657cc610 <col:48, col:55>
|     `-MemberExpr 0x5575657cc5e0 <col:55> 'const TimerSet' lvalue ->_timers 0x5575657c9828
|       `-CXXThisExpr 0x5575657cc5d0 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5575657c7d38 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x5575657cc688 <col:36, col:55>
|   `-ReturnStmt 0x5575657cc678 <col:38, col:45>
|     `-MemberExpr 0x5575657cc648 <col:45> 'SelectSet' lvalue ->_selects 0x5575657c9888
|       `-CXXThisExpr 0x5575657cc638 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5575657c7e28 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x5575657cc6f0 <col:48, col:67>
|   `-ReturnStmt 0x5575657cc6e0 <col:50, col:57>
|     `-MemberExpr 0x5575657cc6b0 <col:57> 'const SelectSet' lvalue ->_selects 0x5575657c9888
|       `-CXXThisExpr 0x5575657cc6a0 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5575657c7ee8 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5575657c7fd8 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x5575657c8148 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x5575657c8088 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x5575657c8210 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x5575657c8658 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x5575657c82c0 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x5575657c8540 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x5575657c8728 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x5575657c87e8 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x5575657c88a8 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x5575657c89e8 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x5575657c8958 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x5575657c8ab0 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x5575657c8b70 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x5575657c8c30 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x5575657c8cf0 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x5575657c8e30 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5575657c8da0 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5575657c8ef8 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x5575657c8fb8 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x5575657c9058 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x5575657c9120 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c9170 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c91c0 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c9210 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c9260 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c92b0 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c9300 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c9350 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c93a0 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5575657c93f0 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x5575657c9440 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x5575657c9538 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x5575657c94a8 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x5575657c9688 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x5575657c95f8 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x5575657c9730 <line:104:3, col:10> col:3 private
|-FieldDecl 0x5575657c9768 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x5575657c97c8 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x5575657c9828 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x5575657c9888 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x5575657c9908 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x5575657c9978 <col:40, col:50> aligned
|   `-ConstantExpr 0x5575657c9958 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x5575657c98d8 <col:48> 'int' 64
|-FieldDecl 0x5575657c99e8 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x5575657c9a48 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x5575657c9b40 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x5575657c9c50 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x5575657c9cb0 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x5575657c9d30 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x5575657c9da0 <col:36, col:46> aligned
|   `-ConstantExpr 0x5575657c9d80 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x5575657c9d00 <col:44> 'int' 64
|-FieldDecl 0x5575657c9e18 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x5575657c9e78 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x5575657c9ec8 <line:170:3, col:9> col:3 public
|-FieldDecl 0x5575657c9f08 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x5575657c9f70 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x5575657c9fc0 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x5575657ca168 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x5575657c9ff8 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x5575657ca078 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x5575657ca268 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x5575657ca268
|-CXXMethodDecl 0x5575657ca370 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x5575657ca438 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x5575657cc7e8 <col:34, line:217:5>
|   `-ReturnStmt 0x5575657cc7d8 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x5575657cc7c0 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5575657cc790 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x55756573e580
|         `-ImplicitCastExpr 0x5575657cc778 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5575657cc748 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x55756573e518
|             `-MemberExpr 0x5575657cc718 <col:16> 'const TaskLink' lvalue ->_task_link 0x5575657c9768
|               `-CXXThisExpr 0x5575657cc708 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5575657ca4f8 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x5575657ca5b8 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x5575657ccf10 <col:39, line:226:5>
|   |-DeclStmt 0x5575657cca38 <line:223:9, col:68>
|   | `-VarDecl 0x5575657cc810 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x5575657cc9f0 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x5575657cc9c0 <col:24, col:38> '<bound member function type>' .compare_swap 0x5575654e6280
|   |     | `-MemberExpr 0x5575657cc888 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x5575657c99e8
|   |     |   `-CXXThisExpr 0x5575657cc878 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x5575657cc978 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x5575657cc960 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x5575657cc938 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x5575657cc918 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x5575657cca20 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x5575657cc9a0 <col:66> 'int' 0
|   |-CStyleCastExpr 0x5575657cca80 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5575657cca50 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5575657cc810 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x5575657ccef0 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x5575657ccec0 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x5575657ccb98 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5575657ccb68 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5575657ccb50 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5575657ccaa8 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x5575657cc810 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x5575657ccb28 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x5575657ccb10 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x5575657ccae8 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x5575657ccac8 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x5575657ccbf8 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5575657ccbd8 <col:60> 'int' 0
|       `-CallExpr 0x5575657cce20 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x5575657cce08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5575657ccde8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5575657cce60 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5575657ccce8 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5575657cce78 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5575657ccd18 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x5575657cce90 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5575657ccd58 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x5575657ccea8 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5575657ccdd0 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5575657ccdb8 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5575657ccd78 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x5575657ca700 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x5575657ca670 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x5575657ca7c8 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x5575657ca888 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x5575657ca9b0 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x5575657caa70 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x5575657cab30 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x5575657cac20 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x5575657cac80 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5575657cad10 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x5575657cb0d8 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x5575657cb0d8
| `-ParmVarDecl 0x5575657cb1e8 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x5575657cb8a8 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x5575657cb8a8
  `-ParmVarDecl 0x5575657cb9b8 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756573e890 prev 0x557565720520 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x55756573e9c8 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x55756573ea58 <col:33, col:39> col:33 public
|-EnumDecl 0x55756573ea80 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x55756573ebc0 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x55756573eba0 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x55756573eb80 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x55756573eb40 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x55756573eb60 <col:26> 'int' 16
| `-EnumConstantDecl 0x55756573ec90 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x55756573ec70 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x55756573ec50 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x55756573ec10 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x55756573ec30 <col:47> 'int' 31
|-EnumDecl 0x55756573ece0 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x55756573ee20 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x55756573ef40 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756573ee00 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x55756573ede0 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x55756573eda0 <col:26> 'int' 1
| |       `-IntegerLiteral 0x55756573edc0 <col:29> 'int' 15
| `-EnumConstantDecl 0x55756573eef0 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x55756573ef58 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55756573eed0 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x55756573eeb0 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x55756573ee70 <col:51> 'int' 1
|         `-IntegerLiteral 0x55756573ee90 <col:54> 'int' 10
|-CXXConstructorDecl 0x55756573f128 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x55756573ef80 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x55756573f000 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x55756573f2b8 <line:86:5, col:27> col:12 Task 'void (Element *)' inline
| `-ParmVarDecl 0x55756573f1f0 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x55756573f3b0 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x55756573f538 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x5575656a31c8 <col:42, line:100:5>
|   `-ReturnStmt 0x5575656a31b8 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x5575656a31a0 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x5575656a3170 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x5575656a1ef0
|         `-CXXThisExpr 0x5575656a3160 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55756573f600 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x5575656a3248 <col:36, line:105:5>
|   `-ReturnStmt 0x5575656a3238 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x5575656a3220 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5575656a31f0 <col:16> 'void *const' lvalue ->_thunk 0x5575656a1f58
|         `-CXXThisExpr 0x5575656a31e0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55756573f6c0 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x5575656a32c8 <col:37, line:110:5>
|   `-ReturnStmt 0x5575656a32b8 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x5575656a32a0 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5575656a3270 <col:16> 'Element *const' lvalue ->_owner 0x5575656a2018
|         `-CXXThisExpr 0x5575656a3260 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55756573f780 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x55756573f848 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x55756573f908 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x55756573f9c8 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x5575656a33b0 <col:35, line:137:5>
|   `-ReturnStmt 0x5575656a33a0 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x5575656a3368 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x5575656a3338 <col:16, col:24> '<bound member function type>' ->router 0x557565732d30
|         `-ImplicitCastExpr 0x5575656a3388 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5575656a3320 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5575656a32f0 <col:16> 'Element *const' lvalue ->_owner 0x5575656a2018
|               `-CXXThisExpr 0x5575656a32e0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55756573fa88 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x55756573fc88 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x55756573fb38 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x55756573fbb0 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x55756573fe98 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x55756573fd48 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x55756573fdc0 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x55756573ff68 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x5575656a34c0 <col:35, line:181:5>
|   `-ReturnStmt 0x5575656a34b0 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x5575656a3498 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5575656a3480 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x5575656a3450 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x5575656a1b28
|           `-MemberExpr 0x5575656a3408 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|             `-MemberExpr 0x5575656a33d8 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x5575656a1e78
|               `-CXXThisExpr 0x5575656a33c8 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5575656a0b70 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x5575656a35d8 <col:30, line:192:5>
|   `-BinaryOperator 0x5575656a35b8 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5575656a3560 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5575656a1b28
|     | `-MemberExpr 0x5575656a3518 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|     |   `-MemberExpr 0x5575656a34e8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5575656a1e78
|     |     `-CXXThisExpr 0x5575656a34d8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5575656a35a0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5575656a3590 <col:32> 'bool' false
|-CXXMethodDecl 0x5575656a0c30 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x5575656a3928 <col:30, line:206:5>
|   |-BinaryOperator 0x5575656a36d0 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5575656a3678 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5575656a1b28
|   | | `-MemberExpr 0x5575656a3630 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|   | |   `-MemberExpr 0x5575656a3600 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5575656a1e78
|   | |     `-CXXThisExpr 0x5575656a35f0 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5575656a36b8 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5575656a36a8 <col:32> 'bool' true
|   |-CallExpr 0x5575656a3770 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x5575656a3758 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5575656a3738 <col:9> 'void ()' lvalue Function 0x5575657396e0 'click_fence' 'void ()'
|   `-IfStmt 0x5575656a3910 <line:204:9, line:205:32>
|     |-BinaryOperator 0x5575656a3850 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x5575656a3820 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x5575656a37d0 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x5575656a2288
|     | |   `-MemberExpr 0x5575656a37a0 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x5575656a2300
|     | |     `-CXXThisExpr 0x5575656a3790 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x5575656a3838 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x5575656a3800 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x5575656a38d0 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x5575656a3880 <col:13> '<bound member function type>' ->complete_schedule 0x5575656a2d00
|       | `-CXXThisExpr 0x5575656a3870 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x5575656a38f8 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x5575656a38b0 <col:31> 'int' 0
|-CXXMethodDecl 0x5575656a0cf0 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x5575656a3a50 <col:35, line:240:5>
|   `-BinaryOperator 0x5575656a3a30 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5575656a39d8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5575656a1b28
|     | `-MemberExpr 0x5575656a3990 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|     |   `-MemberExpr 0x5575656a3960 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5575656a1e78
|     |     `-CXXThisExpr 0x5575656a3950 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5575656a3a18 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5575656a3a08 <col:32> 'bool' true
|-CXXMethodDecl 0x5575656a0db0 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x5575656a3c68 <col:37, line:253:5>
|   |-BinaryOperator 0x5575656a3b48 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5575656a3af0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5575656a1b28
|   | | `-MemberExpr 0x5575656a3aa8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|   | |   `-MemberExpr 0x5575656a3a78 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5575656a1e78
|   | |     `-CXXThisExpr 0x5575656a3a68 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5575656a3b30 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5575656a3b20 <col:32> 'bool' false
|   `-BinaryOperator 0x5575656a3c48 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5575656a3bf0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5575656a1b88
|     | `-MemberExpr 0x5575656a3ba8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|     |   `-MemberExpr 0x5575656a3b78 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5575656a1e78
|     |     `-CXXThisExpr 0x5575656a3b68 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5575656a3c30 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5575656a3c20 <col:41> 'bool' true
|-CXXMethodDecl 0x5575656a0e70 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x5575656a3de8 <col:37, line:264:5>
|   |-BinaryOperator 0x5575656a3d68 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5575656a3d10 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5575656a1b88
|   | | `-MemberExpr 0x5575656a3cc8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5575656a1c48
|   | |   `-MemberExpr 0x5575656a3c98 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5575656a1e78
|   | |     `-CXXThisExpr 0x5575656a3c88 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5575656a3d50 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5575656a3d40 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x5575656a3dc8 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x5575656a3d98 <col:9> '<bound member function type>' ->reschedule 0x5575656a0c30
|       `-CXXThisExpr 0x5575656a3d88 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x5575656a0fb8 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x5575656a0f28 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x5575656a1088 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x5575656a11d0 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x5575656a1140 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x5575656a1320 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x5575656a1290 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x5575656a13e8 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x5575656a14a8 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x5575656a1548 <col:53> "" ""
|-CXXMethodDecl 0x5575656a15e0 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x5575656a1680 <col:47> "" ""
|-AccessSpecDecl 0x5575656a16f0 <line:303:3, col:10> col:3 private
|-FieldDecl 0x5575656a1730 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x5575656a1798 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x5575656a17e8 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575656a1908 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x5575656a1998 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x5575656a1ac8 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x5575656a1b28 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x5575656a1b88 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5575657d1f68 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5575657d2040 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x5575657d22f8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5575657d22f8
| | | `-ParmVarDecl 0x5575657d2408 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x5575657d24a8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5575657d24a8
| |   `-ParmVarDecl 0x5575657d25b8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x5575656a1c48 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x5575656a1ca8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x5575656a1c48 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5575656a1ac8 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x5575656a1d00 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x5575656a1c48 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5575656a1b28 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x5575656a1d58 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x5575656a1c48 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5575656a1b88 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x5575656a1db0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5575657d1e78 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5575657d27d8 <col:11>
| |-CXXConstructorDecl 0x5575657d2148 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5575657d2148
| | `-ParmVarDecl 0x5575657d2258 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x5575657d2658 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5575657d2658
| | `-ParmVarDecl 0x5575657d2768 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x557565924bf0 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x5575656a1e78 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x5575656a1ef0 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x5575656a1f58 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5575656a1fb8 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x5575656a2018 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5575656a2068 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575656a2188 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x5575656a2228 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x5575656a2288 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x5575657cb388 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5575657cb388
| | `-ParmVarDecl 0x5575657cb498 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x5575657cb538 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5575657cb538
| | `-ParmVarDecl 0x5575657cb648 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x5575657cb6b8 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5575657cbf38 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5575657cbf38
| | `-ParmVarDecl 0x5575657cc048 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x5575657cc0b8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5575657cc0b8
| | `-ParmVarDecl 0x5575657cc1c8 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x5575657d2838 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5575657d2910 <col:11>
|-FieldDecl 0x5575656a2300 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x5575656a2448 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x5575656a2388 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x5575656a25f8 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x5575656a2508 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x5575656a26c0 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x5575656a2780 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x5575656a2840 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x5575656a3ef8 <col:41, line:355:5>
|   `-ReturnStmt 0x5575656a3ee8 <line:354:9, col:38>
|     `-BinaryOperator 0x5575656a3ec8 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x5575656a3e98 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x5575656a3e48 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x5575656a2288
|       |   `-MemberExpr 0x5575656a3e18 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x5575656a2300
|       |     `-CXXThisExpr 0x5575656a3e08 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x5575656a3eb0 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5575656a3e78 <col:38> 'int' 0
|-CXXMethodDecl 0x5575656a2900 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x5575656a2a40 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x5575656a29b0 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x5575656a2bb8 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x5575656a2af8 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x5575656a2d00 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x5575656a2c70 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x5575656a2dc8 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x5575656a2f90 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x5575656a2e78 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x5575656a2ef8 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x5575656a3090 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x5575656a3120 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | ActiveNotifier::task_or_signal_t
         0 |   class Task * t
         0 |   Notifier::callback_type f
         0 |   void * v
         0 |   uintptr_t p
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657e1528 <../dummy_inc/click/notifier.hh:151:13, line:156:5> line:151:13 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x5575657e1658 <line:152:2, col:8> col:8 referenced t 'Task *'
|-FieldDecl 0x5575657e16b8 <line:153:2, col:16> col:16 referenced f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
|-FieldDecl 0x5575657e1720 <line:154:2, col:8> col:8 referenced v 'void *'
`-FieldDecl 0x5575657e1780 <line:155:2, col:12> col:12 referenced p 'uintptr_t':'unsigned long'

Layout: <CGRecordLayout
  LLVMType:%"union.ActiveNotifier::task_or_signal_t" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657e0600 <../dummy_inc/click/notifier.hh:132:1, line:167:1> line:132:7 referenced class ActiveNotifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Notifier'
|-CXXRecordDecl 0x5575657e0758 <col:1, col:7> col:7 implicit referenced class ActiveNotifier
|-AccessSpecDecl 0x5575657e07e8 <col:42, col:48> col:42 public
|-CXXConstructorDecl 0x5575657e08f8 <line:134:5, col:45> col:5 ActiveNotifier 'void (Notifier::SearchOp)'
| `-ParmVarDecl 0x5575657e0820 <col:20, col:34> col:29 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x5575657e2110 <col:34> 'Notifier::SearchOp' EnumConstant 0x5575657db2a0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x5575657e09f0 <line:135:5, col:21> col:5 used ~ActiveNotifier 'void () noexcept'
| `-Overrides: [ 0x5575657dba28 Notifier::~Notifier 'void () noexcept' ]
|-CXXMethodDecl 0x5575657e0c00 <line:137:5, col:55> col:9 add_activate_callback 'int (Notifier::callback_type, void *)'
| |-Overrides: [ 0x5575657dd3a0 Notifier::add_activate_callback 'int (Notifier::callback_type, void *)' ]
| |-ParmVarDecl 0x5575657e0ae0 <col:31, col:45> col:45 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657e0b60 <col:48, col:54> col:54 v 'void *'
|-CXXMethodDecl 0x5575657e0dd8 <line:138:5, col:59> col:10 remove_activate_callback 'void (Notifier::callback_type, void *)'
| |-Overrides: [ 0x5575657dd5f8 Notifier::remove_activate_callback 'void (Notifier::callback_type, void *)' ]
| |-ParmVarDecl 0x5575657e0cc0 <col:35, col:49> col:49 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657e0d40 <col:52, col:58> col:58 v 'void *'
|-CXXMethodDecl 0x5575657e1098 <line:139:5, col:70> col:10 listeners 'void (Vector<Task *> &) const'
| |-ParmVarDecl 0x5575657e0f70 <col:20, col:35> col:35 v 'Vector<Task *> &'
| `-DeprecatedAttr 0x5575657e1140 <col:59> "" ""
|-CXXMethodDecl 0x5575657e12d0 <line:141:5, col:61> col:17 used set_active 'void (bool, bool)' inline
| |-ParmVarDecl 0x5575657e11c0 <col:28, col:33> col:33 active 'bool'
| `-ParmVarDecl 0x5575657e1238 <col:41, col:57> col:46 schedule 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5575657e2130 <col:57> 'bool' true
|-CXXMethodDecl 0x5575657e13a0 <line:142:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x5575657e1460 <line:143:5, col:23> col:17 sleep 'void ()' inline
|-AccessSpecDecl 0x5575657e1500 <line:149:3, col:10> col:3 private
|-CXXRecordDecl 0x5575657e1528 <line:151:13, line:156:5> line:151:13 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x5575657e1658 <line:152:2, col:8> col:8 referenced t 'Task *'
| |-FieldDecl 0x5575657e16b8 <line:153:2, col:16> col:16 referenced f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| |-FieldDecl 0x5575657e1720 <line:154:2, col:8> col:8 referenced v 'void *'
| `-FieldDecl 0x5575657e1780 <line:155:2, col:12> col:12 referenced p 'uintptr_t':'unsigned long'
|-TypedefDecl 0x5575657e1848 <line:151:5, line:156:7> col:7 referenced task_or_signal_t 'union task_or_signal_t':'ActiveNotifier::task_or_signal_t'
| `-ElaboratedType 0x5575657e17f0 'union task_or_signal_t' sugar
|   `-RecordType 0x5575657e15c0 'ActiveNotifier::task_or_signal_t'
|     `-CXXRecord 0x5575657e1528 ''
|-FieldDecl 0x5575657e18c8 <line:158:5, col:11> col:11 referenced _listener1 'Task *'
|-FieldDecl 0x5575657e19a8 <line:159:5, col:23> col:23 referenced _listeners 'ActiveNotifier::task_or_signal_t *'
|-CXXMethodDecl 0x5575657e1b28 <line:161:5, col:46> col:9 listener_add 'int (Notifier::callback_type, void *)'
| |-ParmVarDecl 0x5575657e1a08 <col:22, col:36> col:36 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657e1a88 <col:39, col:45> col:45 v 'void *'
|-CXXMethodDecl 0x5575657e1d08 <line:162:5, col:49> col:9 listener_remove 'int (Notifier::callback_type, void *)'
| |-ParmVarDecl 0x5575657e1be8 <col:25, col:39> col:39 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5575657e1c68 <col:42, col:48> col:48 v 'void *'
|-CXXConstructorDecl 0x5575657e1eb8 <line:164:5, col:41> col:5 ActiveNotifier 'void (const ActiveNotifier &)'
| `-ParmVarDecl 0x5575657e1df8 <col:20, col:40> col:41 'const ActiveNotifier &'
`-CXXMethodDecl 0x5575657e2068 <line:165:5, col:52> col:21 operator= 'ActiveNotifier &(const ActiveNotifier &)'
  `-ParmVarDecl 0x5575657e1f78 <col:31, col:51> col:52 'const ActiveNotifier &'

Layout: <CGRecordLayout
  LLVMType:%class.ActiveNotifier = type { %class.Notifier.base, %class.Task*, %"union.ActiveNotifier::task_or_signal_t"* }
  NonVirtualBaseLLVMType:%class.ActiveNotifier = type { %class.Notifier.base, %class.Task*, %"union.ActiveNotifier::task_or_signal_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class InfiniteSource
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class ActiveNotifier (base)
       112 |     class Notifier (primary base)
       112 |       (Notifier vtable pointer)
       120 |       class NotifierSignal _signal
       120 |         union NotifierSignal::vmvalue _v
       120 |           class atomic_uint32_t * v1
       120 |           struct NotifierSignal::vmpair * vm
       128 |         uint32_t _mask
       136 |       enum Notifier::SearchOp _search_op
       144 |     class Task * _listener1
       152 |     ActiveNotifier::task_or_signal_t * _listeners
       160 |   class Packet * _packet
       168 |   int _burstsize
       176 |   InfiniteSource::counter_t _limit
       184 |   InfiniteSource::ucounter_t _count
       192 |   int _datasize
       196 |   _Bool _active
       197 |   _Bool _timestamp
       200 |   class Task _task
       200 |     struct TaskLink (base)
       200 |       struct TaskLink * _prev
       208 |       struct TaskLink * _next
       216 |       unsigned int _pass
       220 |     unsigned int _stride
       224 |     int _tickets
       228 |     union Task::Status _status
       228 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       228 |         int16_t home_thread_id
       230 |         uint8_t is_scheduled
       231 |         uint8_t is_strong_unscheduled
       228 |       uint32_t status
       232 |     TaskCallback _hook
       240 |     void * _thunk
       248 |     class RouterThread * _thread
       256 |     class Element * _owner
       264 |     union Task::Pending _pending_nextptr
       264 |       class Task * t
       264 |       uintptr_t x
       272 |   class String _data
       272 |     struct String::rep_t _r
       272 |       const char * data
       280 |       int length
       288 |       struct String::memo_t * memo
       296 |   class NotifierSignal _nonfull_signal
       296 |     union NotifierSignal::vmvalue _v
       296 |       class atomic_uint32_t * v1
       296 |       struct NotifierSignal::vmpair * vm
       304 |     uint32_t _mask
       312 |   class HandlerCall * _end_h
           | [sizeof=320, dsize=320, align=8,
           |  nvsize=320, nvalign=8]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656f9048 prev 0x5575656ee250 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575656f9140 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5575656f9230 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5575656f9358 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5575656f94d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5575656f9658 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5575656f97d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55756570a608 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55756570ae78 <col:11>
|-CXXDestructorDecl 0x55756570a6e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55756570a818 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55756570a818
| `-ParmVarDecl 0x55756570a928 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55756570a9c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55756570a9c8
| `-ParmVarDecl 0x55756570aad8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55756570d898 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55756570d9a8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55756570dc28 <col:11>
|   `-ReturnStmt 0x55756570dc18 <col:11>
|     `-UnaryOperator 0x55756570dc00 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55756570dbf0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55756570da18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55756570da18
  `-ParmVarDecl 0x55756570db28 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656f9840 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5575656f9958 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5575656f99f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5575656f9a60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5575656f9ac8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5575656f9b30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5575656f9b90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5575656f9c50 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5575656f9cb0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5575656f9d10 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55756570a518 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5575656f99f8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55756570ae88 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55756570aee0 <col:12>
|-CXXConstructorDecl 0x55756570ab48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55756570ab48
| `-ParmVarDecl 0x55756570ac58 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55756570acf8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55756570acf8
| `-ParmVarDecl 0x55756570ae08 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55756570cf80 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656e7960 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575656e7a78 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5575656e7b08 <col:16, col:22> col:16 public
|-EnumDecl 0x5575656e7b30 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5575656e7c30 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5575656e7d10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656e7c10 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5575656e7bf0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5575656e7cc0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5575656e7d28 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656e7ca0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5575656e7c80 <col:22> 'int' 64
|-CXXMethodDecl 0x5575656e8068 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5575656e7d50 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575656e7dd0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5575656e7e48 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575656e7ec0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5575656e8128 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5575656e8328 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5575656e81a0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5575656e8218 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5575656e83d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5575656e8538 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5575656e8448 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5575656e85e0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5575656e8940 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5575656e88d0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5575656e8870 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5575656e8830 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5575651ba2d0 'void'
|       |-PointerType 0x557565467d00 'unsigned char *'
|       | `-BuiltinType 0x5575651ba3d0 'unsigned char'
|       |-TypedefType 0x557565264050 'size_t' sugar
|       | |-Typedef 0x55756522ab20 'size_t'
|       | `-BuiltinType 0x5575651ba430 'unsigned long'
|       `-PointerType 0x5575651baad0 'void *'
|         `-BuiltinType 0x5575651ba2d0 'void'
|-CXXMethodDecl 0x5575656e8db8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5575656e89b0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5575656e8a28 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575656e8ac0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5575656e8b40 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5575657034b0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x557565703498 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x557565703460 <col:58> 'int' 0
| |-ParmVarDecl 0x5575656e8bc0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5575657034d8 <col:76> 'int' 0
| |-ParmVarDecl 0x5575656e8c40 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5575657034f8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5575656e8e88 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5575656e8f08 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5575656e8fc8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5575656e9068 <col:20>
| `-OptimizeNoneAttr 0x5575656e90c0 <col:30>
|-CXXMethodDecl 0x5575656e9138 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5575656e91d8 <col:20>
| `-OptimizeNoneAttr 0x5575656e9230 <col:30>
|-CXXMethodDecl 0x5575656e92a8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5575656e9348 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5575656e93f8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5575656e9498 <col:20>
| |-OptimizeNoneAttr 0x5575656e94f0 <col:30>
| `-WarnUnusedResultAttr 0x5575656e9518 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5575656e9570 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5575656e9610 <col:20>
| `-OptimizeNoneAttr 0x5575656e9668 <col:30>
|-CXXMethodDecl 0x5575656e96b8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5575656e9758 <col:20>
| `-OptimizeNoneAttr 0x5575656e97b0 <col:30>
|-CXXMethodDecl 0x5575656e97f8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5575656e9898 <col:20>
| `-OptimizeNoneAttr 0x5575656e98f0 <col:30>
|-CXXMethodDecl 0x5575656e9938 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656e99f8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656e9ac0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5575656e9b88 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5575656e9c48 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656e9d68 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5575657035c0 <col:54, line:99:5>
|   `-ReturnStmt 0x5575657035b0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x557565703598 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x557565703568 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5575656fa048
|         `-CXXThisExpr 0x557565703558 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5575656e9f08 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5575656e9e18 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x557565703670 <col:67, line:103:5>
|   `-BinaryOperator 0x557565703650 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5575657035e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5575656fa048
|     | `-CXXThisExpr 0x5575657035d8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x557565703638 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x557565703618 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5575656e9e18 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5575656ea000 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5575657036f0 <col:33, line:107:5>
|   `-ReturnStmt 0x5575657036e0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5575657036c8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x557565703698 <col:16> 'void *' lvalue ->_destructor_argument 0x5575656fa0b0
|         `-CXXThisExpr 0x557565703688 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5575656ea0c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x557565703d20 <col:25, line:113:5>
|   |-ParenExpr 0x557565703a68 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x557565703a38 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5575657037a8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x557565703780 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x557565703748 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x557565703718 <col:24> '<bound member function type>' ->shared 0x5575656e9138
|   |   |       `-ImplicitCastExpr 0x557565703768 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x557565703708 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x557565703808 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5575657037e8 <col:42> 'int' 0
|   |   `-CallExpr 0x557565703998 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x557565703980 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565703960 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5575657039d8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565703878 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5575657039f0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657038a0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565703a08 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5575657038d8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x557565703a20 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565703948 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565703930 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5575657038f8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x557565703c68 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x557565703a98 <col:2> 'unsigned char *' lvalue ->_head 0x5575656f9e50
|   | | `-CXXThisExpr 0x557565703a88 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x557565703c50 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x557565703c30 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x557565703ad8 <col:10> 'unsigned char *' lvalue ->_data 0x5575656f9eb8
|   |     | `-CXXThisExpr 0x557565703ac8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x557565703c18 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x557565703bf8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x557565703b18 <col:18> 'unsigned char *' lvalue ->_tail 0x5575656f9f20
|   |         | `-CXXThisExpr 0x557565703b08 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x557565703be0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x557565703bc0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x557565703b58 <col:26> 'unsigned char *' lvalue ->_end 0x5575656f9f88
|   |             | `-CXXThisExpr 0x557565703b48 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x557565703ba8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x557565703b88 <col:33> 'int' 0
|   `-BinaryOperator 0x557565703d00 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x557565703c98 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5575656fa048
|     | `-CXXThisExpr 0x557565703c88 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x557565703ce8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x557565703cc8 <col:16> 'int' 0
|-CXXMethodDecl 0x5575656ea200 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5575656ea170 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656ea2a8 <col:20>
| |-OptimizeNoneAttr 0x5575656ea300 <col:30>
| `-WarnUnusedResultAttr 0x5575656ea328 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5575656ea3f8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5575656ea368 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656ea4a0 <col:20>
| |-OptimizeNoneAttr 0x5575656ea4f8 <col:30>
| `-WarnUnusedResultAttr 0x5575656ea520 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5575656ea658 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5575656ea560 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5575656ea700 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5575656ea800 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5575656ea770 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656ea8a8 <col:20>
| `-OptimizeNoneAttr 0x5575656ea900 <col:30>
|-CXXMethodDecl 0x5575656ea9c8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5575656ea938 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5575656eaa70 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5575656eab70 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5575656eaae0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5575656eac18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5575656ead18 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5575656eac88 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656eadc0 <col:20>
| `-OptimizeNoneAttr 0x5575656eae18 <col:30>
|-CXXMethodDecl 0x5575656eafa8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5575656eae58 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5575656eaed0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x557565703518 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5575656eb058 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5575656eb258 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5575656eb0d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5575656eb148 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656eb468 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5575656eb318 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5575656eb390 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656eb678 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5575656eb528 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5575656eb5a8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x557565703528 <col:39> 'int' 0
|-CXXMethodDecl 0x5575656eb748 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5575656eb810 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5575656eb8d8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5575656eb998 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656eba60 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5575656ebba8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5575656ebb18 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5575656ebd78 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5575656ebc68 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5575656ebce0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656ebe48 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5575656ebf08 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5575656ebfa8 <col:20>
| `-OptimizeNoneAttr 0x5575656ec000 <col:30>
|-CXXMethodDecl 0x5575656ec050 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5575656ec0f0 <col:20>
| `-OptimizeNoneAttr 0x5575656ec148 <col:30>
|-CXXMethodDecl 0x5575656ec198 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5575656ec258 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656ec320 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5575656ec3c0 <col:20>
| `-OptimizeNoneAttr 0x5575656ec418 <col:30>
|-CXXMethodDecl 0x5575656ec568 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5575656ec458 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5575656ec4d0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656ec6b8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5575656ec628 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656ec790 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5575656ec850 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5575656ec8f0 <col:20>
| `-OptimizeNoneAttr 0x5575656ec948 <col:30>
|-CXXMethodDecl 0x5575656ec998 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5575656eca38 <col:20>
| `-OptimizeNoneAttr 0x5575656eca90 <col:30>
|-CXXMethodDecl 0x5575656ecae0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5575656ecba8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5575656ecc48 <col:20>
| `-OptimizeNoneAttr 0x5575656ecca0 <col:30>
|-CXXMethodDecl 0x5575656ecce8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5575656ece08 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5575656ecf78 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5575656eceb8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5575656ed068 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5575656ed108 <col:20>
| `-OptimizeNoneAttr 0x5575656ed160 <col:30>
|-CXXMethodDecl 0x5575656ed1b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5575656ed270 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5575656ed4a8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5575656ed320 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5575656ed398 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656ed558 <col:20>
| `-OptimizeNoneAttr 0x5575656ed5b0 <col:30>
|-CXXMethodDecl 0x5575656ed658 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5575656ed6f8 <col:20>
| `-OptimizeNoneAttr 0x5575656ed750 <col:30>
|-CXXMethodDecl 0x5575656ed7a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5575656ed840 <col:20>
| `-OptimizeNoneAttr 0x5575656ed898 <col:30>
|-CXXMethodDecl 0x5575656ed8e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5575656ed980 <col:20>
| `-OptimizeNoneAttr 0x5575656ed9d8 <col:30>
|-CXXMethodDecl 0x5575656edad8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5575656eda10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5575656edb80 <col:20>
| `-OptimizeNoneAttr 0x5575656edbd8 <col:30>
|-CXXMethodDecl 0x5575656edd98 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5575656edc10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5575656edc88 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656ede48 <col:20>
| `-OptimizeNoneAttr 0x5575656edea0 <col:30>
|-CXXMethodDecl 0x5575656edf48 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5575656ee068 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5575656ee188 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5575656ee228 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5575656ee250 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5575656ee378 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5575656ee418 <col:20>
| `-OptimizeNoneAttr 0x5575656ee470 <col:30>
|-CXXMethodDecl 0x5575656ee518 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5575656ee5b8 <col:20>
| `-OptimizeNoneAttr 0x5575656ee610 <col:30>
|-AccessSpecDecl 0x5575656ee638 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5575656ee660 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5575656ee760 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5575656ee7b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656ee740 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5575656ee720 <col:14> 'int' 48
|-CXXMethodDecl 0x5575656ee818 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5575656ee8b8 <col:20>
| `-OptimizeNoneAttr 0x5575656ee910 <col:30>
|-CXXMethodDecl 0x5575656ee988 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5575656eea28 <col:20>
| `-OptimizeNoneAttr 0x5575656eea80 <col:30>
|-CXXMethodDecl 0x5575656eeb48 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5575656eeab8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5575656eece8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5575656eee88 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5575656eed98 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5575656eef30 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5575656ef030 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5575656ef3e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656ef010 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5575656eeff0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5575656ef0c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5575656ef3f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656ef0a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5575656ef080 <col:14> 'int' 1
| |-EnumConstantDecl 0x5575656ef150 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5575656ef410 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656ef130 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5575656ef110 <col:14> 'int' 2
| |-EnumConstantDecl 0x5575656ef1e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5575656ef428 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656ef1c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5575656ef1a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5575656ef270 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5575656ef440 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656ef250 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5575656ef230 <col:13> 'int' 4
| |-EnumConstantDecl 0x5575656ef300 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5575656ef458 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656ef2e0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5575656ef2c0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5575656ef390 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5575656ef470 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656ef370 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5575656ef350 <col:14> 'int' 6
|-CXXMethodDecl 0x5575656ef4d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5575656ef578 <col:20>
| `-OptimizeNoneAttr 0x5575656ef5d0 <col:30>
|-CXXMethodDecl 0x5575656ef6c8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5575656ef608 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5575656ef770 <col:20>
| `-OptimizeNoneAttr 0x5575656ef7c8 <col:30>
|-CXXMethodDecl 0x5575656ef838 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5575656ef960 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5575656efad8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5575656efa10 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5575656efba0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5575656efc68 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5575656efda8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5575656efd18 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5575656efe50 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5575656eff50 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5575656f0150 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656eff30 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5575656eff10 <col:23> 'int' 0
| |-EnumConstantDecl 0x5575656effe0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5575656f0168 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656effc0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5575656effa0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5575656f0070 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5575656f0180 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f0050 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5575656f0030 <col:24> 'int' 0
| `-EnumConstantDecl 0x5575656f0100 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5575656f0198 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656f00e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5575656f00c0 <col:47> 'int' 16
|-CXXMethodDecl 0x5575656f01f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5575656f0368 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5575656f02a8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5575656f0410 <col:20>
| `-OptimizeNoneAttr 0x5575656f0468 <col:30>
|-CXXMethodDecl 0x5575656f04b8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x557565703e40 <col:18, col:36>
|   `-ReturnStmt 0x557565703e30 <col:20, col:33>
|     `-ImplicitCastExpr 0x557565703e18 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x557565703df8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x557565703dc8 <col:27> '<bound member function type>' ->xanno 0x5575656ee518
|           `-CXXThisExpr 0x557565703db8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5575656f05b0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x557565703f50 <col:30, col:48>
|   `-ReturnStmt 0x557565703f40 <col:32, col:45>
|     `-ImplicitCastExpr 0x557565703f28 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x557565703f08 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x557565703ed8 <col:39> '<bound member function type>' ->xanno 0x5575656ee378
|           `-CXXThisExpr 0x557565703ec8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5575656f0698 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5575657040e8 <col:24, col:50>
|   `-ReturnStmt 0x5575657040d8 <col:26, col:47>
|     `-UnaryOperator 0x5575657040c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5575657040a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x557565704088 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557565704038 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5575656f9358
|         |   `-CXXMemberCallExpr 0x557565704018 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x557565703fe8 <col:34> '<bound member function type>' ->xanno 0x5575656ee518
|         |       `-CXXThisExpr 0x557565703fd8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x557565704068 <col:46> 'int' 0
|-CXXMethodDecl 0x5575656f07a0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5575657042b8 <col:36, col:62>
|   `-ReturnStmt 0x5575657042a8 <col:38, col:59>
|     `-UnaryOperator 0x557565704290 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x557565704270 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x557565704258 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5575657041d0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5575656f9358
|         |   `-CXXMemberCallExpr 0x5575657041b0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x557565704180 <col:46> '<bound member function type>' ->xanno 0x5575656ee378
|         |       `-CXXThisExpr 0x557565704170 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x557565704200 <col:58> 'int' 0
|-CXXMethodDecl 0x5575656f08b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x557565704450 <col:26, col:53>
|   `-ReturnStmt 0x557565704440 <col:28, col:50>
|     `-UnaryOperator 0x557565704428 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x557565704408 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5575657043f0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5575657043a0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5575656f9658
|         |   `-CXXMemberCallExpr 0x557565704380 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x557565704350 <col:36> '<bound member function type>' ->xanno 0x5575656ee518
|         |       `-CXXThisExpr 0x557565704340 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5575657043d0 <col:49> 'int' 0
|-CXXMethodDecl 0x5575656f09d8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x557565704628 <col:38, col:65>
|   `-ReturnStmt 0x557565704618 <col:40, col:62>
|     `-UnaryOperator 0x557565704600 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5575657045e0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5575657045c8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557565704538 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5575656f9658
|         |   `-CXXMemberCallExpr 0x557565704518 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5575657044e8 <col:48> '<bound member function type>' ->xanno 0x5575656ee378
|         |       `-CXXThisExpr 0x5575657044d8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x557565704568 <col:61> 'int' 0
|-CXXMethodDecl 0x5575656f0b88 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5575656f0a90 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x557565704cf8 <col:34, line:463:5>
|   |-ParenExpr 0x557565704b40 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x557565704b10 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x557565704778 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565704748 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565704698 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565704680 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565704640 <col:23> 'int' lvalue ParmVar 0x5575656f0a90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565704660 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565704728 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5575657046f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5575657046b8 <col:33> 'int' lvalue ParmVar 0x5575656f0a90 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x557565704710 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5575657046d8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5575657047d8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5575657047b8 <col:56> 'int' 0
|   |   `-CallExpr 0x557565704a70 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x557565704a58 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565704a38 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565704ab0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657048c8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x557565704ac8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657048f8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565704ae0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565704930 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x557565704af8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565704a20 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565704a08 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5575657049c8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x557565704ce8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x557565704cd0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x557565704cb0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x557565704c80 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x557565704c30 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5575656f9358
|         |   `-CXXMemberCallExpr 0x557565704c10 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x557565704be0 <col:9> '<bound member function type>' ->xanno 0x5575656ee378
|         |       `-CXXThisExpr 0x557565704bd0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x557565704c98 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x557565704c60 <col:21> 'int' lvalue ParmVar 0x5575656f0a90 'i' 'int'
|-CXXMethodDecl 0x5575656f0dd8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5575656f0c48 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5575656f0cc0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x557565705388 <col:40, line:472:5>
|   |-ParenExpr 0x5575657051a0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x557565705170 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x557565704e50 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565704e20 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565704d70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565704d58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565704d18 <col:23> 'int' lvalue ParmVar 0x5575656f0c48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565704d38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565704e00 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565704dd0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565704d90 <col:33> 'int' lvalue ParmVar 0x5575656f0c48 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x557565704de8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x557565704db0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x557565704eb0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565704e90 <col:56> 'int' 0
|   |   `-CallExpr 0x5575657050d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5575657050b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565705098 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565705110 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565704f20 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x557565705128 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565704f50 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565705140 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565704f88 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x557565705158 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565705080 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565705068 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565705028 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x557565705368 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x557565705310 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5575657052e0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x557565705290 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5575656f9358
|     | |   `-CXXMemberCallExpr 0x557565705270 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x557565705240 <col:2> '<bound member function type>' ->xanno 0x5575656ee518
|     | |       `-CXXThisExpr 0x557565705230 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5575657052f8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5575657052c0 <col:14> 'int' lvalue ParmVar 0x5575656f0c48 'i' 'int'
|     `-ImplicitCastExpr 0x557565705350 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x557565705330 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5575656f0cc0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5575656f0f98 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5575656f0ea0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x557565705b08 <col:36, line:485:5>
|   |-ParenExpr 0x557565705870 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565705840 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565705520 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5575657054f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565705400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5575657053e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575657053a8 <col:23> 'int' lvalue ParmVar 0x5575656f0ea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5575657053c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5575657054d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5575657054b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565705420 <col:33> 'int' lvalue ParmVar 0x5575656f0ea0 'i' 'int'
|   |   |     `-BinaryOperator 0x557565705498 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565705480 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565705440 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565705460 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557565705580 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565705560 <col:60> 'int' 0
|   |   `-CallExpr 0x5575657057a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565705788 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565705768 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5575657057e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657055f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5575657057f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565705628 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565705810 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565705660 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x557565705828 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565705750 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565705738 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5575657056f8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x557565705af8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x557565705ae0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x557565705ac8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557565705a98 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x557565705a38 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x557565705a08 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557565705980 <col:61, col:70> 'char const[48]' lvalue ->c 0x5575656f9230
|             |   `-CXXMemberCallExpr 0x557565705960 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557565705930 <col:61> '<bound member function type>' ->xanno 0x5575656ee378
|             |       `-CXXThisExpr 0x557565705920 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557565705a20 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5575657059b0 <col:74> 'int' lvalue ParmVar 0x5575656f0ea0 'i' 'int'
|-CXXMethodDecl 0x5575656f11e8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5575656f1058 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5575656f10d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x557565706258 <col:42, line:500:5>
|   |-ParenExpr 0x557565705ff0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565705fc0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565705ca0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565705c70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565705b80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565705b68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565705b28 <col:23> 'int' lvalue ParmVar 0x5575656f1058 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565705b48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565705c50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565705c38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565705ba0 <col:33> 'int' lvalue ParmVar 0x5575656f1058 'i' 'int'
|   |   |     `-BinaryOperator 0x557565705c18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565705c00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565705bc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565705be0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557565705d00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565705ce0 <col:60> 'int' 0
|   |   `-CallExpr 0x557565705f20 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565705f08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565705ee8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565705f60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565705d70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557565705f78 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565705da8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565705f90 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565705de0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x557565705fa8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565705ed0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565705eb8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565705e78 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x557565706238 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5575657061e8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5575657061b8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x557565706160 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557565706130 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5575657060e0 <col:48, col:57> 'char [48]' lvalue ->c 0x5575656f9230
|     |     |   `-CXXMemberCallExpr 0x5575657060c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557565706090 <col:48> '<bound member function type>' ->xanno 0x5575656ee518
|     |     |       `-CXXThisExpr 0x557565706080 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557565706148 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557565706110 <col:61> 'int' lvalue ParmVar 0x5575656f1058 'i' 'int'
|     `-ImplicitCastExpr 0x557565706220 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x557565706200 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5575656f10d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5575656f13a8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5575656f12b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5575657069b8 <col:35, line:513:5>
|   |-ParenExpr 0x5575657066c8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565706698 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5575657063f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5575657063c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5575657062d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5575657062b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565706278 <col:23> 'int' lvalue ParmVar 0x5575656f12b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565706298 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5575657063a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565706388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5575657062f0 <col:33> 'int' lvalue ParmVar 0x5575656f12b0 'i' 'int'
|   |   |     `-BinaryOperator 0x557565706368 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565706350 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565706310 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565706330 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557565706450 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565706430 <col:60> 'int' 0
|   |   `-CallExpr 0x5575657065f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5575657065e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575657065c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565706638 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657064c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557565706650 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657064f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565706668 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565706530 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x557565706680 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5575657065a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565706590 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565706550 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5575657069a8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x557565706990 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x557565706978 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557565706948 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5575657068c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x557565706890 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557565706840 <col:60, col:69> 'char const[48]' lvalue ->c 0x5575656f9230
|             |   `-CXXMemberCallExpr 0x557565706820 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5575657067f0 <col:60> '<bound member function type>' ->xanno 0x5575656ee378
|             |       `-CXXThisExpr 0x5575657067e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5575657068a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557565706870 <col:73> 'int' lvalue ParmVar 0x5575656f12b0 'i' 'int'
|-CXXMethodDecl 0x5575656f15f8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5575656f1468 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5575656f14e0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5575657070d8 <col:41, line:528:5>
|   |-ParenExpr 0x557565706e60 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565706e30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565706b50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565706b20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565706a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565706a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575657069d8 <col:23> 'int' lvalue ParmVar 0x5575656f1468 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5575657069f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565706b00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565706ae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565706a50 <col:33> 'int' lvalue ParmVar 0x5575656f1468 'i' 'int'
|   |   |     `-BinaryOperator 0x557565706ac8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565706ab0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565706a70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565706a90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557565706bb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565706b90 <col:60> 'int' 0
|   |   `-CallExpr 0x557565706d90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565706d78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565706d58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565706dd0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565706c20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557565706de8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565706c58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565706e00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565706c90 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x557565706e18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565706d40 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565706d28 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565706ce8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5575657070b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x557565707068 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557565707038 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x557565706fe0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557565706fa0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557565706f50 <col:47, col:56> 'char [48]' lvalue ->c 0x5575656f9230
|     |     |   `-CXXMemberCallExpr 0x557565706f30 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557565706f00 <col:47> '<bound member function type>' ->xanno 0x5575656ee518
|     |     |       `-CXXThisExpr 0x557565706ef0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557565706fb8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557565706f80 <col:60> 'int' lvalue ParmVar 0x5575656f1468 'i' 'int'
|     `-ImplicitCastExpr 0x5575657070a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x557565707080 <col:65> 'int16_t':'short' lvalue ParmVar 0x5575656f14e0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5575656f17b8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5575656f16c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5575657077a8 <col:36, line:541:5>
|   |-ParenExpr 0x557565707548 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565707518 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565707270 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565707240 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565707150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565707138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575657070f8 <col:23> 'int' lvalue ParmVar 0x5575656f16c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565707118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565707220 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565707208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565707170 <col:33> 'int' lvalue ParmVar 0x5575656f16c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5575657071e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5575657071d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565707190 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5575657071b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5575657072d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5575657072b0 <col:60> 'int' 0
|   |   `-CallExpr 0x557565707478 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565707460 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565707440 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5575657074b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565707340 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5575657074d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565707378 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5575657074e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5575657073b0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x557565707500 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565707428 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565707410 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5575657073d0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x557565707798 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x557565707780 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x557565707768 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557565707738 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5575657076e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5575657076b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557565707660 <col:61, col:70> 'char const[48]' lvalue ->c 0x5575656f9230
|             |   `-CXXMemberCallExpr 0x557565707640 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557565707610 <col:61> '<bound member function type>' ->xanno 0x5575656ee378
|             |       `-CXXThisExpr 0x557565707600 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5575657076c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557565707690 <col:74> 'int' lvalue ParmVar 0x5575656f16c0 'i' 'int'
|-CXXMethodDecl 0x5575656f1988 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5575656f1878 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5575656f18f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5575656f1a38 <col:20>
| `-OptimizeNoneAttr 0x5575656f1a90 <col:30>
|-CXXMethodDecl 0x5575656f1bc8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5575656f1ad0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x557565707e78 <col:35, line:562:5>
|   |-ParenExpr 0x557565707c18 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565707be8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565707940 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565707910 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565707820 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565707808 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5575657077c8 <col:23> 'int' lvalue ParmVar 0x5575656f1ad0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5575657077e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5575657078f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5575657078d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565707840 <col:33> 'int' lvalue ParmVar 0x5575656f1ad0 'i' 'int'
|   |   |     `-BinaryOperator 0x5575657078b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5575657078a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565707860 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565707880 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5575657079a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565707980 <col:60> 'int' 0
|   |   `-CallExpr 0x557565707b48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565707b30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565707b10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565707b88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565707a10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x557565707ba0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565707a48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565707bb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565707a80 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x557565707bd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565707af8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565707ae0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565707aa0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x557565707e68 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x557565707e50 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x557565707e38 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557565707e08 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x557565707db0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x557565707d80 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557565707d30 <col:60, col:69> 'char const[48]' lvalue ->c 0x5575656f9230
|             |   `-CXXMemberCallExpr 0x557565707d10 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557565707ce0 <col:60> '<bound member function type>' ->xanno 0x5575656ee378
|             |       `-CXXThisExpr 0x557565707cd0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557565707d98 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557565707d60 <col:73> 'int' lvalue ParmVar 0x5575656f1ad0 'i' 'int'
|-CXXMethodDecl 0x5575656f1dd8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5575656f1c88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5575656f1d00 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x557565708558 <col:41, line:577:5>
|   |-ParenExpr 0x5575657082e8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5575657082b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565708010 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565707fe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565707ef0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565707ed8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565707e98 <col:23> 'int' lvalue ParmVar 0x5575656f1c88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565707eb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565707fc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565707fa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565707f10 <col:33> 'int' lvalue ParmVar 0x5575656f1c88 'i' 'int'
|   |   |     `-BinaryOperator 0x557565707f88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565707f70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565707f30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565707f50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x557565708070 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565708050 <col:60> 'int' 0
|   |   `-CallExpr 0x557565708218 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565708200 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575657081e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565708258 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657080e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x557565708270 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565708118 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565708288 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565708150 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5575657082a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5575657081c8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5575657081b0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565708170 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x557565708538 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5575657084e8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5575657084b8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x557565708458 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557565708428 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5575657083d8 <col:47, col:56> 'char [48]' lvalue ->c 0x5575656f9230
|     |     |   `-CXXMemberCallExpr 0x5575657083b8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557565708388 <col:47> '<bound member function type>' ->xanno 0x5575656ee518
|     |     |       `-CXXThisExpr 0x557565708378 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557565708440 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557565708408 <col:60> 'int' lvalue ParmVar 0x5575656f1c88 'i' 'int'
|     `-ImplicitCastExpr 0x557565708520 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x557565708500 <col:65> 'int32_t':'int' lvalue ParmVar 0x5575656f1d00 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5575656f1f98 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5575656f1ea0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x557565708c88 <col:36, line:591:5>
|   |-ParenExpr 0x5575657089c8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x557565708998 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5575657086f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5575657086c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5575657085d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5575657085b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565708578 <col:23> 'int' lvalue ParmVar 0x5575656f1ea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565708598 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5575657086a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565708688 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5575657085f0 <col:33> 'int' lvalue ParmVar 0x5575656f1ea0 'i' 'int'
|   |   |     `-BinaryOperator 0x557565708668 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565708650 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565708610 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565708630 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x557565708750 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565708730 <col:60> 'int' 0
|   |   `-CallExpr 0x5575657088f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5575657088e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5575657088c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565708938 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657087c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x557565708950 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657087f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565708968 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565708830 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x557565708980 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5575657088a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565708890 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565708850 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x557565708c78 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x557565708c60 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x557565708c48 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557565708c18 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x557565708b90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x557565708b60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557565708b10 <col:61, col:70> 'char const[48]' lvalue ->c 0x5575656f9230
|             |   `-CXXMemberCallExpr 0x557565708af0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557565708ac0 <col:61> '<bound member function type>' ->xanno 0x5575656ee378
|             |       `-CXXThisExpr 0x557565708ab0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557565708b78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557565708b40 <col:74> 'int' lvalue ParmVar 0x5575656f1ea0 'i' 'int'
|-CXXMethodDecl 0x5575656f21e8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5575656f2058 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5575656f20d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x557565709368 <col:42, line:606:5>
|   |-ParenExpr 0x5575657090f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5575657090c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557565708e20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565708df0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565708d00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565708ce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565708ca8 <col:23> 'int' lvalue ParmVar 0x5575656f2058 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565708cc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565708dd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557565708db8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565708d20 <col:33> 'int' lvalue ParmVar 0x5575656f2058 'i' 'int'
|   |   |     `-BinaryOperator 0x557565708d98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565708d80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565708d40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557565708d60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x557565708e80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565708e60 <col:60> 'int' 0
|   |   `-CallExpr 0x557565709028 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557565709010 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565708ff0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557565709068 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565708ef0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x557565709080 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565708f28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557565709098 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565708f60 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5575657090b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565708fd8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565708fc0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565708f80 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x557565709348 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5575657092f8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5575657092c8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x557565709268 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557565709238 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5575657091e8 <col:48, col:57> 'char [48]' lvalue ->c 0x5575656f9230
|     |     |   `-CXXMemberCallExpr 0x5575657091c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557565709198 <col:48> '<bound member function type>' ->xanno 0x5575656ee518
|     |     |       `-CXXThisExpr 0x557565709188 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557565709250 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557565709218 <col:61> 'int' lvalue ParmVar 0x5575656f2058 'i' 'int'
|     `-ImplicitCastExpr 0x557565709330 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x557565709310 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5575656f20d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5575656f2380 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5575656f22b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x557565709bd8 <col:33, line:620:5>
|   |-ParenExpr 0x557565709950 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x557565709920 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x557565709570 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565709540 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5575657093e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5575657093c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565709388 <col:23> 'int' lvalue ParmVar 0x5575656f22b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5575657093a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565709520 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x557565709508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565709400 <col:33> 'int' lvalue ParmVar 0x5575656f22b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5575657094e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5575657094d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565709420 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5575657094a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x557565709490 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x557565709458 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5575657095d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5575657095b0 <col:79> 'int' 0
|   |   `-CallExpr 0x557565709880 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x557565709868 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557565709848 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5575657098c0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5575657096b8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5575657098d8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565709700 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5575657098f0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565709738 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x557565709908 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557565709830 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557565709818 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5575657097d8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x557565709bc8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x557565709bb0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x557565709b98 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557565709b68 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x557565709ae0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x557565709ab0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557565709a60 <col:67, col:76> 'char const[48]' lvalue ->c 0x5575656f9230
|             |   `-CXXMemberCallExpr 0x557565709a40 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557565709a10 <col:67> '<bound member function type>' ->xanno 0x5575656ee378
|             |       `-CXXThisExpr 0x557565709a00 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557565709ac8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557565709a90 <col:80> 'int' lvalue ParmVar 0x5575656f22b0 'i' 'int'
|-CXXMethodDecl 0x5575656f2598 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5575656f2440 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5575656f24c0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55756570a400 <col:45, line:635:5>
|   |-ParenExpr 0x55756570a148 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55756570a118 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x557565709de0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557565709db0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557565709c50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557565709c38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557565709bf8 <col:23> 'int' lvalue ParmVar 0x5575656f2440 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557565709c18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557565709d90 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x557565709d78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557565709c70 <col:33> 'int' lvalue ParmVar 0x5575656f2440 'i' 'int'
|   |   |     `-BinaryOperator 0x557565709d58 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557565709d40 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557565709c90 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5575656ee760 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x557565709d18 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x557565709d00 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x557565709cc8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x557565709e40 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557565709e20 <col:79> 'int' 0
|   |   `-CallExpr 0x55756570a078 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55756570a060 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55756570a040 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55756525ae60 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55756570a0b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565709eb0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55756570a0d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557565709ef8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55756570a0e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557565709f30 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55756570a100 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55756570a028 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55756570a010 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557565709fc8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55756570a3e0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55756570a348 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55756570a318 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55756570a2b8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55756570a288 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55756570a238 <col:54, col:63> 'char [48]' lvalue ->c 0x5575656f9230
|     |     |   `-CXXMemberCallExpr 0x55756570a218 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55756570a1e8 <col:54> '<bound member function type>' ->xanno 0x5575656ee518
|     |     |       `-CXXThisExpr 0x55756570a1d8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55756570a2a0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55756570a268 <col:67> 'int' lvalue ParmVar 0x5575656f2440 'i' 'int'
|     `-CXXConstCastExpr 0x55756570a3b0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55756570a398 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55756570a360 <col:91> 'const void *' lvalue ParmVar 0x5575656f24c0 'x' 'const void *'
|-CXXMethodDecl 0x5575656f2668 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55756570a488 <col:34, line:640:5>
|   `-ReturnStmt 0x55756570a478 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55756570a460 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55756570a430 <col:16> 'Packet *' lvalue ->_data_packet 0x5575656f9de8
|         `-CXXThisExpr 0x55756570a420 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5575656f27a8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5575656f2718 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557565703548 <col:46> 'bool' true
|-CXXMethodDecl 0x5575656f2928 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5575656f2860 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5575656f29d0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5575656f3180 <line:660:22> "" ""
| |-EnumConstantDecl 0x5575656f2ad0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f31f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2ab0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5575656f2a90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5575656e7c30 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5575656f2b60 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3208 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2b40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5575656f2b20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5575656e7cc0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5575656f2bf0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3220 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2bd0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5575656f2bb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5575656f2c80 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3238 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2c60 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5575656f2c40 <col:19> 'int' 16
| |-EnumConstantDecl 0x5575656f2d10 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3250 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2cf0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5575656f2cd0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5575656f2da0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3268 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2d80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5575656f2d60 <col:19> 'int' 32
| |-EnumConstantDecl 0x5575656f2e30 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3280 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2e10 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5575656f2df0 <col:19> 'int' EnumConstant 0x5575656f2c80 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5575656f2ec0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f3298 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2ea0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5575656f2e80 <col:19> 'int' EnumConstant 0x5575656f2da0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5575656f2f90 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f32b0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f2f70 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5575656f2f50 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5575656f2f10 <col:23> 'int' EnumConstant 0x5575656f2ec0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5575656f2f30 <col:40> 'int' 2
| |-EnumConstantDecl 0x5575656f3060 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5575656f32c8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575656f3040 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5575656f3020 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5575656f2fe0 <col:23> 'int' EnumConstant 0x5575656f2ec0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5575656f3000 <col:40> 'int' 4
| `-EnumConstantDecl 0x5575656f3130 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5575656f32e0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656f3110 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5575656f30f0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5575656f30b0 <col:23> 'int' EnumConstant 0x5575656f2ec0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5575656f30d0 <col:40> 'int' 8
|-CXXMethodDecl 0x5575656f3320 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5575656f33c0 <col:68> "" ""
|-CXXMethodDecl 0x5575656f3458 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5575656f34f8 <col:45> "" ""
|-CXXMethodDecl 0x5575656f3590 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5575656f3630 <col:57> "" ""
|-CXXMethodDecl 0x5575656f36c8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5575656f3768 <col:45> "" ""
|-CXXMethodDecl 0x5575656f3800 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5575656f38a0 <col:57> "" ""
|-CXXMethodDecl 0x5575656f3930 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5575656f39d0 <col:51> "" ""
|-CXXMethodDecl 0x5575656f3a60 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5575656f3b00 <col:63> "" ""
|-CXXMethodDecl 0x5575656f3b90 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5575656f3c30 <col:53> "" ""
|-CXXMethodDecl 0x5575656f3cc0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5575656f3d60 <col:65> "" ""
|-CXXMethodDecl 0x5575656f3e78 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5575656f3de8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5575656f3f20 <col:61> "" ""
|-CXXMethodDecl 0x5575656f40b8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5575656f3fa8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5575656f4020 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5575656f4168 <col:67> "" ""
|-CXXMethodDecl 0x5575656f4280 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5575656f41f0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5575656f4328 <col:63> "" ""
|-CXXMethodDecl 0x5575656f44c0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5575656f43b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5575656f4428 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5575656f4570 <col:69> "" ""
|-CXXMethodDecl 0x5575656f4688 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5575656f45f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5575656f4730 <col:63> "" ""
|-CXXMethodDecl 0x5575656f6e08 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5575656f6cf8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5575656f6d70 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656f6eb8 <col:69> "" ""
|-CXXMethodDecl 0x5575656f6fd0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5575656f6f40 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5575656f7078 <col:62> "" ""
|-CXXMethodDecl 0x5575656f7210 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5575656f7100 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5575656f7178 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5575656f72c0 <col:68> "" ""
|-CXXMethodDecl 0x5575656f73d8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5575656f7348 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5575656f7480 <col:63> "" ""
|-CXXMethodDecl 0x5575656f7618 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5575656f7508 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5575656f7580 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5575656f76c8 <col:69> "" ""
|-CXXMethodDecl 0x5575656f7758 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5575656f77f8 <col:64> "" ""
|-CXXMethodDecl 0x5575656f7888 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5575656f7928 <col:52> "" ""
|-CXXMethodDecl 0x5575656f79b8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5575656f7a58 <col:67> "" ""
|-CXXMethodDecl 0x5575656f7ae8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5575656f7b88 <col:55> "" ""
|-CXXMethodDecl 0x5575656f7ca0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5575656f7c10 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5575656f7d48 <col:58> "" ""
|-CXXMethodDecl 0x5575656f7ee0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5575656f7dd0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5575656f7e48 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5575656f7f90 <col:62> "" ""
|-CXXMethodDecl 0x5575656f80a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5575656f8018 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5575656f8150 <col:58> "" ""
|-CXXMethodDecl 0x5575656f82e8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5575656f81d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5575656f8250 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5575656f8398 <col:62> "" ""
|-CXXMethodDecl 0x5575656f84b0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5575656f8420 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5575656f8558 <col:60> "" ""
|-CXXMethodDecl 0x5575656f86f0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5575656f85e0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5575656f8658 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5575656f87a0 <col:64> "" ""
|-CXXMethodDecl 0x5575656f88b8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5575656f8828 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5575656f8960 <col:58> "" ""
|-CXXMethodDecl 0x5575656f8af8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5575656f89e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5575656f8a60 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5575656f8ba8 <col:62> "" ""
|-CXXMethodDecl 0x5575656f8cc0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5575656f8c30 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5575656f8d68 <col:59> "" ""
|-CXXMethodDecl 0x5575656f8f00 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5575656f8df0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5575656f8e68 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656f8fb0 <col:63> "" ""
|-AccessSpecDecl 0x5575656f9020 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5575656f9048 prev 0x5575656ee250 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575656f9140 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5575656f9230 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5575656f9358 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5575656f94d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5575656f9658 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5575656f97d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55756570a608 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55756570ae78 <col:11>
| |-CXXDestructorDecl 0x55756570a6e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55756570a818 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55756570a818
| | `-ParmVarDecl 0x55756570a928 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55756570a9c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55756570a9c8
| | `-ParmVarDecl 0x55756570aad8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55756570d898 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55756570d9a8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55756570dc28 <col:11>
| |   `-ReturnStmt 0x55756570dc18 <col:11>
| |     `-UnaryOperator 0x55756570dc00 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55756570dbf0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55756570da18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55756570da18
|   `-ParmVarDecl 0x55756570db28 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5575656f9840 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5575656f9958 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5575656f99f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5575656f9a60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5575656f9ac8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5575656f9b30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5575656f9b90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5575656f9c50 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5575656f9cb0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5575656f9d10 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55756570a518 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5575656f99f8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55756570ae88 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55756570aee0 <col:12>
| |-CXXConstructorDecl 0x55756570ab48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55756570ab48
| | `-ParmVarDecl 0x55756570ac58 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55756570acf8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55756570acf8
| | `-ParmVarDecl 0x55756570ae08 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55756570cf80 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5575656f9d88 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5575656f9de8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5575656f9e50 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5575656f9eb8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5575656f9f20 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5575656f9f88 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5575656f9fe8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5575656fa048 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5575656fa0b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5575656fa138 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5575656f9d88 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55756570a4b0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5575656f9fe8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55756570aef0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55756570af50 <col:21, line:755:5>
|-CXXConstructorDecl 0x5575656fa2d8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5575656fa218 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5575656fa3d0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5575656fa5b8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5575656fa4c0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5575656fa888 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5575656fa670 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5575656fa6e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5575656fa760 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656faaa8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5575656fa958 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5575656fa9d0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x557565703088 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5575656fab68 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5575656fabe0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5575656fac58 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5575657031e0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x557565703150 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557565703328 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x557565703298 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x557565703420 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HandlerCall
         0 |   class Element * _e
         8 |   const class Handler * _h
        16 |   class String _value
        16 |     struct String::rep_t _r
        16 |       const char * data
        24 |       int length
        32 |       struct String::memo_t * memo
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557565915c50 prev 0x5575657fa8a8 <../dummy_inc/click/handlercall.hh:143:1, line:470:1> line:143:7 referenced class HandlerCall definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x557565915d48 <col:1, col:7> col:7 implicit referenced class HandlerCall
|-AccessSpecDecl 0x557565915dd8 <col:21, col:27> col:21 public
|-CXXMethodDecl 0x557565915fe8 <line:147:5, line:148:30> line:147:19 call_read 'String (Element *, const String &, ErrorHandler *)' static
| |-ParmVarDecl 0x557565915e10 <col:29, col:38> col:38 e 'Element *'
| |-ParmVarDecl 0x557565915e88 <col:41, col:55> col:55 hname 'const String &'
| `-ParmVarDecl 0x557565915f00 <line:148:8, col:29> col:22 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bad0 <col:29> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bab0 <col:29> 'int' 0
|-CXXMethodDecl 0x557565916288 <line:149:5, line:150:30> line:149:19 call_read 'String (const String &, const Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x5575659160b0 <col:29, col:43> col:43 hdesc 'const String &'
| |-ParmVarDecl 0x557565916128 <col:50, col:65> col:65 context 'const Element *'
| `-ParmVarDecl 0x5575659161a0 <line:150:8, col:29> col:22 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bb08 <col:29> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bae8 <col:29> 'int' 0
|-CXXMethodDecl 0x557565916530 <line:151:5, line:152:28> line:151:16 call_write 'int (Element *, const String &, ErrorHandler *)' static
| |-ParmVarDecl 0x557565916350 <col:27, col:36> col:36 e 'Element *'
| |-ParmVarDecl 0x5575659163c8 <col:39, col:53> col:53 hname 'const String &'
| `-ParmVarDecl 0x557565916440 <line:152:6, col:27> col:20 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bb40 <col:27> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bb20 <col:27> 'int' 0
|-CXXMethodDecl 0x557565916860 <line:153:5, line:154:28> line:153:16 used call_write 'int (Element *, const String &, const String &, ErrorHandler *)' static
| |-ParmVarDecl 0x5575659165f8 <col:27, col:36> col:36 e 'Element *'
| |-ParmVarDecl 0x557565916670 <col:39, col:53> col:53 hname 'const String &'
| |-ParmVarDecl 0x5575659166e8 <col:60, col:74> col:74 value 'const String &'
| `-ParmVarDecl 0x557565916760 <line:154:6, col:27> col:20 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bb78 <col:27> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bb58 <col:27> 'int' 0
|-CXXMethodDecl 0x557565916b10 <line:155:5, line:156:52> line:155:16 call_write 'int (const String &, const Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x557565916930 <col:27, col:41> col:41 hdesc 'const String &'
| |-ParmVarDecl 0x5575659169a8 <line:156:6, col:21> col:21 context 'const Element *'
| `-ParmVarDecl 0x557565916a20 <col:30, col:51> col:44 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bbb0 <col:51> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bb90 <col:51> 'int' 0
|-CXXMethodDecl 0x557565916e40 <line:157:5, line:158:52> line:157:16 call_write 'int (const String &, const String &, const Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x557565916bd8 <col:27, col:41> col:41 hdesc 'const String &'
| |-ParmVarDecl 0x557565916c50 <col:48, col:62> col:62 value 'const String &'
| |-ParmVarDecl 0x557565916cc8 <line:158:6, col:21> col:21 context 'const Element *'
| `-ParmVarDecl 0x557565916d40 <col:30, col:51> col:44 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bbe8 <col:51> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bbc8 <col:51> 'int' 0
|-CXXConstructorDecl 0x557565916f38 <line:167:5, line:169:5> line:167:5 HandlerCall 'void ()'
| |-CXXCtorInitializer Field 0x55756591ab98 '_e' 'Element *'
| | `-ImplicitCastExpr 0x55756591bfc8 <line:168:7> 'Element *' <NullToPointer>
| |   `-IntegerLiteral 0x55756591bf88 <col:7> 'int' 0
| |-CXXCtorInitializer Field 0x55756591abf8 '_h' 'const Handler *'
| | `-CallExpr 0x55756591f3f0 <col:14, col:37> 'const Handler *'
| |   `-ImplicitCastExpr 0x55756591f3d8 <col:14, col:23> 'const Handler *(*)()' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x55756591f380 <col:14, col:23> 'const Handler *()' lvalue CXXMethod 0x55756571a358 'blank_handler' 'const Handler *()'
| |-CXXCtorInitializer Field 0x55756591ac58 '_value' 'String'
| | `-CXXConstructExpr 0x55756591f458 <line:167:5> 'String' 'void ()'
| `-CompoundStmt 0x55756591f4c0 <line:168:40, line:169:5>
|-CXXConstructorDecl 0x557565917080 <line:178:5, line:181:5> line:178:5 HandlerCall 'void (const String &)'
| |-ParmVarDecl 0x557565916ff0 <col:17, col:31> col:31 used hdesc 'const String &'
| |-CXXCtorInitializer Field 0x55756591ab98 '_e' 'Element *'
| | `-CXXReinterpretCastExpr 0x55756591f500 <line:179:7, col:36> 'Element *' reinterpret_cast<class Element *> <IntegralToPointer>
| |   `-IntegerLiteral 0x55756591f4d0 <col:35> 'int' 4
| |-CXXCtorInitializer Field 0x55756591abf8 '_h' 'const Handler *'
| | `-CallExpr 0x55756591f5f8 <col:43, col:66> 'const Handler *'
| |   `-ImplicitCastExpr 0x55756591f5e0 <col:43, col:52> 'const Handler *(*)()' <FunctionToPointerDecay>
| |     `-DeclRefExpr 0x55756591f5b0 <col:43, col:52> 'const Handler *()' lvalue CXXMethod 0x55756571a358 'blank_handler' 'const Handler *()'
| |-CXXCtorInitializer Field 0x55756591ac58 '_value' 'String'
| | `-CXXConstructExpr 0x55756591f6a0 <line:180:4, col:16> 'String' 'void (const String &)'
| |   `-DeclRefExpr 0x55756591f660 <col:11> 'const String' lvalue ParmVar 0x557565916ff0 'hdesc' 'const String &'
| `-CompoundStmt 0x55756591f710 <col:18, line:181:5>
|-EnumDecl 0x557565917130 <line:184:5, line:191:5> line:184:10 Flags
| |-EnumConstantDecl 0x557565917278 <line:185:2, col:22> col:2 readable 'HandlerCall::Flags'
| | `-ImplicitCastExpr 0x557565917670 <col:13, col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565917258 <col:13, col:22> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x557565917228 <col:13, col:22> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x557565917350 <line:186:2, col:20> col:2 referenced f_read 'HandlerCall::Flags'
| | `-ImplicitCastExpr 0x557565917688 <col:11, col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565917330 <col:11, col:20> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x557565917300 <col:11, col:20> 'Handler::Flags' EnumConstant 0x557565717b50 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x557565917428 <line:187:2, col:22> col:2 writable 'HandlerCall::Flags'
| | `-ImplicitCastExpr 0x5575659176a0 <col:13, col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565917408 <col:13, col:22> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5575659173d8 <col:13, col:22> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x557565917500 <line:188:2, col:21> col:2 referenced f_write 'HandlerCall::Flags'
| | `-ImplicitCastExpr 0x5575659176b8 <col:12, col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5575659174e0 <col:12, col:21> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5575659174b0 <col:12, col:21> 'Handler::Flags' EnumConstant 0x557565717be0 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x557565917590 <line:189:2, col:20> col:2 referenced f_preinitialize 'HandlerCall::Flags'
| | `-ImplicitCastExpr 0x5575659176d0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557565917570 <col:20> 'int' Int: 4
| |     `-IntegerLiteral 0x557565917550 <col:20> 'int' 4
| `-EnumConstantDecl 0x557565917620 <line:190:9, col:27> col:9 referenced f_unquote_param 'HandlerCall::Flags'
|   `-ImplicitCastExpr 0x5575659176e8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557565917600 <col:27> 'int' Int: 8
|       `-IntegerLiteral 0x5575659175e0 <col:27> 'int' 8
|-CXXMethodDecl 0x5575659178f0 <line:227:5, col:77> col:9 used initialize 'int (int, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x557565917718 <col:20, col:24> col:24 flags 'int'
| |-ParmVarDecl 0x557565917790 <col:31, col:46> col:46 context 'const Element *'
| `-ParmVarDecl 0x557565917808 <col:55, col:76> col:69 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bc20 <col:76> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bc00 <col:76> 'int' 0
|-CXXMethodDecl 0x557565917b10 <line:235:5, col:78> col:16 initialize_read 'int (const Element *, ErrorHandler *)' inline
| |-ParmVarDecl 0x5575659179b8 <col:32, col:47> col:47 context 'const Element *'
| `-ParmVarDecl 0x557565917a30 <col:56, col:77> col:70 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bc58 <col:77> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bc38 <col:77> 'int' 0
|-CXXMethodDecl 0x557565917ce8 <line:243:5, col:79> col:16 initialize_write 'int (const Element *, ErrorHandler *)' inline
| |-ParmVarDecl 0x557565917bd0 <col:33, col:48> col:48 context 'const Element *'
| `-ParmVarDecl 0x557565917c48 <col:57, col:78> col:71 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bc90 <col:78> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bc70 <col:78> 'int' 0
|-TypedefDecl 0x557565917e78 <line:246:5, col:58> col:33 referenced unspecified_bool_type 'bool (HandlerCall::*)() const'
| `-MemberPointerType 0x557565917df0 'bool (HandlerCall::*)() const'
|   |-RecordType 0x5575657f6ab0 'HandlerCall'
|   | `-CXXRecord 0x557565915c50 'HandlerCall'
|   `-ParenType 0x5575657d81b0 'bool () const' sugar
|     `-FunctionProtoType 0x557565266d90 'bool () const' const cdecl
|       `-BuiltinType 0x5575651ba2f0 'bool'
|-CXXConversionDecl 0x557565917fb8 <line:252:5, line:254:5> line:252:5 operator bool (HandlerCall::*)() const 'HandlerCall::unspecified_bool_type () const'
| `-CompoundStmt 0x55756591f9c0 <col:44, line:254:5>
|   `-ReturnStmt 0x55756591f9b0 <line:253:2, col:70>
|     `-ConditionalOperator 0x55756591f980 <col:9, col:70> 'bool (HandlerCall::*)() const'
|       |-BinaryOperator 0x55756591f8a8 <col:9, col:43> 'bool' '||'
|       | |-BinaryOperator 0x55756591f818 <col:9, col:38> 'bool' '!='
|       | | |-ImplicitCastExpr 0x55756591f800 <col:9> 'const Handler *' <LValueToRValue>
|       | | | `-MemberExpr 0x55756591f730 <col:9> 'const Handler *const' lvalue ->_h 0x55756591abf8
|       | | |   `-CXXThisExpr 0x55756591f720 <col:9> 'const HandlerCall *' implicit this
|       | | `-CallExpr 0x55756591f7e0 <col:15, col:38> 'const Handler *'
|       | |   `-ImplicitCastExpr 0x55756591f7c8 <col:15, col:24> 'const Handler *(*)()' <FunctionToPointerDecay>
|       | |     `-DeclRefExpr 0x55756591f798 <col:15, col:24> 'const Handler *()' lvalue CXXMethod 0x55756571a358 'blank_handler' 'const Handler *()'
|       | `-ImplicitCastExpr 0x55756591f890 <col:43> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55756591f878 <col:43> 'Element *' <LValueToRValue>
|       |     `-MemberExpr 0x55756591f848 <col:43> 'Element *const' lvalue ->_e 0x55756591ab98
|       |       `-CXXThisExpr 0x55756591f838 <col:43> 'const HandlerCall *' implicit this
|       |-UnaryOperator 0x55756591f930 <col:48, col:62> 'bool (HandlerCall::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55756591f900 <col:49, col:62> 'bool () const' CXXMethod 0x557565918088 'empty' 'bool () const'
|       `-ImplicitCastExpr 0x55756591f968 <col:70> 'bool (HandlerCall::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55756591f948 <col:70> 'int' 0
|-CXXMethodDecl 0x557565918088 <line:258:5, line:260:5> line:258:10 used empty 'bool () const'
| `-CompoundStmt 0x55756591fba8 <col:24, line:260:5>
|   `-ReturnStmt 0x55756591fb98 <line:259:2, col:44>
|     `-BinaryOperator 0x55756591fb78 <col:9, col:44> 'bool' '&&'
|       |-BinaryOperator 0x55756591fad0 <col:9, col:38> 'bool' '=='
|       | |-ImplicitCastExpr 0x55756591fab8 <col:9> 'const Handler *' <LValueToRValue>
|       | | `-MemberExpr 0x55756591f9e8 <col:9> 'const Handler *const' lvalue ->_h 0x55756591abf8
|       | |   `-CXXThisExpr 0x55756591f9d8 <col:9> 'const HandlerCall *' implicit this
|       | `-CallExpr 0x55756591fa98 <col:15, col:38> 'const Handler *'
|       |   `-ImplicitCastExpr 0x55756591fa80 <col:15, col:24> 'const Handler *(*)()' <FunctionToPointerDecay>
|       |     `-DeclRefExpr 0x55756591fa50 <col:15, col:24> 'const Handler *()' lvalue CXXMethod 0x55756571a358 'blank_handler' 'const Handler *()'
|       `-UnaryOperator 0x55756591fb60 <col:43, col:44> 'bool' prefix '!' cannot overflow
|         `-ImplicitCastExpr 0x55756591fb48 <col:44> 'bool' <PointerToBoolean>
|           `-ImplicitCastExpr 0x55756591fb30 <col:44> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x55756591fb00 <col:44> 'Element *const' lvalue ->_e 0x55756591ab98
|               `-CXXThisExpr 0x55756591faf0 <col:44> 'const HandlerCall *' implicit this
|-CXXMethodDecl 0x557565918148 <line:264:5, line:266:5> line:264:10 used initialized 'bool () const'
| `-CompoundStmt 0x55756591fce8 <col:30, line:266:5>
|   `-ReturnStmt 0x55756591fcd8 <line:265:2, col:38>
|     `-BinaryOperator 0x55756591fcb8 <col:9, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x55756591fca0 <col:9> 'const Handler *' <LValueToRValue>
|       | `-MemberExpr 0x55756591fbd0 <col:9> 'const Handler *const' lvalue ->_h 0x55756591abf8
|       |   `-CXXThisExpr 0x55756591fbc0 <col:9> 'const HandlerCall *' implicit this
|       `-CallExpr 0x55756591fc80 <col:15, col:38> 'const Handler *'
|         `-ImplicitCastExpr 0x55756591fc68 <col:15, col:24> 'const Handler *(*)()' <FunctionToPointerDecay>
|           `-DeclRefExpr 0x55756591fc38 <col:15, col:24> 'const Handler *()' lvalue CXXMethod 0x55756571a358 'blank_handler' 'const Handler *()'
|-CXXMethodDecl 0x5575659182b8 <line:276:5, col:53> col:19 call_read 'String (ErrorHandler *) const' inline
| `-ParmVarDecl 0x5575659181f8 <col:29, col:50> col:43 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bcc8 <col:50> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bca8 <col:50> 'int' 0
|-CXXMethodDecl 0x557565918440 <line:285:5, col:51> col:16 call_write 'int (ErrorHandler *) const' inline
| `-ParmVarDecl 0x557565918370 <col:27, col:48> col:41 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bd00 <col:48> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bce0 <col:48> 'int' 0
|-CXXMethodDecl 0x557565918680 <line:296:5, col:82> col:16 call_write 'int (const VariableExpander &, ErrorHandler *) const' inline
| |-ParmVarDecl 0x557565918528 <col:27, col:51> col:51 scope 'const VariableExpander &'
| `-ParmVarDecl 0x5575659185a0 <col:58, col:79> col:72 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bd38 <col:79> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bd18 <col:79> 'int' 0
|-CXXMethodDecl 0x557565918890 <line:309:5, col:76> col:16 call_write 'int (const String &, ErrorHandler *) const' inline
| |-ParmVarDecl 0x557565918740 <col:27, col:41> col:41 value_ext 'const String &'
| `-ParmVarDecl 0x5575659187b8 <col:52, col:73> col:66 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bd70 <col:73> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bd50 <col:73> 'int' 0
|-CXXMethodDecl 0x557565918c70 <line:333:5, line:334:54> line:333:16 used reset 'int (HandlerCall *&, const String &, int, const Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x557565918980 <col:22, col:36> col:36 hcall 'HandlerCall *&'
| |-ParmVarDecl 0x5575659189f8 <col:43, col:57> col:57 hdesc 'const String &'
| |-ParmVarDecl 0x557565918a78 <col:64, col:68> col:68 flags 'int'
| |-ParmVarDecl 0x557565918af0 <line:334:8, col:23> col:23 context 'const Element *'
| `-ParmVarDecl 0x557565918b68 <col:32, col:53> col:46 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bda8 <col:53> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bd88 <col:53> 'int' 0
|-CXXMethodDecl 0x5575659190d0 <line:347:5, line:349:41> line:347:16 used reset 'int (HandlerCall *&, Element *, const String &, const String &, int, ErrorHandler *)' static
| |-ParmVarDecl 0x557565918d50 <col:22, col:36> col:36 hcall 'HandlerCall *&'
| |-ParmVarDecl 0x557565918dc8 <line:348:8, col:17> col:17 e 'Element *'
| |-ParmVarDecl 0x557565918e40 <col:20, col:34> col:34 hname 'const String &'
| |-ParmVarDecl 0x557565918eb8 <col:41, col:55> col:55 value 'const String &'
| |-ParmVarDecl 0x557565918f38 <line:349:8, col:12> col:12 flags 'int'
| `-ParmVarDecl 0x557565918fb0 <col:19, col:40> col:33 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bde0 <col:40> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bdc0 <col:40> 'int' 0
|-CXXMethodDecl 0x557565919420 <line:361:5, line:362:52> line:361:23 reset_read 'int (HandlerCall *&, const String &, const Element *, ErrorHandler *)' static inline
| |-ParmVarDecl 0x5575659191b8 <col:34, col:48> col:48 hcall 'HandlerCall *&'
| |-ParmVarDecl 0x557565919230 <col:55, col:69> col:69 hdesc 'const String &'
| |-ParmVarDecl 0x5575659192a8 <line:362:6, col:21> col:21 context 'const Element *'
| `-ParmVarDecl 0x557565919320 <col:30, col:51> col:44 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591be18 <col:51> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bdf8 <col:51> 'int' 0
|-CXXMethodDecl 0x557565919760 <line:373:5, line:375:28> line:373:23 reset_read 'int (HandlerCall *&, Element *, const String &, ErrorHandler *)' static inline
| |-ParmVarDecl 0x5575659194f8 <col:34, col:48> col:48 hcall 'HandlerCall *&'
| |-ParmVarDecl 0x557565919570 <line:374:6, col:15> col:15 e 'Element *'
| |-ParmVarDecl 0x5575659195e8 <col:18, col:32> col:32 hname 'const String &'
| `-ParmVarDecl 0x557565919660 <line:375:6, col:27> col:20 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591be50 <col:27> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591be30 <col:27> 'int' 0
|-CXXMethodDecl 0x557565919a50 <line:386:5, line:387:53> line:386:23 reset_write 'int (HandlerCall *&, const String &, const Element *, ErrorHandler *)' static inline
| |-ParmVarDecl 0x557565919838 <col:35, col:49> col:49 hcall 'HandlerCall *&'
| |-ParmVarDecl 0x5575659198b0 <col:56, col:70> col:70 hdesc 'const String &'
| |-ParmVarDecl 0x557565919928 <line:387:7, col:22> col:22 context 'const Element *'
| `-ParmVarDecl 0x5575659199a0 <col:31, col:52> col:45 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591be88 <col:52> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591be68 <col:52> 'int' 0
|-CXXMethodDecl 0x557565919e10 <line:399:5, line:402:29> line:399:23 reset_write 'int (HandlerCall *&, Element *, const String &, const String &, ErrorHandler *)' static inline
| |-ParmVarDecl 0x557565919b28 <col:35, col:49> col:49 hcall 'HandlerCall *&'
| |-ParmVarDecl 0x557565919ba0 <line:400:7, col:16> col:16 e 'Element *'
| |-ParmVarDecl 0x557565919c18 <col:19, col:33> col:33 hname 'const String &'
| |-ParmVarDecl 0x557565919c90 <line:401:7, col:36> col:21 value 'const String &' cinit
| | `-ExprWithCleanups 0x55756591bf38 <col:29, col:36> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55756591bf20 <col:29, col:36> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55756591bf08 <col:29, col:36> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55756591bee8 <col:29, col:36> 'String' (CXXTemporary 0x55756591bee8)
| |         `-CXXTemporaryObjectExpr 0x55756591beb0 <col:29, col:36> 'String' 'void ()'
| `-ParmVarDecl 0x557565919d08 <line:402:7, col:28> col:21 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55756591bf70 <col:28> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55756591bf50 <col:28> 'int' 0
|-CXXMethodDecl 0x557565919ef8 <line:409:5, line:411:5> line:409:14 element 'Element *() const'
| `-CompoundStmt 0x55756591fd68 <col:30, line:411:5>
|   `-ReturnStmt 0x55756591fd58 <line:410:2, col:9>
|     `-ImplicitCastExpr 0x55756591fd40 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x55756591fd10 <col:9> 'Element *const' lvalue ->_e 0x55756591ab98
|         `-CXXThisExpr 0x55756591fd00 <col:9> 'const HandlerCall *' implicit this
|-CXXMethodDecl 0x557565919fe8 <line:416:5, line:418:5> line:416:20 handler 'const Handler *() const'
| `-CompoundStmt 0x55756591fde8 <col:36, line:418:5>
|   `-ReturnStmt 0x55756591fdd8 <line:417:2, col:9>
|     `-ImplicitCastExpr 0x55756591fdc0 <col:9> 'const Handler *' <LValueToRValue>
|       `-MemberExpr 0x55756591fd90 <col:9> 'const Handler *const' lvalue ->_h 0x55756591abf8
|         `-CXXThisExpr 0x55756591fd80 <col:9> 'const HandlerCall *' implicit this
|-CXXMethodDecl 0x55756591a0a8 <line:423:5, line:425:5> line:423:19 value 'const String &() const'
| `-CompoundStmt 0x55756591ffb0 <col:33, line:425:5>
|   `-ReturnStmt 0x55756591ffa0 <line:424:2, col:53>
|     `-ConditionalOperator 0x55756591ff70 <col:9, col:53> 'const String' lvalue
|       |-CXXMemberCallExpr 0x55756591fe40 <col:9, col:21> 'bool'
|       | `-MemberExpr 0x55756591fe10 <col:9> '<bound member function type>' ->initialized 0x557565918148
|       |   `-CXXThisExpr 0x55756591fe00 <col:9> 'const HandlerCall *' implicit this
|       |-MemberExpr 0x55756591fe70 <col:25> 'const String' lvalue ->_value 0x55756591ac58
|       | `-CXXThisExpr 0x55756591fe60 <col:25> 'const HandlerCall *' implicit this
|       `-CallExpr 0x55756591ff50 <col:34, col:53> 'const String' lvalue
|         `-ImplicitCastExpr 0x55756591ff38 <col:34, col:42> 'const String &(*)()' <FunctionToPointerDecay>
|           `-DeclRefExpr 0x55756591fed8 <col:34, col:42> 'const String &()' lvalue CXXMethod 0x557565500c88 'make_empty' 'const String &()'
|-CXXMethodDecl 0x55756591a1e8 <line:431:5, line:434:5> line:431:10 set_value 'void (const String &)'
| |-ParmVarDecl 0x55756591a158 <col:20, col:34> col:34 used value 'const String &'
| `-CompoundStmt 0x557565920128 <col:41, line:434:5>
|   `-IfStmt 0x557565920110 <line:432:2, line:433:15>
|     |-CXXMemberCallExpr 0x557565920008 <line:432:6, col:18> 'bool'
|     | `-MemberExpr 0x55756591ffd8 <col:6> '<bound member function type>' ->initialized 0x557565918148
|     |   `-ImplicitCastExpr 0x557565920028 <col:6> 'const HandlerCall *' <NoOp>
|     |     `-CXXThisExpr 0x55756591ffc8 <col:6> 'HandlerCall *' implicit this
|     `-CXXOperatorCallExpr 0x5575659200d8 <line:433:6, col:15> 'String' lvalue
|       |-ImplicitCastExpr 0x5575659200c0 <col:13> 'String &(*)(const String &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5575659200a0 <col:13> 'String &(const String &)' lvalue CXXMethod 0x55756550bbd0 'operator=' 'String &(const String &)'
|       |-MemberExpr 0x557565920050 <col:6> 'String' lvalue ->_value 0x55756591ac58
|       | `-CXXThisExpr 0x557565920040 <col:6> 'HandlerCall *' implicit this
|       `-DeclRefExpr 0x557565920080 <col:15> 'const String' lvalue ParmVar 0x55756591a158 'value' 'const String &'
|-CXXMethodDecl 0x55756591a2b0 <line:439:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55756591a370 <line:445:5, line:449:5> line:445:10 clear 'void ()'
| `-CompoundStmt 0x557565920420 <col:18, line:449:5>
|   |-BinaryOperator 0x5575659201b8 <line:446:2, col:7> 'Element *' lvalue '='
|   | |-MemberExpr 0x557565920150 <col:2> 'Element *' lvalue ->_e 0x55756591ab98
|   | | `-CXXThisExpr 0x557565920140 <col:2> 'HandlerCall *' implicit this
|   | `-ImplicitCastExpr 0x5575659201a0 <col:7> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x557565920180 <col:7> 'int' 0
|   |-BinaryOperator 0x5575659202b8 <line:447:2, col:30> 'const Handler *' lvalue '='
|   | |-MemberExpr 0x5575659201e8 <col:2> 'const Handler *' lvalue ->_h 0x55756591abf8
|   | | `-CXXThisExpr 0x5575659201d8 <col:2> 'HandlerCall *' implicit this
|   | `-CallExpr 0x557565920298 <col:7, col:30> 'const Handler *'
|   |   `-ImplicitCastExpr 0x557565920280 <col:7, col:16> 'const Handler *(*)()' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x557565920250 <col:7, col:16> 'const Handler *()' lvalue CXXMethod 0x55756571a358 'blank_handler' 'const Handler *()'
|   `-ExprWithCleanups 0x557565920408 <line:448:2, col:18> 'String' lvalue
|     `-CXXOperatorCallExpr 0x5575659203d0 <col:2, col:18> 'String' lvalue
|       |-ImplicitCastExpr 0x5575659203b8 <col:9> 'String &(*)(String &&)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557565920398 <col:9> 'String &(String &&)' lvalue CXXMethod 0x55756550c2d8 'operator=' 'String &(String &&)'
|       |-MemberExpr 0x5575659202e8 <col:2> 'String' lvalue ->_value 0x55756591ac58
|       | `-CXXThisExpr 0x5575659202d8 <col:2> 'HandlerCall *' implicit this
|       `-MaterializeTemporaryExpr 0x557565920380 <col:11, col:18> 'String' xvalue
|         `-CXXBindTemporaryExpr 0x557565920360 <col:11, col:18> 'String' (CXXTemporary 0x557565920360)
|           `-CXXTemporaryObjectExpr 0x557565920328 <col:11, col:18> 'String' 'void ()'
|-EnumDecl 0x55756591a410 <line:453:5, line:458:5> line:453:5
| |-EnumConstantDecl 0x55756591a510 <line:454:9, col:22> col:9 CHECK_READ 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591aa70 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a4f0 <col:22> 'HandlerCall::Flags' Int: 1
| |     `-DeclRefExpr 0x55756591a4d0 <col:22> 'HandlerCall::Flags' EnumConstant 0x557565917350 'f_read' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a5a0 <col:30, col:40> col:30 OP_READ 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591aa88 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a580 <col:40> 'HandlerCall::Flags' Int: 1
| |     `-DeclRefExpr 0x55756591a560 <col:40> 'HandlerCall::Flags' EnumConstant 0x557565917350 'f_read' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a630 <col:48, col:57> col:48 h_read 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591aaa0 <col:57> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a610 <col:57> 'HandlerCall::Flags' Int: 1
| |     `-DeclRefExpr 0x55756591a5f0 <col:57> 'HandlerCall::Flags' EnumConstant 0x557565917350 'f_read' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a6c0 <line:455:9, col:23> col:9 CHECK_WRITE 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591aab8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a6a0 <col:23> 'HandlerCall::Flags' Int: 2
| |     `-DeclRefExpr 0x55756591a680 <col:23> 'HandlerCall::Flags' EnumConstant 0x557565917500 'f_write' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a750 <col:32, col:43> col:32 OP_WRITE 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591aad0 <col:43> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a730 <col:43> 'HandlerCall::Flags' Int: 2
| |     `-DeclRefExpr 0x55756591a710 <col:43> 'HandlerCall::Flags' EnumConstant 0x557565917500 'f_write' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a7e0 <col:52, col:62> col:52 h_write 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591aae8 <col:62> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a7c0 <col:62> 'HandlerCall::Flags' Int: 2
| |     `-DeclRefExpr 0x55756591a7a0 <col:62> 'HandlerCall::Flags' EnumConstant 0x557565917500 'f_write' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a870 <line:456:9, col:25> col:9 PREINITIALIZE 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591ab00 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a850 <col:25> 'HandlerCall::Flags' Int: 4
| |     `-DeclRefExpr 0x55756591a830 <col:25> 'HandlerCall::Flags' EnumConstant 0x557565917590 'f_preinitialize' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a900 <col:42, col:60> col:42 h_preinitialize 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591ab18 <col:60> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a8e0 <col:60> 'HandlerCall::Flags' Int: 4
| |     `-DeclRefExpr 0x55756591a8c0 <col:60> 'HandlerCall::Flags' EnumConstant 0x557565917590 'f_preinitialize' 'HandlerCall::Flags'
| |-EnumConstantDecl 0x55756591a990 <line:457:9, col:25> col:9 UNQUOTE_PARAM 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
| | `-ImplicitCastExpr 0x55756591ab30 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756591a970 <col:25> 'HandlerCall::Flags' Int: 8
| |     `-DeclRefExpr 0x55756591a950 <col:25> 'HandlerCall::Flags' EnumConstant 0x557565917620 'f_unquote_param' 'HandlerCall::Flags'
| `-EnumConstantDecl 0x55756591aa20 <col:42, col:60> col:42 h_unquote_param 'HandlerCall::(anonymous enum at ../dummy_inc/click/handlercall.hh:453:5)'
|   `-ImplicitCastExpr 0x55756591ab48 <col:60> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55756591aa00 <col:60> 'HandlerCall::Flags' Int: 8
|       `-DeclRefExpr 0x55756591a9e0 <col:60> 'HandlerCall::Flags' EnumConstant 0x557565917620 'f_unquote_param' 'HandlerCall::Flags'
|-AccessSpecDecl 0x55756591ab60 <line:461:3, col:10> col:3 private
|-FieldDecl 0x55756591ab98 <line:463:5, col:14> col:14 referenced _e 'Element *'
|-FieldDecl 0x55756591abf8 <line:464:5, col:20> col:20 referenced _h 'const Handler *'
|-FieldDecl 0x55756591ac58 <line:465:5, col:12> col:12 referenced _value 'String'
|-CXXMethodDecl 0x55756591aea0 <line:467:5, col:49> col:9 parse 'int (int, Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55756591acc0 <col:15, col:19> col:19 flags 'int'
| |-ParmVarDecl 0x55756591ad38 <col:26, col:33> col:34 'Element *'
| `-ParmVarDecl 0x55756591adb0 <col:36, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55756591b260 <line:468:5, col:80> col:9 assign 'int (Element *, const String &, const String &, int, ErrorHandler *)'
| |-ParmVarDecl 0x55756591af68 <col:16, col:23> col:24 'Element *'
| |-ParmVarDecl 0x55756591afe0 <col:26, col:38> col:39 'const String &'
| |-ParmVarDecl 0x55756591b058 <col:41, col:53> col:54 'const String &'
| |-ParmVarDecl 0x55756591b0d8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55756591b150 <col:67, col:79> col:80 'ErrorHandler *'
|-CXXConstructorDecl 0x55756591b358 <line:143:7> col:7 implicit HandlerCall 'void (const HandlerCall &)' inline default noexcept-unevaluated 0x55756591b358
| `-ParmVarDecl 0x55756591b468 <col:7> col:7 'const HandlerCall &'
|-CXXConstructorDecl 0x55756591b508 <col:7> col:7 implicit HandlerCall 'void (HandlerCall &&)' inline default noexcept-unevaluated 0x55756591b508
| `-ParmVarDecl 0x55756591b618 <col:7> col:7 'HandlerCall &&'
|-CXXMethodDecl 0x55756591b6b8 <col:7> col:7 implicit operator= 'HandlerCall &(const HandlerCall &)' inline default noexcept-unevaluated 0x55756591b6b8
| `-ParmVarDecl 0x55756591b7c8 <col:7> col:7 'const HandlerCall &'
|-CXXMethodDecl 0x55756591b838 <col:7> col:7 implicit operator= 'HandlerCall &(HandlerCall &&)' inline default noexcept-unevaluated 0x55756591b838
| `-ParmVarDecl 0x55756591b948 <col:7> col:7 'HandlerCall &&'
`-CXXDestructorDecl 0x55756591b9d0 <col:7> col:7 implicit ~HandlerCall 'void ()' inline default noexcept-unevaluated 0x55756591b9d0

Layout: <CGRecordLayout
  LLVMType:%class.HandlerCall = type { %class.Element*, %class.Handler*, %class.String }
  NonVirtualBaseLLVMType:%class.HandlerCall = type { %class.Element*, %class.Handler*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657f6ad0 <../elements/standard/infinitesource.hh:102:1, line:150:1> line:102:7 referenced class InfiniteSource definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-public 'ActiveNotifier'
|-CXXRecordDecl 0x5575657f6c68 <col:1, col:7> col:7 implicit referenced class InfiniteSource
|-AccessSpecDecl 0x5575657f6cf8 <col:64, col:70> col:64 public
|-CXXConstructorDecl 0x5575657f6d80 <line:104:3, col:18> col:3 used InfiniteSource 'void ()'
|-CXXMethodDecl 0x5575657f6e80 <line:106:3, col:61> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5575657220e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5575657f9000 <col:34, col:61>
|   `-ReturnStmt 0x5575657f8ff0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5575657f8fd8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5575657f8fb0 <col:43> 'const char [15]' lvalue "InfiniteSource"
|-CXXMethodDecl 0x5575657f6fd0 <line:107:3, col:26> col:9 cast 'void *(const char *)'
| |-Overrides: [ 0x557565722da0 Element::cast 'void *(const char *)' ]
| `-ParmVarDecl 0x5575657f6f38 <col:14, col:25> col:26 'const char *'
|-CXXMethodDecl 0x5575657f70a0 <line:108:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5575657221b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5575657f9060 <col:34, col:54>
|   `-ReturnStmt 0x5575657f9050 <col:36, col:43>
|     `-ImplicitCastExpr 0x5575657f9038 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5575657f9018 <col:43> 'const char []' lvalue Var 0x557565722350 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x5575657f7168 <line:109:3, col:44> col:15 flags 'const char *() const'
| |-Overrides: [ 0x557565722ac0 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x5575657f90c0 <col:29, col:44>
|   `-ReturnStmt 0x5575657f90b0 <col:31, col:38>
|     `-ImplicitCastExpr 0x5575657f9098 <col:38> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5575657f9078 <col:38> 'const char [3]' lvalue "S1"
|-CXXMethodDecl 0x5575657f7228 <line:110:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x557565723a50 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5575657f7500 <line:112:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x557565723980 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5575657f73b0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5575657f7428 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5575657f7658 <line:113:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x557565723bd0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5575657f75c0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5575657f7720 <line:114:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5575657263d0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5575657f90f8 <col:37, col:52>
|   `-ReturnStmt 0x5575657f90e8 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x5575657f90d8 <col:46> 'bool' true
|-CXXMethodDecl 0x5575657f7860 <line:115:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5575657243e8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5575657f77d0 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x5575657f79a8 <line:117:3, col:23> col:8 run_task 'bool (Task *)'
| |-Overrides: [ 0x557565721468 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x5575657f7918 <col:17, col:22> col:23 'Task *'
|-CXXMethodDecl 0x5575657f7af8 <line:118:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x5575657210e8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5575657f7a68 <col:16> col:19 'int'
|-AccessSpecDecl 0x5575657f7ba0 <line:120:3, col:12> col:3 protected
|-TypedefDecl 0x5575657f7bd8 <line:123:5, col:22> col:22 referenced ucounter_t 'uint64_t':'unsigned long'
| `-TypedefType 0x557565314520 'uint64_t' sugar
|   |-Typedef 0x557565223470 'uint64_t'
|   `-TypedefType 0x5575651fc560 '__uint64_t' sugar
|     |-Typedef 0x5575651fc118 '__uint64_t'
|     `-BuiltinType 0x5575651ba430 'unsigned long'
|-TypedefDecl 0x5575657f7c40 <line:124:5, col:21> col:21 referenced counter_t 'int64_t':'long'
| `-TypedefType 0x557565314600 'int64_t' sugar
|   |-Typedef 0x5575652232d0 'int64_t'
|   `-TypedefType 0x5575651fc4d0 '__int64_t' sugar
|     |-Typedef 0x5575651fc0a8 '__int64_t'
|     `-BuiltinType 0x5575651ba390 'long'
|-CXXMethodDecl 0x5575657f7cb8 <line:130:5, col:23> col:10 setup_packet 'void ()'
|-FieldDecl 0x5575657f7d68 <line:132:5, col:13> col:13 _packet 'Packet *'
|-FieldDecl 0x5575657f7dd0 <line:133:5, col:9> col:9 _burstsize 'int'
|-FieldDecl 0x5575657f7e50 <line:134:5, col:15> col:15 _limit 'InfiniteSource::counter_t':'long'
|-FieldDecl 0x5575657f7ed0 <line:135:5, col:16> col:16 _count 'InfiniteSource::ucounter_t':'unsigned long'
|-FieldDecl 0x5575657f7f38 <line:136:5, col:9> col:9 _datasize 'int'
|-FieldDecl 0x5575657f7f98 <line:137:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x5575657f7ff8 <line:138:5, col:10> col:10 _timestamp 'bool'
|-FieldDecl 0x5575657f8058 <line:139:5, col:10> col:10 _task 'Task'
|-FieldDecl 0x5575657f80b8 <line:140:5, col:12> col:12 _data 'String'
|-FieldDecl 0x5575657f8118 <line:141:5, col:20> col:20 _nonfull_signal 'NotifierSignal'
|-FieldDecl 0x5575657f81a8 <line:142:5, col:18> col:18 _end_h 'HandlerCall *'
|-EnumDecl 0x5575657f81f8 <line:144:5, line:147:5> line:144:5
| |-EnumConstantDecl 0x5575657f82c0 <line:145:2> col:2 h_data 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| |-EnumConstantDecl 0x5575657f8310 <col:10> col:10 h_limit 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| |-EnumConstantDecl 0x5575657f8360 <col:19> col:19 h_burst 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| |-EnumConstantDecl 0x5575657f83b0 <col:28> col:28 h_active 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| |-EnumConstantDecl 0x5575657f8400 <col:38> col:38 h_reset 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| |-EnumConstantDecl 0x5575657f8450 <col:47> col:47 h_count 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| |-EnumConstantDecl 0x5575657f84a0 <col:56> col:56 h_length 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
| `-EnumConstantDecl 0x5575657f84f0 <line:146:2> col:2 h_notifier 'InfiniteSource::(anonymous enum at ../elements/standard/infinitesource.hh:144:5)'
|-CXXMethodDecl 0x5575657f8770 <line:148:5, col:78> col:16 change_param 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5575657f8550 <col:29, col:42> col:43 'const String &'
| |-ParmVarDecl 0x5575657f85c8 <col:45, col:53> col:54 'Element *'
| |-ParmVarDecl 0x5575657f8648 <col:56, col:61> col:62 'void *'
| `-ParmVarDecl 0x5575657f86c0 <col:64, col:77> col:78 'ErrorHandler *'
|-CXXConstructorDecl 0x5575657f8858 <line:102:7> col:7 implicit InfiniteSource 'void (const InfiniteSource &)' inline default_delete noexcept-unevaluated 0x5575657f8858
| `-ParmVarDecl 0x5575657f8968 <col:7> col:7 'const InfiniteSource &'
|-CXXConstructorDecl 0x5575657f8a08 <col:7> col:7 implicit InfiniteSource 'void (InfiniteSource &&)' inline default_delete noexcept-unevaluated 0x5575657f8a08
| `-ParmVarDecl 0x5575657f8b18 <col:7> col:7 'InfiniteSource &&'
|-CXXMethodDecl 0x5575657f8bb8 <col:7> col:7 implicit operator= 'InfiniteSource &(const InfiniteSource &)' inline default_delete noexcept-unevaluated 0x5575657f8bb8
| `-ParmVarDecl 0x5575657f8cc8 <col:7> col:7 'const InfiniteSource &'
|-CXXMethodDecl 0x5575657f8d38 <col:7> col:7 implicit operator= 'InfiniteSource &(InfiniteSource &&)' inline default_delete noexcept-unevaluated 0x5575657f8d38
| `-ParmVarDecl 0x5575657f8e48 <col:7> col:7 'InfiniteSource &&'
`-CXXDestructorDecl 0x5575657f8ed0 <col:7> col:7 implicit used ~InfiniteSource 'void () noexcept' inline default
  |-Overrides: [ 0x557565720c88 Element::~Element 'void () noexcept', 0x5575657e09f0 ActiveNotifier::~ActiveNotifier 'void () noexcept' ]
  `-CompoundStmt 0x557565924cd0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.InfiniteSource = type { %class.Element.base, %class.ActiveNotifier, %class.Packet*, i32, i64, i64, i32, i8, i8, %class.Task, %class.String, %class.NotifierSignal, %class.HandlerCall* }
  NonVirtualBaseLLVMType:%class.InfiniteSource = type { %class.Element.base, %class.ActiveNotifier, %class.Packet*, i32, i64, i64, i32, i8, i8, %class.Task, %class.String, %class.NotifierSignal, %class.HandlerCall* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class RandomSource
         0 |   class InfiniteSource (primary base)
         0 |     class Element (primary base)
         0 |       (Element vtable pointer)
         8 |       class Element::Port *[2] _ports
        24 |       class Element::Port [4] _inline_ports
        88 |       int [2] _nports
        96 |       class Router * _router
       104 |       int _eindex
       112 |     class ActiveNotifier (base)
       112 |       class Notifier (primary base)
       112 |         (Notifier vtable pointer)
       120 |         class NotifierSignal _signal
       120 |           union NotifierSignal::vmvalue _v
       120 |             class atomic_uint32_t * v1
       120 |             struct NotifierSignal::vmpair * vm
       128 |           uint32_t _mask
       136 |         enum Notifier::SearchOp _search_op
       144 |       class Task * _listener1
       152 |       ActiveNotifier::task_or_signal_t * _listeners
       160 |     class Packet * _packet
       168 |     int _burstsize
       176 |     InfiniteSource::counter_t _limit
       184 |     InfiniteSource::ucounter_t _count
       192 |     int _datasize
       196 |     _Bool _active
       197 |     _Bool _timestamp
       200 |     class Task _task
       200 |       struct TaskLink (base)
       200 |         struct TaskLink * _prev
       208 |         struct TaskLink * _next
       216 |         unsigned int _pass
       220 |       unsigned int _stride
       224 |       int _tickets
       228 |       union Task::Status _status
       228 |         struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       228 |           int16_t home_thread_id
       230 |           uint8_t is_scheduled
       231 |           uint8_t is_strong_unscheduled
       228 |         uint32_t status
       232 |       TaskCallback _hook
       240 |       void * _thunk
       248 |       class RouterThread * _thread
       256 |       class Element * _owner
       264 |       union Task::Pending _pending_nextptr
       264 |         class Task * t
       264 |         uintptr_t x
       272 |     class String _data
       272 |       struct String::rep_t _r
       272 |         const char * data
       280 |         int length
       288 |         struct String::memo_t * memo
       296 |     class NotifierSignal _nonfull_signal
       296 |       union NotifierSignal::vmvalue _v
       296 |         class atomic_uint32_t * v1
       296 |         struct NotifierSignal::vmpair * vm
       304 |       uint32_t _mask
       312 |     class HandlerCall * _end_h
           | [sizeof=320, dsize=320, align=8,
           |  nvsize=320, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575657f9110 <../elements/standard/randomsource.hh:85:1, line:101:1> line:85:7 class RandomSource definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial
|-public 'InfiniteSource'
|-CXXRecordDecl 0x5575657f9268 <col:1, col:7> col:7 implicit referenced class RandomSource
|-AccessSpecDecl 0x5575657f92f8 <col:46, col:52> col:46 public
|-CXXConstructorDecl 0x5575657f9380 <line:87:3, col:16> col:3 RandomSource 'void ()'
|-CXXMethodDecl 0x5575657f9480 <line:89:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5575657f6e80 InfiniteSource::class_name 'const char *() const' ]
| `-CompoundStmt 0x5575657fa410 <col:34, col:59>
|   `-ReturnStmt 0x5575657fa400 <col:36, col:43>
|     `-ImplicitCastExpr 0x5575657fa3e8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5575657fa3c0 <col:43> 'const char [13]' lvalue "RandomSource"
|-CXXMethodDecl 0x5575657f9540 <line:90:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5575657f7228 InfiniteSource::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5575657f9810 <line:92:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5575657f7500 InfiniteSource::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5575657f96c0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5575657f9738 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5575657f9960 <line:94:3, col:23> col:8 run_task 'bool (Task *)'
| |-Overrides: [ 0x5575657f79a8 InfiniteSource::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x5575657f98d0 <col:17, col:22> col:23 'Task *'
|-CXXMethodDecl 0x5575657f9ab0 <line:95:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x5575657f7af8 InfiniteSource::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5575657f9a20 <col:16> col:19 'int'
|-AccessSpecDecl 0x5575657f9b58 <line:97:2, col:11> col:2 protected
|-CXXMethodDecl 0x5575657f9ba0 <line:99:5, col:25> col:13 make_packet 'Packet *()'
|-CXXConstructorDecl 0x5575657f9c68 <line:85:7> col:7 implicit RandomSource 'void (const RandomSource &)' inline default_delete noexcept-unevaluated 0x5575657f9c68
| `-ParmVarDecl 0x5575657f9d78 <col:7> col:7 'const RandomSource &'
|-CXXConstructorDecl 0x5575657f9e18 <col:7> col:7 implicit RandomSource 'void (RandomSource &&)' inline default_delete noexcept-unevaluated 0x5575657f9e18
| `-ParmVarDecl 0x5575657f9f28 <col:7> col:7 'RandomSource &&'
|-CXXMethodDecl 0x5575657f9fc8 <col:7> col:7 implicit operator= 'RandomSource &(const RandomSource &)' inline default_delete noexcept-unevaluated 0x5575657f9fc8
| `-ParmVarDecl 0x5575657fa0d8 <col:7> col:7 'const RandomSource &'
|-CXXMethodDecl 0x5575657fa148 <col:7> col:7 implicit operator= 'RandomSource &(RandomSource &&)' inline default_delete noexcept-unevaluated 0x5575657fa148
| `-ParmVarDecl 0x5575657fa258 <col:7> col:7 'RandomSource &&'
`-CXXDestructorDecl 0x5575657fa2e0 <col:7> col:7 implicit ~RandomSource 'void ()' inline default noexcept-unevaluated 0x5575657fa2e0
  `-Overrides: [ 0x5575657f8ed0 InfiniteSource::~InfiniteSource 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.RandomSource = type { %class.InfiniteSource }
  NonVirtualBaseLLVMType:%class.RandomSource = type { %class.InfiniteSource }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557565833348 prev 0x5575656e6098 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557565833440 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5575658334d0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x557565833608 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x557565833508 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x557565834a30 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x557565834a10 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5575658345a8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x557565834ac0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x557565834a80 <col:17> 'ErrorHandler *' lvalue ParmVar 0x557565833508 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x557565834610 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x557565834b40 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x557565834b00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x557565834670 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x557565834b80 <col:54> 'bool' false
| `-CompoundStmt 0x557565834c88 <col:61, line:38:5>
|   `-BinaryOperator 0x557565834c68 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x557565834c00 <col:9> 'const Element *' lvalue ->_context 0x557565834548
|     | `-CXXThisExpr 0x557565834bf0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x557565834c50 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x557565834c30 <col:20> 'int' 0
|-CXXConstructorDecl 0x557565833818 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5575658336c8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x557565833740 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x557565834a68 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x557565834a48 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x557565834548 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x557565834ce0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x557565834ca0 <col:20> 'const Element *' lvalue ParmVar 0x5575658336c8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5575658345a8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x557565834d60 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x557565834d20 <col:36> 'ErrorHandler *' lvalue ParmVar 0x557565833740 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x557565834610 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5575658363c8 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x557565836388 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x557565834670 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x557565836408 <col:73> 'bool' false
| `-CompoundStmt 0x557565836480 <col:80, line:46:5>
|-CXXMethodDecl 0x557565833948 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5575658364f8 <col:36, line:51:5>
|   `-ReturnStmt 0x5575658364e8 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5575658364d0 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5575658364a0 <col:16> 'const Element *const' lvalue ->_context 0x557565834548
|         `-CXXThisExpr 0x557565836490 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x557565833a38 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x557565836578 <col:32, line:57:5>
|   `-ReturnStmt 0x557565836568 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x557565836550 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x557565836520 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5575658345a8
|         `-CXXThisExpr 0x557565836510 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x557565833af8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x557565833c80 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x557565833bb0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x557565833dd0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x557565833d40 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x557565833f20 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x557565833e90 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x557565834128 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x557565833fd8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x557565834050 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x557565834458 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5575658341e8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x557565834268 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x557565834330 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x557565834510 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x557565834548 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5575658345a8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x557565834610 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x557565834670 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5575658346c0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5575658346c0
| `-ParmVarDecl 0x5575658347d8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x557565834878 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x557565834878
| `-ParmVarDecl 0x557565834988 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55756594d7b0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557565854068 prev 0x55756583b488 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557565854160 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x557565854250 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x557565884150 <col:16, line:828:9>
|-CXXDestructorDecl 0x557565854340 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x557565884160 <col:25, line:830:9>
|-CXXMethodDecl 0x557565854440 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5575658544f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x557565854598 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x557565854598
| `-ParmVarDecl 0x5575658546a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x557565854e68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x557565854e68
  `-ParmVarDecl 0x557565854f78 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756583b298 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55756583b3f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55756583b488 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55756583b540 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55756583b648 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55756583b578 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5575658719e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5575658719c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55756583b968 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55756583b7e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55756583b858 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557565871a20 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557565871a00 <col:59> 'int' 0
|-CXXConstructorDecl 0x55756583bb40 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55756583ba30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55756583baa8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557565871a58 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557565871a38 <col:55> 'int' 0
|-CXXConstructorDecl 0x55756583bef8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55756583bce0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55756583bd58 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55756583bdd0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x557565871a90 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x557565871a70 <col:31> 'int' 0
|-CXXConstructorDecl 0x55756583c0b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55756583bff8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55756583c1b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55756583c398 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55756583c2a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55756583c488 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x557565871e40 <col:24, line:291:5>
|   `-ReturnStmt 0x557565871e30 <line:290:9, col:79>
|     `-BinaryOperator 0x557565871e10 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x557565871ce8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x557565871c40 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x557565871c20 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x557565871b18 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x557565871b00 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x557565871ae8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x557565871ab8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x557565862990
|       | |   |       `-CXXThisExpr 0x557565871aa8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x557565871c08 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x557565871bf0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x557565871bb8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x557565871b88 <col:28, col:35> '<bound member function type>' ->size 0x557565825528
|       | |           `-ImplicitCastExpr 0x557565871bd8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x557565871b70 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x557565871b40 <col:28> 'Vector<String> *const' lvalue ->_conf 0x557565862990
|       | |                 `-CXXThisExpr 0x557565871b30 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x557565871cd0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x557565871cb8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x557565871ca0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x557565871c70 <col:47> 'Args::Slot *const' lvalue ->_slots 0x557565870570
|       |         `-CXXThisExpr 0x557565871c60 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x557565871df0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x557565871dd8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x557565871dc0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x557565871d80 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x557565871d68 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x557565871d18 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x557565870620
|         |     |   `-CXXThisExpr 0x557565871d08 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x557565871d48 <col:73> 'int' 0
|         `-IntegerLiteral 0x557565871da0 <col:79> 'int' 0
|-CXXMethodDecl 0x55756583c548 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x557565872018 <col:32, line:296:5>
|   `-ReturnStmt 0x557565872008 <line:295:9, col:49>
|     `-BinaryOperator 0x557565871fe8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x557565871ec8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x557565871eb0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x557565871e98 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x557565871e68 <col:17> 'Args::Slot *const' lvalue ->_slots 0x557565870570
|       |       `-CXXThisExpr 0x557565871e58 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x557565871fc8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x557565871fb0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x557565871f98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x557565871f58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x557565871f40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x557565871ef0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x557565870620
|         |     |   `-CXXThisExpr 0x557565871ee0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x557565871f20 <col:43> 'int' 0
|         `-IntegerLiteral 0x557565871f78 <col:49> 'int' 0
|-CXXMethodDecl 0x55756583c638 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x557565872228 <col:19, line:306:5>
|   |-IfStmt 0x557565872148 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x557565872088 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x557565872070 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x557565872040 <col:13> 'Vector<String> *' lvalue ->_conf 0x557565862990
|   | |     `-CXXThisExpr 0x557565872030 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x557565872128 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5575658720f8 <col:13, col:20> '<bound member function type>' ->clear 0x557565827ef8
|   |     `-ImplicitCastExpr 0x5575658720e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5575658720b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x557565862990
|   |         `-CXXThisExpr 0x5575658720a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5575658721d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5575658721a0 <col:9, col:16> '<bound member function type>' .clear 0x5575658700f8
|   |   `-MemberExpr 0x557565872170 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x557565870510
|   |     `-CXXThisExpr 0x557565872160 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x557565872218 <line:305:9, col:17>
|     `-UnaryOperator 0x557565872200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5575658721f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55756583c8b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55756583c7c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55756583ca38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55756583c970 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55756583cdb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55756583cae0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55756583cd18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55756583cb88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55756583cc00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x557565872550 <col:67, line:327:5>
|     |-WhileStmt 0x557565872500 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x557565872318 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x557565872290 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5575657ec330 0x5575656de568 0x557565527b48 0x557565527820 0x557565519000 0x557565518cb0 0x5575655185a0 0x5575654eaf10 0x5575654773d0
|     | | |-DeclRefExpr 0x557565872250 <col:16> 'Iter' lvalue ParmVar 0x55756583cb88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x557565872270 <col:25> 'Iter' lvalue ParmVar 0x55756583cc00 'end' 'Iter'
|     | `-CompoundStmt 0x5575658724e0 <col:30, line:325:9>
|     |   |-CallExpr 0x557565872480 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x557565872360 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x557565872450 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5575658723e0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|     |   |   `-DeclRefExpr 0x5575658723c0 <col:24> 'Iter' lvalue ParmVar 0x55756583cb88 'begin' 'Iter'
|     |   `-UnaryOperator 0x5575658724c8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5575658724a8 <col:15> 'Iter' lvalue ParmVar 0x55756583cb88 'begin' 'Iter'
|     `-ReturnStmt 0x557565872540 <line:326:9, col:17>
|       `-UnaryOperator 0x557565872528 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565872518 <col:17> 'Args *' this
|-CXXMethodDecl 0x55756583cec0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55756583ce30 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55756583d008 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55756583cf78 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55756583d0d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x557565872630 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5575658725d0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x557565872580 <col:9> '<bound member function type>' ->reset_from 0x557565870998
|   | | `-CXXThisExpr 0x557565872570 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5575658725b0 <col:20> 'int' 0
|   `-ReturnStmt 0x557565872620 <line:352:9, col:17>
|     `-UnaryOperator 0x557565872608 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5575658725f8 <col:17> 'Args *' this
|-VarDecl 0x55756583d188 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55756583d1f0 <col:38> 'int' 1
|-VarDecl 0x55756583d280 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55756583d2e8 <col:39> 'int' 2
|-VarDecl 0x55756583d378 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55756583d3e0 <col:39> 'int' 4
|-VarDecl 0x55756583d470 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55756583d4d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55756583d858 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55756583d550 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55756583d7b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55756583d600 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55756583d6a8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x557565872788 <col:43, line:371:5>
| |   `-ReturnStmt 0x557565872778 <line:370:9, col:34>
| |     `-CallExpr 0x557565872740 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x557565872660 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5575658726e0 <col:21> 'const char *' lvalue ParmVar 0x55756583d600 'keyword' 'const char *'
| |       |-IntegerLiteral 0x557565872700 <col:30> 'int' 0
| |       `-DeclRefExpr 0x557565872720 <col:33> 'T' lvalue ParmVar 0x55756583d6a8 'x' 'T &'
| `-CXXMethodDecl 0x55756594ee38 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55756594ec90 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55756594ed68 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55756583db88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55756583d8c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55756583dae8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55756583d970 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756583da18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5575658728d8 <col:45, line:375:5>
|     `-ReturnStmt 0x5575658728c8 <line:374:9, col:42>
|       `-CallExpr 0x557565872890 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658727b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565872830 <col:21> 'const char *' lvalue ParmVar 0x55756583d970 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565872850 <col:30> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int'
|         `-DeclRefExpr 0x557565872870 <col:41> 'T' lvalue ParmVar 0x55756583da18 'x' 'T &'
|-FunctionTemplateDecl 0x55756583deb8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55756583dbf0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55756583de18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55756583dca0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55756583dd48 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x557565872a28 <col:45, line:379:5>
| |   `-ReturnStmt 0x557565872a18 <line:378:9, col:43>
| |     `-CallExpr 0x5575658729e0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x557565872900 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x557565872980 <col:21> 'const char *' lvalue ParmVar 0x55756583dca0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5575658729a0 <col:30> 'const int' lvalue Var 0x55756583d280 'positional' 'const int'
| |       `-DeclRefExpr 0x5575658729c0 <col:42> 'T' lvalue ParmVar 0x55756583dd48 'x' 'T &'
| |-CXXMethodDecl 0x55756594e0f8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, long &)'
| | |-TemplateArgument type 'long'
| | |-ParmVarDecl 0x55756594df18 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x55756594dfe8 <col:39, col:42> col:42 x 'long &'
| |-CXXMethodDecl 0x55756594e518 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55756594e378 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x55756594e448 <col:39, col:42> col:42 x 'int &'
| `-CXXMethodDecl 0x55756594e978 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55756594e790 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55756594e868 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55756583e1e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55756583df20 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55756583e148 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55756583dfd0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55756583e078 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x557565872c28 <col:46, line:383:5>
| |   `-ReturnStmt 0x557565872c18 <line:382:9, col:55>
| |     `-CallExpr 0x557565872be0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x557565872a50 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x557565872ad0 <col:21> 'const char *' lvalue ParmVar 0x55756583dfd0 'keyword' 'const char *'
| |       |-BinaryOperator 0x557565872ba0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x557565872b50 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x557565872b30 <col:30> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x557565872b88 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x557565872b68 <col:42> 'const int' lvalue Var 0x55756583d280 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x557565872bc0 <col:54> 'T' lvalue ParmVar 0x55756583e078 'x' 'T &'
| `-CXXMethodDecl 0x55756594dc18 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55756594da38 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55756594db08 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x5575658414b8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55756583e250 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557565841418 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5575658411d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565841250 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5575658412f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x557565872d68 <col:54, line:388:5>
|     |-CallExpr 0x557565872cf0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565872c40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x557565872c80 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x557565872c90 <col:30> 'const char *' lvalue ParmVar 0x5575658411d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557565872cb0 <col:39> 'int' lvalue ParmVar 0x557565841250 'flags' 'int'
|     | `-DeclRefExpr 0x557565872cd0 <col:46> 'T' lvalue ParmVar 0x5575658412f8 'x' 'T &'
|     `-ReturnStmt 0x557565872d58 <line:387:9, col:17>
|       `-UnaryOperator 0x557565872d40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565872d30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557565841968 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x557565841528 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5575658415a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5575658418c8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x557565841668 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565841708 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5575658417a8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x557565872ed8 <col:74, line:403:5>
|     `-ReturnStmt 0x557565872ec8 <line:402:9, col:56>
|       `-CallExpr 0x557565872e88 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565872d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565872e08 <col:28> 'const char *' lvalue ParmVar 0x557565841668 'keyword' 'const char *'
|         |-IntegerLiteral 0x557565872e28 <col:37> 'int' 0
|         |-DeclRefExpr 0x557565872e48 <col:40> 'T' lvalue ParmVar 0x557565841708 'x' 'T &'
|         `-DeclRefExpr 0x557565872e68 <col:43> 'const V' lvalue ParmVar 0x5575658417a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557565841dd8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5575658419d8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557565841a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557565841d38 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x557565841b18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565841bb8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x557565841c58 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x557565873040 <col:76, line:407:5>
|     `-ReturnStmt 0x557565873030 <line:406:9, col:65>
|       `-CallExpr 0x557565872ff0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565872f00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565872f70 <col:28> 'const char *' lvalue ParmVar 0x557565841b18 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565872f90 <col:37> 'const int' lvalue Var 0x55756583d280 'positional' 'const int'
|         |-DeclRefExpr 0x557565872fb0 <col:49> 'T' lvalue ParmVar 0x557565841bb8 'x' 'T &'
|         `-DeclRefExpr 0x557565872fd0 <col:52> 'const V' lvalue ParmVar 0x557565841c58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557565842328 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x557565841e48 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557565841ec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557565842288 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x557565841f88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565842008 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5575658420a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x557565842148 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5575658731a8 <col:85, line:412:5>
|     |-CallExpr 0x557565873128 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565873058 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x557565873098 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5575658730a8 <col:37> 'const char *' lvalue ParmVar 0x557565841f88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5575658730c8 <col:46> 'int' lvalue ParmVar 0x557565842008 'flags' 'int'
|     | |-DeclRefExpr 0x5575658730e8 <col:53> 'T' lvalue ParmVar 0x5575658420a8 'x' 'T &'
|     | `-DeclRefExpr 0x557565873108 <col:56> 'const V' lvalue ParmVar 0x557565842148 'default_value' 'const V &'
|     `-ReturnStmt 0x557565873198 <line:411:9, col:17>
|       `-UnaryOperator 0x557565873180 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565873170 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5575658427b8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5575658423a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565842418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x557565842718 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5575658424d8 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x557565842550 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x5575658425f8 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x557565873328 <col:53, line:425:5>
| |   `-ReturnStmt 0x557565873318 <line:424:9, col:42>
| |     `-CallExpr 0x5575658732d8 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5575658731d8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x557565873258 <col:21> 'const char *' lvalue ParmVar 0x5575658424d8 'keyword' 'const char *'
| |       |-IntegerLiteral 0x557565873278 <col:30> 'int' 0
| |       |-DeclRefExpr 0x557565873298 <col:33> 'P' lvalue ParmVar 0x557565842550 'parser' 'P'
| |       `-DeclRefExpr 0x5575658732b8 <col:41> 'T' lvalue ParmVar 0x5575658425f8 'x' 'T &'
| `-CXXMethodDecl 0x55756594fb38 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, HandlerCallArg, HandlerCall &)'
|   |-TemplateArgument type 'HandlerCallArg'
|   |-TemplateArgument type 'HandlerCall'
|   |-ParmVarDecl 0x55756594f8a8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55756594f948 <col:37, col:39> col:39 parser 'HandlerCallArg':'HandlerCallArg'
|   `-ParmVarDecl 0x55756594fa18 <col:47, col:50> col:50 x 'HandlerCall &'
|-FunctionTemplateDecl 0x557565842c08 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x557565842828 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5575658428a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565842b68 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557565842968 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658429e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557565842a88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5575658734a0 <col:55, line:429:5>
|     `-ReturnStmt 0x557565873490 <line:428:9, col:50>
|       `-CallExpr 0x557565873450 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565873350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658733d0 <col:21> 'const char *' lvalue ParmVar 0x557565842968 'keyword' 'const char *'
|         |-DeclRefExpr 0x5575658733f0 <col:30> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int'
|         |-DeclRefExpr 0x557565873410 <col:41> 'P' lvalue ParmVar 0x5575658429e0 'parser' 'P'
|         `-DeclRefExpr 0x557565873430 <col:49> 'T' lvalue ParmVar 0x557565842a88 'x' 'T &'
|-FunctionTemplateDecl 0x557565843058 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x557565842c78 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565842cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565842fb8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557565842db8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565842e30 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557565842ed8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x557565873618 <col:55, line:433:5>
|     `-ReturnStmt 0x557565873608 <line:432:9, col:51>
|       `-CallExpr 0x5575658735c8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658734c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565873548 <col:21> 'const char *' lvalue ParmVar 0x557565842db8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565873568 <col:30> 'const int' lvalue Var 0x55756583d280 'positional' 'const int'
|         |-DeclRefExpr 0x557565873588 <col:42> 'P' lvalue ParmVar 0x557565842e30 'parser' 'P'
|         `-DeclRefExpr 0x5575658735a8 <col:50> 'T' lvalue ParmVar 0x557565842ed8 'x' 'T &'
|-FunctionTemplateDecl 0x5575658434a8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5575658430c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565843148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565843408 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557565843208 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565843280 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x557565843328 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x557565873840 <col:56, line:437:5>
|     `-ReturnStmt 0x557565873830 <line:436:9, col:63>
|       `-CallExpr 0x5575658737f0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565873640 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658736c0 <col:21> 'const char *' lvalue ParmVar 0x557565843208 'keyword' 'const char *'
|         |-BinaryOperator 0x557565873790 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x557565873740 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557565873720 <col:30> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x557565873778 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x557565873758 <col:42> 'const int' lvalue Var 0x55756583d280 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5575658737b0 <col:54> 'P' lvalue ParmVar 0x557565843280 'parser' 'P'
|         `-DeclRefExpr 0x5575658737d0 <col:62> 'T' lvalue ParmVar 0x557565843328 'x' 'T &'
|-FunctionTemplateDecl 0x5575658439d8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x557565843518 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565843598 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565843938 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x557565843658 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658436d8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x557565843750 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5575658437f8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5575658739a8 <col:64, line:442:5>
|     |-CallExpr 0x557565873928 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565873858 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x557565873898 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5575658738a8 <col:30> 'const char *' lvalue ParmVar 0x557565843658 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5575658738c8 <col:39> 'int' lvalue ParmVar 0x5575658436d8 'flags' 'int'
|     | |-DeclRefExpr 0x5575658738e8 <col:46> 'P' lvalue ParmVar 0x557565843750 'parser' 'P'
|     | `-DeclRefExpr 0x557565873908 <col:54> 'T' lvalue ParmVar 0x5575658437f8 'x' 'T &'
|     `-ReturnStmt 0x557565873998 <line:441:9, col:17>
|       `-UnaryOperator 0x557565873980 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565873970 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557565843fd8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x557565843a50 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565843ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557565843b48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557565843f38 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x557565843c10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565843c88 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557565843d28 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x557565843df8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x557565873b40 <col:84, line:458:5>
|     `-ReturnStmt 0x557565873b30 <line:457:9, col:64>
|       `-CallExpr 0x557565873ae8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658739d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565873a48 <col:28> 'const char *' lvalue ParmVar 0x557565843c10 'keyword' 'const char *'
|         |-IntegerLiteral 0x557565873a68 <col:37> 'int' 0
|         |-DeclRefExpr 0x557565873a88 <col:40> 'P' lvalue ParmVar 0x557565843c88 'parser' 'P'
|         |-DeclRefExpr 0x557565873aa8 <col:48> 'T' lvalue ParmVar 0x557565843d28 'x' 'T &'
|         `-DeclRefExpr 0x557565873ac8 <col:51> 'const V' lvalue ParmVar 0x557565843df8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557565844558 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x557565844050 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5575658440c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557565844148 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5575658444b8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x557565844210 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565844288 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x557565844328 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5575658443c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x557565873cd0 <col:86, line:462:5>
|     `-ReturnStmt 0x557565873cc0 <line:461:9, col:73>
|       `-CallExpr 0x557565873c78 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565873b68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565873bd8 <col:28> 'const char *' lvalue ParmVar 0x557565844210 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565873bf8 <col:37> 'const int' lvalue Var 0x55756583d280 'positional' 'const int'
|         |-DeclRefExpr 0x557565873c18 <col:49> 'P' lvalue ParmVar 0x557565844288 'parser' 'P'
|         |-DeclRefExpr 0x557565873c38 <col:57> 'T' lvalue ParmVar 0x557565844328 'x' 'T &'
|         `-DeclRefExpr 0x557565873c58 <col:60> 'const V' lvalue ParmVar 0x5575658443c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557565844bb8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5575658445d0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565844648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5575658446c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557565844b18 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x557565844790 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565844810 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x557565844888 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x557565844928 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5575658449c8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x557565873e60 <col:95, line:467:5>
|     |-CallExpr 0x557565873dd8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565873ce8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x557565873d28 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x557565873d38 <col:37> 'const char *' lvalue ParmVar 0x557565844790 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557565873d58 <col:46> 'int' lvalue ParmVar 0x557565844810 'flags' 'int'
|     | |-DeclRefExpr 0x557565873d78 <col:53> 'P' lvalue ParmVar 0x557565844888 'parser' 'P'
|     | |-DeclRefExpr 0x557565873d98 <col:61> 'T' lvalue ParmVar 0x557565844928 'x' 'T &'
|     | `-DeclRefExpr 0x557565873db8 <col:64> 'const V' lvalue ParmVar 0x5575658449c8 'default_value' 'const V &'
|     `-ReturnStmt 0x557565873e50 <line:466:9, col:17>
|       `-UnaryOperator 0x557565873e38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565873e28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557565845198 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x557565844c38 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565844cb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557565844d38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5575658450f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557565844e00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565844e78 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x557565844f18 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557565844fb8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x557565874008 <col:63, line:481:5>
|     `-ReturnStmt 0x557565873ff8 <line:480:9, col:47>
|       `-CallExpr 0x557565873fb0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565873e90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565873f10 <col:21> 'const char *' lvalue ParmVar 0x557565844e00 'keyword' 'const char *'
|         |-IntegerLiteral 0x557565873f30 <col:30> 'int' 0
|         |-DeclRefExpr 0x557565873f50 <col:33> 'P' lvalue ParmVar 0x557565844e78 'parser' 'P'
|         |-DeclRefExpr 0x557565873f70 <col:41> 'T1' lvalue ParmVar 0x557565844f18 'x1' 'T1 &'
|         `-DeclRefExpr 0x557565873f90 <col:45> 'T2' lvalue ParmVar 0x557565844fb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557565845718 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x557565845210 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565845288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557565845308 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557565845678 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5575658453d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565845448 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5575658454e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557565845588 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5575658741a8 <col:65, line:485:5>
|     `-ReturnStmt 0x557565874198 <line:484:9, col:55>
|       `-CallExpr 0x557565874150 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874030 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658740b0 <col:21> 'const char *' lvalue ParmVar 0x5575658453d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5575658740d0 <col:30> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int'
|         |-DeclRefExpr 0x5575658740f0 <col:41> 'P' lvalue ParmVar 0x557565845448 'parser' 'P'
|         |-DeclRefExpr 0x557565874110 <col:49> 'T1' lvalue ParmVar 0x5575658454e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x557565874130 <col:53> 'T2' lvalue ParmVar 0x557565845588 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557565845c98 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x557565845790 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565845808 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557565845888 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557565845bf8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557565845950 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658459c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557565845a68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557565845b08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x557565874348 <col:65, line:489:5>
|     `-ReturnStmt 0x557565874338 <line:488:9, col:56>
|       `-CallExpr 0x5575658742f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658741d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565874250 <col:21> 'const char *' lvalue ParmVar 0x557565845950 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565874270 <col:30> 'const int' lvalue Var 0x55756583d280 'positional' 'const int'
|         |-DeclRefExpr 0x557565874290 <col:42> 'P' lvalue ParmVar 0x5575658459c8 'parser' 'P'
|         |-DeclRefExpr 0x5575658742b0 <col:50> 'T1' lvalue ParmVar 0x557565845a68 'x1' 'T1 &'
|         `-DeclRefExpr 0x5575658742d0 <col:54> 'T2' lvalue ParmVar 0x557565845b08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557565846218 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x557565845d10 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565845d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557565845e08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557565846178 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557565845ed0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565845f48 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x557565845fe8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557565846088 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x557565874598 <col:66, line:493:5>
|     `-ReturnStmt 0x557565874588 <line:492:9, col:68>
|       `-CallExpr 0x557565874540 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658743f0 <col:21> 'const char *' lvalue ParmVar 0x557565845ed0 'keyword' 'const char *'
|         |-BinaryOperator 0x5575658744c0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x557565874470 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557565874450 <col:30> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5575658744a8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x557565874488 <col:42> 'const int' lvalue Var 0x55756583d280 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5575658744e0 <col:54> 'P' lvalue ParmVar 0x557565845f48 'parser' 'P'
|         |-DeclRefExpr 0x557565874500 <col:62> 'T1' lvalue ParmVar 0x557565845fe8 'x1' 'T1 &'
|         `-DeclRefExpr 0x557565874520 <col:66> 'T2' lvalue ParmVar 0x557565846088 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557565846878 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x557565846290 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565846308 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557565846388 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5575658467d8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557565846450 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658464d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x557565846548 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5575658465e8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557565846688 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x557565874728 <col:74, line:498:5>
|     |-CallExpr 0x5575658746a0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5575658745b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5575658745f0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x557565874600 <col:30> 'const char *' lvalue ParmVar 0x557565846450 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557565874620 <col:39> 'int' lvalue ParmVar 0x5575658464d0 'flags' 'int'
|     | |-DeclRefExpr 0x557565874640 <col:46> 'P' lvalue ParmVar 0x557565846548 'parser' 'P'
|     | |-DeclRefExpr 0x557565874660 <col:54> 'T1' lvalue ParmVar 0x5575658465e8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x557565874680 <col:58> 'T2' lvalue ParmVar 0x557565846688 'x2' 'T2 &'
|     `-ReturnStmt 0x557565874718 <line:497:9, col:17>
|       `-UnaryOperator 0x557565874700 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5575658746f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557565846bd8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5575658468f8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557565846b38 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5575658469b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565846a28 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x557565874870 <col:52, line:509:5>
|     `-ReturnStmt 0x557565874860 <line:508:9, col:44>
|       `-CallExpr 0x557565874828 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658747c8 <col:26> 'const char *' lvalue ParmVar 0x5575658469b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5575658747e8 <col:35> 'int' 0
|         `-DeclRefExpr 0x557565874808 <col:38> 'P' lvalue ParmVar 0x557565846a28 'parser' 'P'
|-FunctionTemplateDecl 0x557565846ed8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x557565846c40 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557565846e38 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557565846cf0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565846d68 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5575658749b0 <col:54, line:513:5>
|     `-ReturnStmt 0x5575658749a0 <line:512:9, col:52>
|       `-CallExpr 0x557565874968 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565874908 <col:26> 'const char *' lvalue ParmVar 0x557565846cf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565874928 <col:35> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int'
|         `-DeclRefExpr 0x557565874948 <col:46> 'P' lvalue ParmVar 0x557565846d68 'parser' 'P'
|-FunctionTemplateDecl 0x5575658471d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x557565846f40 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557565847138 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557565846ff0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565847068 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x557565874af0 <col:54, line:517:5>
|     `-ReturnStmt 0x557565874ae0 <line:516:9, col:53>
|       `-CallExpr 0x557565874aa8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658749d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565874a48 <col:26> 'const char *' lvalue ParmVar 0x557565846ff0 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565874a68 <col:35> 'const int' lvalue Var 0x55756583d280 'positional' 'const int'
|         `-DeclRefExpr 0x557565874a88 <col:47> 'P' lvalue ParmVar 0x557565847068 'parser' 'P'
|-FunctionTemplateDecl 0x5575658474d8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x557565847240 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557565847438 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5575658472f0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565847368 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x557565874ce0 <col:55, line:521:5>
|     `-ReturnStmt 0x557565874cd0 <line:520:9, col:65>
|       `-CallExpr 0x557565874c98 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565874b88 <col:26> 'const char *' lvalue ParmVar 0x5575658472f0 'keyword' 'const char *'
|         |-BinaryOperator 0x557565874c58 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x557565874c08 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x557565874be8 <col:35> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x557565874c40 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x557565874c20 <col:47> 'const int' lvalue Var 0x55756583d280 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x557565874c78 <col:59> 'P' lvalue ParmVar 0x557565847368 'parser' 'P'
|-FunctionTemplateDecl 0x5575658478a8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x557565847540 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557565847808 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5575658475f0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565847670 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5575658476e8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x557565874e20 <col:63, line:526:5>
|     |-CallExpr 0x557565874da8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565874cf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x557565874d38 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x557565874d48 <col:35> 'const char *' lvalue ParmVar 0x5575658475f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x557565874d68 <col:44> 'int' lvalue ParmVar 0x557565847670 'flags' 'int'
|     | `-DeclRefExpr 0x557565874d88 <col:51> 'P' lvalue ParmVar 0x5575658476e8 'parser' 'P'
|     `-ReturnStmt 0x557565874e10 <line:525:9, col:17>
|       `-UnaryOperator 0x557565874df8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565874de8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557565847cf8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x557565847918 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565847998 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565847c58 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557565847a58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565847ad0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x557565847b78 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x557565874f78 <col:58, line:541:5>
|     `-ReturnStmt 0x557565874f68 <line:540:9, col:39>
|       `-CallExpr 0x557565874f30 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874e50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565874ed0 <col:21> 'const char *' lvalue ParmVar 0x557565847a58 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565874ef0 <col:30> 'P' lvalue ParmVar 0x557565847ad0 'parser' 'P'
|         `-DeclRefExpr 0x557565874f10 <col:38> 'T' lvalue ParmVar 0x557565847b78 'x' 'T &'
|-FunctionTemplateDecl 0x557565848148 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x557565847d68 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565847de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5575658480a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557565847ea8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565847f20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557565847fc8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5575658750b0 <col:60, line:545:5>
|     `-ReturnStmt 0x5575658750a0 <line:544:9, col:41>
|       `-CallExpr 0x557565875068 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565874fa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565875008 <col:23> 'const char *' lvalue ParmVar 0x557565847ea8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565875028 <col:32> 'P' lvalue ParmVar 0x557565847f20 'parser' 'P'
|         `-DeclRefExpr 0x557565875048 <col:40> 'T' lvalue ParmVar 0x557565847fc8 'x' 'T &'
|-FunctionTemplateDecl 0x557565848598 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5575658481b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565848238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5575658484f8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5575658482f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565848370 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557565848418 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5575658751e8 <col:60, line:549:5>
|     `-ReturnStmt 0x5575658751d8 <line:548:9, col:41>
|       `-CallExpr 0x5575658751a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658750d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565875140 <col:23> 'const char *' lvalue ParmVar 0x5575658482f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565875160 <col:32> 'P' lvalue ParmVar 0x557565848370 'parser' 'P'
|         `-DeclRefExpr 0x557565875180 <col:40> 'T' lvalue ParmVar 0x557565848418 'x' 'T &'
|-FunctionTemplateDecl 0x5575658489e8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x557565848608 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565848688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565848948 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557565848748 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658487c0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x557565848868 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x557565875320 <col:61, line:553:5>
|     `-ReturnStmt 0x557565875310 <line:552:9, col:42>
|       `-CallExpr 0x5575658752d8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565875210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565875278 <col:24> 'const char *' lvalue ParmVar 0x557565848748 'keyword' 'const char *'
|         |-DeclRefExpr 0x557565875298 <col:33> 'P' lvalue ParmVar 0x5575658487c0 'parser' 'P'
|         `-DeclRefExpr 0x5575658752b8 <col:41> 'T' lvalue ParmVar 0x557565848868 'x' 'T &'
|-FunctionTemplateDecl 0x557565848ec8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x557565848a58 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565848ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565848e28 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x557565848b98 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565848c18 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x557565848c90 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x557565848d38 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x557565875498 <col:69, line:557:5>
|     `-ReturnStmt 0x557565875488 <line:556:9, col:46>
|       `-CallExpr 0x557565875448 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565875348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658753c8 <col:21> 'const char *' lvalue ParmVar 0x557565848b98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5575658753e8 <col:30> 'int' lvalue ParmVar 0x557565848c18 'flags' 'int'
|         |-DeclRefExpr 0x557565875408 <col:37> 'P' lvalue ParmVar 0x557565848c90 'parser' 'P'
|         `-DeclRefExpr 0x557565875428 <col:45> 'T' lvalue ParmVar 0x557565848d38 'x' 'T &'
|-FunctionTemplateDecl 0x55756584dc70 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x557565848f40 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55756584dbd0 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557565848ff0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565849068 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5575658755d8 <col:56, line:571:5>
|     `-ReturnStmt 0x5575658755c8 <line:570:9, col:48>
|       `-CallExpr 0x557565875590 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5575658754c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565875530 <col:30> 'const char *' lvalue ParmVar 0x557565848ff0 'keyword' 'const char *'
|         |-IntegerLiteral 0x557565875550 <col:39> 'int' 0
|         `-DeclRefExpr 0x557565875570 <col:42> 'P' lvalue ParmVar 0x557565849068 'parser' 'P'
|-FunctionTemplateDecl 0x55756584e008 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55756584dcd8 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55756584df68 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55756584dd90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584de10 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55756584de88 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x557565877918 <col:67, line:576:5>
|     |-CallExpr 0x5575658778a0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5575658755f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x557565875630 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x557565875640 <col:39> 'const char *' lvalue ParmVar 0x55756584dd90 'keyword' 'const char *'
|     | |-BinaryOperator 0x557565877860 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x557565877810 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5575658777d0 <col:48> 'int' lvalue ParmVar 0x55756584de10 'flags' 'int'
|     | | `-ImplicitCastExpr 0x557565877848 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x557565877828 <col:56> 'const int' lvalue Var 0x55756583d470 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x557565877880 <col:68> 'P' lvalue ParmVar 0x55756584de88 'parser' 'P'
|     `-ReturnStmt 0x557565877908 <line:575:9, col:17>
|       `-UnaryOperator 0x5575658778f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5575658778e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55756584e458 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55756584e078 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55756584e0f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55756584e3b8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55756584e1b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584e230 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55756584e2d8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x557565877a88 <col:62, line:592:5>
|     `-ReturnStmt 0x557565877a78 <line:591:9, col:51>
|       `-CallExpr 0x557565877a38 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565877948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658779b8 <col:30> 'const char *' lvalue ParmVar 0x55756584e1b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5575658779d8 <col:39> 'int' 0
|         |-DeclRefExpr 0x5575658779f8 <col:42> 'P' lvalue ParmVar 0x55756584e230 'parser' 'P'
|         `-DeclRefExpr 0x557565877a18 <col:50> 'T' lvalue ParmVar 0x55756584e2d8 'x' 'T &'
|-FunctionTemplateDecl 0x55756584e938 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55756584e4c8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55756584e548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55756584e898 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55756584e608 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584e688 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55756584e700 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55756584e7a8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x557565877c80 <col:73, line:597:5>
|     |-CallExpr 0x557565877c00 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565877aa0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x557565877ae0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x557565877af0 <col:39> 'const char *' lvalue ParmVar 0x55756584e608 'keyword' 'const char *'
|     | |-BinaryOperator 0x557565877ba0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x557565877b50 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x557565877b10 <col:48> 'int' lvalue ParmVar 0x55756584e688 'flags' 'int'
|     | | `-ImplicitCastExpr 0x557565877b88 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x557565877b68 <col:56> 'const int' lvalue Var 0x55756583d470 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x557565877bc0 <col:68> 'P' lvalue ParmVar 0x55756584e700 'parser' 'P'
|     | `-DeclRefExpr 0x557565877be0 <col:76> 'T' lvalue ParmVar 0x55756584e7a8 'x' 'T &'
|     `-ReturnStmt 0x557565877c70 <line:596:9, col:17>
|       `-UnaryOperator 0x557565877c58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557565877c48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55756584eee8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55756584e9b0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55756584ea28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55756584ee48 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55756584eae8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584eb60 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55756584ed20 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557565877df0 <col:65, line:614:5>
|     `-ReturnStmt 0x557565877de0 <line:613:9, col:46>
|       `-CallExpr 0x557565877da0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565877cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565877d20 <col:25> 'const char *' lvalue ParmVar 0x55756584eae8 'keyword' 'const char *'
|         |-IntegerLiteral 0x557565877d40 <col:34> 'int' 0
|         |-DeclRefExpr 0x557565877d60 <col:37> 'P' lvalue ParmVar 0x55756584eb60 'parser' 'P'
|         `-DeclRefExpr 0x557565877d80 <col:45> 'Vector<T>' lvalue ParmVar 0x55756584ed20 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55756584f318 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55756584ef58 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55756584f278 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55756584f010 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584f160 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557565878010 <col:55, line:618:5>
|     `-ReturnStmt 0x557565878000 <line:617:9, col:55>
|       `-CallExpr 0x557565877fc0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565877e18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x557565877e88 <col:25> 'const char *' lvalue ParmVar 0x55756584f010 'keyword' 'const char *'
|         |-IntegerLiteral 0x557565877ea8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x557565877f80 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x557565877fa0 <col:54> 'Vector<T>' lvalue ParmVar 0x55756584f160 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55756584f8e8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55756584f380 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55756584f3f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55756584f848 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55756584f4b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584f538 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55756584f5b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55756584f700 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557565878208 <col:76, line:623:5>
|     |-CallExpr 0x557565878188 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x557565878028 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x557565878068 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x557565878078 <col:34> 'const char *' lvalue ParmVar 0x55756584f4b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x557565878128 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5575658780d8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x557565878098 <col:43> 'int' lvalue ParmVar 0x55756584f538 'flags' 'int'
|     | | `-ImplicitCastExpr 0x557565878110 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5575658780f0 <col:51> 'const int' lvalue Var 0x55756583d470 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x557565878148 <col:63> 'P' lvalue ParmVar 0x55756584f5b0 'parser' 'P'
|     | `-DeclRefExpr 0x557565878168 <col:71> 'Vector<T>' lvalue ParmVar 0x55756584f700 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5575658781f8 <line:622:9, col:17>
|       `-UnaryOperator 0x5575658781e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5575658781d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55756584fe28 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55756584f960 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55756584f9d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55756584fd88 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55756584fa98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55756584fb18 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55756584fc60 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x557565878470 <col:66, line:627:5>
|     `-ReturnStmt 0x557565878460 <line:626:9, col:59>
|       `-CallExpr 0x557565878420 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x557565878238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5575658782a8 <col:25> 'const char *' lvalue ParmVar 0x55756584fa98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5575658782c8 <col:34> 'int' lvalue ParmVar 0x55756584fb18 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5575658783e0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x557565878400 <col:58> 'Vector<T>' lvalue ParmVar 0x55756584fc60 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55756584feb8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5575658784f0 <col:25, line:633:5>
|   `-ReturnStmt 0x5575658784e0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5575658784c8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x557565878498 <col:16> 'const bool' lvalue ->_status 0x5575658627f8
|         `-CXXThisExpr 0x557565878488 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x557565850038 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55756584ff70 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5575658785d8 <col:27, line:639:5>
|   |-BinaryOperator 0x557565878580 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557565878508 <col:9> 'bool' lvalue ParmVar 0x55756584ff70 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557565878568 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x557565878538 <col:13> 'bool' lvalue ->_status 0x5575658627f8
|   |     `-CXXThisExpr 0x557565878528 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5575658785c8 <line:638:9, col:17>
|     `-UnaryOperator 0x5575658785b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5575658785a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5575658501b8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5575658500f8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5575658786c8 <col:39, line:644:5>
|   |-BinaryOperator 0x557565878670 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5575658785f8 <col:9> 'bool' lvalue ParmVar 0x5575658500f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557565878658 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x557565878628 <col:13> 'const bool' lvalue ->_status 0x5575658627f8
|   |     `-CXXThisExpr 0x557565878618 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5575658786b8 <line:643:9, col:17>
|     `-UnaryOperator 0x5575658786a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557565878690 <col:17> 'const Args *' this
|-CXXMethodDecl 0x557565850280 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x557565878770 <col:30, line:651:5>
|   `-ReturnStmt 0x557565878760 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x557565878748 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x557565878718 <col:16> 'bool' lvalue ->_read_status 0x557565834670
|         `-ImplicitCastExpr 0x5575658786f8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5575658786e8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5575658503c8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x557565850338 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x557565878878 <col:32, line:658:5>
|   |-BinaryOperator 0x557565878820 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557565878788 <col:9> 'bool' lvalue ParmVar 0x557565850338 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557565878808 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5575658787d8 <col:13> 'bool' lvalue ->_read_status 0x557565834670
|   |     `-ImplicitCastExpr 0x5575658787b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5575658787a8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x557565878868 <line:657:9, col:17>
|     `-UnaryOperator 0x557565878850 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557565878840 <col:17> 'Args *' this
|-CXXMethodDecl 0x557565850518 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x557565850488 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x557565878988 <col:44, line:663:5>
|   |-BinaryOperator 0x557565878930 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x557565878898 <col:9> 'bool' lvalue ParmVar 0x557565850488 'x' 'bool &'
|   | `-ImplicitCastExpr 0x557565878918 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5575658788e8 <col:13> 'bool' lvalue ->_read_status 0x557565834670
|   |     `-ImplicitCastExpr 0x5575658788c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5575658788b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x557565878978 <line:662:9, col:17>
|     `-UnaryOperator 0x557565878960 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557565878950 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5575658505e0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5575658506a8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x557565850770 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x557565850838 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x557565850b48 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5575658508d8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557565850aa8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5575658509b8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x557565878d40 <col:19, line:706:5>
|     `-IfStmt 0x557565878d18 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x557565878a88 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x557565878c48 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x557565878c18 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x557565878bd8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x557565878ae0 <col:42> '<bound member function type>' ->simple_slot 0x557565871650
|       |     | `-CXXThisExpr 0x557565878ad0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x557565878b78 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x557565878b30 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55756552c5e8
|       |     | `-DeclRefExpr 0x557565878b10 <col:55> 'T' lvalue ParmVar 0x5575658509b8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x557565878bb8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x557565878d08 <line:705:13, col:34>
|         `-CallExpr 0x557565878ce0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x557565878c68 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x557565878cc0 <col:33> 'T' lvalue ParmVar 0x5575658509b8 'x' 'T &'
|-FunctionTemplateDecl 0x557565850e18 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x557565850ba8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557565850d78 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x557565850c88 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x557565879120 <col:31, line:717:5>
|     |-DeclStmt 0x557565878e80 <line:713:9, col:23>
|     | `-VarDecl 0x557565878d68 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x557565878e58 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x557565878de0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x557565878e38 <col:21> 'T' lvalue ParmVar 0x557565850c88 'x' 'T &'
|     |-IfStmt 0x5575658790d0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x557565878f78 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5575658790b0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x557565879050 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x557565878fe0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|     |   | `-DeclRefExpr 0x557565878fc0 <col:14> 'T *' lvalue Var 0x557565878d68 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x557565879090 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x557565879108 <line:716:9, col:16>
|       `-DeclRefExpr 0x5575658790e8 <col:16> 'T *' lvalue Var 0x557565878d68 's' 'T *'
|-FunctionTemplateDecl 0x557565851228 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x557565850e78 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557565850ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557565851188 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x557565850fd8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x557565851078 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x557565879430 <col:37, line:726:5>
|     |-IfStmt 0x5575658793c0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5575658793e0 <line:723:13, col:26>
|     | | `-VarDecl 0x557565879188 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x557565879278 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x557565879200 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x557565879258 <col:25> 'T' lvalue ParmVar 0x557565850fd8 'x' 'T &'
|     | |-DeclRefExpr 0x5575658792a0 <col:16> 'T *' lvalue Var 0x557565879188 's' 'T *'
|     | `-BinaryOperator 0x5575658793a0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x557565879350 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5575658792e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|     |   | `-DeclRefExpr 0x5575658792c0 <col:14> 'T *' lvalue Var 0x557565879188 's' 'T *'
|     |   `-DeclRefExpr 0x557565879380 <col:18> 'const V' lvalue ParmVar 0x557565851078 'value' 'const V &'
|     `-ReturnStmt 0x557565879420 <line:725:9, col:17>
|       `-UnaryOperator 0x557565879408 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5575658793f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557565851628 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x557565851290 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557565851588 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x557565851340 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658513c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557565851468 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55756587a250 <col:65, line:737:5>
|     |-DeclStmt 0x5575658794c8 <line:732:9, col:26>
|     | `-VarDecl 0x557565879460 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55756587a218 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55756587a238 <line:733:13, col:58>
|       | `-VarDecl 0x5575658794f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5575658796d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5575658796a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x557565879688 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x557565879668 <col:26, col:58> 'String' (CXXTemporary 0x557565879668)
|       |           `-CXXMemberCallExpr 0x5575658795f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x557565879568 <col:26> '<bound member function type>' ->find 0x557565870c68
|       |             | `-CXXThisExpr 0x557565879558 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x557565879630 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x557565879598 <col:31> 'const char *' lvalue ParmVar 0x557565851340 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x557565879648 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5575658795b8 <col:40> 'int' lvalue ParmVar 0x5575658513c0 'flags' 'int'
|       |             `-DeclRefExpr 0x5575658795d8 <col:47> 'Args::Slot *' lvalue Var 0x557565879460 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x557565879788 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x557565879770 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x557565879750 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x557565879720 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |       `-ImplicitCastExpr 0x557565879708 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5575658796e8 <col:20> 'String' lvalue Var 0x5575658794f0 'str' 'String'
|       `-CompoundStmt 0x55756587a1f8 <col:61, line:736:9>
|         |-DeclStmt 0x557565879c40 <line:734:13, col:76>
|         | `-VarDecl 0x5575658797d8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x557565879c10 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x557565879b80 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x557565879bc8 <col:60> 'T' lvalue ParmVar 0x557565851468 'variable' 'T &'
|         |     `-UnaryOperator 0x557565879bf8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x557565879be8 <col:71> 'Args *' this
|         `-CallExpr 0x55756587a1c8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x557565879c68 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|           | `-CXXThisExpr 0x557565879c58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55756587a188 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x557565879c98 <col:23> 'T *' lvalue Var 0x5575658797d8 's' 'T *'
|           | `-CallExpr 0x55756587a148 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x557565879f20 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55756587a020 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55756587a040 <col:86> 'String' lvalue Var 0x5575658794f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55756587a0f0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55756587a080 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|           |   | `-DeclRefExpr 0x55756587a060 <col:92> 'T *' lvalue Var 0x5575658797d8 's' 'T *'
|           |   `-UnaryOperator 0x55756587a130 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55756587a120 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55756587a1a8 <col:103> 'Args::Slot *' lvalue Var 0x557565879460 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557565851b78 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x557565851698 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557565851718 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x557565851ad8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5575658517d8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565851858 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5575658518f8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x557565851998 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55756587b0f0 <col:88, line:745:5>
|     |-DeclStmt 0x55756587a2e8 <line:741:9, col:26>
|     | `-VarDecl 0x55756587a280 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55756587a508 <line:742:9, col:55>
|     | `-VarDecl 0x55756587a310 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55756587a4f0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55756587a4c0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55756587a4a8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55756587a488 <col:22, col:54> 'String' (CXXTemporary 0x55756587a488)
|     |           `-CXXMemberCallExpr 0x55756587a418 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55756587a388 <col:22> '<bound member function type>' ->find 0x557565870c68
|     |             | `-CXXThisExpr 0x55756587a378 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55756587a450 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55756587a3b8 <col:27> 'const char *' lvalue ParmVar 0x5575658517d8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55756587a468 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55756587a3d8 <col:36> 'int' lvalue ParmVar 0x557565851858 'flags' 'int'
|     |             `-DeclRefExpr 0x55756587a3f8 <col:43> 'Args::Slot *' lvalue Var 0x55756587a280 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55756587a8e0 <line:743:9, col:72>
|     | `-VarDecl 0x55756587a558 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55756587a8b0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55756587a820 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55756587a868 <col:56> 'T' lvalue ParmVar 0x5575658518f8 'variable' 'T &'
|     |     `-UnaryOperator 0x55756587a898 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55756587a888 <col:67> 'Args *' this
|     `-CallExpr 0x55756587b0c0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55756587a908 <col:9> '<bound member function type>' ->postparse 0x557565870e78
|       | `-CXXThisExpr 0x55756587a8f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55756587b080 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55756587a938 <col:19> 'T *' lvalue Var 0x55756587a558 's' 'T *'
|       | `-ParenExpr 0x55756587b060 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55756587b030 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55756587b018 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55756587b000 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55756587afe0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55756587afb0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |     |       `-ImplicitCastExpr 0x55756587af98 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55756587a958 <col:25> 'String' lvalue Var 0x55756587a310 'str' 'String'
|       |     |-CallExpr 0x55756587ae08 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55756587abe0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55756587ace0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55756587ad00 <col:89> 'String' lvalue Var 0x55756587a310 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55756587adb0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55756587ad40 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|       |     | | `-DeclRefExpr 0x55756587ad20 <col:95> 'T *' lvalue Var 0x55756587a558 's' 'T *'
|       |     | `-UnaryOperator 0x55756587adf0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55756587ade0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55756587af78 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55756587af58 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55756587af28 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55756587aed8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55756587ae68 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|       |         | | `-DeclRefExpr 0x55756587ae48 <col:109> 'T *' lvalue Var 0x55756587a558 's' 'T *'
|       |         | `-DeclRefExpr 0x55756587af08 <col:113> 'const V' lvalue ParmVar 0x557565851998 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55756587af48 <col:120> 'bool' true
|       `-DeclRefExpr 0x55756587b0a0 <col:128> 'Args::Slot *' lvalue Var 0x55756587a280 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5575658520a8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x557565851bf0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565851c68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565852008 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x557565851d28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565851da8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557565851e20 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x557565851ec8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55756587bce8 <col:75, line:754:5>
|     |-DeclStmt 0x55756587b198 <line:749:9, col:26>
|     | `-VarDecl 0x55756587b130 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55756587bcb0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55756587bcd0 <line:750:13, col:58>
|       | `-VarDecl 0x55756587b1c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55756587b3a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55756587b370 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55756587b358 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55756587b338 <col:26, col:58> 'String' (CXXTemporary 0x55756587b338)
|       |           `-CXXMemberCallExpr 0x55756587b2c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55756587b238 <col:26> '<bound member function type>' ->find 0x557565870c68
|       |             | `-CXXThisExpr 0x55756587b228 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55756587b300 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55756587b268 <col:31> 'const char *' lvalue ParmVar 0x557565851d28 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55756587b318 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55756587b288 <col:40> 'int' lvalue ParmVar 0x557565851da8 'flags' 'int'
|       |             `-DeclRefExpr 0x55756587b2a8 <col:47> 'Args::Slot *' lvalue Var 0x55756587b130 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55756587b458 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55756587b440 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55756587b420 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55756587b3f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |       `-ImplicitCastExpr 0x55756587b3d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55756587b3b8 <col:20> 'String' lvalue Var 0x55756587b1c0 'str' 'String'
|       `-CompoundStmt 0x55756587bc90 <col:61, line:753:9>
|         |-DeclStmt 0x55756587b830 <line:751:13, col:63>
|         | `-VarDecl 0x55756587b4a8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55756587b800 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55756587b770 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55756587b7b8 <col:47> 'T' lvalue ParmVar 0x557565851ec8 'variable' 'T &'
|         |     `-UnaryOperator 0x55756587b7e8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55756587b7d8 <col:58> 'Args *' this
|         `-CallExpr 0x55756587bc60 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55756587b858 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|           | `-CXXThisExpr 0x55756587b848 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55756587bc20 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55756587b888 <col:23> 'T *' lvalue Var 0x55756587b4a8 's' 'T *'
|           | `-CallExpr 0x55756587bbe0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55756587ba70 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55756587bab8 <col:56> 'P' lvalue ParmVar 0x557565851e20 'parser' 'P'
|           |   |-DeclRefExpr 0x55756587bad8 <col:64> 'String' lvalue Var 0x55756587b1c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55756587bb88 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55756587bb18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|           |   | `-DeclRefExpr 0x55756587baf8 <col:70> 'T *' lvalue Var 0x55756587b4a8 's' 'T *'
|           |   `-UnaryOperator 0x55756587bbc8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55756587bbb8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55756587bc40 <col:81> 'Args::Slot *' lvalue Var 0x55756587b130 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557565852708 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x557565852120 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x557565852198 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x557565852218 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557565852668 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5575658522e0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565852360 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5575658523d8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x557565852478 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x557565852518 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55756587ca78 <col:98, line:762:5>
|     |-DeclStmt 0x55756587bd80 <line:758:9, col:26>
|     | `-VarDecl 0x55756587bd18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55756587bfa0 <line:759:9, col:55>
|     | `-VarDecl 0x55756587bda8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55756587bf88 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55756587bf58 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55756587bf40 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55756587bf20 <col:22, col:54> 'String' (CXXTemporary 0x55756587bf20)
|     |           `-CXXMemberCallExpr 0x55756587beb0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55756587be20 <col:22> '<bound member function type>' ->find 0x557565870c68
|     |             | `-CXXThisExpr 0x55756587be10 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55756587bee8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55756587be50 <col:27> 'const char *' lvalue ParmVar 0x5575658522e0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55756587bf00 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55756587be70 <col:36> 'int' lvalue ParmVar 0x557565852360 'flags' 'int'
|     |             `-DeclRefExpr 0x55756587be90 <col:43> 'Args::Slot *' lvalue Var 0x55756587bd18 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55756587c3c0 <line:760:9, col:59>
|     | `-VarDecl 0x55756587bff8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55756587c390 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55756587c300 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55756587c348 <col:43> 'T' lvalue ParmVar 0x557565852478 'variable' 'T &'
|     |     `-UnaryOperator 0x55756587c378 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55756587c368 <col:54> 'Args *' this
|     `-CallExpr 0x55756587ca48 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55756587c3e8 <col:9> '<bound member function type>' ->postparse 0x557565870e78
|       | `-CXXThisExpr 0x55756587c3d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55756587ca08 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55756587c418 <col:19> 'T *' lvalue Var 0x55756587bff8 's' 'T *'
|       | `-ParenExpr 0x55756587c9e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55756587c9b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55756587c9a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55756587c988 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55756587c968 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55756587c938 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |     |       `-ImplicitCastExpr 0x55756587c920 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55756587c438 <col:25> 'String' lvalue Var 0x55756587bda8 'str' 'String'
|       |     |-CallExpr 0x55756587c790 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55756587c620 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55756587c668 <col:59> 'P' lvalue ParmVar 0x5575658523d8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55756587c688 <col:67> 'String' lvalue Var 0x55756587bda8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55756587c738 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55756587c6c8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|       |     | | `-DeclRefExpr 0x55756587c6a8 <col:73> 'T *' lvalue Var 0x55756587bff8 's' 'T *'
|       |     | `-UnaryOperator 0x55756587c778 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55756587c768 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55756587c900 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55756587c8e0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55756587c8b0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55756587c860 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55756587c7f0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|       |         | | `-DeclRefExpr 0x55756587c7d0 <col:87> 'T *' lvalue Var 0x55756587bff8 's' 'T *'
|       |         | `-DeclRefExpr 0x55756587c890 <col:91> 'const V' lvalue ParmVar 0x557565852518 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55756587c8d0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55756587ca28 <col:106> 'Args::Slot *' lvalue Var 0x55756587bd18 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557565852d78 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x557565852788 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565852808 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557565852888 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557565852cd8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557565852950 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5575658529d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557565852a48 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x557565852ae8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x557565852b88 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55756587da58 <col:60, line:773:5>
|     |-DeclStmt 0x55756587cb20 <line:767:9, col:26>
|     | `-VarDecl 0x55756587cab8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55756587da20 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55756587da40 <line:768:13, col:58>
|       | `-VarDecl 0x55756587cb48 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55756587cd28 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55756587ccf8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55756587cce0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55756587ccc0 <col:26, col:58> 'String' (CXXTemporary 0x55756587ccc0)
|       |           `-CXXMemberCallExpr 0x55756587cc50 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55756587cbc0 <col:26> '<bound member function type>' ->find 0x557565870c68
|       |             | `-CXXThisExpr 0x55756587cbb0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55756587cc88 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55756587cbf0 <col:31> 'const char *' lvalue ParmVar 0x557565852950 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55756587cca0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55756587cc10 <col:40> 'int' lvalue ParmVar 0x5575658529d0 'flags' 'int'
|       |             `-DeclRefExpr 0x55756587cc30 <col:47> 'Args::Slot *' lvalue Var 0x55756587cab8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55756587cde0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55756587cdc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55756587cda8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55756587cd78 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |       `-ImplicitCastExpr 0x55756587cd60 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55756587cd40 <col:20> 'String' lvalue Var 0x55756587cb48 'str' 'String'
|       `-CompoundStmt 0x55756587d9f8 <col:61, line:772:9>
|         |-DeclStmt 0x55756587d120 <line:769:13, col:66>
|         | `-VarDecl 0x55756587ce38 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55756587d0f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55756587d060 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55756587d0a8 <col:49> 'T1' lvalue ParmVar 0x557565852ae8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55756587d0d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55756587d0c8 <col:61> 'Args *' this
|         |-DeclStmt 0x55756587d490 <line:770:13, col:66>
|         | `-VarDecl 0x55756587d1a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55756587d460 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55756587d3d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55756587d418 <col:49> 'T2' lvalue ParmVar 0x557565852b88 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55756587d448 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55756587d438 <col:61> 'Args *' this
|         `-CallExpr 0x55756587d9c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55756587d4b8 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|           | `-CXXThisExpr 0x55756587d4a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55756587d988 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55756587d528 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55756587d4e8 <col:23> 'T1 *' lvalue Var 0x55756587ce38 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55756587d508 <col:29> 'T2 *' lvalue Var 0x55756587d1a8 's2' 'T2 *'
|           | `-CallExpr 0x55756587d940 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55756587d710 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55756587d758 <col:63> 'P' lvalue ParmVar 0x557565852a48 'parser' 'P'
|           |   |-DeclRefExpr 0x55756587d778 <col:71> 'String' lvalue Var 0x55756587cb48 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55756587d828 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55756587d7b8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|           |   | `-DeclRefExpr 0x55756587d798 <col:77> 'T1 *' lvalue Var 0x55756587ce38 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55756587d8e8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55756587d878 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|           |   | `-DeclRefExpr 0x55756587d858 <col:82> 'T2 *' lvalue Var 0x55756587d1a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55756587d928 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55756587d918 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55756587d9a8 <col:94> 'Args::Slot *' lvalue Var 0x55756587cab8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557565853168 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x557565852df8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5575658530c8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x557565852eb0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565852f30 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x557565852fa8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55756587df70 <col:67, line:780:5>
|     |-DeclStmt 0x55756587daf0 <line:777:9, col:26>
|     | `-VarDecl 0x55756587da88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55756587df38 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55756587df58 <line:778:13, col:58>
|       | `-VarDecl 0x55756587db18 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55756587dcf8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55756587dcc8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55756587dcb0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55756587dc90 <col:26, col:58> 'String' (CXXTemporary 0x55756587dc90)
|       |           `-CXXMemberCallExpr 0x55756587dc20 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55756587db90 <col:26> '<bound member function type>' ->find 0x557565870c68
|       |             | `-CXXThisExpr 0x55756587db80 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55756587dc58 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55756587dbc0 <col:31> 'const char *' lvalue ParmVar 0x557565852eb0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55756587dc70 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55756587dbe0 <col:40> 'int' lvalue ParmVar 0x557565852f30 'flags' 'int'
|       |             `-DeclRefExpr 0x55756587dc00 <col:47> 'Args::Slot *' lvalue Var 0x55756587da88 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55756587ddb0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55756587dd98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55756587dd78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55756587dd48 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|       |       `-ImplicitCastExpr 0x55756587dd30 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55756587dd10 <col:20> 'String' lvalue Var 0x55756587db18 'str' 'String'
|       `-CallExpr 0x55756587df08 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55756587ddd8 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|         | `-CXXThisExpr 0x55756587ddc8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55756587deb8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55756587de28 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55756587de08 <col:23> 'P' lvalue ParmVar 0x557565852fa8 'parser' 'P'
|         | |-DeclRefExpr 0x55756587de70 <col:36> 'String' lvalue Var 0x55756587db18 'str' 'String'
|         | `-UnaryOperator 0x55756587dea0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55756587de90 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55756587dee8 <col:49> 'Args::Slot *' lvalue Var 0x55756587da88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557565853508 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5575658531d8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557565853468 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x557565853290 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565853310 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x557565853388 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55756587e8e0 <col:71, line:792:5>
|     |-DeclStmt 0x55756587e008 <line:784:9, col:26>
|     | `-VarDecl 0x55756587dfa0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55756587e0d8 <line:785:9, col:29>
|     | `-VarDecl 0x55756587e038 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55756587e0c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55756587e0a0 <col:28> 'int' 1
|     |-WhileStmt 0x55756587e790 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55756587e7b0 <line:786:16, col:61>
|     | | `-VarDecl 0x55756587e100 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55756587e2e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55756587e2b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55756587e298 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55756587e278 <col:29, col:61> 'String' (CXXTemporary 0x55756587e278)
|     | |           `-CXXMemberCallExpr 0x55756587e208 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55756587e178 <col:29> '<bound member function type>' ->find 0x557565870c68
|     | |             | `-CXXThisExpr 0x55756587e168 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55756587e240 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55756587e1a8 <col:34> 'const char *' lvalue ParmVar 0x557565853290 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55756587e258 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55756587e1c8 <col:43> 'int' lvalue ParmVar 0x557565853310 'flags' 'int'
|     | |             `-DeclRefExpr 0x55756587e1e8 <col:50> 'Args::Slot *' lvalue Var 0x55756587dfa0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55756587e398 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55756587e380 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55756587e360 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55756587e330 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|     | |       `-ImplicitCastExpr 0x55756587e318 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55756587e2f8 <col:23> 'String' lvalue Var 0x55756587e100 'str' 'String'
|     | `-CompoundStmt 0x55756587e768 <col:64, line:790:9>
|     |   |-CallExpr 0x55756587e4f0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55756587e3c0 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|     |   | | `-CXXThisExpr 0x55756587e3b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55756587e4a0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55756587e410 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55756587e3f0 <col:23> 'P' lvalue ParmVar 0x557565853388 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55756587e458 <col:36> 'String' lvalue Var 0x55756587e100 'str' 'String'
|     |   | | `-UnaryOperator 0x55756587e488 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55756587e478 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55756587e4d0 <col:49> 'Args::Slot *' lvalue Var 0x55756587dfa0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55756587e688 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55756587e520 <col:13> 'int' lvalue Var 0x55756587e038 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55756587e670 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55756587e650 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55756587e5b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55756587e598 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55756587e580 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55756587e540 <col:28> 'int' lvalue Var 0x55756587e038 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55756587e560 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55756587e638 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55756587e608 <col:49> 'bool' lvalue ->_read_status 0x557565834670
|     |   |         `-ImplicitCastExpr 0x55756587e5e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55756587e5d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55756587e738 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55756587e6a8 <col:13> 'int' lvalue ParmVar 0x557565853310 'flags' 'int'
|     |     `-UnaryOperator 0x55756587e720 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55756587e708 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55756587e6e8 <col:23> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55756587e8c0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55756587e7f8 <col:9> 'bool' lvalue ->_read_status 0x557565834670
|       | `-ImplicitCastExpr 0x55756587e7d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55756587e7c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55756587e8a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55756587e880 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55756587e868 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55756587e828 <col:25> 'int' lvalue Var 0x55756587e038 'read_status' 'int'
|           `-IntegerLiteral 0x55756587e848 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5575658539e8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x557565853578 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5575658535f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565853948 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5575658536b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565853738 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5575658537b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x557565853858 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x557565883318 <col:84, line:805:5>
|     |-DeclStmt 0x55756587e988 <line:796:9, col:26>
|     | `-VarDecl 0x55756587e920 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55756587ea58 <line:797:9, col:29>
|     | `-VarDecl 0x55756587e9b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55756587ea40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55756587ea20 <col:28> 'int' 1
|     |-DeclStmt 0x55756587ed90 <line:798:9, col:71>
|     | `-VarDecl 0x55756587eaa8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55756587ed60 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55756587ecd0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55756587ed18 <col:55> 'T' lvalue ParmVar 0x557565853858 'variable' 'T &'
|     |     `-UnaryOperator 0x55756587ed48 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55756587ed38 <col:66> 'Args *' this
|     |-WhileStmt 0x55756587f720 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55756587f740 <line:799:16, col:61>
|     | | `-VarDecl 0x55756587edb8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55756587ef98 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55756587ef68 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55756587ef50 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55756587ef30 <col:29, col:61> 'String' (CXXTemporary 0x55756587ef30)
|     | |           `-CXXMemberCallExpr 0x55756587eec0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55756587ee30 <col:29> '<bound member function type>' ->find 0x557565870c68
|     | |             | `-CXXThisExpr 0x55756587ee20 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55756587eef8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55756587ee60 <col:34> 'const char *' lvalue ParmVar 0x5575658536b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55756587ef10 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55756587ee80 <col:43> 'int' lvalue ParmVar 0x557565853738 'flags' 'int'
|     | |             `-DeclRefExpr 0x55756587eea0 <col:50> 'Args::Slot *' lvalue Var 0x55756587e920 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55756587f050 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55756587f038 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55756587f018 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55756587efe8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|     | |       `-ImplicitCastExpr 0x55756587efd0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55756587efb0 <col:23> 'String' lvalue Var 0x55756587edb8 'str' 'String'
|     | `-CompoundStmt 0x55756587f6f8 <col:64, line:803:9>
|     |   |-CallExpr 0x55756587f480 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55756587f078 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|     |   | | `-CXXThisExpr 0x55756587f068 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55756587f440 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55756587f0a8 <col:23> 'T *' lvalue Var 0x55756587eaa8 's' 'T *'
|     |   | | `-CallExpr 0x55756587f400 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55756587f290 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55756587f2d8 <col:56> 'P' lvalue ParmVar 0x5575658537b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55756587f2f8 <col:64> 'String' lvalue Var 0x55756587edb8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55756587f3a8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55756587f338 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|     |   | |   | `-DeclRefExpr 0x55756587f318 <col:70> 'T *' lvalue Var 0x55756587eaa8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55756587f3e8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55756587f3d8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55756587f460 <col:81> 'Args::Slot *' lvalue Var 0x55756587e920 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55756587f618 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55756587f4b0 <col:13> 'int' lvalue Var 0x55756587e9b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55756587f600 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55756587f5e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55756587f548 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55756587f528 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55756587f510 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55756587f4d0 <col:28> 'int' lvalue Var 0x55756587e9b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55756587f4f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55756587f5c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55756587f598 <col:49> 'bool' lvalue ->_read_status 0x557565834670
|     |   |         `-ImplicitCastExpr 0x55756587f578 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55756587f568 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55756587f6c8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55756587f638 <col:13> 'int' lvalue ParmVar 0x557565853738 'flags' 'int'
|     |     `-UnaryOperator 0x55756587f6b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55756587f698 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55756587f678 <col:23> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5575658832f8 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55756587f788 <col:9> 'bool' lvalue ->_read_status 0x557565834670
|       | `-ImplicitCastExpr 0x55756587f768 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55756587f758 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5575658832d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5575658832b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5575658832a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x557565883260 <col:25> 'int' lvalue Var 0x55756587e9b8 'read_status' 'int'
|           `-IntegerLiteral 0x557565883280 <col:40> 'int' 1
|-FunctionTemplateDecl 0x557565853fc8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x557565853a60 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557565853ad8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557565853f28 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x557565853b98 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557565853c18 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x557565853c90 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x557565853de0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x557565884118 <col:87, line:821:5>
|     |-DeclStmt 0x5575658833c8 <line:809:9, col:26>
|     | `-VarDecl 0x557565883360 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x557565883498 <line:810:9, col:29>
|     | `-VarDecl 0x5575658833f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x557565883480 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x557565883460 <col:28> 'int' 1
|     |-DeclStmt 0x5575658836d8 <line:811:9, col:38>
|     | `-VarDecl 0x5575658835c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5575658836b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x557565883638 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x557565883690 <col:29> 'Vector<T>' lvalue ParmVar 0x557565853de0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x557565883fc8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x557565883fe8 <line:812:16, col:61>
|     | | `-VarDecl 0x557565883700 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5575658838e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5575658838b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x557565883898 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x557565883878 <col:29, col:61> 'String' (CXXTemporary 0x557565883878)
|     | |           `-CXXMemberCallExpr 0x557565883808 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x557565883778 <col:29> '<bound member function type>' ->find 0x557565870c68
|     | |             | `-CXXThisExpr 0x557565883768 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x557565883840 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5575658837a8 <col:34> 'const char *' lvalue ParmVar 0x557565853b98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x557565883858 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5575658837c8 <col:43> 'int' lvalue ParmVar 0x557565853c18 'flags' 'int'
|     | |             `-DeclRefExpr 0x5575658837e8 <col:50> 'Args::Slot *' lvalue Var 0x557565883360 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x557565883998 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x557565883980 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x557565883960 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x557565883930 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5575654ef5b8
|     | |       `-ImplicitCastExpr 0x557565883918 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5575658838f8 <col:23> 'String' lvalue Var 0x557565883700 'str' 'String'
|     | `-CompoundStmt 0x557565883f90 <col:64, line:819:9>
|     |   |-DeclStmt 0x557565883a58 <line:813:13, col:23>
|     |   | `-VarDecl 0x5575658839c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x557565883a38 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x557565883bd8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x557565883a80 <col:13> '<bound member function type>' ->postparse 0x557565870e78
|     |   | | `-CXXThisExpr 0x557565883a70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x557565883b80 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x557565883ad0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x557565883ab0 <col:23> 'P' lvalue ParmVar 0x557565853c90 'parser' 'P'
|     |   | | |-DeclRefExpr 0x557565883b18 <col:36> 'String' lvalue Var 0x557565883700 'str' 'String'
|     |   | | |-DeclRefExpr 0x557565883b38 <col:41> 'T' lvalue Var 0x5575658839c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x557565883b68 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x557565883b58 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x557565883bb8 <col:53> 'Args::Slot *' lvalue Var 0x557565883360 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x557565883d30 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x557565883c68 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x557565883c38 <col:17> 'bool' lvalue ->_read_status 0x557565834670
|     |   | |   `-ImplicitCastExpr 0x557565883c18 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x557565883c08 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x557565883d08 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x557565883ca0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x557565883c80 <col:17> 'Vector<T> *' lvalue Var 0x5575658835c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x557565883ce8 <col:30> 'T' lvalue Var 0x5575658839c0 'sx' 'T'
|     |   |-BinaryOperator 0x557565883eb0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x557565883d48 <col:13> 'int' lvalue Var 0x5575658833f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x557565883e98 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x557565883e78 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x557565883de0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x557565883dc0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x557565883da8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x557565883d68 <col:28> 'int' lvalue Var 0x5575658833f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x557565883d88 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x557565883e60 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x557565883e30 <col:49> 'bool' lvalue ->_read_status 0x557565834670
|     |   |         `-ImplicitCastExpr 0x557565883e10 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x557565883e00 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x557565883f60 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x557565883ed0 <col:13> 'int' lvalue ParmVar 0x557565853c18 'flags' 'int'
|     |     `-UnaryOperator 0x557565883f48 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x557565883f30 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x557565883f10 <col:23> 'const int' lvalue Var 0x55756583d188 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5575658840f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x557565884030 <col:9> 'bool' lvalue ->_read_status 0x557565834670
|       | `-ImplicitCastExpr 0x557565884010 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x557565884000 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5575658840d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5575658840b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5575658840a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x557565884060 <col:25> 'int' lvalue Var 0x5575658833f8 'read_status' 'int'
|           `-IntegerLiteral 0x557565884080 <col:40> 'int' 1
|-AccessSpecDecl 0x557565854040 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x557565854068 prev 0x55756583b488 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x557565854160 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x557565854250 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x557565884150 <col:16, line:828:9>
| |-CXXDestructorDecl 0x557565854340 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x557565884160 <col:25, line:830:9>
| |-CXXMethodDecl 0x557565854440 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5575658544f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x557565854598 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x557565854598
| | `-ParmVarDecl 0x5575658546a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x557565854e68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x557565854e68
|   `-ParmVarDecl 0x557565854f78 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x557565854718 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x557565854878 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x557565854a70 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x557565854920 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x557565854998 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x557565884340 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x557565854d28 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5575658841b0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x557565884170 <col:20> 'void *' lvalue ParmVar 0x557565854920 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x557565854d90 '_slot' 'char *'
| | | `-CXXNewExpr 0x557565884238 <col:32, col:45> 'char *' array Function 0x557565312008 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x557565884220 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5575658841f0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x557565854998 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x557565854df0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x557565884300 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5575658842c0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x557565854998 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5575658843c0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x557565854b70 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x557565854340 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x557565884448 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x557565884428 <line:840:13, col:22> 'void' array Function 0x557565312368 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x557565884410 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5575658843e0 <col:22> 'char *' lvalue ->_slot 0x557565854d90
| |         `-CXXThisExpr 0x5575658843d0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x557565854c70 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x557565854440 Slot::store 'void ()' ]
| | `-CompoundStmt 0x557565884638 <col:22, line:844:9>
| |   `-CallExpr 0x5575658845a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x557565884588 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x557565884568 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55756541e008 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5575658845d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5575658844b8 <col:20> 'void *' lvalue ->_ptr 0x557565854d28
| |     |   `-CXXThisExpr 0x5575658844a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x557565884608 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5575658845f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5575658844f8 <col:26> 'char *' lvalue ->_slot 0x557565854d90
| |     |     `-CXXThisExpr 0x5575658844e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x557565884620 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x557565884538 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x557565854df0
| |         `-CXXThisExpr 0x557565884528 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x557565854d28 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x557565854d90 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x557565854df0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x557565854fe8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x557565854fe8
| | `-ParmVarDecl 0x5575658550f8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x557565855198 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x557565855198
|   `-ParmVarDecl 0x5575658552a8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x557565855448 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x557565855318 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5575658553b8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5575658556e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5575658558d8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5575658557a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x557565855a58 '_ptr' 'T *'
|   | | `-ParenListExpr 0x557565884670 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x557565884650 <col:20> 'T *' lvalue ParmVar 0x5575658557a8 'ptr' 'T *'
|   | `-CompoundStmt 0x5575658846c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5575658559a8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x557565854440 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x557565884870 <col:22, line:857:9>
|   |   `-CallExpr 0x557565884840 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5575658846d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5575654d6738 0x557565480a68
|   |     |-CXXOperatorCallExpr 0x5575658847d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x557565884760 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5575656e36e8 0x5575656e3308 0x5575656e2f38 0x5575656e2b58 0x5575656e2778 0x5575656e23a8
|   |     | `-MemberExpr 0x557565884730 <col:29> 'T *' lvalue ->_ptr 0x557565855a58
|   |     |   `-CXXThisExpr 0x557565884720 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x557565884810 <col:35> 'T' lvalue ->_slot 0x557565855ab8
|   |       `-CXXThisExpr 0x557565884800 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x557565855a58 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x557565855ab8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x557565855b20 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x557565862720 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x557565862770 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557565862700 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5575658626e0 <col:31> 'int' 48
|-FieldDecl 0x557565862798 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5575658627f8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x557565862858 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x557565862990 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x557565870510 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x557565870570 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x557565870620 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x557565870848 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x557565870750 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x557565870998 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x557565870908 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x557565870c68 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x557565870a58 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x557565870ad8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x557565870b80 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x557565870e78 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x557565870d30 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x557565870da8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x557565870f48 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x557565871098 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x557565871000 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x557565871428 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x557565871158 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5575658711d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x557565871280 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x557565871338 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x557565871650 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x557565871500 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x557565871578 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x557565871968 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x557565871700 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5575658718c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5575658717d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct HandlerCallArg
         0 |   int flags
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557565924270 <../dummy_inc/click/handlercall.hh:568:1, line:574:1> line:568:8 referenced struct HandlerCallArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557565924388 <col:1, col:8> col:8 implicit referenced struct HandlerCallArg
|-CXXConstructorDecl 0x557565924508 <line:569:5, line:571:5> line:569:5 used HandlerCallArg 'void (int)'
| |-ParmVarDecl 0x557565924430 <col:20, col:24> col:24 used f 'int'
| |-CXXCtorInitializer Field 0x557565924868 'flags' 'int'
| | `-ImplicitCastExpr 0x557565924910 <line:570:10> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5575659248d0 <col:10> 'int' lvalue ParmVar 0x557565924430 'f' 'int'
| `-CompoundStmt 0x557565924958 <col:13, line:571:5>
|-CXXMethodDecl 0x557565924798 <line:572:5, col:78> col:10 parse 'bool (const String &, HandlerCall &, const ArgContext &)'
| |-ParmVarDecl 0x5575659245c8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x557565924640 <col:35, col:48> col:48 result 'HandlerCall &'
| `-ParmVarDecl 0x5575659246b8 <col:56, col:74> col:74 args 'const ArgContext &'
|-FieldDecl 0x557565924868 <line:573:5, col:9> col:9 referenced flags 'int'
|-CXXConstructorDecl 0x55756594f318 <line:568:8> col:8 implicit constexpr HandlerCallArg 'void (const HandlerCallArg &)' inline default trivial noexcept-unevaluated 0x55756594f318
| `-ParmVarDecl 0x55756594f428 <col:8> col:8 'const HandlerCallArg &'
|-CXXConstructorDecl 0x55756594f4c8 <col:8> col:8 implicit used constexpr HandlerCallArg 'void (HandlerCallArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55756594f5d8 <col:8> col:8 used 'HandlerCallArg &&'
| |-CXXCtorInitializer Field 0x557565924868 'flags' 'int'
| | `-ImplicitCastExpr 0x55756594fdd0 <col:8> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55756594fda0 <col:8> 'int' xvalue .flags 0x557565924868
| |     `-CXXStaticCastExpr 0x55756594fd70 <col:8> 'HandlerCallArg' xvalue static_cast<struct HandlerCallArg &&> <NoOp>
| |       `-DeclRefExpr 0x55756594fd40 <col:8> 'HandlerCallArg' lvalue ParmVar 0x55756594f5d8 '' 'HandlerCallArg &&'
| `-CompoundStmt 0x55756594fe18 <col:8>
`-CXXDestructorDecl 0x55756594f690 <col:8> col:8 implicit referenced ~HandlerCallArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.HandlerCallArg = type { i32 }
  NonVirtualBaseLLVMType:%struct.HandlerCallArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756570aff0 prev 0x5575656e78b0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55756570b128 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55756570b1b8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55756570b260 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55756570b300 <col:20>
| `-OptimizeNoneAttr 0x55756570b358 <col:30>
|-CXXMethodDecl 0x55756570b3a8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55756570b448 <col:20>
| `-OptimizeNoneAttr 0x55756570b4a0 <col:30>
|-CXXMethodDecl 0x55756570b4f0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55756570b5b8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55756570b680 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55756570b798 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55756570b860 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55756570b900 <col:20>
| `-OptimizeNoneAttr 0x55756570b958 <col:30>
|-CXXMethodDecl 0x55756570b9c8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55756570ba68 <col:20>
| `-OptimizeNoneAttr 0x55756570bac0 <col:30>
|-CXXMethodDecl 0x55756570bb68 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55756570bc08 <col:20>
| `-OptimizeNoneAttr 0x55756570bc60 <col:30>
|-CXXMethodDecl 0x55756570bcb0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55756570bdc8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55756570bee8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55756570c008 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55756570c0d0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55756570c170 <col:62> "" ""
|-AccessSpecDecl 0x55756570c1e0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55756570c240 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55756570ce38 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55756570d060 <col:29, col:31>
|-CXXMethodDecl 0x55756570c308 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55756570c448 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55756570c3b8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55756570c540 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55756570d070 <col:23, col:25>
|-CXXMethodDecl 0x55756570c6f8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55756570c630 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55756570c9c8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55756570c7b0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55756570c828 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55756570c8a0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55756570cb58 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55756570ca90 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55756570cc50 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55756570ccb8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55756570ccb8
  `-ParmVarDecl 0x55756570cdc8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656a79f8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5575656a7b28 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5575656a8618 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon.19 = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5575656a42f8 prev 0x5575657205d0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5575656a43f0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5575656a4480 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5575656a44e0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5575656a4588 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5575656a46a8 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5575656a4848 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5575656a4788 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5575656a4a98 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5575656a4908 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5575656a4988 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5575656a4bf0 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5575656a4b60 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5575656a4d78 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5575656a4cb0 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5575656a4f28 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5575656a4e68 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5575656a5020 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5575656a87f0 <col:21, line:58:5>
|   `-IfStmt 0x5575656a87d8 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5575656a8740 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5575656a8710 <col:6> '<bound member function type>' ->scheduled 0x5575656a5878
|     |   `-ImplicitCastExpr 0x5575656a8760 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5575656a8700 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5575656a87b8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5575656a8788 <col:6> '<bound member function type>' ->unschedule 0x5575656a6ea0
|         `-CXXThisExpr 0x5575656a8778 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5575656a5120 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5575656a8990 <col:26, line:65:5>
|   |-BinaryOperator 0x5575656a88b0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5575656a8848 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5575656a7b28
|   | | `-MemberExpr 0x5575656a8818 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5575656a7be8
|   | |   `-CXXThisExpr 0x5575656a8808 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5575656a8898 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5575656a8878 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5575656a8048 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5575656a8970 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5575656a88e0 <col:2> 'void *' lvalue ->_thunk 0x5575656a7c68
|     | `-CXXThisExpr 0x5575656a88d0 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5575656a8948 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5575656a8910 <col:20> 'int' 1
|-CXXMethodDecl 0x5575656a5260 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5575656a51d0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5575656a8af0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5575656a89e0 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5575656a89b0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5575656a51d0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5575656a8ad0 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5575656a8aa0 <col:2> '<bound member function type>' ->assign 0x5575656a5120
|       `-CXXThisExpr 0x5575656a8a90 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5575656a5430 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5575656a5318 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5575656a5398 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x557565758fd0 <col:58, line:79:5>
|   |-BinaryOperator 0x557565758f18 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x557565758eb0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5575656a7b28
|   | | `-MemberExpr 0x5575656a8b20 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5575656a7be8
|   | |   `-CXXThisExpr 0x5575656a8b10 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x557565758f00 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x557565758ee0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5575656a5318 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x557565758fb0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x557565758f48 <col:2> 'void *' lvalue ->_thunk 0x5575656a7c68
|     | `-CXXThisExpr 0x557565758f38 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x557565758f98 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x557565758f78 <col:11> 'void *' lvalue ParmVar 0x5575656a5398 'user_data' 'void *'
|-CXXMethodDecl 0x5575656a5580 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5575656a54f0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x557565759168 <col:35, line:87:5>
|   |-BinaryOperator 0x557565759098 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x557565759030 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5575656a7b28
|   | | `-MemberExpr 0x557565759000 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5575656a7be8
|   | |   `-CXXThisExpr 0x557565758ff0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x557565759080 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x557565759060 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5575656a8220 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x557565759148 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5575657590c8 <col:2> 'void *' lvalue ->_thunk 0x5575656a7c68
|     | `-CXXThisExpr 0x5575657590b8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x557565759130 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x557565759118 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5575657590f8 <col:11> 'Element *' lvalue ParmVar 0x5575656a54f0 'element' 'Element *'
|-CXXMethodDecl 0x5575656a56c8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5575656a5638 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x557565759300 <col:29, line:94:5>
|   |-BinaryOperator 0x557565759230 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5575657591c8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5575656a7b28
|   | | `-MemberExpr 0x557565759198 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5575656a7be8
|   | |   `-CXXThisExpr 0x557565759188 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x557565759218 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5575657591f8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5575656a83f8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5575657592e0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x557565759260 <col:2> 'void *' lvalue ->_thunk 0x5575656a7c68
|     | `-CXXThisExpr 0x557565759250 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5575657592c8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5575657592b0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x557565759290 <col:11> 'Task *' lvalue ParmVar 0x5575656a5638 'task' 'Task *'
|-CXXMethodDecl 0x5575656a57b8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5575657593e0 <col:37, line:100:5>
|   `-ReturnStmt 0x5575657593d0 <line:99:2, col:19>
|     `-BinaryOperator 0x5575657593b0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x557565759380 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x557565759330 <col:9> 'Element *const' lvalue ->_owner 0x5575656a7cc8
|       |   `-CXXThisExpr 0x557565759320 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x557565759398 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x557565759360 <col:19> 'int' 0
|-CXXMethodDecl 0x5575656a5878 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5575657594a0 <col:35, line:105:5>
|   `-ReturnStmt 0x557565759490 <line:104:2, col:23>
|     `-BinaryOperator 0x557565759470 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x557565759458 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x557565759408 <col:9> 'const int' lvalue ->_schedpos1 0x5575656a7948
|       |   `-CXXThisExpr 0x5575657593f8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x557565759438 <col:23> 'int' 0
|-CXXMethodDecl 0x5575656a5938 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x557565759508 <col:51, line:118:5>
|   `-ReturnStmt 0x5575657594f8 <line:117:2, col:9>
|     `-MemberExpr 0x5575657594c8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|       `-CXXThisExpr 0x5575657594b8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5575656a59f8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x557565759a60 <col:37, line:136:5>
|   `-IfStmt 0x557565759a38 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5575657595c8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5575657595b0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x557565759590 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x557565759560 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5575656b26a8
|     |       `-MemberExpr 0x557565759530 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|     |         `-CXXThisExpr 0x557565759520 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5575657599a8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x557565759990 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x557565759960 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x557565759948 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x557565759910 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5575657598f8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5575657598d8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5575656e0e80 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x557565759878 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x557565759860 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x557565759788 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x557565759770 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x557565759750 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5575656e0b40 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5575657596f0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5575657595f0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|     |         |     |   `-CXXThisExpr 0x5575657595e0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x557565759738 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x557565759720 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5575657596d0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5575657596b8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x557565759658 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5575656d41a0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5575657598c0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5575657598a8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x557565759840 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x557565759828 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5575657597f8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x55756552f6f0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x557565759a28 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5575657599f8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5575657599c8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|           `-CXXThisExpr 0x5575657599b8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5575656a5ab8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x557565759b48 <col:35, line:141:5>
|   `-ReturnStmt 0x557565759b38 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x557565759b00 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x557565759ad0 <col:9, col:17> '<bound member function type>' ->router 0x557565732d30
|         `-ImplicitCastExpr 0x557565759b20 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x557565759ab8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x557565759a88 <col:9> 'Element *const' lvalue ->_owner 0x5575656a7cc8
|               `-CXXThisExpr 0x557565759a78 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5575656a5b78 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x557565759bc8 <col:37, line:146:5>
|   `-ReturnStmt 0x557565759bb8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x557565759ba0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x557565759b70 <col:9> 'Element *const' lvalue ->_owner 0x5575656a7cc8
|         `-CXXThisExpr 0x557565759b60 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5575656a5c38 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x557565759c48 <col:41, line:151:5>
|   `-ReturnStmt 0x557565759c38 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x557565759c20 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x557565759bf0 <col:9> 'RouterThread *const' lvalue ->_thread 0x5575656a7d28
|         `-CXXThisExpr 0x557565759be0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5575656a5d00 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5575656a5ec0 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5575656a5db0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5575656a5e28 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5575656a8608 <col:50> 'bool' false
|-CXXMethodDecl 0x5575656a6048 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5575656a5f80 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5575656a6190 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5575656a6100 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5575656a62d8 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5575656a6248 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5575656a6420 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5575656a6390 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5575656a6568 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5575656a64d8 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5575656a6630 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x557565759db0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x557565759d98 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x557565759d40 <col:2, col:47> 'void'
|       |-MemberExpr 0x557565759c70 <col:2> '<bound member function type>' ->schedule_at_steady 0x5575656a6190
|       | `-CXXThisExpr 0x557565759c60 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557565759d80 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557565759d68 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x557565759d20 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x557565759d08 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x557565759cd8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x55756552f6f0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5575656a6770 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5575656a66e0 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5575656a68b8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a6828 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557565759f38 <col:56, line:241:5>
|   `-ExprWithCleanups 0x557565759f20 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x557565759ec8 <col:2, col:40> 'void'
|       |-MemberExpr 0x557565759dd8 <col:2> '<bound member function type>' ->schedule_after 0x5575656a6770
|       | `-CXXThisExpr 0x557565759dc8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557565759f08 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557565759ef0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x557565759e88 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x557565759e58 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x557565759e18 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656a6828 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x557565759e70 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x557565759e38 <col:38> 'int' 0
|-CXXMethodDecl 0x5575656a6a00 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a6970 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55756575a1a8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x55756575a190 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x55756575a138 <col:2, col:49> 'void'
|       |-MemberExpr 0x557565759f60 <col:2> '<bound member function type>' ->schedule_after 0x5575656a6770
|       | `-CXXThisExpr 0x557565759f50 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55756575a178 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55756575a160 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55756575a0e0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x55756575a0c8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55756575a038 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5575656b4498 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55756575a120 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x55756575a108 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55756575a018 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656a6970 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656a6b48 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5575656a6ab8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x55756575a388 <col:58, line:261:5>
|   `-ExprWithCleanups 0x55756575a370 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x55756575a318 <col:2, col:38> 'void'
|       |-MemberExpr 0x55756575a1d0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5575656a6190
|       | `-CXXThisExpr 0x55756575a1c0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55756575a358 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55756575a340 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55756575a2e0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55756575a2c8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55756575a2a8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5575656e0b40 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55756575a278 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55756575a260 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55756575a210 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|             |     `-CXXThisExpr 0x55756575a200 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x55756575a240 <col:33> 'const Timestamp' lvalue ParmVar 0x5575656a6ab8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5575656a6c90 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a6c00 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55756575a660 <col:58, line:270:5>
|   `-ExprWithCleanups 0x55756575a648 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x55756575a5f0 <col:2, col:79> 'void'
|       |-MemberExpr 0x55756575a3b0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5575656a6190
|       | `-CXXThisExpr 0x55756575a3a0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55756575a630 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55756575a618 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55756575a5b0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x55756575a4e8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x55756575a4d0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x55756575a460 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x55756575a430 <col:31, col:41> '<bound member function type>' .sec 0x5575655311e8
|             | |     `-ImplicitCastExpr 0x55756575a480 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x55756575a400 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|             | |         `-CXXThisExpr 0x55756575a3f0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x55756575a4b8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55756575a498 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656a6c00 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x55756575a578 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x55756575a548 <col:60, col:70> '<bound member function type>' .subsec 0x5575655318e0
|                 `-ImplicitCastExpr 0x55756575a598 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x55756575a518 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|                     `-CXXThisExpr 0x55756575a508 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5575656a6dd8 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a6d48 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55756575a998 <col:60, line:279:5>
|   `-ExprWithCleanups 0x55756575a980 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x55756575a928 <col:2, col:65> 'void'
|       |-MemberExpr 0x55756575a688 <col:2> '<bound member function type>' ->schedule_at_steady 0x5575656a6190
|       | `-CXXThisExpr 0x55756575a678 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55756575a968 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55756575a950 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55756575a8f0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x55756575a8d8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55756575a8b8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5575656e0b40 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55756575a858 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55756575a840 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55756575a6c8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|             |     `-CXXThisExpr 0x55756575a6b8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x55756575a8a0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x55756575a888 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x55756575a7e8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x55756575a7d0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x55756575a7a0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5575656b4498 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x55756575a828 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x55756575a810 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x55756575a780 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5575656a6d48 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5575656a6ea0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5575656a6f60 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x55756575ae60 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x55756575a9f0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x55756575a9c0 <col:2> '<bound member function type>' ->unschedule 0x5575656a6ea0
|   |   `-CXXThisExpr 0x55756575a9b0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x55756575ae48 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x55756575ae10 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x55756575adf8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55756575aaa8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5575653c8788 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x55756575aa20 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5575656a79a8
|       | `-CXXThisExpr 0x55756575aa10 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55756575aa90 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x55756575aa60 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5575656a7020 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x55756575b1b8 <col:42, line:310:5>
|   |-IfStmt 0x55756575b000 <line:306:2, line:307:23>
|   | |-CallExpr 0x55756575af30 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x55756575af18 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x55756575aeb8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5575656d2610 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x55756575aff0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x55756575afd8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x55756575afa8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55756575af90 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x55756575af60 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x55756575b1a8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x55756575b190 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x55756575b160 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55756575b148 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x55756575b108 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55756575b0f0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55756575b0c0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5575656b47b0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55756575b130 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x55756575b0a0 <col:30> 'int' 500
|-CXXMethodDecl 0x5575656a7160 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a70d0 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656a7208 <col:69> "" ""
|-CXXMethodDecl 0x5575656a7318 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a7288 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656a73c0 <col:70> "" ""
|-CXXMethodDecl 0x5575656a74d0 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a7440 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656a7578 <col:71> "" ""
|-CXXMethodDecl 0x5575656a7688 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5575656a75f8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5575656a7730 <col:72> "" ""
|-EnumDecl 0x5575656a77a0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5575656a78a0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5575656a78f0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5575656a7880 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5575656a7860 <col:25> 'int' 1
|-AccessSpecDecl 0x5575656a7908 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5575656a7948 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5575656a79a8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5575656a79f8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5575656a7b28 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5575656a8618 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5575656a7be8 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5575656a7c68 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5575656a7cc8 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5575656a7d28 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5575656a7e78 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5575656a7d88 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5575656a8048 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5575656a7f30 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5575656a7fb0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5575656a8220 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5575656a8108 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5575656a8188 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5575656a83f8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5575656a82e0 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5575656a8360 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5575656a85c8 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.19, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.19, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55756575ff40 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x557565978328 <line:167:18>
|-CXXRecordDecl 0x5575659783e8 prev 0x55756575ff40 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5575659784f8 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.10 = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.10 = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<long>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   long * _ptr
        24 |   long _slot
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class HandlerCall>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class HandlerCall * _ptr
        24 |   class HandlerCall _slot
        24 |     class Element * _e
        32 |     const class Handler * _h
        40 |     class String _value
        40 |       struct String::rep_t _r
        40 |         const char * data
        48 |         int length
        56 |         struct String::memo_t * memo
           | [sizeof=64, dsize=64, align=8,
           |  nvsize=64, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756588cfc0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55756588d0d8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55756588d168 <col:16, col:22> col:16 public
|-EnumDecl 0x55756588d190 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55756588d290 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55756588d4e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756588d270 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55756588d250 <col:21> 'int' 0
| |-EnumConstantDecl 0x55756588d320 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55756588d4f8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756588d300 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55756588d2e0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55756588d3b0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55756588d510 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756588d390 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55756588d370 <col:24> 'int' 34
| |-EnumConstantDecl 0x55756588d440 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55756588d528 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55756588d420 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55756588d400 <col:25> 'int' 95
| `-EnumConstantDecl 0x55756588d490 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55756588eea0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55756588f2d8 <col:7>
|-CXXConstructorDecl 0x55756588efa8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55756588efa8
| `-ParmVarDecl 0x55756588f0b8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55756588f158 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55756588f268 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55756599e500 <col:7>
`-CXXDestructorDecl 0x5575658913d8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756588d558 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55756588d6b8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55756588d748 <col:32, col:38> col:32 public
|-TypedefDecl 0x55756588d780 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x557565314360 'uint32_t' sugar
|   |-Typedef 0x557565223408 'uint32_t'
|   `-TypedefType 0x5575651fc440 '__uint32_t' sugar
|     |-Typedef 0x5575651fc038 '__uint32_t'
|     `-BuiltinType 0x5575651ba410 'unsigned int'
|-CXXConstructorDecl 0x55756588d8c8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55756588d7f0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55756588eda8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55756588f2e8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55756588e660 'base' 'int'
| | `-ImplicitCastExpr 0x55756588ee48 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55756588ee08 <col:16> 'int' lvalue ParmVar 0x55756588d7f0 'b' 'int'
| `-CompoundStmt 0x55756588f358 <col:19, line:1046:5>
|-CXXMethodDecl 0x55756588ddc0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55756588d990 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55756588da10 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55756588da88 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55756588db08 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55756588dbc8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55756588dc48 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55756588e218 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55756588de90 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55756588e178 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55756588df38 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55756588dfd8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55756588e050 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55756588edc8 <col:82> 'const ArgContext' lvalue Var 0x557565884898 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x557565890288 <col:94, line:1067:5>
| |   |-DeclStmt 0x55756588f4e8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55756588f378 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55756588f4a0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55756588f708 <line:1055:9, col:91>
| |   | `-VarDecl 0x55756588f518 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55756588f6e0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55756588f6c0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55756588f670 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55756588f650 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55756588f5f8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55756588f5a8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55756588f5d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55756588f638 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55756588f618 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55756588f6a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55756588f868 <line:1056:9, col:27>
| |   | `-VarDecl 0x55756588f800 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55756588fcb8 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55756588fbe8 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55756588fb60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5575657ec330 0x5575656de568 0x557565527b48 0x557565527820 0x557565519000 0x557565518cb0 0x5575655185a0 0x5575654eaf10 0x5575654773d0
| |   | | |-CallExpr 0x55756588faa0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55756588f890 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55756588f940 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55756588f910 <col:19, col:23> '<bound member function type>' .begin 0x557565508208
| |   | | | |   `-DeclRefExpr 0x55756588f8f0 <col:19> 'const String' lvalue ParmVar 0x55756588df38 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55756588f9b0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55756588f980 <col:32, col:36> '<bound member function type>' .end 0x557565508420
| |   | | | |   `-DeclRefExpr 0x55756588f960 <col:32> 'const String' lvalue ParmVar 0x55756588df38 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55756588f9d0 <col:43> 'const bool' lvalue Var 0x55756588f378 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55756588fa38 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55756588fa18 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55756588fa60 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55756588f800 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55756588fa80 <col:73> 'const int' lvalue Var 0x55756588f518 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55756588fb40 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55756588fb10 <col:16, col:20> '<bound member function type>' .end 0x557565508420
| |   | |     `-DeclRefExpr 0x55756588faf0 <col:16> 'const String' lvalue ParmVar 0x55756588df38 'str' 'const String &'
| |   | `-BinaryOperator 0x55756588fc98 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55756588fc30 <col:13> 'int' lvalue ->status 0x55756588e6c8
| |   |   | `-CXXThisExpr 0x55756588fc20 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55756588fc80 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55756588fc60 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d320 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55756588ff08 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55756588fdf0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55756588fdd8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55756588fdc0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55756588fce0 <col:13> 'int' lvalue ->status 0x55756588e6c8
| |   | | |     `-CXXThisExpr 0x55756588fcd0 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55756588fda0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55756588fd70 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55756588fd20 <col:23> 'int' lvalue ->status 0x55756588e6c8
| |   | |   |   `-CXXThisExpr 0x55756588fd10 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55756588fd88 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55756588fd50 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55756588fee8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55756588fe88 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55756588fe30 <col:13, col:18> '<bound member function type>' .error 0x557565833c80
| |   |   | | `-DeclRefExpr 0x55756588fe10 <col:13> 'const ArgContext' lvalue ParmVar 0x55756588e050 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55756588feb0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55756588fe60 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55756588fed8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55756588fec8 <col:20> 'bool' false
| |   |-DeclStmt 0x5575658900d8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x557565890080 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x557565890010 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x557565890238 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5575658900f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5575654ab398
| |   | |-DeclRefExpr 0x557565890138 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55756588f800 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x557565890208 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x557565890180 <col:64> 'V' lvalue ParmVar 0x55756588dfd8 'result' 'V &'
| |   `-ReturnStmt 0x557565890278 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x557565890268 <col:16> 'bool' true
| |-CXXMethodDecl 0x5575659a1c88 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5575659a1a60 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x5575659a1b38 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x5575659a1ba0 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x5575659a3a20 <col:94, line:1067:5>
| |   |-DeclStmt 0x5575659a2498 <line:1054:9, col:64>
| |   | `-VarDecl 0x5575659a22b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x5575659a2428 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5575659a23f8 <col:36, col:55> 'const bool' lvalue Var 0x55756549b308 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x5575659a2678 <line:1055:9, col:91>
| |   | `-VarDecl 0x5575659a24b0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5575659a25f8 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x5575659a25e0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x5575659a25c0 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x5575659a25a0 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x5575659a2580 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x5575659a2548 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x5575659a2528 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x55756588f5d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x5575659a2568 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x55756588f618 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x55756588f6a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5575659a2810 <line:1056:9, col:27>
| |   | `-VarDecl 0x5575659a27a8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x5575659a2ca0 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x5575659a2c48 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x5575659a2b00 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x5575659a2ad0 <col:13> '<bound member function type>' ->parse 0x55756588ddc0
| |   | | | | `-CXXThisExpr 0x5575659a2ac0 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x5575659a2960 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5575659a2930 <col:19, col:23> '<bound member function type>' .begin 0x557565508208
| |   | | | |   `-DeclRefExpr 0x5575659a2910 <col:19> 'const String' lvalue ParmVar 0x5575659a1a60 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5575659a29d0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5575659a29a0 <col:32, col:36> '<bound member function type>' .end 0x557565508420
| |   | | | |   `-DeclRefExpr 0x5575659a2980 <col:32> 'const String' lvalue ParmVar 0x5575659a1a60 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x5575659a2b70 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x5575659a2b50 <col:43> 'const bool' lvalue Var 0x5575659a22b8 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x5575659a2a58 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x5575659a2a40 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x5575659a2a20 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x5575659a2b88 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x5575659a2a80 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5575659a27a8 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x5575659a2bc0 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x5575659a2ba0 <col:73> 'const int' lvalue Var 0x5575659a24b0 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x5575659a2c28 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5575659a2bf8 <col:16, col:20> '<bound member function type>' .end 0x557565508420
| |   | |     `-DeclRefExpr 0x5575659a2bd8 <col:16> 'const String' lvalue ParmVar 0x5575659a1a60 'str' 'const String &'
| |   | `-BinaryOperator 0x5575659a2c80 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55756588fc30 <col:13> 'int' lvalue ->status 0x55756588e6c8
| |   |   | `-CXXThisExpr 0x55756588fc20 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5575659a2c68 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55756588fc60 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d320 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5575659a2e18 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5575659a2d38 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5575659a2d20 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5575659a2d08 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55756588fce0 <col:13> 'int' lvalue ->status 0x55756588e6c8
| |   | | |     `-CXXThisExpr 0x55756588fcd0 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5575659a2ce8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5575659a2cb8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55756588fd20 <col:23> 'int' lvalue ->status 0x55756588e6c8
| |   | |   |   `-CXXThisExpr 0x55756588fd10 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5575659a2cd0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55756588fd50 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5575659a2df8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5575659a2da8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5575659a2d78 <col:13, col:18> '<bound member function type>' .error 0x557565833c80
| |   |   | | `-DeclRefExpr 0x5575659a2d58 <col:13> 'const ArgContext' lvalue ParmVar 0x5575659a1ba0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5575659a2dd0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55756588fe60 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5575659a2de8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55756588fec8 <col:20> 'bool' false
| |   |-DeclStmt 0x5575659a3358 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5575659a3300 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x5575659a32b0 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x5575659a3290 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x5575659a3220 'type'
| |   |       `-ElaboratedType 0x5575659a31d0 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x5575659a31b0 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x55756549b460 'unsigned_type'
| |   |           `-BuiltinType 0x5575651ba410 'unsigned int'
| |   |-CallExpr 0x5575659a39b0 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x5575659a3998 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5575659a3918 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5575659a37f8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5575654ab398 'extract_integer')
| |   | |-ImplicitCastExpr 0x5575659a39f8 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x5575659a39e0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x5575659a33b8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5575659a27a8 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x5575659a3488 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x5575659a3438 <col:64> 'int':'int' lvalue ParmVar 0x5575659a1b38 'result' 'int &'
| |   `-ReturnStmt 0x5575659a3a10 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x557565890268 <col:16> 'bool' true
| `-CXXMethodDecl 0x5575659b0948 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, long &, const ArgContext &)'
|   |-TemplateArgument type 'long'
|   |-ParmVarDecl 0x5575659b0720 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5575659b07f8 <col:46, col:49> col:49 used result 'long &'
|   |-ParmVarDecl 0x5575659b0860 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5575659b5190 <col:94, line:1067:5>
|     |-DeclStmt 0x5575659b3d28 <line:1054:9, col:64>
|     | `-VarDecl 0x5575659b3b40 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5575659b3cb8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5575659b3c88 <col:36, col:55> 'const bool' lvalue Var 0x55756549cd00 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5575659b3f08 <line:1055:9, col:91>
|     | `-VarDecl 0x5575659b3d40 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5575659b3e88 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5575659b3e70 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5575659b3e50 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5575659b3e30 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5575659b3e10 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5575659b3dd8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5575659b3db8 <col:36, col:44> 'unsigned long' sizeof 'long':'long'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55756588f5d8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5575659b3df8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55756588f618 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55756588f6a0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5575659b4060 <line:1056:9, col:27>
|     | `-VarDecl 0x5575659b3ff8 <col:9, col:26> col:19 used x 'IntArg::limb_type [2]'
|     |-IfStmt 0x5575659b44f0 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5575659b4498 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5575659b4350 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5575659b4320 <col:13> '<bound member function type>' ->parse 0x55756588ddc0
|     | | | | `-CXXThisExpr 0x5575659b4310 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5575659b41b0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5575659b4180 <col:19, col:23> '<bound member function type>' .begin 0x557565508208
|     | | | |   `-DeclRefExpr 0x5575659b4160 <col:19> 'const String' lvalue ParmVar 0x5575659b0720 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5575659b4220 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5575659b41f0 <col:32, col:36> '<bound member function type>' .end 0x557565508420
|     | | | |   `-DeclRefExpr 0x5575659b41d0 <col:32> 'const String' lvalue ParmVar 0x5575659b0720 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5575659b43c0 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5575659b43a0 <col:43> 'const bool' lvalue Var 0x5575659b3b40 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5575659b42a8 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5575659b4290 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5575659b4270 <col:58, col:66> 'unsigned long' sizeof 'long':'long'
|     | | | |-ImplicitCastExpr 0x5575659b43d8 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5575659b42d0 <col:70> 'IntArg::limb_type [2]' lvalue Var 0x5575659b3ff8 'x' 'IntArg::limb_type [2]'
|     | | | `-ImplicitCastExpr 0x5575659b4410 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5575659b43f0 <col:73> 'const int' lvalue Var 0x5575659b3d40 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5575659b4478 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5575659b4448 <col:16, col:20> '<bound member function type>' .end 0x557565508420
|     | |     `-DeclRefExpr 0x5575659b4428 <col:16> 'const String' lvalue ParmVar 0x5575659b0720 'str' 'const String &'
|     | `-BinaryOperator 0x5575659b44d0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55756588fc30 <col:13> 'int' lvalue ->status 0x55756588e6c8
|     |   | `-CXXThisExpr 0x55756588fc20 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5575659b44b8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55756588fc60 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d320 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5575659b4668 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5575659b4588 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5575659b4570 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5575659b4558 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55756588fce0 <col:13> 'int' lvalue ->status 0x55756588e6c8
|     | | |     `-CXXThisExpr 0x55756588fcd0 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5575659b4538 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5575659b4508 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55756588fd20 <col:23> 'int' lvalue ->status 0x55756588e6c8
|     | |   |   `-CXXThisExpr 0x55756588fd10 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5575659b4520 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55756588fd50 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5575659b4648 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5575659b45f8 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5575659b45c8 <col:13, col:18> '<bound member function type>' .error 0x557565833c80
|     |   | | `-DeclRefExpr 0x5575659b45a8 <col:13> 'const ArgContext' lvalue ParmVar 0x5575659b0860 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5575659b4620 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55756588fe60 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5575659b4638 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55756588fec8 <col:20> 'bool' false
|     |-DeclStmt 0x5575659b4ba8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5575659b4b50 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<long>::type':'unsigned long'
|     |   `-ElaboratedType 0x5575659b4b00 'typename make_unsigned<long>::type' sugar
|     |     `-TypedefType 0x5575659b4ae0 'make_unsigned<long>::type' sugar
|     |       |-Typedef 0x5575659b4a70 'type'
|     |       `-ElaboratedType 0x5575659b4a20 'typename integer_traits<long>::unsigned_type' sugar
|     |         `-TypedefType 0x5575659b4a00 'integer_traits<long>::unsigned_type' sugar
|     |           |-Typedef 0x55756549ce58 'unsigned_type'
|     |           `-BuiltinType 0x5575651ba430 'unsigned long'
|     |-CallExpr 0x5575659b5120 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5575659b5108 <col:9> 'void (*)(const unsigned int *, unsigned long &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5575659b5088 <col:9> 'void (const unsigned int *, unsigned long &)' lvalue Function 0x5575659b4f68 'extract_integer' 'void (const unsigned int *, unsigned long &)' (FunctionTemplate 0x5575654ab398 'extract_integer')
|     | |-ImplicitCastExpr 0x5575659b5168 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5575659b5150 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5575659b4c08 <col:25> 'IntArg::limb_type [2]' lvalue Var 0x5575659b3ff8 'x' 'IntArg::limb_type [2]'
|     | `-CXXReinterpretCastExpr 0x5575659b4cd8 <col:28, col:70> 'unsigned_v_type':'unsigned long' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x5575659b4c88 <col:64> 'long':'long' lvalue ParmVar 0x5575659b07f8 'result' 'long &'
|     `-ReturnStmt 0x5575659b5180 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x557565890268 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55756588e5d8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55756588e288 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55756588e538 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55756588e338 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55756588e3d8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55756588e450 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55756588ede8 <col:71> 'const ArgContext' lvalue Var 0x557565884898 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5575658909f8 <col:83, line:1083:5>
| |   |-DeclStmt 0x557565890350 <line:1071:9, col:12>
| |   | `-VarDecl 0x5575658902e8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5575658909d0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5575658905e0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x557565890468 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x557565890430 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x557565890378 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5575658903d0 <col:31> 'const String' lvalue ParmVar 0x55756588e338 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5575658903f0 <col:36> 'V' lvalue Var 0x5575658902e8 'x' 'V'
| |     | |   `-DeclRefExpr 0x557565890410 <col:39> 'const ArgContext' lvalue ParmVar 0x55756588e450 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5575658905c0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5575658905a0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x557565890588 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x557565890570 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x557565890490 <col:17> 'int' lvalue ->status 0x55756588e6c8
| |     |     |     `-CXXThisExpr 0x557565890480 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x557565890550 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x557565890520 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5575658904d0 <col:27> 'int' lvalue ->status 0x55756588e6c8
| |     |       |   `-CXXThisExpr 0x5575658904c0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x557565890538 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x557565890500 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x557565890610 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x557565890600 <col:20> 'bool' false
| |     `-IfStmt 0x5575658909a8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5575658906b0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x557565890680 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x557565890630 <col:18> 'int' lvalue ->status 0x55756588e6c8
| |       | |   `-CXXThisExpr 0x557565890620 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x557565890698 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x557565890660 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5575658908e8 <col:42, line:1079:9>
| |       | |-CallExpr 0x557565890890 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5575658906e0 <line:1076:13> '<bound member function type>' ->range_error 0x55756588ecd8
| |       | | | `-CXXThisExpr 0x5575658906d0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x557565890710 <col:25> 'const ArgContext' lvalue ParmVar 0x55756588e450 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5575658907f0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x557565890868 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x557565890848 <col:43> 'V' lvalue Var 0x5575658902e8 'x' 'V'
| |       | `-ReturnStmt 0x5575658908d8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5575658908c8 <col:20> 'bool' false
| |       `-CompoundStmt 0x557565890988 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x557565890948 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x557565890908 <col:13> 'V' lvalue ParmVar 0x55756588e3d8 'result' 'V &'
| |         | `-DeclRefExpr 0x557565890928 <col:22> 'V' lvalue Var 0x5575658902e8 'x' 'V'
| |         `-ReturnStmt 0x557565890978 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x557565890968 <col:20> 'bool' true
| |-CXXMethodDecl 0x5575659a1648 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5575659a1420 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x5575659a14f8 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x5575659a1560 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x5575659a2298 <col:83, line:1083:5>
| |   |-DeclStmt 0x5575659a18d0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5575659a1868 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x5575659a2270 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5575659a1f00 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x5575659a1e28 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x5575659a1df0 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x5575659a1da8 <col:14> '<bound member function type>' ->parse_saturating 0x5575659a1c88
| |     | |   | `-CXXThisExpr 0x5575659a1d98 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x5575659a1940 <col:31> 'const String' lvalue ParmVar 0x5575659a1420 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5575659a1960 <col:36> 'int':'int' lvalue Var 0x5575659a1868 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x5575659a1980 <col:39> 'const ArgContext' lvalue ParmVar 0x5575659a1560 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5575659a1ee0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5575659a1ec0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5575659a1ea8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5575659a1e90 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x557565890490 <col:17> 'int' lvalue ->status 0x55756588e6c8
| |     |     |     `-CXXThisExpr 0x557565890480 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5575659a1e70 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5575659a1e40 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5575658904d0 <col:27> 'int' lvalue ->status 0x55756588e6c8
| |     |       |   `-CXXThisExpr 0x5575658904c0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5575659a1e58 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x557565890500 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5575659a1f20 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x557565890600 <col:20> 'bool' false
| |     `-IfStmt 0x5575659a2248 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5575659a1f60 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5575659a1f30 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x557565890630 <col:18> 'int' lvalue ->status 0x55756588e6c8
| |       | |   `-CXXThisExpr 0x557565890620 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5575659a1f48 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x557565890660 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5575659a2180 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x5575659a20f0 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x5575658906e0 <line:1076:13> '<bound member function type>' ->range_error 0x55756588ecd8
| |       | | | `-CXXThisExpr 0x5575658906d0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5575659a1f80 <col:25> 'const ArgContext' lvalue ParmVar 0x5575659a1560 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x5575659a2158 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x5575659a2128 <col:31, col:50> 'const bool' lvalue Var 0x55756549b308 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x5575659a20c8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x5575659a20b0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x5575659a2098 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x5575659a2078 <col:43> 'int':'int' lvalue Var 0x5575659a1868 'x' 'int':'int'
| |       | `-ReturnStmt 0x5575659a2170 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5575658908c8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5575659a2228 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5575659a21f8 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x5575659a21a0 <col:13> 'int':'int' lvalue ParmVar 0x5575659a14f8 'result' 'int &'
| |         | `-ImplicitCastExpr 0x5575659a21e0 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x5575659a21c0 <col:22> 'int':'int' lvalue Var 0x5575659a1868 'x' 'int':'int'
| |         `-ReturnStmt 0x5575659a2218 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x557565890968 <col:20> 'bool' true
| `-CXXMethodDecl 0x5575659b0388 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, long &, const ArgContext &)'
|   |-TemplateArgument type 'long'
|   |-ParmVarDecl 0x5575659b0120 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5575659b01f8 <col:35, col:38> col:38 used result 'long &'
|   |-ParmVarDecl 0x5575659b0260 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5575659b3b20 <col:83, line:1083:5>
|     |-DeclStmt 0x5575659b0610 <line:1071:9, col:12>
|     | `-VarDecl 0x5575659b05a8 <col:9, col:11> col:11 used x 'long':'long'
|     `-IfStmt 0x5575659b3af8 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5575659b0bc0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5575659b0ae8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5575659b0ab0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5575659b0a68 <col:14> '<bound member function type>' ->parse_saturating 0x5575659b0948
|       | |   | `-CXXThisExpr 0x5575659b0a58 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5575659b0680 <col:31> 'const String' lvalue ParmVar 0x5575659b0120 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5575659b06a0 <col:36> 'long':'long' lvalue Var 0x5575659b05a8 'x' 'long':'long'
|       | |   `-DeclRefExpr 0x5575659b06c0 <col:39> 'const ArgContext' lvalue ParmVar 0x5575659b0260 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5575659b0ba0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5575659b0b80 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5575659b0b68 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5575659b0b50 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x557565890490 <col:17> 'int' lvalue ->status 0x55756588e6c8
|       |     |     `-CXXThisExpr 0x557565890480 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5575659b0b30 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5575659b0b00 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5575658904d0 <col:27> 'int' lvalue ->status 0x55756588e6c8
|       |       |   `-CXXThisExpr 0x5575658904c0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5575659b0b18 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x557565890500 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5575659b0be0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x557565890600 <col:20> 'bool' false
|       `-IfStmt 0x5575659b3ad0 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5575659b0c20 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5575659b0bf0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x557565890630 <col:18> 'int' lvalue ->status 0x55756588e6c8
|         | |   `-CXXThisExpr 0x557565890620 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5575659b0c08 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x557565890660 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55756588d3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5575659b0e40 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5575659b0db0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5575658906e0 <line:1076:13> '<bound member function type>' ->range_error 0x55756588ecd8
|         | | | `-CXXThisExpr 0x5575658906d0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5575659b0c40 <col:25> 'const ArgContext' lvalue ParmVar 0x5575659b0260 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5575659b0e18 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5575659b0de8 <col:31, col:50> 'const bool' lvalue Var 0x55756549cd00 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5575659b0d88 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5575659b0d70 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5575659b0d58 <col:43> 'long':'long' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5575659b0d38 <col:43> 'long':'long' lvalue Var 0x5575659b05a8 'x' 'long':'long'
|         | `-ReturnStmt 0x5575659b0e30 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5575658908c8 <col:20> 'bool' false
|         `-CompoundStmt 0x5575659b3ab0 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5575659b0eb8 <line:1080:13, col:22> 'long':'long' lvalue '='
|           | |-DeclRefExpr 0x5575659b0e60 <col:13> 'long':'long' lvalue ParmVar 0x5575659b01f8 'result' 'long &'
|           | `-ImplicitCastExpr 0x5575659b0ea0 <col:22> 'long':'long' <LValueToRValue>
|           |   `-DeclRefExpr 0x5575659b0e80 <col:22> 'long':'long' lvalue Var 0x5575659b05a8 'x' 'long':'long'
|           `-ReturnStmt 0x5575659b0ed8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x557565890968 <col:20> 'bool' true
|-FieldDecl 0x55756588e660 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55756588e6c8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55756588e718 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55756588e9d0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55756588e758 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55756588e7d8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55756588e850 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55756588e8d0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55756588ecd8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55756588eaa0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55756588eb18 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55756588ebb0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x557565891258 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x557565891258
| `-ParmVarDecl 0x557565891368 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5575658914e8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5575658915f8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55756599e510 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55756599e4e0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55756599e4b0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55756599e480 <col:7> 'IntArg' lvalue ParmVar 0x5575658915f8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55756588e660 'base' 'int'
| | `-ImplicitCastExpr 0x55756599e608 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55756599e5d8 <col:7> 'int' xvalue .base 0x55756588e660
| |     `-CXXStaticCastExpr 0x55756599e5a8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55756599e578 <col:7> 'IntArg' lvalue ParmVar 0x5575658915f8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55756588e6c8 'status' 'int'
| | `-ImplicitCastExpr 0x55756599e6d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55756599e6a8 <col:7> 'int' xvalue .status 0x55756588e6c8
| |     `-CXXStaticCastExpr 0x55756599e678 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55756599e648 <col:7> 'IntArg' lvalue ParmVar 0x5575658915f8 '' 'IntArg &&'
| `-CompoundStmt 0x55756599e730 <col:7>
`-CXXDestructorDecl 0x55756599c650 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557565895b40 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x557565895d98 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55756599c578 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55756599db10 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55756599daf0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55756599db80 <col:19>
|-CXXConstructorDecl 0x55756599c758 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55756599c758
| `-ParmVarDecl 0x55756599c868 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55756599d928 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55756599da38 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55756599e740 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55756599e460 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55756599e430 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55756599e400 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55756599da38 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55756599e7b0 <col:19>
`-CXXDestructorDecl 0x55756599dbc0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<long>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575658961a0 <../dummy_inc/click/args.hh:1185:1, col:53> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'long'
|-CXXRecordDecl 0x5575658963f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5575659ac4b8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5575659ac950 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5575659ac930 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5575659ac9c0 <col:19>
|-CXXConstructorDecl 0x5575659ac5b8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<long> &)' inline default trivial noexcept-unevaluated 0x5575659ac5b8
| `-ParmVarDecl 0x5575659ac6c8 <col:19> col:19 'const DefaultArg<long> &'
|-CXXConstructorDecl 0x5575659ac768 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<long> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5575659ac878 <col:19> col:19 used 'DefaultArg<long> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5575659ad260 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5575659ad240 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5575659ad210 <col:19> 'DefaultArg<long>' xvalue static_cast<struct DefaultArg<long> &&> <NoOp>
| |       `-DeclRefExpr 0x5575659ad1e0 <col:19> 'DefaultArg<long>' lvalue ParmVar 0x5575659ac878 '' 'DefaultArg<long> &&'
| `-CompoundStmt 0x5575659ad2d0 <col:19>
`-CXXDestructorDecl 0x5575659aca00 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.20 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.20 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55756589abd0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55756589ace8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55756589ad78 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55756589afb8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55756589adb0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55756589ae30 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55756589aea8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55756589b1d0 <col:81> 'const ArgContext' lvalue Var 0x557565884898 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55756589b110 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55756589b080 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5575656d47f8 <col:35, line:1261:5>
|   `-ReturnStmt 0x5575656d47e8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5575656d47d0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5575656d47a0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5575656d4788 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5575656d4760 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5575656d4740 <col:16, col:24> 'String' (CXXTemporary 0x5575656d4740)
|               `-CXXConstructExpr 0x55756589b238 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55756589b220 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55756589b200 <col:23> 'bool' lvalue ParmVar 0x55756589b080 'x' 'bool'
|-CXXConstructorDecl 0x5575659bb3b8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5575659bb490 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5575659bb5c8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5575659bb5c8
| `-ParmVarDecl 0x5575659bb6d8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x5575659bb778 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5575659bb888 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x5575659bcd50 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575656d4838 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5575656d4a98 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5575659bb2c8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5575659bb8f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x5575659bb8f8
| `-ParmVarDecl 0x5575659bba08 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5575659bc310 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5575659bc428 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5575659bcd60 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5575659bcd30 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x5575659bcd00 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x5575659bccd0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5575659bc428 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x5575659bcdd0 <col:19>
`-CXXDestructorDecl 0x5575659bc4c8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.21 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.21 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5575659c98a8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'HandlerCall'
|-CXXRecordDecl 0x5575659c9ca8 prev 0x5575659c98a8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5575659c9ed0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (HandlerCall *)'
| |-ParmVarDecl 0x5575659c9da8 <col:15, col:18> col:18 used ptr 'HandlerCall *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5575659cae18 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5575659ca050 '_ptr' 'HandlerCall *'
| | `-ImplicitCastExpr 0x5575659cadd8 <line:853:20> 'HandlerCall *' <LValueToRValue>
| |   `-DeclRefExpr 0x5575659cad98 <col:20> 'HandlerCall *' lvalue ParmVar 0x5575659c9da8 'ptr' 'HandlerCall *'
| |-CXXCtorInitializer Field 0x5575659ca0b0 '_slot' 'HandlerCall':'HandlerCall'
| | `-CXXConstructExpr 0x5575659cae78 <line:852:9> 'HandlerCall':'HandlerCall' 'void ()'
| `-CompoundStmt 0x5575658846c0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5575659c9f90 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x557565854440 Slot::store 'void ()' ]
| `-CompoundStmt 0x5575659cb538 <col:22, line:857:9>
|   `-CallExpr 0x5575659cb4f0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5575659cb4d8 <col:13> 'void (*)(HandlerCall &, const HandlerCall &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5575659cb458 <col:13> 'void (HandlerCall &, const HandlerCall &)' lvalue Function 0x5575659cb338 'assign_consume' 'void (HandlerCall &, const HandlerCall &)' (FunctionTemplate 0x557565480a68 'assign_consume')
|     |-UnaryOperator 0x5575659cb008 <col:28, col:29> 'HandlerCall':'HandlerCall' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5575659caff0 <col:29> 'HandlerCall *' <LValueToRValue>
|     |   `-MemberExpr 0x5575659cafc0 <col:29> 'HandlerCall *' lvalue ->_ptr 0x5575659ca050
|     |     `-CXXThisExpr 0x5575659cafb0 <col:29> 'Args::SlotT<HandlerCall> *' implicit this
|     `-ImplicitCastExpr 0x5575659cb520 <col:35> 'const HandlerCall':'const HandlerCall' lvalue <NoOp>
|       `-MemberExpr 0x5575659cb030 <col:35> 'HandlerCall':'HandlerCall' lvalue ->_slot 0x5575659ca0b0
|         `-CXXThisExpr 0x5575659cb020 <col:35> 'Args::SlotT<HandlerCall> *' implicit this
|-FieldDecl 0x5575659ca050 <line:858:9, col:12> col:12 referenced _ptr 'HandlerCall *'
|-FieldDecl 0x5575659ca0b0 <line:859:9, col:11> col:11 referenced _slot 'HandlerCall':'HandlerCall'
|-CXXConstructorDecl 0x5575659ca128 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<HandlerCall> &)' inline default noexcept-unevaluated 0x5575659ca128
| `-ParmVarDecl 0x5575659ca238 <col:12> col:12 'const Args::SlotT<HandlerCall> &'
|-CXXConstructorDecl 0x5575659ca2d8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<HandlerCall> &&)' inline default noexcept-unevaluated 0x5575659ca2d8
| `-ParmVarDecl 0x5575659ca3e8 <col:12> col:12 'Args::SlotT<HandlerCall> &&'
|-CXXMethodDecl 0x5575659ca488 <col:12> col:12 implicit operator= 'Args::SlotT<HandlerCall> &(const Args::SlotT<HandlerCall> &)' inline default noexcept-unevaluated 0x5575659ca488
| `-ParmVarDecl 0x5575659ca598 <col:12> col:12 'const Args::SlotT<HandlerCall> &'
|-CXXMethodDecl 0x5575659ca608 <col:12> col:12 implicit operator= 'Args::SlotT<HandlerCall> &(Args::SlotT<HandlerCall> &&)' inline default noexcept-unevaluated 0x5575659ca608
| `-ParmVarDecl 0x5575659ca718 <col:12> col:12 'Args::SlotT<HandlerCall> &&'
`-CXXDestructorDecl 0x5575659ca7a0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x557565854340 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5575659caee0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.HandlerCall*, %class.HandlerCall }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.HandlerCall*, %class.HandlerCall }
  IsZeroInitializable:1
  BitFields:[
]>
