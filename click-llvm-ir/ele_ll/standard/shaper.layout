
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab1b838 prev 0x5560cab12fd8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560cab1b930 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5560cab1b9c0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5560cab1ba38 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5560cab1baf8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5560cab1bbc0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5560cab1bd38 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5560cab1bc70 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5560cab1bde0 <col:24>
| `-OptimizeNoneAttr 0x5560cab1be38 <col:34>
|-CXXMethodDecl 0x5560cab1be80 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5560cab1c138 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5560cab1bf30 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5560cab1bfa8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5560cab1c028 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5560cab1c1f0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5560cab1c228 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5560cab1c290 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5560cab1c318 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5560cab1c638 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5560cab1c3d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5560cab1c448 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5560cab1c4c0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5560cab1c540 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5560cab1c750 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5560cab230b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5560cab230b8
| `-ParmVarDecl 0x5560cab231c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5560cab23268 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5560cab23268
| `-ParmVarDecl 0x5560cab23378 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5560cabf75e8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab0e850 prev 0x5560cab0e5d0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5560cab0e948 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5560cab0e9d8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5560cab0ea38 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5560cab0eb28 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5560cab0ec28 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5560cab0edf8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5560cab0eca8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5560cab0ed20 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5560cab0ef88 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5560cab0eec0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5560cab0f030 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5560cab0f168 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5560cab0f0a0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5560cab0f308 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5560cab0f248 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5560cab0f4a8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5560cab0f3e8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5560cab0f550 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5560cab0f650 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5560cab0f730 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab0f630 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5560cab0f610 <col:26> 'int' 1
| `-EnumConstantDecl 0x5560cab0f6e0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5560cab0f748 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560cab0f6c0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5560cab0f6a0 <col:44> 'int' 2
|-CXXMethodDecl 0x5560cab0f890 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5560cab0f778 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5560cab0f7f8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5560cab0f9e8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5560cab0f958 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5560cab0fc28 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5560cab0faa8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5560cab0fb20 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5560cab0fcd8 <col:20>
| `-OptimizeNoneAttr 0x5560cab0fd30 <col:30>
|-CXXMethodDecl 0x5560cab0fe38 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5560cab0fd70 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5560cab0fee0 <col:20>
| `-OptimizeNoneAttr 0x5560cab0ff38 <col:30>
|-CXXMethodDecl 0x5560cab0ff88 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5560cab10050 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5560cab10168 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5560cab101f0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5560cab10278 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5560cab10300 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5560cab10388 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5560cab10418 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5560cab104d8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5560cab10560 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5560cab105e8 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x5560cab10670 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5560cab106f8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5560cab10780 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5560cab10810 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5560cab108d0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5560cab10960 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5560cab10ab0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5560cab10a18 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5560cab10c40 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5560cab10b70 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5560cab10ef0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5560cab10cf8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5560cab10d78 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5560cab10df8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5560cab10fa8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5560cab110b0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5560cab11340 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab11090 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5560cab11070 <col:33> 'int' 0
| |-EnumConstantDecl 0x5560cab11140 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5560cab11358 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab11120 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5560cab11100 <col:32> 'int' 20
| |-EnumConstantDecl 0x5560cab111d0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5560cab11370 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab111b0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5560cab11190 <col:38> 'int' 90
| |-EnumConstantDecl 0x5560cab11260 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5560cab11388 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab11240 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5560cab11220 <col:35> 'int' 100
| `-EnumConstantDecl 0x5560cab112f0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5560cab113a0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560cab112d0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5560cab112b0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5560cab113e0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5560cab11820 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5560cab11690 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5560cab11708 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab118f0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5560cab11a70 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5560cab119a0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab11c78 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5560cab11b28 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5560cab11ba0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab11d78 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5560cab11e18 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5560cab11ee0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5560cab11f70 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5560cab121a0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab11f50 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5560cab11f30 <col:36> 'int' EnumConstant 0x5560cab11ee0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5560cab11fc0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5560cab12010 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5560cab12060 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5560cab120b0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5560cab12100 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5560cab12150 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5560cab12288 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5560cab121c8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5560cab12350 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5560cab12410 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5560cab124d0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5560cab12590 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5560cab126a8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5560cab12770 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5560cab128f0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5560cab12820 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5560cab12a18 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5560cab12c18 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5560cab12ac8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5560cab12b48 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5560cab1f558 <col:54, line:127:5>
|   |-ParenExpr 0x5560cab1f408 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5560cab1f3d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5560cab1f0c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5560cab1f0a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5560cab1f088 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5560cab1f070 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5560cab1f040 <col:31> 'Router *' lvalue ->_router 0x5560cab1cf20
|   |   |         `-CXXThisExpr 0x5560cab1f030 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5560cab1f128 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560cab1f108 <col:48> 'int' 0
|   |   `-CallExpr 0x5560cab1f338 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5560cab1f320 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560cab1f300 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560cab1f378 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560cab1f198 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5560cab1f390 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560cab1f1b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5560cab1f3a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560cab1f1f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5560cab1f3c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560cab1f2e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560cab1f2d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560cab1f288 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5560cab1f4a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5560cab1f438 <col:9> 'Router *' lvalue ->_router 0x5560cab1cf20
|   | | `-CXXThisExpr 0x5560cab1f428 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5560cab1f488 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5560cab1f468 <col:19> 'Router *' lvalue ParmVar 0x5560cab12ac8 'r' 'Router *'
|   `-BinaryOperator 0x5560cab1f538 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5560cab1f4d0 <col:9> 'int' lvalue ->_eindex 0x5560cab1cf88
|     | `-CXXThisExpr 0x5560cab1f4c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5560cab1f520 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5560cab1f500 <col:19> 'int' lvalue ParmVar 0x5560cab12b48 'eindex' 'int'
|-CXXMethodDecl 0x5560cab12da0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5560cab12cd8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5560cab12e70 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5560cab12f38 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5560cab12fd8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5560cab13228 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5560cab130a0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5560cab13120 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5560cab132d8 <col:20>
| `-OptimizeNoneAttr 0x5560cab13330 <col:30>
|-CXXMethodDecl 0x5560cab13438 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5560cab13370 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5560cab134e0 <col:20>
| `-OptimizeNoneAttr 0x5560cab13538 <col:30>
|-CXXMethodDecl 0x5560cab13608 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5560cab13578 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5560cab136b0 <col:20>
| `-OptimizeNoneAttr 0x5560cab13708 <col:30>
|-CXXMethodDecl 0x5560cab13898 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5560cab13740 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5560cab137c0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5560cab13a28 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5560cab13960 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5560cab13b78 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5560cab13ae8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5560cab13cc8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5560cab13c38 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5560cab13e18 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5560cab13d88 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5560cab140d8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5560cab13ed0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5560cab13f50 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5560cab13ff8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5560cab141b0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5560cab14270 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5560cab14540 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5560cab143f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5560cab14468 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab14668 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5560cab14840 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5560cab14720 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5560cab147a0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5560cab14a28 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5560cab14908 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5560cab14988 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5560cab14d98 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5560cab14ae8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5560cab14b60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5560cab14be0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5560cab1eb40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab1eb20 <col:106> 'int' 0
| `-ParmVarDecl 0x5560cab14c58 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5560cab1eb78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5560cab1eb58 <col:126> 'int' 0
|-CXXMethodDecl 0x5560cab15138 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5560cab14e68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5560cab14f00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5560cab14f80 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5560cab14ff8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5560cab1ebb0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5560cab1eb90 <col:114> 'int' 0
|-CXXMethodDecl 0x5560cab154c8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5560cab15210 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5560cab15288 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5560cab15308 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5560cab1ebc8 <col:96> 'int' 0
| `-ParmVarDecl 0x5560cab15380 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5560cab1ec08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5560cab1ebe8 <col:116> 'int' 0
|-CXXMethodDecl 0x5560cab15848 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5560cab15598 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5560cab15610 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab15690 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5560cab1ec40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab1ec20 <col:109> 'int' 0
| `-ParmVarDecl 0x5560cab15708 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5560cab1ec78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5560cab1ec58 <col:129> 'int' 0
|-CXXMethodDecl 0x5560cab15bc8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5560cab15918 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5560cab15990 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab15a10 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5560cab15a88 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5560cab1ecb0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5560cab1ec90 <col:117> 'int' 0
|-CXXMethodDecl 0x5560cab15f58 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5560cab15ca0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab15d18 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab15d98 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5560cab1ecc8 <col:99> 'int' 0
| `-ParmVarDecl 0x5560cab15e10 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5560cab1ed08 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5560cab1ece8 <col:119> 'int' 0
|-CXXMethodDecl 0x5560cab16378 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5560cab16028 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5560cab160a8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5560cab16120 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab161a0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5560cab1ed40 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab1ed20 <col:108> 'int' 0
| `-ParmVarDecl 0x5560cab16220 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5560cab1ed78 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5560cab1ed58 <col:141> 'int' 0
|-CXXMethodDecl 0x5560cab16798 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5560cab16450 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5560cab164d0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5560cab16548 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab165c8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5560cab16648 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5560cab1ed90 <col:121> 'int' 0
|-CXXMethodDecl 0x5560cab16bc8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5560cab16878 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5560cab168f8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5560cab16970 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab169f0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5560cab1edb0 <col:98> 'int' 0
| `-ParmVarDecl 0x5560cab16a70 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5560cab1edd0 <col:123> 'int' 0
|-CXXMethodDecl 0x5560cab16e90 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5560cab16ca0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5560cab16d20 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5560cab16da0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5560cab1edf0 <col:80> 'int' 0
|-EnumDecl 0x5560cab16f48 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5560cab17050 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5560cab172e0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab17030 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5560cab17010 <col:42> 'int' 1
| |-EnumConstantDecl 0x5560cab170e0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5560cab172f8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab170c0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5560cab170a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5560cab17170 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5560cab17310 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab17150 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5560cab17130 <col:44> 'int' 4
| |-EnumConstantDecl 0x5560cab17200 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5560cab17328 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cab171e0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5560cab171c0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5560cab17290 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5560cab17340 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560cab17270 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5560cab17250 <col:34> 'int' 6
|-CXXMethodDecl 0x5560cab175f8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5560cab17368 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5560cab17408 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5560cab17488 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5560cab17500 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5560cab1eea8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5560cab1ee90 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5560cab1ee78 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5560cab1ee58 <col:98, col:105> 'String' (CXXTemporary 0x5560cab1ee58)
|           `-CXXTemporaryObjectExpr 0x5560cab1ee20 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5560cab17898 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5560cab176c8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5560cab17740 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5560cab177b8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5560cab1ef58 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5560cab1ef40 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5560cab1ef28 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5560cab1ef08 <col:94, col:101> 'String' (CXXTemporary 0x5560cab1ef08)
| |         `-CXXTemporaryObjectExpr 0x5560cab1eed0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5560cab1f740 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5560cab1f6b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5560cab1f688 <col:9> '<bound member function type>' ->add_task_handlers 0x5560cab175f8
|     | `-CXXThisExpr 0x5560cab1f678 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5560cab1f6f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5560cab1f5f8 <col:27> 'Task *' lvalue ParmVar 0x5560cab176c8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5560cab1f710 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5560cab1f618 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5560cab17740 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5560cab1f728 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5560cab1f638 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5560cab17290 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5560cab1f658 <col:62> 'const String' lvalue ParmVar 0x5560cab177b8 'prefix' 'const String &'
|-CXXMethodDecl 0x5560cab17aa8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5560cab17960 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5560cab179d8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5560cab1f008 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5560cab1eff0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5560cab1efd8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5560cab1efb8 <col:70, col:77> 'String' (CXXTemporary 0x5560cab1efb8)
| |         `-CXXTemporaryObjectExpr 0x5560cab1ef80 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5560cab1f918 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5560cab1f890 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5560cab1f860 <col:9> '<bound member function type>' ->add_task_handlers 0x5560cab175f8
|     | `-CXXThisExpr 0x5560cab1f850 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5560cab1f8d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5560cab1f7d0 <col:27> 'Task *' lvalue ParmVar 0x5560cab17960 'task' 'Task *'
|     |-ImplicitCastExpr 0x5560cab1f8e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5560cab1f7f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5560cab1f900 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5560cab1f810 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5560cab17290 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5560cab1f830 <col:57> 'const String' lvalue ParmVar 0x5560cab179d8 'prefix' 'const String &'
|-CXXMethodDecl 0x5560cab17d88 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5560cab17b70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab17bf0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab17c68 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5560cab18038 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5560cab17e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab17ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab17f58 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5560cab18328 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5560cab18108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab18188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab18200 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5560cab185d8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5560cab183f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab18478 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab184f8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5560cab18888 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5560cab186a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab18728 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab187a8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5560cab18b38 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5560cab18958 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab189d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab18a50 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5560cab18de8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5560cab18c08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab18c88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab18d08 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5560cab190f8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5560cab18f10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab18f90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab19010 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5560cab193d8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5560cab191c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab19248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab192f0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5560cab196b8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5560cab194a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab19528 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab195d0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5560cab19920 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5560cab19788 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5560cab19808 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5560cab19880 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5560cab19bc8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5560cab199f0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5560cab19a70 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5560cab19ae8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5560cab19e78 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5560cab19c98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab19d18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab19d98 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5560cab1a128 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5560cab19f48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab19fc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab1a040 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5560cab1a3d8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5560cab1a1f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab1a278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab1a2f0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5560cab1a6a8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5560cab1a4a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab1a528 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5560cab1a5c8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5560cab1a9d8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5560cab1a778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5560cab1a7f8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5560cab1a870 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5560cab1a8e8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5560cab1f020 <col:93> 'bool' false
|-CXXMethodDecl 0x5560cab1abc0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5560cab1aaa8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5560cab1ab28 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5560cab1ad98 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5560cab1ac80 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5560cab1ad00 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5560cab1b078 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5560cab1ae58 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5560cab1aed0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5560cab1af50 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5560cab1afc8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab1b368 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5560cab1b148 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5560cab1b1c0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5560cab1b240 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5560cab1b2b8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab1b5a0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5560cab1b440 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5560cab1b4c0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5560cab1b788 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5560cab1b668 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5560cab1b6e8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5560cab1b838 prev 0x5560cab12fd8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5560cab1b930 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5560cab1b9c0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5560cab1ba38 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5560cab1baf8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5560cab1bbc0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5560cab1bd38 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5560cab1bc70 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5560cab1bde0 <col:24>
| | `-OptimizeNoneAttr 0x5560cab1be38 <col:34>
| |-CXXMethodDecl 0x5560cab1be80 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5560cab1c138 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5560cab1bf30 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5560cab1bfa8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5560cab1c028 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5560cab1c1f0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5560cab1c228 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5560cab1c290 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5560cab1c318 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5560cab1c638 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5560cab1c3d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5560cab1c448 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5560cab1c4c0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5560cab1c540 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5560cab1c750 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5560cab230b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5560cab230b8
| | `-ParmVarDecl 0x5560cab231c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5560cab23268 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5560cab23268
| | `-ParmVarDecl 0x5560cab23378 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5560cabf75e8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5560cab1c7c8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5560cab1c868 <col:38> "" ""
|-CXXMethodDecl 0x5560cab1c8f8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5560cab1c998 <col:44> "" ""
|-AccessSpecDecl 0x5560cab1ca08 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5560cab1ca30 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5560cab1cb30 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5560cab1cb80 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560cab1cb10 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5560cab1caf0 <col:27> 'int' 4
|-FieldDecl 0x5560cab1cc38 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5560cab1cde8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5560cab1cea0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5560cab1cf20 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5560cab1cf88 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5560cab1d0d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5560cab1d018 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5560cab1d288 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5560cab1d198 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5560cab1d468 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5560cab1d348 <col:20> col:23 'int'
| `-ParmVarDecl 0x5560cab1d3c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5560cab1d710 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab1d530 <col:23> col:26 'int'
| |-ParmVarDecl 0x5560cab1d5b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5560cab1d628 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5560cab1d7c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5560cab1d890 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5560cab1d8e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5560cab1d930 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5560cab1db10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5560cab1d9c0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5560cab1da38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab1ddb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5560cab1dbd8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5560cab1dc58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5560cab1dcd0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab1dfd8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5560cab1de88 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5560cab1df08 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5560cab1e310 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5560cab1e098 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5560cab1e118 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5560cab1e190 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5560cab1e210 <col:57> col:60 'int'
|-CXXMethodDecl 0x5560cab1e4f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5560cab1e3e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5560cab1e460 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5560cab1e648 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5560cab1e5b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5560cab1e9c8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5560cab1e708 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5560cab1e788 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5560cab1e800 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5560cab1e880 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5560cab1eae0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class GapRate
         0 |   unsigned int _ugap
         4 |   int _sec_count
         8 |   class Timestamp::seconds_type _tv_sec
        12 |   unsigned int _rate
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class Shaper
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class GapRate _rate
       108 |     unsigned int _ugap
       112 |     int _sec_count
       116 |     class Timestamp::seconds_type _tv_sec
       120 |     unsigned int _rate
           | [sizeof=128, dsize=124, align=8,
           |  nvsize=124, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab262b8 <../dummy_inc/click/gaprate.hh:45:1, line:124:1> line:45:7 referenced class GapRate definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560cab263d8 <col:1, col:7> col:7 implicit referenced class GapRate
|-AccessSpecDecl 0x5560cab26468 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5560cab264f0 <line:48:5, col:20> col:12 used GapRate 'void ()' inline
|-CXXConstructorDecl 0x5560cab26640 <line:52:5, col:30> col:12 GapRate 'void (unsigned int)' inline
| `-ParmVarDecl 0x5560cab265b0 <col:20, col:29> col:29 r 'unsigned int'
|-CXXMethodDecl 0x5560cab26740 <line:55:5, col:28> col:21 rate 'unsigned int () const' inline
|-CXXMethodDecl 0x5560cab26888 <line:62:5, col:36> col:17 set_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x5560cab267f8 <col:26, col:35> col:35 r 'unsigned int'
|-CXXMethodDecl 0x5560cab26a98 <line:70:5, col:49> col:10 set_rate 'void (unsigned int, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab26948 <col:19, col:28> col:28 r 'unsigned int'
| `-ParmVarDecl 0x5560cab269c0 <col:31, col:45> col:45 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab26c18 <line:78:5, col:48> col:17 need_update 'bool (const Timestamp &)' inline
| `-ParmVarDecl 0x5560cab26b58 <col:29, col:46> col:46 ts 'const Timestamp &'
|-CXXMethodDecl 0x5560cab26ce0 <line:88:5, col:31> col:22 expiry 'Timestamp () const' inline
|-CXXMethodDecl 0x5560cab26da0 <line:93:5, col:24> col:17 update 'void ()' inline
|-CXXMethodDecl 0x5560cab26ee8 <line:100:5, col:38> col:17 update_with 'void (int)' inline
| `-ParmVarDecl 0x5560cab26e58 <col:29, col:33> col:33 delta 'int'
|-CXXMethodDecl 0x5560cab26fb0 <line:106:5, col:23> col:17 used reset 'void ()' inline
|-EnumDecl 0x5560cab27050 <line:109:5, col:28> col:5
| `-EnumConstantDecl 0x5560cab27150 <col:12, col:25> col:12 referenced UGAP_SHIFT 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|   `-ImplicitCastExpr 0x5560cab271a0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560cab27130 <col:25> 'int' Int: 12
|       `-IntegerLiteral 0x5560cab27110 <col:25> 'int' 12
|-EnumDecl 0x5560cab271b8 <line:110:5, col:46> col:5
| `-EnumConstantDecl 0x5560cab27318 <col:12, col:35> col:12 referenced MAX_RATE 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:110:5)'
|   `-ConstantExpr 0x5560cab272f8 <col:23, col:35> 'unsigned int' Int: 4096000000
|     `-BinaryOperator 0x5560cab272d8 <col:23, col:35> 'unsigned int' '<<'
|       |-IntegerLiteral 0x5560cab27280 <col:23> 'unsigned int' 1000000
|       `-ImplicitCastExpr 0x5560cab272c0 <col:35> 'int' <IntegralCast>
|         `-DeclRefExpr 0x5560cab272a0 <col:35> 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)' EnumConstant 0x5560cab27150 'UGAP_SHIFT' 'GapRate::(anonymous enum at ../dummy_inc/click/gaprate.hh:109:5)'
|-AccessSpecDecl 0x5560cab27368 <line:112:3, col:10> col:3 private
|-FieldDecl 0x5560cab273a8 <line:114:5, col:14> col:14 referenced _ugap 'unsigned int'
|-FieldDecl 0x5560cab27410 <line:115:5, col:9> col:9 referenced _sec_count 'int'
|-FieldDecl 0x5560cab274c0 <line:116:5, col:29> col:29 referenced _tv_sec 'Timestamp::seconds_type':'int'
|-FieldDecl 0x5560cab27528 <line:117:5, col:14> col:14 referenced _rate 'unsigned int'
|-CXXMethodDecl 0x5560cab27620 <line:122:5, col:46> col:17 used initialize_rate 'void (unsigned int)' inline
| `-ParmVarDecl 0x5560cab27590 <col:33, col:42> col:42 rate 'unsigned int'
|-CXXConstructorDecl 0x5560cab28788 <line:45:7> col:7 implicit constexpr GapRate 'void (const GapRate &)' inline default trivial noexcept-unevaluated 0x5560cab28788
| `-ParmVarDecl 0x5560cab28898 <col:7> col:7 'const GapRate &'
|-CXXConstructorDecl 0x5560cab28938 <col:7> col:7 implicit constexpr GapRate 'void (GapRate &&)' inline default trivial noexcept-unevaluated 0x5560cab28938
| `-ParmVarDecl 0x5560cab28a48 <col:7> col:7 'GapRate &&'
`-CXXDestructorDecl 0x5560cab2cbb0 <col:7> col:7 implicit ~GapRate 'void ()' inline default trivial noexcept-unevaluated 0x5560cab2cbb0

Layout: <CGRecordLayout
  LLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.GapRate = type { i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab2b2d0 <../elements/standard/shaper.hh:57:1, line:79:1> line:57:7 class Shaper definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5560cab2b428 <col:1, col:7> col:7 implicit referenced class Shaper
|-AccessSpecDecl 0x5560cab2b4b8 <col:33, col:39> col:33 public
|-CXXConstructorDecl 0x5560cab2b540 <line:59:5, col:12> col:5 Shaper 'void ()'
|-CXXMethodDecl 0x5560cab2b640 <line:61:5, col:55> col:17 used class_name 'const char *() const'
| |-Overrides: [ 0x5560cab0ff88 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5560cab2ccd8 <col:36, col:55>
|   `-ReturnStmt 0x5560cab2ccc8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5560cab2ccb0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5560cab2cc90 <col:45> 'const char [7]' lvalue "Shaper"
|-CXXMethodDecl 0x5560cab2b708 <line:62:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5560cab10050 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5560cab2cd38 <col:36, col:58>
|   `-ReturnStmt 0x5560cab2cd28 <col:38, col:45>
|     `-ImplicitCastExpr 0x5560cab2cd10 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5560cab2ccf0 <col:45> 'const char []' lvalue Var 0x5560cab10388 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5560cab2b7d0 <line:63:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5560cab10418 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5560cab2cd98 <col:36, col:51>
|   `-ReturnStmt 0x5560cab2cd88 <col:38, col:45>
|     `-ImplicitCastExpr 0x5560cab2cd70 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5560cab2cd50 <col:45> 'const char []' lvalue Var 0x5560cab105e8 'PULL' 'const char []'
|-CXXMethodDecl 0x5560cab2b890 <line:64:5, col:64> col:10 is_bandwidth 'bool () const'
| `-CompoundStmt 0x5560cab2cee0 <col:31, col:64>
|   `-ReturnStmt 0x5560cab2ced0 <col:33, col:59>
|     `-BinaryOperator 0x5560cab2ceb0 <col:40, col:59> 'bool' '=='
|       |-ImplicitCastExpr 0x5560cab2ce80 <col:40, col:54> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x5560cab2ce68 <col:40, col:54> 'char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x5560cab2ce30 <col:40, col:54> 'const char' lvalue
|       |     |-CXXMemberCallExpr 0x5560cab2cdf0 <col:40, col:51> 'const char *'
|       |     | `-MemberExpr 0x5560cab2cdc0 <col:40> '<bound member function type>' ->class_name 0x5560cab2b640
|       |     |   `-CXXThisExpr 0x5560cab2cdb0 <col:40> 'const Shaper *' implicit this
|       |     `-IntegerLiteral 0x5560cab2ce10 <col:53> 'int' 0
|       `-ImplicitCastExpr 0x5560cab2ce98 <col:59> 'int' <IntegralCast>
|         `-CharacterLiteral 0x5560cab2ce50 <col:59> 'char' 66
|-CXXMethodDecl 0x5560cab2bb60 <line:66:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5560cab11820 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5560cab2ba10 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5560cab2ba88 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5560cab2bc30 <line:67:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5560cab14270 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5560cab2cf18 <col:39, col:54>
|   `-ReturnStmt 0x5560cab2cf08 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5560cab2cef8 <col:48> 'bool' true
|-CXXMethodDecl 0x5560cab2bcf0 <line:68:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5560cab118f0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5560cab2be38 <line:70:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x5560cab0ef88 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5560cab2bda8 <col:18> col:21 'int'
|-AccessSpecDecl 0x5560cab2bee0 <line:72:3, col:12> col:3 protected
|-FieldDecl 0x5560cab2bf18 <line:74:5, col:13> col:13 _rate 'GapRate'
|-CXXMethodDecl 0x5560cab2c090 <line:76:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5560cab2bf78 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x5560cab2bff8 <col:43, col:48> col:49 'void *'
|-CXXMethodDecl 0x5560cab2c370 <line:77:5, col:80> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5560cab2c150 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x5560cab2c1c8 <col:46, col:55> col:55 e 'Element *'
| |-ParmVarDecl 0x5560cab2c248 <col:58, col:63> col:64 'void *'
| `-ParmVarDecl 0x5560cab2c2c0 <col:66, col:79> col:80 'ErrorHandler *'
|-CXXConstructorDecl 0x5560cab2c458 <line:57:7> col:7 implicit Shaper 'void (const Shaper &)' inline default_delete noexcept-unevaluated 0x5560cab2c458
| `-ParmVarDecl 0x5560cab2c568 <col:7> col:7 'const Shaper &'
|-CXXConstructorDecl 0x5560cab2c608 <col:7> col:7 implicit Shaper 'void (Shaper &&)' inline default_delete noexcept-unevaluated 0x5560cab2c608
| `-ParmVarDecl 0x5560cab2c718 <col:7> col:7 'Shaper &&'
|-CXXMethodDecl 0x5560cab2c7b8 <col:7> col:7 implicit operator= 'Shaper &(const Shaper &)' inline default_delete noexcept-unevaluated 0x5560cab2c7b8
| `-ParmVarDecl 0x5560cab2c8c8 <col:7> col:7 'const Shaper &'
|-CXXMethodDecl 0x5560cab2c938 <col:7> col:7 implicit operator= 'Shaper &(Shaper &&)' inline default_delete noexcept-unevaluated 0x5560cab2c938
| `-ParmVarDecl 0x5560cab2ca48 <col:7> col:7 'Shaper &&'
`-CXXDestructorDecl 0x5560cab2cad0 <col:7> col:7 implicit ~Shaper 'void ()' inline default noexcept-unevaluated 0x5560cab2cad0
  `-Overrides: [ 0x5560cab0eb28 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Shaper = type { %class.Element.base, %class.GapRate, [4 x i8] }
  NonVirtualBaseLLVMType:%class.Shaper.base = type { %class.Element.base, %class.GapRate }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560ca8e10a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5560ca8e11b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5560ca8e1258 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5560ca8e12b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5560ca8e1318 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5560ca8e13c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560ca8e16d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560ca8e17e8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5560ca8e1890 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5560ca8e18f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5560ca8e1988 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5560ca8e7a20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5560ca8e7e58 <col:12>
|-CXXConstructorDecl 0x5560ca8e7b28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560ca8e7c38 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5560ca8e1890 'data' 'const char *'
| | `-ImplicitCastExpr 0x5560ca8ea3e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5560ca8ea3b0 <col:12> 'const char *const' lvalue .data 0x5560ca8e1890
| |     `-DeclRefExpr 0x5560ca8ea390 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8e7c38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5560ca8e18f8 'length' 'int'
| | `-ImplicitCastExpr 0x5560ca8ea470 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5560ca8ea440 <col:12> 'const int' lvalue .length 0x5560ca8e18f8
| |     `-DeclRefExpr 0x5560ca8ea420 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8e7c38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5560ca8e1988 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5560ca8ea500 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5560ca8ea4d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5560ca8e1988
| |     `-DeclRefExpr 0x5560ca8ea4b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8e7c38 '' 'const String::rep_t &'
| `-CompoundStmt 0x5560ca8ea558 <col:12>
|-CXXConstructorDecl 0x5560ca8e7cd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5560ca8e7cd8
| `-ParmVarDecl 0x5560ca8e7de8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5560ca8ed340 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5560ca8f8e98 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560ca8f8fa8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5560ca8f94c0 <col:12>
|   |-BinaryOperator 0x5560ca8f92d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5560ca8f9290 <col:12> 'const char *' lvalue ->data 0x5560ca8e1890
|   | | `-CXXThisExpr 0x5560ca8f9280 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5560ca8f92c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5560ca8f9250 <col:12> 'const char *const' lvalue .data 0x5560ca8e1890
|   |     `-DeclRefExpr 0x5560ca8f9230 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8f8fa8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5560ca8f93a0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5560ca8f9358 <col:12> 'int' lvalue ->length 0x5560ca8e18f8
|   | | `-CXXThisExpr 0x5560ca8f9348 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5560ca8f9388 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5560ca8f9318 <col:12> 'const int' lvalue .length 0x5560ca8e18f8
|   |     `-DeclRefExpr 0x5560ca8f92f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8f8fa8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5560ca8f9468 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5560ca8f9420 <col:12> 'String::memo_t *' lvalue ->memo 0x5560ca8e1988
|   | | `-CXXThisExpr 0x5560ca8f9410 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5560ca8f9450 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5560ca8f93e0 <col:12> 'String::memo_t *const' lvalue .memo 0x5560ca8e1988
|   |     `-DeclRefExpr 0x5560ca8f93c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8f8fa8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5560ca8f94b0 <col:12>
|     `-UnaryOperator 0x5560ca8f9498 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560ca8f9488 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5560ca8f9018 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5560ca8f9018
  `-ParmVarDecl 0x5560ca8f9128 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560ca8d8650 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5560ca8d8768 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5560ca8d87f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5560ca8d8838 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5560ca5acfd0 'const char *'
|   `-QualType 0x5560ca5ac521 'const char' const
|     `-BuiltinType 0x5560ca5ac520 'char'
|-TypedefDecl 0x5560ca8d88c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5560ca8d8890 'String::const_iterator' sugar
|   |-Typedef 0x5560ca8d8838 'const_iterator'
|   `-PointerType 0x5560ca5acfd0 'const char *'
|     `-QualType 0x5560ca5ac521 'const char' const
|       `-BuiltinType 0x5560ca5ac520 'char'
|-TypedefDecl 0x5560ca8d8a30 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5560ca8d89a0 'int (String::*)() const'
|   |-RecordType 0x5560ca8d86e0 'String'
|   | `-CXXRecord 0x5560ca8d8650 'String'
|   `-ParenType 0x5560ca8d8940 'int () const' sugar
|     `-FunctionProtoType 0x5560ca8ad4e0 'int () const' const cdecl
|       `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560ca8d8a98 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5560ca701c10 'int64_t' sugar
|   |-Typedef 0x5560ca615390 'int64_t'
|   `-TypedefType 0x5560ca5ee630 '__int64_t' sugar
|     |-Typedef 0x5560ca5ee208 '__int64_t'
|     `-BuiltinType 0x5560ca5ac5a0 'long'
|-TypedefDecl 0x5560ca8d8b00 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5560ca701b30 'uint64_t' sugar
|   |-Typedef 0x5560ca615530 'uint64_t'
|   `-TypedefType 0x5560ca5ee6c0 '__uint64_t' sugar
|     |-Typedef 0x5560ca5ee278 '__uint64_t'
|     `-BuiltinType 0x5560ca5ac640 'unsigned long'
|-TypedefDecl 0x5560ca8d8b90 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5560ca8d8b60 'String::intmax_t' sugar
|   |-Typedef 0x5560ca8d8a98 'intmax_t'
|   `-TypedefType 0x5560ca701c10 'int64_t' sugar
|     |-Typedef 0x5560ca615390 'int64_t'
|     `-TypedefType 0x5560ca5ee630 '__int64_t' sugar
|       |-Typedef 0x5560ca5ee208 '__int64_t'
|       `-BuiltinType 0x5560ca5ac5a0 'long'
|-TypedefDecl 0x5560ca8d8c20 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5560ca8d8bf0 'String::uintmax_t' sugar
|   |-Typedef 0x5560ca8d8b00 'uintmax_t'
|   `-TypedefType 0x5560ca701b30 'uint64_t' sugar
|     |-Typedef 0x5560ca615530 'uint64_t'
|     `-TypedefType 0x5560ca5ee6c0 '__uint64_t' sugar
|       |-Typedef 0x5560ca5ee278 '__uint64_t'
|       `-BuiltinType 0x5560ca5ac640 'unsigned long'
|-CXXConstructorDecl 0x5560ca8d8ce0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5560ca8d8e88 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5560ca8d8dc8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5560ca8d9038 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5560ca8d8f78 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5560ca8d9190 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5560ca8d9100 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5560ca8d93a8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5560ca8d9258 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5560ca8d92d8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5560ca8d95c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5560ca8d9478 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5560ca8d94f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5560ca8d97e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5560ca8d9698 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5560ca8d9718 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5560ca8d9a08 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5560ca8d98b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5560ca8d9938 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5560ca8d9b98 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5560ca8d9ad0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5560ca8d9d18 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5560ca8d9c58 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5560ca8d9ea8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5560ca8d9de0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5560ca8da000 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5560ca8d9f70 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5560ca8da158 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5560ca8da0c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5560ca8da2b0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5560ca8da220 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5560ca8da438 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5560ca8da378 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5560ca8da5c8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5560ca8da500 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5560ca8da758 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5560ca8da690 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5560ca8da8e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5560ca8da820 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5560ca8da9e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5560ca8dab08 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5560ca8dac88 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5560ca8dabc0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5560ca8dadd8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5560ca8dad48 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5560ca8dae90 <col:63> "" ""
|-CXXMethodDecl 0x5560ca8dafd8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5560ca8daf18 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5560ca8db1e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5560ca8db098 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5560ca8db118 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5560ca8db408 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5560ca8db2b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5560ca8db330 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5560ca8db6e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5560ca8db4c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5560ca8db548 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5560ca8e74f0 <col:55> 'int' 10
| `-ParmVarDecl 0x5560ca8db5c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5560ca8e7510 <col:76> 'bool' true
|-CXXMethodDecl 0x5560ca8db9c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5560ca8db7b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5560ca8db830 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5560ca8e7520 <col:56> 'int' 10
| `-ParmVarDecl 0x5560ca8db8a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5560ca8e7540 <col:77> 'bool' true
|-CXXMethodDecl 0x5560ca8dbad0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5560ca8dbb98 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5560ca8dbc60 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5560ca8dbd00 <col:20>
| `-OptimizeNoneAttr 0x5560ca8dbd58 <col:30>
|-CXXConversionDecl 0x5560ca8dbe48 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5560ca8dbf18 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5560ca8dbfd8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5560ca8dc0c8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5560ca8dc188 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5560ca8dc308 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5560ca8dc240 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5560ca8dc458 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5560ca8dc3c8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5560ca8dc548 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5560ca8dc608 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5560ca8dc858 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5560ca8dc6c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5560ca8dc740 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5560ca8dcab8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5560ca8dc920 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5560ca8dc9a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5560ca8dcb88 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5560ca8dcd98 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5560ca8dcc40 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5560ca8dccc0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5560ca8dcfb8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5560ca8dce60 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5560ca8dcee0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5560ca8dd148 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5560ca8dd080 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5560ca8dd238 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5560ca8dd3a8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5560ca8dd2e8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5560ca8dd5b8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5560ca8dd468 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5560ca8dd4e8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5560ca8dd7d0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5560ca8dd678 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5560ca8dd6f0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5560ca8dd960 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5560ca8dd890 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5560ca8ddb80 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5560ca8dda20 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5560ca8ddaa0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5560ca8ddcd0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5560ca8ddc40 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5560ca8ddea8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5560ca8ddd90 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5560ca8dde10 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5560ca8ddff8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5560ca8ddf68 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5560ca8de210 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5560ca8de0b0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5560ca8de130 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5560ca8e7550 <col:39> 'int' 0
|-CXXMethodDecl 0x5560ca8de430 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5560ca8de2d0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5560ca8de350 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5560ca8e7570 <col:48> 'int' 0
|-CXXMethodDecl 0x5560ca8de610 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5560ca8de4f0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5560ca8de570 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5560ca8e7590 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5560ca8de6e0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5560ca8de7a0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5560ca8de860 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5560ca8de920 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5560ca8de9e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5560ca8deb88 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5560ca8dea90 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5560ca8ded08 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5560ca8dec40 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5560ca8deea0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5560ca8dedc8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5560ca8df018 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5560ca8def58 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5560ca8df160 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5560ca8df0d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5560ca8df2b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5560ca8df220 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5560ca8df488 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5560ca8df370 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5560ca8df3f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5560ca8df668 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5560ca8df550 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5560ca8df5d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5560ca8df7b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5560ca8df728 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5560ca8df9c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5560ca8df878 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5560ca8df8f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5560ca8dfb28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5560ca8dfa90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5560ca8dfc80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5560ca8dfbe8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5560ca8dfd28 <col:57> "" ""
|-CXXMethodDecl 0x5560ca8dfe38 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5560ca8dfda8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5560ca8dff88 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5560ca8dfef8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5560ca8e0108 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5560ca8e0040 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5560ca8e01d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5560ca8e0290 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5560ca8e0350 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5560ca8e03f0 <col:49> "" ""
|-CXXMethodDecl 0x5560ca8e0480 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5560ca8e0540 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5560ca8e0630 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5560ca8e06f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5560ca8e07b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5560ca8e0878 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5560ca8e0970 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5560ca8e0a38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5560ca8e0b00 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5560ca8e0cd8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5560ca8e0bb8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5560ca8e0c38 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5560ca8e0f00 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5560ca8e0da0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5560ca8e0e20 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5560ca8e1010 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5560ca8e1078 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5560ca8e10a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5560ca8e11b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5560ca8e1258 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5560ca8e12b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5560ca8e1318 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5560ca8e13c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5560ca8e1430 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5560ca8e1668 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5560ca8e16b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560ca8e1648 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5560ca8e1558 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5560ca8e1500 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5560ca8e1540 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5560ca8e1520 <col:32> 'int' 8
|-CXXRecordDecl 0x5560ca8e16d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5560ca8e17e8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5560ca8e1890 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5560ca8e18f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5560ca8e1988 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5560ca8e7a20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5560ca8e7e58 <col:12>
| |-CXXConstructorDecl 0x5560ca8e7b28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5560ca8e7c38 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5560ca8e1890 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5560ca8ea3e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5560ca8ea3b0 <col:12> 'const char *const' lvalue .data 0x5560ca8e1890
| | |     `-DeclRefExpr 0x5560ca8ea390 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8e7c38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5560ca8e18f8 'length' 'int'
| | | `-ImplicitCastExpr 0x5560ca8ea470 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5560ca8ea440 <col:12> 'const int' lvalue .length 0x5560ca8e18f8
| | |     `-DeclRefExpr 0x5560ca8ea420 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8e7c38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5560ca8e1988 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5560ca8ea500 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5560ca8ea4d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5560ca8e1988
| | |     `-DeclRefExpr 0x5560ca8ea4b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8e7c38 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5560ca8ea558 <col:12>
| |-CXXConstructorDecl 0x5560ca8e7cd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5560ca8e7cd8
| | `-ParmVarDecl 0x5560ca8e7de8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5560ca8ed340 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5560ca8f8e98 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5560ca8f8fa8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5560ca8f94c0 <col:12>
| |   |-BinaryOperator 0x5560ca8f92d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5560ca8f9290 <col:12> 'const char *' lvalue ->data 0x5560ca8e1890
| |   | | `-CXXThisExpr 0x5560ca8f9280 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5560ca8f92c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5560ca8f9250 <col:12> 'const char *const' lvalue .data 0x5560ca8e1890
| |   |     `-DeclRefExpr 0x5560ca8f9230 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8f8fa8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5560ca8f93a0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5560ca8f9358 <col:12> 'int' lvalue ->length 0x5560ca8e18f8
| |   | | `-CXXThisExpr 0x5560ca8f9348 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5560ca8f9388 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5560ca8f9318 <col:12> 'const int' lvalue .length 0x5560ca8e18f8
| |   |     `-DeclRefExpr 0x5560ca8f92f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8f8fa8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5560ca8f9468 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5560ca8f9420 <col:12> 'String::memo_t *' lvalue ->memo 0x5560ca8e1988
| |   | | `-CXXThisExpr 0x5560ca8f9410 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5560ca8f9450 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5560ca8f93e0 <col:12> 'String::memo_t *const' lvalue .memo 0x5560ca8e1988
| |   |     `-DeclRefExpr 0x5560ca8f93c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5560ca8f8fa8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5560ca8f94b0 <col:12>
| |     `-UnaryOperator 0x5560ca8f9498 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5560ca8f9488 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5560ca8f9018 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5560ca8f9018
|   `-ParmVarDecl 0x5560ca8f9128 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5560ca8e1a00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5560ca8e1c48 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5560ca8e1a68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5560ca8e1ae8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5560ca8e1b60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5560ca8e79e0 <col:79, line:261:5>
|   |-BinaryOperator 0x5560ca8e7658 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5560ca8e75f0 <col:2, col:5> 'const char *' lvalue .data 0x5560ca8e1890
|   | | `-MemberExpr 0x5560ca8e75c0 <col:2> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|   | |   `-CXXThisExpr 0x5560ca8e75b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5560ca8e7640 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5560ca8e7620 <col:12> 'const char *' lvalue ParmVar 0x5560ca8e1a68 'data' 'const char *'
|   |-BinaryOperator 0x5560ca8e7720 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5560ca8e76b8 <col:2, col:5> 'int' lvalue .length 0x5560ca8e18f8
|   | | `-MemberExpr 0x5560ca8e7688 <col:2> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|   | |   `-CXXThisExpr 0x5560ca8e7678 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5560ca8e7708 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5560ca8e76e8 <col:14> 'int' lvalue ParmVar 0x5560ca8e1ae8 'length' 'int'
|   `-IfStmt 0x5560ca8e79c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5560ca8e7840 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5560ca8e7828 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5560ca8e7808 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5560ca8e77e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5560ca8e7780 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|     |       | `-MemberExpr 0x5560ca8e7750 <col:7> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|     |       |   `-CXXThisExpr 0x5560ca8e7740 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5560ca8e77d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5560ca8e77b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5560ca8e1b60 'memo' 'String::memo_t *'
|     `-CallExpr 0x5560ca8e79a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5560ca8e7988 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5560ca8e7890 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5560ca8d06b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5560ca8e78f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5560ca8e1258
|         `-ImplicitCastExpr 0x5560ca8e78e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5560ca8e78c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5560ca8e1b60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5560ca8e1ef8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5560ca8e1d18 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5560ca8e1d98 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5560ca8e1e10 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5560ca8e1a00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5560ca8e7e68 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560ca8e7ff8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5560ca8e7f60 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5560ca8e7ed0 <col:2> '<bound member function type>' ->assign_memo 0x5560ca8e1c48
|     | `-ImplicitCastExpr 0x5560ca8e7f98 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5560ca8e7ec0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5560ca8e7fb0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5560ca8e7f00 <col:14> 'const char *' lvalue ParmVar 0x5560ca8e1d18 'data' 'const char *'
|     |-ImplicitCastExpr 0x5560ca8e7fc8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5560ca8e7f20 <col:20> 'int' lvalue ParmVar 0x5560ca8e1d98 'length' 'int'
|     `-ImplicitCastExpr 0x5560ca8e7fe0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5560ca8e7f40 <col:28> 'String::memo_t *' lvalue ParmVar 0x5560ca8e1e10 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5560ca8e2088 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5560ca8e1fc8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5560ca8e8250 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5560ca8e81d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5560ca8e8020 <col:2> '<bound member function type>' ->assign_memo 0x5560ca8e1c48
|     | `-CXXThisExpr 0x5560ca8e8010 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5560ca8e8208 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5560ca8e80a0 <col:14, col:19> 'const char *' lvalue .data 0x5560ca8e1890
|     |   `-MemberExpr 0x5560ca8e8070 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5560ca8e1a00
|     |     `-DeclRefExpr 0x5560ca8e8050 <col:14> 'const String' lvalue ParmVar 0x5560ca8e1fc8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5560ca8e8220 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5560ca8e8120 <col:25, col:30> 'int' lvalue .length 0x5560ca8e18f8
|     |   `-MemberExpr 0x5560ca8e80f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5560ca8e1a00
|     |     `-DeclRefExpr 0x5560ca8e80d0 <col:25> 'const String' lvalue ParmVar 0x5560ca8e1fc8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5560ca8e8238 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5560ca8e81a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|         `-MemberExpr 0x5560ca8e8170 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5560ca8e1a00
|           `-DeclRefExpr 0x5560ca8e8150 <col:38> 'const String' lvalue ParmVar 0x5560ca8e1fc8 'x' 'const String &'
|-CXXMethodDecl 0x5560ca8e2150 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5560ca8e8c10 <col:31, line:278:5>
|   `-IfStmt 0x5560ca8e8bf8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5560ca8e82f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5560ca8e82d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5560ca8e82a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|     |     `-MemberExpr 0x5560ca8e8278 <col:6> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|     |       `-CXXThisExpr 0x5560ca8e8268 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5560ca8e8bd0 <col:15, line:277:2>
|       |-ParenExpr 0x5560ca8e87a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5560ca8e8770 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5560ca8e8400 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5560ca8e83e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5560ca8e83d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5560ca8e8390 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5560ca8e1258
|       |   |       `-ImplicitCastExpr 0x5560ca8e8378 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5560ca8e8348 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|       |   |           `-MemberExpr 0x5560ca8e8318 <col:27> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|       |   |             `-CXXThisExpr 0x5560ca8e8308 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5560ca8e8460 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5560ca8e8440 <col:54> 'int' 0
|       |   `-CallExpr 0x5560ca8e86d0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5560ca8e86b8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5560ca8e8638 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5560ca8e8710 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5560ca8e8548 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5560ca8e8728 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5560ca8e8578 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5560ca8e8740 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5560ca8e85b0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5560ca8e8758 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5560ca8e8620 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5560ca8e8608 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5560ca8e85d0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5560ca8e8af0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5560ca8e89b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5560ca8e8998 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5560ca8e8910 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5560ca8d1b00 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5560ca8e88e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5560ca8e1258
|       | |   `-ImplicitCastExpr 0x5560ca8e88c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5560ca8e8898 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|       | |       `-MemberExpr 0x5560ca8e8868 <col:40> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|       | |         `-CXXThisExpr 0x5560ca8e8858 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5560ca8e8ab0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5560ca8e8a98 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5560ca8e89d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5560ca8e6930 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5560ca8e8ad8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5560ca8e8a38 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|       |       `-MemberExpr 0x5560ca8e8a08 <col:15> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|       |         `-CXXThisExpr 0x5560ca8e89f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5560ca8e8bb0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5560ca8e8b48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5560ca8e1988
|         | `-MemberExpr 0x5560ca8e8b18 <col:6> 'String::rep_t' lvalue ->_r 0x5560ca8e1a00
|         |   `-CXXThisExpr 0x5560ca8e8b08 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5560ca8e8b98 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5560ca8e8b78 <col:16> 'int' 0
|-CXXMethodDecl 0x5560ca8e23e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5560ca8e2208 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5560ca8e2288 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5560ca8e2300 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5560ca8e24c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5560ca8e2710 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5560ca8e2578 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5560ca8e25f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5560ca8e2670 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5560ca8e28f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5560ca8e27e0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5560ca8e2860 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5560ca8e29f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5560ca8e8ce8 <col:41, line:286:5>
|   `-ReturnStmt 0x5560ca8e8cd8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5560ca8e8ca8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5560ca8e8c70 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5560ca8e8c58 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5560ca8e8c38 <col:46> 'int' 1
|-CXXMethodDecl 0x5560ca8e2c98 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5560ca8e2ab0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5560ca8e2b30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5560ca8e2bb0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5560ca8e6930 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5560ca8e2d60 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5560ca8e6a00 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5560ca8e6bd0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5560ca8e6ab8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5560ca8e6b38 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5560ca8e6c90 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5560ca8e6d58 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5560ca8e6e58 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5560ca8e6ed0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5560ca8e6f48 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5560ca8e6fb0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5560ca8e70b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5560ca8e7100 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560ca8e7090 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5560ca8e7070 <col:22> 'int' 14
|-CXXMethodDecl 0x5560ca8e7318 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5560ca8e7130 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5560ca8e71b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5560ca8e7230 <col:43> col:46 'int'
|-FriendDecl 0x5560ca8e7420 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5560ca8e74b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5560ca9a7dc0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5560ca9a7f98 prev 0x5560ca9a7dc0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5560ca9a8028 <col:46, col:52> col:46 public
|-TypedefDecl 0x5560ca9a8050 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560ca9a99b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5560ca9a9960 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5560ca9a9940 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5560ca9a8268 'type'
|     `-SubstTemplateTypeParmType 0x5560ca9a8230 'String' sugar
|       |-TemplateTypeParmType 0x5560ca89cc40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca89cbf0 'T'
|       `-RecordType 0x5560ca8d86e0 'String'
|         `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9a9a68 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5560ca9a9a30 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5560ca9a9a10 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5560ca9a99b0 'type'
|     `-ElaboratedType 0x5560ca9a9960 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5560ca9a9940 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5560ca9a8268 'type'
|         `-SubstTemplateTypeParmType 0x5560ca9a8230 'String' sugar
|           |-TemplateTypeParmType 0x5560ca89cc40 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5560ca89cbf0 'T'
|           `-RecordType 0x5560ca8d86e0 'String'
|             `-CXXRecord 0x5560ca8d8650 'String'
|-CXXMethodDecl 0x5560ca9a9be8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5560ca9a9af8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5560ca9a9cd8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5560ca9a9db8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5560ca9a9db8
|-CXXMethodDecl 0x5560ca9aa088 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5560ca9a9f90 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5560ca9aa2c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5560ca9aa140 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5560ca9aa1b8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9aa498 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5560ca9aa388 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5560ca9aa400 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9aa5f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5560ca9aa6c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5560ca9aa918 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5560ca9aa788 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5560ca9aa800 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9aab78 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5560ca9aa9e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5560ca9aaa60 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9aad38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5560ca9aac48 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9aaef8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5560ca9aae00 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9aafb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5560ca9ab060 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5560ca9ab298 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5560ca9ab110 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5560ca9ab188 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5560ca9ab538 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5560ca9ab440 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5560ca9ab600 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5560ca9ab650 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5560ca9ab6a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5560cab11490 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5560ca9a6828 prev 0x5560cab11490 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5560ca9a7d30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5560ca9a7ce0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5560ca9a7cc0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5560ca9a7b70 'type'
|     `-SubstTemplateTypeParmType 0x5560ca9a7a00 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5560ca8727e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5560ca872788 'F'
|       `-RecordType 0x5560ca9a7660 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5560ca9a7580 'typed_array_memory'
|-FieldDecl 0x5560ca9ab6f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5560ca9ab740 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5560ca9ab778 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|   |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|   `-RecordType 0x5560ca8d86e0 'String'
|     `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ab808 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5560ca9ab7d0 'String &'
|   `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|     |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|     `-RecordType 0x5560ca8d86e0 'String'
|       `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ab898 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5560ca9ab860 'const String &'
|   `-QualType 0x5560ca9a68c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-RecordType 0x5560ca8d86e0 'String'
|         `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ab928 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5560ca9ab8f0 'String *'
|   `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|     |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|     `-RecordType 0x5560ca8d86e0 'String'
|       `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ab9b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5560ca9ab980 'const String *'
|   `-QualType 0x5560ca9a68c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-RecordType 0x5560ca8d86e0 'String'
|         `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ac610 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5560ca9ac5c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5560ca9ac5a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5560ca9ac4d8 'type'
|     `-LValueReferenceType 0x5560ca9ac4a0 'const String &'
|       `-QualType 0x5560ca9ac241 'const String' const
|         `-SubstTemplateTypeParmType 0x5560ca9ac240 'String' sugar
|           |-TemplateTypeParmType 0x5560ca87c730 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5560ca87c6d8 'T'
|           `-RecordType 0x5560ca8d86e0 'String'
|             `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ac678 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5560ca9ab860 'const String &'
|   `-QualType 0x5560ca9a68c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-RecordType 0x5560ca8d86e0 'String'
|         `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ac6d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560ca9ac738 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5560ca9ab8f0 'String *'
|   `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|     |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|     `-RecordType 0x5560ca8d86e0 'String'
|       `-CXXRecord 0x5560ca8d8650 'String'
|-TypedefDecl 0x5560ca9ac7a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5560ca9ab980 'const String *'
|   `-QualType 0x5560ca9a68c1 'const String' const
|     `-SubstTemplateTypeParmType 0x5560ca9a68c0 'String' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-RecordType 0x5560ca8d86e0 'String'
|         `-CXXRecord 0x5560ca8d8650 'String'
|-EnumDecl 0x5560ca9ac7f8 <line:134:5> col:5
| `-EnumConstantDecl 0x5560ca9ac8f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5560ca9ac8d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5560ca8ab8a8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5560ca8ab880 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5560ca8ab860 <col:40> 'int' 1
|-CXXConstructorDecl 0x5560ca9ac978 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5560cab6afd0 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5560ca9aca30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5560ca9acad0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5560cab6b268 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5560cab6b150 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5560cab6b528 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5560cab6b410 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5560cab6b840 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5560cab6b720 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5560cab6bb50 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5560cab6ba30 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5560cab6be40 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cab6bc88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5560cab6bd00 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5560cab6bf68 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5560cab6c018 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cab6c070 <col:30> Inherited
|-CXXMethodDecl 0x5560cab6c0b8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5560cab6c168 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cab6c1c0 <col:30> Inherited
|-CXXMethodDecl 0x5560cab6c288 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5560cab6c338 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cab6c390 <col:30> Inherited
|-CXXMethodDecl 0x5560cab6c3d8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5560cab6c488 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cab6c4e0 <col:30> Inherited
|-CXXMethodDecl 0x5560cab6c528 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5560cab6c5d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cab6c630 <col:30> Inherited
|-CXXMethodDecl 0x5560cab6c678 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5560cab6c728 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cab6c780 <col:30> Inherited
|-CXXMethodDecl 0x5560cab6c7a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5560cab6c858 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5560cab6c908 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5560cab6cac8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cab6c9b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5560cab6ca30 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5560cab6cc18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5560cab6cb88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cab6cdc8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5560cab6ccd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5560cab6ce80 <col:20>
| `-OptimizeNoneAttr 0x5560cab6ced8 <col:30>
|-CXXMethodDecl 0x5560cab6cff8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5560cab6cf00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5560cab6d0b0 <col:20>
| `-OptimizeNoneAttr 0x5560cab6d108 <col:30>
|-CXXMethodDecl 0x5560cab6d1c0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5560cab6d130 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cab6d308 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5560cab6d278 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cab6d438 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5560cab6d538 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5560cab6d608 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5560cab6d6d8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5560cab6d818 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5560cab6d788 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cab6d960 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5560cab6d8d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cab6daa8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5560cab6da18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5560cab6db60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5560cab6dc60 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5560cab6dbd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5560cab6dd18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5560cab6ddd8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5560cab6ded8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5560cab6e058 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5560cab6df98 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5560cab6e818 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5560cab6e110 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5560cab6e778 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5560cab6e678 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5560cab6e8f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5560cab6ea48 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5560cab6e9b8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5560cab6eb00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5560cab6ed48 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cab6ebc0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5560cab6ec38 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5560cab6eed8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5560cab6ee18 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5560cab6f0e8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5560cab6efa0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5560cab6f018 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5560cab6f1a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5560cab6f408 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5560cab6f310 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5560cab6f4d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5560cab6f4d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cabe6b68 prev 0x5560cab7a068 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5560cabe6c60 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5560cabe6cf0 <col:22, col:28> col:22 public
|-EnumDecl 0x5560cabe6d18 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5560cabe6e38 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe6e18 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5560cabe6e00 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5560cabe6de0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5560cabe6ee0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe6ec0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5560cabe6ea8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5560cabe6e88 <col:14> 'int' 1
| |-EnumConstantDecl 0x5560cabe6f70 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe6f50 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5560cabe6f30 <col:17> 'int' 0
| |-EnumConstantDecl 0x5560cabe7000 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe6fe0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5560cabe6fc0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5560cabe7090 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe7070 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5560cabe7050 <col:16> 'int' 2
| |-EnumConstantDecl 0x5560cabe7120 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe7100 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5560cabe70e0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5560cabe71b0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe7190 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5560cabe7170 <col:15> 'int' 4
| |-EnumConstantDecl 0x5560cabe7240 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe7220 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5560cabe7200 <col:14> 'int' 5
| |-EnumConstantDecl 0x5560cabe72d0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5560cabe72b0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5560cabe7290 <col:12> 'int' 6
| `-EnumConstantDecl 0x5560cabe7360 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5560cabe7340 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5560cabe7320 <col:13> 'int' 7
|-VarDecl 0x5560cabe73d0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5560cabe7458 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5560cabe74e0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5560cabe7568 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5560cabe75f0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5560cabe7678 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5560cabe7700 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5560cabe7788 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5560cabe7810 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5560cabe7898 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5560cabe7920 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5560cabe7a20 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5560cabecd08 '_nerrors' 'int'
| | `-IntegerLiteral 0x5560cabed498 <line:128:13> 'int' 0
| `-CompoundStmt 0x5560cabed508 <col:16, line:129:5>
|-CXXDestructorDecl 0x5560cabe7b10 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5560cabed518 <col:29, line:132:5>
|-CXXMethodDecl 0x5560cabe7cc8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5560cabe7c00 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cabe7d90 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5560cabe7e78 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5560cabed570 <col:44, line:161:5>
|   `-ReturnStmt 0x5560cabed560 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5560cabed548 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5560cabed528 <col:9> 'ErrorHandler *' lvalue Var 0x5560cabecd68 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5560cabe7fb8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5560cabe7f28 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5560cabe8080 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5560cabed5d0 <col:43, line:173:5>
|   `-ReturnStmt 0x5560cabed5c0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5560cabed5a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5560cabed588 <col:9> 'ErrorHandler *' lvalue Var 0x5560cabecde0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5560cabe8138 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5560cabe81b8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5560cabe82c8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5560cabe8238 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe8418 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5560cabe8388 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe8570 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5560cabe84d8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe86c8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5560cabe8630 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe8820 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5560cabe8788 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe8a30 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5560cabe88d8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5560cabe8958 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe8c08 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5560cabe8af0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5560cabe8b70 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe8e28 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5560cabe8cc8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5560cabe8d48 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe9008 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5560cabe8ee8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5560cabe8f68 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe91e8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5560cabe90c8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5560cabe9148 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5560cabe9370 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5560cabe92a8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5560cabe9540 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5560cabe9428 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5560cabe94a0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5560cabed828 <col:57, line:234:5>
|   `-ReturnStmt 0x5560cabed818 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5560cabed800 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5560cabed7a8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5560cabed778 <col:9> '<bound member function type>' ->xmessage 0x5560cabe9370
|         | `-CXXThisExpr 0x5560cabed768 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5560cabed7e8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5560cabed7d0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5560cabed748 <col:18, col:40> 'String' (CXXTemporary 0x5560cabed748)
|               `-CallExpr 0x5560cabed710 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5560cabed6f8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5560cabed670 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5560cabeb538 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5560cabed690 <col:31> 'const String' lvalue ParmVar 0x5560cabe94a0 'str' 'const String &'
|                 `-DeclRefExpr 0x5560cabed6b0 <col:36> 'const String' lvalue ParmVar 0x5560cabe9428 'anno' 'const String &'
|-CXXMethodDecl 0x5560cabe9820 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5560cabe9600 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5560cabe9680 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5560cabe96f8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5560cabedab8 <col:68, line:243:5>
|   `-ReturnStmt 0x5560cabedaa8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5560cabeda90 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5560cabeda30 <col:9, col:41> 'int'
|         |-MemberExpr 0x5560cabeda00 <col:9> '<bound member function type>' ->xmessage 0x5560cabe9540
|         | `-CXXThisExpr 0x5560cabed9f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5560cabed8c8 <col:18> 'const String' lvalue ParmVar 0x5560cabe9600 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5560cabeda78 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5560cabeda60 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5560cabed9d0 <col:24, col:40> 'String' (CXXTemporary 0x5560cabed9d0)
|               `-CXXMemberCallExpr 0x5560cabed968 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5560cabed8f8 <col:24> '<bound member function type>' ->vformat 0x5560cabeaa00
|                 | `-CXXThisExpr 0x5560cabed8e8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5560cabed998 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5560cabed928 <col:32> 'const char *' lvalue ParmVar 0x5560cabe9680 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5560cabed9b0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5560cabed948 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5560cabe96f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5560cabe9ac0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5560cabe98e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5560cabe9960 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5560cabe99d8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5560cabeddf8 <col:23, line:254:5>
|   `-ReturnStmt 0x5560cabedde8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5560cabeddd0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5560cabedd70 <col:9, col:71> 'int'
|         |-MemberExpr 0x5560cabedd40 <col:9> '<bound member function type>' ->xmessage 0x5560cabe9540
|         | `-CXXThisExpr 0x5560cabedd30 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5560cabeddb8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5560cabedda0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5560cabedcf0 <col:18, col:65> 'String' (CXXTemporary 0x5560cabedcf0)
|         |     `-CallExpr 0x5560cabedc88 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5560cabedc70 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5560cabedb58 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5560cabeb538 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5560cabedb78 <col:31> 'const String' lvalue ParmVar 0x5560cabe9960 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5560cabedcd0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5560cabedcb8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5560cabedc50 <col:37, col:64> 'String' (CXXTemporary 0x5560cabedc50)
|         |             `-CallExpr 0x5560cabedc20 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5560cabedc08 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5560cabedb98 <col:37> 'String (const String &)' lvalue CXXMethod 0x5560cabebb88 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5560cabedbb8 <col:56> 'const String' lvalue ParmVar 0x5560cabe98e8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5560cabedd10 <col:68> 'const String' lvalue ParmVar 0x5560cabe99d8 'str' 'const String &'
|-CXXMethodDecl 0x5560cabe9e40 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5560cabe9b88 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5560cabe9c00 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5560cabe9c80 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5560cabe9cf8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5560cabee0b0 <col:34, line:267:5>
|   `-ReturnStmt 0x5560cabee0a0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5560cabee088 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5560cabee020 <col:9, col:51> 'int'
|         |-MemberExpr 0x5560cabedff0 <col:9> '<bound member function type>' ->xmessage 0x5560cabe9ac0
|         | `-CXXThisExpr 0x5560cabedfe0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5560cabede98 <col:18> 'const String' lvalue ParmVar 0x5560cabe9b88 'landmark' 'const String &'
|         |-DeclRefExpr 0x5560cabedeb8 <col:28> 'const String' lvalue ParmVar 0x5560cabe9c00 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5560cabee070 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5560cabee058 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5560cabedfc0 <col:34, col:50> 'String' (CXXTemporary 0x5560cabedfc0)
|               `-CXXMemberCallExpr 0x5560cabedf58 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5560cabedee8 <col:34> '<bound member function type>' ->vformat 0x5560cabeaa00
|                 | `-CXXThisExpr 0x5560cabeded8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5560cabedf88 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5560cabedf18 <col:42> 'const char *' lvalue ParmVar 0x5560cabe9c80 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5560cabedfa0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5560cabedf38 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5560cabe9cf8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5560cabe9f50 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5560cabee130 <col:25, line:288:5>
|   `-ReturnStmt 0x5560cabee120 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5560cabee108 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5560cabee0d8 <col:9> 'const int' lvalue ->_nerrors 0x5560cabecd08
|         `-CXXThisExpr 0x5560cabee0c8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5560cabea160 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5560cabea008 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5560cabea088 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5560cabea448 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5560cabea228 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5560cabea2a8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5560cabea320 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5560cabea5e0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5560cabea518 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5560cabea828 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5560cabea6a0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5560cabea718 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5560cabee390 <col:58, line:357:5>
|   `-ReturnStmt 0x5560cabee380 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5560cabee368 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5560cabee338 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5560cabee320 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5560cabee300 <col:9, col:29> 'String' (CXXTemporary 0x5560cabee300)
|             `-CallExpr 0x5560cabee290 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5560cabee278 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5560cabee1f8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5560cabea448 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5560cabee198 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5560cabee2c8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5560cabee1b8 <col:21> 'const char *' lvalue ParmVar 0x5560cabea6a0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5560cabee2e0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5560cabee1d8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5560cabea718 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5560cabeaa00 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5560cabea8f0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5560cabea968 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5560cabeab58 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5560cabeaac8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5560cabeaca0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5560cabeac10 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5560cabeaf40 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5560cabead58 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5560cabeadd8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5560cabeae50 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5560cabeb0a0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5560cabeb010 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5560cabee4a8 <col:37, line:441:5>
|   `-IfStmt 0x5560cabee490 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5560cabee418 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5560cabee3e8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5560cabee3a8 <col:6> 'int' lvalue ParmVar 0x5560cabeb010 'level' 'int'
|     | `-ImplicitCastExpr 0x5560cabee400 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5560cabee3c8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5560cabe7120 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5560cabee478 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5560cabee448 <col:8> 'int' lvalue ->_nerrors 0x5560cabecd08
|         `-CXXThisExpr 0x5560cabee438 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5560cabeb168 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5560cabee540 <col:26, line:448:5>
|   `-BinaryOperator 0x5560cabee520 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5560cabee4d0 <col:2> 'int' lvalue ->_nerrors 0x5560cabecd08
|     | `-CXXThisExpr 0x5560cabee4c0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5560cabee500 <col:13> 'int' 0
|-CXXMethodDecl 0x5560cabeb330 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5560cabeb220 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5560cabeb298 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5560cabeb538 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5560cabeb3f0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5560cabeb468 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5560cabeb7e8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5560cabeb5f8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5560cabeb678 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5560cabeb6f8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5560cabeb8a0 <col:59> 0 0
|-CXXMethodDecl 0x5560cabeba38 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5560cabeb918 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5560cabeb998 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5560cabeebc0 <col:70, line:534:5>
|   |-DeclStmt 0x5560cabee6b0 <line:528:2, col:20>
|   | |-VarDecl 0x5560cabee568 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5560cabee5d0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5560cabee608 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5560cabee670 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5560cabee780 <line:529:2, col:23>
|   | `-VarDecl 0x5560cabee6e0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5560cabee768 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5560cabee748 <col:18> 'const char *' lvalue ParmVar 0x5560cabeb918 'begin' 'const char *'
|   |-DoStmt 0x5560cabeeb58 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5560cabeea78 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5560cabeea60 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5560cabeea40 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5560cabee798 <col:6> 'const char *' lvalue Var 0x5560cabee6e0 'x' 'const char *'
|   | |     `-CallExpr 0x5560cabee990 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5560cabee978 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5560cabee930 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5560cabed1e0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5560cabee9f8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5560cabee9e0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5560cabee850 <col:20, col:27> 'String' (CXXTemporary 0x5560cabee850)
|   | |       |     `-CXXTemporaryObjectExpr 0x5560cabee818 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5560cabeea10 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5560cabee870 <col:30> 'const char *' lvalue Var 0x5560cabee6e0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5560cabeea28 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5560cabee890 <col:33> 'const char *' lvalue ParmVar 0x5560cabeb998 'end' 'const char *'
|   | |       |-UnaryOperator 0x5560cabee8d0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5560cabee8b0 <col:39> 'String' lvalue Var 0x5560cabee568 'name' 'String'
|   | |       |-UnaryOperator 0x5560cabee908 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5560cabee8e8 <col:46> 'String' lvalue Var 0x5560cabee608 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5560cabee920 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5560cabeeb40 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5560cabeeb28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5560cabeeb08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5560cabeead8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|   |         `-ImplicitCastExpr 0x5560cabeeac0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5560cabeea90 <col:11> 'String' lvalue Var 0x5560cabee568 'name' 'String'
|   `-ReturnStmt 0x5560cabeebb0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5560cabeeb98 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5560cabeeb78 <col:9> 'const char *' lvalue Var 0x5560cabee6e0 'x' 'const char *'
|-CXXMethodDecl 0x5560cabebb88 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5560cabebaf8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5560cabef1c8 <col:55, line:550:5>
|   `-IfStmt 0x5560cabef1a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5560cabeee00 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5560cabeede8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5560cabeedd0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5560cabeedb0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5560cabeed80 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|     | |       `-DeclRefExpr 0x5560cabeec20 <col:6> 'const String' lvalue ParmVar 0x5560cabebaf8 'x' 'const String &'
|     | `-BinaryOperator 0x5560cabeed60 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5560cabeed30 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5560cabeece0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5560cabeecc8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5560cabeec80 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5560ca8f5780 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5560cabeec40 <col:11> 'const String' lvalue ParmVar 0x5560cabebaf8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5560cabeec60 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5560cabeed48 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5560cabeed18 <col:19> 'char' 123
|     |-ReturnStmt 0x5560cabeee70 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5560cabeee40 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5560cabeee20 <col:13> 'const String' lvalue ParmVar 0x5560cabebaf8 'x' 'const String &'
|     `-IfStmt 0x5560cabef178 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5560cabeef08 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5560cabeeef0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5560cabeeed0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5560cabeeea0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |       `-DeclRefExpr 0x5560cabeee80 <col:11> 'const String' lvalue ParmVar 0x5560cabebaf8 'x' 'const String &'
|       |-ReturnStmt 0x5560cabef090 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5560cabef078 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5560cabef048 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5560cabef030 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5560cabef010 <col:13, col:29> 'String' (CXXTemporary 0x5560cabef010)
|       |         `-CallExpr 0x5560cabeefc0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5560cabeefa8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5560cabeef20 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5560cabeb330 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5560cabeeff0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5560cabeef40 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5560cabeef60 <col:28> 'const String' lvalue ParmVar 0x5560cabebaf8 'x' 'const String &'
|       `-ReturnStmt 0x5560cabef168 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5560cabef150 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5560cabef120 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5560cabef108 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5560cabef0e8 <col:13, col:20> 'String' (CXXTemporary 0x5560cabef0e8)
|                 `-CXXTemporaryObjectExpr 0x5560cabef0b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5560cabebd50 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5560cabebc40 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5560cabebcb8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5560cabed488 <col:71> 'bool' false
|-CXXRecordDecl 0x5560cabebe00 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5560cabec0f8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5560cabec090 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5560cabec030 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5560cabebff0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5560ca8d86e0 'String'
|       | `-CXXRecord 0x5560ca8d8650 'String'
|       |-BuiltinType 0x5560ca5ac580 'int'
|       `-DecayedType 0x5560cab7b110 '__va_list_tag *' sugar
|         |-TypedefType 0x5560cab7b0e0 'va_list' sugar
|         | |-Typedef 0x5560ca7ca300 'va_list'
|         | `-TypedefType 0x5560ca7ca2b0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5560ca701ec8 '__gnuc_va_list'
|         |   `-TypedefType 0x5560ca701e30 '__builtin_va_list' sugar
|         |     |-Typedef 0x5560ca5edd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5560ca5edce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5560ca5ad2d0 '__va_list_tag'
|         |         `-CXXRecord 0x5560ca5ad238 '__va_list_tag'
|         `-PointerType 0x5560ca7cfba0 '__va_list_tag *'
|           `-RecordType 0x5560ca5ad2d0 '__va_list_tag'
|             `-CXXRecord 0x5560ca5ad238 '__va_list_tag'
|-EnumDecl 0x5560cabec150 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5560cabec250 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec7b0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec230 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5560cabec210 <col:16> 'int' 1
| |-EnumConstantDecl 0x5560cabec2e0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec7c8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec2c0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5560cabec2a0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5560cabec370 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec7e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec350 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5560cabec330 <col:22> 'int' 4
| |-EnumConstantDecl 0x5560cabec400 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec7f8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec3e0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5560cabec3c0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5560cabec490 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec810 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec470 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5560cabec450 <col:22> 'int' 16
| |-EnumConstantDecl 0x5560cabec520 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec828 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec500 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5560cabec4e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5560cabec5b0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec840 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec590 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5560cabec570 <col:17> 'int' 64
| |-EnumConstantDecl 0x5560cabec640 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec858 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec620 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5560cabec600 <col:14> 'int' 128
| |-EnumConstantDecl 0x5560cabec6d0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5560cabec870 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabec6b0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5560cabec690 <col:16> 'int' 256
| `-EnumConstantDecl 0x5560cabec760 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5560cabec888 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560cabec740 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5560cabec720 <col:12> 'int' 1024
|-CXXMethodDecl 0x5560cabeca98 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5560cabec8b0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5560cabec950 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5560cabecc20 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5560cabecb58 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5560cabeccc8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5560cabecd08 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5560cabecd68 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5560cabecde0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5560cabed1e0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5560cabece58 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5560cabeced8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5560cabecf58 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5560cabecfd0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5560cabed048 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5560cabed0c0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5560cabed308 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5560cabed308
| `-ParmVarDecl 0x5560cabed418 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5560cabef528 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5560cabef528
  `-ParmVarDecl 0x5560cabef638 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab7a0f8 prev 0x5560caad3a78 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560cab7a1f0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5560cab7a280 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5560cab7a3b8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5560cab7a2b8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5560cab7b840 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab7b820 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5560cab7b3b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5560cab7b8d0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5560cab7b890 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5560cab7a2b8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5560cab7b420 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5560cab7b950 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab7b910 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5560cab7b480 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5560cab7b990 <col:54> 'bool' false
| `-CompoundStmt 0x5560cab7ba98 <col:61, line:38:5>
|   `-BinaryOperator 0x5560cab7ba78 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5560cab7ba10 <col:9> 'const Element *' lvalue ->_context 0x5560cab7b358
|     | `-CXXThisExpr 0x5560cab7ba00 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5560cab7ba60 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5560cab7ba40 <col:20> 'int' 0
|-CXXConstructorDecl 0x5560cab7a5c8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab7a478 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5560cab7a4f0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5560cab7b878 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab7b858 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5560cab7b358 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5560cab7baf0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5560cab7bab0 <col:20> 'const Element *' lvalue ParmVar 0x5560cab7a478 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5560cab7b3b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5560cab7bb70 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5560cab7bb30 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5560cab7a4f0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5560cab7b420 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5560cab7bbf0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5560cab7bbb0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5560cab7b480 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5560cab7bc30 <col:73> 'bool' false
| `-CompoundStmt 0x5560cab7bca8 <col:80, line:46:5>
|-CXXMethodDecl 0x5560cab7a6f8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5560cab7bd20 <col:36, line:51:5>
|   `-ReturnStmt 0x5560cab7bd10 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5560cab7bcf8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5560cab7bcc8 <col:16> 'const Element *const' lvalue ->_context 0x5560cab7b358
|         `-CXXThisExpr 0x5560cab7bcb8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5560cab7a7e8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5560cab7bda0 <col:32, line:57:5>
|   `-ReturnStmt 0x5560cab7bd90 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5560cab7bd78 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5560cab7bd48 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5560cab7b3b8
|         `-CXXThisExpr 0x5560cab7bd38 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5560cab7a8a8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5560cab7aa30 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5560cab7a960 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5560cab7ab80 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5560cab7aaf0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5560cab7acd0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5560cab7ac40 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5560cab7aed8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5560cab7ad88 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5560cab7ae00 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5560cab7b268 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5560cab7aff0 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5560cab7b070 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5560cab7b140 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5560cab7b320 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5560cab7b358 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5560cab7b3b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5560cab7b420 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5560cab7b480 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5560cab7b4d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5560cab7b4d0
| `-ParmVarDecl 0x5560cab7b5e8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5560cab7b688 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5560cab7b688
| `-ParmVarDecl 0x5560cab7b798 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5560cabf7f78 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5560caba8220 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5560caba83f8 prev 0x5560caba8220 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5560caba8488 <col:46, col:52> col:46 public
|-TypedefDecl 0x5560caba84b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabaa080 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5560cabaa030 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5560caba8960 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5560caba8860 'type'
|     `-TemplateSpecializationType 0x5560caba87f0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5560caba86d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5560caba86b0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5560caba8690 <col:24> 'unsigned long' 4
|       `-RecordType 0x5560caba87d0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5560caba86f0 'char_array'
|-TypedefDecl 0x5560cabaa138 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5560cabaa100 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5560cabaa0e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5560cabaa080 'type'
|     `-ElaboratedType 0x5560cabaa030 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5560caba8960 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5560caba8860 'type'
|         `-TemplateSpecializationType 0x5560caba87f0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5560caba86d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5560caba86b0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5560caba8690 <col:24> 'unsigned long' 4
|           `-RecordType 0x5560caba87d0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5560caba86f0 'char_array'
|-CXXMethodDecl 0x5560cabaa2b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5560cabaa1c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5560cabaa3a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5560cabaa488 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5560cabaa758 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5560cabaa660 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5560cabaa998 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5560cabaa810 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5560cabaa888 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cabaab68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5560cabaaa58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5560cabaaad0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cabaacc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5560cabaad98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5560cabaafe8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5560cabaae58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5560cabaaed0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cabab248 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5560cabab0b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5560cabab130 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cabab408 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5560cabab318 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cabab5c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5560cabab4d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cabab680 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5560cabab730 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5560cabab968 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5560cabab7e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5560cabab858 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5560cababc08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5560cababb10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5560cababcd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5560cababd20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5560cababd70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5560caba6c28 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5560caba6e38 prev 0x5560caba6c28 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5560caba8190 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5560caba8140 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5560caba8120 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5560caba7fd0 'type'
|     `-SubstTemplateTypeParmType 0x5560caba7df0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5560ca872060 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca872008 'T'
|       `-RecordType 0x5560caba7940 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5560caba7858 'sized_array_memory'
|-FieldDecl 0x5560cababdc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5560cababe10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5560cababe48 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|   |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|   `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cababed8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5560cababea0 'int &'
|   `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|     |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|     `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cababf98 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5560cababf60 'const int &'
|   `-QualType 0x5560caba6ed1 'const int' const
|     `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabac028 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5560cababff0 'int *'
|   `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|     |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|     `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabac0b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5560cabac080 'const int *'
|   `-QualType 0x5560caba6ed1 'const int' const
|     `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabacca0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5560cabacc50 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5560cabacc30 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5560cabacbc0 'type'
|     `-SubstTemplateTypeParmType 0x5560cabac980 'int' sugar
|       |-TemplateTypeParmType 0x5560ca87ce60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca87ce10 'T'
|       `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabacd08 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5560cababf60 'const int &'
|   `-QualType 0x5560caba6ed1 'const int' const
|     `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabacd60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabacdc8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5560cababff0 'int *'
|   `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|     |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|     `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560cabace30 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5560cabac080 'const int *'
|   `-QualType 0x5560caba6ed1 'const int' const
|     `-SubstTemplateTypeParmType 0x5560caba6ed0 'int' sugar
|       |-TemplateTypeParmType 0x5560ca8a9f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5560ca8a9eb8 'T'
|       `-BuiltinType 0x5560ca5ac580 'int'
|-EnumDecl 0x5560cabace88 <line:134:5> col:5
| `-EnumConstantDecl 0x5560cabacf80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5560cabacf60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5560ca8ab8a8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5560ca8ab880 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5560ca8ab860 <col:40> 'int' 1
|-CXXConstructorDecl 0x5560cabad008 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5560cabad258 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cabad0c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5560cabad160 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5560cabad518 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5560cabad400 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5560cabad7d8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5560cabad6c0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5560cabadb20 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5560cabada00 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5560cabb0df0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5560cabadd10 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5560cabb10e0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cabb0f28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5560cabb0fa0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5560cabb1208 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5560cabb12e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cabb1340 <col:30> Inherited
|-CXXMethodDecl 0x5560cabb1388 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5560cabb1438 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cabb1490 <col:30> Inherited
|-CXXMethodDecl 0x5560cabb1558 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5560cabb1608 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cabb1660 <col:30> Inherited
|-CXXMethodDecl 0x5560cabb16a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5560cabb1758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cabb17b0 <col:30> Inherited
|-CXXMethodDecl 0x5560cabb17f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5560cabb18a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cabb1900 <col:30> Inherited
|-CXXMethodDecl 0x5560cabb1948 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5560cabb19f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5560cabb1a50 <col:30> Inherited
|-CXXMethodDecl 0x5560cabb1a78 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5560cabb1b28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5560cabb1bd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5560cabb1d98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cabb1c88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5560cabb1d00 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5560cabb1ee8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5560cabb1e58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cabb2098 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5560cabb1fa0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5560cabb2150 <col:20>
| `-OptimizeNoneAttr 0x5560cabb21a8 <col:30>
|-CXXMethodDecl 0x5560cabb22c8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5560cabb21d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5560cabb2380 <col:20>
| `-OptimizeNoneAttr 0x5560cabb23d8 <col:30>
|-CXXMethodDecl 0x5560cabb2490 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5560cabb2400 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cabb25d8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5560cabb2548 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cabb2708 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5560cabb2838 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5560cabb2908 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5560cabb29d8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5560cabb2b18 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5560cabb2a88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cabb2c60 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5560cabb2bd0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5560cabb2da8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5560cabb2d18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5560cabb2e60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5560cabb2f60 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5560cabb2ed0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5560cabb3018 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5560cabb30d8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5560cabb31d8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5560cabb3358 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5560cabb3298 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5560cabb3b18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5560cabb3410 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5560cabb3a78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5560cabb3978 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5560cabb3bf8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5560cabb3d48 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5560cabb3cb8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5560cabb3e00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5560cabb4048 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5560cabb3ec0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5560cabb3f38 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5560cabb4208 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5560cabb4118 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5560cabb4458 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5560cabb42d0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5560cabb4348 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5560cabb4518 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5560cabb4778 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5560cabb4680 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5560cabb4848 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab99f08 prev 0x5560cab80cb8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5560cab9a000 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5560cab9a0f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5560cabc85f0 <col:16, line:828:9>
|-CXXDestructorDecl 0x5560cab9a1e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5560cabc8600 <col:25, line:830:9>
|-CXXMethodDecl 0x5560cab9a2e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5560cab9a390 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5560cab9a438 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5560cab9a438
| `-ParmVarDecl 0x5560cab9a548 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5560cab9ad08 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5560cab9ad08
  `-ParmVarDecl 0x5560cab9ae18 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cab80ac8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5560cab80c28 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5560cab80cb8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5560cab80d70 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5560cab80e78 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5560cab80da8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5560cabb5e08 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5560cabb5de8 <col:31> 'int' 0
|-CXXConstructorDecl 0x5560cab81198 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab81010 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5560cab81088 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5560cabb5e40 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5560cabb5e20 <col:59> 'int' 0
|-CXXConstructorDecl 0x5560cab81370 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab81260 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5560cab812d8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5560cabb5e78 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5560cabb5e58 <col:55> 'int' 0
|-CXXConstructorDecl 0x5560cab81728 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5560cab81510 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5560cab81588 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5560cab81600 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5560cabb5eb0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5560cabb5e90 <col:31> 'int' 0
|-CXXConstructorDecl 0x5560cab818e8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5560cab81828 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5560cab819e0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5560cab81bc8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5560cab81ad0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5560cab81cb8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5560cabb6260 <col:24, line:291:5>
|   `-ReturnStmt 0x5560cabb6250 <line:290:9, col:79>
|     `-BinaryOperator 0x5560cabb6230 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5560cabb6108 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5560cabb6060 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5560cabb6040 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5560cabb5f38 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5560cabb5f20 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5560cabb5f08 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5560cabb5ed8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5560caba6bc0
|       | |   |       `-CXXThisExpr 0x5560cabb5ec8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5560cabb6028 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5560cabb6010 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5560cabb5fd8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5560cabb5fa8 <col:28, col:35> '<bound member function type>' ->size 0x5560cab6c7a8
|       | |           `-ImplicitCastExpr 0x5560cabb5ff8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5560cabb5f90 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5560cabb5f60 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5560caba6bc0
|       | |                 `-CXXThisExpr 0x5560cabb5f50 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5560cabb60f0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5560cabb60d8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5560cabb60c0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5560cabb6090 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5560cabb4990
|       |         `-CXXThisExpr 0x5560cabb6080 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5560cabb6210 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5560cabb61f8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5560cabb61e0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5560cabb61a0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5560cabb6188 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5560cabb6138 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5560cabb4a40
|         |     |   `-CXXThisExpr 0x5560cabb6128 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5560cabb6168 <col:73> 'int' 0
|         `-IntegerLiteral 0x5560cabb61c0 <col:79> 'int' 0
|-CXXMethodDecl 0x5560cab81d78 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5560cabb6438 <col:32, line:296:5>
|   `-ReturnStmt 0x5560cabb6428 <line:295:9, col:49>
|     `-BinaryOperator 0x5560cabb6408 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5560cabb62e8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5560cabb62d0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5560cabb62b8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5560cabb6288 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5560cabb4990
|       |       `-CXXThisExpr 0x5560cabb6278 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5560cabb63e8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5560cabb63d0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5560cabb63b8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5560cabb6378 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5560cabb6360 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5560cabb6310 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5560cabb4a40
|         |     |   `-CXXThisExpr 0x5560cabb6300 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5560cabb6340 <col:43> 'int' 0
|         `-IntegerLiteral 0x5560cabb6398 <col:49> 'int' 0
|-CXXMethodDecl 0x5560cab81e68 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5560cabb6648 <col:19, line:306:5>
|   |-IfStmt 0x5560cabb6568 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5560cabb64a8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5560cabb6490 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5560cabb6460 <col:13> 'Vector<String> *' lvalue ->_conf 0x5560caba6bc0
|   | |     `-CXXThisExpr 0x5560cabb6450 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5560cabb6548 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5560cabb6518 <col:13, col:20> '<bound member function type>' ->clear 0x5560cab6f1a8
|   |     `-ImplicitCastExpr 0x5560cabb6500 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5560cabb64d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5560caba6bc0
|   |         `-CXXThisExpr 0x5560cabb64c0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5560cabb65f0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5560cabb65c0 <col:9, col:16> '<bound member function type>' .clear 0x5560cabb4518
|   |   `-MemberExpr 0x5560cabb6590 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5560cabb4930
|   |     `-CXXThisExpr 0x5560cabb6580 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5560cabb6638 <line:305:9, col:17>
|     `-UnaryOperator 0x5560cabb6620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560cabb6610 <col:17> 'Args *' this
|-CXXMethodDecl 0x5560cab820e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5560cab81ff0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5560cab82268 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5560cab821a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5560cab825e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5560cab82310 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5560cab82548 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5560cab823b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5560cab82430 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5560cabb6968 <col:67, line:327:5>
|     |-WhileStmt 0x5560cabb6918 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5560cabb6730 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5560cabb66b0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5560caacbf48 0x5560ca915528 0x5560ca915200 0x5560ca905a30 0x5560ca9056e0 0x5560ca904fd0 0x5560ca8d77a0 0x5560ca8647a0
|     | | |-DeclRefExpr 0x5560cabb6670 <col:16> 'Iter' lvalue ParmVar 0x5560cab823b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5560cabb6690 <col:25> 'Iter' lvalue ParmVar 0x5560cab82430 'end' 'Iter'
|     | `-CompoundStmt 0x5560cabb68f8 <col:30, line:325:9>
|     |   |-CallExpr 0x5560cabb6898 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5560cabb6778 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5560cabb6868 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5560cabb67f8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|     |   |   `-DeclRefExpr 0x5560cabb67d8 <col:24> 'Iter' lvalue ParmVar 0x5560cab823b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5560cabb68e0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5560cabb68c0 <col:15> 'Iter' lvalue ParmVar 0x5560cab823b8 'begin' 'Iter'
|     `-ReturnStmt 0x5560cabb6958 <line:326:9, col:17>
|       `-UnaryOperator 0x5560cabb6940 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabb6930 <col:17> 'Args *' this
|-CXXMethodDecl 0x5560cab826f0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5560cab82660 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5560cab82838 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5560cab827a8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5560cab82900 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5560cabb6a48 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5560cabb69e8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5560cabb6998 <col:9> '<bound member function type>' ->reset_from 0x5560cabb4db8
|   | | `-CXXThisExpr 0x5560cabb6988 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5560cabb69c8 <col:20> 'int' 0
|   `-ReturnStmt 0x5560cabb6a38 <line:352:9, col:17>
|     `-UnaryOperator 0x5560cabb6a20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560cabb6a10 <col:17> 'Args *' this
|-VarDecl 0x5560cab829b8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5560cab82a20 <col:38> 'int' 1
|-VarDecl 0x5560cab82ab0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5560cab82b18 <col:39> 'int' 2
|-VarDecl 0x5560cab82ba8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5560cab82c10 <col:39> 'int' 4
|-VarDecl 0x5560cab82ca0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5560cab82d08 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5560cab85fb0 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5560cab82d80 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab85f10 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5560cab82e30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab82ed8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb6ba0 <col:43, line:371:5>
|     `-ReturnStmt 0x5560cabb6b90 <line:370:9, col:34>
|       `-CallExpr 0x5560cabb6b58 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb6a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb6af8 <col:21> 'const char *' lvalue ParmVar 0x5560cab82e30 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabb6b18 <col:30> 'int' 0
|         `-DeclRefExpr 0x5560cabb6b38 <col:33> 'T' lvalue ParmVar 0x5560cab82ed8 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab862e8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5560cab86018 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab86248 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5560cab860d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab86178 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb6cf0 <col:45, line:375:5>
|     `-ReturnStmt 0x5560cabb6ce0 <line:374:9, col:42>
|       `-CallExpr 0x5560cabb6ca8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb6bc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb6c48 <col:21> 'const char *' lvalue ParmVar 0x5560cab860d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb6c68 <col:30> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5560cabb6c88 <col:41> 'T' lvalue ParmVar 0x5560cab86178 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab86618 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5560cab86350 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab86578 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5560cab86400 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab864a8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb6e40 <col:45, line:379:5>
|     `-ReturnStmt 0x5560cabb6e30 <line:378:9, col:43>
|       `-CallExpr 0x5560cabb6df8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb6d18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb6d98 <col:21> 'const char *' lvalue ParmVar 0x5560cab86400 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb6db8 <col:30> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int'
|         `-DeclRefExpr 0x5560cabb6dd8 <col:42> 'T' lvalue ParmVar 0x5560cab864a8 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab86948 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5560cab86680 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5560cab868a8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5560cab86730 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5560cab867d8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5560cabb7040 <col:46, line:383:5>
| |   `-ReturnStmt 0x5560cabb7030 <line:382:9, col:55>
| |     `-CallExpr 0x5560cabb6ff8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5560cabb6e68 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5560cabb6ee8 <col:21> 'const char *' lvalue ParmVar 0x5560cab86730 'keyword' 'const char *'
| |       |-BinaryOperator 0x5560cabb6fb8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5560cabb6f68 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5560cabb6f48 <col:30> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5560cabb6fa0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5560cabb6f80 <col:42> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5560cabb6fd8 <col:54> 'T' lvalue ParmVar 0x5560cab867d8 'x' 'T &'
| `-CXXMethodDecl 0x5560cabf92f8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5560cabf9118 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5560cabf91e8 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x5560cab86d48 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5560cab869b0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab86ca8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5560cab86a60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab86ae0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab86b88 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb7180 <col:54, line:388:5>
|     |-CallExpr 0x5560cabb7108 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabb7058 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5560cabb7098 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5560cabb70a8 <col:30> 'const char *' lvalue ParmVar 0x5560cab86a60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5560cabb70c8 <col:39> 'int' lvalue ParmVar 0x5560cab86ae0 'flags' 'int'
|     | `-DeclRefExpr 0x5560cabb70e8 <col:46> 'T' lvalue ParmVar 0x5560cab86b88 'x' 'T &'
|     `-ReturnStmt 0x5560cabb7170 <line:387:9, col:17>
|       `-UnaryOperator 0x5560cabb7158 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabb7148 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab871f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5560cab86db8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5560cab86e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5560cab87158 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5560cab86ef8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab86f98 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab87038 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5560cabb72f0 <col:74, line:403:5>
|     `-ReturnStmt 0x5560cabb72e0 <line:402:9, col:56>
|       `-CallExpr 0x5560cabb72a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb71b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb7220 <col:28> 'const char *' lvalue ParmVar 0x5560cab86ef8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabb7240 <col:37> 'int' 0
|         |-DeclRefExpr 0x5560cabb7260 <col:40> 'T' lvalue ParmVar 0x5560cab86f98 'x' 'T &'
|         `-DeclRefExpr 0x5560cabb7280 <col:43> 'const V' lvalue ParmVar 0x5560cab87038 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5560cab87668 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5560cab87268 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5560cab872e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5560cab875c8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5560cab873a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab87448 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab874e8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5560cabb7458 <col:76, line:407:5>
|     `-ReturnStmt 0x5560cabb7448 <line:406:9, col:65>
|       `-CallExpr 0x5560cabb7408 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb7318 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb7388 <col:28> 'const char *' lvalue ParmVar 0x5560cab873a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb73a8 <col:37> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5560cabb73c8 <col:49> 'T' lvalue ParmVar 0x5560cab87448 'x' 'T &'
|         `-DeclRefExpr 0x5560cabb73e8 <col:52> 'const V' lvalue ParmVar 0x5560cab874e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5560cab87bb8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5560cab876d8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5560cab87758 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5560cab87b18 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5560cab87818 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab87898 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab87938 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab879d8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5560cabb75c0 <col:85, line:412:5>
|     |-CallExpr 0x5560cabb7540 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabb7470 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5560cabb74b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5560cabb74c0 <col:37> 'const char *' lvalue ParmVar 0x5560cab87818 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5560cabb74e0 <col:46> 'int' lvalue ParmVar 0x5560cab87898 'flags' 'int'
|     | |-DeclRefExpr 0x5560cabb7500 <col:53> 'T' lvalue ParmVar 0x5560cab87938 'x' 'T &'
|     | `-DeclRefExpr 0x5560cabb7520 <col:56> 'const V' lvalue ParmVar 0x5560cab879d8 'default_value' 'const V &'
|     `-ReturnStmt 0x5560cabb75b0 <line:411:9, col:17>
|       `-UnaryOperator 0x5560cabb7598 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabb7588 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab88048 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5560cab87c30 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab87ca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab87fa8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab87d68 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab87de0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab87e88 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb7740 <col:53, line:425:5>
|     `-ReturnStmt 0x5560cabb7730 <line:424:9, col:42>
|       `-CallExpr 0x5560cabb76f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb75f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb7670 <col:21> 'const char *' lvalue ParmVar 0x5560cab87d68 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabb7690 <col:30> 'int' 0
|         |-DeclRefExpr 0x5560cabb76b0 <col:33> 'P' lvalue ParmVar 0x5560cab87de0 'parser' 'P'
|         `-DeclRefExpr 0x5560cabb76d0 <col:41> 'T' lvalue ParmVar 0x5560cab87e88 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab88498 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5560cab880b8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab88138 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab883f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab881f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab88270 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab88318 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb78b8 <col:55, line:429:5>
|     `-ReturnStmt 0x5560cabb78a8 <line:428:9, col:50>
|       `-CallExpr 0x5560cabb7868 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb7768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb77e8 <col:21> 'const char *' lvalue ParmVar 0x5560cab881f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb7808 <col:30> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5560cabb7828 <col:41> 'P' lvalue ParmVar 0x5560cab88270 'parser' 'P'
|         `-DeclRefExpr 0x5560cabb7848 <col:49> 'T' lvalue ParmVar 0x5560cab88318 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab888e8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5560cab88508 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab88588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab88848 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab88648 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab886c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab88768 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb7a30 <col:55, line:433:5>
|     `-ReturnStmt 0x5560cabb7a20 <line:432:9, col:51>
|       `-CallExpr 0x5560cabb79e0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb78e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb7960 <col:21> 'const char *' lvalue ParmVar 0x5560cab88648 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb7980 <col:30> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5560cabb79a0 <col:42> 'P' lvalue ParmVar 0x5560cab886c0 'parser' 'P'
|         `-DeclRefExpr 0x5560cabb79c0 <col:50> 'T' lvalue ParmVar 0x5560cab88768 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab88d38 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5560cab88958 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab889d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5560cab88c98 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5560cab88a98 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5560cab88b10 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5560cab88bb8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5560cabb7c58 <col:56, line:437:5>
| |   `-ReturnStmt 0x5560cabb7c48 <line:436:9, col:63>
| |     `-CallExpr 0x5560cabb7c08 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5560cabb7a58 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5560cabb7ad8 <col:21> 'const char *' lvalue ParmVar 0x5560cab88a98 'keyword' 'const char *'
| |       |-BinaryOperator 0x5560cabb7ba8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5560cabb7b58 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5560cabb7b38 <col:30> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5560cabb7b90 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5560cabb7b70 <col:42> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5560cabb7bc8 <col:54> 'P' lvalue ParmVar 0x5560cab88b10 'parser' 'P'
| |       `-DeclRefExpr 0x5560cabb7be8 <col:62> 'T' lvalue ParmVar 0x5560cab88bb8 'x' 'T &'
| `-CXXMethodDecl 0x5560cabf8b28 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, BandwidthArg, unsigned int &)'
|   |-TemplateArgument type 'BandwidthArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5560cabf8898 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5560cabf8938 <col:40, col:42> col:42 parser 'BandwidthArg':'BandwidthArg'
|   `-ParmVarDecl 0x5560cabf8a08 <col:50, col:53> col:53 x 'unsigned int &'
|-FunctionTemplateDecl 0x5560cab89268 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5560cab88da8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab88e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab891c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5560cab88ee8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab88f68 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab88fe0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab89088 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5560cabb7dc0 <col:64, line:442:5>
|     |-CallExpr 0x5560cabb7d40 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabb7c70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5560cabb7cb0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5560cabb7cc0 <col:30> 'const char *' lvalue ParmVar 0x5560cab88ee8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5560cabb7ce0 <col:39> 'int' lvalue ParmVar 0x5560cab88f68 'flags' 'int'
|     | |-DeclRefExpr 0x5560cabb7d00 <col:46> 'P' lvalue ParmVar 0x5560cab88fe0 'parser' 'P'
|     | `-DeclRefExpr 0x5560cabb7d20 <col:54> 'T' lvalue ParmVar 0x5560cab89088 'x' 'T &'
|     `-ReturnStmt 0x5560cabb7db0 <line:441:9, col:17>
|       `-UnaryOperator 0x5560cabb7d98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabb7d88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab89868 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5560cab892e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab89358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5560cab893d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5560cab897c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5560cab894a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab89518 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab895b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab89688 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5560cabb7f58 <col:84, line:458:5>
|     `-ReturnStmt 0x5560cabb7f48 <line:457:9, col:64>
|       `-CallExpr 0x5560cabb7f00 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb7df0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb7e60 <col:28> 'const char *' lvalue ParmVar 0x5560cab894a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabb7e80 <col:37> 'int' 0
|         |-DeclRefExpr 0x5560cabb7ea0 <col:40> 'P' lvalue ParmVar 0x5560cab89518 'parser' 'P'
|         |-DeclRefExpr 0x5560cabb7ec0 <col:48> 'T' lvalue ParmVar 0x5560cab895b8 'x' 'T &'
|         `-DeclRefExpr 0x5560cabb7ee0 <col:51> 'const V' lvalue ParmVar 0x5560cab89688 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5560cab89de8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5560cab898e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab89958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5560cab899d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5560cab89d48 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5560cab89aa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab89b18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab89bb8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab89c58 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5560cabb80e8 <col:86, line:462:5>
|     `-ReturnStmt 0x5560cabb80d8 <line:461:9, col:73>
|       `-CallExpr 0x5560cabb8090 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb7f80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb7ff0 <col:28> 'const char *' lvalue ParmVar 0x5560cab89aa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb8010 <col:37> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5560cabb8030 <col:49> 'P' lvalue ParmVar 0x5560cab89b18 'parser' 'P'
|         |-DeclRefExpr 0x5560cabb8050 <col:57> 'T' lvalue ParmVar 0x5560cab89bb8 'x' 'T &'
|         `-DeclRefExpr 0x5560cabb8070 <col:60> 'const V' lvalue ParmVar 0x5560cab89c58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5560cab8a448 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5560cab89e60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab89ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5560cab89f58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5560cab8a3a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5560cab8a020 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8a0a0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab8a118 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8a1b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab8a258 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5560cabb8278 <col:95, line:467:5>
|     |-CallExpr 0x5560cabb81f0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabb8100 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5560cabb8140 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5560cabb8150 <col:37> 'const char *' lvalue ParmVar 0x5560cab8a020 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5560cabb8170 <col:46> 'int' lvalue ParmVar 0x5560cab8a0a0 'flags' 'int'
|     | |-DeclRefExpr 0x5560cabb8190 <col:53> 'P' lvalue ParmVar 0x5560cab8a118 'parser' 'P'
|     | |-DeclRefExpr 0x5560cabb81b0 <col:61> 'T' lvalue ParmVar 0x5560cab8a1b8 'x' 'T &'
|     | `-DeclRefExpr 0x5560cabb81d0 <col:64> 'const V' lvalue ParmVar 0x5560cab8a258 'default_value' 'const V &'
|     `-ReturnStmt 0x5560cabb8268 <line:466:9, col:17>
|       `-UnaryOperator 0x5560cabb8250 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabb8240 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab8aa28 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5560cab8a4c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8a548 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5560cab8a5c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5560cab8a988 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5560cab8a690 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8a708 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8a7a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5560cab8a848 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5560cabb8420 <col:63, line:481:5>
|     `-ReturnStmt 0x5560cabb8410 <line:480:9, col:47>
|       `-CallExpr 0x5560cabb83c8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb82a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb8328 <col:21> 'const char *' lvalue ParmVar 0x5560cab8a690 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabb8348 <col:30> 'int' 0
|         |-DeclRefExpr 0x5560cabb8368 <col:33> 'P' lvalue ParmVar 0x5560cab8a708 'parser' 'P'
|         |-DeclRefExpr 0x5560cabb8388 <col:41> 'T1' lvalue ParmVar 0x5560cab8a7a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5560cabb83a8 <col:45> 'T2' lvalue ParmVar 0x5560cab8a848 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5560cab8afa8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5560cab8aaa0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8ab18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5560cab8ab98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5560cab8af08 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5560cab8ac60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8acd8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8ad78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5560cab8ae18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5560cabb85c0 <col:65, line:485:5>
|     `-ReturnStmt 0x5560cabb85b0 <line:484:9, col:55>
|       `-CallExpr 0x5560cabb8568 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb8448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb84c8 <col:21> 'const char *' lvalue ParmVar 0x5560cab8ac60 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb84e8 <col:30> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5560cabb8508 <col:41> 'P' lvalue ParmVar 0x5560cab8acd8 'parser' 'P'
|         |-DeclRefExpr 0x5560cabb8528 <col:49> 'T1' lvalue ParmVar 0x5560cab8ad78 'x1' 'T1 &'
|         `-DeclRefExpr 0x5560cabb8548 <col:53> 'T2' lvalue ParmVar 0x5560cab8ae18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5560cab8b528 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5560cab8b020 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8b098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5560cab8b118 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5560cab8b488 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5560cab8b1e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8b258 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8b2f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5560cab8b398 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5560cabb8760 <col:65, line:489:5>
|     `-ReturnStmt 0x5560cabb8750 <line:488:9, col:56>
|       `-CallExpr 0x5560cabb8708 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb85e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb8668 <col:21> 'const char *' lvalue ParmVar 0x5560cab8b1e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb8688 <col:30> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5560cabb86a8 <col:42> 'P' lvalue ParmVar 0x5560cab8b258 'parser' 'P'
|         |-DeclRefExpr 0x5560cabb86c8 <col:50> 'T1' lvalue ParmVar 0x5560cab8b2f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5560cabb86e8 <col:54> 'T2' lvalue ParmVar 0x5560cab8b398 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5560cab8baa8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5560cab8b5a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8b618 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5560cab8b698 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5560cab8ba08 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5560cab8b760 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8b7d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8b878 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5560cab8b918 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5560cabb89b0 <col:66, line:493:5>
|     `-ReturnStmt 0x5560cabb89a0 <line:492:9, col:68>
|       `-CallExpr 0x5560cabb8958 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb8788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb8808 <col:21> 'const char *' lvalue ParmVar 0x5560cab8b760 'keyword' 'const char *'
|         |-BinaryOperator 0x5560cabb88d8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5560cabb8888 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5560cabb8868 <col:30> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5560cabb88c0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5560cabb88a0 <col:42> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5560cabb88f8 <col:54> 'P' lvalue ParmVar 0x5560cab8b7d8 'parser' 'P'
|         |-DeclRefExpr 0x5560cabb8918 <col:62> 'T1' lvalue ParmVar 0x5560cab8b878 'x1' 'T1 &'
|         `-DeclRefExpr 0x5560cabb8938 <col:66> 'T2' lvalue ParmVar 0x5560cab8b918 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5560cab8c108 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5560cab8bb20 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8bb98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5560cab8bc18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5560cab8c068 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5560cab8bce0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8bd60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab8bdd8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8be78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5560cab8bf18 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5560cabb8b40 <col:74, line:498:5>
|     |-CallExpr 0x5560cabb8ab8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabb89c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5560cabb8a08 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5560cabb8a18 <col:30> 'const char *' lvalue ParmVar 0x5560cab8bce0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5560cabb8a38 <col:39> 'int' lvalue ParmVar 0x5560cab8bd60 'flags' 'int'
|     | |-DeclRefExpr 0x5560cabb8a58 <col:46> 'P' lvalue ParmVar 0x5560cab8bdd8 'parser' 'P'
|     | |-DeclRefExpr 0x5560cabb8a78 <col:54> 'T1' lvalue ParmVar 0x5560cab8be78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5560cabb8a98 <col:58> 'T2' lvalue ParmVar 0x5560cab8bf18 'x2' 'T2 &'
|     `-ReturnStmt 0x5560cabb8b30 <line:497:9, col:17>
|       `-UnaryOperator 0x5560cabb8b18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabb8b08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab8c468 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5560cab8c188 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab8c3c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5560cab8c240 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8c2b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5560cabb8c88 <col:52, line:509:5>
|     `-ReturnStmt 0x5560cabb8c78 <line:508:9, col:44>
|       `-CallExpr 0x5560cabb8c40 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb8b70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb8be0 <col:26> 'const char *' lvalue ParmVar 0x5560cab8c240 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabb8c00 <col:35> 'int' 0
|         `-DeclRefExpr 0x5560cabb8c20 <col:38> 'P' lvalue ParmVar 0x5560cab8c2b8 'parser' 'P'
|-FunctionTemplateDecl 0x5560cab8c768 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5560cab8c4d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab8c6c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5560cab8c580 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8c5f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5560cabb8dc8 <col:54, line:513:5>
|     `-ReturnStmt 0x5560cabb8db8 <line:512:9, col:52>
|       `-CallExpr 0x5560cabb8d80 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabb8cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabb8d20 <col:26> 'const char *' lvalue ParmVar 0x5560cab8c580 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabb8d40 <col:35> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5560cabb8d60 <col:46> 'P' lvalue ParmVar 0x5560cab8c5f8 'parser' 'P'
|-FunctionTemplateDecl 0x5560cab8ca68 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5560cab8c7d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab8c9c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5560cab8c880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8c8f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5560cabbaac8 <col:54, line:517:5>
|     `-ReturnStmt 0x5560cabbaab8 <line:516:9, col:53>
|       `-CallExpr 0x5560cabbaa80 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabba9b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbaa20 <col:26> 'const char *' lvalue ParmVar 0x5560cab8c880 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbaa40 <col:35> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int'
|         `-DeclRefExpr 0x5560cabbaa60 <col:47> 'P' lvalue ParmVar 0x5560cab8c8f8 'parser' 'P'
|-FunctionTemplateDecl 0x5560cab8cd68 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5560cab8cad0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab8ccc8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5560cab8cb80 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8cbf8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5560cabbacb8 <col:55, line:521:5>
|     `-ReturnStmt 0x5560cabbaca8 <line:520:9, col:65>
|       `-CallExpr 0x5560cabbac70 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbaaf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbab60 <col:26> 'const char *' lvalue ParmVar 0x5560cab8cb80 'keyword' 'const char *'
|         |-BinaryOperator 0x5560cabbac30 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5560cabbabe0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5560cabbabc0 <col:35> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5560cabbac18 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5560cabbabf8 <col:47> 'const int' lvalue Var 0x5560cab82ab0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5560cabbac50 <col:59> 'P' lvalue ParmVar 0x5560cab8cbf8 'parser' 'P'
|-FunctionTemplateDecl 0x5560cab8d138 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5560cab8cdd0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab8d098 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5560cab8ce80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8cf00 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab8cf78 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5560cabbadf8 <col:63, line:526:5>
|     |-CallExpr 0x5560cabbad80 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabbacd0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5560cabbad10 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5560cabbad20 <col:35> 'const char *' lvalue ParmVar 0x5560cab8ce80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5560cabbad40 <col:44> 'int' lvalue ParmVar 0x5560cab8cf00 'flags' 'int'
|     | `-DeclRefExpr 0x5560cabbad60 <col:51> 'P' lvalue ParmVar 0x5560cab8cf78 'parser' 'P'
|     `-ReturnStmt 0x5560cabbade8 <line:525:9, col:17>
|       `-UnaryOperator 0x5560cabbadd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabbadc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab8d588 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5560cab8d1a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8d228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab8d4e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab8d2e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8d360 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8d408 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbaf50 <col:58, line:541:5>
|     `-ReturnStmt 0x5560cabbaf40 <line:540:9, col:39>
|       `-CallExpr 0x5560cabbaf08 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbae28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbaea8 <col:21> 'const char *' lvalue ParmVar 0x5560cab8d2e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbaec8 <col:30> 'P' lvalue ParmVar 0x5560cab8d360 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbaee8 <col:38> 'T' lvalue ParmVar 0x5560cab8d408 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab8d9d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5560cab8d5f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8d678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab8d938 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab8d738 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8d7b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8d858 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbb088 <col:60, line:545:5>
|     `-ReturnStmt 0x5560cabbb078 <line:544:9, col:41>
|       `-CallExpr 0x5560cabbb040 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbaf78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbafe0 <col:23> 'const char *' lvalue ParmVar 0x5560cab8d738 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbb000 <col:32> 'P' lvalue ParmVar 0x5560cab8d7b0 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbb020 <col:40> 'T' lvalue ParmVar 0x5560cab8d858 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab8de28 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5560cab8da48 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab8dac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab8dd88 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab8db88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab8dc00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab8dca8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbb1c0 <col:60, line:549:5>
|     `-ReturnStmt 0x5560cabbb1b0 <line:548:9, col:41>
|       `-CallExpr 0x5560cabbb178 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbb0b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbb118 <col:23> 'const char *' lvalue ParmVar 0x5560cab8db88 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbb138 <col:32> 'P' lvalue ParmVar 0x5560cab8dc00 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbb158 <col:40> 'T' lvalue ParmVar 0x5560cab8dca8 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab93328 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5560cab8de98 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab92fc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab93288 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab93088 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab93100 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab931a8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbb2f8 <col:61, line:553:5>
|     `-ReturnStmt 0x5560cabbb2e8 <line:552:9, col:42>
|       `-CallExpr 0x5560cabbb2b0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbb1e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbb250 <col:24> 'const char *' lvalue ParmVar 0x5560cab93088 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbb270 <col:33> 'P' lvalue ParmVar 0x5560cab93100 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbb290 <col:41> 'T' lvalue ParmVar 0x5560cab931a8 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab93808 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5560cab93398 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab93418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab93768 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5560cab934d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab93558 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab935d0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab93678 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbb470 <col:69, line:557:5>
|     `-ReturnStmt 0x5560cabbb460 <line:556:9, col:46>
|       `-CallExpr 0x5560cabbb420 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbb320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbb3a0 <col:21> 'const char *' lvalue ParmVar 0x5560cab934d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbb3c0 <col:30> 'int' lvalue ParmVar 0x5560cab93558 'flags' 'int'
|         |-DeclRefExpr 0x5560cabbb3e0 <col:37> 'P' lvalue ParmVar 0x5560cab935d0 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbb400 <col:45> 'T' lvalue ParmVar 0x5560cab93678 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab93b18 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5560cab93880 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab93a78 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5560cab93930 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab939a8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5560cabbb5b0 <col:56, line:571:5>
|     `-ReturnStmt 0x5560cabbb5a0 <line:570:9, col:48>
|       `-CallExpr 0x5560cabbb568 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbb498 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbb508 <col:30> 'const char *' lvalue ParmVar 0x5560cab93930 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabbb528 <col:39> 'int' 0
|         `-DeclRefExpr 0x5560cabbb548 <col:42> 'P' lvalue ParmVar 0x5560cab939a8 'parser' 'P'
|-FunctionTemplateDecl 0x5560cab93ea8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5560cab93b80 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab93e08 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5560cab93c30 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab93cb0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab93d28 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5560cabbb780 <col:67, line:576:5>
|     |-CallExpr 0x5560cabbb708 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabbb5c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5560cabbb608 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5560cabbb618 <col:39> 'const char *' lvalue ParmVar 0x5560cab93c30 'keyword' 'const char *'
|     | |-BinaryOperator 0x5560cabbb6c8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5560cabbb678 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5560cabbb638 <col:48> 'int' lvalue ParmVar 0x5560cab93cb0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5560cabbb6b0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5560cabbb690 <col:56> 'const int' lvalue Var 0x5560cab82ca0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5560cabbb6e8 <col:68> 'P' lvalue ParmVar 0x5560cab93d28 'parser' 'P'
|     `-ReturnStmt 0x5560cabbb770 <line:575:9, col:17>
|       `-UnaryOperator 0x5560cabbb758 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabbb748 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab942f8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5560cab93f18 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab93f98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab94258 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5560cab94058 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab940d0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab94178 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbb8f0 <col:62, line:592:5>
|     `-ReturnStmt 0x5560cabbb8e0 <line:591:9, col:51>
|       `-CallExpr 0x5560cabbb8a0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbb7b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbb820 <col:30> 'const char *' lvalue ParmVar 0x5560cab94058 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabbb840 <col:39> 'int' 0
|         |-DeclRefExpr 0x5560cabbb860 <col:42> 'P' lvalue ParmVar 0x5560cab940d0 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbb880 <col:50> 'T' lvalue ParmVar 0x5560cab94178 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab947d8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5560cab94368 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab943e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab94738 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5560cab944a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab94528 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab945a0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab94648 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbbae8 <col:73, line:597:5>
|     |-CallExpr 0x5560cabbba68 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabbb908 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5560cabbb948 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5560cabbb958 <col:39> 'const char *' lvalue ParmVar 0x5560cab944a8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5560cabbba08 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5560cabbb9b8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5560cabbb978 <col:48> 'int' lvalue ParmVar 0x5560cab94528 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5560cabbb9f0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5560cabbb9d0 <col:56> 'const int' lvalue Var 0x5560cab82ca0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5560cabbba28 <col:68> 'P' lvalue ParmVar 0x5560cab945a0 'parser' 'P'
|     | `-DeclRefExpr 0x5560cabbba48 <col:76> 'T' lvalue ParmVar 0x5560cab94648 'x' 'T &'
|     `-ReturnStmt 0x5560cabbbad8 <line:596:9, col:17>
|       `-UnaryOperator 0x5560cabbbac0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabbbab0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab94d88 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5560cab94850 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab948c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab94ce8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5560cab94988 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab94a00 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab94bc0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5560cabbbc58 <col:65, line:614:5>
|     `-ReturnStmt 0x5560cabbbc48 <line:613:9, col:46>
|       `-CallExpr 0x5560cabbbc08 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbbb18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbbb88 <col:25> 'const char *' lvalue ParmVar 0x5560cab94988 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabbbba8 <col:34> 'int' 0
|         |-DeclRefExpr 0x5560cabbbbc8 <col:37> 'P' lvalue ParmVar 0x5560cab94a00 'parser' 'P'
|         `-DeclRefExpr 0x5560cabbbbe8 <col:45> 'Vector<T>' lvalue ParmVar 0x5560cab94bc0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5560cab951b8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5560cab94df8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab95118 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5560cab94eb0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab95000 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5560cabbbe70 <col:55, line:618:5>
|     `-ReturnStmt 0x5560cabbbe60 <line:617:9, col:55>
|       `-CallExpr 0x5560cabbbe20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbbc80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbbcf0 <col:25> 'const char *' lvalue ParmVar 0x5560cab94eb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5560cabbbd10 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5560cabbbde0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5560cabbbe00 <col:54> 'Vector<T>' lvalue ParmVar 0x5560cab95000 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5560cab95788 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5560cab95220 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab95298 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab956e8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5560cab95358 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab953d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab95450 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab955a0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5560cabbc068 <col:76, line:623:5>
|     |-CallExpr 0x5560cabbbfe8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5560cabbbe88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5560cabbbec8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5560cabbbed8 <col:34> 'const char *' lvalue ParmVar 0x5560cab95358 'keyword' 'const char *'
|     | |-BinaryOperator 0x5560cabbbf88 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5560cabbbf38 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5560cabbbef8 <col:43> 'int' lvalue ParmVar 0x5560cab953d8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5560cabbbf70 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5560cabbbf50 <col:51> 'const int' lvalue Var 0x5560cab82ca0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5560cabbbfa8 <col:63> 'P' lvalue ParmVar 0x5560cab95450 'parser' 'P'
|     | `-DeclRefExpr 0x5560cabbbfc8 <col:71> 'Vector<T>' lvalue ParmVar 0x5560cab955a0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5560cabbc058 <line:622:9, col:17>
|       `-UnaryOperator 0x5560cabbc040 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabbc030 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab95cc8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5560cab95800 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab95878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab95c28 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5560cab95938 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab959b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab95b00 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5560cabbc2d0 <col:66, line:627:5>
|     `-ReturnStmt 0x5560cabbc2c0 <line:626:9, col:59>
|       `-CallExpr 0x5560cabbc280 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5560cabbc098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5560cabbc108 <col:25> 'const char *' lvalue ParmVar 0x5560cab95938 'keyword' 'const char *'
|         |-DeclRefExpr 0x5560cabbc128 <col:34> 'int' lvalue ParmVar 0x5560cab959b8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5560cabbc240 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5560cabbc260 <col:58> 'Vector<T>' lvalue ParmVar 0x5560cab95b00 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5560cab95d58 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5560cabbc350 <col:25, line:633:5>
|   `-ReturnStmt 0x5560cabbc340 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5560cabbc328 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5560cabbc2f8 <col:16> 'const bool' lvalue ->_status 0x5560caba6a28
|         `-CXXThisExpr 0x5560cabbc2e8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5560cab95ed8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5560cab95e10 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5560cabbc438 <col:27, line:639:5>
|   |-BinaryOperator 0x5560cabbc3e0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5560cabbc368 <col:9> 'bool' lvalue ParmVar 0x5560cab95e10 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5560cabbc3c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5560cabbc398 <col:13> 'bool' lvalue ->_status 0x5560caba6a28
|   |     `-CXXThisExpr 0x5560cabbc388 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5560cabbc428 <line:638:9, col:17>
|     `-UnaryOperator 0x5560cabbc410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560cabbc400 <col:17> 'Args *' this
|-CXXMethodDecl 0x5560cab96058 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5560cab95f98 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5560cabbc528 <col:39, line:644:5>
|   |-BinaryOperator 0x5560cabbc4d0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5560cabbc458 <col:9> 'bool' lvalue ParmVar 0x5560cab95f98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5560cabbc4b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5560cabbc488 <col:13> 'const bool' lvalue ->_status 0x5560caba6a28
|   |     `-CXXThisExpr 0x5560cabbc478 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5560cabbc518 <line:643:9, col:17>
|     `-UnaryOperator 0x5560cabbc500 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560cabbc4f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5560cab96120 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5560cabbc5d0 <col:30, line:651:5>
|   `-ReturnStmt 0x5560cabbc5c0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5560cabbc5a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5560cabbc578 <col:16> 'bool' lvalue ->_read_status 0x5560cab7b480
|         `-ImplicitCastExpr 0x5560cabbc558 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5560cabbc548 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5560cab96268 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5560cab961d8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5560cabbc6d8 <col:32, line:658:5>
|   |-BinaryOperator 0x5560cabbc680 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5560cabbc5e8 <col:9> 'bool' lvalue ParmVar 0x5560cab961d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5560cabbc668 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5560cabbc638 <col:13> 'bool' lvalue ->_read_status 0x5560cab7b480
|   |     `-ImplicitCastExpr 0x5560cabbc618 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5560cabbc608 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5560cabbc6c8 <line:657:9, col:17>
|     `-UnaryOperator 0x5560cabbc6b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560cabbc6a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5560cab963b8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5560cab96328 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5560cabbc7e8 <col:44, line:663:5>
|   |-BinaryOperator 0x5560cabbc790 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5560cabbc6f8 <col:9> 'bool' lvalue ParmVar 0x5560cab96328 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5560cabbc778 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5560cabbc748 <col:13> 'bool' lvalue ->_read_status 0x5560cab7b480
|   |     `-ImplicitCastExpr 0x5560cabbc728 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5560cabbc718 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5560cabbc7d8 <line:662:9, col:17>
|     `-UnaryOperator 0x5560cabbc7c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560cabbc7b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5560cab96480 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5560cab96548 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5560cab96610 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5560cab966d8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5560cab969e8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5560cab96778 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab96948 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5560cab96858 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbcba0 <col:19, line:706:5>
|     `-IfStmt 0x5560cabbcb78 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5560cabbc8e8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5560cabbcaa8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5560cabbca78 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5560cabbca38 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5560cabbc940 <col:42> '<bound member function type>' ->simple_slot 0x5560cabb5a70
|       |     | `-CXXThisExpr 0x5560cabbc930 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5560cabbc9d8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5560cabbc990 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5560ca919fc8
|       |     | `-DeclRefExpr 0x5560cabbc970 <col:55> 'T' lvalue ParmVar 0x5560cab96858 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5560cabbca18 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5560cabbcb68 <line:705:13, col:34>
|         `-CallExpr 0x5560cabbcb40 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5560cabbcac8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5560cabbcb20 <col:33> 'T' lvalue ParmVar 0x5560cab96858 'x' 'T &'
|-FunctionTemplateDecl 0x5560cab96cb8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5560cab96a48 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab96c18 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5560cab96b28 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5560cabbcf80 <col:31, line:717:5>
|     |-DeclStmt 0x5560cabbcce0 <line:713:9, col:23>
|     | `-VarDecl 0x5560cabbcbc8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5560cabbccb8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5560cabbcc40 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5560cabbcc98 <col:21> 'T' lvalue ParmVar 0x5560cab96b28 'x' 'T &'
|     |-IfStmt 0x5560cabbcf30 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5560cabbcdd8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5560cabbcf10 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5560cabbceb0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5560cabbce40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|     |   | `-DeclRefExpr 0x5560cabbce20 <col:14> 'T *' lvalue Var 0x5560cabbcbc8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5560cabbcef0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5560cabbcf68 <line:716:9, col:16>
|       `-DeclRefExpr 0x5560cabbcf48 <col:16> 'T *' lvalue Var 0x5560cabbcbc8 's' 'T *'
|-FunctionTemplateDecl 0x5560cab970c8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5560cab96d18 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5560cab96d98 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5560cab97028 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5560cab96e78 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5560cab96f18 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5560cabbd290 <col:37, line:726:5>
|     |-IfStmt 0x5560cabbd220 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5560cabbd240 <line:723:13, col:26>
|     | | `-VarDecl 0x5560cabbcfe8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5560cabbd0d8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5560cabbd060 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5560cabbd0b8 <col:25> 'T' lvalue ParmVar 0x5560cab96e78 'x' 'T &'
|     | |-DeclRefExpr 0x5560cabbd100 <col:16> 'T *' lvalue Var 0x5560cabbcfe8 's' 'T *'
|     | `-BinaryOperator 0x5560cabbd200 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5560cabbd1b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5560cabbd140 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|     |   | `-DeclRefExpr 0x5560cabbd120 <col:14> 'T *' lvalue Var 0x5560cabbcfe8 's' 'T *'
|     |   `-DeclRefExpr 0x5560cabbd1e0 <col:18> 'const V' lvalue ParmVar 0x5560cab96f18 'value' 'const V &'
|     `-ReturnStmt 0x5560cabbd280 <line:725:9, col:17>
|       `-UnaryOperator 0x5560cabbd268 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560cabbd258 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5560cab974c8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5560cab97130 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5560cab97428 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5560cab971e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab97260 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab97308 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5560cabbe0b0 <col:65, line:737:5>
|     |-DeclStmt 0x5560cabbd328 <line:732:9, col:26>
|     | `-VarDecl 0x5560cabbd2c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5560cabbe078 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5560cabbe098 <line:733:13, col:58>
|       | `-VarDecl 0x5560cabbd350 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5560cabbd530 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5560cabbd500 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5560cabbd4e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5560cabbd4c8 <col:26, col:58> 'String' (CXXTemporary 0x5560cabbd4c8)
|       |           `-CXXMemberCallExpr 0x5560cabbd458 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5560cabbd3c8 <col:26> '<bound member function type>' ->find 0x5560cabb5088
|       |             | `-CXXThisExpr 0x5560cabbd3b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5560cabbd490 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabbd3f8 <col:31> 'const char *' lvalue ParmVar 0x5560cab971e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5560cabbd4a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabbd418 <col:40> 'int' lvalue ParmVar 0x5560cab97260 'flags' 'int'
|       |             `-DeclRefExpr 0x5560cabbd438 <col:47> 'Args::Slot *' lvalue Var 0x5560cabbd2c0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5560cabbd5e8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5560cabbd5d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5560cabbd5b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5560cabbd580 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |       `-ImplicitCastExpr 0x5560cabbd568 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5560cabbd548 <col:20> 'String' lvalue Var 0x5560cabbd350 'str' 'String'
|       `-CompoundStmt 0x5560cabbe058 <col:61, line:736:9>
|         |-DeclStmt 0x5560cabbdaa0 <line:734:13, col:76>
|         | `-VarDecl 0x5560cabbd638 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5560cabbda70 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5560cabbd9e0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5560cabbda28 <col:60> 'T' lvalue ParmVar 0x5560cab97308 'variable' 'T &'
|         |     `-UnaryOperator 0x5560cabbda58 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5560cabbda48 <col:71> 'Args *' this
|         `-CallExpr 0x5560cabbe028 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5560cabbdac8 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|           | `-CXXThisExpr 0x5560cabbdab8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5560cabbdfe8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5560cabbdaf8 <col:23> 'T *' lvalue Var 0x5560cabbd638 's' 'T *'
|           | `-CallExpr 0x5560cabbdfa8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5560cabbdd80 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5560cabbde80 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5560cabbdea0 <col:86> 'String' lvalue Var 0x5560cabbd350 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5560cabbdf50 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5560cabbdee0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|           |   | `-DeclRefExpr 0x5560cabbdec0 <col:92> 'T *' lvalue Var 0x5560cabbd638 's' 'T *'
|           |   `-UnaryOperator 0x5560cabbdf90 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5560cabbdf80 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5560cabbe008 <col:103> 'Args::Slot *' lvalue Var 0x5560cabbd2c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5560cab97a18 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5560cab97538 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5560cab975b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5560cab97978 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5560cab97678 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab976f8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab97798 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5560cab97838 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5560cabbef50 <col:88, line:745:5>
|     |-DeclStmt 0x5560cabbe148 <line:741:9, col:26>
|     | `-VarDecl 0x5560cabbe0e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5560cabbe368 <line:742:9, col:55>
|     | `-VarDecl 0x5560cabbe170 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5560cabbe350 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5560cabbe320 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5560cabbe308 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5560cabbe2e8 <col:22, col:54> 'String' (CXXTemporary 0x5560cabbe2e8)
|     |           `-CXXMemberCallExpr 0x5560cabbe278 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5560cabbe1e8 <col:22> '<bound member function type>' ->find 0x5560cabb5088
|     |             | `-CXXThisExpr 0x5560cabbe1d8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5560cabbe2b0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5560cabbe218 <col:27> 'const char *' lvalue ParmVar 0x5560cab97678 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5560cabbe2c8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5560cabbe238 <col:36> 'int' lvalue ParmVar 0x5560cab976f8 'flags' 'int'
|     |             `-DeclRefExpr 0x5560cabbe258 <col:43> 'Args::Slot *' lvalue Var 0x5560cabbe0e0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5560cabbe740 <line:743:9, col:72>
|     | `-VarDecl 0x5560cabbe3b8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5560cabbe710 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5560cabbe680 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5560cabbe6c8 <col:56> 'T' lvalue ParmVar 0x5560cab97798 'variable' 'T &'
|     |     `-UnaryOperator 0x5560cabbe6f8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5560cabbe6e8 <col:67> 'Args *' this
|     `-CallExpr 0x5560cabbef20 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5560cabbe768 <col:9> '<bound member function type>' ->postparse 0x5560cabb5298
|       | `-CXXThisExpr 0x5560cabbe758 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5560cabbeee0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5560cabbe798 <col:19> 'T *' lvalue Var 0x5560cabbe3b8 's' 'T *'
|       | `-ParenExpr 0x5560cabbeec0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5560cabbee90 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5560cabbee78 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5560cabbee60 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5560cabbee40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5560cabbee10 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |     |       `-ImplicitCastExpr 0x5560cabbedf8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5560cabbe7b8 <col:25> 'String' lvalue Var 0x5560cabbe170 'str' 'String'
|       |     |-CallExpr 0x5560cabbec68 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5560cabbea40 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5560cabbeb40 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5560cabbeb60 <col:89> 'String' lvalue Var 0x5560cabbe170 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5560cabbec10 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5560cabbeba0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|       |     | | `-DeclRefExpr 0x5560cabbeb80 <col:95> 'T *' lvalue Var 0x5560cabbe3b8 's' 'T *'
|       |     | `-UnaryOperator 0x5560cabbec50 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5560cabbec40 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5560cabbedd8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5560cabbedb8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5560cabbed88 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5560cabbed38 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5560cabbecc8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|       |         | | `-DeclRefExpr 0x5560cabbeca8 <col:109> 'T *' lvalue Var 0x5560cabbe3b8 's' 'T *'
|       |         | `-DeclRefExpr 0x5560cabbed68 <col:113> 'const V' lvalue ParmVar 0x5560cab97838 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5560cabbeda8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5560cabbef00 <col:128> 'Args::Slot *' lvalue Var 0x5560cabbe0e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5560cab97f48 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5560cab97a90 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab97b08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab97ea8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5560cab97bc8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab97c48 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab97cc0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab97d68 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5560cabbfb48 <col:75, line:754:5>
|     |-DeclStmt 0x5560cabbeff8 <line:749:9, col:26>
|     | `-VarDecl 0x5560cabbef90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5560cabbfb10 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5560cabbfb30 <line:750:13, col:58>
|       | `-VarDecl 0x5560cabbf020 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5560cabbf200 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5560cabbf1d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5560cabbf1b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5560cabbf198 <col:26, col:58> 'String' (CXXTemporary 0x5560cabbf198)
|       |           `-CXXMemberCallExpr 0x5560cabbf128 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5560cabbf098 <col:26> '<bound member function type>' ->find 0x5560cabb5088
|       |             | `-CXXThisExpr 0x5560cabbf088 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5560cabbf160 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabbf0c8 <col:31> 'const char *' lvalue ParmVar 0x5560cab97bc8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5560cabbf178 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabbf0e8 <col:40> 'int' lvalue ParmVar 0x5560cab97c48 'flags' 'int'
|       |             `-DeclRefExpr 0x5560cabbf108 <col:47> 'Args::Slot *' lvalue Var 0x5560cabbef90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5560cabbf2b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5560cabbf2a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5560cabbf280 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5560cabbf250 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |       `-ImplicitCastExpr 0x5560cabbf238 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5560cabbf218 <col:20> 'String' lvalue Var 0x5560cabbf020 'str' 'String'
|       `-CompoundStmt 0x5560cabbfaf0 <col:61, line:753:9>
|         |-DeclStmt 0x5560cabbf690 <line:751:13, col:63>
|         | `-VarDecl 0x5560cabbf308 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5560cabbf660 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5560cabbf5d0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5560cabbf618 <col:47> 'T' lvalue ParmVar 0x5560cab97d68 'variable' 'T &'
|         |     `-UnaryOperator 0x5560cabbf648 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5560cabbf638 <col:58> 'Args *' this
|         `-CallExpr 0x5560cabbfac0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5560cabbf6b8 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|           | `-CXXThisExpr 0x5560cabbf6a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5560cabbfa80 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5560cabbf6e8 <col:23> 'T *' lvalue Var 0x5560cabbf308 's' 'T *'
|           | `-CallExpr 0x5560cabbfa40 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5560cabbf8d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5560cabbf918 <col:56> 'P' lvalue ParmVar 0x5560cab97cc0 'parser' 'P'
|           |   |-DeclRefExpr 0x5560cabbf938 <col:64> 'String' lvalue Var 0x5560cabbf020 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5560cabbf9e8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5560cabbf978 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|           |   | `-DeclRefExpr 0x5560cabbf958 <col:70> 'T *' lvalue Var 0x5560cabbf308 's' 'T *'
|           |   `-UnaryOperator 0x5560cabbfa28 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5560cabbfa18 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5560cabbfaa0 <col:81> 'Args::Slot *' lvalue Var 0x5560cabbef90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5560cab985a8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5560cab97fc0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5560cab98038 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5560cab980b8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5560cab98508 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5560cab98180 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab98200 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab98278 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab98318 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5560cab983b8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5560cabc08d8 <col:98, line:762:5>
|     |-DeclStmt 0x5560cabbfbe0 <line:758:9, col:26>
|     | `-VarDecl 0x5560cabbfb78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5560cabbfe00 <line:759:9, col:55>
|     | `-VarDecl 0x5560cabbfc08 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5560cabbfde8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5560cabbfdb8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5560cabbfda0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5560cabbfd80 <col:22, col:54> 'String' (CXXTemporary 0x5560cabbfd80)
|     |           `-CXXMemberCallExpr 0x5560cabbfd10 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5560cabbfc80 <col:22> '<bound member function type>' ->find 0x5560cabb5088
|     |             | `-CXXThisExpr 0x5560cabbfc70 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5560cabbfd48 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5560cabbfcb0 <col:27> 'const char *' lvalue ParmVar 0x5560cab98180 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5560cabbfd60 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5560cabbfcd0 <col:36> 'int' lvalue ParmVar 0x5560cab98200 'flags' 'int'
|     |             `-DeclRefExpr 0x5560cabbfcf0 <col:43> 'Args::Slot *' lvalue Var 0x5560cabbfb78 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5560cabc0220 <line:760:9, col:59>
|     | `-VarDecl 0x5560cabbfe58 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5560cabc01f0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5560cabc0160 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5560cabc01a8 <col:43> 'T' lvalue ParmVar 0x5560cab98318 'variable' 'T &'
|     |     `-UnaryOperator 0x5560cabc01d8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5560cabc01c8 <col:54> 'Args *' this
|     `-CallExpr 0x5560cabc08a8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5560cabc0248 <col:9> '<bound member function type>' ->postparse 0x5560cabb5298
|       | `-CXXThisExpr 0x5560cabc0238 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5560cabc0868 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5560cabc0278 <col:19> 'T *' lvalue Var 0x5560cabbfe58 's' 'T *'
|       | `-ParenExpr 0x5560cabc0848 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5560cabc0818 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5560cabc0800 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5560cabc07e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5560cabc07c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5560cabc0798 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |     |       `-ImplicitCastExpr 0x5560cabc0780 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5560cabc0298 <col:25> 'String' lvalue Var 0x5560cabbfc08 'str' 'String'
|       |     |-CallExpr 0x5560cabc05f0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5560cabc0480 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5560cabc04c8 <col:59> 'P' lvalue ParmVar 0x5560cab98278 'parser' 'P'
|       |     | |-DeclRefExpr 0x5560cabc04e8 <col:67> 'String' lvalue Var 0x5560cabbfc08 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5560cabc0598 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5560cabc0528 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|       |     | | `-DeclRefExpr 0x5560cabc0508 <col:73> 'T *' lvalue Var 0x5560cabbfe58 's' 'T *'
|       |     | `-UnaryOperator 0x5560cabc05d8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5560cabc05c8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5560cabc0760 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5560cabc0740 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5560cabc0710 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5560cabc06c0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5560cabc0650 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|       |         | | `-DeclRefExpr 0x5560cabc0630 <col:87> 'T *' lvalue Var 0x5560cabbfe58 's' 'T *'
|       |         | `-DeclRefExpr 0x5560cabc06f0 <col:91> 'const V' lvalue ParmVar 0x5560cab983b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5560cabc0730 <col:98> 'bool' true
|       `-DeclRefExpr 0x5560cabc0888 <col:106> 'Args::Slot *' lvalue Var 0x5560cabbfb78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5560cab98c18 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5560cab98628 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab986a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5560cab98728 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5560cab98b78 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5560cab987f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab98870 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab988e8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab98988 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5560cab98a28 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5560cabc18b8 <col:60, line:773:5>
|     |-DeclStmt 0x5560cabc0980 <line:767:9, col:26>
|     | `-VarDecl 0x5560cabc0918 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5560cabc1880 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5560cabc18a0 <line:768:13, col:58>
|       | `-VarDecl 0x5560cabc09a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5560cabc0b88 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5560cabc0b58 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5560cabc0b40 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5560cabc0b20 <col:26, col:58> 'String' (CXXTemporary 0x5560cabc0b20)
|       |           `-CXXMemberCallExpr 0x5560cabc0ab0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5560cabc0a20 <col:26> '<bound member function type>' ->find 0x5560cabb5088
|       |             | `-CXXThisExpr 0x5560cabc0a10 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5560cabc0ae8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabc0a50 <col:31> 'const char *' lvalue ParmVar 0x5560cab987f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5560cabc0b00 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabc0a70 <col:40> 'int' lvalue ParmVar 0x5560cab98870 'flags' 'int'
|       |             `-DeclRefExpr 0x5560cabc0a90 <col:47> 'Args::Slot *' lvalue Var 0x5560cabc0918 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5560cabc0c40 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5560cabc0c28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5560cabc0c08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5560cabc0bd8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |       `-ImplicitCastExpr 0x5560cabc0bc0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5560cabc0ba0 <col:20> 'String' lvalue Var 0x5560cabc09a8 'str' 'String'
|       `-CompoundStmt 0x5560cabc1858 <col:61, line:772:9>
|         |-DeclStmt 0x5560cabc0f80 <line:769:13, col:66>
|         | `-VarDecl 0x5560cabc0c98 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5560cabc0f50 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5560cabc0ec0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5560cabc0f08 <col:49> 'T1' lvalue ParmVar 0x5560cab98988 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5560cabc0f38 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5560cabc0f28 <col:61> 'Args *' this
|         |-DeclStmt 0x5560cabc12f0 <line:770:13, col:66>
|         | `-VarDecl 0x5560cabc1008 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5560cabc12c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5560cabc1230 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5560cabc1278 <col:49> 'T2' lvalue ParmVar 0x5560cab98a28 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5560cabc12a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5560cabc1298 <col:61> 'Args *' this
|         `-CallExpr 0x5560cabc1828 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5560cabc1318 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|           | `-CXXThisExpr 0x5560cabc1308 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5560cabc17e8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5560cabc1388 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5560cabc1348 <col:23> 'T1 *' lvalue Var 0x5560cabc0c98 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5560cabc1368 <col:29> 'T2 *' lvalue Var 0x5560cabc1008 's2' 'T2 *'
|           | `-CallExpr 0x5560cabc17a0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5560cabc1570 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5560cabc15b8 <col:63> 'P' lvalue ParmVar 0x5560cab988e8 'parser' 'P'
|           |   |-DeclRefExpr 0x5560cabc15d8 <col:71> 'String' lvalue Var 0x5560cabc09a8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5560cabc1688 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5560cabc1618 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|           |   | `-DeclRefExpr 0x5560cabc15f8 <col:77> 'T1 *' lvalue Var 0x5560cabc0c98 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5560cabc1748 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5560cabc16d8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|           |   | `-DeclRefExpr 0x5560cabc16b8 <col:82> 'T2 *' lvalue Var 0x5560cabc1008 's2' 'T2 *'
|           |   `-UnaryOperator 0x5560cabc1788 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5560cabc1778 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5560cabc1808 <col:94> 'Args::Slot *' lvalue Var 0x5560cabc0918 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5560cab99008 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5560cab98c98 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab98f68 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5560cab98d50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab98dd0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab98e48 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5560cabc1dd0 <col:67, line:780:5>
|     |-DeclStmt 0x5560cabc1950 <line:777:9, col:26>
|     | `-VarDecl 0x5560cabc18e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5560cabc1d98 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5560cabc1db8 <line:778:13, col:58>
|       | `-VarDecl 0x5560cabc1978 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5560cabc1b58 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5560cabc1b28 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5560cabc1b10 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5560cabc1af0 <col:26, col:58> 'String' (CXXTemporary 0x5560cabc1af0)
|       |           `-CXXMemberCallExpr 0x5560cabc1a80 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5560cabc19f0 <col:26> '<bound member function type>' ->find 0x5560cabb5088
|       |             | `-CXXThisExpr 0x5560cabc19e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5560cabc1ab8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabc1a20 <col:31> 'const char *' lvalue ParmVar 0x5560cab98d50 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5560cabc1ad0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5560cabc1a40 <col:40> 'int' lvalue ParmVar 0x5560cab98dd0 'flags' 'int'
|       |             `-DeclRefExpr 0x5560cabc1a60 <col:47> 'Args::Slot *' lvalue Var 0x5560cabc18e8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5560cabc1c10 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5560cabc1bf8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5560cabc1bd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5560cabc1ba8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|       |       `-ImplicitCastExpr 0x5560cabc1b90 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5560cabc1b70 <col:20> 'String' lvalue Var 0x5560cabc1978 'str' 'String'
|       `-CallExpr 0x5560cabc1d68 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5560cabc1c38 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|         | `-CXXThisExpr 0x5560cabc1c28 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5560cabc1d18 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5560cabc1c88 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5560cabc1c68 <col:23> 'P' lvalue ParmVar 0x5560cab98e48 'parser' 'P'
|         | |-DeclRefExpr 0x5560cabc1cd0 <col:36> 'String' lvalue Var 0x5560cabc1978 'str' 'String'
|         | `-UnaryOperator 0x5560cabc1d00 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5560cabc1cf0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5560cabc1d48 <col:49> 'Args::Slot *' lvalue Var 0x5560cabc18e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5560cab993a8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5560cab99078 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5560cab99308 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5560cab99130 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab991b0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab99228 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5560cabc2740 <col:71, line:792:5>
|     |-DeclStmt 0x5560cabc1e68 <line:784:9, col:26>
|     | `-VarDecl 0x5560cabc1e00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5560cabc1f38 <line:785:9, col:29>
|     | `-VarDecl 0x5560cabc1e98 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5560cabc1f20 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5560cabc1f00 <col:28> 'int' 1
|     |-WhileStmt 0x5560cabc25f0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5560cabc2610 <line:786:16, col:61>
|     | | `-VarDecl 0x5560cabc1f60 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5560cabc2140 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5560cabc2110 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5560cabc20f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5560cabc20d8 <col:29, col:61> 'String' (CXXTemporary 0x5560cabc20d8)
|     | |           `-CXXMemberCallExpr 0x5560cabc2068 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5560cabc1fd8 <col:29> '<bound member function type>' ->find 0x5560cabb5088
|     | |             | `-CXXThisExpr 0x5560cabc1fc8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5560cabc20a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5560cabc2008 <col:34> 'const char *' lvalue ParmVar 0x5560cab99130 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5560cabc20b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5560cabc2028 <col:43> 'int' lvalue ParmVar 0x5560cab991b0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5560cabc2048 <col:50> 'Args::Slot *' lvalue Var 0x5560cabc1e00 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5560cabc21f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5560cabc21e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5560cabc21c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5560cabc2190 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|     | |       `-ImplicitCastExpr 0x5560cabc2178 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5560cabc2158 <col:23> 'String' lvalue Var 0x5560cabc1f60 'str' 'String'
|     | `-CompoundStmt 0x5560cabc25c8 <col:64, line:790:9>
|     |   |-CallExpr 0x5560cabc2350 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5560cabc2220 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|     |   | | `-CXXThisExpr 0x5560cabc2210 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5560cabc2300 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5560cabc2270 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5560cabc2250 <col:23> 'P' lvalue ParmVar 0x5560cab99228 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5560cabc22b8 <col:36> 'String' lvalue Var 0x5560cabc1f60 'str' 'String'
|     |   | | `-UnaryOperator 0x5560cabc22e8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5560cabc22d8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5560cabc2330 <col:49> 'Args::Slot *' lvalue Var 0x5560cabc1e00 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5560cabc24e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5560cabc2380 <col:13> 'int' lvalue Var 0x5560cabc1e98 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5560cabc24d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5560cabc24b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5560cabc2418 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5560cabc23f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5560cabc23e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5560cabc23a0 <col:28> 'int' lvalue Var 0x5560cabc1e98 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5560cabc23c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5560cabc2498 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5560cabc2468 <col:49> 'bool' lvalue ->_read_status 0x5560cab7b480
|     |   |         `-ImplicitCastExpr 0x5560cabc2448 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5560cabc2438 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5560cabc2598 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5560cabc2508 <col:13> 'int' lvalue ParmVar 0x5560cab991b0 'flags' 'int'
|     |     `-UnaryOperator 0x5560cabc2580 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5560cabc2568 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5560cabc2548 <col:23> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5560cabc2720 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5560cabc2658 <col:9> 'bool' lvalue ->_read_status 0x5560cab7b480
|       | `-ImplicitCastExpr 0x5560cabc2638 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5560cabc2628 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5560cabc2700 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5560cabc26e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5560cabc26c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5560cabc2688 <col:25> 'int' lvalue Var 0x5560cabc1e98 'read_status' 'int'
|           `-IntegerLiteral 0x5560cabc26a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5560cab99888 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5560cab99418 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab99498 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab997e8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5560cab99558 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab995d8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab99650 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab996f8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5560cabc77b0 <col:84, line:805:5>
|     |-DeclStmt 0x5560cabc27e8 <line:796:9, col:26>
|     | `-VarDecl 0x5560cabc2780 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5560cabc28b8 <line:797:9, col:29>
|     | `-VarDecl 0x5560cabc2818 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5560cabc28a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5560cabc2880 <col:28> 'int' 1
|     |-DeclStmt 0x5560cabc6cd0 <line:798:9, col:71>
|     | `-VarDecl 0x5560cabc2908 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5560cabc6ca0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5560cabc6c10 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5560cabc6c58 <col:55> 'T' lvalue ParmVar 0x5560cab996f8 'variable' 'T &'
|     |     `-UnaryOperator 0x5560cabc6c88 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5560cabc6c78 <col:66> 'Args *' this
|     |-WhileStmt 0x5560cabc7660 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5560cabc7680 <line:799:16, col:61>
|     | | `-VarDecl 0x5560cabc6cf8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5560cabc6ed8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5560cabc6ea8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5560cabc6e90 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5560cabc6e70 <col:29, col:61> 'String' (CXXTemporary 0x5560cabc6e70)
|     | |           `-CXXMemberCallExpr 0x5560cabc6e00 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5560cabc6d70 <col:29> '<bound member function type>' ->find 0x5560cabb5088
|     | |             | `-CXXThisExpr 0x5560cabc6d60 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5560cabc6e38 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5560cabc6da0 <col:34> 'const char *' lvalue ParmVar 0x5560cab99558 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5560cabc6e50 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5560cabc6dc0 <col:43> 'int' lvalue ParmVar 0x5560cab995d8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5560cabc6de0 <col:50> 'Args::Slot *' lvalue Var 0x5560cabc2780 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5560cabc6f90 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5560cabc6f78 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5560cabc6f58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5560cabc6f28 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|     | |       `-ImplicitCastExpr 0x5560cabc6f10 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5560cabc6ef0 <col:23> 'String' lvalue Var 0x5560cabc6cf8 'str' 'String'
|     | `-CompoundStmt 0x5560cabc7638 <col:64, line:803:9>
|     |   |-CallExpr 0x5560cabc73c0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5560cabc6fb8 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|     |   | | `-CXXThisExpr 0x5560cabc6fa8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5560cabc7380 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5560cabc6fe8 <col:23> 'T *' lvalue Var 0x5560cabc2908 's' 'T *'
|     |   | | `-CallExpr 0x5560cabc7340 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5560cabc71d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5560cabc7218 <col:56> 'P' lvalue ParmVar 0x5560cab99650 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5560cabc7238 <col:64> 'String' lvalue Var 0x5560cabc6cf8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5560cabc72e8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5560cabc7278 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|     |   | |   | `-DeclRefExpr 0x5560cabc7258 <col:70> 'T *' lvalue Var 0x5560cabc2908 's' 'T *'
|     |   | |   `-UnaryOperator 0x5560cabc7328 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5560cabc7318 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5560cabc73a0 <col:81> 'Args::Slot *' lvalue Var 0x5560cabc2780 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5560cabc7558 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5560cabc73f0 <col:13> 'int' lvalue Var 0x5560cabc2818 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5560cabc7540 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5560cabc7520 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5560cabc7488 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5560cabc7468 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5560cabc7450 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5560cabc7410 <col:28> 'int' lvalue Var 0x5560cabc2818 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5560cabc7430 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5560cabc7508 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5560cabc74d8 <col:49> 'bool' lvalue ->_read_status 0x5560cab7b480
|     |   |         `-ImplicitCastExpr 0x5560cabc74b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5560cabc74a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5560cabc7608 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5560cabc7578 <col:13> 'int' lvalue ParmVar 0x5560cab995d8 'flags' 'int'
|     |     `-UnaryOperator 0x5560cabc75f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5560cabc75d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5560cabc75b8 <col:23> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5560cabc7790 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5560cabc76c8 <col:9> 'bool' lvalue ->_read_status 0x5560cab7b480
|       | `-ImplicitCastExpr 0x5560cabc76a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5560cabc7698 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5560cabc7770 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5560cabc7750 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5560cabc7738 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5560cabc76f8 <col:25> 'int' lvalue Var 0x5560cabc2818 'read_status' 'int'
|           `-IntegerLiteral 0x5560cabc7718 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5560cab99e68 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5560cab99900 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5560cab99978 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5560cab99dc8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5560cab99a38 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5560cab99ab8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5560cab99b30 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5560cab99c80 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5560cabc85b8 <col:87, line:821:5>
|     |-DeclStmt 0x5560cabc7860 <line:809:9, col:26>
|     | `-VarDecl 0x5560cabc77f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5560cabc7930 <line:810:9, col:29>
|     | `-VarDecl 0x5560cabc7890 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5560cabc7918 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5560cabc78f8 <col:28> 'int' 1
|     |-DeclStmt 0x5560cabc7b78 <line:811:9, col:38>
|     | `-VarDecl 0x5560cabc7a60 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5560cabc7b50 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5560cabc7ad8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5560cabc7b30 <col:29> 'Vector<T>' lvalue ParmVar 0x5560cab99c80 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5560cabc8468 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5560cabc8488 <line:812:16, col:61>
|     | | `-VarDecl 0x5560cabc7ba0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5560cabc7d80 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5560cabc7d50 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5560cabc7d38 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5560cabc7d18 <col:29, col:61> 'String' (CXXTemporary 0x5560cabc7d18)
|     | |           `-CXXMemberCallExpr 0x5560cabc7ca8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5560cabc7c18 <col:29> '<bound member function type>' ->find 0x5560cabb5088
|     | |             | `-CXXThisExpr 0x5560cabc7c08 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5560cabc7ce0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5560cabc7c48 <col:34> 'const char *' lvalue ParmVar 0x5560cab99a38 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5560cabc7cf8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5560cabc7c68 <col:43> 'int' lvalue ParmVar 0x5560cab99ab8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5560cabc7c88 <col:50> 'Args::Slot *' lvalue Var 0x5560cabc77f8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5560cabc7e38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5560cabc7e20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5560cabc7e00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5560cabc7dd0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5560ca8dbe48
|     | |       `-ImplicitCastExpr 0x5560cabc7db8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5560cabc7d98 <col:23> 'String' lvalue Var 0x5560cabc7ba0 'str' 'String'
|     | `-CompoundStmt 0x5560cabc8430 <col:64, line:819:9>
|     |   |-DeclStmt 0x5560cabc7ef8 <line:813:13, col:23>
|     |   | `-VarDecl 0x5560cabc7e60 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5560cabc7ed8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5560cabc8078 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5560cabc7f20 <col:13> '<bound member function type>' ->postparse 0x5560cabb5298
|     |   | | `-CXXThisExpr 0x5560cabc7f10 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5560cabc8020 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5560cabc7f70 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5560cabc7f50 <col:23> 'P' lvalue ParmVar 0x5560cab99b30 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5560cabc7fb8 <col:36> 'String' lvalue Var 0x5560cabc7ba0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5560cabc7fd8 <col:41> 'T' lvalue Var 0x5560cabc7e60 'sx' 'T'
|     |   | | `-UnaryOperator 0x5560cabc8008 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5560cabc7ff8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5560cabc8058 <col:53> 'Args::Slot *' lvalue Var 0x5560cabc77f8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5560cabc81d0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5560cabc8108 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5560cabc80d8 <col:17> 'bool' lvalue ->_read_status 0x5560cab7b480
|     |   | |   `-ImplicitCastExpr 0x5560cabc80b8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5560cabc80a8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5560cabc81a8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5560cabc8140 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5560cabc8120 <col:17> 'Vector<T> *' lvalue Var 0x5560cabc7a60 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5560cabc8188 <col:30> 'T' lvalue Var 0x5560cabc7e60 'sx' 'T'
|     |   |-BinaryOperator 0x5560cabc8350 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5560cabc81e8 <col:13> 'int' lvalue Var 0x5560cabc7890 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5560cabc8338 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5560cabc8318 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5560cabc8280 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5560cabc8260 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5560cabc8248 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5560cabc8208 <col:28> 'int' lvalue Var 0x5560cabc7890 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5560cabc8228 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5560cabc8300 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5560cabc82d0 <col:49> 'bool' lvalue ->_read_status 0x5560cab7b480
|     |   |         `-ImplicitCastExpr 0x5560cabc82b0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5560cabc82a0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5560cabc8400 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5560cabc8370 <col:13> 'int' lvalue ParmVar 0x5560cab99ab8 'flags' 'int'
|     |     `-UnaryOperator 0x5560cabc83e8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5560cabc83d0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5560cabc83b0 <col:23> 'const int' lvalue Var 0x5560cab829b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5560cabc8598 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5560cabc84d0 <col:9> 'bool' lvalue ->_read_status 0x5560cab7b480
|       | `-ImplicitCastExpr 0x5560cabc84b0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5560cabc84a0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5560cabc8578 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5560cabc8558 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5560cabc8540 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5560cabc8500 <col:25> 'int' lvalue Var 0x5560cabc7890 'read_status' 'int'
|           `-IntegerLiteral 0x5560cabc8520 <col:40> 'int' 1
|-AccessSpecDecl 0x5560cab99ee0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5560cab99f08 prev 0x5560cab80cb8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5560cab9a000 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5560cab9a0f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5560cabc85f0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5560cab9a1e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5560cabc8600 <col:25, line:830:9>
| |-CXXMethodDecl 0x5560cab9a2e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5560cab9a390 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5560cab9a438 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5560cab9a438
| | `-ParmVarDecl 0x5560cab9a548 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5560cab9ad08 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5560cab9ad08
|   `-ParmVarDecl 0x5560cab9ae18 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5560cab9a5b8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5560cab9a718 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5560cab9a910 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5560cab9a7c0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5560cab9a838 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5560cabc87e0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5560cab9abc8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5560cabc8650 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5560cabc8610 <col:20> 'void *' lvalue ParmVar 0x5560cab9a7c0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5560cab9ac30 '_slot' 'char *'
| | | `-CXXNewExpr 0x5560cabc86d8 <col:32, col:45> 'char *' array Function 0x5560ca6ff618 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5560cabc86c0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5560cabc8690 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5560cab9a838 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5560cab9ac90 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5560cabc87a0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5560cabc8760 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5560cab9a838 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5560cabc8860 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5560cab9aa10 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5560cab9a1e0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5560cabc88e8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5560cabc88c8 <line:840:13, col:22> 'void' array Function 0x5560ca6ff978 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5560cabc88b0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5560cabc8880 <col:22> 'char *' lvalue ->_slot 0x5560cab9ac30
| |         `-CXXThisExpr 0x5560cabc8870 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5560cab9ab10 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5560cab9a2e0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5560cabc8ad8 <col:22, line:844:9>
| |   `-CallExpr 0x5560cabc8a40 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5560cabc8a28 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5560cabc8a08 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5560ca80b3d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5560cabc8a78 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5560cabc8958 <col:20> 'void *' lvalue ->_ptr 0x5560cab9abc8
| |     |   `-CXXThisExpr 0x5560cabc8948 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5560cabc8aa8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5560cabc8a90 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5560cabc8998 <col:26> 'char *' lvalue ->_slot 0x5560cab9ac30
| |     |     `-CXXThisExpr 0x5560cabc8988 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5560cabc8ac0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5560cabc89d8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5560cab9ac90
| |         `-CXXThisExpr 0x5560cabc89c8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5560cab9abc8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5560cab9ac30 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5560cab9ac90 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5560cab9ae88 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5560cab9ae88
| | `-ParmVarDecl 0x5560caba5e30 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5560caba5ec8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5560caba5ec8
|   `-ParmVarDecl 0x5560caba5fd8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5560caba6178 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5560caba6048 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5560caba60e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5560caba6410 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5560caba6608 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5560caba64d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5560caba6788 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5560cabc8b10 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5560cabc8af0 <col:20> 'T *' lvalue ParmVar 0x5560caba64d8 'ptr' 'T *'
|   | `-CompoundStmt 0x5560cabc8b60 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5560caba66d8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5560cab9a2e0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5560cabc8d10 <col:22, line:857:9>
|   |   `-CallExpr 0x5560cabc8ce0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5560cabc8b70 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5560ca8c3fd8 0x5560ca86de38
|   |     |-CXXOperatorCallExpr 0x5560cabc8c70 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5560cabc8c00 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5560caad10c8 0x5560caad0ce8 0x5560caad0918 0x5560caad0538 0x5560caad0158 0x5560caacfd88
|   |     | `-MemberExpr 0x5560cabc8bd0 <col:29> 'T *' lvalue ->_ptr 0x5560caba6788
|   |     |   `-CXXThisExpr 0x5560cabc8bc0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5560cabc8cb0 <col:35> 'T' lvalue ->_slot 0x5560caba67e8
|   |       `-CXXThisExpr 0x5560cabc8ca0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5560caba6788 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5560caba67e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5560caba6850 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5560caba6950 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5560caba69a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caba6930 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5560caba6910 <col:31> 'int' 48
|-FieldDecl 0x5560caba69c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5560caba6a28 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5560caba6a88 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5560caba6bc0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5560cabb4930 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5560cabb4990 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5560cabb4a40 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5560cabb4c68 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5560cabb4b70 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5560cabb4db8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5560cabb4d28 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5560cabb5088 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5560cabb4e78 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5560cabb4ef8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5560cabb4fa0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5560cabb5298 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5560cabb5150 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5560cabb51c8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5560cabb5368 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5560cabb54b8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5560cabb5420 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5560cabb5848 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5560cabb5578 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5560cabb55f8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5560cabb56a0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5560cabb5758 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5560cabb5a70 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5560cabb5920 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5560cabb5998 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5560cabb5d88 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5560cabb5b20 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5560cabb5ce8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5560cabb5bf8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class BandwidthArg
         0 |   class NumArg (base) (empty)
         0 |   int status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cabd1490 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560cabd15a8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5560cabd1638 <col:16, col:22> col:16 public
|-EnumDecl 0x5560cabd1660 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5560cabd1760 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5560cabd19b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabd1740 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5560cabd1720 <col:21> 'int' 0
| |-EnumConstantDecl 0x5560cabd17f0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5560cabd19c8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabd17d0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5560cabd17b0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5560cabd1880 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5560cabd19e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabd1860 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5560cabd1840 <col:24> 'int' 34
| |-EnumConstantDecl 0x5560cabd1910 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5560cabd19f8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560cabd18f0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5560cabd18d0 <col:25> 'int' 95
| `-EnumConstantDecl 0x5560cabd1960 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5560cabd3370 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5560cabd37a8 <col:7>
|-CXXConstructorDecl 0x5560cabd3478 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5560cabd3478
| `-ParmVarDecl 0x5560cabd3588 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5560cabd3628 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5560cabd3738 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5560cabf8de0 <col:7>
`-CXXDestructorDecl 0x5560cabd58a8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cabe0640 <../dummy_inc/click/args.hh:1284:1, line:1288:1> line:1284:7 referenced class BandwidthArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5560cabe0798 <col:1, col:7> col:7 implicit class BandwidthArg
|-AccessSpecDecl 0x5560cabe0828 <col:38, col:44> col:38 public
|-CXXMethodDecl 0x5560cabe0a20 <line:1285:5, col:84> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x5560cabe0860 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5560cabe08d8 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x5560cabe0950 <col:53, col:74> col:72 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5560cabe0ca0 <col:74> 'const ArgContext' lvalue Var 0x5560cabc8d38 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5560cabe0b78 <line:1286:5, col:37> col:19 unparse 'String (uint32_t)' static
| `-ParmVarDecl 0x5560cabe0ae8 <col:27, col:36> col:36 x 'uint32_t':'unsigned int'
|-FieldDecl 0x5560cabe0c38 <line:1287:5, col:9> col:9 referenced status 'int'
|-CXXConstructorDecl 0x5560cabf8240 <line:1284:7> col:7 implicit referenced BandwidthArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5560cabf8348 <col:7> col:7 implicit constexpr BandwidthArg 'void (const BandwidthArg &)' inline default trivial noexcept-unevaluated 0x5560cabf8348
| `-ParmVarDecl 0x5560cabf8458 <col:7> col:7 'const BandwidthArg &'
|-CXXConstructorDecl 0x5560cabf84f8 <col:7> col:7 implicit used constexpr BandwidthArg 'void (BandwidthArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5560cabf8608 <col:7> col:7 used 'BandwidthArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5560cabf8df0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5560cabf8dc0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5560cabf8d90 <col:7> 'BandwidthArg' xvalue static_cast<class BandwidthArg &&> <NoOp>
| |       `-DeclRefExpr 0x5560cabf8d60 <col:7> 'BandwidthArg' lvalue ParmVar 0x5560cabf8608 '' 'BandwidthArg &&'
| |-CXXCtorInitializer Field 0x5560cabe0c38 'status' 'int'
| | `-ImplicitCastExpr 0x5560cabf8ee8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5560cabf8eb8 <col:7> 'int' xvalue .status 0x5560cabe0c38
| |     `-CXXStaticCastExpr 0x5560cabf8e88 <col:7> 'BandwidthArg' xvalue static_cast<class BandwidthArg &&> <NoOp>
| |       `-DeclRefExpr 0x5560cabf8e58 <col:7> 'BandwidthArg' lvalue ParmVar 0x5560cabf8608 '' 'BandwidthArg &&'
| `-CompoundStmt 0x5560cabf8f38 <col:7>
`-CXXDestructorDecl 0x5560cabf86a8 <col:7> col:7 implicit referenced ~BandwidthArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BandwidthArg = type { i32 }
  NonVirtualBaseLLVMType:%class.BandwidthArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560ca8ccd00 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560ca8cce18 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5560ca8ccea8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5560ca8ccf78 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5560ca8cd060 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5560ca8cd278 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5560ca8cd120 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cd428 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5560ca8cd330 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5560ca8cd570 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5560ca8cd4e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5560ca8cd6b8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5560ca8cd628 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cd800 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5560ca8cd770 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cd8c8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5560ca8cda10 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5560ca8cd980 <col:28> col:31 'int'
|-CXXMethodDecl 0x5560ca8cdad8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5560ca8cdc20 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5560ca8cdb90 <col:28> col:31 'int'
|-CXXMethodDecl 0x5560ca8cdd98 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5560ca8cdcd8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cdee0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5560ca8cde50 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cdfa8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5560ca8ce168 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5560ca8ce058 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5560ca8ce0d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8ce3b8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5560ca8ce228 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5560ca8ce2a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5560ca8ce468 <col:86> "" ""
|-CXXMethodDecl 0x5560ca8ce6d8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5560ca8ce548 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5560ca8ce5c0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8ce888 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5560ca8ce798 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5560ca8cea38 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5560ca8ce940 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5560ca8ced08 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5560ca8ceaf0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5560ca8ceb68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5560ca8cebe0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cefe8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5560ca8cedd0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5560ca8cee48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5560ca8ceec0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5560ca8cf0a0 <col:115> "" ""
|-AccessSpecDecl 0x5560ca8cf110 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5560ca8cf148 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560ca8cf650 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5560ca8cf650
| `-ParmVarDecl 0x5560ca8cf758 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5560ca8cf7f8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5560ca8cf7f8
| `-ParmVarDecl 0x5560ca8cf908 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5560ca9050d8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5560caaf8340 <col:7>
|-CXXConstructorDecl 0x5560ca9051b0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5560ca9051b0
| `-ParmVarDecl 0x5560ca9052c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5560ca905338 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5560ca905338
| `-ParmVarDecl 0x5560ca905448 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5560caafad40 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560caae6f68 prev 0x5560caadbc30 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560caae7060 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5560caae7150 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5560caae7278 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5560caae73f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5560caae7578 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5560caae76f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5560caaf84a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5560caaf8d18 <col:11>
|-CXXDestructorDecl 0x5560caaf8580 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5560caaf86b8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5560caaf86b8
| `-ParmVarDecl 0x5560caaf87c8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5560caaf8868 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5560caaf8868
| `-ParmVarDecl 0x5560caaf8978 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5560caafb738 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560caafb848 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5560caafbac8 <col:11>
|   `-ReturnStmt 0x5560caafbab8 <col:11>
|     `-UnaryOperator 0x5560caafbaa0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560caafba90 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5560caafb8b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5560caafb8b8
  `-ParmVarDecl 0x5560caafb9c8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560caae7760 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560caae7878 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5560caae7918 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5560caae7980 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5560caae79e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5560caae7a50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5560caae7ab0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5560caae7b70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5560caae7bd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5560caae7c30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5560caaf83b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5560caae7918 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5560caaf8d28 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5560caaf8d80 <col:12>
|-CXXConstructorDecl 0x5560caaf89e8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5560caaf89e8
| `-ParmVarDecl 0x5560caaf8af8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5560caaf8b98 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5560caaf8b98
| `-ParmVarDecl 0x5560caaf8ca8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5560caafae20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560caad5340 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5560caad5458 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5560caad54e8 <col:16, col:22> col:16 public
|-EnumDecl 0x5560caad5510 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5560caad5610 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5560caad56f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caad55f0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5560caad55d0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5560caad56a0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5560caad5708 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caad5680 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5560caad5660 <col:22> 'int' 64
|-CXXMethodDecl 0x5560caad5a48 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5560caad5730 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5560caad57b0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5560caad5828 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5560caad58a0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5560caad5b08 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5560caad5d08 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5560caad5b80 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5560caad5bf8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5560caad5db8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5560caad5f18 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5560caad5e28 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5560caad5fc0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5560caad6320 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5560caad62b0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5560caad6250 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5560caad6210 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5560ca5ac4e0 'void'
|       |-PointerType 0x5560ca8550d0 'unsigned char *'
|       | `-BuiltinType 0x5560ca5ac5e0 'unsigned char'
|       |-TypedefType 0x5560ca6516c0 'size_t' sugar
|       | |-Typedef 0x5560ca61cbe0 'size_t'
|       | `-BuiltinType 0x5560ca5ac640 'unsigned long'
|       `-PointerType 0x5560ca5acce0 'void *'
|         `-BuiltinType 0x5560ca5ac4e0 'void'
|-CXXMethodDecl 0x5560caad6798 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5560caad6390 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5560caad6408 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5560caad64a0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5560caad6520 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5560caaf1350 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5560caaf1338 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5560caaf1300 <col:58> 'int' 0
| |-ParmVarDecl 0x5560caad65a0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5560caaf1378 <col:76> 'int' 0
| |-ParmVarDecl 0x5560caad6620 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5560caaf1398 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5560caad6868 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5560caad68e8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5560caad69a8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5560caad6a48 <col:20>
| `-OptimizeNoneAttr 0x5560caad6aa0 <col:30>
|-CXXMethodDecl 0x5560caad6b18 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5560caad6bb8 <col:20>
| `-OptimizeNoneAttr 0x5560caad6c10 <col:30>
|-CXXMethodDecl 0x5560caad6c88 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5560caad6d28 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5560caad6dd8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5560caad6e78 <col:20>
| |-OptimizeNoneAttr 0x5560caad6ed0 <col:30>
| `-WarnUnusedResultAttr 0x5560caad6ef8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5560caad6f50 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5560caad6ff0 <col:20>
| `-OptimizeNoneAttr 0x5560caad7048 <col:30>
|-CXXMethodDecl 0x5560caad7098 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5560caad7138 <col:20>
| `-OptimizeNoneAttr 0x5560caad7190 <col:30>
|-CXXMethodDecl 0x5560caad71d8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5560caad7278 <col:20>
| `-OptimizeNoneAttr 0x5560caad72d0 <col:30>
|-CXXMethodDecl 0x5560caad7318 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caad73d8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caad74a0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5560caad7568 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5560caad7628 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caad7748 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5560caaf1460 <col:54, line:99:5>
|   `-ReturnStmt 0x5560caaf1450 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5560caaf1438 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5560caaf1408 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5560caae7f68
|         `-CXXThisExpr 0x5560caaf13f8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5560caad78e8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5560caad77f8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5560caaf1510 <col:67, line:103:5>
|   `-BinaryOperator 0x5560caaf14f0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5560caaf1488 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5560caae7f68
|     | `-CXXThisExpr 0x5560caaf1478 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5560caaf14d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaf14b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5560caad77f8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5560caad79e0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5560caaf1590 <col:33, line:107:5>
|   `-ReturnStmt 0x5560caaf1580 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5560caaf1568 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5560caaf1538 <col:16> 'void *' lvalue ->_destructor_argument 0x5560caae7fd0
|         `-CXXThisExpr 0x5560caaf1528 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5560caad7aa0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5560caaf1bc0 <col:25, line:113:5>
|   |-ParenExpr 0x5560caaf1908 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5560caaf18d8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf1648 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5560caaf1620 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5560caaf15e8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5560caaf15b8 <col:24> '<bound member function type>' ->shared 0x5560caad6b18
|   |   |       `-ImplicitCastExpr 0x5560caaf1608 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5560caaf15a8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5560caaf16a8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf1688 <col:42> 'int' 0
|   |   `-CallExpr 0x5560caaf1838 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf1820 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf1800 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf1878 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf1718 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5560caaf1890 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf1740 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf18a8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf1778 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5560caaf18c0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf17e8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf17d0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf1798 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5560caaf1b08 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5560caaf1938 <col:2> 'unsigned char *' lvalue ->_head 0x5560caae7d70
|   | | `-CXXThisExpr 0x5560caaf1928 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5560caaf1af0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5560caaf1ad0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5560caaf1978 <col:10> 'unsigned char *' lvalue ->_data 0x5560caae7dd8
|   |     | `-CXXThisExpr 0x5560caaf1968 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5560caaf1ab8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5560caaf1a98 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5560caaf19b8 <col:18> 'unsigned char *' lvalue ->_tail 0x5560caae7e40
|   |         | `-CXXThisExpr 0x5560caaf19a8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5560caaf1a80 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5560caaf1a60 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5560caaf19f8 <col:26> 'unsigned char *' lvalue ->_end 0x5560caae7ea8
|   |             | `-CXXThisExpr 0x5560caaf19e8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5560caaf1a48 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5560caaf1a28 <col:33> 'int' 0
|   `-BinaryOperator 0x5560caaf1ba0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5560caaf1b38 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5560caae7f68
|     | `-CXXThisExpr 0x5560caaf1b28 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5560caaf1b88 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5560caaf1b68 <col:16> 'int' 0
|-CXXMethodDecl 0x5560caad7be0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5560caad7b50 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caad7c88 <col:20>
| |-OptimizeNoneAttr 0x5560caad7ce0 <col:30>
| `-WarnUnusedResultAttr 0x5560caad7d08 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5560caad7dd8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5560caad7d48 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caad7e80 <col:20>
| |-OptimizeNoneAttr 0x5560caad7ed8 <col:30>
| `-WarnUnusedResultAttr 0x5560caad7f00 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5560caad8038 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5560caad7f40 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5560caad80e0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5560caad81e0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5560caad8150 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caad8288 <col:20>
| `-OptimizeNoneAttr 0x5560caad82e0 <col:30>
|-CXXMethodDecl 0x5560caad83a8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5560caad8318 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5560caad8450 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5560caad8550 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5560caad84c0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5560caad85f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5560caad86f8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5560caad8668 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caad87a0 <col:20>
| `-OptimizeNoneAttr 0x5560caad87f8 <col:30>
|-CXXMethodDecl 0x5560caad8988 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5560caad8838 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5560caad88b0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5560caaf13b8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5560caad8a38 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5560caad8c38 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5560caad8ab0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5560caad8b28 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caad8e48 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5560caad8cf8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5560caad8d70 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caad9058 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5560caad8f08 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5560caad8f88 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5560caaf13c8 <col:39> 'int' 0
|-CXXMethodDecl 0x5560caad9128 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5560caad91f0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5560caad92b8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5560caad9378 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caad9440 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5560caad9588 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5560caad94f8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5560caad9758 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5560caad9648 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5560caad96c0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caad9828 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5560caad98e8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5560caad9988 <col:20>
| `-OptimizeNoneAttr 0x5560caad99e0 <col:30>
|-CXXMethodDecl 0x5560caad9a30 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5560caad9ad0 <col:20>
| `-OptimizeNoneAttr 0x5560caad9b28 <col:30>
|-CXXMethodDecl 0x5560caad9b78 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5560caad9c38 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caad9d00 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5560caad9da0 <col:20>
| `-OptimizeNoneAttr 0x5560caad9df8 <col:30>
|-CXXMethodDecl 0x5560caad9f48 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5560caad9e38 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5560caad9eb0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caada098 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5560caada008 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caada170 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5560caada230 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5560caada2d0 <col:20>
| `-OptimizeNoneAttr 0x5560caada328 <col:30>
|-CXXMethodDecl 0x5560caada378 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5560caada418 <col:20>
| `-OptimizeNoneAttr 0x5560caada470 <col:30>
|-CXXMethodDecl 0x5560caada4c0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5560caada588 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5560caada628 <col:20>
| `-OptimizeNoneAttr 0x5560caada680 <col:30>
|-CXXMethodDecl 0x5560caada6c8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5560caada7e8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5560caada958 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5560caada898 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5560caadaa48 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5560caadaae8 <col:20>
| `-OptimizeNoneAttr 0x5560caadab40 <col:30>
|-CXXMethodDecl 0x5560caadab90 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5560caadac50 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caadae88 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5560caadad00 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5560caadad78 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caadaf38 <col:20>
| `-OptimizeNoneAttr 0x5560caadaf90 <col:30>
|-CXXMethodDecl 0x5560caadb038 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5560caadb0d8 <col:20>
| `-OptimizeNoneAttr 0x5560caadb130 <col:30>
|-CXXMethodDecl 0x5560caadb180 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5560caadb220 <col:20>
| `-OptimizeNoneAttr 0x5560caadb278 <col:30>
|-CXXMethodDecl 0x5560caadb2c0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5560caadb360 <col:20>
| `-OptimizeNoneAttr 0x5560caadb3b8 <col:30>
|-CXXMethodDecl 0x5560caadb4b8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5560caadb3f0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5560caadb560 <col:20>
| `-OptimizeNoneAttr 0x5560caadb5b8 <col:30>
|-CXXMethodDecl 0x5560caadb778 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5560caadb5f0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5560caadb668 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caadb828 <col:20>
| `-OptimizeNoneAttr 0x5560caadb880 <col:30>
|-CXXMethodDecl 0x5560caadb928 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5560caadba48 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5560caadbb68 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5560caadbc08 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5560caadbc30 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5560caadbd58 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5560caadbdf8 <col:20>
| `-OptimizeNoneAttr 0x5560caadbe50 <col:30>
|-CXXMethodDecl 0x5560caadbef8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5560caadbf98 <col:20>
| `-OptimizeNoneAttr 0x5560caadbff0 <col:30>
|-AccessSpecDecl 0x5560caadc018 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5560caadc040 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5560caadc140 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5560caadc190 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caadc120 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5560caadc100 <col:14> 'int' 48
|-CXXMethodDecl 0x5560caadc1f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5560caadc298 <col:20>
| `-OptimizeNoneAttr 0x5560caadc2f0 <col:30>
|-CXXMethodDecl 0x5560caadc368 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5560caadc408 <col:20>
| `-OptimizeNoneAttr 0x5560caadc460 <col:30>
|-CXXMethodDecl 0x5560caadc528 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5560caadc498 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5560caadc6c8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5560caadc868 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5560caadc778 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5560caadc910 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5560caadca10 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5560caadcdc0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadc9f0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5560caadc9d0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5560caadcaa0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5560caadcdd8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadca80 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5560caadca60 <col:14> 'int' 1
| |-EnumConstantDecl 0x5560caadcb30 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5560caadcdf0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadcb10 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5560caadcaf0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5560caadcbc0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5560caadce08 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadcba0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5560caadcb80 <col:14> 'int' 3
| |-EnumConstantDecl 0x5560caadcc50 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5560caadce20 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadcc30 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5560caadcc10 <col:13> 'int' 4
| |-EnumConstantDecl 0x5560caadcce0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5560caadce38 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadccc0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5560caadcca0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5560caadcd70 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5560caadce50 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caadcd50 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5560caadcd30 <col:14> 'int' 6
|-CXXMethodDecl 0x5560caadceb8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5560caadcf58 <col:20>
| `-OptimizeNoneAttr 0x5560caadcfb0 <col:30>
|-CXXMethodDecl 0x5560caadd0a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5560caadcfe8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5560caadd150 <col:20>
| `-OptimizeNoneAttr 0x5560caadd1a8 <col:30>
|-CXXMethodDecl 0x5560caadd218 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5560caadd340 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5560caadd4b8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5560caadd3f0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5560caadd580 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5560caadd648 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5560caadd788 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5560caadd6f8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5560caadd830 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5560caadd930 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5560caaddb30 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadd910 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5560caadd8f0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5560caadd9c0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5560caaddb48 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadd9a0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5560caadd980 <col:45> 'int' 4
| |-EnumConstantDecl 0x5560caadda50 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5560caaddb60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caadda30 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5560caadda10 <col:24> 'int' 0
| `-EnumConstantDecl 0x5560caaddae0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5560caaddb78 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caaddac0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5560caaddaa0 <col:47> 'int' 16
|-CXXMethodDecl 0x5560caaddbd8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5560caaddd48 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5560caaddc88 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5560caadddf0 <col:20>
| `-OptimizeNoneAttr 0x5560caadde48 <col:30>
|-CXXMethodDecl 0x5560caadde98 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5560caaf1ce0 <col:18, col:36>
|   `-ReturnStmt 0x5560caaf1cd0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5560caaf1cb8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5560caaf1c98 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5560caaf1c68 <col:27> '<bound member function type>' ->xanno 0x5560caadbef8
|           `-CXXThisExpr 0x5560caaf1c58 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5560caaddf90 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5560caaf1df0 <col:30, col:48>
|   `-ReturnStmt 0x5560caaf1de0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5560caaf1dc8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5560caaf1da8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5560caaf1d78 <col:39> '<bound member function type>' ->xanno 0x5560caadbd58
|           `-CXXThisExpr 0x5560caaf1d68 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5560caade078 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5560caaf1f88 <col:24, col:50>
|   `-ReturnStmt 0x5560caaf1f78 <col:26, col:47>
|     `-UnaryOperator 0x5560caaf1f60 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5560caaf1f40 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5560caaf1f28 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5560caaf1ed8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5560caae7278
|         |   `-CXXMemberCallExpr 0x5560caaf1eb8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5560caaf1e88 <col:34> '<bound member function type>' ->xanno 0x5560caadbef8
|         |       `-CXXThisExpr 0x5560caaf1e78 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5560caaf1f08 <col:46> 'int' 0
|-CXXMethodDecl 0x5560caade180 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5560caaf2158 <col:36, col:62>
|   `-ReturnStmt 0x5560caaf2148 <col:38, col:59>
|     `-UnaryOperator 0x5560caaf2130 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5560caaf2110 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5560caaf20f8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5560caaf2070 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5560caae7278
|         |   `-CXXMemberCallExpr 0x5560caaf2050 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5560caaf2020 <col:46> '<bound member function type>' ->xanno 0x5560caadbd58
|         |       `-CXXThisExpr 0x5560caaf2010 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5560caaf20a0 <col:58> 'int' 0
|-CXXMethodDecl 0x5560caade298 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5560caaf22f0 <col:26, col:53>
|   `-ReturnStmt 0x5560caaf22e0 <col:28, col:50>
|     `-UnaryOperator 0x5560caaf22c8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5560caaf22a8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5560caaf2290 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5560caaf2240 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5560caae7578
|         |   `-CXXMemberCallExpr 0x5560caaf2220 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5560caaf21f0 <col:36> '<bound member function type>' ->xanno 0x5560caadbef8
|         |       `-CXXThisExpr 0x5560caaf21e0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5560caaf2270 <col:49> 'int' 0
|-CXXMethodDecl 0x5560caade3b8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5560caaf24c8 <col:38, col:65>
|   `-ReturnStmt 0x5560caaf24b8 <col:40, col:62>
|     `-UnaryOperator 0x5560caaf24a0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5560caaf2480 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5560caaf2468 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5560caaf23d8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5560caae7578
|         |   `-CXXMemberCallExpr 0x5560caaf23b8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5560caaf2388 <col:48> '<bound member function type>' ->xanno 0x5560caadbd58
|         |       `-CXXThisExpr 0x5560caaf2378 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5560caaf2408 <col:61> 'int' 0
|-CXXMethodDecl 0x5560caade568 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5560caade470 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5560caaf2b98 <col:34, line:463:5>
|   |-ParenExpr 0x5560caaf29e0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5560caaf29b0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf2618 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf25e8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf2538 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf2520 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf24e0 <col:23> 'int' lvalue ParmVar 0x5560caade470 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf2500 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf25c8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf2598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf2558 <col:33> 'int' lvalue ParmVar 0x5560caade470 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5560caaf25b0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5560caaf2578 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5560caaf2678 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf2658 <col:56> 'int' 0
|   |   `-CallExpr 0x5560caaf2910 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf28f8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf28d8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf2950 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf2768 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5560caaf2968 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf2798 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf2980 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf27d0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5560caaf2998 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf28c0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf28a8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf2868 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5560caaf2b88 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5560caaf2b70 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5560caaf2b50 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5560caaf2b20 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5560caaf2ad0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5560caae7278
|         |   `-CXXMemberCallExpr 0x5560caaf2ab0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5560caaf2a80 <col:9> '<bound member function type>' ->xanno 0x5560caadbd58
|         |       `-CXXThisExpr 0x5560caaf2a70 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5560caaf2b38 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5560caaf2b00 <col:21> 'int' lvalue ParmVar 0x5560caade470 'i' 'int'
|-CXXMethodDecl 0x5560caade7b8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5560caade628 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5560caade6a0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5560caaf3228 <col:40, line:472:5>
|   |-ParenExpr 0x5560caaf3040 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5560caaf3010 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf2cf0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf2cc0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf2c10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf2bf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf2bb8 <col:23> 'int' lvalue ParmVar 0x5560caade628 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf2bd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf2ca0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf2c70 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf2c30 <col:33> 'int' lvalue ParmVar 0x5560caade628 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5560caaf2c88 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5560caaf2c50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5560caaf2d50 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf2d30 <col:56> 'int' 0
|   |   `-CallExpr 0x5560caaf2f70 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf2f58 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf2f38 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf2fb0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf2dc0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5560caaf2fc8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf2df0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf2fe0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf2e28 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5560caaf2ff8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf2f20 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf2f08 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf2ec8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5560caaf3208 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5560caaf31b0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5560caaf3180 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5560caaf3130 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5560caae7278
|     | |   `-CXXMemberCallExpr 0x5560caaf3110 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5560caaf30e0 <col:2> '<bound member function type>' ->xanno 0x5560caadbef8
|     | |       `-CXXThisExpr 0x5560caaf30d0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5560caaf3198 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5560caaf3160 <col:14> 'int' lvalue ParmVar 0x5560caade628 'i' 'int'
|     `-ImplicitCastExpr 0x5560caaf31f0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaf31d0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5560caade6a0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5560caade978 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5560caade880 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5560caaf39a8 <col:36, line:485:5>
|   |-ParenExpr 0x5560caaf3710 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf36e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf33c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf3390 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf32a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf3288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf3248 <col:23> 'int' lvalue ParmVar 0x5560caade880 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf3268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf3370 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf3358 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf32c0 <col:33> 'int' lvalue ParmVar 0x5560caade880 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf3338 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf3320 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf32e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf3300 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5560caaf3420 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf3400 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf3640 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf3628 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf3608 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf3680 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf3490 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5560caaf3698 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf34c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf36b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf3500 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5560caaf36c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf35f0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf35d8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf3598 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5560caaf3998 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5560caaf3980 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5560caaf3968 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5560caaf3938 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5560caaf38d8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5560caaf38a8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5560caaf3820 <col:61, col:70> 'char const[48]' lvalue ->c 0x5560caae7150
|             |   `-CXXMemberCallExpr 0x5560caaf3800 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5560caaf37d0 <col:61> '<bound member function type>' ->xanno 0x5560caadbd58
|             |       `-CXXThisExpr 0x5560caaf37c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5560caaf38c0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5560caaf3850 <col:74> 'int' lvalue ParmVar 0x5560caade880 'i' 'int'
|-CXXMethodDecl 0x5560caadebc8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5560caadea38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5560caadeab0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5560caaf40f8 <col:42, line:500:5>
|   |-ParenExpr 0x5560caaf3e90 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf3e60 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf3b40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf3b10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf3a20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf3a08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf39c8 <col:23> 'int' lvalue ParmVar 0x5560caadea38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf39e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf3af0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf3ad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf3a40 <col:33> 'int' lvalue ParmVar 0x5560caadea38 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf3ab8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf3aa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf3a60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf3a80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5560caaf3ba0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf3b80 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf3dc0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf3da8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf3d88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf3e00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf3c10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5560caaf3e18 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf3c48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf3e30 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf3c80 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5560caaf3e48 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf3d70 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf3d58 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf3d18 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5560caaf40d8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5560caaf4088 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5560caaf4058 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5560caaf4000 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5560caaf3fd0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5560caaf3f80 <col:48, col:57> 'char [48]' lvalue ->c 0x5560caae7150
|     |     |   `-CXXMemberCallExpr 0x5560caaf3f60 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5560caaf3f30 <col:48> '<bound member function type>' ->xanno 0x5560caadbef8
|     |     |       `-CXXThisExpr 0x5560caaf3f20 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5560caaf3fe8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5560caaf3fb0 <col:61> 'int' lvalue ParmVar 0x5560caadea38 'i' 'int'
|     `-ImplicitCastExpr 0x5560caaf40c0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaf40a0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5560caadeab0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5560caaded88 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5560caadec90 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5560caaf4858 <col:35, line:513:5>
|   |-ParenExpr 0x5560caaf4568 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf4538 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf4290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf4260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf4170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf4158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf4118 <col:23> 'int' lvalue ParmVar 0x5560caadec90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf4138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf4240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf4228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf4190 <col:33> 'int' lvalue ParmVar 0x5560caadec90 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf4208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf41f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf41b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf41d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5560caaf42f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf42d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf4498 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf4480 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf4460 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf44d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf4360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5560caaf44f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf4398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf4508 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf43d0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5560caaf4520 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf4448 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf4430 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf43f0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5560caaf4848 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5560caaf4830 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5560caaf4818 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5560caaf47e8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5560caaf4760 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5560caaf4730 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5560caaf46e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5560caae7150
|             |   `-CXXMemberCallExpr 0x5560caaf46c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5560caaf4690 <col:60> '<bound member function type>' ->xanno 0x5560caadbd58
|             |       `-CXXThisExpr 0x5560caaf4680 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5560caaf4748 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5560caaf4710 <col:73> 'int' lvalue ParmVar 0x5560caadec90 'i' 'int'
|-CXXMethodDecl 0x5560caadefd8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5560caadee48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5560caadeec0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5560caaf4f78 <col:41, line:528:5>
|   |-ParenExpr 0x5560caaf4d00 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf4cd0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf49f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf49c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf48d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf48b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf4878 <col:23> 'int' lvalue ParmVar 0x5560caadee48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf4898 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf49a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf4988 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf48f0 <col:33> 'int' lvalue ParmVar 0x5560caadee48 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf4968 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf4950 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf4910 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf4930 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5560caaf4a50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf4a30 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf4c30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf4c18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf4bf8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf4c70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf4ac0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5560caaf4c88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf4af8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf4ca0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf4b30 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5560caaf4cb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf4be0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf4bc8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf4b88 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5560caaf4f58 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5560caaf4f08 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5560caaf4ed8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5560caaf4e80 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5560caaf4e40 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5560caaf4df0 <col:47, col:56> 'char [48]' lvalue ->c 0x5560caae7150
|     |     |   `-CXXMemberCallExpr 0x5560caaf4dd0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5560caaf4da0 <col:47> '<bound member function type>' ->xanno 0x5560caadbef8
|     |     |       `-CXXThisExpr 0x5560caaf4d90 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5560caaf4e58 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5560caaf4e20 <col:60> 'int' lvalue ParmVar 0x5560caadee48 'i' 'int'
|     `-ImplicitCastExpr 0x5560caaf4f40 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaf4f20 <col:65> 'int16_t':'short' lvalue ParmVar 0x5560caadeec0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5560caadf198 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5560caadf0a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5560caaf5648 <col:36, line:541:5>
|   |-ParenExpr 0x5560caaf53e8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf53b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf5110 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf50e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf4ff0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf4fd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf4f98 <col:23> 'int' lvalue ParmVar 0x5560caadf0a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf4fb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf50c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf50a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf5010 <col:33> 'int' lvalue ParmVar 0x5560caadf0a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf5088 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf5070 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf5030 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf5050 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5560caaf5170 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf5150 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf5318 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf5300 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf52e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf5358 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf51e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5560caaf5370 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf5218 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf5388 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf5250 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5560caaf53a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf52c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf52b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf5270 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5560caaf5638 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5560caaf5620 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5560caaf5608 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5560caaf55d8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5560caaf5580 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5560caaf5550 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5560caaf5500 <col:61, col:70> 'char const[48]' lvalue ->c 0x5560caae7150
|             |   `-CXXMemberCallExpr 0x5560caaf54e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5560caaf54b0 <col:61> '<bound member function type>' ->xanno 0x5560caadbd58
|             |       `-CXXThisExpr 0x5560caaf54a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5560caaf5568 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5560caaf5530 <col:74> 'int' lvalue ParmVar 0x5560caadf0a0 'i' 'int'
|-CXXMethodDecl 0x5560caadf368 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5560caadf258 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5560caadf2d0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5560caadf418 <col:20>
| `-OptimizeNoneAttr 0x5560caadf470 <col:30>
|-CXXMethodDecl 0x5560caadf5a8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5560caadf4b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5560caaf5d18 <col:35, line:562:5>
|   |-ParenExpr 0x5560caaf5ab8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf5a88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf57e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf57b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf56c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf56a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf5668 <col:23> 'int' lvalue ParmVar 0x5560caadf4b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf5688 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf5790 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf5778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf56e0 <col:33> 'int' lvalue ParmVar 0x5560caadf4b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf5758 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf5740 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf5700 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf5720 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5560caaf5840 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf5820 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf59e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf59d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf59b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf5a28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf58b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5560caaf5a40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf58e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf5a58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf5920 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5560caaf5a70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf5998 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf5980 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf5940 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5560caaf5d08 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5560caaf5cf0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5560caaf5cd8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5560caaf5ca8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5560caaf5c50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5560caaf5c20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5560caaf5bd0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5560caae7150
|             |   `-CXXMemberCallExpr 0x5560caaf5bb0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5560caaf5b80 <col:60> '<bound member function type>' ->xanno 0x5560caadbd58
|             |       `-CXXThisExpr 0x5560caaf5b70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5560caaf5c38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5560caaf5c00 <col:73> 'int' lvalue ParmVar 0x5560caadf4b0 'i' 'int'
|-CXXMethodDecl 0x5560caadf7b8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5560caadf668 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5560caadf6e0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5560caaf63f8 <col:41, line:577:5>
|   |-ParenExpr 0x5560caaf6188 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf6158 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf5eb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf5e80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf5d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf5d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf5d38 <col:23> 'int' lvalue ParmVar 0x5560caadf668 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf5d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf5e60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf5e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf5db0 <col:33> 'int' lvalue ParmVar 0x5560caadf668 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf5e28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf5e10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf5dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf5df0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5560caaf5f10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf5ef0 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf60b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf60a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf6080 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf60f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf5f80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5560caaf6110 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf5fb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf6128 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf5ff0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5560caaf6140 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf6068 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf6050 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf6010 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5560caaf63d8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5560caaf6388 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5560caaf6358 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5560caaf62f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5560caaf62c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5560caaf6278 <col:47, col:56> 'char [48]' lvalue ->c 0x5560caae7150
|     |     |   `-CXXMemberCallExpr 0x5560caaf6258 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5560caaf6228 <col:47> '<bound member function type>' ->xanno 0x5560caadbef8
|     |     |       `-CXXThisExpr 0x5560caaf6218 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5560caaf62e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5560caaf62a8 <col:60> 'int' lvalue ParmVar 0x5560caadf668 'i' 'int'
|     `-ImplicitCastExpr 0x5560caaf63c0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaf63a0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5560caadf6e0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5560caadf978 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5560caadf880 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5560caaf6b28 <col:36, line:591:5>
|   |-ParenExpr 0x5560caaf6868 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf6838 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf6590 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf6560 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf6470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf6458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf6418 <col:23> 'int' lvalue ParmVar 0x5560caadf880 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf6438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf6540 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf6528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf6490 <col:33> 'int' lvalue ParmVar 0x5560caadf880 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf6508 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf64f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf64b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf64d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5560caaf65f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf65d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf6798 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf6780 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf6760 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf67d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf6660 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5560caaf67f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf6698 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf6808 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf66d0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5560caaf6820 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf6748 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf6730 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf66f0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5560caaf6b18 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5560caaf6b00 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5560caaf6ae8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5560caaf6ab8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5560caaf6a30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5560caaf6a00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5560caaf69b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5560caae7150
|             |   `-CXXMemberCallExpr 0x5560caaf6990 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5560caaf6960 <col:61> '<bound member function type>' ->xanno 0x5560caadbd58
|             |       `-CXXThisExpr 0x5560caaf6950 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5560caaf6a18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5560caaf69e0 <col:74> 'int' lvalue ParmVar 0x5560caadf880 'i' 'int'
|-CXXMethodDecl 0x5560caadfbc8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5560caadfa38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5560caadfab0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5560caaf7208 <col:42, line:606:5>
|   |-ParenExpr 0x5560caaf6f98 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5560caaf6f68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf6cc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf6c90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf6ba0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf6b88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf6b48 <col:23> 'int' lvalue ParmVar 0x5560caadfa38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf6b68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf6c70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5560caaf6c58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf6bc0 <col:33> 'int' lvalue ParmVar 0x5560caadfa38 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf6c38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf6c20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf6be0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5560caaf6c00 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5560caaf6d20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf6d00 <col:60> 'int' 0
|   |   `-CallExpr 0x5560caaf6ec8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf6eb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf6e90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf6f08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf6d90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5560caaf6f20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf6dc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf6f38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf6e00 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5560caaf6f50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf6e78 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf6e60 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf6e20 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5560caaf71e8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5560caaf7198 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5560caaf7168 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5560caaf7108 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5560caaf70d8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5560caaf7088 <col:48, col:57> 'char [48]' lvalue ->c 0x5560caae7150
|     |     |   `-CXXMemberCallExpr 0x5560caaf7068 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5560caaf7038 <col:48> '<bound member function type>' ->xanno 0x5560caadbef8
|     |     |       `-CXXThisExpr 0x5560caaf7028 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5560caaf70f0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5560caaf70b8 <col:61> 'int' lvalue ParmVar 0x5560caadfa38 'i' 'int'
|     `-ImplicitCastExpr 0x5560caaf71d0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaf71b0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5560caadfab0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5560caadfd60 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5560caadfc90 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5560caaf7a78 <col:33, line:620:5>
|   |-ParenExpr 0x5560caaf77f0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5560caaf77c0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf7410 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf73e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf7280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf7268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf7228 <col:23> 'int' lvalue ParmVar 0x5560caadfc90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf7248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf73c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5560caaf73a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf72a0 <col:33> 'int' lvalue ParmVar 0x5560caadfc90 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf7388 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf7370 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf72c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5560caaf7348 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5560caaf7330 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5560caaf72f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5560caaf7470 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf7450 <col:79> 'int' 0
|   |   `-CallExpr 0x5560caaf7720 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf7708 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf76e8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf7760 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf7558 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5560caaf7778 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf75a0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf7790 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf75d8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5560caaf77a8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf76d0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf76b8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf7678 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5560caaf7a68 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5560caaf7a50 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5560caaf7a38 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5560caaf7a08 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5560caaf7980 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5560caaf7950 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5560caaf7900 <col:67, col:76> 'char const[48]' lvalue ->c 0x5560caae7150
|             |   `-CXXMemberCallExpr 0x5560caaf78e0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5560caaf78b0 <col:67> '<bound member function type>' ->xanno 0x5560caadbd58
|             |       `-CXXThisExpr 0x5560caaf78a0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5560caaf7968 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5560caaf7930 <col:80> 'int' lvalue ParmVar 0x5560caadfc90 'i' 'int'
|-CXXMethodDecl 0x5560caadff78 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5560caadfe20 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5560caadfea0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5560caaf82a0 <col:45, line:635:5>
|   |-ParenExpr 0x5560caaf7fe8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5560caaf7fb8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5560caaf7c80 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5560caaf7c50 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5560caaf7af0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5560caaf7ad8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5560caaf7a98 <col:23> 'int' lvalue ParmVar 0x5560caadfe20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5560caaf7ab8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5560caaf7c30 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5560caaf7c18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5560caaf7b10 <col:33> 'int' lvalue ParmVar 0x5560caadfe20 'i' 'int'
|   |   |     `-BinaryOperator 0x5560caaf7bf8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5560caaf7be0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5560caaf7b30 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5560caadc140 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5560caaf7bb8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5560caaf7ba0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5560caaf7b68 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5560caaf7ce0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5560caaf7cc0 <col:79> 'int' 0
|   |   `-CallExpr 0x5560caaf7f18 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5560caaf7f00 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caaf7ee0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5560ca648420 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5560caaf7f58 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf7d50 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5560caaf7f70 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5560caaf7d98 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5560caaf7f88 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5560caaf7dd0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5560caaf7fa0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5560caaf7ec8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5560caaf7eb0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5560caaf7e68 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5560caaf8280 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5560caaf81e8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5560caaf81b8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5560caaf8158 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5560caaf8128 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5560caaf80d8 <col:54, col:63> 'char [48]' lvalue ->c 0x5560caae7150
|     |     |   `-CXXMemberCallExpr 0x5560caaf80b8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5560caaf8088 <col:54> '<bound member function type>' ->xanno 0x5560caadbef8
|     |     |       `-CXXThisExpr 0x5560caaf8078 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5560caaf8140 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5560caaf8108 <col:67> 'int' lvalue ParmVar 0x5560caadfe20 'i' 'int'
|     `-CXXConstCastExpr 0x5560caaf8250 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5560caaf8238 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5560caaf8200 <col:91> 'const void *' lvalue ParmVar 0x5560caadfea0 'x' 'const void *'
|-CXXMethodDecl 0x5560caae0048 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5560caaf8328 <col:34, line:640:5>
|   `-ReturnStmt 0x5560caaf8318 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5560caaf8300 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5560caaf82d0 <col:16> 'Packet *' lvalue ->_data_packet 0x5560caae7d08
|         `-CXXThisExpr 0x5560caaf82c0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5560caae0188 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5560caae00f8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5560caaf13e8 <col:46> 'bool' true
|-CXXMethodDecl 0x5560caae0308 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5560caae0240 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5560caae03b0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5560caae0b60 <line:660:22> "" ""
| |-EnumConstantDecl 0x5560caae04b0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0bd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0490 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5560caae0470 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5560caad5610 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5560caae0540 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0be8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0520 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5560caae0500 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5560caad56a0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5560caae05d0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae05b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5560caae0590 <col:21> 'int' 0
| |-EnumConstantDecl 0x5560caae0660 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0640 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5560caae0620 <col:19> 'int' 16
| |-EnumConstantDecl 0x5560caae06f0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae06d0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5560caae06b0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5560caae0780 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0760 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5560caae0740 <col:19> 'int' 32
| |-EnumConstantDecl 0x5560caae0810 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c60 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae07f0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5560caae07d0 <col:19> 'int' EnumConstant 0x5560caae0660 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5560caae08a0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c78 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0880 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5560caae0860 <col:19> 'int' EnumConstant 0x5560caae0780 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5560caae0970 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0c90 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0950 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5560caae0930 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5560caae08f0 <col:23> 'int' EnumConstant 0x5560caae08a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5560caae0910 <col:40> 'int' 2
| |-EnumConstantDecl 0x5560caae0a40 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5560caae0ca8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caae0a20 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5560caae0a00 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5560caae09c0 <col:23> 'int' EnumConstant 0x5560caae08a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5560caae09e0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5560caae0b10 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5560caae0cc0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caae0af0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5560caae0ad0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5560caae0a90 <col:23> 'int' EnumConstant 0x5560caae08a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5560caae0ab0 <col:40> 'int' 8
|-CXXMethodDecl 0x5560caae0d00 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5560caae0da0 <col:68> "" ""
|-CXXMethodDecl 0x5560caae0e38 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5560caae0ed8 <col:45> "" ""
|-CXXMethodDecl 0x5560caae0f70 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5560caae1010 <col:57> "" ""
|-CXXMethodDecl 0x5560caae10a8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5560caae1148 <col:45> "" ""
|-CXXMethodDecl 0x5560caae11e0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5560caae1280 <col:57> "" ""
|-CXXMethodDecl 0x5560caae1310 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5560caae13b0 <col:51> "" ""
|-CXXMethodDecl 0x5560caae1440 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5560caae14e0 <col:63> "" ""
|-CXXMethodDecl 0x5560caae1570 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5560caae1610 <col:53> "" ""
|-CXXMethodDecl 0x5560caae16a0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5560caae1740 <col:65> "" ""
|-CXXMethodDecl 0x5560caae1858 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5560caae17c8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5560caae1900 <col:61> "" ""
|-CXXMethodDecl 0x5560caae1a98 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5560caae1988 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5560caae1a00 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5560caae1b48 <col:67> "" ""
|-CXXMethodDecl 0x5560caae1c60 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5560caae1bd0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5560caae1d08 <col:63> "" ""
|-CXXMethodDecl 0x5560caae1ea0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5560caae1d90 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5560caae1e08 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5560caae1f50 <col:69> "" ""
|-CXXMethodDecl 0x5560caae2068 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5560caae1fd8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5560caae2110 <col:63> "" ""
|-CXXMethodDecl 0x5560caae4d28 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5560caae4c18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5560caae4c90 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5560caae4dd8 <col:69> "" ""
|-CXXMethodDecl 0x5560caae4ef0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5560caae4e60 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5560caae4f98 <col:62> "" ""
|-CXXMethodDecl 0x5560caae5130 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5560caae5020 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5560caae5098 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5560caae51e0 <col:68> "" ""
|-CXXMethodDecl 0x5560caae52f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5560caae5268 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5560caae53a0 <col:63> "" ""
|-CXXMethodDecl 0x5560caae5538 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5560caae5428 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5560caae54a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5560caae55e8 <col:69> "" ""
|-CXXMethodDecl 0x5560caae5678 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5560caae5718 <col:64> "" ""
|-CXXMethodDecl 0x5560caae57a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5560caae5848 <col:52> "" ""
|-CXXMethodDecl 0x5560caae58d8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5560caae5978 <col:67> "" ""
|-CXXMethodDecl 0x5560caae5a08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5560caae5aa8 <col:55> "" ""
|-CXXMethodDecl 0x5560caae5bc0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5560caae5b30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5560caae5c68 <col:58> "" ""
|-CXXMethodDecl 0x5560caae5e00 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5560caae5cf0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5560caae5d68 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5560caae5eb0 <col:62> "" ""
|-CXXMethodDecl 0x5560caae5fc8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5560caae5f38 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5560caae6070 <col:58> "" ""
|-CXXMethodDecl 0x5560caae6208 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5560caae60f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5560caae6170 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5560caae62b8 <col:62> "" ""
|-CXXMethodDecl 0x5560caae63d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5560caae6340 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5560caae6478 <col:60> "" ""
|-CXXMethodDecl 0x5560caae6610 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5560caae6500 <col:34> col:37 'int'
| |-ParmVarDecl 0x5560caae6578 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5560caae66c0 <col:64> "" ""
|-CXXMethodDecl 0x5560caae67d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5560caae6748 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5560caae6880 <col:58> "" ""
|-CXXMethodDecl 0x5560caae6a18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5560caae6908 <col:33> col:36 'int'
| |-ParmVarDecl 0x5560caae6980 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5560caae6ac8 <col:62> "" ""
|-CXXMethodDecl 0x5560caae6be0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5560caae6b50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5560caae6c88 <col:59> "" ""
|-CXXMethodDecl 0x5560caae6e20 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5560caae6d10 <col:33> col:36 'int'
| |-ParmVarDecl 0x5560caae6d88 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5560caae6ed0 <col:63> "" ""
|-AccessSpecDecl 0x5560caae6f40 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5560caae6f68 prev 0x5560caadbc30 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5560caae7060 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5560caae7150 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5560caae7278 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5560caae73f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5560caae7578 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5560caae76f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5560caaf84a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5560caaf8d18 <col:11>
| |-CXXDestructorDecl 0x5560caaf8580 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5560caaf86b8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5560caaf86b8
| | `-ParmVarDecl 0x5560caaf87c8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5560caaf8868 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5560caaf8868
| | `-ParmVarDecl 0x5560caaf8978 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5560caafb738 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5560caafb848 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5560caafbac8 <col:11>
| |   `-ReturnStmt 0x5560caafbab8 <col:11>
| |     `-UnaryOperator 0x5560caafbaa0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5560caafba90 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5560caafb8b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5560caafb8b8
|   `-ParmVarDecl 0x5560caafb9c8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5560caae7760 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5560caae7878 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5560caae7918 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5560caae7980 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5560caae79e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5560caae7a50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5560caae7ab0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5560caae7b70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5560caae7bd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5560caae7c30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5560caaf83b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5560caae7918 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5560caaf8d28 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5560caaf8d80 <col:12>
| |-CXXConstructorDecl 0x5560caaf89e8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5560caaf89e8
| | `-ParmVarDecl 0x5560caaf8af8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5560caaf8b98 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5560caaf8b98
| | `-ParmVarDecl 0x5560caaf8ca8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5560caafae20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5560caae7ca8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5560caae7d08 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5560caae7d70 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5560caae7dd8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5560caae7e40 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5560caae7ea8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5560caae7f08 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5560caae7f68 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5560caae7fd0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5560caae8058 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5560caae7ca8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5560caaf8350 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5560caae7f08 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5560caaf8d90 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5560caaf8df0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5560caae81f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5560caae8138 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5560caae82f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5560caae84d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5560caae83e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5560caae87a8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5560caae8590 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5560caae8608 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5560caae8680 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caae89c8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5560caae8878 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5560caae88f0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5560caaf0f28 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5560caae8a88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5560caae8b00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5560caae8b78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5560caaf1080 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5560caaf0ff0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaf11c8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5560caaf1138 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5560caaf12c0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560caaa6cc0 prev 0x5560caa9db00 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560caaa6db8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5560caaa6e58 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5560caaadc20 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5560caaae008 <col:11>
|-CXXConstructorDecl 0x5560caaadd00 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560caaadde8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5560caaae750 <col:11>
|-CXXConstructorDecl 0x5560caaade88 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5560caaadf98 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5560caaaffa8 <col:11>
|-CXXDestructorDecl 0x5560caaaf2b8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5560ca7b5888 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560ca7b5998 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5560ca7b6260 <col:11>
|   `-ReturnStmt 0x5560ca7b6250 <col:11>
|     `-UnaryOperator 0x5560ca7b6238 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560ca7b6228 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5560ca7b5a08 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x5560ca7b5a08
  `-ParmVarDecl 0x5560ca7b5b18 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560caa9ccb8 prev 0x5560caa9c9c8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560caa9cdb0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5560caa9ce40 <col:19, col:25> col:19 public
|-TypedefDecl 0x5560caa9ce78 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5560ca701a50 'int32_t' sugar
|   |-Typedef 0x5560ca615328 'int32_t'
|   `-TypedefType 0x5560ca5ee510 '__int32_t' sugar
|     |-Typedef 0x5560ca5ee128 '__int32_t'
|     `-BuiltinType 0x5560ca5ac580 'int'
|-TypedefDecl 0x5560caa9cee0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5560ca701c10 'int64_t' sugar
|   |-Typedef 0x5560ca615390 'int64_t'
|   `-TypedefType 0x5560ca5ee630 '__int64_t' sugar
|     |-Typedef 0x5560ca5ee208 '__int64_t'
|     `-BuiltinType 0x5560ca5ac5a0 'long'
|-EnumDecl 0x5560caa9cf38 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5560caa9d0b0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5560caa9d090 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5560caa9d068 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5560caa9d050 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5560caa9d020 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5560caa9d1a8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5560caa9d188 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5560caa9d160 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5560caa9d148 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5560caa9d120 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5560caa9d100 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5560caa9d1f8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5560caa9d300 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d850 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d2e0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5560caa9d2c0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5560caa9d390 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d868 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d370 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5560caa9d350 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5560caa9d420 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d880 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d400 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5560caa9d3e0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5560caa9d4b0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d898 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d490 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5560caa9d470 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5560caa9d540 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d8b0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d520 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5560caa9d500 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5560caa9d5d0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d8c8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d5b0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5560caa9d590 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5560caa9d660 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d8e0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d640 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5560caa9d620 <col:26> 'int' EnumConstant 0x5560caa9d300 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5560caa9d730 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5560caa9d8f8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caa9d710 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5560caa9d6f0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5560caa9d6b0 <col:27> 'int' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5560caa9d6d0 <col:44> 'int' EnumConstant 0x5560caa9d5d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5560caa9d800 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5560caa9d910 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caa9d7e0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5560caa9d7c0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5560caa9d780 <col:27> 'int' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5560caa9d7a0 <col:44> 'int' EnumConstant 0x5560caa9d4b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5560caa9d928 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5560caa9da30 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5560caa9da80 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caa9da10 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5560caa9d9f0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5560caa9daa8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5560ca701680 'uninitialized_type'
|   `-CXXRecord 0x5560ca7015e8 'uninitialized_type'
|-CXXRecordDecl 0x5560caa9db00 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5560caa9dc10 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae018 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560caaae138 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5560caaae0f0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5560caaae080 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caaae070 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5560caaae0b0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5560caaae120 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5560caaae0d0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5560caa9de58 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5560caa9dcd0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5560caa9dd48 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5560caaa9950 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5560caaa9930 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae150 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560caaae2a0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5560caaae228 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5560caaae1b8 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caaae1a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5560caaae270 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5560caaae258 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5560caaae1e8 <col:16> 'long' lvalue ParmVar 0x5560caa9dcd0 'sec' 'long'
|     `-ImplicitCastExpr 0x5560caaae288 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaae208 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caa9dd48 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5560caa9e0b8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5560caa9df28 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5560caa9dfa0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5560caaa9988 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5560caaa9968 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae2b8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560caaae3f0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5560caaae390 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5560caaae320 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caaae310 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5560caaae3c0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5560caaae350 <col:16> 'int' lvalue ParmVar 0x5560caa9df28 'sec' 'int'
|     `-ImplicitCastExpr 0x5560caaae3d8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaae370 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caa9dfa0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5560caa9e318 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5560caa9e188 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5560caa9e200 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5560caaa99c0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5560caaa99a0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae408 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560caaae558 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5560caaae4e0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5560caaae470 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caaae460 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5560caaae528 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5560caaae510 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5560caaae4a0 <col:16> 'unsigned long' lvalue ParmVar 0x5560caa9e188 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5560caaae540 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaae4c0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caa9e200 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5560caa9f4b0 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5560caa9e3e8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5560caa9e460 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5560caaa99f8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5560caaa99d8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae570 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560caaae6c0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5560caaae648 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5560caaae5d8 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caaae5c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5560caaae690 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5560caaae678 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5560caaae608 <col:16> 'unsigned int' lvalue ParmVar 0x5560caa9e3e8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5560caaae6a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5560caaae628 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caa9e460 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5560caa9f610 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5560caa9f580 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5560caa9f7a8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5560caa9f6e8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5560caa9f9d8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5560caa9f8e0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5560caa9fb88 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5560caa9fac8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae760 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5560caaae6d8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5560caa9fac8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5560caaae7c0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5560caa9fd58 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5560caa9fc98 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaae7d0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5560caaae880 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5560caaae858 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5560caaae828 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5560caa9fc98 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5560caa9ff48 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5560caa9fec0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5560caa9ca60 'Timestamp'
|   | `-CXXRecord 0x5560caa9ccb8 'Timestamp'
|   `-ParenType 0x5560caa9fe60 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5560caa9fe30 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5560caa9d000 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5560caa9ce78 'seconds_type'
|         `-TypedefType 0x5560ca701a50 'int32_t' sugar
|           |-Typedef 0x5560ca615328 'int32_t'
|           `-TypedefType 0x5560ca5ee510 '__int32_t' sugar
|             |-Typedef 0x5560ca5ee128 '__int32_t'
|             `-BuiltinType 0x5560ca5ac580 'int'
|-CXXConversionDecl 0x5560caaa0088 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5560caaa0158 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5560caaae988 <col:37, line:231:5>
|   `-ReturnStmt 0x5560caaae978 <line:227:9, col:23>
|     `-BinaryOperator 0x5560caaae958 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5560caaae928 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5560caaae8d8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5560caaa6e58
|       |   `-MemberExpr 0x5560caaae8a8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5560caaa7e08
|       |     `-CXXThisExpr 0x5560caaae898 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5560caaae940 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5560caaae908 <col:23> 'int' 0
|-CXXMethodDecl 0x5560caaa0218 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5560caaa02d8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caaa0398 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caaa0458 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caaa0518 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5560caaa0688 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5560caaa05c8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5560caaa07d0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5560caaa0740 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa0898 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5560caaa0938 <col:54> "" ""
|-CXXMethodDecl 0x5560caaa09c8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5560caaa0a68 <col:54> "" ""
|-CXXMethodDecl 0x5560caaa0af8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5560caaa0b98 <col:54> "" ""
|-CXXMethodDecl 0x5560caaa0c98 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5560caaa0d68 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5560caaa0e98 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5560caaa0f90 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5560caaa10c8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5560caaaeba0 <col:39, line:271:5>
|   `-ReturnStmt 0x5560caaaeb90 <line:267:9, col:61>
|     `-CallExpr 0x5560caaaeb30 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5560caaaeb18 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5560caaae9a0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5560caaa8138 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5560caaaeb60 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5560caaaea00 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5560caaa6e58
|       |   `-MemberExpr 0x5560caaae9d0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5560caaa7e08
|       |     `-CXXThisExpr 0x5560caaae9c0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5560caaaeb78 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5560caaaeaa0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5560caaaea70 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5560caaaea30 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5560caaaea88 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5560caaaea50 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d5d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa1188 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5560caaaed60 <col:39, line:279:5>
|   `-ReturnStmt 0x5560caaaed50 <line:275:9, col:61>
|     `-CallExpr 0x5560caaaecf0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5560caaaecd8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5560caaaebb8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5560caaa8138 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5560caaaed20 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5560caaaec18 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5560caaa6e58
|       |   `-MemberExpr 0x5560caaaebe8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5560caaa7e08
|       |     `-CXXThisExpr 0x5560caaaebd8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5560caaaed38 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5560caaaecb8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5560caaaec88 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5560caaaec48 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5560caaaeca0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5560caaaec68 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d4b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa1248 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5560caaaeef8 <col:39, line:287:5>
|   `-ReturnStmt 0x5560caaaeee8 <line:283:9, col:53>
|     `-BinaryOperator 0x5560caaaeec8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5560caaaee98 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5560caaaedb8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5560caaa6e58
|       |   `-MemberExpr 0x5560caaaed88 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5560caaa7e08
|       |     `-CXXThisExpr 0x5560caaaed78 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5560caaaeeb0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5560caaaee78 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5560caaaee58 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5560caaaee28 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caaaede8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d300 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caaaee40 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caaaee08 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa1338 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5560caab0190 <col:40, line:293:5>
|   |-DeclStmt 0x5560caaaf040 <line:291:9, col:48>
|   | `-VarDecl 0x5560caaaef20 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5560caaaf020 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5560caaaefc8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5560caaaef98 <col:22> '<bound member function type>' ->subsec 0x5560caaa02d8
|   |     |   `-CXXThisExpr 0x5560caaaef88 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5560caaaf008 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5560caaaefe8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d730 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5560caab0180 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5560caab0168 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5560caab0138 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caab0120 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5560caab0100 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5560caab00d0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5560caaafe68 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5560caaafe50 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5560caaaf058 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5560caaaef20 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5560caab0070 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5560caab0058 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5560caab0028 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5560caaafe80 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5560caaafdf0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5560caaafdd8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5560caaafd88 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5560caa9cc08 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5560caaafd28 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5560caaaf088 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5560caaaf078 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5560caaafd70 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5560caaafd58 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5560caaaf548 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5560caaaf0b0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5560caaaf140 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5560caaaf110 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5560caaaf0d0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d730 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5560caaaf128 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5560caaaf0f0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5560caaaef20 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5560caab00a0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5560caaafe38 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5560caaafe28 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5560caaa13f8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5560caab06e8 <col:40, line:302:5>
|   |-DeclStmt 0x5560caab02e0 <line:297:9, col:48>
|   | `-VarDecl 0x5560caab01c0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5560caab02c0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5560caab0268 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5560caab0238 <col:22> '<bound member function type>' ->subsec 0x5560caaa02d8
|   |     |   `-CXXThisExpr 0x5560caab0228 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5560caab02a8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5560caab0288 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d800 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5560caab06d8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5560caab06c0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5560caab0690 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caab0678 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5560caab0658 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5560caab0628 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5560caab0550 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5560caab0538 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5560caab02f8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5560caab01c0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5560caab05c8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5560caab05b0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5560caab0580 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5560caab0568 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5560caab04d8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5560caab04c0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5560caab04a0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5560caa9cc08 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5560caab0440 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5560caab0328 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5560caab0318 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5560caab0488 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5560caab0470 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5560caab0400 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5560caab0350 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5560caab03e0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5560caab03b0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5560caab0370 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d800 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5560caab03c8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5560caab0390 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5560caab01c0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5560caab05f8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5560caab0520 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5560caab0510 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5560caaa14b8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5560caab0770 <col:40, line:306:5>
|   `-ReturnStmt 0x5560caab0760 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5560caab0730 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5560caab0718 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5560caab0708 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5560caaa1658 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5560caaa1568 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa1828 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5560caaa1730 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5560caaa1918 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5560caaa1a88 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5560caaa19c8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5560caab08b8 <col:56, line:320:5>
|   `-ReturnStmt 0x5560caab08a8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5560caab0890 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5560caab0860 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caab0848 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5560caab0808 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5560caab07d8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5560caab0798 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa19c8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5560caab07f0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5560caab07b8 <col:31> 'int' 0
|-CXXMethodDecl 0x5560caaa1cc8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa1b40 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa1bb8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caab0a88 <col:72, line:326:5>
|   `-ReturnStmt 0x5560caab0a78 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5560caab0a60 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5560caab0a30 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caab0a18 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5560caab09d8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5560caab09c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5560caab08e0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa1b40 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5560caab0980 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5560caab0968 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5560caab0900 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5560caaa65b0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5560caab09a8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5560caab0920 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa1bb8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa1e78 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5560caaa1d88 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5560caab1150 <col:56, line:337:5>
|   |-DeclStmt 0x5560caab0d88 <line:329:9, col:51>
|   | `-VarDecl 0x5560caab0ab0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5560caab0d70 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5560caab0d40 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5560caab0d28 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5560caab0d10 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5560caab0ce0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5560caab0cc8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5560caab0cb0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5560caab0ba0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5560caab0f40 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5560caab0df0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5560caaa6e58
|   | | `-MemberExpr 0x5560caab0dc0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5560caaa7e08
|   | |   `-DeclRefExpr 0x5560caab0da0 <col:9> 'Timestamp' lvalue Var 0x5560caab0ab0 't' 'Timestamp'
|   | `-BinaryOperator 0x5560caab0f20 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5560caab0ef0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5560caab0e20 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5560caaa1d88 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5560caab0f08 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5560caab0ed0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5560caab0eb0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5560caab0e80 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5560caab0e40 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5560caab0e98 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5560caab0e60 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d5d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5560caab1138 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5560caab1108 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5560caab10f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5560caab10d0 <col:16> 'Timestamp' lvalue Var 0x5560caab0ab0 't' 'Timestamp'
|-CXXMethodDecl 0x5560caaa2040 <line:341:5, line:343:5> line:341:29 used make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa1f30 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa1fa8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caab1308 <col:72, line:343:5>
|   `-ReturnStmt 0x5560caab12f8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5560caab12e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5560caab12b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caab1298 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5560caab1258 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5560caab1240 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5560caab1188 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa1f30 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5560caab1200 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5560caab11e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5560caab11a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5560caaa66f8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5560caab1228 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5560caab11c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa1fa8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa2190 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5560caaa2100 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5560caab1750 <col:56, line:354:5>
|   |-DeclStmt 0x5560caab14f8 <line:346:9, col:51>
|   | `-VarDecl 0x5560caab1330 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5560caab14e0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5560caab14b0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5560caab1498 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5560caab1480 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5560caab1450 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5560caab1438 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5560caab1420 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5560caab13f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5560caab16b0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5560caab1560 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5560caaa6e58
|   | | `-MemberExpr 0x5560caab1530 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5560caaa7e08
|   | |   `-DeclRefExpr 0x5560caab1510 <col:9> 'Timestamp' lvalue Var 0x5560caab1330 't' 'Timestamp'
|   | `-BinaryOperator 0x5560caab1690 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5560caab1660 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5560caab1590 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5560caaa2100 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5560caab1678 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5560caab1640 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5560caab1620 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5560caab15f0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5560caab15b0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5560caab1608 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5560caab15d0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d4b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5560caab1738 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5560caab1708 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5560caab16f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5560caab16d0 <col:16> 'Timestamp' lvalue Var 0x5560caab1330 't' 'Timestamp'
|-CXXMethodDecl 0x5560caaa2358 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa2248 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa22c0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caab1908 <col:72, line:360:5>
|   `-ReturnStmt 0x5560caab18f8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5560caab18e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5560caab18b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caab1898 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5560caab1858 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5560caab1840 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5560caab1788 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa2248 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5560caab1800 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5560caab17e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5560caab17a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5560caaa6840 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5560caab1828 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5560caab17c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa22c0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa24a8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5560caaa2418 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5560caabe278 <col:56, line:371:5>
|   |-DeclStmt 0x5560caab1af8 <line:363:9, col:51>
|   | `-VarDecl 0x5560caab1930 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5560caab1ae0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5560caab1ab0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5560caab1a98 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5560caab1a80 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5560caab1a50 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5560caab1a38 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5560caab1a20 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5560caab19f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5560caabe1d8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5560caab1b60 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5560caaa6e58
|   | | `-MemberExpr 0x5560caab1b30 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5560caaa7e08
|   | |   `-DeclRefExpr 0x5560caab1b10 <col:9> 'Timestamp' lvalue Var 0x5560caab1930 't' 'Timestamp'
|   | `-CallExpr 0x5560caabe178 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5560caabe160 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5560caab1b90 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5560caaa8138 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5560caabe1a8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5560caab1bb0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5560caaa2418 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5560caabe1c0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5560caabe140 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5560caabe110 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5560caab1bd0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d300 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5560caabe128 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5560caab1bf0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5560caabe260 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5560caabe230 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5560caabe218 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5560caabe1f8 <col:16> 'Timestamp' lvalue Var 0x5560caab1930 't' 'Timestamp'
|-CXXMethodDecl 0x5560caaa2598 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5560caabe3b8 <col:39, line:377:5>
|   `-ReturnStmt 0x5560caabe3a8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5560caabe390 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5560caabe360 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5560caabe348 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5560caabe308 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5560caabe2b0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5560caabe2f0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5560caabe2d0 <col:29> 'int' 1
|-CXXMethodDecl 0x5560caaa2658 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5560caabe498 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5560caabe450 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5560caabe3e0 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caabe3d0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5560caabe410 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5560caabe480 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5560caabe430 <col:19> 'int' 0
|-CXXMethodDecl 0x5560caaa2858 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5560caaa2708 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa2780 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5560caaa9a30 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5560caaa9a10 <col:60> 'int' 0
| `-CompoundStmt 0x5560caabe690 <col:63, line:395:5>
|   `-BinaryOperator 0x5560caabe670 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5560caabe4f0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5560caaa6e58
|     | `-MemberExpr 0x5560caabe4c0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5560caaa7e08
|     |   `-CXXThisExpr 0x5560caabe4b0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5560caabe650 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5560caabe5e0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5560caabe580 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5560caabe568 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5560caabe550 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5560caabe520 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa2708 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5560caabe5c8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5560caabe5a8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5560caabe638 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5560caabe620 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5560caabe600 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa2780 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa2a28 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5560caaa2918 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa2990 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabe7e8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5560caabe7a0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5560caabe6b8 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caabe6a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5560caabe7d0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5560caabe6e8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa2918 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5560caabe760 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5560caabe748 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5560caabe708 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5560caaa66f8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5560caabe788 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5560caabe728 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa2990 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa2bf8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5560caaa2ae8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa2b60 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabe940 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5560caabe8f8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5560caabe810 <col:9> '<bound member function type>' ->assign 0x5560caaa2858
|     | `-CXXThisExpr 0x5560caabe800 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5560caabe928 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5560caabe840 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5560caaa2ae8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5560caabe8b8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5560caabe8a0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5560caabe860 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5560caaa6840 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5560caabe8e0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5560caabe880 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa2b60 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa2dc8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5560caaa2cb8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa2d30 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5560caaa9a68 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5560caaa9a48 <col:57> 'int' 0
| `-DeprecatedAttr 0x5560caaa2e78 <col:75> "" ""
|-CXXMethodDecl 0x5560caaa3008 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5560caaa2ef8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa2f70 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5560caaa30b8 <col:74> "" ""
|-CXXMethodDecl 0x5560caaa3248 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5560caaa3138 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5560caaa31b0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5560caaa32f8 <col:74> "" ""
|-CXXMethodDecl 0x5560caaa3388 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5560caaa3428 <col:42> "" ""
|-CXXMethodDecl 0x5560caaa5c60 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5560caaa5b40 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5560caaa5bc0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5560caaa5d30 <line:432:5, col:33> col:29 used now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5560caaa5df0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5560caaa5e90 <col:20>
| `-OptimizeNoneAttr 0x5560caaa5ee8 <col:30>
|-CXXMethodDecl 0x5560caaa5f30 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5560caaa5ff0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5560caaa60b0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5560caaa6170 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5560caaa6230 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5560caaa62f0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5560caaa63b0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5560caaa6470 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5560caaa65b0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa6520 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabea88 <col:58, line:512:5>
|   `-ReturnStmt 0x5560caabea78 <line:511:9, col:53>
|     `-BinaryOperator 0x5560caabea58 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5560caabea28 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabe958 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa6520 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5560caabea40 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5560caabea08 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5560caabe9e8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5560caabe9b8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caabe978 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caabe9d0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caabe998 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d5d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa66f8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa6668 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabebd0 <col:58, line:516:5>
|   `-ReturnStmt 0x5560caabebc0 <line:515:9, col:53>
|     `-BinaryOperator 0x5560caabeba0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5560caabeb70 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabeaa0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa6668 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5560caabeb88 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5560caabeb50 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5560caabeb30 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5560caabeb00 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caabeac0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caabeb18 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caabeae0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d4b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa6840 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa67b0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabed18 <col:58, line:520:5>
|   `-ReturnStmt 0x5560caabed08 <line:519:9, col:53>
|     `-BinaryOperator 0x5560caabece8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5560caabecb8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabebe8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa67b0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5560caabecd0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5560caabec98 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5560caabec78 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5560caabec48 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caabec08 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d300 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caabec60 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caabec28 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa6988 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa68f8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabee60 <col:60, line:524:5>
|   `-ReturnStmt 0x5560caabee50 <line:523:9, col:55>
|     `-BinaryOperator 0x5560caabee30 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5560caabee00 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabed30 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa68f8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5560caabee18 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5560caabede0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5560caabedc0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5560caabed90 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caabed50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caabeda8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caabed70 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d5d0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa6ad0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa6a40 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabefa8 <col:60, line:528:5>
|   `-ReturnStmt 0x5560caabef98 <line:527:9, col:55>
|     `-BinaryOperator 0x5560caabef78 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5560caabef48 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabee78 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa6a40 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5560caabef60 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5560caabef28 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5560caabef08 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5560caabeed8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caabee98 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caabeef0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caabeeb8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d4b0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5560caaa6c18 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa6b88 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabf0f0 <col:60, line:532:5>
|   `-ReturnStmt 0x5560caabf0e0 <line:531:9, col:55>
|     `-BinaryOperator 0x5560caabf0c0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5560caabf090 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabefc0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa6b88 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5560caabf0a8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5560caabf070 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5560caabf050 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5560caabf020 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5560caabefe0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d300 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5560caabf038 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5560caabf000 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5560caa9d660 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5560caaa6cc0 prev 0x5560caa9db00 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5560caaa6db8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5560caaa6e58 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5560caaadc20 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5560caaae008 <col:11>
| |-CXXConstructorDecl 0x5560caaadd00 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5560caaadde8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5560caaae750 <col:11>
| |-CXXConstructorDecl 0x5560caaade88 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5560caaadf98 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5560caaaffa8 <col:11>
| |-CXXDestructorDecl 0x5560caaaf2b8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5560ca7b5888 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5560ca7b5998 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5560ca7b6260 <col:11>
| |   `-ReturnStmt 0x5560ca7b6250 <col:11>
| |     `-UnaryOperator 0x5560ca7b6238 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5560ca7b6228 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5560ca7b5a08 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x5560ca7b5a08
|   `-ParmVarDecl 0x5560ca7b5b18 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x5560caaa6ec0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5560caaa6fc0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5560caaa71c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caaa6fa0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5560caaa6f80 <col:21> 'int' 0
| |-EnumConstantDecl 0x5560caaa7050 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5560caaa71d8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caaa7030 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5560caaa7010 <col:23> 'int' 1
| |-EnumConstantDecl 0x5560caaa70e0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5560caaa71f0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5560caaa70c0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5560caaa70a0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5560caaa7170 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5560caaa7208 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5560caaa7150 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5560caaa7130 <col:27> 'int' 3
|-CXXMethodDecl 0x5560caaa7248 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5560caaa7310 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5560caaa7518 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5560caaa73c0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5560caaa7440 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5560caaa9a80 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5560caaa7728 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5560caaa75d8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5560caaa7650 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5560caaa77f8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5560caaa78b8 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5560caaa7a28 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5560caaa7968 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5560caaa7af0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5560caaa7bb0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5560caaa7c70 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5560caaa7d30 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5560caaa7dd0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5560caaa7e08 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5560caaa7e78 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5560caabf108 <col:27, line:684:5>
|-CXXMethodDecl 0x5560caaa7f38 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5560caabf118 <col:27, line:696:5>
|-CXXMethodDecl 0x5560caaa8138 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa7fe8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5560caaa8060 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabf2a0 <col:66, line:700:5>
|   `-ReturnStmt 0x5560caabf290 <line:699:9, col:31>
|     `-CallExpr 0x5560caabf230 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5560caabf218 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5560caabf1c8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5560ca92a4e8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5560caabf260 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5560caabf188 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5560caaa7fe8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5560caabf278 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5560caabf1a8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa8060 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5560caaa84a8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5560caaa81f8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5560caaa8270 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5560caaa82e8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5560caaa8360 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5560caabf5f0 <col:64, line:707:5>
|   |-DeclStmt 0x5560caabf330 <line:704:9, col:24>
|   | `-VarDecl 0x5560caabf2c8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5560caabf540 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5560caabf348 <col:9> 'int32_t':'int' lvalue ParmVar 0x5560caaa8270 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5560caabf528 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5560caabf4c0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5560caabf4a8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5560caabf428 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5560ca92f7b8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5560caabf4f8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5560caabf3c8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5560caaa82e8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5560caabf510 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5560caabf3e8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5560caaa8360 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5560caabf408 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5560caabf2c8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5560caabf5d0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5560caabf560 <col:9> 'int32_t':'int' lvalue ParmVar 0x5560caaa81f8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5560caabf5b8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5560caabf5a0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5560caabf580 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5560caabf2c8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5560caaa8748 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5560caaa8578 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5560caaa85f0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5560caaa8668 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5560caaa89e8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5560caaa8810 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5560caaa8888 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5560caaa8900 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5560caaa8b78 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5560caaa8ab0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5560caaa8d78 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5560caaa8c30 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5560caaa8ca8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5560caaa9048 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5560caaa8f88 parent 0x5560ca5ac488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5560caaa8e38 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5560caaa8eb0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5560caaa9268 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5560caaa91a8 parent 0x5560ca5ac488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5560caaa9098 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5560caaa9110 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5560caaa9430 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5560caaa9378 parent 0x5560ca5ac488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5560caaa92b8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5560caaa96b8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5560caaa95f8 parent 0x5560ca5ac488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5560caaa94a8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5560caaa9520 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5560caaa98d8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5560caaa9818 parent 0x5560ca5ac488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5560caaa9708 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5560caaa9780 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5560caaaf160 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560caaaf248 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaafcb8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5560caaafc70 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5560caaa7e08
| |     `-DeclRefExpr 0x5560caaafc50 <col:7> 'const Timestamp' lvalue ParmVar 0x5560caaaf248 '' 'const Timestamp &'
| `-CompoundStmt 0x5560caaafd18 <col:7>
|-CXXConstructorDecl 0x5560caaaf3c8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5560caaaf4d8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5560caaa7e08 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5560caaaffb8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5560caaaff60 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5560caaa7e08
| |     `-CXXStaticCastExpr 0x5560caaaff30 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5560caaaff00 <col:7> 'Timestamp' lvalue ParmVar 0x5560caaaf4d8 '' 'Timestamp &&'
| `-CompoundStmt 0x5560caab0018 <col:7>
|-CXXDestructorDecl 0x5560caaaf588 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5560ca7b56d8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5560ca7b57e8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5560ca7b62d8 <col:7>
|   |-CXXMemberCallExpr 0x5560ca7b6278 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5560ca7b61b8 <col:7> '<bound member function type>' .operator= 0x5560ca7b5888
|   | | `-MemberExpr 0x5560ca7b60c8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5560caaa7e08
|   | |   `-CXXThisExpr 0x5560ca7b60b8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5560ca7b6188 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5560caaa7e08
|   |   `-DeclRefExpr 0x5560ca7b6168 <col:7> 'const Timestamp' lvalue ParmVar 0x5560ca7b57e8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5560ca7b62c8 <col:7>
|     `-UnaryOperator 0x5560ca7b62b0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5560ca7b62a0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5560ca7b5b88 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x5560ca7b5b88
  `-ParmVarDecl 0x5560ca7b5c98 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560ca7015e8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5560ca701708 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5560ca913b70 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5560ca913c50 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5560ca913c50
| `-ParmVarDecl 0x5560ca913d38 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5560ca913dd8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5560ca913dd8
| `-ParmVarDecl 0x5560ca913ee8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x5560caab0bd0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5560cabd1a28 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5560cabd1b88 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5560cabd1c18 <col:32, col:38> col:32 public
|-TypedefDecl 0x5560cabd1c50 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5560ca701970 'uint32_t' sugar
|   |-Typedef 0x5560ca6154c8 'uint32_t'
|   `-TypedefType 0x5560ca5ee5a0 '__uint32_t' sugar
|     |-Typedef 0x5560ca5ee198 '__uint32_t'
|     `-BuiltinType 0x5560ca5ac620 'unsigned int'
|-CXXConstructorDecl 0x5560cabd1d98 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5560cabd1cc0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5560cabd3278 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5560cabd37b8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5560cabd2b30 'base' 'int'
| | `-ImplicitCastExpr 0x5560cabd3318 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5560cabd32d8 <col:16> 'int' lvalue ParmVar 0x5560cabd1cc0 'b' 'int'
| `-CompoundStmt 0x5560cabd3828 <col:19, line:1046:5>
|-CXXMethodDecl 0x5560cabd2290 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5560cabd1e60 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5560cabd1ee0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5560cabd1f58 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5560cabd1fd8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5560cabd2098 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5560cabd2118 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5560cabd26e8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5560cabd2360 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5560cabd2648 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5560cabd2408 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5560cabd24a8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5560cabd2520 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5560cabd3298 <col:82> 'const ArgContext' lvalue Var 0x5560cabc8d38 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5560cabd4758 <col:94, line:1067:5>
| |   |-DeclStmt 0x5560cabd39b8 <line:1054:9, col:64>
| |   | `-VarDecl 0x5560cabd3848 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5560cabd3970 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5560cabd3bd8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5560cabd39e8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5560cabd3bb0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5560cabd3b90 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5560cabd3b40 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5560cabd3b20 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5560cabd3ac8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5560cabd3a78 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5560cabd3aa8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5560cabd3b08 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5560cabd3ae8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5560cabd3b70 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5560cabd3d38 <line:1056:9, col:27>
| |   | `-VarDecl 0x5560cabd3cd0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5560cabd4180 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5560cabd40b0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5560cabd4030 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5560caacbf48 0x5560ca915528 0x5560ca915200 0x5560ca905a30 0x5560ca9056e0 0x5560ca904fd0 0x5560ca8d77a0 0x5560ca8647a0
| |   | | |-CallExpr 0x5560cabd3f70 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5560cabd3d60 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5560cabd3e10 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5560cabd3de0 <col:19, col:23> '<bound member function type>' .begin 0x5560ca8f4b98
| |   | | | |   `-DeclRefExpr 0x5560cabd3dc0 <col:19> 'const String' lvalue ParmVar 0x5560cabd2408 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5560cabd3e80 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5560cabd3e50 <col:32, col:36> '<bound member function type>' .end 0x5560ca8f4db0
| |   | | | |   `-DeclRefExpr 0x5560cabd3e30 <col:32> 'const String' lvalue ParmVar 0x5560cabd2408 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5560cabd3ea0 <col:43> 'const bool' lvalue Var 0x5560cabd3848 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5560cabd3f08 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5560cabd3ee8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5560cabd3f30 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5560cabd3cd0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5560cabd3f50 <col:73> 'const int' lvalue Var 0x5560cabd39e8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5560cabd4010 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5560cabd3fe0 <col:16, col:20> '<bound member function type>' .end 0x5560ca8f4db0
| |   | |     `-DeclRefExpr 0x5560cabd3fc0 <col:16> 'const String' lvalue ParmVar 0x5560cabd2408 'str' 'const String &'
| |   | `-BinaryOperator 0x5560cabd4160 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5560cabd40f8 <col:13> 'int' lvalue ->status 0x5560cabd2b98
| |   |   | `-CXXThisExpr 0x5560cabd40e8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5560cabd4148 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5560cabd4128 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd17f0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5560cabd43d0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5560cabd42b8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5560cabd42a0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5560cabd4288 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5560cabd41a8 <col:13> 'int' lvalue ->status 0x5560cabd2b98
| |   | | |     `-CXXThisExpr 0x5560cabd4198 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5560cabd4268 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5560cabd4238 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5560cabd41e8 <col:23> 'int' lvalue ->status 0x5560cabd2b98
| |   | |   |   `-CXXThisExpr 0x5560cabd41d8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5560cabd4250 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5560cabd4218 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd1880 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5560cabd43b0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5560cabd4350 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5560cabd42f8 <col:13, col:18> '<bound member function type>' .error 0x5560cab7aa30
| |   |   | | `-DeclRefExpr 0x5560cabd42d8 <col:13> 'const ArgContext' lvalue ParmVar 0x5560cabd2520 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5560cabd4378 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5560cabd4328 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5560cabd43a0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5560cabd4390 <col:20> 'bool' false
| |   |-DeclStmt 0x5560cabd45a8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5560cabd4550 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5560cabd44e0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5560cabd4708 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5560cabd45c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5560ca898768
| |   | |-DeclRefExpr 0x5560cabd4608 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5560cabd3cd0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5560cabd46d8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5560cabd4650 <col:64> 'V' lvalue ParmVar 0x5560cabd24a8 'result' 'V &'
| |   `-ReturnStmt 0x5560cabd4748 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5560cabd4738 <col:16> 'bool' true
| `-CXXMethodDecl 0x5560cac47248 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5560cac47020 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5560cac470f8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5560cac47160 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5560cac48fe0 <col:94, line:1067:5>
|     |-DeclStmt 0x5560cac47a58 <line:1054:9, col:64>
|     | `-VarDecl 0x5560cac47878 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5560cac479e8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5560cac479b8 <col:36, col:55> 'const bool' lvalue Var 0x5560ca887980 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5560cac47c38 <line:1055:9, col:91>
|     | `-VarDecl 0x5560cac47a70 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5560cac47bb8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5560cac47ba0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5560cac47b80 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5560cac47b60 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5560cac47b40 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5560cac47b08 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5560cac47ae8 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5560cabd3aa8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5560cac47b28 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5560cabd3ae8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5560cabd3b70 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5560cac47dd0 <line:1056:9, col:27>
|     | `-VarDecl 0x5560cac47d68 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5560cac48258 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5560cac48200 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5560cac480b8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5560cac48088 <col:13> '<bound member function type>' ->parse 0x5560cabd2290
|     | | | | `-CXXThisExpr 0x5560cac48078 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5560cac47f18 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5560cac47ee8 <col:19, col:23> '<bound member function type>' .begin 0x5560ca8f4b98
|     | | | |   `-DeclRefExpr 0x5560cac47ec8 <col:19> 'const String' lvalue ParmVar 0x5560cac47020 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5560cac47f88 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5560cac47f58 <col:32, col:36> '<bound member function type>' .end 0x5560ca8f4db0
|     | | | |   `-DeclRefExpr 0x5560cac47f38 <col:32> 'const String' lvalue ParmVar 0x5560cac47020 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5560cac48128 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5560cac48108 <col:43> 'const bool' lvalue Var 0x5560cac47878 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5560cac48010 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5560cac47ff8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5560cac47fd8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5560cac48140 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5560cac48038 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5560cac47d68 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5560cac48178 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5560cac48158 <col:73> 'const int' lvalue Var 0x5560cac47a70 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5560cac481e0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5560cac481b0 <col:16, col:20> '<bound member function type>' .end 0x5560ca8f4db0
|     | |     `-DeclRefExpr 0x5560cac48190 <col:16> 'const String' lvalue ParmVar 0x5560cac47020 'str' 'const String &'
|     | `-BinaryOperator 0x5560cac48238 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5560cabd40f8 <col:13> 'int' lvalue ->status 0x5560cabd2b98
|     |   | `-CXXThisExpr 0x5560cabd40e8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5560cac48220 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5560cabd4128 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd17f0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5560cac483d0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5560cac482f0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5560cac482d8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5560cac482c0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5560cabd41a8 <col:13> 'int' lvalue ->status 0x5560cabd2b98
|     | | |     `-CXXThisExpr 0x5560cabd4198 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5560cac482a0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5560cac48270 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5560cabd41e8 <col:23> 'int' lvalue ->status 0x5560cabd2b98
|     | |   |   `-CXXThisExpr 0x5560cabd41d8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5560cac48288 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5560cabd4218 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd1880 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5560cac483b0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5560cac48360 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5560cac48330 <col:13, col:18> '<bound member function type>' .error 0x5560cab7aa30
|     |   | | `-DeclRefExpr 0x5560cac48310 <col:13> 'const ArgContext' lvalue ParmVar 0x5560cac47160 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5560cac48388 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5560cabd4328 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5560cac483a0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5560cabd4390 <col:20> 'bool' false
|     |-DeclStmt 0x5560cac48918 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5560cac488c0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5560cac48870 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5560cac48850 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5560cac487e0 'type'
|     |       `-ElaboratedType 0x5560cac48790 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5560cac48770 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x5560ca887ad8 'unsigned_type'
|     |           `-BuiltinType 0x5560ca5ac620 'unsigned int'
|     |-CallExpr 0x5560cac48f70 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5560cac48f58 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5560cac48ed8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5560cac48db8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5560ca898768 'extract_integer')
|     | |-ImplicitCastExpr 0x5560cac48fb8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5560cac48fa0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5560cac48978 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5560cac47d68 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5560cac48a48 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5560cac489f8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5560cac470f8 'result' 'unsigned int &'
|     `-ReturnStmt 0x5560cac48fd0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5560cabd4738 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5560cabd2aa8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5560cabd2758 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5560cabd2a08 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5560cabd2808 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5560cabd28a8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5560cabd2920 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5560cabd32b8 <col:71> 'const ArgContext' lvalue Var 0x5560cabc8d38 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5560cabd4ec8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5560cabd4820 <line:1071:9, col:12>
| |   | `-VarDecl 0x5560cabd47b8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5560cabd4ea0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5560cabd4ab0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5560cabd4938 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5560cabd4900 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5560cabd4848 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5560cabd48a0 <col:31> 'const String' lvalue ParmVar 0x5560cabd2808 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5560cabd48c0 <col:36> 'V' lvalue Var 0x5560cabd47b8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5560cabd48e0 <col:39> 'const ArgContext' lvalue ParmVar 0x5560cabd2920 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5560cabd4a90 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5560cabd4a70 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5560cabd4a58 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5560cabd4a40 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5560cabd4960 <col:17> 'int' lvalue ->status 0x5560cabd2b98
| |     |     |     `-CXXThisExpr 0x5560cabd4950 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5560cabd4a20 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5560cabd49f0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5560cabd49a0 <col:27> 'int' lvalue ->status 0x5560cabd2b98
| |     |       |   `-CXXThisExpr 0x5560cabd4990 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5560cabd4a08 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5560cabd49d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd1880 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5560cabd4ae0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5560cabd4ad0 <col:20> 'bool' false
| |     `-IfStmt 0x5560cabd4e78 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5560cabd4b80 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5560cabd4b50 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5560cabd4b00 <col:18> 'int' lvalue ->status 0x5560cabd2b98
| |       | |   `-CXXThisExpr 0x5560cabd4af0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5560cabd4b68 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5560cabd4b30 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd1880 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5560cabd4db8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5560cabd4d60 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5560cabd4bb0 <line:1076:13> '<bound member function type>' ->range_error 0x5560cabd31a8
| |       | | | `-CXXThisExpr 0x5560cabd4ba0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5560cabd4be0 <col:25> 'const ArgContext' lvalue ParmVar 0x5560cabd2920 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5560cabd4cc0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5560cabd4d38 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5560cabd4d18 <col:43> 'V' lvalue Var 0x5560cabd47b8 'x' 'V'
| |       | `-ReturnStmt 0x5560cabd4da8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5560cabd4d98 <col:20> 'bool' false
| |       `-CompoundStmt 0x5560cabd4e58 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5560cabd4e18 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5560cabd4dd8 <col:13> 'V' lvalue ParmVar 0x5560cabd28a8 'result' 'V &'
| |         | `-DeclRefExpr 0x5560cabd4df8 <col:22> 'V' lvalue Var 0x5560cabd47b8 'x' 'V'
| |         `-ReturnStmt 0x5560cabd4e48 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5560cabd4e38 <col:20> 'bool' true
| `-CXXMethodDecl 0x5560cac46c08 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5560cac469e0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5560cac46ab8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5560cac46b20 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5560cac47858 <col:83, line:1083:5>
|     |-DeclStmt 0x5560cac46e90 <line:1071:9, col:12>
|     | `-VarDecl 0x5560cac46e28 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5560cac47830 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5560cac474c0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5560cac473e8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5560cac473b0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5560cac47368 <col:14> '<bound member function type>' ->parse_saturating 0x5560cac47248
|       | |   | `-CXXThisExpr 0x5560cac47358 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5560cac46f00 <col:31> 'const String' lvalue ParmVar 0x5560cac469e0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5560cac46f20 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5560cac46e28 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5560cac46f40 <col:39> 'const ArgContext' lvalue ParmVar 0x5560cac46b20 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5560cac474a0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5560cac47480 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5560cac47468 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5560cac47450 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5560cabd4960 <col:17> 'int' lvalue ->status 0x5560cabd2b98
|       |     |     `-CXXThisExpr 0x5560cabd4950 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5560cac47430 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5560cac47400 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5560cabd49a0 <col:27> 'int' lvalue ->status 0x5560cabd2b98
|       |       |   `-CXXThisExpr 0x5560cabd4990 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5560cac47418 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5560cabd49d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd1880 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5560cac474e0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5560cabd4ad0 <col:20> 'bool' false
|       `-IfStmt 0x5560cac47808 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5560cac47520 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5560cac474f0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5560cabd4b00 <col:18> 'int' lvalue ->status 0x5560cabd2b98
|         | |   `-CXXThisExpr 0x5560cabd4af0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5560cac47508 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5560cabd4b30 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5560cabd1880 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5560cac47740 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5560cac476b0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5560cabd4bb0 <line:1076:13> '<bound member function type>' ->range_error 0x5560cabd31a8
|         | | | `-CXXThisExpr 0x5560cabd4ba0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5560cac47540 <col:25> 'const ArgContext' lvalue ParmVar 0x5560cac46b20 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5560cac47718 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5560cac476e8 <col:31, col:50> 'const bool' lvalue Var 0x5560ca887980 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5560cac47688 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5560cac47670 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5560cac47658 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5560cac47638 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5560cac46e28 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5560cac47730 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5560cabd4d98 <col:20> 'bool' false
|         `-CompoundStmt 0x5560cac477e8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5560cac477b8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5560cac47760 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5560cac46ab8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5560cac477a0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5560cac47780 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5560cac46e28 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5560cac477d8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5560cabd4e38 <col:20> 'bool' true
|-FieldDecl 0x5560cabd2b30 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5560cabd2b98 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5560cabd2be8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5560cabd2ea0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5560cabd2c28 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5560cabd2ca8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5560cabd2d20 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5560cabd2da0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5560cabd31a8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5560cabd2f70 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5560cabd2fe8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5560cabd3080 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5560cabd5728 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5560cabd5728
| `-ParmVarDecl 0x5560cabd5838 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5560cabd59b8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5560cabd5ac8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5560cac46290 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5560cac46270 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5560cac46240 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5560cac46210 <col:7> 'IntArg' lvalue ParmVar 0x5560cabd5ac8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5560cabd2b30 'base' 'int'
| | `-ImplicitCastExpr 0x5560cac46388 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5560cac46358 <col:7> 'int' xvalue .base 0x5560cabd2b30
| |     `-CXXStaticCastExpr 0x5560cac46328 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5560cac462f8 <col:7> 'IntArg' lvalue ParmVar 0x5560cabd5ac8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5560cabd2b98 'status' 'int'
| | `-ImplicitCastExpr 0x5560cac46458 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5560cac46428 <col:7> 'int' xvalue .status 0x5560cabd2b98
| |     `-CXXStaticCastExpr 0x5560cac463f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5560cac463c8 <col:7> 'IntArg' lvalue ParmVar 0x5560cabd5ac8 '' 'IntArg &&'
| `-CompoundStmt 0x5560cac464b0 <col:7>
`-CXXDestructorDecl 0x5560cac45430 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5560cabd9cd0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5560cabd9f28 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5560cac45358 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5560cac458d0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5560cac458b0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5560cac45940 <col:19>
|-CXXConstructorDecl 0x5560cac45538 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5560cac45538
| `-ParmVarDecl 0x5560cac45648 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5560cac456e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5560cac457f8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5560cac464c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5560cac461f0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5560cac461c0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5560cac46190 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5560cac457f8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5560cac46530 <col:19>
`-CXXDestructorDecl 0x5560cac45980 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
