
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7d2a9f8 prev 0x55d6c7d22198 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7d2aaf0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55d6c7d2ab80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55d6c7d2abf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55d6c7d2acb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55d6c7d2ad80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55d6c7d2aef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55d6c7d2ae30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55d6c7d2afa0 <col:24>
| `-OptimizeNoneAttr 0x55d6c7d2aff8 <col:34>
|-CXXMethodDecl 0x55d6c7d2b040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55d6c7d2b2f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55d6c7d2b0f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d6c7d2b168 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55d6c7d2b1e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55d6c7d2b3b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55d6c7d2b3e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55d6c7d2b450 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55d6c7d2b4d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55d6c7d2b7f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55d6c7d2b590 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d6c7d2b608 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55d6c7d2b680 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55d6c7d2b700 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55d6c7d2b910 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55d6c7d33288 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d6c7d33288
| `-ParmVarDecl 0x55d6c7d33398 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55d6c7d33438 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d6c7d33438
| `-ParmVarDecl 0x55d6c7d33548 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55d6c7e00050 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7d1da10 prev 0x55d6c7d1d790 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6c7d1db08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55d6c7d1db98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d6c7d1dbf8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55d6c7d1dce8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55d6c7d1dde8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55d6c7d1dfb8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55d6c7d1de68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55d6c7d1dee0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55d6c7d1e148 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55d6c7d1e080 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55d6c7d1e1f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7d1e328 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55d6c7d1e260 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55d6c7d1e4c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55d6c7d1e408 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55d6c7d1e668 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55d6c7d1e5a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55d6c7d1e710 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55d6c7d1e810 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55d6c7d1e8f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d1e7f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6c7d1e7d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55d6c7d1e8a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55d6c7d1e908 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7d1e880 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55d6c7d1e860 <col:44> 'int' 2
|-CXXMethodDecl 0x55d6c7d1ea50 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55d6c7d1e938 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d6c7d1e9b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55d6c7d1eba8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55d6c7d1eb18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55d6c7d1ede8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55d6c7d1ec68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55d6c7d1ece0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55d6c7d1ee98 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d1eef0 <col:30>
|-CXXMethodDecl 0x55d6c7d1eff8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55d6c7d1ef30 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55d6c7d1f0a0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d1f0f8 <col:30>
|-CXXMethodDecl 0x55d6c7d1f148 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55d6c7d1f210 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55d6c7d1f328 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55d6c7d1f3b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55d6c7d1f438 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55d6c7d1f4c0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55d6c7d1f548 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55d6c7d1f5d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55d6c7d1f698 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55d6c7d1f720 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55d6c7d1f7a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55d6c7d1f830 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55d6c7d1f8b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55d6c7d1f940 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55d6c7d1f9d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55d6c7d1fa90 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55d6c7d1fb20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55d6c7d1fc70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55d6c7d1fbd8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55d6c7d1fe00 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55d6c7d1fd30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55d6c7d200b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55d6c7d1feb8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55d6c7d1ff38 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55d6c7d1ffb8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55d6c7d20168 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55d6c7d20270 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6c7d20500 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d20250 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6c7d20230 <col:33> 'int' 0
| |-EnumConstantDecl 0x55d6c7d20300 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6c7d20518 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d202e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55d6c7d202c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55d6c7d20390 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6c7d20530 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d20370 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55d6c7d20350 <col:38> 'int' 90
| |-EnumConstantDecl 0x55d6c7d20420 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d6c7d20548 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d20400 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55d6c7d203e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55d6c7d204b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55d6c7d20560 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7d20490 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55d6c7d20470 <col:32> 'int' 2000
|-CXXMethodDecl 0x55d6c7d205a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55d6c7d209e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d6c7d20850 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55d6c7d208c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d20ab0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55d6c7d20c30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55d6c7d20b60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d20e38 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d6c7d20ce8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55d6c7d20d60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d20f38 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55d6c7d20fd8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55d6c7d210a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6c7d21130 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55d6c7d21360 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d21110 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55d6c7d210f0 <col:36> 'int' EnumConstant 0x55d6c7d210a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6c7d21180 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6c7d211d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6c7d21220 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6c7d21270 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d6c7d212c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55d6c7d21310 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55d6c7d21448 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55d6c7d21388 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55d6c7d21510 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55d6c7d215d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55d6c7d21690 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55d6c7d21750 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55d6c7d21868 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55d6c7d21930 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55d6c7d21ab0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55d6c7d219e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55d6c7d21bd8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55d6c7d21dd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55d6c7d21c88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55d6c7d21d08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55d6c7d2f728 <col:54, line:127:5>
|   |-ParenExpr 0x55d6c7d2f5d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55d6c7d2f5a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d2f298 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d6c7d2f270 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55d6c7d2f258 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55d6c7d2f240 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55d6c7d2f210 <col:31> 'Router *' lvalue ->_router 0x55d6c7d2d0f0
|   |   |         `-CXXThisExpr 0x55d6c7d2f200 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d6c7d2f2f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d2f2d8 <col:48> 'int' 0
|   |   `-CallExpr 0x55d6c7d2f508 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d2f4f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d2f4d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d2f548 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d2f368 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55d6c7d2f560 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d2f388 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d2f578 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d2f3c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55d6c7d2f590 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d2f4b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d2f4a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d2f458 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55d6c7d2f670 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55d6c7d2f608 <col:9> 'Router *' lvalue ->_router 0x55d6c7d2d0f0
|   | | `-CXXThisExpr 0x55d6c7d2f5f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55d6c7d2f658 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d6c7d2f638 <col:19> 'Router *' lvalue ParmVar 0x55d6c7d21c88 'r' 'Router *'
|   `-BinaryOperator 0x55d6c7d2f708 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55d6c7d2f6a0 <col:9> 'int' lvalue ->_eindex 0x55d6c7d2d158
|     | `-CXXThisExpr 0x55d6c7d2f690 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55d6c7d2f6f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d2f6d0 <col:19> 'int' lvalue ParmVar 0x55d6c7d21d08 'eindex' 'int'
|-CXXMethodDecl 0x55d6c7d21f60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55d6c7d21e98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55d6c7d22030 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55d6c7d220f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55d6c7d22198 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55d6c7d223e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55d6c7d22260 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55d6c7d222e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55d6c7d22498 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d224f0 <col:30>
|-CXXMethodDecl 0x55d6c7d225f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d6c7d22530 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55d6c7d226a0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d226f8 <col:30>
|-CXXMethodDecl 0x55d6c7d227c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d6c7d22738 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55d6c7d22870 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d228c8 <col:30>
|-CXXMethodDecl 0x55d6c7d22a58 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55d6c7d22900 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55d6c7d22980 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55d6c7d22be8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d6c7d22b20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d6c7d22d38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d6c7d22ca8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d6c7d22e88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d6c7d22df8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d6c7d22fd8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d6c7d22f48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d6c7d23298 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55d6c7d23090 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55d6c7d23110 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55d6c7d231b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55d6c7d23370 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55d6c7d23430 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55d6c7d23700 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d6c7d235b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55d6c7d23628 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d23828 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55d6c7d23a00 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55d6c7d238e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55d6c7d23960 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55d6c7d23be8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55d6c7d23ac8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55d6c7d23b48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55d6c7d23f58 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d6c7d23ca8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d6c7d23d20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d6c7d23da0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d6c7d2ed10 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7d2ecf0 <col:106> 'int' 0
| `-ParmVarDecl 0x55d6c7d23e18 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6c7d2ed48 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6c7d2ed28 <col:126> 'int' 0
|-CXXMethodDecl 0x55d6c7d242f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6c7d24028 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d6c7d240c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d6c7d24140 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55d6c7d241b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6c7d2ed80 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6c7d2ed60 <col:114> 'int' 0
|-CXXMethodDecl 0x55d6c7d24688 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6c7d243d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55d6c7d24448 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d6c7d244c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55d6c7d2ed98 <col:96> 'int' 0
| `-ParmVarDecl 0x55d6c7d24540 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6c7d2edd8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6c7d2edb8 <col:116> 'int' 0
|-CXXMethodDecl 0x55d6c7d24a08 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d6c7d24758 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d6c7d247d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d24850 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d6c7d2ee10 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7d2edf0 <col:109> 'int' 0
| `-ParmVarDecl 0x55d6c7d248c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6c7d2ee48 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6c7d2ee28 <col:129> 'int' 0
|-CXXMethodDecl 0x55d6c7d24d88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6c7d24ad8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d6c7d24b50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d24bd0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55d6c7d24c48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6c7d2ee80 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6c7d2ee60 <col:117> 'int' 0
|-CXXMethodDecl 0x55d6c7d25118 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d6c7d24e60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d24ed8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d24f58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55d6c7d2ee98 <col:99> 'int' 0
| `-ParmVarDecl 0x55d6c7d24fd0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d6c7d2eed8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d6c7d2eeb8 <col:119> 'int' 0
|-CXXMethodDecl 0x55d6c7d25538 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55d6c7d251e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d6c7d25268 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d6c7d252e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d25360 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d6c7d2ef10 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7d2eef0 <col:108> 'int' 0
| `-ParmVarDecl 0x55d6c7d253e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55d6c7d2ef48 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55d6c7d2ef28 <col:141> 'int' 0
|-CXXMethodDecl 0x55d6c7d25958 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d6c7d25610 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d6c7d25690 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d6c7d25708 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d25788 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55d6c7d25808 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d6c7d2ef60 <col:121> 'int' 0
|-CXXMethodDecl 0x55d6c7d25d88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d6c7d25a38 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55d6c7d25ab8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55d6c7d25b30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d25bb0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55d6c7d2ef80 <col:98> 'int' 0
| `-ParmVarDecl 0x55d6c7d25c30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d6c7d2efa0 <col:123> 'int' 0
|-CXXMethodDecl 0x55d6c7d26050 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55d6c7d25e60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d6c7d25ee0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55d6c7d25f60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55d6c7d2efc0 <col:80> 'int' 0
|-EnumDecl 0x55d6c7d26108 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55d6c7d26210 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6c7d264a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d261f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6c7d261d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55d6c7d262a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6c7d264b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d26280 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6c7d26260 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d6c7d26330 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6c7d264d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d26310 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6c7d262f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55d6c7d263c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d6c7d264e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7d263a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55d6c7d26380 <col:36> 'int' 7
| `-EnumConstantDecl 0x55d6c7d26450 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55d6c7d26500 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7d26430 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55d6c7d26410 <col:34> 'int' 6
|-CXXMethodDecl 0x55d6c7d267b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55d6c7d26528 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55d6c7d265c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d6c7d26648 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55d6c7d266c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55d6c7d2f078 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55d6c7d2f060 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55d6c7d2f048 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55d6c7d2f028 <col:98, col:105> 'String' (CXXTemporary 0x55d6c7d2f028)
|           `-CXXTemporaryObjectExpr 0x55d6c7d2eff0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55d6c7d26a58 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55d6c7d26888 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d6c7d26900 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d6c7d26978 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d6c7d2f128 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d6c7d2f110 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d6c7d2f0f8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d6c7d2f0d8 <col:94, col:101> 'String' (CXXTemporary 0x55d6c7d2f0d8)
| |         `-CXXTemporaryObjectExpr 0x55d6c7d2f0a0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55d6c7d2f910 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55d6c7d2f888 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55d6c7d2f858 <col:9> '<bound member function type>' ->add_task_handlers 0x55d6c7d267b8
|     | `-CXXThisExpr 0x55d6c7d2f848 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d6c7d2f8c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6c7d2f7c8 <col:27> 'Task *' lvalue ParmVar 0x55d6c7d26888 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d6c7d2f8e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6c7d2f7e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55d6c7d26900 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55d6c7d2f8f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d6c7d2f808 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d6c7d26450 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d6c7d2f828 <col:62> 'const String' lvalue ParmVar 0x55d6c7d26978 'prefix' 'const String &'
|-CXXMethodDecl 0x55d6c7d26c68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55d6c7d26b20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d6c7d26b98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d6c7d2f1d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d6c7d2f1c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d6c7d2f1a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d6c7d2f188 <col:70, col:77> 'String' (CXXTemporary 0x55d6c7d2f188)
| |         `-CXXTemporaryObjectExpr 0x55d6c7d2f150 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55d6c7d2fae8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55d6c7d2fa60 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55d6c7d2fa30 <col:9> '<bound member function type>' ->add_task_handlers 0x55d6c7d267b8
|     | `-CXXThisExpr 0x55d6c7d2fa20 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d6c7d2faa0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6c7d2f9a0 <col:27> 'Task *' lvalue ParmVar 0x55d6c7d26b20 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d6c7d2fab8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55d6c7d2f9c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55d6c7d2fad0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d6c7d2f9e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d6c7d26450 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d6c7d2fa00 <col:57> 'const String' lvalue ParmVar 0x55d6c7d26b98 'prefix' 'const String &'
|-CXXMethodDecl 0x55d6c7d26f48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55d6c7d26d30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d26db0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d26e28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55d6c7d271f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55d6c7d27018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d27098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d27118 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55d6c7d274e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d6c7d272c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d27348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d273c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55d6c7d27798 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55d6c7d275b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d27638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d276b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55d6c7d27a48 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55d6c7d27868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d278e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d27968 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55d6c7d27cf8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55d6c7d27b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d27b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d27c10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55d6c7d27fa8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55d6c7d27dc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d27e48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d27ec8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55d6c7d282b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55d6c7d280d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d28150 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d281d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55d6c7d28598 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55d6c7d28388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d28408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d284b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55d6c7d28878 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55d6c7d28668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d286e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d28790 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55d6c7d28ae0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d6c7d28948 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d6c7d289c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d6c7d28a40 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55d6c7d28d88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55d6c7d28bb0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d6c7d28c30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d6c7d28ca8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55d6c7d29038 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55d6c7d28e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d28ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d28f58 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55d6c7d292e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55d6c7d29108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d29188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d29200 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55d6c7d29598 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55d6c7d293b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d29438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d294b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55d6c7d29868 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55d6c7d29668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d296e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d6c7d29788 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55d6c7d29b98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55d6c7d29938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d6c7d299b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55d6c7d29a30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55d6c7d29aa8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6c7d2f1f0 <col:93> 'bool' false
|-CXXMethodDecl 0x55d6c7d29d80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d6c7d29c68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55d6c7d29ce8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55d6c7d29f58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d6c7d29e40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55d6c7d29ec0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55d6c7d2a238 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6c7d2a018 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55d6c7d2a090 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55d6c7d2a110 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55d6c7d2a188 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d2a528 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6c7d2a308 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55d6c7d2a380 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55d6c7d2a400 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55d6c7d2a478 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d2a760 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55d6c7d2a600 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55d6c7d2a680 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55d6c7d2a948 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55d6c7d2a828 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55d6c7d2a8a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55d6c7d2a9f8 prev 0x55d6c7d22198 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6c7d2aaf0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55d6c7d2ab80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55d6c7d2abf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55d6c7d2acb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55d6c7d2ad80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55d6c7d2aef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55d6c7d2ae30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55d6c7d2afa0 <col:24>
| | `-OptimizeNoneAttr 0x55d6c7d2aff8 <col:34>
| |-CXXMethodDecl 0x55d6c7d2b040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55d6c7d2b2f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55d6c7d2b0f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d6c7d2b168 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55d6c7d2b1e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55d6c7d2b3b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55d6c7d2b3e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55d6c7d2b450 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55d6c7d2b4d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55d6c7d2b7f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55d6c7d2b590 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d6c7d2b608 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55d6c7d2b680 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55d6c7d2b700 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55d6c7d2b910 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55d6c7d33288 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d6c7d33288
| | `-ParmVarDecl 0x55d6c7d33398 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55d6c7d33438 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d6c7d33438
| | `-ParmVarDecl 0x55d6c7d33548 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55d6c7e00050 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d6c7d2b988 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55d6c7d2ba28 <col:38> "" ""
|-CXXMethodDecl 0x55d6c7d2bab8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55d6c7d2bb58 <col:44> "" ""
|-AccessSpecDecl 0x55d6c7d2bbc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55d6c7d2bbf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55d6c7d2bcf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55d6c7d2bd40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7d2bcd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55d6c7d2bcb0 <col:27> 'int' 4
|-FieldDecl 0x55d6c7d2bdf8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55d6c7d2bfa8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55d6c7d2c060 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55d6c7d2d0f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55d6c7d2d158 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55d6c7d2d2a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55d6c7d2d1e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55d6c7d2d458 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55d6c7d2d368 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55d6c7d2d638 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55d6c7d2d518 <col:20> col:23 'int'
| `-ParmVarDecl 0x55d6c7d2d598 <col:25> col:28 'int'
|-CXXMethodDecl 0x55d6c7d2d8e0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d2d700 <col:23> col:26 'int'
| |-ParmVarDecl 0x55d6c7d2d780 <col:28> col:31 'int'
| `-ParmVarDecl 0x55d6c7d2d7f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55d6c7d2d998 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55d6c7d2da60 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55d6c7d2dab0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55d6c7d2db00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55d6c7d2dce0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55d6c7d2db90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55d6c7d2dc08 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d2df88 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55d6c7d2dda8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55d6c7d2de28 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55d6c7d2dea0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d2e1a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55d6c7d2e058 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55d6c7d2e0d8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55d6c7d2e4e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55d6c7d2e268 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55d6c7d2e2e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55d6c7d2e360 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55d6c7d2e3e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55d6c7d2e6c8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d6c7d2e5b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55d6c7d2e630 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55d6c7d2e818 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55d6c7d2e788 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55d6c7d2eb98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55d6c7d2e8d8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55d6c7d2e958 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55d6c7d2e9d0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55d6c7d2ea50 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55d6c7d2ecb0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Paint
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint8_t _anno
       109 |   uint8_t _color
           | [sizeof=112, dsize=110, align=8,
           |  nvsize=110, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7d363f8 <../elements/standard/paint.hh:28:1, line:46:1> line:28:7 class Paint definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55d6c7d36558 <col:1, col:7> col:7 implicit referenced class Paint
|-AccessSpecDecl 0x55d6c7d365e8 <col:32, col:38> col:32 public
|-CXXConstructorDecl 0x55d6c7d36670 <line:30:5, col:11> col:5 Paint 'void ()'
|-CXXMethodDecl 0x55d6c7d36770 <line:32:5, col:54> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55d6c7d1f148 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55d6c7d37738 <col:36, col:54>
|   `-ReturnStmt 0x55d6c7d37728 <col:38, col:45>
|     `-ImplicitCastExpr 0x55d6c7d37710 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55d6c7d376f0 <col:45> 'const char [6]' lvalue "Paint"
|-CXXMethodDecl 0x55d6c7d36838 <line:33:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55d6c7d1f210 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55d6c7d37798 <col:36, col:56>
|   `-ReturnStmt 0x55d6c7d37788 <col:38, col:45>
|     `-ImplicitCastExpr 0x55d6c7d37770 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d6c7d37750 <col:45> 'const char []' lvalue Var 0x55d6c7d1f4c0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55d6c7d36b10 <line:35:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55d6c7d209e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55d6c7d369c0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55d6c7d36a38 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7d36be0 <line:36:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55d6c7d23430 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55d6c7d377d0 <col:39, col:54>
|   `-ReturnStmt 0x55d6c7d377c0 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55d6c7d377b0 <col:48> 'bool' true
|-CXXMethodDecl 0x55d6c7d36ca0 <line:37:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55d6c7d20ab0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55d6c7d36de0 <line:39:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55d6c7d1e328 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55d6c7d36d50 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55d6c7d36e88 <line:41:3, col:10> col:3 private
|-FieldDecl 0x55d6c7d36ec0 <line:43:5, col:13> col:13 _anno 'uint8_t':'unsigned char'
|-FieldDecl 0x55d6c7d36f20 <line:44:5, col:13> col:13 _color 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x55d6c7d36f98 <line:28:7> col:7 implicit Paint 'void (const Paint &)' inline default_delete noexcept-unevaluated 0x55d6c7d36f98
| `-ParmVarDecl 0x55d6c7d370a8 <col:7> col:7 'const Paint &'
|-CXXConstructorDecl 0x55d6c7d37148 <col:7> col:7 implicit Paint 'void (Paint &&)' inline default_delete noexcept-unevaluated 0x55d6c7d37148
| `-ParmVarDecl 0x55d6c7d37258 <col:7> col:7 'Paint &&'
|-CXXMethodDecl 0x55d6c7d372f8 <col:7> col:7 implicit operator= 'Paint &(const Paint &)' inline default_delete noexcept-unevaluated 0x55d6c7d372f8
| `-ParmVarDecl 0x55d6c7d37408 <col:7> col:7 'const Paint &'
|-CXXMethodDecl 0x55d6c7d37478 <col:7> col:7 implicit operator= 'Paint &(Paint &&)' inline default_delete noexcept-unevaluated 0x55d6c7d37478
| `-ParmVarDecl 0x55d6c7d37588 <col:7> col:7 'Paint &&'
`-CXXDestructorDecl 0x55d6c7d37610 <col:7> col:7 implicit ~Paint 'void ()' inline default noexcept-unevaluated 0x55d6c7d37610
  `-Overrides: [ 0x55d6c7d1dce8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Paint = type { %class.Element.base, i8, i8, [2 x i8] }
  NonVirtualBaseLLVMType:%class.Paint.base = type { %class.Element.base, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7af08a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d6c7af09b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55d6c7af0a58 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55d6c7af0ab8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55d6c7af0b18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55d6c7af0bc8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7af0ed0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7af0fe8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55d6c7af1090 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55d6c7af10f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55d6c7af1188 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55d6c7af7220 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6c7af7658 <col:12>
|-CXXConstructorDecl 0x55d6c7af7328 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7af7438 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d6c7af1090 'data' 'const char *'
| | `-ImplicitCastExpr 0x55d6c7af9be0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55d6c7af9bb0 <col:12> 'const char *const' lvalue .data 0x55d6c7af1090
| |     `-DeclRefExpr 0x55d6c7af9b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7af7438 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d6c7af10f8 'length' 'int'
| | `-ImplicitCastExpr 0x55d6c7af9c70 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d6c7af9c40 <col:12> 'const int' lvalue .length 0x55d6c7af10f8
| |     `-DeclRefExpr 0x55d6c7af9c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7af7438 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d6c7af1188 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55d6c7af9d00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55d6c7af9cd0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6c7af1188
| |     `-DeclRefExpr 0x55d6c7af9cb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7af7438 '' 'const String::rep_t &'
| `-CompoundStmt 0x55d6c7af9d58 <col:12>
|-CXXConstructorDecl 0x55d6c7af74d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6c7af74d8
| `-ParmVarDecl 0x55d6c7af75e8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55d6c7afcb40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d6c7b08558 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7b08668 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55d6c7b08b80 <col:12>
|   |-BinaryOperator 0x55d6c7b08998 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d6c7b08950 <col:12> 'const char *' lvalue ->data 0x55d6c7af1090
|   | | `-CXXThisExpr 0x55d6c7b08940 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d6c7b08980 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7b08910 <col:12> 'const char *const' lvalue .data 0x55d6c7af1090
|   |     `-DeclRefExpr 0x55d6c7b088f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7b08668 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d6c7b08a60 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55d6c7b08a18 <col:12> 'int' lvalue ->length 0x55d6c7af10f8
|   | | `-CXXThisExpr 0x55d6c7b08a08 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d6c7b08a48 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7b089d8 <col:12> 'const int' lvalue .length 0x55d6c7af10f8
|   |     `-DeclRefExpr 0x55d6c7b089b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7b08668 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d6c7b08b28 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55d6c7b08ae0 <col:12> 'String::memo_t *' lvalue ->memo 0x55d6c7af1188
|   | | `-CXXThisExpr 0x55d6c7b08ad0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d6c7b08b10 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7b08aa0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6c7af1188
|   |     `-DeclRefExpr 0x55d6c7b08a80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7b08668 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55d6c7b08b70 <col:12>
|     `-UnaryOperator 0x55d6c7b08b58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7b08b48 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55d6c7b086d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6c7b086d8
  `-ParmVarDecl 0x55d6c7b087e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7ae7e10 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6c7ae7f28 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55d6c7ae7fb8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55d6c7ae7ff8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55d6c77bcfd0 'const char *'
|   `-QualType 0x55d6c77bc521 'const char' const
|     `-BuiltinType 0x55d6c77bc520 'char'
|-TypedefDecl 0x55d6c7ae8080 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55d6c7ae8050 'String::const_iterator' sugar
|   |-Typedef 0x55d6c7ae7ff8 'const_iterator'
|   `-PointerType 0x55d6c77bcfd0 'const char *'
|     `-QualType 0x55d6c77bc521 'const char' const
|       `-BuiltinType 0x55d6c77bc520 'char'
|-TypedefDecl 0x55d6c7ae81f0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55d6c7ae8160 'int (String::*)() const'
|   |-RecordType 0x55d6c7ae7ea0 'String'
|   | `-CXXRecord 0x55d6c7ae7e10 'String'
|   `-ParenType 0x55d6c7ae8100 'int () const' sugar
|     `-FunctionProtoType 0x55d6c7abcca0 'int () const' const cdecl
|       `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7ae8258 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55d6c7911880 'int64_t' sugar
|   |-Typedef 0x55d6c7825390 'int64_t'
|   `-TypedefType 0x55d6c77fe630 '__int64_t' sugar
|     |-Typedef 0x55d6c77fe208 '__int64_t'
|     `-BuiltinType 0x55d6c77bc5a0 'long'
|-TypedefDecl 0x55d6c7ae82c0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55d6c79117a0 'uint64_t' sugar
|   |-Typedef 0x55d6c7825530 'uint64_t'
|   `-TypedefType 0x55d6c77fe6c0 '__uint64_t' sugar
|     |-Typedef 0x55d6c77fe278 '__uint64_t'
|     `-BuiltinType 0x55d6c77bc640 'unsigned long'
|-TypedefDecl 0x55d6c7ae8350 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55d6c7ae8320 'String::intmax_t' sugar
|   |-Typedef 0x55d6c7ae8258 'intmax_t'
|   `-TypedefType 0x55d6c7911880 'int64_t' sugar
|     |-Typedef 0x55d6c7825390 'int64_t'
|     `-TypedefType 0x55d6c77fe630 '__int64_t' sugar
|       |-Typedef 0x55d6c77fe208 '__int64_t'
|       `-BuiltinType 0x55d6c77bc5a0 'long'
|-TypedefDecl 0x55d6c7ae83e0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55d6c7ae83b0 'String::uintmax_t' sugar
|   |-Typedef 0x55d6c7ae82c0 'uintmax_t'
|   `-TypedefType 0x55d6c79117a0 'uint64_t' sugar
|     |-Typedef 0x55d6c7825530 'uint64_t'
|     `-TypedefType 0x55d6c77fe6c0 '__uint64_t' sugar
|       |-Typedef 0x55d6c77fe278 '__uint64_t'
|       `-BuiltinType 0x55d6c77bc640 'unsigned long'
|-CXXConstructorDecl 0x55d6c7ae84a0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55d6c7ae8648 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55d6c7ae8588 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55d6c7ae87f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55d6c7ae8738 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55d6c7ae8950 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55d6c7ae88c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55d6c7ae8b68 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d6c7ae8a18 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55d6c7ae8a98 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55d6c7ae8d88 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55d6c7ae8c38 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7ae8cb8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55d6c7ae8fa8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d6c7ae8e58 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55d6c7ae8ed8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55d6c7ae91c8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55d6c7ae9078 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7ae90f8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55d6c7ae9358 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55d6c7ae9290 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55d6c7ae94d8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55d6c7ae9418 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55d6c7ae9668 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55d6c7ae95a0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55d6c7ae97c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55d6c7ae9730 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55d6c7ae9918 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55d6c7ae9888 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55d6c7ae9a70 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55d6c7ae99e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55d6c7ae9bf8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55d6c7ae9b38 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55d6c7ae9d88 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55d6c7ae9cc0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55d6c7ae9f18 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55d6c7ae9e50 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55d6c7aea0a8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55d6c7ae9fe0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55d6c7aea1a0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55d6c7aea2c8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55d6c7aea448 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55d6c7aea380 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55d6c7aea598 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55d6c7aea508 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55d6c7aea650 <col:63> "" ""
|-CXXMethodDecl 0x55d6c7aea798 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55d6c7aea6d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55d6c7aea9a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55d6c7aea858 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55d6c7aea8d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55d6c7aeabc8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55d6c7aeaa70 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55d6c7aeaaf0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55d6c7aeaea8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55d6c7aeac88 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55d6c7aead08 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55d6c7af6cf0 <col:55> 'int' 10
| `-ParmVarDecl 0x55d6c7aead80 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6c7af6d10 <col:76> 'bool' true
|-CXXMethodDecl 0x55d6c7aeb188 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55d6c7aeaf70 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55d6c7aeaff0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55d6c7af6d20 <col:56> 'int' 10
| `-ParmVarDecl 0x55d6c7aeb068 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6c7af6d40 <col:77> 'bool' true
|-CXXMethodDecl 0x55d6c7aeb290 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55d6c7aeb358 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55d6c7aeb420 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55d6c7aeb4c0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7aeb518 <col:30>
|-CXXConversionDecl 0x55d6c7aeb608 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d6c7aeb6d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55d6c7aeb798 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55d6c7aeb888 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d6c7aeb948 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d6c7aebac8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55d6c7aeba00 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55d6c7aebc18 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55d6c7aebb88 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55d6c7aebd08 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55d6c7aebdc8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55d6c7aec018 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55d6c7aebe80 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55d6c7aebf00 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55d6c7aec278 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55d6c7aec0e0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7aec160 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55d6c7aec348 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7aec558 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55d6c7aec400 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55d6c7aec480 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55d6c7aec778 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55d6c7aec620 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55d6c7aec6a0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55d6c7aec908 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55d6c7aec840 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55d6c7aec9f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55d6c7aecb68 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d6c7aecaa8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d6c7aecd78 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55d6c7aecc28 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d6c7aecca8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d6c7aecf90 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55d6c7aece38 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55d6c7aeceb0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55d6c7aed120 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55d6c7aed050 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d6c7aed340 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55d6c7aed1e0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55d6c7aed260 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d6c7aed490 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d6c7aed400 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55d6c7aed668 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d6c7aed550 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d6c7aed5d0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55d6c7aed7b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55d6c7aed728 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55d6c7aed9d0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55d6c7aed870 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55d6c7aed8f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55d6c7af6d50 <col:39> 'int' 0
|-CXXMethodDecl 0x55d6c7aedbf0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55d6c7aeda90 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55d6c7aedb10 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55d6c7af6d70 <col:48> 'int' 0
|-CXXMethodDecl 0x55d6c7aeddd0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55d6c7aedcb0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55d6c7aedd30 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55d6c7af6d90 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55d6c7aedea0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55d6c7aedf60 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55d6c7aee020 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55d6c7aee0e0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55d6c7aee1a0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55d6c7aee348 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d6c7aee250 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55d6c7aee4c8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55d6c7aee400 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55d6c7aee6a0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d6c7aee588 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55d6c7aee818 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55d6c7aee758 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55d6c7aee960 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55d6c7aee8d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d6c7aeeab0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55d6c7aeea20 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55d6c7aeec88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d6c7aeeb70 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d6c7aeebf0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d6c7aeee68 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d6c7aeed50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55d6c7aeedd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55d6c7aeefb8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55d6c7aeef28 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55d6c7aef1c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55d6c7aef078 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55d6c7aef0f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55d6c7aef328 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55d6c7aef290 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d6c7aef480 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55d6c7aef3e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55d6c7aef528 <col:57> "" ""
|-CXXMethodDecl 0x55d6c7aef638 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d6c7aef5a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55d6c7aef788 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d6c7aef6f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55d6c7aef908 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55d6c7aef840 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55d6c7aef9d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55d6c7aefa90 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55d6c7aefb50 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55d6c7aefbf0 <col:49> "" ""
|-CXXMethodDecl 0x55d6c7aefc80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55d6c7aefd40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55d6c7aefe30 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55d6c7aefef8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55d6c7aeffb8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55d6c7af0078 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55d6c7af0170 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55d6c7af0238 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55d6c7af0300 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55d6c7af04d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55d6c7af03b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55d6c7af0438 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55d6c7af0700 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55d6c7af05a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7af0620 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55d6c7af0810 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55d6c7af0878 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6c7af08a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d6c7af09b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55d6c7af0a58 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55d6c7af0ab8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55d6c7af0b18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55d6c7af0bc8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55d6c7af0c30 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55d6c7af0e68 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55d6c7af0eb8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7af0e48 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55d6c7af0d58 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55d6c7af0d00 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55d6c7af0d40 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55d6c7af0d20 <col:32> 'int' 8
|-CXXRecordDecl 0x55d6c7af0ed0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6c7af0fe8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55d6c7af1090 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55d6c7af10f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55d6c7af1188 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55d6c7af7220 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d6c7af7658 <col:12>
| |-CXXConstructorDecl 0x55d6c7af7328 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6c7af7438 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d6c7af1090 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55d6c7af9be0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55d6c7af9bb0 <col:12> 'const char *const' lvalue .data 0x55d6c7af1090
| | |     `-DeclRefExpr 0x55d6c7af9b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7af7438 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d6c7af10f8 'length' 'int'
| | | `-ImplicitCastExpr 0x55d6c7af9c70 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d6c7af9c40 <col:12> 'const int' lvalue .length 0x55d6c7af10f8
| | |     `-DeclRefExpr 0x55d6c7af9c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7af7438 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d6c7af1188 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55d6c7af9d00 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55d6c7af9cd0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6c7af1188
| | |     `-DeclRefExpr 0x55d6c7af9cb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7af7438 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55d6c7af9d58 <col:12>
| |-CXXConstructorDecl 0x55d6c7af74d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6c7af74d8
| | `-ParmVarDecl 0x55d6c7af75e8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55d6c7afcb40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d6c7b08558 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6c7b08668 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55d6c7b08b80 <col:12>
| |   |-BinaryOperator 0x55d6c7b08998 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55d6c7b08950 <col:12> 'const char *' lvalue ->data 0x55d6c7af1090
| |   | | `-CXXThisExpr 0x55d6c7b08940 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d6c7b08980 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d6c7b08910 <col:12> 'const char *const' lvalue .data 0x55d6c7af1090
| |   |     `-DeclRefExpr 0x55d6c7b088f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7b08668 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d6c7b08a60 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55d6c7b08a18 <col:12> 'int' lvalue ->length 0x55d6c7af10f8
| |   | | `-CXXThisExpr 0x55d6c7b08a08 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d6c7b08a48 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55d6c7b089d8 <col:12> 'const int' lvalue .length 0x55d6c7af10f8
| |   |     `-DeclRefExpr 0x55d6c7b089b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7b08668 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d6c7b08b28 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55d6c7b08ae0 <col:12> 'String::memo_t *' lvalue ->memo 0x55d6c7af1188
| |   | | `-CXXThisExpr 0x55d6c7b08ad0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d6c7b08b10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d6c7b08aa0 <col:12> 'String::memo_t *const' lvalue .memo 0x55d6c7af1188
| |   |     `-DeclRefExpr 0x55d6c7b08a80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d6c7b08668 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55d6c7b08b70 <col:12>
| |     `-UnaryOperator 0x55d6c7b08b58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d6c7b08b48 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55d6c7b086d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d6c7b086d8
|   `-ParmVarDecl 0x55d6c7b087e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55d6c7af1200 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55d6c7af1448 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55d6c7af1268 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55d6c7af12e8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55d6c7af1360 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55d6c7af71e0 <col:79, line:261:5>
|   |-BinaryOperator 0x55d6c7af6e58 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d6c7af6df0 <col:2, col:5> 'const char *' lvalue .data 0x55d6c7af1090
|   | | `-MemberExpr 0x55d6c7af6dc0 <col:2> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|   | |   `-CXXThisExpr 0x55d6c7af6db0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d6c7af6e40 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d6c7af6e20 <col:12> 'const char *' lvalue ParmVar 0x55d6c7af1268 'data' 'const char *'
|   |-BinaryOperator 0x55d6c7af6f20 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55d6c7af6eb8 <col:2, col:5> 'int' lvalue .length 0x55d6c7af10f8
|   | | `-MemberExpr 0x55d6c7af6e88 <col:2> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|   | |   `-CXXThisExpr 0x55d6c7af6e78 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d6c7af6f08 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d6c7af6ee8 <col:14> 'int' lvalue ParmVar 0x55d6c7af12e8 'length' 'int'
|   `-IfStmt 0x55d6c7af71c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55d6c7af7040 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d6c7af7028 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55d6c7af7008 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55d6c7af6fe8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55d6c7af6f80 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|     |       | `-MemberExpr 0x55d6c7af6f50 <col:7> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|     |       |   `-CXXThisExpr 0x55d6c7af6f40 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55d6c7af6fd0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6c7af6fb0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55d6c7af1360 'memo' 'String::memo_t *'
|     `-CallExpr 0x55d6c7af71a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55d6c7af7188 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d6c7af7090 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55d6c7adfe78 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55d6c7af70f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d6c7af0a58
|         `-ImplicitCastExpr 0x55d6c7af70e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55d6c7af70c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55d6c7af1360 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55d6c7af16f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55d6c7af1518 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55d6c7af1598 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55d6c7af1610 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55d6c7af1200 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55d6c7af7668 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d6c7af77f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55d6c7af7760 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55d6c7af76d0 <col:2> '<bound member function type>' ->assign_memo 0x55d6c7af1448
|     | `-ImplicitCastExpr 0x55d6c7af7798 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55d6c7af76c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55d6c7af77b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6c7af7700 <col:14> 'const char *' lvalue ParmVar 0x55d6c7af1518 'data' 'const char *'
|     |-ImplicitCastExpr 0x55d6c7af77c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d6c7af7720 <col:20> 'int' lvalue ParmVar 0x55d6c7af1598 'length' 'int'
|     `-ImplicitCastExpr 0x55d6c7af77e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7af7740 <col:28> 'String::memo_t *' lvalue ParmVar 0x55d6c7af1610 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55d6c7af1888 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55d6c7af17c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55d6c7af7a50 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55d6c7af79d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55d6c7af7820 <col:2> '<bound member function type>' ->assign_memo 0x55d6c7af1448
|     | `-CXXThisExpr 0x55d6c7af7810 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55d6c7af7a08 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55d6c7af78a0 <col:14, col:19> 'const char *' lvalue .data 0x55d6c7af1090
|     |   `-MemberExpr 0x55d6c7af7870 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55d6c7af1200
|     |     `-DeclRefExpr 0x55d6c7af7850 <col:14> 'const String' lvalue ParmVar 0x55d6c7af17c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55d6c7af7a20 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55d6c7af7920 <col:25, col:30> 'int' lvalue .length 0x55d6c7af10f8
|     |   `-MemberExpr 0x55d6c7af78f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55d6c7af1200
|     |     `-DeclRefExpr 0x55d6c7af78d0 <col:25> 'const String' lvalue ParmVar 0x55d6c7af17c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55d6c7af7a38 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55d6c7af79a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|         `-MemberExpr 0x55d6c7af7970 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55d6c7af1200
|           `-DeclRefExpr 0x55d6c7af7950 <col:38> 'const String' lvalue ParmVar 0x55d6c7af17c8 'x' 'const String &'
|-CXXMethodDecl 0x55d6c7af1950 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55d6c7af8410 <col:31, line:278:5>
|   `-IfStmt 0x55d6c7af83f8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55d6c7af7af0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d6c7af7ad8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55d6c7af7aa8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|     |     `-MemberExpr 0x55d6c7af7a78 <col:6> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|     |       `-CXXThisExpr 0x55d6c7af7a68 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55d6c7af83d0 <col:15, line:277:2>
|       |-ParenExpr 0x55d6c7af7fa0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55d6c7af7f70 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55d6c7af7c00 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55d6c7af7be8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55d6c7af7bd0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55d6c7af7b90 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d6c7af0a58
|       |   |       `-ImplicitCastExpr 0x55d6c7af7b78 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55d6c7af7b48 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|       |   |           `-MemberExpr 0x55d6c7af7b18 <col:27> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|       |   |             `-CXXThisExpr 0x55d6c7af7b08 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55d6c7af7c60 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55d6c7af7c40 <col:54> 'int' 0
|       |   `-CallExpr 0x55d6c7af7ed0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55d6c7af7eb8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d6c7af7e38 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55d6c7af7f10 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d6c7af7d48 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55d6c7af7f28 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d6c7af7d78 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55d6c7af7f40 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55d6c7af7db0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55d6c7af7f58 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55d6c7af7e20 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55d6c7af7e08 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55d6c7af7dd0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55d6c7af82f0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55d6c7af81b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55d6c7af8198 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55d6c7af8110 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55d6c7ae12c0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55d6c7af80e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d6c7af0a58
|       | |   `-ImplicitCastExpr 0x55d6c7af80c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55d6c7af8098 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|       | |       `-MemberExpr 0x55d6c7af8068 <col:40> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|       | |         `-CXXThisExpr 0x55d6c7af8058 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55d6c7af82b0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55d6c7af8298 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55d6c7af81d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55d6c7af6130 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55d6c7af82d8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55d6c7af8238 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|       |       `-MemberExpr 0x55d6c7af8208 <col:15> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|       |         `-CXXThisExpr 0x55d6c7af81f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55d6c7af83b0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55d6c7af8348 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d6c7af1188
|         | `-MemberExpr 0x55d6c7af8318 <col:6> 'String::rep_t' lvalue ->_r 0x55d6c7af1200
|         |   `-CXXThisExpr 0x55d6c7af8308 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55d6c7af8398 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55d6c7af8378 <col:16> 'int' 0
|-CXXMethodDecl 0x55d6c7af1be8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55d6c7af1a08 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d6c7af1a88 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d6c7af1b00 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55d6c7af1cc0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55d6c7af1f10 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55d6c7af1d78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d6c7af1df8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d6c7af1e70 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d6c7af20f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55d6c7af1fe0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55d6c7af2060 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55d6c7af21f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55d6c7af84e8 <col:41, line:286:5>
|   `-ReturnStmt 0x55d6c7af84d8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55d6c7af84a8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55d6c7af8470 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55d6c7af8458 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55d6c7af8438 <col:46> 'int' 1
|-CXXMethodDecl 0x55d6c7af2498 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55d6c7af22b0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55d6c7af2330 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55d6c7af23b0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55d6c7af6130 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55d6c7af2560 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d6c7af6200 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55d6c7af63d0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d6c7af62b8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d6c7af6338 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55d6c7af6490 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55d6c7af6558 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55d6c7af6658 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55d6c7af66d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55d6c7af6748 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55d6c7af67b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55d6c7af68b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55d6c7af6900 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7af6890 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55d6c7af6870 <col:22> 'int' 14
|-CXXMethodDecl 0x55d6c7af6b18 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55d6c7af6930 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55d6c7af69b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55d6c7af6a30 <col:43> col:46 'int'
|-FriendDecl 0x55d6c7af6c20 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55d6c7af6cb0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6c7bb9be0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55d6c7bb9db8 prev 0x55d6c7bb9be0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d6c7bb9e48 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d6c7bb9e70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7bbb7d0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55d6c7bbb780 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55d6c7bbb760 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55d6c7bba088 'type'
|     `-SubstTemplateTypeParmType 0x55d6c7bba050 'String' sugar
|       |-TemplateTypeParmType 0x55d6c7aac6c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7aac670 'T'
|       `-RecordType 0x55d6c7ae7ea0 'String'
|         `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7bbb888 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55d6c7bbb850 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55d6c7bbb830 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d6c7bbb7d0 'type'
|     `-ElaboratedType 0x55d6c7bbb780 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55d6c7bbb760 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55d6c7bba088 'type'
|         `-SubstTemplateTypeParmType 0x55d6c7bba050 'String' sugar
|           |-TemplateTypeParmType 0x55d6c7aac6c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d6c7aac670 'T'
|           `-RecordType 0x55d6c7ae7ea0 'String'
|             `-CXXRecord 0x55d6c7ae7e10 'String'
|-CXXMethodDecl 0x55d6c7bbba08 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55d6c7bbb918 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55d6c7bbbaf8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d6c7bbbbd8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55d6c7bbbbd8
|-CXXMethodDecl 0x55d6c7bbbea8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d6c7bbbdb0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55d6c7bbc0e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6c7bbbf60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6c7bbbfd8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d66610 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6c7bbc1a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6c7bbc220 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d66768 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d6c7d66838 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d6c7d66a88 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6c7d668f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d6c7d66970 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d66ce8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55d6c7d66b58 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d6c7d66bd0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d66ea8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d6c7d66db8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d67068 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d6c7d66f70 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d67120 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6c7d671d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d6c7d67408 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d6c7d67280 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6c7d672f8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d6c7d676a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d6c7d675b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55d6c7d67770 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55d6c7d677c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d6c7d67810 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6c7d20650 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55d6c7bb8648 prev 0x55d6c7d20650 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d6c7bb9b50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55d6c7bb9b00 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55d6c7bb9ae0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d6c7bb9990 'type'
|     `-SubstTemplateTypeParmType 0x55d6c7bb9820 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55d6c7a82470 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55d6c7a82418 'F'
|       `-RecordType 0x55d6c7bb9480 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55d6c7bb93a0 'typed_array_memory'
|-FieldDecl 0x55d6c7d67860 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55d6c7d678b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d6c7d678e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|   |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|   `-RecordType 0x55d6c7ae7ea0 'String'
|     `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d67978 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55d6c7d67940 'String &'
|   `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|     |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|     `-RecordType 0x55d6c7ae7ea0 'String'
|       `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d67a08 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55d6c7d679d0 'const String &'
|   `-QualType 0x55d6c7bb86e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-RecordType 0x55d6c7ae7ea0 'String'
|         `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d67a98 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55d6c7d67a60 'String *'
|   `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|     |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|     `-RecordType 0x55d6c7ae7ea0 'String'
|       `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d67b28 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55d6c7d67af0 'const String *'
|   `-QualType 0x55d6c7bb86e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-RecordType 0x55d6c7ae7ea0 'String'
|         `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d68780 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55d6c7d68730 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55d6c7d68710 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55d6c7d68648 'type'
|     `-LValueReferenceType 0x55d6c7d68610 'const String &'
|       `-QualType 0x55d6c7d683b1 'const String' const
|         `-SubstTemplateTypeParmType 0x55d6c7d683b0 'String' sugar
|           |-TemplateTypeParmType 0x55d6c7a8c3c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d6c7a8c368 'T'
|           `-RecordType 0x55d6c7ae7ea0 'String'
|             `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d687e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55d6c7d679d0 'const String &'
|   `-QualType 0x55d6c7bb86e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-RecordType 0x55d6c7ae7ea0 'String'
|         `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d68840 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7d688a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55d6c7d67a60 'String *'
|   `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|     |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|     `-RecordType 0x55d6c7ae7ea0 'String'
|       `-CXXRecord 0x55d6c7ae7e10 'String'
|-TypedefDecl 0x55d6c7d68910 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55d6c7d67af0 'const String *'
|   `-QualType 0x55d6c7bb86e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d6c7bb86e0 'String' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-RecordType 0x55d6c7ae7ea0 'String'
|         `-CXXRecord 0x55d6c7ae7e10 'String'
|-EnumDecl 0x55d6c7d68968 <line:134:5> col:5
| `-EnumConstantDecl 0x55d6c7d68a60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d6c7d68a40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d6c7abb068 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d6c7abb040 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d6c7abb020 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d6c7d68ae8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d6c7d68d78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7d68ba0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6c7d68c40 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55d6c7d69008 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55d6c7d68ef0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55d6c7d692c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55d6c7d691b0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d6c7d695e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55d6c7d694c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55d6c7d698f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55d6c7d697d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d6c7d69be0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7d69a28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6c7d69aa0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6c7d69d08 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d6c7d69db8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7d69e10 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7d69e58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d6c7d69f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7d69f60 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7d6a028 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7d6a0d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7d6a130 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7d6a178 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7d6a228 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7d6a280 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7d6a2c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7d6a378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7d6a3d0 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7d6a418 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7d6a4c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7d6a520 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7d6a548 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6c7d6a5f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6c7d6a6a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d6c7d6a868 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7d6a758 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6c7d6a7d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6c7d6a9b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d6c7d6a928 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7d6ab68 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55d6c7d6aa70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6c7d6ac20 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d6ac78 <col:30>
|-CXXMethodDecl 0x55d6c7d6ad98 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55d6c7d6aca0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6c7d6ae50 <col:20>
| `-OptimizeNoneAttr 0x55d6c7d6aea8 <col:30>
|-CXXMethodDecl 0x55d6c7d6af60 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6c7d6aed0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7d6b0a8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6c7d6b018 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7d6b1d8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55d6c7d6b2d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55d6c7d6b3a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55d6c7d6b478 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55d6c7d6b5b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6c7d6b528 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7d6b700 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6c7d6b670 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7d6b848 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d6c7d6b7b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6c7d6b900 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d6c7d6ba00 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d6c7d6b970 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6c7d6bab8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d6c7d6bb78 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55d6c7d6bc78 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55d6c7d6bdf8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6c7d6bd38 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55d6c7d6c5b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d6c7d6beb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55d6c7d6c518 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55d6c7d6c418 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55d6c7d6c698 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6c7d6c7e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6c7d6c758 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6c7d6c8a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d6c7d6cae8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7d6c960 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d6c7d6c9d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d6c7d6cc78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55d6c7d6cbb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d6c7d6ce88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55d6c7d6cd40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d6c7d6cdb8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d6c7d6cf48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d6c7d6d1a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55d6c7d6d0b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55d6c7d6d278 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55d6c7d6d278

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7dee5e8 prev 0x55d6c7c9e398 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6c7dee6e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55d6c7dee770 <col:22, col:28> col:22 public
|-EnumDecl 0x55d6c7dee798 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55d6c7dee8b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7dee898 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55d6c7dee880 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d6c7dee860 <col:14> 'int' 999
| |-EnumConstantDecl 0x55d6c7dee960 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7dee940 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55d6c7dee928 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d6c7dee908 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d6c7dee9f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7dee9d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55d6c7dee9b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55d6c7deea80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7deea60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55d6c7deea40 <col:13> 'int' 1
| |-EnumConstantDecl 0x55d6c7deeb10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7deeaf0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55d6c7deead0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55d6c7deeba0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7deeb80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55d6c7deeb60 <col:13> 'int' 3
| |-EnumConstantDecl 0x55d6c7deec30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7deec10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55d6c7deebf0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55d6c7deecc0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7deeca0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55d6c7deec80 <col:14> 'int' 5
| |-EnumConstantDecl 0x55d6c7deed50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d6c7deed30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55d6c7deed10 <col:12> 'int' 6
| `-EnumConstantDecl 0x55d6c7deede0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55d6c7deedc0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55d6c7deeda0 <col:13> 'int' 7
|-VarDecl 0x55d6c7deee50 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55d6c7deeed8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55d6c7deef60 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55d6c7deefe8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55d6c7def070 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55d6c7def0f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55d6c7def180 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55d6c7def208 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55d6c7def290 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55d6c7def318 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55d6c7def3a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55d6c7def4a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55d6c7df47a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55d6c7df4f38 <line:128:13> 'int' 0
| `-CompoundStmt 0x55d6c7df4fa8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55d6c7def590 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55d6c7df4fb8 <col:29, line:132:5>
|-CXXMethodDecl 0x55d6c7def748 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55d6c7def680 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7def810 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d6c7def8f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d6c7df5010 <col:44, line:161:5>
|   `-ReturnStmt 0x55d6c7df5000 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55d6c7df4fe8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7df4fc8 <col:9> 'ErrorHandler *' lvalue Var 0x55d6c7df4808 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7defa38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55d6c7def9a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d6c7defb00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d6c7df5070 <col:43, line:173:5>
|   `-ReturnStmt 0x55d6c7df5060 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55d6c7df5048 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7df5028 <col:9> 'ErrorHandler *' lvalue Var 0x55d6c7df4880 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55d6c7defbb8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55d6c7defc38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55d6c7defd48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55d6c7defcb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7defe98 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55d6c7defe08 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7defff0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55d6c7deff58 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df0148 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55d6c7df00b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df02a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55d6c7df0208 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df04b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6c7df0358 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55d6c7df03d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df0688 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6c7df0570 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55d6c7df05f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df08a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6c7df0748 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55d6c7df07c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df0a88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6c7df0968 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d6c7df09e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df0c68 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d6c7df0b48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d6c7df0bc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df0df0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55d6c7df0d28 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55d6c7df0fc0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55d6c7df0ea8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d6c7df0f20 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55d6c7df52c8 <col:57, line:234:5>
|   `-ReturnStmt 0x55d6c7df52b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55d6c7df52a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d6c7df5248 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d6c7df5218 <col:9> '<bound member function type>' ->xmessage 0x55d6c7df0df0
|         | `-CXXThisExpr 0x55d6c7df5208 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55d6c7df5288 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d6c7df5270 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d6c7df51e8 <col:18, col:40> 'String' (CXXTemporary 0x55d6c7df51e8)
|               `-CallExpr 0x55d6c7df51b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55d6c7df5198 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55d6c7df5110 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d6c7df2fb8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55d6c7df5130 <col:31> 'const String' lvalue ParmVar 0x55d6c7df0f20 'str' 'const String &'
|                 `-DeclRefExpr 0x55d6c7df5150 <col:36> 'const String' lvalue ParmVar 0x55d6c7df0ea8 'anno' 'const String &'
|-CXXMethodDecl 0x55d6c7df12a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d6c7df1080 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d6c7df1100 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55d6c7df1178 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d6c7df5558 <col:68, line:243:5>
|   `-ReturnStmt 0x55d6c7df5548 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55d6c7df5530 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d6c7df54d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d6c7df54a0 <col:9> '<bound member function type>' ->xmessage 0x55d6c7df0fc0
|         | `-CXXThisExpr 0x55d6c7df5490 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d6c7df5368 <col:18> 'const String' lvalue ParmVar 0x55d6c7df1080 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d6c7df5518 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d6c7df5500 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d6c7df5470 <col:24, col:40> 'String' (CXXTemporary 0x55d6c7df5470)
|               `-CXXMemberCallExpr 0x55d6c7df5408 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55d6c7df5398 <col:24> '<bound member function type>' ->vformat 0x55d6c7df2480
|                 | `-CXXThisExpr 0x55d6c7df5388 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d6c7df5438 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d6c7df53c8 <col:32> 'const char *' lvalue ParmVar 0x55d6c7df1100 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d6c7df5450 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d6c7df53e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d6c7df1178 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6c7df1540 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55d6c7df1368 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d6c7df13e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d6c7df1458 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55d6c7df5898 <col:23, line:254:5>
|   `-ReturnStmt 0x55d6c7df5888 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55d6c7df5870 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55d6c7df5810 <col:9, col:71> 'int'
|         |-MemberExpr 0x55d6c7df57e0 <col:9> '<bound member function type>' ->xmessage 0x55d6c7df0fc0
|         | `-CXXThisExpr 0x55d6c7df57d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55d6c7df5858 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55d6c7df5840 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55d6c7df5790 <col:18, col:65> 'String' (CXXTemporary 0x55d6c7df5790)
|         |     `-CallExpr 0x55d6c7df5728 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55d6c7df5710 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55d6c7df55f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d6c7df2fb8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55d6c7df5618 <col:31> 'const String' lvalue ParmVar 0x55d6c7df13e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55d6c7df5770 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55d6c7df5758 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55d6c7df56f0 <col:37, col:64> 'String' (CXXTemporary 0x55d6c7df56f0)
|         |             `-CallExpr 0x55d6c7df56c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55d6c7df56a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55d6c7df5638 <col:37> 'String (const String &)' lvalue CXXMethod 0x55d6c7df3608 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55d6c7df5658 <col:56> 'const String' lvalue ParmVar 0x55d6c7df1368 'landmark' 'const String &'
|         `-DeclRefExpr 0x55d6c7df57b0 <col:68> 'const String' lvalue ParmVar 0x55d6c7df1458 'str' 'const String &'
|-CXXMethodDecl 0x55d6c7df18c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d6c7df1608 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d6c7df1680 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d6c7df1700 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55d6c7df1778 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d6c7df5b50 <col:34, line:267:5>
|   `-ReturnStmt 0x55d6c7df5b40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55d6c7df5b28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55d6c7df5ac0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55d6c7df5a90 <col:9> '<bound member function type>' ->xmessage 0x55d6c7df1540
|         | `-CXXThisExpr 0x55d6c7df5a80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d6c7df5938 <col:18> 'const String' lvalue ParmVar 0x55d6c7df1608 'landmark' 'const String &'
|         |-DeclRefExpr 0x55d6c7df5958 <col:28> 'const String' lvalue ParmVar 0x55d6c7df1680 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d6c7df5b10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d6c7df5af8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d6c7df5a60 <col:34, col:50> 'String' (CXXTemporary 0x55d6c7df5a60)
|               `-CXXMemberCallExpr 0x55d6c7df59f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55d6c7df5988 <col:34> '<bound member function type>' ->vformat 0x55d6c7df2480
|                 | `-CXXThisExpr 0x55d6c7df5978 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d6c7df5a28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d6c7df59b8 <col:42> 'const char *' lvalue ParmVar 0x55d6c7df1700 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d6c7df5a40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d6c7df59d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d6c7df1778 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6c7df19d0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55d6c7df5bd0 <col:25, line:288:5>
|   `-ReturnStmt 0x55d6c7df5bc0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55d6c7df5ba8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55d6c7df5b78 <col:9> 'const int' lvalue ->_nerrors 0x55d6c7df47a8
|         `-CXXThisExpr 0x55d6c7df5b68 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d6c7df1be0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55d6c7df1a88 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55d6c7df1b08 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df1ec8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d6c7df1ca8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55d6c7df1d28 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55d6c7df1da0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6c7df2060 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55d6c7df1f98 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df22a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d6c7df2120 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55d6c7df2198 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d6c7df5e30 <col:58, line:357:5>
|   `-ReturnStmt 0x55d6c7df5e20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55d6c7df5e08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55d6c7df5dd8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d6c7df5dc0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55d6c7df5da0 <col:9, col:29> 'String' (CXXTemporary 0x55d6c7df5da0)
|             `-CallExpr 0x55d6c7df5d30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55d6c7df5d18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d6c7df5c98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55d6c7df1ec8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55d6c7df5c38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55d6c7df5d68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55d6c7df5c58 <col:21> 'const char *' lvalue ParmVar 0x55d6c7df2120 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55d6c7df5d80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55d6c7df5c78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d6c7df2198 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6c7df2480 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55d6c7df2370 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55d6c7df23e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d6c7df25d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55d6c7df2548 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7df2720 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55d6c7df2690 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55d6c7df29c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55d6c7df27d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55d6c7df2858 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55d6c7df28d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55d6c7df2b20 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55d6c7df2a90 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55d6c7df5f48 <col:37, line:441:5>
|   `-IfStmt 0x55d6c7df5f30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55d6c7df5eb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55d6c7df5e88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55d6c7df5e48 <col:6> 'int' lvalue ParmVar 0x55d6c7df2a90 'level' 'int'
|     | `-ImplicitCastExpr 0x55d6c7df5ea0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55d6c7df5e68 <col:15> 'ErrorHandler::Level' EnumConstant 0x55d6c7deeba0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55d6c7df5f18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55d6c7df5ee8 <col:8> 'int' lvalue ->_nerrors 0x55d6c7df47a8
|         `-CXXThisExpr 0x55d6c7df5ed8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d6c7df2be8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55d6c7df5fe0 <col:26, line:448:5>
|   `-BinaryOperator 0x55d6c7df5fc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55d6c7df5f70 <col:2> 'int' lvalue ->_nerrors 0x55d6c7df47a8
|     | `-CXXThisExpr 0x55d6c7df5f60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55d6c7df5fa0 <col:13> 'int' 0
|-CXXMethodDecl 0x55d6c7df2db0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55d6c7df2ca0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55d6c7df2d18 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55d6c7df2fb8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55d6c7df2e70 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55d6c7df2ee8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55d6c7df3268 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55d6c7df3078 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55d6c7df30f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55d6c7df3178 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55d6c7df3320 <col:59> 0 0
|-CXXMethodDecl 0x55d6c7df34b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55d6c7df3398 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55d6c7df3418 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55d6c7df6650 <col:70, line:534:5>
|   |-DeclStmt 0x55d6c7df6150 <line:528:2, col:20>
|   | |-VarDecl 0x55d6c7df6008 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55d6c7df6070 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55d6c7df60a8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55d6c7df6110 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55d6c7df6220 <line:529:2, col:23>
|   | `-VarDecl 0x55d6c7df6180 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55d6c7df6208 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55d6c7df61e8 <col:18> 'const char *' lvalue ParmVar 0x55d6c7df3398 'begin' 'const char *'
|   |-DoStmt 0x55d6c7df65e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55d6c7df6518 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55d6c7df6500 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55d6c7df64e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55d6c7df6238 <col:6> 'const char *' lvalue Var 0x55d6c7df6180 'x' 'const char *'
|   | |     `-CallExpr 0x55d6c7df6430 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55d6c7df6418 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55d6c7df63d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55d6c7df4c80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55d6c7df6498 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55d6c7df6480 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55d6c7df62f0 <col:20, col:27> 'String' (CXXTemporary 0x55d6c7df62f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55d6c7df62b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55d6c7df64b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d6c7df6310 <col:30> 'const char *' lvalue Var 0x55d6c7df6180 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55d6c7df64c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d6c7df6330 <col:33> 'const char *' lvalue ParmVar 0x55d6c7df3418 'end' 'const char *'
|   | |       |-UnaryOperator 0x55d6c7df6370 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d6c7df6350 <col:39> 'String' lvalue Var 0x55d6c7df6008 'name' 'String'
|   | |       |-UnaryOperator 0x55d6c7df63a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d6c7df6388 <col:46> 'String' lvalue Var 0x55d6c7df60a8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55d6c7df63c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55d6c7df65d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55d6c7df65b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55d6c7df6598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55d6c7df6568 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|   |         `-ImplicitCastExpr 0x55d6c7df6550 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55d6c7df6530 <col:11> 'String' lvalue Var 0x55d6c7df6008 'name' 'String'
|   `-ReturnStmt 0x55d6c7df6640 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55d6c7df6628 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7df6608 <col:9> 'const char *' lvalue Var 0x55d6c7df6180 'x' 'const char *'
|-CXXMethodDecl 0x55d6c7df3608 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55d6c7df3578 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55d6c7df6c58 <col:55, line:550:5>
|   `-IfStmt 0x55d6c7df6c30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55d6c7df6890 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55d6c7df6878 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6c7df6860 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6c7df6840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6c7df6810 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|     | |       `-DeclRefExpr 0x55d6c7df66b0 <col:6> 'const String' lvalue ParmVar 0x55d6c7df3578 'x' 'const String &'
|     | `-BinaryOperator 0x55d6c7df67f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55d6c7df67c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55d6c7df6770 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55d6c7df6758 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55d6c7df6710 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55d6c7b04e40 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55d6c7df66d0 <col:11> 'const String' lvalue ParmVar 0x55d6c7df3578 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55d6c7df66f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55d6c7df67d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55d6c7df67a8 <col:19> 'char' 123
|     |-ReturnStmt 0x55d6c7df6900 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55d6c7df68d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55d6c7df68b0 <col:13> 'const String' lvalue ParmVar 0x55d6c7df3578 'x' 'const String &'
|     `-IfStmt 0x55d6c7df6c08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55d6c7df6998 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6c7df6980 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6c7df6960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6c7df6930 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |       `-DeclRefExpr 0x55d6c7df6910 <col:11> 'const String' lvalue ParmVar 0x55d6c7df3578 'x' 'const String &'
|       |-ReturnStmt 0x55d6c7df6b20 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55d6c7df6b08 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55d6c7df6ad8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55d6c7df6ac0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55d6c7df6aa0 <col:13, col:29> 'String' (CXXTemporary 0x55d6c7df6aa0)
|       |         `-CallExpr 0x55d6c7df6a50 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55d6c7df6a38 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55d6c7df69b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55d6c7df2db0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55d6c7df6a80 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55d6c7df69d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55d6c7df69f0 <col:28> 'const String' lvalue ParmVar 0x55d6c7df3578 'x' 'const String &'
|       `-ReturnStmt 0x55d6c7df6bf8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55d6c7df6be0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55d6c7df6bb0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55d6c7df6b98 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55d6c7df6b78 <col:13, col:20> 'String' (CXXTemporary 0x55d6c7df6b78)
|                 `-CXXTemporaryObjectExpr 0x55d6c7df6b40 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55d6c7df37d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55d6c7df36c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55d6c7df3738 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6c7df4f28 <col:71> 'bool' false
|-CXXRecordDecl 0x55d6c7df3880 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55d6c7df3b78 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55d6c7df3b10 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55d6c7df3ab0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55d6c7df3a70 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55d6c7ae7ea0 'String'
|       | `-CXXRecord 0x55d6c7ae7e10 'String'
|       |-BuiltinType 0x55d6c77bc580 'int'
|       `-DecayedType 0x55d6c7c9f3e0 '__va_list_tag *' sugar
|         |-TypedefType 0x55d6c7c9f3b0 'va_list' sugar
|         | |-Typedef 0x55d6c79d9f60 'va_list'
|         | `-TypedefType 0x55d6c79d9f10 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55d6c7911b38 '__gnuc_va_list'
|         |   `-TypedefType 0x55d6c7911aa0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55d6c77fdd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55d6c77fdce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55d6c77bd2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55d6c77bd238 '__va_list_tag'
|         `-PointerType 0x55d6c79df800 '__va_list_tag *'
|           `-RecordType 0x55d6c77bd2d0 '__va_list_tag'
|             `-CXXRecord 0x55d6c77bd238 '__va_list_tag'
|-EnumDecl 0x55d6c7df3bd0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55d6c7df3cd0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df4250 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df3cb0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6c7df3c90 <col:16> 'int' 1
| |-EnumConstantDecl 0x55d6c7df3d80 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df4268 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df3d40 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6c7df3d20 <col:21> 'int' 2
| |-EnumConstantDecl 0x55d6c7df3e10 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df4280 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df3df0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6c7df3dd0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55d6c7df3ea0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df4298 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df3e80 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55d6c7df3e60 <col:17> 'int' 8
| |-EnumConstantDecl 0x55d6c7df3f30 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df42b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df3f10 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55d6c7df3ef0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55d6c7df3fc0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df42c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df3fa0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d6c7df3f80 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d6c7df4050 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df42e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df4030 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55d6c7df4010 <col:17> 'int' 64
| |-EnumConstantDecl 0x55d6c7df40e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df42f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df40c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55d6c7df40a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55d6c7df4170 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d6c7df4310 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7df4150 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55d6c7df4130 <col:16> 'int' 256
| `-EnumConstantDecl 0x55d6c7df4200 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55d6c7df4328 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7df41e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55d6c7df41c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55d6c7df4538 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55d6c7df4350 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55d6c7df43f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55d6c7df46c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55d6c7df45f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55d6c7df4768 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55d6c7df47a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55d6c7df4808 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55d6c7df4880 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55d6c7df4c80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55d6c7df48f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55d6c7df4978 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55d6c7df49f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55d6c7df4a70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55d6c7df4ae8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55d6c7df4b60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55d6c7df4da8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55d6c7df4da8
| `-ParmVarDecl 0x55d6c7df4eb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55d6c7df6fb8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55d6c7df6fb8
  `-ParmVarDecl 0x55d6c7df70c8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7c9e428 prev 0x55d6c7ce30f8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7c9e520 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55d6c7c9e5b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55d6c7c9e6e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7c9e5e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d6c7c9fb10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7c9faf0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d6c7c9f688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d6c7c9fba0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6c7c9fb60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55d6c7c9e5e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d6c7c9f6f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d6c7c9fc20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7c9fbe0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d6c7c9f750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d6c7c9fc60 <col:54> 'bool' false
| `-CompoundStmt 0x55d6c7c9fd68 <col:61, line:38:5>
|   `-BinaryOperator 0x55d6c7c9fd48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55d6c7c9fce0 <col:9> 'const Element *' lvalue ->_context 0x55d6c7c9f628
|     | `-CXXThisExpr 0x55d6c7c9fcd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55d6c7c9fd30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55d6c7c9fd10 <col:20> 'int' 0
|-CXXConstructorDecl 0x55d6c7c9e8f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7c9e7a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55d6c7c9e820 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d6c7c9fb48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7c9fb28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55d6c7c9f628 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55d6c7c9fdc0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6c7c9fd80 <col:20> 'const Element *' lvalue ParmVar 0x55d6c7c9e7a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55d6c7c9f688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d6c7c9fe40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6c7c9fe00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55d6c7c9e820 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d6c7c9f6f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d6c7c9fec0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d6c7c9fe80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55d6c7c9f750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d6c7c9ff00 <col:73> 'bool' false
| `-CompoundStmt 0x55d6c7c9ff78 <col:80, line:46:5>
|-CXXMethodDecl 0x55d6c7c9ea28 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55d6c7c9fff0 <col:36, line:51:5>
|   `-ReturnStmt 0x55d6c7c9ffe0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55d6c7c9ffc8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55d6c7c9ff98 <col:16> 'const Element *const' lvalue ->_context 0x55d6c7c9f628
|         `-CXXThisExpr 0x55d6c7c9ff88 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d6c7c9eb18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55d6c7ca0070 <col:32, line:57:5>
|   `-ReturnStmt 0x55d6c7ca0060 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55d6c7ca0048 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55d6c7ca0018 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55d6c7c9f688
|         `-CXXThisExpr 0x55d6c7ca0008 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d6c7c9ebd8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55d6c7c9ed60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d6c7c9ec90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7c9eeb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d6c7c9ee20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7c9f000 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d6c7c9ef70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d6c7c9f208 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55d6c7c9f0b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55d6c7c9f130 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55d6c7c9f538 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55d6c7c9f2c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55d6c7c9f348 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55d6c7c9f410 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55d6c7c9f5f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55d6c7c9f628 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55d6c7c9f688 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55d6c7c9f6f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55d6c7c9f750 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55d6c7c9f7a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d6c7c9f7a0
| `-ParmVarDecl 0x55d6c7c9f8b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55d6c7c9f958 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d6c7c9f958
| `-ParmVarDecl 0x55d6c7c9fa68 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55d6c7e008a0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6c7daae30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55d6c7dab008 prev 0x55d6c7daae30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d6c7dab098 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d6c7dab0c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7dacc90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55d6c7dacc40 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55d6c7dab570 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55d6c7dab470 'type'
|     `-TemplateSpecializationType 0x55d6c7dab400 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55d6c7dab2e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55d6c7dab2c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55d6c7dab2a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55d6c7dab3e0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55d6c7dab300 'char_array'
|-TypedefDecl 0x55d6c7dacd48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55d6c7dacd10 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55d6c7daccf0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55d6c7dacc90 'type'
|     `-ElaboratedType 0x55d6c7dacc40 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55d6c7dab570 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55d6c7dab470 'type'
|         `-TemplateSpecializationType 0x55d6c7dab400 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55d6c7dab2e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55d6c7dab2c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55d6c7dab2a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55d6c7dab3e0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55d6c7dab300 'char_array'
|-CXXMethodDecl 0x55d6c7dacec8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55d6c7dacdd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55d6c7dacfb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d6c7dad098 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55d6c7dad368 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d6c7dad270 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55d6c7dad5a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6c7dad420 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6c7dad498 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7dad778 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6c7dad668 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6c7dad6e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7dad8d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d6c7dad9a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d6c7dadbf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6c7dada68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d6c7dadae0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7dade58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55d6c7dadcc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d6c7dadd40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7dae018 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d6c7dadf28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7dae1d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d6c7dae0e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7db5670 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6c7db5720 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d6c7db5958 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d6c7db57d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d6c7db5848 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d6c7db5bf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d6c7db5b00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55d6c7db5cc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55d6c7db5d10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d6c7db5d60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6c7da9838 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d6c7da9a48 prev 0x55d6c7da9838 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d6c7daada0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55d6c7daad50 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55d6c7daad30 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55d6c7daabe0 'type'
|     `-SubstTemplateTypeParmType 0x55d6c7daaa00 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55d6c7a81cf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7a81c98 'T'
|       `-RecordType 0x55d6c7daa550 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55d6c7daa468 'sized_array_memory'
|-FieldDecl 0x55d6c7db5db0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55d6c7db5e00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d6c7db5e38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|   |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|   `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db5ec8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55d6c7db5e90 'int &'
|   `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|     |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|     `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db5f88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55d6c7db5f50 'const int &'
|   `-QualType 0x55d6c7da9ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db6018 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55d6c7db5fe0 'int *'
|   `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|     |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|     `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db60a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55d6c7db6070 'const int *'
|   `-QualType 0x55d6c7da9ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db6c90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55d6c7db6c40 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55d6c7db6c20 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55d6c7db6bb0 'type'
|     `-SubstTemplateTypeParmType 0x55d6c7db6970 'int' sugar
|       |-TemplateTypeParmType 0x55d6c7a8caf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7a8caa0 'T'
|       `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db6cf8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55d6c7db5f50 'const int &'
|   `-QualType 0x55d6c7da9ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db6d50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db6db8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55d6c7db5fe0 'int *'
|   `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|     |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|     `-BuiltinType 0x55d6c77bc580 'int'
|-TypedefDecl 0x55d6c7db6e20 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55d6c7db6070 'const int *'
|   `-QualType 0x55d6c7da9ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x55d6c7da9ae0 'int' sugar
|       |-TemplateTypeParmType 0x55d6c7ab99e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d6c7ab9988 'T'
|       `-BuiltinType 0x55d6c77bc580 'int'
|-EnumDecl 0x55d6c7db6e78 <line:134:5> col:5
| `-EnumConstantDecl 0x55d6c7db6f70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d6c7db6f50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d6c7abb068 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d6c7abb040 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d6c7abb020 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d6c7db6ff8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d6c7db7248 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7db70b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6c7db7150 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55d6c7db7508 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55d6c7db73f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55d6c7db77c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55d6c7db76b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d6c7db7b10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55d6c7db79f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55d6c7db7e20 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55d6c7db7d00 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d6c7db8110 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7db7f58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6c7db7fd0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6c7db8238 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d6c7db8318 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7db8370 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7db83b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d6c7db8468 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7db84c0 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7db8588 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7db8638 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7db8690 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7db86d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7db8788 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7db87e0 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7db8828 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7db88d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7db8930 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7db8978 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d6c7db8a28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d6c7db8a80 <col:30> Inherited
|-CXXMethodDecl 0x55d6c7db8aa8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6c7db8b58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d6c7db8c08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d6c7db8dc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7db8cb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d6c7db8d30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6c7db8f18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d6c7db8e88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7db90c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55d6c7db8fd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6c7db9180 <col:20>
| `-OptimizeNoneAttr 0x55d6c7db91d8 <col:30>
|-CXXMethodDecl 0x55d6c7db92f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55d6c7db9200 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d6c7db93b0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7db9408 <col:30>
|-CXXMethodDecl 0x55d6c7db94c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6c7db9430 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7db9608 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6c7db9578 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7db9738 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55d6c7db9868 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55d6c7db9938 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55d6c7db9a08 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55d6c7db9b48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d6c7db9ab8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7db9c90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d6c7db9c00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d6c7db9dd8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d6c7db9d48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6c7db9e90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d6c7db9f90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d6c7db9f00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d6c7dba048 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d6c7dba108 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55d6c7dba208 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55d6c7dba388 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6c7dba2c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55d6c7dbab48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d6c7dba440 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55d6c7dbaaa8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55d6c7dba9a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55d6c7dbac28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d6c7dbad78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d6c7dbace8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6c7dbae30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d6c7dbb078 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d6c7dbaef0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d6c7dbaf68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d6c7dbb238 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55d6c7dbb148 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d6c7dbb488 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55d6c7dbb300 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d6c7dbb378 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d6c7dbb548 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d6c7dbb7a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55d6c7dbb6b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55d6c7dbb878 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7da79a8 prev 0x55d6c7d895f8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6c7da7aa0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55d6c7da7b90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55d6c7dcd5d0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55d6c7da7c80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55d6c7dcd5e0 <col:25, line:830:9>
|-CXXMethodDecl 0x55d6c7da7d80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55d6c7da7e30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55d6c7da7ed8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d6c7da7ed8
| `-ParmVarDecl 0x55d6c7da7fe8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55d6c7da87a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d6c7da87a8
  `-ParmVarDecl 0x55d6c7da88b8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7d89410 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55d6c7d89568 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55d6c7d895f8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55d6c7d896b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55d6c7d897b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55d6c7d896e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6c7dbce38 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6c7dbce18 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d6c7d89ad8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d89950 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55d6c7d899c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6c7dbce70 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6c7dbce50 <col:59> 'int' 0
|-CXXConstructorDecl 0x55d6c7d89cb0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d89ba0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55d6c7d89c18 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6c7dbcea8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6c7dbce88 <col:55> 'int' 0
|-CXXConstructorDecl 0x55d6c7d8a068 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d6c7d89e50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55d6c7d89ec8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55d6c7d89f40 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d6c7dbcee0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d6c7dbcec0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d6c7d8a228 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55d6c7d8a168 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55d6c7d8a320 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55d6c7d8a508 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55d6c7d8a410 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55d6c7d8a5f8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55d6c7dbd290 <col:24, line:291:5>
|   `-ReturnStmt 0x55d6c7dbd280 <line:290:9, col:79>
|     `-BinaryOperator 0x55d6c7dbd260 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55d6c7dbd138 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55d6c7dbd090 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55d6c7dbd070 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55d6c7dbcf68 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55d6c7dbcf50 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55d6c7dbcf38 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55d6c7dbcf08 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55d6c7da97d0
|       | |   |       `-CXXThisExpr 0x55d6c7dbcef8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55d6c7dbd058 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55d6c7dbd040 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55d6c7dbd008 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55d6c7dbcfd8 <col:28, col:35> '<bound member function type>' ->size 0x55d6c7d6a548
|       | |           `-ImplicitCastExpr 0x55d6c7dbd028 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55d6c7dbcfc0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55d6c7dbcf90 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55d6c7da97d0
|       | |                 `-CXXThisExpr 0x55d6c7dbcf80 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55d6c7dbd120 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55d6c7dbd108 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55d6c7dbd0f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55d6c7dbd0c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55d6c7dbb9c0
|       |         `-CXXThisExpr 0x55d6c7dbd0b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55d6c7dbd240 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55d6c7dbd228 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d6c7dbd210 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d6c7dbd1d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d6c7dbd1b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d6c7dbd168 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d6c7dbba70
|         |     |   `-CXXThisExpr 0x55d6c7dbd158 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d6c7dbd198 <col:73> 'int' 0
|         `-IntegerLiteral 0x55d6c7dbd1f0 <col:79> 'int' 0
|-CXXMethodDecl 0x55d6c7d8a6b8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55d6c7dbd468 <col:32, line:296:5>
|   `-ReturnStmt 0x55d6c7dbd458 <line:295:9, col:49>
|     `-BinaryOperator 0x55d6c7dbd438 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55d6c7dbd318 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55d6c7dbd300 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55d6c7dbd2e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55d6c7dbd2b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55d6c7dbb9c0
|       |       `-CXXThisExpr 0x55d6c7dbd2a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55d6c7dbd418 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55d6c7dbd400 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d6c7dbd3e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d6c7dbd3a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d6c7dbd390 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d6c7dbd340 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d6c7dbba70
|         |     |   `-CXXThisExpr 0x55d6c7dbd330 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d6c7dbd370 <col:43> 'int' 0
|         `-IntegerLiteral 0x55d6c7dbd3c8 <col:49> 'int' 0
|-CXXMethodDecl 0x55d6c7d8a7a8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55d6c7dbefe0 <col:19, line:306:5>
|   |-IfStmt 0x55d6c7dbd598 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55d6c7dbd4d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55d6c7dbd4c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55d6c7dbd490 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d6c7da97d0
|   | |     `-CXXThisExpr 0x55d6c7dbd480 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55d6c7dbd578 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55d6c7dbd548 <col:13, col:20> '<bound member function type>' ->clear 0x55d6c7d6cf48
|   |     `-ImplicitCastExpr 0x55d6c7dbd530 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55d6c7dbd500 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d6c7da97d0
|   |         `-CXXThisExpr 0x55d6c7dbd4f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55d6c7dbd620 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55d6c7dbd5f0 <col:9, col:16> '<bound member function type>' .clear 0x55d6c7dbb548
|   |   `-MemberExpr 0x55d6c7dbd5c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55d6c7dbb960
|   |     `-CXXThisExpr 0x55d6c7dbd5b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55d6c7dbefd0 <line:305:9, col:17>
|     `-UnaryOperator 0x55d6c7dbd650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7dbd640 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6c7d8aa28 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55d6c7d8a930 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55d6c7d8aba8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55d6c7d8aae0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55d6c7d8af28 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55d6c7d8ac50 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55d6c7d8ae88 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55d6c7d8acf8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55d6c7d8ad70 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55d6c7dbf300 <col:67, line:327:5>
|     |-WhileStmt 0x55d6c7dbf2b0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55d6c7dbf0c8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d6c7dbf048 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d6c7cdb5c8 0x55d6c7b24ba8 0x55d6c7b24880 0x55d6c7b15050 0x55d6c7b14d00 0x55d6c7b145f0 0x55d6c7ae6f60 0x55d6c7a74430
|     | | |-DeclRefExpr 0x55d6c7dbf008 <col:16> 'Iter' lvalue ParmVar 0x55d6c7d8acf8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55d6c7dbf028 <col:25> 'Iter' lvalue ParmVar 0x55d6c7d8ad70 'end' 'Iter'
|     | `-CompoundStmt 0x55d6c7dbf290 <col:30, line:325:9>
|     |   |-CallExpr 0x55d6c7dbf230 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55d6c7dbf110 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55d6c7dbf200 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55d6c7dbf190 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|     |   |   `-DeclRefExpr 0x55d6c7dbf170 <col:24> 'Iter' lvalue ParmVar 0x55d6c7d8acf8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55d6c7dbf278 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55d6c7dbf258 <col:15> 'Iter' lvalue ParmVar 0x55d6c7d8acf8 'begin' 'Iter'
|     `-ReturnStmt 0x55d6c7dbf2f0 <line:326:9, col:17>
|       `-UnaryOperator 0x55d6c7dbf2d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dbf2c8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6c7d8b030 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55d6c7d8afa0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55d6c7d8b178 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55d6c7d8b0e8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55d6c7d8b240 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55d6c7dbf3e0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55d6c7dbf380 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55d6c7dbf330 <col:9> '<bound member function type>' ->reset_from 0x55d6c7dbbde8
|   | | `-CXXThisExpr 0x55d6c7dbf320 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55d6c7dbf360 <col:20> 'int' 0
|   `-ReturnStmt 0x55d6c7dbf3d0 <line:352:9, col:17>
|     `-UnaryOperator 0x55d6c7dbf3b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7dbf3a8 <col:17> 'Args *' this
|-VarDecl 0x55d6c7d8b2f8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6c7d8b360 <col:38> 'int' 1
|-VarDecl 0x55d6c7d8b3f0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6c7d8b458 <col:39> 'int' 2
|-VarDecl 0x55d6c7d8b4e8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6c7d8b550 <col:39> 'int' 4
|-VarDecl 0x55d6c7d8b5e0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d6c7d8b648 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55d6c7d8b9c8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55d6c7d8b6c0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d8b928 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d6c7d8b770 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8b818 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dbf538 <col:43, line:371:5>
|     `-ReturnStmt 0x55d6c7dbf528 <line:370:9, col:34>
|       `-CallExpr 0x55d6c7dbf4f0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dbf410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dbf490 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8b770 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dbf4b0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55d6c7dbf4d0 <col:33> 'T' lvalue ParmVar 0x55d6c7d8b818 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d8bcf8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55d6c7d8ba30 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d8bc58 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d6c7d8bae0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8bb88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dbf688 <col:45, line:375:5>
|     `-ReturnStmt 0x55d6c7dbf678 <line:374:9, col:42>
|       `-CallExpr 0x55d6c7dbf640 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dbf560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dbf5e0 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8bae0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dbf600 <col:30> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d6c7dbf620 <col:41> 'T' lvalue ParmVar 0x55d6c7d8bb88 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d8c028 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55d6c7d8bd60 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d8bf88 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d6c7d8be10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8beb8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dbf7d8 <col:45, line:379:5>
|     `-ReturnStmt 0x55d6c7dbf7c8 <line:378:9, col:43>
|       `-CallExpr 0x55d6c7dbf790 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dbf6b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dbf730 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8be10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dbf750 <col:30> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int'
|         `-DeclRefExpr 0x55d6c7dbf770 <col:42> 'T' lvalue ParmVar 0x55d6c7d8beb8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d8c358 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55d6c7d8c090 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55d6c7d8c2b8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55d6c7d8c140 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d6c7d8c1e8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55d6c7dbf9d8 <col:46, line:383:5>
| |   `-ReturnStmt 0x55d6c7dbf9c8 <line:382:9, col:55>
| |     `-CallExpr 0x55d6c7dbf990 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d6c7dbf800 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d6c7dbf880 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8c140 'keyword' 'const char *'
| |       |-BinaryOperator 0x55d6c7dbf950 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55d6c7dbf900 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55d6c7dbf8e0 <col:30> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55d6c7dbf938 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55d6c7dbf918 <col:42> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55d6c7dbf970 <col:54> 'T' lvalue ParmVar 0x55d6c7d8c1e8 'x' 'T &'
| `-CXXMethodDecl 0x55d6c7e00d28 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned char &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55d6c7e00b48 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55d6c7e00c18 <col:40, col:43> col:43 x 'unsigned char &'
|-FunctionTemplateDecl 0x55d6c7d8c758 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55d6c7d8c3c0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d8c6b8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55d6c7d8c470 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8c4f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d8c598 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dbfb18 <col:54, line:388:5>
|     |-CallExpr 0x55d6c7dbfaa0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dbf9f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d6c7dbfa30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dbfa40 <col:30> 'const char *' lvalue ParmVar 0x55d6c7d8c470 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6c7dbfa60 <col:39> 'int' lvalue ParmVar 0x55d6c7d8c4f0 'flags' 'int'
|     | `-DeclRefExpr 0x55d6c7dbfa80 <col:46> 'T' lvalue ParmVar 0x55d6c7d8c598 'x' 'T &'
|     `-ReturnStmt 0x55d6c7dbfb08 <line:387:9, col:17>
|       `-UnaryOperator 0x55d6c7dbfaf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dbfae0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d8cc08 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6c7d8c7c8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6c7d8c848 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6c7d8cb68 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d8c908 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8c9a8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d8ca48 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6c7dbfc88 <col:74, line:403:5>
|     `-ReturnStmt 0x55d6c7dbfc78 <line:402:9, col:56>
|       `-CallExpr 0x55d6c7dbfc38 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dbfb48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dbfbb8 <col:28> 'const char *' lvalue ParmVar 0x55d6c7d8c908 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dbfbd8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d6c7dbfbf8 <col:40> 'T' lvalue ParmVar 0x55d6c7d8c9a8 'x' 'T &'
|         `-DeclRefExpr 0x55d6c7dbfc18 <col:43> 'const V' lvalue ParmVar 0x55d6c7d8ca48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6c7d8d078 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d6c7d8cc78 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6c7d8ccf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6c7d8cfd8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d8cdb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8ce58 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d8cef8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6c7dbfdf0 <col:76, line:407:5>
|     `-ReturnStmt 0x55d6c7dbfde0 <line:406:9, col:65>
|       `-CallExpr 0x55d6c7dbfda0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dbfcb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dbfd20 <col:28> 'const char *' lvalue ParmVar 0x55d6c7d8cdb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dbfd40 <col:37> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6c7dbfd60 <col:49> 'T' lvalue ParmVar 0x55d6c7d8ce58 'x' 'T &'
|         `-DeclRefExpr 0x55d6c7dbfd80 <col:52> 'const V' lvalue ParmVar 0x55d6c7d8cef8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6c7d8d5c8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6c7d8d0e8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6c7d8d168 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6c7d8d528 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d8d228 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8d2a8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d8d348 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d8d3e8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6c7dbff58 <col:85, line:412:5>
|     |-CallExpr 0x55d6c7dbfed8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dbfe08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d6c7dbfe48 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dbfe58 <col:37> 'const char *' lvalue ParmVar 0x55d6c7d8d228 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6c7dbfe78 <col:46> 'int' lvalue ParmVar 0x55d6c7d8d2a8 'flags' 'int'
|     | |-DeclRefExpr 0x55d6c7dbfe98 <col:53> 'T' lvalue ParmVar 0x55d6c7d8d348 'x' 'T &'
|     | `-DeclRefExpr 0x55d6c7dbfeb8 <col:56> 'const V' lvalue ParmVar 0x55d6c7d8d3e8 'default_value' 'const V &'
|     `-ReturnStmt 0x55d6c7dbff48 <line:411:9, col:17>
|       `-UnaryOperator 0x55d6c7dbff30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dbff20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d8da58 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55d6c7d8d640 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8d6b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d8d9b8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d8d778 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8d7f0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8d898 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc00d8 <col:53, line:425:5>
|     `-ReturnStmt 0x55d6c7dc00c8 <line:424:9, col:42>
|       `-CallExpr 0x55d6c7dc0088 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dbff88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc0008 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8d778 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc0028 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d6c7dc0048 <col:33> 'P' lvalue ParmVar 0x55d6c7d8d7f0 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc0068 <col:41> 'T' lvalue ParmVar 0x55d6c7d8d898 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d8dea8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55d6c7d8dac8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8db48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d8de08 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d8dc08 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8dc80 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8dd28 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc0250 <col:55, line:429:5>
|     `-ReturnStmt 0x55d6c7dc0240 <line:428:9, col:50>
|       `-CallExpr 0x55d6c7dc0200 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc0100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc0180 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8dc08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc01a0 <col:30> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d6c7dc01c0 <col:41> 'P' lvalue ParmVar 0x55d6c7d8dc80 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc01e0 <col:49> 'T' lvalue ParmVar 0x55d6c7d8dd28 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d8e2f8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55d6c7d8df18 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8df98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55d6c7d8e258 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55d6c7d8e058 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d6c7d8e0d0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55d6c7d8e178 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55d6c7dc03c8 <col:55, line:433:5>
| |   `-ReturnStmt 0x55d6c7dc03b8 <line:432:9, col:51>
| |     `-CallExpr 0x55d6c7dc0378 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d6c7dc0278 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d6c7dc02f8 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8e058 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55d6c7dc0318 <col:30> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int'
| |       |-DeclRefExpr 0x55d6c7dc0338 <col:42> 'P' lvalue ParmVar 0x55d6c7d8e0d0 'parser' 'P'
| |       `-DeclRefExpr 0x55d6c7dc0358 <col:50> 'T' lvalue ParmVar 0x55d6c7d8e178 'x' 'T &'
| `-CXXMethodDecl 0x55d6c7e01838 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55d6c7e015a0 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7e01648 <col:39, col:41> col:41 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55d6c7e01718 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x55d6c7d8e748 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55d6c7d8e368 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8e3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d8e6a8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d8e4a8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8e520 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8e5c8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc05f0 <col:56, line:437:5>
|     `-ReturnStmt 0x55d6c7dc05e0 <line:436:9, col:63>
|       `-CallExpr 0x55d6c7dc05a0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc03f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc0470 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d8e4a8 'keyword' 'const char *'
|         |-BinaryOperator 0x55d6c7dc0540 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d6c7dc04f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d6c7dc04d0 <col:30> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d6c7dc0528 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d6c7dc0508 <col:42> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d6c7dc0560 <col:54> 'P' lvalue ParmVar 0x55d6c7d8e520 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc0580 <col:62> 'T' lvalue ParmVar 0x55d6c7d8e5c8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d8ec78 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55d6c7d8e7b8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8e838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d8ebd8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6c7d8e8f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8e978 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d8e9f0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8ea98 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc0758 <col:64, line:442:5>
|     |-CallExpr 0x55d6c7dc06d8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc0608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d6c7dc0648 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc0658 <col:30> 'const char *' lvalue ParmVar 0x55d6c7d8e8f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6c7dc0678 <col:39> 'int' lvalue ParmVar 0x55d6c7d8e978 'flags' 'int'
|     | |-DeclRefExpr 0x55d6c7dc0698 <col:46> 'P' lvalue ParmVar 0x55d6c7d8e9f0 'parser' 'P'
|     | `-DeclRefExpr 0x55d6c7dc06b8 <col:54> 'T' lvalue ParmVar 0x55d6c7d8ea98 'x' 'T &'
|     `-ReturnStmt 0x55d6c7dc0748 <line:441:9, col:17>
|       `-UnaryOperator 0x55d6c7dc0730 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc0720 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d8f278 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6c7d8ecf0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8ed68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d6c7d8ede8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6c7d8f1d8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d8eeb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8ef28 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8efc8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d8f098 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6c7dc08f0 <col:84, line:458:5>
|     `-ReturnStmt 0x55d6c7dc08e0 <line:457:9, col:64>
|       `-CallExpr 0x55d6c7dc0898 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc0788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc07f8 <col:28> 'const char *' lvalue ParmVar 0x55d6c7d8eeb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc0818 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d6c7dc0838 <col:40> 'P' lvalue ParmVar 0x55d6c7d8ef28 'parser' 'P'
|         |-DeclRefExpr 0x55d6c7dc0858 <col:48> 'T' lvalue ParmVar 0x55d6c7d8efc8 'x' 'T &'
|         `-DeclRefExpr 0x55d6c7dc0878 <col:51> 'const V' lvalue ParmVar 0x55d6c7d8f098 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6c7d8f7f8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d6c7d8f2f0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8f368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d6c7d8f3e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6c7d8f758 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d8f4b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8f528 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8f5c8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d8f668 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6c7dc0a80 <col:86, line:462:5>
|     `-ReturnStmt 0x55d6c7dc0a70 <line:461:9, col:73>
|       `-CallExpr 0x55d6c7dc0a28 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc0918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc0988 <col:28> 'const char *' lvalue ParmVar 0x55d6c7d8f4b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc09a8 <col:37> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6c7dc09c8 <col:49> 'P' lvalue ParmVar 0x55d6c7d8f528 'parser' 'P'
|         |-DeclRefExpr 0x55d6c7dc09e8 <col:57> 'T' lvalue ParmVar 0x55d6c7d8f5c8 'x' 'T &'
|         `-DeclRefExpr 0x55d6c7dc0a08 <col:60> 'const V' lvalue ParmVar 0x55d6c7d8f668 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d6c7d8fe58 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55d6c7d8f870 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8f8e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d6c7d8f968 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6c7d8fdb8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d8fa30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d8fab0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d8fb28 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d8fbc8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d8fc68 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d6c7dc0c10 <col:95, line:467:5>
|     |-CallExpr 0x55d6c7dc0b88 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc0a98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d6c7dc0ad8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc0ae8 <col:37> 'const char *' lvalue ParmVar 0x55d6c7d8fa30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6c7dc0b08 <col:46> 'int' lvalue ParmVar 0x55d6c7d8fab0 'flags' 'int'
|     | |-DeclRefExpr 0x55d6c7dc0b28 <col:53> 'P' lvalue ParmVar 0x55d6c7d8fb28 'parser' 'P'
|     | |-DeclRefExpr 0x55d6c7dc0b48 <col:61> 'T' lvalue ParmVar 0x55d6c7d8fbc8 'x' 'T &'
|     | `-DeclRefExpr 0x55d6c7dc0b68 <col:64> 'const V' lvalue ParmVar 0x55d6c7d8fc68 'default_value' 'const V &'
|     `-ReturnStmt 0x55d6c7dc0c00 <line:466:9, col:17>
|       `-UnaryOperator 0x55d6c7dc0be8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc0bd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d90438 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55d6c7d8fed8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d8ff58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6c7d8ffd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6c7d90398 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6c7d900a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d90118 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d901b8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6c7d90258 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6c7dc0db8 <col:63, line:481:5>
|     `-ReturnStmt 0x55d6c7dc0da8 <line:480:9, col:47>
|       `-CallExpr 0x55d6c7dc0d60 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc0c40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc0cc0 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d900a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc0ce0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d6c7dc0d00 <col:33> 'P' lvalue ParmVar 0x55d6c7d90118 'parser' 'P'
|         |-DeclRefExpr 0x55d6c7dc0d20 <col:41> 'T1' lvalue ParmVar 0x55d6c7d901b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6c7dc0d40 <col:45> 'T2' lvalue ParmVar 0x55d6c7d90258 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6c7d909b8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55d6c7d904b0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d90528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6c7d905a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6c7d90918 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6c7d90670 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d906e8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d90788 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6c7d90828 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6c7dc0f58 <col:65, line:485:5>
|     `-ReturnStmt 0x55d6c7dc0f48 <line:484:9, col:55>
|       `-CallExpr 0x55d6c7dc0f00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc0de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc0e60 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d90670 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc0e80 <col:30> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d6c7dc0ea0 <col:41> 'P' lvalue ParmVar 0x55d6c7d906e8 'parser' 'P'
|         |-DeclRefExpr 0x55d6c7dc0ec0 <col:49> 'T1' lvalue ParmVar 0x55d6c7d90788 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6c7dc0ee0 <col:53> 'T2' lvalue ParmVar 0x55d6c7d90828 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6c7d90f38 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55d6c7d90a30 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d90aa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6c7d90b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6c7d90e98 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6c7d90bf0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d90c68 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d90d08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6c7d90da8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6c7dc10f8 <col:65, line:489:5>
|     `-ReturnStmt 0x55d6c7dc10e8 <line:488:9, col:56>
|       `-CallExpr 0x55d6c7dc10a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc0f80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc1000 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d90bf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc1020 <col:30> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int'
|         |-DeclRefExpr 0x55d6c7dc1040 <col:42> 'P' lvalue ParmVar 0x55d6c7d90c68 'parser' 'P'
|         |-DeclRefExpr 0x55d6c7dc1060 <col:50> 'T1' lvalue ParmVar 0x55d6c7d90d08 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6c7dc1080 <col:54> 'T2' lvalue ParmVar 0x55d6c7d90da8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6c7d96998 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55d6c7d90fb0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d91028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6c7d910a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6c7d968f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6c7d91170 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d966c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d96768 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6c7d96808 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6c7dc1348 <col:66, line:493:5>
|     `-ReturnStmt 0x55d6c7dc1338 <line:492:9, col:68>
|       `-CallExpr 0x55d6c7dc12f0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1120 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc11a0 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d91170 'keyword' 'const char *'
|         |-BinaryOperator 0x55d6c7dc1270 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d6c7dc1220 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d6c7dc1200 <col:30> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d6c7dc1258 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d6c7dc1238 <col:42> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d6c7dc1290 <col:54> 'P' lvalue ParmVar 0x55d6c7d966c0 'parser' 'P'
|         |-DeclRefExpr 0x55d6c7dc12b0 <col:62> 'T1' lvalue ParmVar 0x55d6c7d96768 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d6c7dc12d0 <col:66> 'T2' lvalue ParmVar 0x55d6c7d96808 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d6c7d96ff8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55d6c7d96a10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d96a88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6c7d96b08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6c7d96f58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6c7d96bd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d96c50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d96cc8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d96d68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d6c7d96e08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d6c7dc14d8 <col:74, line:498:5>
|     |-CallExpr 0x55d6c7dc1450 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc1360 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d6c7dc13a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc13b0 <col:30> 'const char *' lvalue ParmVar 0x55d6c7d96bd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6c7dc13d0 <col:39> 'int' lvalue ParmVar 0x55d6c7d96c50 'flags' 'int'
|     | |-DeclRefExpr 0x55d6c7dc13f0 <col:46> 'P' lvalue ParmVar 0x55d6c7d96cc8 'parser' 'P'
|     | |-DeclRefExpr 0x55d6c7dc1410 <col:54> 'T1' lvalue ParmVar 0x55d6c7d96d68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55d6c7dc1430 <col:58> 'T2' lvalue ParmVar 0x55d6c7d96e08 'x2' 'T2 &'
|     `-ReturnStmt 0x55d6c7dc14c8 <line:497:9, col:17>
|       `-UnaryOperator 0x55d6c7dc14b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc14a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d97358 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55d6c7d97078 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d972b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6c7d97130 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d971a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc1620 <col:52, line:509:5>
|     `-ReturnStmt 0x55d6c7dc1610 <line:508:9, col:44>
|       `-CallExpr 0x55d6c7dc15d8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc1578 <col:26> 'const char *' lvalue ParmVar 0x55d6c7d97130 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc1598 <col:35> 'int' 0
|         `-DeclRefExpr 0x55d6c7dc15b8 <col:38> 'P' lvalue ParmVar 0x55d6c7d971a8 'parser' 'P'
|-FunctionTemplateDecl 0x55d6c7d97658 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55d6c7d973c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d975b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6c7d97470 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d974e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc1760 <col:54, line:513:5>
|     `-ReturnStmt 0x55d6c7dc1750 <line:512:9, col:52>
|       `-CallExpr 0x55d6c7dc1718 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc16b8 <col:26> 'const char *' lvalue ParmVar 0x55d6c7d97470 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc16d8 <col:35> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d6c7dc16f8 <col:46> 'P' lvalue ParmVar 0x55d6c7d974e8 'parser' 'P'
|-FunctionTemplateDecl 0x55d6c7d97958 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55d6c7d976c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d978b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6c7d97770 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d977e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc18a0 <col:54, line:517:5>
|     `-ReturnStmt 0x55d6c7dc1890 <line:516:9, col:53>
|       `-CallExpr 0x55d6c7dc1858 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc17f8 <col:26> 'const char *' lvalue ParmVar 0x55d6c7d97770 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc1818 <col:35> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int'
|         `-DeclRefExpr 0x55d6c7dc1838 <col:47> 'P' lvalue ParmVar 0x55d6c7d977e8 'parser' 'P'
|-FunctionTemplateDecl 0x55d6c7d97c58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d6c7d979c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d97bb8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6c7d97a70 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d97ae8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc1a90 <col:55, line:521:5>
|     `-ReturnStmt 0x55d6c7dc1a80 <line:520:9, col:65>
|       `-CallExpr 0x55d6c7dc1a48 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc18c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc1938 <col:26> 'const char *' lvalue ParmVar 0x55d6c7d97a70 'keyword' 'const char *'
|         |-BinaryOperator 0x55d6c7dc1a08 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55d6c7dc19b8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d6c7dc1998 <col:35> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d6c7dc19f0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d6c7dc19d0 <col:47> 'const int' lvalue Var 0x55d6c7d8b3f0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d6c7dc1a28 <col:59> 'P' lvalue ParmVar 0x55d6c7d97ae8 'parser' 'P'
|-FunctionTemplateDecl 0x55d6c7d98028 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55d6c7d97cc0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d97f88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d6c7d97d70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d97df0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d97e68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc1bd0 <col:63, line:526:5>
|     |-CallExpr 0x55d6c7dc1b58 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc1aa8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55d6c7dc1ae8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc1af8 <col:35> 'const char *' lvalue ParmVar 0x55d6c7d97d70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d6c7dc1b18 <col:44> 'int' lvalue ParmVar 0x55d6c7d97df0 'flags' 'int'
|     | `-DeclRefExpr 0x55d6c7dc1b38 <col:51> 'P' lvalue ParmVar 0x55d6c7d97e68 'parser' 'P'
|     `-ReturnStmt 0x55d6c7dc1bc0 <line:525:9, col:17>
|       `-UnaryOperator 0x55d6c7dc1ba8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc1b98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d98478 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55d6c7d98098 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d98118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d983d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d981d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d98250 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d982f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc1d28 <col:58, line:541:5>
|     `-ReturnStmt 0x55d6c7dc1d18 <line:540:9, col:39>
|       `-CallExpr 0x55d6c7dc1ce0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1c00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc1c80 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d981d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc1ca0 <col:30> 'P' lvalue ParmVar 0x55d6c7d98250 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc1cc0 <col:38> 'T' lvalue ParmVar 0x55d6c7d982f8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d988c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55d6c7d984e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d98568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d98828 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d98628 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d986a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d98748 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc1e60 <col:60, line:545:5>
|     `-ReturnStmt 0x55d6c7dc1e50 <line:544:9, col:41>
|       `-CallExpr 0x55d6c7dc1e18 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1d50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc1db8 <col:23> 'const char *' lvalue ParmVar 0x55d6c7d98628 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc1dd8 <col:32> 'P' lvalue ParmVar 0x55d6c7d986a0 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc1df8 <col:40> 'T' lvalue ParmVar 0x55d6c7d98748 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d98d18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55d6c7d98938 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d989b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d98c78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d98a78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d98af0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d98b98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc1f98 <col:60, line:549:5>
|     `-ReturnStmt 0x55d6c7dc1f88 <line:548:9, col:41>
|       `-CallExpr 0x55d6c7dc1f50 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc1ef0 <col:23> 'const char *' lvalue ParmVar 0x55d6c7d98a78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc1f10 <col:32> 'P' lvalue ParmVar 0x55d6c7d98af0 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc1f30 <col:40> 'T' lvalue ParmVar 0x55d6c7d98b98 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d99168 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d6c7d98d88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d98e08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d990c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d98ec8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d98f40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d98fe8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc20d0 <col:61, line:553:5>
|     `-ReturnStmt 0x55d6c7dc20c0 <line:552:9, col:42>
|       `-CallExpr 0x55d6c7dc2088 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc1fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc2028 <col:24> 'const char *' lvalue ParmVar 0x55d6c7d98ec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc2048 <col:33> 'P' lvalue ParmVar 0x55d6c7d98f40 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc2068 <col:41> 'T' lvalue ParmVar 0x55d6c7d98fe8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d99648 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55d6c7d991d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d99258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d995a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6c7d99318 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d99398 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d99410 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d994b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc2248 <col:69, line:557:5>
|     `-ReturnStmt 0x55d6c7dc2238 <line:556:9, col:46>
|       `-CallExpr 0x55d6c7dc21f8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc20f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc2178 <col:21> 'const char *' lvalue ParmVar 0x55d6c7d99318 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc2198 <col:30> 'int' lvalue ParmVar 0x55d6c7d99398 'flags' 'int'
|         |-DeclRefExpr 0x55d6c7dc21b8 <col:37> 'P' lvalue ParmVar 0x55d6c7d99410 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc21d8 <col:45> 'T' lvalue ParmVar 0x55d6c7d994b8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d99958 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6c7d996c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d998b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d6c7d99770 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d997e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc2388 <col:56, line:571:5>
|     `-ReturnStmt 0x55d6c7dc2378 <line:570:9, col:48>
|       `-CallExpr 0x55d6c7dc2340 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc2270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc22e0 <col:30> 'const char *' lvalue ParmVar 0x55d6c7d99770 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc2300 <col:39> 'int' 0
|         `-DeclRefExpr 0x55d6c7dc2320 <col:42> 'P' lvalue ParmVar 0x55d6c7d997e8 'parser' 'P'
|-FunctionTemplateDecl 0x55d6c7d99ce8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6c7d999c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7d99c48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d6c7d99a70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d99af0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d99b68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dc2558 <col:67, line:576:5>
|     |-CallExpr 0x55d6c7dc24e0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc23a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d6c7dc23e0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc23f0 <col:39> 'const char *' lvalue ParmVar 0x55d6c7d99a70 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d6c7dc24a0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d6c7dc2450 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d6c7dc2410 <col:48> 'int' lvalue ParmVar 0x55d6c7d99af0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d6c7dc2488 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d6c7dc2468 <col:56> 'const int' lvalue Var 0x55d6c7d8b5e0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55d6c7dc24c0 <col:68> 'P' lvalue ParmVar 0x55d6c7d99b68 'parser' 'P'
|     `-ReturnStmt 0x55d6c7dc2548 <line:575:9, col:17>
|       `-UnaryOperator 0x55d6c7dc2530 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc2520 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d9a138 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6c7d99d58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d99dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d9a098 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d6c7d99e98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d99f10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d99fb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc26c8 <col:62, line:592:5>
|     `-ReturnStmt 0x55d6c7dc26b8 <line:591:9, col:51>
|       `-CallExpr 0x55d6c7dc2678 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc2588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc25f8 <col:30> 'const char *' lvalue ParmVar 0x55d6c7d99e98 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc2618 <col:39> 'int' 0
|         |-DeclRefExpr 0x55d6c7dc2638 <col:42> 'P' lvalue ParmVar 0x55d6c7d99f10 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc2658 <col:50> 'T' lvalue ParmVar 0x55d6c7d99fb8 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d9a618 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55d6c7d9a1a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d9a228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d9a578 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6c7d9a2e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9a368 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9a3e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d9a488 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc28c0 <col:73, line:597:5>
|     |-CallExpr 0x55d6c7dc2840 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc26e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d6c7dc2720 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc2730 <col:39> 'const char *' lvalue ParmVar 0x55d6c7d9a2e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d6c7dc27e0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d6c7dc2790 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d6c7dc2750 <col:48> 'int' lvalue ParmVar 0x55d6c7d9a368 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d6c7dc27c8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d6c7dc27a8 <col:56> 'const int' lvalue Var 0x55d6c7d8b5e0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d6c7dc2800 <col:68> 'P' lvalue ParmVar 0x55d6c7d9a3e0 'parser' 'P'
|     | `-DeclRefExpr 0x55d6c7dc2820 <col:76> 'T' lvalue ParmVar 0x55d6c7d9a488 'x' 'T &'
|     `-ReturnStmt 0x55d6c7dc28b0 <line:596:9, col:17>
|       `-UnaryOperator 0x55d6c7dc2898 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc2888 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d9abc8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55d6c7d9a690 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d9a708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d9ab28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d6c7d9a7c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9a840 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d9aa00 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6c7dc2a30 <col:65, line:614:5>
|     `-ReturnStmt 0x55d6c7dc2a20 <line:613:9, col:46>
|       `-CallExpr 0x55d6c7dc29e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc28f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc2960 <col:25> 'const char *' lvalue ParmVar 0x55d6c7d9a7c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc2980 <col:34> 'int' 0
|         |-DeclRefExpr 0x55d6c7dc29a0 <col:37> 'P' lvalue ParmVar 0x55d6c7d9a840 'parser' 'P'
|         `-DeclRefExpr 0x55d6c7dc29c0 <col:45> 'Vector<T>' lvalue ParmVar 0x55d6c7d9aa00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d6c7d9aff8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55d6c7d9ac38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d9af58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55d6c7d9acf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9ae40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6c7dc2c50 <col:55, line:618:5>
|     `-ReturnStmt 0x55d6c7dc2c40 <line:617:9, col:55>
|       `-CallExpr 0x55d6c7dc2c00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc2a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc2ac8 <col:25> 'const char *' lvalue ParmVar 0x55d6c7d9acf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d6c7dc2ae8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55d6c7dc2bc0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d6c7dc2be0 <col:54> 'Vector<T>' lvalue ParmVar 0x55d6c7d9ae40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d6c7d9b5c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55d6c7d9b060 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d9b0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d9b528 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d6c7d9b198 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9b218 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9b290 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d9b3e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6c7dc2e48 <col:76, line:623:5>
|     |-CallExpr 0x55d6c7dc2dc8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d6c7dc2c68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55d6c7dc2ca8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55d6c7dc2cb8 <col:34> 'const char *' lvalue ParmVar 0x55d6c7d9b198 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d6c7dc2d68 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d6c7dc2d18 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d6c7dc2cd8 <col:43> 'int' lvalue ParmVar 0x55d6c7d9b218 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d6c7dc2d50 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d6c7dc2d30 <col:51> 'const int' lvalue Var 0x55d6c7d8b5e0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d6c7dc2d88 <col:63> 'P' lvalue ParmVar 0x55d6c7d9b290 'parser' 'P'
|     | `-DeclRefExpr 0x55d6c7dc2da8 <col:71> 'Vector<T>' lvalue ParmVar 0x55d6c7d9b3e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55d6c7dc2e38 <line:622:9, col:17>
|       `-UnaryOperator 0x55d6c7dc2e20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc2e10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d9bb08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55d6c7d9b640 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d9b6b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d9ba68 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55d6c7d9b778 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9b7f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9b940 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d6c7dc30b0 <col:66, line:627:5>
|     `-ReturnStmt 0x55d6c7dc30a0 <line:626:9, col:59>
|       `-CallExpr 0x55d6c7dc3060 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d6c7dc2e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d6c7dc2ee8 <col:25> 'const char *' lvalue ParmVar 0x55d6c7d9b778 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d6c7dc2f08 <col:34> 'int' lvalue ParmVar 0x55d6c7d9b7f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55d6c7dc3020 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d6c7dc3040 <col:58> 'Vector<T>' lvalue ParmVar 0x55d6c7d9b940 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55d6c7d9bb98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55d6c7dc3130 <col:25, line:633:5>
|   `-ReturnStmt 0x55d6c7dc3120 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55d6c7dc3108 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d6c7dc30d8 <col:16> 'const bool' lvalue ->_status 0x55d6c7da9638
|         `-CXXThisExpr 0x55d6c7dc30c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d6c7d9bd18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55d6c7d9bc50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55d6c7dc3218 <col:27, line:639:5>
|   |-BinaryOperator 0x55d6c7dc31c0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6c7dc3148 <col:9> 'bool' lvalue ParmVar 0x55d6c7d9bc50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6c7dc31a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7dc3178 <col:13> 'bool' lvalue ->_status 0x55d6c7da9638
|   |     `-CXXThisExpr 0x55d6c7dc3168 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d6c7dc3208 <line:638:9, col:17>
|     `-UnaryOperator 0x55d6c7dc31f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7dc31e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6c7d9be98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d6c7d9bdd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55d6c7dc3308 <col:39, line:644:5>
|   |-BinaryOperator 0x55d6c7dc32b0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6c7dc3238 <col:9> 'bool' lvalue ParmVar 0x55d6c7d9bdd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6c7dc3298 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7dc3268 <col:13> 'const bool' lvalue ->_status 0x55d6c7da9638
|   |     `-CXXThisExpr 0x55d6c7dc3258 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d6c7dc32f8 <line:643:9, col:17>
|     `-UnaryOperator 0x55d6c7dc32e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7dc32d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d6c7d9bf60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55d6c7dc33b0 <col:30, line:651:5>
|   `-ReturnStmt 0x55d6c7dc33a0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55d6c7dc3388 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d6c7dc3358 <col:16> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|         `-ImplicitCastExpr 0x55d6c7dc3338 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55d6c7dc3328 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d6c7d9c0a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55d6c7d9c018 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55d6c7dc34b8 <col:32, line:658:5>
|   |-BinaryOperator 0x55d6c7dc3460 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6c7dc33c8 <col:9> 'bool' lvalue ParmVar 0x55d6c7d9c018 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6c7dc3448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7dc3418 <col:13> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|   |     `-ImplicitCastExpr 0x55d6c7dc33f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d6c7dc33e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d6c7dc34a8 <line:657:9, col:17>
|     `-UnaryOperator 0x55d6c7dc3490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7dc3480 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d6c7d9c1f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d6c7d9c168 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55d6c7dc35c8 <col:44, line:663:5>
|   |-BinaryOperator 0x55d6c7dc3570 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d6c7dc34d8 <col:9> 'bool' lvalue ParmVar 0x55d6c7d9c168 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d6c7dc3558 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d6c7dc3528 <col:13> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|   |     `-ImplicitCastExpr 0x55d6c7dc3508 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d6c7dc34f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d6c7dc35b8 <line:662:9, col:17>
|     `-UnaryOperator 0x55d6c7dc35a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7dc3590 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d6c7d9c2c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55d6c7d9c388 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55d6c7d9c450 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55d6c7d9c518 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55d6c7d9c828 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55d6c7d9c5b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d9c788 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55d6c7d9c698 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc3980 <col:19, line:706:5>
|     `-IfStmt 0x55d6c7dc3958 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55d6c7dc36c8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55d6c7dc3888 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55d6c7dc3858 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55d6c7dc3818 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55d6c7dc3720 <col:42> '<bound member function type>' ->simple_slot 0x55d6c7dbcaa0
|       |     | `-CXXThisExpr 0x55d6c7dc3710 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55d6c7dc37b8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55d6c7dc3770 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55d6c7b29648
|       |     | `-DeclRefExpr 0x55d6c7dc3750 <col:55> 'T' lvalue ParmVar 0x55d6c7d9c698 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55d6c7dc37f8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55d6c7dc3948 <line:705:13, col:34>
|         `-CallExpr 0x55d6c7dc3920 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55d6c7dc38a8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55d6c7dc3900 <col:33> 'T' lvalue ParmVar 0x55d6c7d9c698 'x' 'T &'
|-FunctionTemplateDecl 0x55d6c7d9caf8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55d6c7d9c888 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d9ca58 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55d6c7d9c968 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55d6c7dc3d60 <col:31, line:717:5>
|     |-DeclStmt 0x55d6c7dc3ac0 <line:713:9, col:23>
|     | `-VarDecl 0x55d6c7dc39a8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55d6c7dc3a98 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d6c7dc3a20 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d6c7dc3a78 <col:21> 'T' lvalue ParmVar 0x55d6c7d9c968 'x' 'T &'
|     |-IfStmt 0x55d6c7dc3d10 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55d6c7dc3bb8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55d6c7dc3cf0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d6c7dc3c90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d6c7dc3c20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|     |   | `-DeclRefExpr 0x55d6c7dc3c00 <col:14> 'T *' lvalue Var 0x55d6c7dc39a8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55d6c7dc3cd0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55d6c7dc3d48 <line:716:9, col:16>
|       `-DeclRefExpr 0x55d6c7dc3d28 <col:16> 'T *' lvalue Var 0x55d6c7dc39a8 's' 'T *'
|-FunctionTemplateDecl 0x55d6c7d9cf08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55d6c7d9cb58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6c7d9cbd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6c7d9ce68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d9ccb8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55d6c7d9cd58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55d6c7dc4070 <col:37, line:726:5>
|     |-IfStmt 0x55d6c7dc4000 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55d6c7dc4020 <line:723:13, col:26>
|     | | `-VarDecl 0x55d6c7dc3dc8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55d6c7dc3eb8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55d6c7dc3e40 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55d6c7dc3e98 <col:25> 'T' lvalue ParmVar 0x55d6c7d9ccb8 'x' 'T &'
|     | |-DeclRefExpr 0x55d6c7dc3ee0 <col:16> 'T *' lvalue Var 0x55d6c7dc3dc8 's' 'T *'
|     | `-BinaryOperator 0x55d6c7dc3fe0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d6c7dc3f90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d6c7dc3f20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|     |   | `-DeclRefExpr 0x55d6c7dc3f00 <col:14> 'T *' lvalue Var 0x55d6c7dc3dc8 's' 'T *'
|     |   `-DeclRefExpr 0x55d6c7dc3fc0 <col:18> 'const V' lvalue ParmVar 0x55d6c7d9cd58 'value' 'const V &'
|     `-ReturnStmt 0x55d6c7dc4060 <line:725:9, col:17>
|       `-UnaryOperator 0x55d6c7dc4048 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d6c7dc4038 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d6c7d9d308 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55d6c7d9cf70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d6c7d9d268 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55d6c7d9d020 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9d0a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9d148 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55d6c7dc4e90 <col:65, line:737:5>
|     |-DeclStmt 0x55d6c7dc4108 <line:732:9, col:26>
|     | `-VarDecl 0x55d6c7dc40a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6c7dc4e58 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55d6c7dc4e78 <line:733:13, col:58>
|       | `-VarDecl 0x55d6c7dc4130 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6c7dc4310 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6c7dc42e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6c7dc42c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6c7dc42a8 <col:26, col:58> 'String' (CXXTemporary 0x55d6c7dc42a8)
|       |           `-CXXMemberCallExpr 0x55d6c7dc4238 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6c7dc41a8 <col:26> '<bound member function type>' ->find 0x55d6c7dbc0b8
|       |             | `-CXXThisExpr 0x55d6c7dc4198 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6c7dc4270 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dc41d8 <col:31> 'const char *' lvalue ParmVar 0x55d6c7d9d020 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6c7dc4288 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dc41f8 <col:40> 'int' lvalue ParmVar 0x55d6c7d9d0a0 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6c7dc4218 <col:47> 'Args::Slot *' lvalue Var 0x55d6c7dc40a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6c7dc43c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6c7dc43b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6c7dc4390 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6c7dc4360 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |       `-ImplicitCastExpr 0x55d6c7dc4348 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6c7dc4328 <col:20> 'String' lvalue Var 0x55d6c7dc4130 'str' 'String'
|       `-CompoundStmt 0x55d6c7dc4e38 <col:61, line:736:9>
|         |-DeclStmt 0x55d6c7dc4880 <line:734:13, col:76>
|         | `-VarDecl 0x55d6c7dc4418 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d6c7dc4850 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6c7dc47c0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6c7dc4808 <col:60> 'T' lvalue ParmVar 0x55d6c7d9d148 'variable' 'T &'
|         |     `-UnaryOperator 0x55d6c7dc4838 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6c7dc4828 <col:71> 'Args *' this
|         `-CallExpr 0x55d6c7dc4e08 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55d6c7dc48a8 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|           | `-CXXThisExpr 0x55d6c7dc4898 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d6c7dc4dc8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d6c7dc48d8 <col:23> 'T *' lvalue Var 0x55d6c7dc4418 's' 'T *'
|           | `-CallExpr 0x55d6c7dc4d88 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d6c7dc4b60 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55d6c7dc4c60 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55d6c7dc4c80 <col:86> 'String' lvalue Var 0x55d6c7dc4130 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d6c7dc4d30 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6c7dc4cc0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|           |   | `-DeclRefExpr 0x55d6c7dc4ca0 <col:92> 'T *' lvalue Var 0x55d6c7dc4418 's' 'T *'
|           |   `-UnaryOperator 0x55d6c7dc4d70 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d6c7dc4d60 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55d6c7dc4de8 <col:103> 'Args::Slot *' lvalue Var 0x55d6c7dc40a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6c7d9d858 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d6c7d9d378 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6c7d9d3f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d6c7d9d7b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d9d4b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9d538 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9d5d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55d6c7d9d678 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55d6c7dc5d30 <col:88, line:745:5>
|     |-DeclStmt 0x55d6c7dc4f28 <line:741:9, col:26>
|     | `-VarDecl 0x55d6c7dc4ec0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dc5148 <line:742:9, col:55>
|     | `-VarDecl 0x55d6c7dc4f50 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d6c7dc5130 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d6c7dc5100 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d6c7dc50e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d6c7dc50c8 <col:22, col:54> 'String' (CXXTemporary 0x55d6c7dc50c8)
|     |           `-CXXMemberCallExpr 0x55d6c7dc5058 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d6c7dc4fc8 <col:22> '<bound member function type>' ->find 0x55d6c7dbc0b8
|     |             | `-CXXThisExpr 0x55d6c7dc4fb8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d6c7dc5090 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6c7dc4ff8 <col:27> 'const char *' lvalue ParmVar 0x55d6c7d9d4b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d6c7dc50a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6c7dc5018 <col:36> 'int' lvalue ParmVar 0x55d6c7d9d538 'flags' 'int'
|     |             `-DeclRefExpr 0x55d6c7dc5038 <col:43> 'Args::Slot *' lvalue Var 0x55d6c7dc4ec0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dc5520 <line:743:9, col:72>
|     | `-VarDecl 0x55d6c7dc5198 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d6c7dc54f0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d6c7dc5460 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d6c7dc54a8 <col:56> 'T' lvalue ParmVar 0x55d6c7d9d5d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55d6c7dc54d8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d6c7dc54c8 <col:67> 'Args *' this
|     `-CallExpr 0x55d6c7dc5d00 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55d6c7dc5548 <col:9> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|       | `-CXXThisExpr 0x55d6c7dc5538 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d6c7dc5cc0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d6c7dc5578 <col:19> 'T *' lvalue Var 0x55d6c7dc5198 's' 'T *'
|       | `-ParenExpr 0x55d6c7dc5ca0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55d6c7dc5c70 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d6c7dc5c58 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d6c7dc5c40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d6c7dc5c20 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d6c7dc5bf0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |     |       `-ImplicitCastExpr 0x55d6c7dc5bd8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d6c7dc5598 <col:25> 'String' lvalue Var 0x55d6c7dc4f50 'str' 'String'
|       |     |-CallExpr 0x55d6c7dc5a48 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d6c7dc5820 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55d6c7dc5920 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55d6c7dc5940 <col:89> 'String' lvalue Var 0x55d6c7dc4f50 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d6c7dc59f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d6c7dc5980 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|       |     | | `-DeclRefExpr 0x55d6c7dc5960 <col:95> 'T *' lvalue Var 0x55d6c7dc5198 's' 'T *'
|       |     | `-UnaryOperator 0x55d6c7dc5a30 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d6c7dc5a20 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55d6c7dc5bb8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55d6c7dc5b98 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d6c7dc5b68 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d6c7dc5b18 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d6c7dc5aa8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|       |         | | `-DeclRefExpr 0x55d6c7dc5a88 <col:109> 'T *' lvalue Var 0x55d6c7dc5198 's' 'T *'
|       |         | `-DeclRefExpr 0x55d6c7dc5b48 <col:113> 'const V' lvalue ParmVar 0x55d6c7d9d678 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d6c7dc5b88 <col:120> 'bool' true
|       `-DeclRefExpr 0x55d6c7dc5ce0 <col:128> 'Args::Slot *' lvalue Var 0x55d6c7dc4ec0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6c7d9dd88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55d6c7d9d8d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d9d948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7d9dce8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6c7d9da08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9da88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9db00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d9dba8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55d6c7dc6928 <col:75, line:754:5>
|     |-DeclStmt 0x55d6c7dc5dd8 <line:749:9, col:26>
|     | `-VarDecl 0x55d6c7dc5d70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6c7dc68f0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55d6c7dc6910 <line:750:13, col:58>
|       | `-VarDecl 0x55d6c7dc5e00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6c7dc5fe0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6c7dc5fb0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6c7dc5f98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6c7dc5f78 <col:26, col:58> 'String' (CXXTemporary 0x55d6c7dc5f78)
|       |           `-CXXMemberCallExpr 0x55d6c7dc5f08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6c7dc5e78 <col:26> '<bound member function type>' ->find 0x55d6c7dbc0b8
|       |             | `-CXXThisExpr 0x55d6c7dc5e68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6c7dc5f40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dc5ea8 <col:31> 'const char *' lvalue ParmVar 0x55d6c7d9da08 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6c7dc5f58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dc5ec8 <col:40> 'int' lvalue ParmVar 0x55d6c7d9da88 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6c7dc5ee8 <col:47> 'Args::Slot *' lvalue Var 0x55d6c7dc5d70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6c7dc6098 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6c7dc6080 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6c7dc6060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6c7dc6030 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |       `-ImplicitCastExpr 0x55d6c7dc6018 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6c7dc5ff8 <col:20> 'String' lvalue Var 0x55d6c7dc5e00 'str' 'String'
|       `-CompoundStmt 0x55d6c7dc68d0 <col:61, line:753:9>
|         |-DeclStmt 0x55d6c7dc6470 <line:751:13, col:63>
|         | `-VarDecl 0x55d6c7dc60e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d6c7dc6440 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6c7dc63b0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6c7dc63f8 <col:47> 'T' lvalue ParmVar 0x55d6c7d9dba8 'variable' 'T &'
|         |     `-UnaryOperator 0x55d6c7dc6428 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6c7dc6418 <col:58> 'Args *' this
|         `-CallExpr 0x55d6c7dc68a0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55d6c7dc6498 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|           | `-CXXThisExpr 0x55d6c7dc6488 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d6c7dc6860 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d6c7dc64c8 <col:23> 'T *' lvalue Var 0x55d6c7dc60e8 's' 'T *'
|           | `-CallExpr 0x55d6c7dc6820 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d6c7dc66b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d6c7dc66f8 <col:56> 'P' lvalue ParmVar 0x55d6c7d9db00 'parser' 'P'
|           |   |-DeclRefExpr 0x55d6c7dc6718 <col:64> 'String' lvalue Var 0x55d6c7dc5e00 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d6c7dc67c8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6c7dc6758 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|           |   | `-DeclRefExpr 0x55d6c7dc6738 <col:70> 'T *' lvalue Var 0x55d6c7dc60e8 's' 'T *'
|           |   `-UnaryOperator 0x55d6c7dc6808 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d6c7dc67f8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55d6c7dc6880 <col:81> 'Args::Slot *' lvalue Var 0x55d6c7dc5d70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6c7d9e3e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d6c7d9de00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d6c7d9de78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55d6c7d9def8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d6c7d9e348 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d6c7d9dfc0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7d9e040 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7d9e0b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7d9e158 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55d6c7d9e1f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55d6c7dc9998 <col:98, line:762:5>
|     |-DeclStmt 0x55d6c7dc69c0 <line:758:9, col:26>
|     | `-VarDecl 0x55d6c7dc6958 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dc6be0 <line:759:9, col:55>
|     | `-VarDecl 0x55d6c7dc69e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d6c7dc6bc8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d6c7dc6b98 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d6c7dc6b80 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d6c7dc6b60 <col:22, col:54> 'String' (CXXTemporary 0x55d6c7dc6b60)
|     |           `-CXXMemberCallExpr 0x55d6c7dc6af0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d6c7dc6a60 <col:22> '<bound member function type>' ->find 0x55d6c7dbc0b8
|     |             | `-CXXThisExpr 0x55d6c7dc6a50 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d6c7dc6b28 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6c7dc6a90 <col:27> 'const char *' lvalue ParmVar 0x55d6c7d9dfc0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d6c7dc6b40 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d6c7dc6ab0 <col:36> 'int' lvalue ParmVar 0x55d6c7d9e040 'flags' 'int'
|     |             `-DeclRefExpr 0x55d6c7dc6ad0 <col:43> 'Args::Slot *' lvalue Var 0x55d6c7dc6958 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dc92e0 <line:760:9, col:59>
|     | `-VarDecl 0x55d6c7dc6c38 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d6c7dc92b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d6c7dc6f40 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d6c7dc6f88 <col:43> 'T' lvalue ParmVar 0x55d6c7d9e158 'variable' 'T &'
|     |     `-UnaryOperator 0x55d6c7dc6fb8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d6c7dc6fa8 <col:54> 'Args *' this
|     `-CallExpr 0x55d6c7dc9968 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55d6c7dc9308 <col:9> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|       | `-CXXThisExpr 0x55d6c7dc92f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d6c7dc9928 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d6c7dc9338 <col:19> 'T *' lvalue Var 0x55d6c7dc6c38 's' 'T *'
|       | `-ParenExpr 0x55d6c7dc9908 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55d6c7dc98d8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d6c7dc98c0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d6c7dc98a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d6c7dc9888 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d6c7dc9858 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |     |       `-ImplicitCastExpr 0x55d6c7dc9840 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d6c7dc9358 <col:25> 'String' lvalue Var 0x55d6c7dc69e8 'str' 'String'
|       |     |-CallExpr 0x55d6c7dc96b0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d6c7dc9540 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55d6c7dc9588 <col:59> 'P' lvalue ParmVar 0x55d6c7d9e0b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55d6c7dc95a8 <col:67> 'String' lvalue Var 0x55d6c7dc69e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d6c7dc9658 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d6c7dc95e8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|       |     | | `-DeclRefExpr 0x55d6c7dc95c8 <col:73> 'T *' lvalue Var 0x55d6c7dc6c38 's' 'T *'
|       |     | `-UnaryOperator 0x55d6c7dc9698 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d6c7dc9688 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55d6c7dc9820 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55d6c7dc9800 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d6c7dc97d0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d6c7dc9780 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d6c7dc9710 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|       |         | | `-DeclRefExpr 0x55d6c7dc96f0 <col:87> 'T *' lvalue Var 0x55d6c7dc6c38 's' 'T *'
|       |         | `-DeclRefExpr 0x55d6c7dc97b0 <col:91> 'const V' lvalue ParmVar 0x55d6c7d9e1f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d6c7dc97f0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55d6c7dc9948 <col:106> 'Args::Slot *' lvalue Var 0x55d6c7dc6958 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6c7da66b8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55d6c7d9e468 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7d9e4e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d6c7d9e568 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d6c7da6618 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d6c7d9e630 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7da6310 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7da6388 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7da6428 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55d6c7da64c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55d6c7dca978 <col:60, line:773:5>
|     |-DeclStmt 0x55d6c7dc9a40 <line:767:9, col:26>
|     | `-VarDecl 0x55d6c7dc99d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6c7dca940 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55d6c7dca960 <line:768:13, col:58>
|       | `-VarDecl 0x55d6c7dc9a68 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6c7dc9c48 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6c7dc9c18 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6c7dc9c00 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6c7dc9be0 <col:26, col:58> 'String' (CXXTemporary 0x55d6c7dc9be0)
|       |           `-CXXMemberCallExpr 0x55d6c7dc9b70 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6c7dc9ae0 <col:26> '<bound member function type>' ->find 0x55d6c7dbc0b8
|       |             | `-CXXThisExpr 0x55d6c7dc9ad0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6c7dc9ba8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dc9b10 <col:31> 'const char *' lvalue ParmVar 0x55d6c7d9e630 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6c7dc9bc0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dc9b30 <col:40> 'int' lvalue ParmVar 0x55d6c7da6310 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6c7dc9b50 <col:47> 'Args::Slot *' lvalue Var 0x55d6c7dc99d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6c7dc9d00 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6c7dc9ce8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6c7dc9cc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6c7dc9c98 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |       `-ImplicitCastExpr 0x55d6c7dc9c80 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6c7dc9c60 <col:20> 'String' lvalue Var 0x55d6c7dc9a68 'str' 'String'
|       `-CompoundStmt 0x55d6c7dca918 <col:61, line:772:9>
|         |-DeclStmt 0x55d6c7dca040 <line:769:13, col:66>
|         | `-VarDecl 0x55d6c7dc9d58 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55d6c7dca010 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6c7dc9f80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6c7dc9fc8 <col:49> 'T1' lvalue ParmVar 0x55d6c7da6428 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55d6c7dc9ff8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6c7dc9fe8 <col:61> 'Args *' this
|         |-DeclStmt 0x55d6c7dca3b0 <line:770:13, col:66>
|         | `-VarDecl 0x55d6c7dca0c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55d6c7dca380 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d6c7dca2f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d6c7dca338 <col:49> 'T2' lvalue ParmVar 0x55d6c7da64c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55d6c7dca368 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d6c7dca358 <col:61> 'Args *' this
|         `-CallExpr 0x55d6c7dca8e8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55d6c7dca3d8 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|           | `-CXXThisExpr 0x55d6c7dca3c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d6c7dca8a8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55d6c7dca448 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55d6c7dca408 <col:23> 'T1 *' lvalue Var 0x55d6c7dc9d58 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55d6c7dca428 <col:29> 'T2 *' lvalue Var 0x55d6c7dca0c8 's2' 'T2 *'
|           | `-CallExpr 0x55d6c7dca860 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d6c7dca630 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d6c7dca678 <col:63> 'P' lvalue ParmVar 0x55d6c7da6388 'parser' 'P'
|           |   |-DeclRefExpr 0x55d6c7dca698 <col:71> 'String' lvalue Var 0x55d6c7dc9a68 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d6c7dca748 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6c7dca6d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|           |   | `-DeclRefExpr 0x55d6c7dca6b8 <col:77> 'T1 *' lvalue Var 0x55d6c7dc9d58 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55d6c7dca808 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d6c7dca798 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|           |   | `-DeclRefExpr 0x55d6c7dca778 <col:82> 'T2 *' lvalue Var 0x55d6c7dca0c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55d6c7dca848 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d6c7dca838 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55d6c7dca8c8 <col:94> 'Args::Slot *' lvalue Var 0x55d6c7dc99d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6c7da6aa8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55d6c7da6738 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7da6a08 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d6c7da67f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7da6870 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7da68e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dcae90 <col:67, line:780:5>
|     |-DeclStmt 0x55d6c7dcaa10 <line:777:9, col:26>
|     | `-VarDecl 0x55d6c7dca9a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d6c7dcae58 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55d6c7dcae78 <line:778:13, col:58>
|       | `-VarDecl 0x55d6c7dcaa38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d6c7dcac18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d6c7dcabe8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d6c7dcabd0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d6c7dcabb0 <col:26, col:58> 'String' (CXXTemporary 0x55d6c7dcabb0)
|       |           `-CXXMemberCallExpr 0x55d6c7dcab40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d6c7dcaab0 <col:26> '<bound member function type>' ->find 0x55d6c7dbc0b8
|       |             | `-CXXThisExpr 0x55d6c7dcaaa0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d6c7dcab78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dcaae0 <col:31> 'const char *' lvalue ParmVar 0x55d6c7da67f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d6c7dcab90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d6c7dcab00 <col:40> 'int' lvalue ParmVar 0x55d6c7da6870 'flags' 'int'
|       |             `-DeclRefExpr 0x55d6c7dcab20 <col:47> 'Args::Slot *' lvalue Var 0x55d6c7dca9a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d6c7dcacd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d6c7dcacb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d6c7dcac98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d6c7dcac68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|       |       `-ImplicitCastExpr 0x55d6c7dcac50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d6c7dcac30 <col:20> 'String' lvalue Var 0x55d6c7dcaa38 'str' 'String'
|       `-CallExpr 0x55d6c7dcae28 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55d6c7dcacf8 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|         | `-CXXThisExpr 0x55d6c7dcace8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55d6c7dcadd8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55d6c7dcad48 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55d6c7dcad28 <col:23> 'P' lvalue ParmVar 0x55d6c7da68e8 'parser' 'P'
|         | |-DeclRefExpr 0x55d6c7dcad90 <col:36> 'String' lvalue Var 0x55d6c7dcaa38 'str' 'String'
|         | `-UnaryOperator 0x55d6c7dcadc0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55d6c7dcadb0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55d6c7dcae08 <col:49> 'Args::Slot *' lvalue Var 0x55d6c7dca9a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d6c7da6e48 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d6c7da6b18 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d6c7da6da8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d6c7da6bd0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7da6c50 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7da6cc8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55d6c7dcb800 <col:71, line:792:5>
|     |-DeclStmt 0x55d6c7dcaf28 <line:784:9, col:26>
|     | `-VarDecl 0x55d6c7dcaec0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dcaff8 <line:785:9, col:29>
|     | `-VarDecl 0x55d6c7dcaf58 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d6c7dcafe0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d6c7dcafc0 <col:28> 'int' 1
|     |-WhileStmt 0x55d6c7dcb6b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55d6c7dcb6d0 <line:786:16, col:61>
|     | | `-VarDecl 0x55d6c7dcb020 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d6c7dcb200 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d6c7dcb1d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d6c7dcb1b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d6c7dcb198 <col:29, col:61> 'String' (CXXTemporary 0x55d6c7dcb198)
|     | |           `-CXXMemberCallExpr 0x55d6c7dcb128 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d6c7dcb098 <col:29> '<bound member function type>' ->find 0x55d6c7dbc0b8
|     | |             | `-CXXThisExpr 0x55d6c7dcb088 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d6c7dcb160 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6c7dcb0c8 <col:34> 'const char *' lvalue ParmVar 0x55d6c7da6bd0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d6c7dcb178 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6c7dcb0e8 <col:43> 'int' lvalue ParmVar 0x55d6c7da6c50 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d6c7dcb108 <col:50> 'Args::Slot *' lvalue Var 0x55d6c7dcaec0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d6c7dcb2b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6c7dcb2a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6c7dcb280 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6c7dcb250 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|     | |       `-ImplicitCastExpr 0x55d6c7dcb238 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d6c7dcb218 <col:23> 'String' lvalue Var 0x55d6c7dcb020 'str' 'String'
|     | `-CompoundStmt 0x55d6c7dcb688 <col:64, line:790:9>
|     |   |-CallExpr 0x55d6c7dcb410 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55d6c7dcb2e0 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|     |   | | `-CXXThisExpr 0x55d6c7dcb2d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d6c7dcb3c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d6c7dcb330 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d6c7dcb310 <col:23> 'P' lvalue ParmVar 0x55d6c7da6cc8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d6c7dcb378 <col:36> 'String' lvalue Var 0x55d6c7dcb020 'str' 'String'
|     |   | | `-UnaryOperator 0x55d6c7dcb3a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d6c7dcb398 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55d6c7dcb3f0 <col:49> 'Args::Slot *' lvalue Var 0x55d6c7dcaec0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d6c7dcb5a8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d6c7dcb440 <col:13> 'int' lvalue Var 0x55d6c7dcaf58 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d6c7dcb590 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d6c7dcb570 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d6c7dcb4d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d6c7dcb4b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d6c7dcb4a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d6c7dcb460 <col:28> 'int' lvalue Var 0x55d6c7dcaf58 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d6c7dcb480 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d6c7dcb558 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d6c7dcb528 <col:49> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|     |   |         `-ImplicitCastExpr 0x55d6c7dcb508 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d6c7dcb4f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d6c7dcb658 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d6c7dcb5c8 <col:13> 'int' lvalue ParmVar 0x55d6c7da6c50 'flags' 'int'
|     |     `-UnaryOperator 0x55d6c7dcb640 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d6c7dcb628 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6c7dcb608 <col:23> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d6c7dcb7e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d6c7dcb718 <col:9> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|       | `-ImplicitCastExpr 0x55d6c7dcb6f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d6c7dcb6e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d6c7dcb7c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d6c7dcb7a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d6c7dcb788 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d6c7dcb748 <col:25> 'int' lvalue Var 0x55d6c7dcaf58 'read_status' 'int'
|           `-IntegerLiteral 0x55d6c7dcb768 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d6c7da7328 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d6c7da6eb8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7da6f38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7da7288 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d6c7da6ff8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7da7078 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7da70f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7da7198 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55d6c7dcc790 <col:84, line:805:5>
|     |-DeclStmt 0x55d6c7dcb8a8 <line:796:9, col:26>
|     | `-VarDecl 0x55d6c7dcb840 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dcb978 <line:797:9, col:29>
|     | `-VarDecl 0x55d6c7dcb8d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d6c7dcb960 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d6c7dcb940 <col:28> 'int' 1
|     |-DeclStmt 0x55d6c7dcbcb0 <line:798:9, col:71>
|     | `-VarDecl 0x55d6c7dcb9c8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d6c7dcbc80 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d6c7dcbbf0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55d6c7dcbc38 <col:55> 'T' lvalue ParmVar 0x55d6c7da7198 'variable' 'T &'
|     |     `-UnaryOperator 0x55d6c7dcbc68 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d6c7dcbc58 <col:66> 'Args *' this
|     |-WhileStmt 0x55d6c7dcc640 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55d6c7dcc660 <line:799:16, col:61>
|     | | `-VarDecl 0x55d6c7dcbcd8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d6c7dcbeb8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d6c7dcbe88 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d6c7dcbe70 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d6c7dcbe50 <col:29, col:61> 'String' (CXXTemporary 0x55d6c7dcbe50)
|     | |           `-CXXMemberCallExpr 0x55d6c7dcbde0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d6c7dcbd50 <col:29> '<bound member function type>' ->find 0x55d6c7dbc0b8
|     | |             | `-CXXThisExpr 0x55d6c7dcbd40 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d6c7dcbe18 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6c7dcbd80 <col:34> 'const char *' lvalue ParmVar 0x55d6c7da6ff8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d6c7dcbe30 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6c7dcbda0 <col:43> 'int' lvalue ParmVar 0x55d6c7da7078 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d6c7dcbdc0 <col:50> 'Args::Slot *' lvalue Var 0x55d6c7dcb840 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d6c7dcbf70 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6c7dcbf58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6c7dcbf38 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6c7dcbf08 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|     | |       `-ImplicitCastExpr 0x55d6c7dcbef0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d6c7dcbed0 <col:23> 'String' lvalue Var 0x55d6c7dcbcd8 'str' 'String'
|     | `-CompoundStmt 0x55d6c7dcc618 <col:64, line:803:9>
|     |   |-CallExpr 0x55d6c7dcc3a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55d6c7dcbf98 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|     |   | | `-CXXThisExpr 0x55d6c7dcbf88 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55d6c7dcc360 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55d6c7dcbfc8 <col:23> 'T *' lvalue Var 0x55d6c7dcb9c8 's' 'T *'
|     |   | | `-CallExpr 0x55d6c7dcc320 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55d6c7dcc1b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55d6c7dcc1f8 <col:56> 'P' lvalue ParmVar 0x55d6c7da70f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55d6c7dcc218 <col:64> 'String' lvalue Var 0x55d6c7dcbcd8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55d6c7dcc2c8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55d6c7dcc258 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|     |   | |   | `-DeclRefExpr 0x55d6c7dcc238 <col:70> 'T *' lvalue Var 0x55d6c7dcb9c8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55d6c7dcc308 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55d6c7dcc2f8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55d6c7dcc380 <col:81> 'Args::Slot *' lvalue Var 0x55d6c7dcb840 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d6c7dcc538 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d6c7dcc3d0 <col:13> 'int' lvalue Var 0x55d6c7dcb8d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d6c7dcc520 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d6c7dcc500 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d6c7dcc468 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d6c7dcc448 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d6c7dcc430 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d6c7dcc3f0 <col:28> 'int' lvalue Var 0x55d6c7dcb8d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d6c7dcc410 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d6c7dcc4e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d6c7dcc4b8 <col:49> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|     |   |         `-ImplicitCastExpr 0x55d6c7dcc498 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d6c7dcc488 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d6c7dcc5e8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d6c7dcc558 <col:13> 'int' lvalue ParmVar 0x55d6c7da7078 'flags' 'int'
|     |     `-UnaryOperator 0x55d6c7dcc5d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d6c7dcc5b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6c7dcc598 <col:23> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d6c7dcc770 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d6c7dcc6a8 <col:9> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|       | `-ImplicitCastExpr 0x55d6c7dcc688 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d6c7dcc678 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d6c7dcc750 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d6c7dcc730 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d6c7dcc718 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d6c7dcc6d8 <col:25> 'int' lvalue Var 0x55d6c7dcb8d8 'read_status' 'int'
|           `-IntegerLiteral 0x55d6c7dcc6f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d6c7da7908 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55d6c7da73a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d6c7da7418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d6c7da7868 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d6c7da74d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d6c7da7558 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55d6c7da75d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55d6c7da7720 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55d6c7dcd598 <col:87, line:821:5>
|     |-DeclStmt 0x55d6c7dcc840 <line:809:9, col:26>
|     | `-VarDecl 0x55d6c7dcc7d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d6c7dcc910 <line:810:9, col:29>
|     | `-VarDecl 0x55d6c7dcc870 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d6c7dcc8f8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d6c7dcc8d8 <col:28> 'int' 1
|     |-DeclStmt 0x55d6c7dccb58 <line:811:9, col:38>
|     | `-VarDecl 0x55d6c7dcca40 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55d6c7dccb30 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d6c7dccab8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d6c7dccb10 <col:29> 'Vector<T>' lvalue ParmVar 0x55d6c7da7720 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55d6c7dcd448 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55d6c7dcd468 <line:812:16, col:61>
|     | | `-VarDecl 0x55d6c7dccb80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d6c7dccd60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d6c7dccd30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d6c7dccd18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d6c7dcccf8 <col:29, col:61> 'String' (CXXTemporary 0x55d6c7dcccf8)
|     | |           `-CXXMemberCallExpr 0x55d6c7dccc88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d6c7dccbf8 <col:29> '<bound member function type>' ->find 0x55d6c7dbc0b8
|     | |             | `-CXXThisExpr 0x55d6c7dccbe8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d6c7dcccc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6c7dccc28 <col:34> 'const char *' lvalue ParmVar 0x55d6c7da74d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d6c7dcccd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d6c7dccc48 <col:43> 'int' lvalue ParmVar 0x55d6c7da7558 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d6c7dccc68 <col:50> 'Args::Slot *' lvalue Var 0x55d6c7dcc7d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d6c7dcce18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d6c7dcce00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d6c7dccde0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d6c7dccdb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d6c7aeb608
|     | |       `-ImplicitCastExpr 0x55d6c7dccd98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d6c7dccd78 <col:23> 'String' lvalue Var 0x55d6c7dccb80 'str' 'String'
|     | `-CompoundStmt 0x55d6c7dcd410 <col:64, line:819:9>
|     |   |-DeclStmt 0x55d6c7dcced8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55d6c7dcce40 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55d6c7dcceb8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55d6c7dcd058 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55d6c7dccf00 <col:13> '<bound member function type>' ->postparse 0x55d6c7dbc2c8
|     |   | | `-CXXThisExpr 0x55d6c7dccef0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d6c7dcd000 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d6c7dccf50 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d6c7dccf30 <col:23> 'P' lvalue ParmVar 0x55d6c7da75d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d6c7dccf98 <col:36> 'String' lvalue Var 0x55d6c7dccb80 'str' 'String'
|     |   | | |-DeclRefExpr 0x55d6c7dccfb8 <col:41> 'T' lvalue Var 0x55d6c7dcce40 'sx' 'T'
|     |   | | `-UnaryOperator 0x55d6c7dccfe8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d6c7dccfd8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55d6c7dcd038 <col:53> 'Args::Slot *' lvalue Var 0x55d6c7dcc7d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55d6c7dcd1b0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55d6c7dcd0e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55d6c7dcd0b8 <col:17> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|     |   | |   `-ImplicitCastExpr 0x55d6c7dcd098 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55d6c7dcd088 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55d6c7dcd188 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55d6c7dcd120 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55d6c7dcd100 <col:17> 'Vector<T> *' lvalue Var 0x55d6c7dcca40 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55d6c7dcd168 <col:30> 'T' lvalue Var 0x55d6c7dcce40 'sx' 'T'
|     |   |-BinaryOperator 0x55d6c7dcd330 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d6c7dcd1c8 <col:13> 'int' lvalue Var 0x55d6c7dcc870 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d6c7dcd318 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d6c7dcd2f8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d6c7dcd260 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d6c7dcd240 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d6c7dcd228 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d6c7dcd1e8 <col:28> 'int' lvalue Var 0x55d6c7dcc870 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d6c7dcd208 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d6c7dcd2e0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d6c7dcd2b0 <col:49> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|     |   |         `-ImplicitCastExpr 0x55d6c7dcd290 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d6c7dcd280 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d6c7dcd3e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d6c7dcd350 <col:13> 'int' lvalue ParmVar 0x55d6c7da7558 'flags' 'int'
|     |     `-UnaryOperator 0x55d6c7dcd3c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d6c7dcd3b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d6c7dcd390 <col:23> 'const int' lvalue Var 0x55d6c7d8b2f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d6c7dcd578 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d6c7dcd4b0 <col:9> 'bool' lvalue ->_read_status 0x55d6c7c9f750
|       | `-ImplicitCastExpr 0x55d6c7dcd490 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d6c7dcd480 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d6c7dcd558 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d6c7dcd538 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d6c7dcd520 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d6c7dcd4e0 <col:25> 'int' lvalue Var 0x55d6c7dcc870 'read_status' 'int'
|           `-IntegerLiteral 0x55d6c7dcd500 <col:40> 'int' 1
|-AccessSpecDecl 0x55d6c7da7980 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6c7da79a8 prev 0x55d6c7d895f8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55d6c7da7aa0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55d6c7da7b90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55d6c7dcd5d0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55d6c7da7c80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55d6c7dcd5e0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55d6c7da7d80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55d6c7da7e30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55d6c7da7ed8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d6c7da7ed8
| | `-ParmVarDecl 0x55d6c7da7fe8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55d6c7da87a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d6c7da87a8
|   `-ParmVarDecl 0x55d6c7da88b8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55d6c7da8058 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55d6c7da81b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55d6c7da83b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55d6c7da8260 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55d6c7da82d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55d6c7dcd7c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55d6c7da8668 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55d6c7dcd630 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d6c7dcd5f0 <col:20> 'void *' lvalue ParmVar 0x55d6c7da8260 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55d6c7da86d0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55d6c7dcd6b8 <col:32, col:45> 'char *' array Function 0x55d6c790f288 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55d6c7dcd6a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55d6c7dcd670 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55d6c7da82d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55d6c7da8730 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55d6c7dcd780 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d6c7dcd740 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55d6c7da82d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55d6c7dcd840 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55d6c7da84b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55d6c7da7c80 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55d6c7dcd8c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55d6c7dcd8a8 <line:840:13, col:22> 'void' array Function 0x55d6c790f5e8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55d6c7dcd890 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55d6c7dcd860 <col:22> 'char *' lvalue ->_slot 0x55d6c7da86d0
| |         `-CXXThisExpr 0x55d6c7dcd850 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55d6c7da85b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55d6c7da7d80 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55d6c7dcdab8 <col:22, line:844:9>
| |   `-CallExpr 0x55d6c7dcda20 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55d6c7dcda08 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55d6c7dcd9e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d6c7a1b068 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55d6c7dcda58 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55d6c7dcd938 <col:20> 'void *' lvalue ->_ptr 0x55d6c7da8668
| |     |   `-CXXThisExpr 0x55d6c7dcd928 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55d6c7dcda88 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55d6c7dcda70 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55d6c7dcd978 <col:26> 'char *' lvalue ->_slot 0x55d6c7da86d0
| |     |     `-CXXThisExpr 0x55d6c7dcd968 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55d6c7dcdaa0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55d6c7dcd9b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55d6c7da8730
| |         `-CXXThisExpr 0x55d6c7dcd9a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55d6c7da8668 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55d6c7da86d0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55d6c7da8730 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55d6c7da8928 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d6c7da8928
| | `-ParmVarDecl 0x55d6c7da8a38 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55d6c7da8ad8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d6c7da8ad8
|   `-ParmVarDecl 0x55d6c7da8be8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55d6c7da8d88 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55d6c7da8c58 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55d6c7da8cf8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55d6c7da9020 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55d6c7da9218 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55d6c7da90e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55d6c7da9398 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55d6c7dcdaf0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55d6c7dcdad0 <col:20> 'T *' lvalue ParmVar 0x55d6c7da90e8 'ptr' 'T *'
|   | `-CompoundStmt 0x55d6c7dcdb40 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55d6c7da92e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55d6c7da7d80 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55d6c7dcdcf0 <col:22, line:857:9>
|   |   `-CallExpr 0x55d6c7dcdcc0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55d6c7dcdb50 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55d6c7ad3798 0x55d6c7a7dac8
|   |     |-CXXOperatorCallExpr 0x55d6c7dcdc50 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55d6c7dcdbe0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d6c7ce0748 0x55d6c7ce0368 0x55d6c7cdff98 0x55d6c7cdfbb8 0x55d6c7cdf7d8 0x55d6c7cdf408
|   |     | `-MemberExpr 0x55d6c7dcdbb0 <col:29> 'T *' lvalue ->_ptr 0x55d6c7da9398
|   |     |   `-CXXThisExpr 0x55d6c7dcdba0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55d6c7dcdc90 <col:35> 'T' lvalue ->_slot 0x55d6c7da93f8
|   |       `-CXXThisExpr 0x55d6c7dcdc80 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55d6c7da9398 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55d6c7da93f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55d6c7da9460 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55d6c7da9560 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55d6c7da95b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7da9540 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55d6c7da9520 <col:31> 'int' 48
|-FieldDecl 0x55d6c7da95d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55d6c7da9638 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55d6c7da9698 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d6c7da97d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55d6c7dbb960 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55d6c7dbb9c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55d6c7dbba70 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55d6c7dbbc98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55d6c7dbbba0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55d6c7dbbde8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55d6c7dbbd58 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55d6c7dbc0b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55d6c7dbbea8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55d6c7dbbf28 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55d6c7dbbfd0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55d6c7dbc2c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55d6c7dbc180 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55d6c7dbc1f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55d6c7dbc398 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55d6c7dbc4e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55d6c7dbc450 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55d6c7dbc878 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55d6c7dbc5a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55d6c7dbc628 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55d6c7dbc6d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55d6c7dbc788 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55d6c7dbcaa0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55d6c7dbc950 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55d6c7dbc9c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55d6c7dbcdb8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55d6c7dbcb50 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55d6c7dbcd18 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55d6c7dbcc28 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7de8720 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7de8838 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55d6c7de88c8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d6c7de89d8 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55d6c7de8908 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55d6c7de8d28 'size' 'int'
| | `-ImplicitCastExpr 0x55d6c7de8df0 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6c7de8db0 <col:16> 'int' lvalue ParmVar 0x55d6c7de8908 's' 'int'
| `-CompoundStmt 0x55d6c7de8e38 <col:19, line:1297:5>
|-CXXMethodDecl 0x55d6c7de8c30 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55d6c7de8a98 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55d6c7de8b18 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55d6c7de8b90 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d6c7de8d90 <col:73> 'const ArgContext' lvalue Var 0x55d6c7dcdd18 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55d6c7de8ce8 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55d6c7de8d28 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55d6c7e01028 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55d6c7e01028
| `-ParmVarDecl 0x55d6c7e01138 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55d6c7e011d8 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7e012e8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55d6c7de8d28 'size' 'int'
| | `-ImplicitCastExpr 0x55d6c7e01ae8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d6c7e01aa0 <col:7> 'int' xvalue .size 0x55d6c7de8d28
| |     `-CXXStaticCastExpr 0x55d6c7e01a70 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d6c7e01a40 <col:7> 'AnnoArg' lvalue ParmVar 0x55d6c7e012e8 '' 'AnnoArg &&'
| `-CompoundStmt 0x55d6c7e01b30 <col:7>
`-CXXDestructorDecl 0x55d6c7e01388 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7adc4c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7adc5d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55d6c7adc668 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55d6c7adc738 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55d6c7adc820 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7adca38 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d6c7adc8e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7adcbe8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d6c7adcaf0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d6c7adcd30 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d6c7adcca0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d6c7adce78 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d6c7adcde8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7adcfc0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d6c7adcf30 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7add088 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55d6c7add1d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55d6c7add140 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d6c7add298 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55d6c7add3e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55d6c7add350 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d6c7add558 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d6c7add498 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7add6a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d6c7add610 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7add768 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55d6c7add928 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7add818 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6c7add890 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7addb78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7add9e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6c7adda60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6c7addc28 <col:86> "" ""
|-CXXMethodDecl 0x55d6c7adde98 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55d6c7addd08 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55d6c7addd80 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ade048 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d6c7addf58 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d6c7ade1f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d6c7ade100 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d6c7ade4c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d6c7ade2b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d6c7ade328 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6c7ade3a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ade7a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d6c7ade590 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d6c7ade608 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6c7ade680 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6c7ade860 <col:115> "" ""
|-AccessSpecDecl 0x55d6c7ade8d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55d6c7ade908 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7adee10 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d6c7adee10
| `-ParmVarDecl 0x55d6c7adef18 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55d6c7adefb8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d6c7adefb8
| `-ParmVarDecl 0x55d6c7adf0c8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55d6c7b146f8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6c7d07500 <col:7>
|-CXXConstructorDecl 0x55d6c7b147d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d6c7b147d0
| `-ParmVarDecl 0x55d6c7b148e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55d6c7b14958 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d6c7b14958
| `-ParmVarDecl 0x55d6c7b14a68 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55d6c7d09f00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7cf60a8 prev 0x55d6c7ceb2b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7cf61a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55d6c7cf6290 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55d6c7cf63b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55d6c7cf6538 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55d6c7cf66b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55d6c7cf6838 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55d6c7d07668 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6c7d07ed8 <col:11>
|-CXXDestructorDecl 0x55d6c7d07740 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d6c7d07878 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d6c7d07878
| `-ParmVarDecl 0x55d6c7d07988 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55d6c7d07a28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6c7d07a28
| `-ParmVarDecl 0x55d6c7d07b38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55d6c7d0a8f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7d0aa08 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55d6c7d0ac88 <col:11>
|   `-ReturnStmt 0x55d6c7d0ac78 <col:11>
|     `-UnaryOperator 0x55d6c7d0ac60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d6c7d0ac50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55d6c7d0aa78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6c7d0aa78
  `-ParmVarDecl 0x55d6c7d0ab88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7cf68a0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7cf69b8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55d6c7cf6a58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55d6c7cf6ac0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55d6c7cf6b28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55d6c7cf6b90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55d6c7cf6bf0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55d6c7cf6cb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55d6c7cf6d10 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55d6c7cf6d70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55d6c7d07578 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55d6c7cf6a58 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55d6c7d07ee8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55d6c7d07f40 <col:12>
|-CXXConstructorDecl 0x55d6c7d07ba8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d6c7d07ba8
| `-ParmVarDecl 0x55d6c7d07cb8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55d6c7d07d58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d6c7d07d58
| `-ParmVarDecl 0x55d6c7d07e68 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55d6c7d09fe0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7ce49c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d6c7ce4ad8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55d6c7ce4b68 <col:16, col:22> col:16 public
|-EnumDecl 0x55d6c7ce4b90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55d6c7ce4c90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55d6c7ce4d70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7ce4c70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55d6c7ce4c50 <col:21> 'int' 28
| `-EnumConstantDecl 0x55d6c7ce4d20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55d6c7ce4d88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7ce4d00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55d6c7ce4ce0 <col:22> 'int' 64
|-CXXMethodDecl 0x55d6c7ce50c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d6c7ce4db0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6c7ce4e30 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55d6c7ce4ea8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6c7ce4f20 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6c7ce5188 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce5388 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55d6c7ce5200 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55d6c7ce5278 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6c7ce5438 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce5598 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55d6c7ce54a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6c7ce5640 <col:72> warn_unused_result ""
|-TypedefDecl 0x55d6c7ce59a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55d6c7ce5930 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55d6c7ce58d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55d6c7ce5890 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55d6c77bc4e0 'void'
|       |-PointerType 0x55d6c7a64d60 'unsigned char *'
|       | `-BuiltinType 0x55d6c77bc5e0 'unsigned char'
|       |-TypedefType 0x55d6c7861330 'size_t' sugar
|       | |-Typedef 0x55d6c782cbe0 'size_t'
|       | `-BuiltinType 0x55d6c77bc640 'unsigned long'
|       `-PointerType 0x55d6c77bcce0 'void *'
|         `-BuiltinType 0x55d6c77bc4e0 'void'
|-CXXMethodDecl 0x55d6c7ce5e18 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55d6c7ce5a10 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55d6c7ce5a88 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6c7ce5b20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55d6c7ce5ba0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55d6c7d00510 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55d6c7d004f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55d6c7d004c0 <col:58> 'int' 0
| |-ParmVarDecl 0x55d6c7ce5c20 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55d6c7d00538 <col:76> 'int' 0
| |-ParmVarDecl 0x55d6c7ce5ca0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55d6c7d00558 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55d6c7ce5ee8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce5f68 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d6c7ce6028 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55d6c7ce60c8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce6120 <col:30>
|-CXXMethodDecl 0x55d6c7ce6198 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55d6c7ce6238 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce6290 <col:30>
|-CXXMethodDecl 0x55d6c7ce6308 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55d6c7ce63a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce6458 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55d6c7ce64f8 <col:20>
| |-OptimizeNoneAttr 0x55d6c7ce6550 <col:30>
| `-WarnUnusedResultAttr 0x55d6c7ce6578 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce65d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6c7ce6670 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce66c8 <col:30>
|-CXXMethodDecl 0x55d6c7ce6718 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6c7ce67b8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce6810 <col:30>
|-CXXMethodDecl 0x55d6c7ce6858 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55d6c7ce68f8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce6950 <col:30>
|-CXXMethodDecl 0x55d6c7ce6998 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7ce6a58 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7ce6b20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6c7ce6be8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6c7ce6ca8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7ce6dc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55d6c7d00620 <col:54, line:99:5>
|   `-ReturnStmt 0x55d6c7d00610 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55d6c7d005f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55d6c7d005c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d6c7cf70a8
|         `-CXXThisExpr 0x55d6c7d005b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d6c7ce6f68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55d6c7ce6e78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55d6c7d006d0 <col:67, line:103:5>
|   `-BinaryOperator 0x55d6c7d006b0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d6c7d00648 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d6c7cf70a8
|     | `-CXXThisExpr 0x55d6c7d00638 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d6c7d00698 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d00678 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55d6c7ce6e78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55d6c7ce7060 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55d6c7d00750 <col:33, line:107:5>
|   `-ReturnStmt 0x55d6c7d00740 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55d6c7d00728 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55d6c7d006f8 <col:16> 'void *' lvalue ->_destructor_argument 0x55d6c7cf7110
|         `-CXXThisExpr 0x55d6c7d006e8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d6c7ce7120 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55d6c7d00d80 <col:25, line:113:5>
|   |-ParenExpr 0x55d6c7d00ac8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55d6c7d00a98 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d00808 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d6c7d007e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55d6c7d007a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55d6c7d00778 <col:24> '<bound member function type>' ->shared 0x55d6c7ce6198
|   |   |       `-ImplicitCastExpr 0x55d6c7d007c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55d6c7d00768 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d6c7d00868 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d00848 <col:42> 'int' 0
|   |   `-CallExpr 0x55d6c7d009f8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d009e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d009c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d00a38 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d008d8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55d6c7d00a50 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d00900 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d00a68 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d00938 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55d6c7d00a80 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d009a8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d00990 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d00958 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55d6c7d00cc8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55d6c7d00af8 <col:2> 'unsigned char *' lvalue ->_head 0x55d6c7cf6eb0
|   | | `-CXXThisExpr 0x55d6c7d00ae8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55d6c7d00cb0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55d6c7d00c90 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55d6c7d00b38 <col:10> 'unsigned char *' lvalue ->_data 0x55d6c7cf6f18
|   |     | `-CXXThisExpr 0x55d6c7d00b28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55d6c7d00c78 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55d6c7d00c58 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55d6c7d00b78 <col:18> 'unsigned char *' lvalue ->_tail 0x55d6c7cf6f80
|   |         | `-CXXThisExpr 0x55d6c7d00b68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55d6c7d00c40 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55d6c7d00c20 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55d6c7d00bb8 <col:26> 'unsigned char *' lvalue ->_end 0x55d6c7cf6fe8
|   |             | `-CXXThisExpr 0x55d6c7d00ba8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55d6c7d00c08 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55d6c7d00be8 <col:33> 'int' 0
|   `-BinaryOperator 0x55d6c7d00d60 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d6c7d00cf8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d6c7cf70a8
|     | `-CXXThisExpr 0x55d6c7d00ce8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d6c7d00d48 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55d6c7d00d28 <col:16> 'int' 0
|-CXXMethodDecl 0x55d6c7ce7260 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d6c7ce71d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7ce7308 <col:20>
| |-OptimizeNoneAttr 0x55d6c7ce7360 <col:30>
| `-WarnUnusedResultAttr 0x55d6c7ce7388 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce7458 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d6c7ce73c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7ce7500 <col:20>
| |-OptimizeNoneAttr 0x55d6c7ce7558 <col:30>
| `-WarnUnusedResultAttr 0x55d6c7ce7580 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce76b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d6c7ce75c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6c7ce7760 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce7860 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55d6c7ce77d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7ce7908 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce7960 <col:30>
|-CXXMethodDecl 0x55d6c7ce7a28 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d6c7ce7998 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6c7ce7ad0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce7bd0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d6c7ce7b40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d6c7ce7c78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce7d78 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55d6c7ce7ce8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7ce7e20 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce7e78 <col:30>
|-CXXMethodDecl 0x55d6c7ce8008 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55d6c7ce7eb8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55d6c7ce7f30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55d6c7d00578 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55d6c7ce80b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55d6c7ce82b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7ce8130 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7ce81a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ce84c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7ce8378 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6c7ce83f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ce86d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55d6c7ce8588 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55d6c7ce8608 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55d6c7d00588 <col:39> 'int' 0
|-CXXMethodDecl 0x55d6c7ce87a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55d6c7ce8870 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d6c7ce8938 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6c7ce89f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7ce8ac0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55d6c7ce8c08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55d6c7ce8b78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55d6c7ce8dd8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7ce8cc8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7ce8d40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ce8ea8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55d6c7ce8f68 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55d6c7ce9008 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce9060 <col:30>
|-CXXMethodDecl 0x55d6c7ce90b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6c7ce9150 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce91a8 <col:30>
|-CXXMethodDecl 0x55d6c7ce91f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6c7ce92b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7ce9380 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55d6c7ce9420 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce9478 <col:30>
|-CXXMethodDecl 0x55d6c7ce95c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7ce94b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7ce9530 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ce9718 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d6c7ce9688 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7ce97f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55d6c7ce98b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55d6c7ce9950 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce99a8 <col:30>
|-CXXMethodDecl 0x55d6c7ce99f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d6c7ce9a98 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce9af0 <col:30>
|-CXXMethodDecl 0x55d6c7ce9b40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6c7ce9c08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55d6c7ce9ca8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ce9d00 <col:30>
|-CXXMethodDecl 0x55d6c7ce9d48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55d6c7ce9e68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55d6c7ce9fd8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55d6c7ce9f18 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55d6c7cea0c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55d6c7cea168 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cea1c0 <col:30>
|-CXXMethodDecl 0x55d6c7cea210 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d6c7cea2d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d6c7cea508 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55d6c7cea380 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55d6c7cea3f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7cea5b8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cea610 <col:30>
|-CXXMethodDecl 0x55d6c7cea6b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55d6c7cea758 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cea7b0 <col:30>
|-CXXMethodDecl 0x55d6c7cea800 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55d6c7cea8a0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cea8f8 <col:30>
|-CXXMethodDecl 0x55d6c7cea940 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55d6c7cea9e0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceaa38 <col:30>
|-CXXMethodDecl 0x55d6c7ceab38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55d6c7ceaa70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55d6c7ceabe0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceac38 <col:30>
|-CXXMethodDecl 0x55d6c7ceadf8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55d6c7ceac70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55d6c7ceace8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7ceaea8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceaf00 <col:30>
|-CXXMethodDecl 0x55d6c7ceafa8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55d6c7ceb0c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55d6c7ceb1e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55d6c7ceb288 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6c7ceb2b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55d6c7ceb3d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55d6c7ceb478 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceb4d0 <col:30>
|-CXXMethodDecl 0x55d6c7ceb578 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55d6c7ceb618 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceb670 <col:30>
|-AccessSpecDecl 0x55d6c7ceb698 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55d6c7ceb6c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55d6c7ceb7c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55d6c7ceb810 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7ceb7a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55d6c7ceb780 <col:14> 'int' 48
|-CXXMethodDecl 0x55d6c7ceb878 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55d6c7ceb918 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceb970 <col:30>
|-CXXMethodDecl 0x55d6c7ceb9e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55d6c7ceba88 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cebae0 <col:30>
|-CXXMethodDecl 0x55d6c7cebba8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d6c7cebb18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55d6c7cebd48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55d6c7cebee8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55d6c7cebdf8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55d6c7cebf90 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55d6c7cec090 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6c7cec440 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cec070 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6c7cec050 <col:9> 'int' 0
| |-EnumConstantDecl 0x55d6c7cec120 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6c7cec458 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cec100 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55d6c7cec0e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d6c7cec1b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6c7cec470 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cec190 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55d6c7cec170 <col:14> 'int' 2
| |-EnumConstantDecl 0x55d6c7cec240 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6c7cec488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cec220 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55d6c7cec200 <col:14> 'int' 3
| |-EnumConstantDecl 0x55d6c7cec2d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6c7cec4a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cec2b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6c7cec290 <col:13> 'int' 4
| |-EnumConstantDecl 0x55d6c7cec360 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d6c7cec4b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cec340 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55d6c7cec320 <col:13> 'int' 5
| `-EnumConstantDecl 0x55d6c7cec3f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55d6c7cec4d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7cec3d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55d6c7cec3b0 <col:14> 'int' 6
|-CXXMethodDecl 0x55d6c7cec538 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55d6c7cec5d8 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cec630 <col:30>
|-CXXMethodDecl 0x55d6c7cec728 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55d6c7cec668 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55d6c7cec7d0 <col:20>
| `-OptimizeNoneAttr 0x55d6c7cec828 <col:30>
|-CXXMethodDecl 0x55d6c7cec898 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55d6c7cec9c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55d6c7cecb38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55d6c7ceca70 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55d6c7cecc00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55d6c7ceccc8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55d6c7cece08 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55d6c7cecd78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55d6c7ceceb0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55d6c7cecfb0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d6c7ced1b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cecf90 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6c7cecf70 <col:23> 'int' 0
| |-EnumConstantDecl 0x55d6c7ced040 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d6c7ced1c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7ced020 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55d6c7ced000 <col:45> 'int' 4
| |-EnumConstantDecl 0x55d6c7ced0d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d6c7ced1e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7ced0b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6c7ced090 <col:24> 'int' 0
| `-EnumConstantDecl 0x55d6c7ced160 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55d6c7ced1f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7ced140 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55d6c7ced120 <col:47> 'int' 16
|-CXXMethodDecl 0x55d6c7ced258 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55d6c7ced3c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55d6c7ced308 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55d6c7ced470 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ced4c8 <col:30>
|-CXXMethodDecl 0x55d6c7ced518 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55d6c7d00ea0 <col:18, col:36>
|   `-ReturnStmt 0x55d6c7d00e90 <col:20, col:33>
|     `-ImplicitCastExpr 0x55d6c7d00e78 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d6c7d00e58 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55d6c7d00e28 <col:27> '<bound member function type>' ->xanno 0x55d6c7ceb578
|           `-CXXThisExpr 0x55d6c7d00e18 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55d6c7ced610 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55d6c7d00fb0 <col:30, col:48>
|   `-ReturnStmt 0x55d6c7d00fa0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55d6c7d00f88 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d6c7d00f68 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55d6c7d00f38 <col:39> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|           `-CXXThisExpr 0x55d6c7d00f28 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d6c7ced6f8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55d6c7d01148 <col:24, col:50>
|   `-ReturnStmt 0x55d6c7d01138 <col:26, col:47>
|     `-UnaryOperator 0x55d6c7d01120 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6c7d01100 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d6c7d010e8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6c7d01098 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55d6c7cf63b8
|         |   `-CXXMemberCallExpr 0x55d6c7d01078 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d6c7d01048 <col:34> '<bound member function type>' ->xanno 0x55d6c7ceb578
|         |       `-CXXThisExpr 0x55d6c7d01038 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d6c7d010c8 <col:46> 'int' 0
|-CXXMethodDecl 0x55d6c7ced800 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55d6c7d01318 <col:36, col:62>
|   `-ReturnStmt 0x55d6c7d01308 <col:38, col:59>
|     `-UnaryOperator 0x55d6c7d012f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6c7d012d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d6c7d012b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6c7d01230 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55d6c7cf63b8
|         |   `-CXXMemberCallExpr 0x55d6c7d01210 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d6c7d011e0 <col:46> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|         |       `-CXXThisExpr 0x55d6c7d011d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d6c7d01260 <col:58> 'int' 0
|-CXXMethodDecl 0x55d6c7ced918 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55d6c7d014b0 <col:26, col:53>
|   `-ReturnStmt 0x55d6c7d014a0 <col:28, col:50>
|     `-UnaryOperator 0x55d6c7d01488 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6c7d01468 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d6c7d01450 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6c7d01400 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55d6c7cf66b8
|         |   `-CXXMemberCallExpr 0x55d6c7d013e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d6c7d013b0 <col:36> '<bound member function type>' ->xanno 0x55d6c7ceb578
|         |       `-CXXThisExpr 0x55d6c7d013a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d6c7d01430 <col:49> 'int' 0
|-CXXMethodDecl 0x55d6c7ceda38 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55d6c7d01688 <col:38, col:65>
|   `-ReturnStmt 0x55d6c7d01678 <col:40, col:62>
|     `-UnaryOperator 0x55d6c7d01660 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d6c7d01640 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d6c7d01628 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6c7d01598 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55d6c7cf66b8
|         |   `-CXXMemberCallExpr 0x55d6c7d01578 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d6c7d01548 <col:48> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|         |       `-CXXThisExpr 0x55d6c7d01538 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d6c7d015c8 <col:61> 'int' 0
|-CXXMethodDecl 0x55d6c7cedbe8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55d6c7cedaf0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55d6c7d01d58 <col:34, line:463:5>
|   |-ParenExpr 0x55d6c7d01ba0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d6c7d01b70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d017d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d017a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d016f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d016e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d016a0 <col:23> 'int' lvalue ParmVar 0x55d6c7cedaf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d016c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d01788 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d01758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d01718 <col:33> 'int' lvalue ParmVar 0x55d6c7cedaf0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d6c7d01770 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d6c7d01738 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d6c7d01838 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d01818 <col:56> 'int' 0
|   |   `-CallExpr 0x55d6c7d01ad0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d01ab8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d01a98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d01b10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d01928 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d6c7d01b28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d01958 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d01b40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d01990 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55d6c7d01b58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d01a80 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d01a68 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d01a28 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55d6c7d01d48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55d6c7d01d30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55d6c7d01d10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d6c7d01ce0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d6c7d01c90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55d6c7cf63b8
|         |   `-CXXMemberCallExpr 0x55d6c7d01c70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d6c7d01c40 <col:9> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|         |       `-CXXThisExpr 0x55d6c7d01c30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55d6c7d01cf8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55d6c7d01cc0 <col:21> 'int' lvalue ParmVar 0x55d6c7cedaf0 'i' 'int'
|-CXXMethodDecl 0x55d6c7cede38 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55d6c7cedca8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55d6c7cedd20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55d6c7d023e8 <col:40, line:472:5>
|   |-ParenExpr 0x55d6c7d02200 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d6c7d021d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d01eb0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d01e80 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d01dd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d01db8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d01d78 <col:23> 'int' lvalue ParmVar 0x55d6c7cedca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d01d98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d01e60 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d01e30 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d01df0 <col:33> 'int' lvalue ParmVar 0x55d6c7cedca8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d6c7d01e48 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d6c7d01e10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d6c7d01f10 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d01ef0 <col:56> 'int' 0
|   |   `-CallExpr 0x55d6c7d02130 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d02118 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d020f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d02170 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d01f80 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d6c7d02188 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d01fb0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d021a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d01fe8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55d6c7d021b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d020e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d020c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d02088 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55d6c7d023c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55d6c7d02370 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55d6c7d02340 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d6c7d022f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55d6c7cf63b8
|     | |   `-CXXMemberCallExpr 0x55d6c7d022d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55d6c7d022a0 <col:2> '<bound member function type>' ->xanno 0x55d6c7ceb578
|     | |       `-CXXThisExpr 0x55d6c7d02290 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55d6c7d02358 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d6c7d02320 <col:14> 'int' lvalue ParmVar 0x55d6c7cedca8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6c7d023b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d02390 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55d6c7cedd20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55d6c7cedff8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55d6c7cedf00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d6c7d02b68 <col:36, line:485:5>
|   |-ParenExpr 0x55d6c7d028d0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d028a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d02580 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d02550 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d02460 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d02448 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d02408 <col:23> 'int' lvalue ParmVar 0x55d6c7cedf00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d02428 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d02530 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d02518 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d02480 <col:33> 'int' lvalue ParmVar 0x55d6c7cedf00 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d024f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d024e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d024a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d024c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6c7d025e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d025c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d02800 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d027e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d027c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d02840 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d02650 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6c7d02858 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d02688 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d02870 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d026c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55d6c7d02888 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d027b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d02798 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d02758 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55d6c7d02b58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55d6c7d02b40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55d6c7d02b28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6c7d02af8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55d6c7d02a98 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6c7d02a68 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6c7d029e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d6c7cf6290
|             |   `-CXXMemberCallExpr 0x55d6c7d029c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6c7d02990 <col:61> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|             |       `-CXXThisExpr 0x55d6c7d02980 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6c7d02a80 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6c7d02a10 <col:74> 'int' lvalue ParmVar 0x55d6c7cedf00 'i' 'int'
|-CXXMethodDecl 0x55d6c7cee248 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55d6c7cee0b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6c7cee130 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d6c7d032b8 <col:42, line:500:5>
|   |-ParenExpr 0x55d6c7d03050 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d03020 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d02d00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d02cd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d02be0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d02bc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d02b88 <col:23> 'int' lvalue ParmVar 0x55d6c7cee0b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d02ba8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d02cb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d02c98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d02c00 <col:33> 'int' lvalue ParmVar 0x55d6c7cee0b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d02c78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d02c60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d02c20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d02c40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6c7d02d60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d02d40 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d02f80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d02f68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d02f48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d02fc0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d02dd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6c7d02fd8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d02e08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d02ff0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d02e40 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55d6c7d03008 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d02f30 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d02f18 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d02ed8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55d6c7d03298 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55d6c7d03248 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6c7d03218 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6c7d031c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6c7d03190 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6c7d03140 <col:48, col:57> 'char [48]' lvalue ->c 0x55d6c7cf6290
|     |     |   `-CXXMemberCallExpr 0x55d6c7d03120 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6c7d030f0 <col:48> '<bound member function type>' ->xanno 0x55d6c7ceb578
|     |     |       `-CXXThisExpr 0x55d6c7d030e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6c7d031a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6c7d03170 <col:61> 'int' lvalue ParmVar 0x55d6c7cee0b8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6c7d03280 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d03260 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d6c7cee130 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d6c7cee408 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55d6c7cee310 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d6c7d03a18 <col:35, line:513:5>
|   |-ParenExpr 0x55d6c7d03728 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d036f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d03450 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d03420 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d03330 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d03318 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d032d8 <col:23> 'int' lvalue ParmVar 0x55d6c7cee310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d032f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d03400 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d033e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d03350 <col:33> 'int' lvalue ParmVar 0x55d6c7cee310 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d033c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d033b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d03370 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d03390 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6c7d034b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d03490 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d03658 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d03640 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d03620 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d03698 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d03520 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6c7d036b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d03558 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d036c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d03590 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55d6c7d036e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d03608 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d035f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d035b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55d6c7d03a08 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55d6c7d039f0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55d6c7d039d8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6c7d039a8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55d6c7d03920 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6c7d038f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6c7d038a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d6c7cf6290
|             |   `-CXXMemberCallExpr 0x55d6c7d03880 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6c7d03850 <col:60> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|             |       `-CXXThisExpr 0x55d6c7d03840 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6c7d03908 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6c7d038d0 <col:73> 'int' lvalue ParmVar 0x55d6c7cee310 'i' 'int'
|-CXXMethodDecl 0x55d6c7cee658 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55d6c7cee4c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6c7cee540 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55d6c7d04138 <col:41, line:528:5>
|   |-ParenExpr 0x55d6c7d03ec0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d03e90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d03bb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d03b80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d03a90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d03a78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d03a38 <col:23> 'int' lvalue ParmVar 0x55d6c7cee4c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d03a58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d03b60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d03b48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d03ab0 <col:33> 'int' lvalue ParmVar 0x55d6c7cee4c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d03b28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d03b10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d03ad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d03af0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d6c7d03c10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d03bf0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d03df0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d03dd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d03db8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d03e30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d03c80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d6c7d03e48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d03cb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d03e60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d03cf0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55d6c7d03e78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d03da0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d03d88 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d03d48 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55d6c7d04118 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55d6c7d040c8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6c7d04098 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6c7d04040 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6c7d04000 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6c7d03fb0 <col:47, col:56> 'char [48]' lvalue ->c 0x55d6c7cf6290
|     |     |   `-CXXMemberCallExpr 0x55d6c7d03f90 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6c7d03f60 <col:47> '<bound member function type>' ->xanno 0x55d6c7ceb578
|     |     |       `-CXXThisExpr 0x55d6c7d03f50 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6c7d04018 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6c7d03fe0 <col:60> 'int' lvalue ParmVar 0x55d6c7cee4c8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6c7d04100 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d040e0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55d6c7cee540 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55d6c7cee818 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55d6c7cee720 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d6c7d04808 <col:36, line:541:5>
|   |-ParenExpr 0x55d6c7d045a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d04578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d042d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d042a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d041b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d04198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d04158 <col:23> 'int' lvalue ParmVar 0x55d6c7cee720 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d04178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d04280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d04268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d041d0 <col:33> 'int' lvalue ParmVar 0x55d6c7cee720 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d04248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d04230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d041f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d04210 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d6c7d04330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d04310 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d044d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d044c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d044a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d04518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d043a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d6c7d04530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d043d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d04548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d04410 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55d6c7d04560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d04488 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d04470 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d04430 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55d6c7d047f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55d6c7d047e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d6c7d047c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6c7d04798 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55d6c7d04740 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6c7d04710 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6c7d046c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d6c7cf6290
|             |   `-CXXMemberCallExpr 0x55d6c7d046a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6c7d04670 <col:61> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|             |       `-CXXThisExpr 0x55d6c7d04660 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6c7d04728 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6c7d046f0 <col:74> 'int' lvalue ParmVar 0x55d6c7cee720 'i' 'int'
|-CXXMethodDecl 0x55d6c7cee9e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55d6c7cee8d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55d6c7cee950 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d6c7ceea98 <col:20>
| `-OptimizeNoneAttr 0x55d6c7ceeaf0 <col:30>
|-CXXMethodDecl 0x55d6c7ceec28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55d6c7ceeb30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d6c7d04ed8 <col:35, line:562:5>
|   |-ParenExpr 0x55d6c7d04c78 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d04c48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d049a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d04970 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d04880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d04868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d04828 <col:23> 'int' lvalue ParmVar 0x55d6c7ceeb30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d04848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d04950 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d04938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d048a0 <col:33> 'int' lvalue ParmVar 0x55d6c7ceeb30 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d04918 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d04900 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d048c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d048e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d6c7d04a00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d049e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d04ba8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d04b90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d04b70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d04be8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d04a70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d6c7d04c00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d04aa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d04c18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d04ae0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55d6c7d04c30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d04b58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d04b40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d04b00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55d6c7d04ec8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55d6c7d04eb0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55d6c7d04e98 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6c7d04e68 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55d6c7d04e10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6c7d04de0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6c7d04d90 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d6c7cf6290
|             |   `-CXXMemberCallExpr 0x55d6c7d04d70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6c7d04d40 <col:60> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|             |       `-CXXThisExpr 0x55d6c7d04d30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6c7d04df8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6c7d04dc0 <col:73> 'int' lvalue ParmVar 0x55d6c7ceeb30 'i' 'int'
|-CXXMethodDecl 0x55d6c7ceee38 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55d6c7ceece8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6c7ceed60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55d6c7d055b8 <col:41, line:577:5>
|   |-ParenExpr 0x55d6c7d05348 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d05318 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d05070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d05040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d04f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d04f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d04ef8 <col:23> 'int' lvalue ParmVar 0x55d6c7ceece8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d04f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d05020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d05008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d04f70 <col:33> 'int' lvalue ParmVar 0x55d6c7ceece8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d04fe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d04fd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d04f90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d04fb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d6c7d050d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d050b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d05278 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d05260 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d05240 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d052b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d05140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d6c7d052d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d05178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d052e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d051b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55d6c7d05300 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d05228 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d05210 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d051d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55d6c7d05598 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55d6c7d05548 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6c7d05518 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6c7d054b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6c7d05488 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6c7d05438 <col:47, col:56> 'char [48]' lvalue ->c 0x55d6c7cf6290
|     |     |   `-CXXMemberCallExpr 0x55d6c7d05418 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6c7d053e8 <col:47> '<bound member function type>' ->xanno 0x55d6c7ceb578
|     |     |       `-CXXThisExpr 0x55d6c7d053d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6c7d054a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6c7d05468 <col:60> 'int' lvalue ParmVar 0x55d6c7ceece8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6c7d05580 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d05560 <col:65> 'int32_t':'int' lvalue ParmVar 0x55d6c7ceed60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55d6c7ceeff8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55d6c7ceef00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d6c7d05ce8 <col:36, line:591:5>
|   |-ParenExpr 0x55d6c7d05a28 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d059f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d05750 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d05720 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d05630 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d05618 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d055d8 <col:23> 'int' lvalue ParmVar 0x55d6c7ceef00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d055f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d05700 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d056e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d05650 <col:33> 'int' lvalue ParmVar 0x55d6c7ceef00 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d056c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d056b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d05670 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d05690 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d6c7d057b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d05790 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d05958 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d05940 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d05920 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d05998 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d05820 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d6c7d059b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d05858 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d059c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d05890 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55d6c7d059e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d05908 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d058f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d058b0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55d6c7d05cd8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55d6c7d05cc0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55d6c7d05ca8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6c7d05c78 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55d6c7d05bf0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6c7d05bc0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6c7d05b70 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d6c7cf6290
|             |   `-CXXMemberCallExpr 0x55d6c7d05b50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6c7d05b20 <col:61> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|             |       `-CXXThisExpr 0x55d6c7d05b10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6c7d05bd8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6c7d05ba0 <col:74> 'int' lvalue ParmVar 0x55d6c7ceef00 'i' 'int'
|-CXXMethodDecl 0x55d6c7cef248 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55d6c7cef0b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6c7cef130 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55d6c7d063c8 <col:42, line:606:5>
|   |-ParenExpr 0x55d6c7d06158 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d6c7d06128 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d05e80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d05e50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d05d60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d05d48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d05d08 <col:23> 'int' lvalue ParmVar 0x55d6c7cef0b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d05d28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d05e30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d6c7d05e18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d05d80 <col:33> 'int' lvalue ParmVar 0x55d6c7cef0b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d05df8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d05de0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d05da0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d6c7d05dc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d6c7d05ee0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d05ec0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d6c7d06088 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d06070 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d06050 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d060c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d05f50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d6c7d060e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d05f88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d060f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d05fc0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55d6c7d06110 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d06038 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d06020 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d05fe0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55d6c7d063a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55d6c7d06358 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6c7d06328 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6c7d062c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6c7d06298 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6c7d06248 <col:48, col:57> 'char [48]' lvalue ->c 0x55d6c7cf6290
|     |     |   `-CXXMemberCallExpr 0x55d6c7d06228 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6c7d061f8 <col:48> '<bound member function type>' ->xanno 0x55d6c7ceb578
|     |     |       `-CXXThisExpr 0x55d6c7d061e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6c7d062b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6c7d06278 <col:61> 'int' lvalue ParmVar 0x55d6c7cef0b8 'i' 'int'
|     `-ImplicitCastExpr 0x55d6c7d06390 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55d6c7d06370 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55d6c7cef130 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55d6c7cef3e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55d6c7cef310 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55d6c7d06c38 <col:33, line:620:5>
|   |-ParenExpr 0x55d6c7d069b0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d6c7d06980 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d065d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d065a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d06440 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d06428 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d063e8 <col:23> 'int' lvalue ParmVar 0x55d6c7cef310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d06408 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d06580 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d6c7d06568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d06460 <col:33> 'int' lvalue ParmVar 0x55d6c7cef310 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d06548 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d06530 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d06480 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d6c7d06508 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d6c7d064f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d6c7d064b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d6c7d06630 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d06610 <col:79> 'int' 0
|   |   `-CallExpr 0x55d6c7d068e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d068c8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d068a8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d06920 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d06718 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d6c7d06938 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d06760 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d06950 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d06798 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55d6c7d06968 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d06890 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d06878 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d06838 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55d6c7d06c28 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55d6c7d06c10 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55d6c7d06bf8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d6c7d06bc8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55d6c7d06b40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d6c7d06b10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d6c7d06ac0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55d6c7cf6290
|             |   `-CXXMemberCallExpr 0x55d6c7d06aa0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d6c7d06a70 <col:67> '<bound member function type>' ->xanno 0x55d6c7ceb3d8
|             |       `-CXXThisExpr 0x55d6c7d06a60 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d6c7d06b28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d6c7d06af0 <col:80> 'int' lvalue ParmVar 0x55d6c7cef310 'i' 'int'
|-CXXMethodDecl 0x55d6c7cef5f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55d6c7cef4a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d6c7cef520 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55d6c7d07460 <col:45, line:635:5>
|   |-ParenExpr 0x55d6c7d071a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d6c7d07178 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d6c7d06e40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d6c7d06e10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d6c7d06cb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d6c7d06c98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d6c7d06c58 <col:23> 'int' lvalue ParmVar 0x55d6c7cef4a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d6c7d06c78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d6c7d06df0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d6c7d06dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d6c7d06cd0 <col:33> 'int' lvalue ParmVar 0x55d6c7cef4a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55d6c7d06db8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d6c7d06da0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d6c7d06cf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d6c7ceb7c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d6c7d06d78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d6c7d06d60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d6c7d06d28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d6c7d06ea0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d6c7d06e80 <col:79> 'int' 0
|   |   `-CallExpr 0x55d6c7d070d8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d6c7d070c0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d6c7d070a0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d6c7858090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d6c7d07118 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d06f10 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d6c7d07130 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d6c7d06f58 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d6c7d07148 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d6c7d06f90 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55d6c7d07160 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d6c7d07088 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d6c7d07070 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d6c7d07028 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55d6c7d07440 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55d6c7d073a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d6c7d07378 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55d6c7d07318 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d6c7d072e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d6c7d07298 <col:54, col:63> 'char [48]' lvalue ->c 0x55d6c7cf6290
|     |     |   `-CXXMemberCallExpr 0x55d6c7d07278 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d6c7d07248 <col:54> '<bound member function type>' ->xanno 0x55d6c7ceb578
|     |     |       `-CXXThisExpr 0x55d6c7d07238 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d6c7d07300 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d6c7d072c8 <col:67> 'int' lvalue ParmVar 0x55d6c7cef4a0 'i' 'int'
|     `-CXXConstCastExpr 0x55d6c7d07410 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55d6c7d073f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55d6c7d073c0 <col:91> 'const void *' lvalue ParmVar 0x55d6c7cef520 'x' 'const void *'
|-CXXMethodDecl 0x55d6c7cef6c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55d6c7d074e8 <col:34, line:640:5>
|   `-ReturnStmt 0x55d6c7d074d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55d6c7d074c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55d6c7d07490 <col:16> 'Packet *' lvalue ->_data_packet 0x55d6c7cf6e48
|         `-CXXThisExpr 0x55d6c7d07480 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d6c7cef808 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55d6c7cef778 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d6c7d005a8 <col:46> 'bool' true
|-CXXMethodDecl 0x55d6c7cef988 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55d6c7cef8c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55d6c7cefa30 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55d6c7cf01e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55d6c7cefb30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf0250 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefb10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55d6c7cefaf0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d6c7ce4c90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d6c7cefbc0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf0268 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefba0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55d6c7cefb80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d6c7ce4d20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d6c7cefc50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf0280 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefc30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6c7cefc10 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d6c7cefce0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf0298 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefcc0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55d6c7cefca0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55d6c7cefd70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf02b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefd50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55d6c7cefd30 <col:21> 'int' 16
| |-EnumConstantDecl 0x55d6c7cefe00 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf02c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefde0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d6c7cefdc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d6c7cefe90 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf02e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cefe70 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55d6c7cefe50 <col:19> 'int' EnumConstant 0x55d6c7cefce0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d6c7ceff20 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf02f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7ceff00 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55d6c7cefee0 <col:19> 'int' EnumConstant 0x55d6c7cefe00 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d6c7cefff0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf0310 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7ceffd0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55d6c7ceffb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d6c7ceff70 <col:23> 'int' EnumConstant 0x55d6c7ceff20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d6c7ceff90 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d6c7cf00c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d6c7cf0328 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7cf00a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55d6c7cf0080 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d6c7cf0040 <col:23> 'int' EnumConstant 0x55d6c7ceff20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d6c7cf0060 <col:40> 'int' 4
| `-EnumConstantDecl 0x55d6c7cf0190 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55d6c7cf0340 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d6c7cf0170 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55d6c7cf0150 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55d6c7cf0110 <col:23> 'int' EnumConstant 0x55d6c7ceff20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55d6c7cf0130 <col:40> 'int' 8
|-CXXMethodDecl 0x55d6c7cf0380 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55d6c7cf0420 <col:68> "" ""
|-CXXMethodDecl 0x55d6c7cf04b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55d6c7cf0558 <col:45> "" ""
|-CXXMethodDecl 0x55d6c7cf05f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d6c7cf0690 <col:57> "" ""
|-CXXMethodDecl 0x55d6c7cf0728 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55d6c7cf07c8 <col:45> "" ""
|-CXXMethodDecl 0x55d6c7cf0860 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d6c7cf0900 <col:57> "" ""
|-CXXMethodDecl 0x55d6c7cf0990 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d6c7cf0a30 <col:51> "" ""
|-CXXMethodDecl 0x55d6c7cf0ac0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d6c7cf0b60 <col:63> "" ""
|-CXXMethodDecl 0x55d6c7cf0bf0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d6c7cf0c90 <col:53> "" ""
|-CXXMethodDecl 0x55d6c7cf0d20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d6c7cf0dc0 <col:65> "" ""
|-CXXMethodDecl 0x55d6c7cf0ed8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf0e48 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55d6c7cf0f80 <col:61> "" ""
|-CXXMethodDecl 0x55d6c7cf1118 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d6c7cf1008 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55d6c7cf1080 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d6c7cf11c8 <col:67> "" ""
|-CXXMethodDecl 0x55d6c7cf12e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf1250 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d6c7cf1388 <col:63> "" ""
|-CXXMethodDecl 0x55d6c7cf1520 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d6c7cf1410 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6c7cf1488 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d6c7cf15d0 <col:69> "" ""
|-CXXMethodDecl 0x55d6c7cf16e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf1658 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d6c7cf1790 <col:63> "" ""
|-CXXMethodDecl 0x55d6c7cf3e68 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7cf3d58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6c7cf3dd0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6c7cf3f18 <col:69> "" ""
|-CXXMethodDecl 0x55d6c7cf4030 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf3fa0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55d6c7cf40d8 <col:62> "" ""
|-CXXMethodDecl 0x55d6c7cf4270 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d6c7cf4160 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6c7cf41d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55d6c7cf4320 <col:68> "" ""
|-CXXMethodDecl 0x55d6c7cf4438 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf43a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d6c7cf44e0 <col:63> "" ""
|-CXXMethodDecl 0x55d6c7cf4678 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55d6c7cf4568 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d6c7cf45e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55d6c7cf4728 <col:69> "" ""
|-CXXMethodDecl 0x55d6c7cf47b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d6c7cf4858 <col:64> "" ""
|-CXXMethodDecl 0x55d6c7cf48e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d6c7cf4988 <col:52> "" ""
|-CXXMethodDecl 0x55d6c7cf4a18 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d6c7cf4ab8 <col:67> "" ""
|-CXXMethodDecl 0x55d6c7cf4b48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d6c7cf4be8 <col:55> "" ""
|-CXXMethodDecl 0x55d6c7cf4d00 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf4c70 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d6c7cf4da8 <col:58> "" ""
|-CXXMethodDecl 0x55d6c7cf4f40 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d6c7cf4e30 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6c7cf4ea8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d6c7cf4ff0 <col:62> "" ""
|-CXXMethodDecl 0x55d6c7cf5108 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf5078 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d6c7cf51b0 <col:58> "" ""
|-CXXMethodDecl 0x55d6c7cf5348 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55d6c7cf5238 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6c7cf52b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55d6c7cf53f8 <col:62> "" ""
|-CXXMethodDecl 0x55d6c7cf5510 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf5480 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55d6c7cf55b8 <col:60> "" ""
|-CXXMethodDecl 0x55d6c7cf5750 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d6c7cf5640 <col:34> col:37 'int'
| |-ParmVarDecl 0x55d6c7cf56b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d6c7cf5800 <col:64> "" ""
|-CXXMethodDecl 0x55d6c7cf5918 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf5888 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d6c7cf59c0 <col:58> "" ""
|-CXXMethodDecl 0x55d6c7cf5b58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d6c7cf5a48 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6c7cf5ac0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55d6c7cf5c08 <col:62> "" ""
|-CXXMethodDecl 0x55d6c7cf5d20 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d6c7cf5c90 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55d6c7cf5dc8 <col:59> "" ""
|-CXXMethodDecl 0x55d6c7cf5f60 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d6c7cf5e50 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d6c7cf5ec8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d6c7cf6010 <col:63> "" ""
|-AccessSpecDecl 0x55d6c7cf6080 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55d6c7cf60a8 prev 0x55d6c7ceb2b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6c7cf61a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55d6c7cf6290 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55d6c7cf63b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55d6c7cf6538 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55d6c7cf66b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55d6c7cf6838 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55d6c7d07668 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d6c7d07ed8 <col:11>
| |-CXXDestructorDecl 0x55d6c7d07740 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55d6c7d07878 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d6c7d07878
| | `-ParmVarDecl 0x55d6c7d07988 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55d6c7d07a28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6c7d07a28
| | `-ParmVarDecl 0x55d6c7d07b38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55d6c7d0a8f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d6c7d0aa08 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55d6c7d0ac88 <col:11>
| |   `-ReturnStmt 0x55d6c7d0ac78 <col:11>
| |     `-UnaryOperator 0x55d6c7d0ac60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d6c7d0ac50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55d6c7d0aa78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d6c7d0aa78
|   `-ParmVarDecl 0x55d6c7d0ab88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55d6c7cf68a0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d6c7cf69b8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55d6c7cf6a58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55d6c7cf6ac0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55d6c7cf6b28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55d6c7cf6b90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55d6c7cf6bf0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55d6c7cf6cb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55d6c7cf6d10 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55d6c7cf6d70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55d6c7d07578 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55d6c7cf6a58 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55d6c7d07ee8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55d6c7d07f40 <col:12>
| |-CXXConstructorDecl 0x55d6c7d07ba8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d6c7d07ba8
| | `-ParmVarDecl 0x55d6c7d07cb8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55d6c7d07d58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d6c7d07d58
| | `-ParmVarDecl 0x55d6c7d07e68 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55d6c7d09fe0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55d6c7cf6de8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55d6c7cf6e48 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55d6c7cf6eb0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55d6c7cf6f18 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55d6c7cf6f80 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55d6c7cf6fe8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55d6c7cf7048 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55d6c7cf70a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55d6c7cf7110 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55d6c7cf7198 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55d6c7cf6de8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55d6c7d07510 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d6c7cf7048 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55d6c7d07f50 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55d6c7d07fb0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55d6c7cf7338 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55d6c7cf7278 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55d6c7cf7430 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55d6c7cf7618 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55d6c7cf7520 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55d6c7cf78e8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55d6c7cf76d0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d6c7cf7748 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d6c7cf77c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7cf7b08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55d6c7cf79b8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55d6c7cf7a30 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55d6c7d000e8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55d6c7cf7bc8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55d6c7cf7c40 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55d6c7cf7cb8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55d6c7d00240 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d6c7d001b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d6c7d00388 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d6c7d002f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55d6c7d00480 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7dd8ee0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d6c7dd8ff8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55d6c7dd9088 <col:16, col:22> col:16 public
|-EnumDecl 0x55d6c7dd90b0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55d6c7dd91b0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6c7dd9400 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7dd9190 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d6c7dd9170 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d6c7dd9240 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6c7dd9418 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7dd9220 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55d6c7dd9200 <col:24> 'int' 22
| |-EnumConstantDecl 0x55d6c7dd92d0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6c7dd9430 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7dd92b0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55d6c7dd9290 <col:24> 'int' 34
| |-EnumConstantDecl 0x55d6c7dd9360 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d6c7dd9448 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d6c7dd9340 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55d6c7dd9320 <col:25> 'int' 95
| `-EnumConstantDecl 0x55d6c7dd93b0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55d6c7ddadc0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d6c7ddb1f8 <col:7>
|-CXXConstructorDecl 0x55d6c7ddaec8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55d6c7ddaec8
| `-ParmVarDecl 0x55d6c7ddafd8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55d6c7ddb078 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7ddb188 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55d6c7e37f70 <col:7>
`-CXXDestructorDecl 0x55d6c7ddd318 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d6c7dd9478 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55d6c7dd95d8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55d6c7dd9668 <col:32, col:38> col:32 public
|-TypedefDecl 0x55d6c7dd96a0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55d6c79115e0 'uint32_t' sugar
|   |-Typedef 0x55d6c78254c8 'uint32_t'
|   `-TypedefType 0x55d6c77fe5a0 '__uint32_t' sugar
|     |-Typedef 0x55d6c77fe198 '__uint32_t'
|     `-BuiltinType 0x55d6c77bc620 'unsigned int'
|-CXXConstructorDecl 0x55d6c7dd97e8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55d6c7dd9710 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55d6c7ddacc8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55d6c7ddb208 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d6c7dda580 'base' 'int'
| | `-ImplicitCastExpr 0x55d6c7ddad68 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d6c7ddad28 <col:16> 'int' lvalue ParmVar 0x55d6c7dd9710 'b' 'int'
| `-CompoundStmt 0x55d6c7ddb278 <col:19, line:1046:5>
|-CXXMethodDecl 0x55d6c7dd9ce0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55d6c7dd98b0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55d6c7dd9930 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55d6c7dd99a8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55d6c7dd9a28 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55d6c7dd9ae8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55d6c7dd9b68 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55d6c7dda138 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55d6c7dd9db0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55d6c7dda098 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55d6c7dd9e58 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55d6c7dd9ef8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55d6c7dd9f70 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55d6c7ddace8 <col:82> 'const ArgContext' lvalue Var 0x55d6c7dcdd18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55d6c7ddc1c8 <col:94, line:1067:5>
| |   |-DeclStmt 0x55d6c7ddb408 <line:1054:9, col:64>
| |   | `-VarDecl 0x55d6c7ddb298 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55d6c7ddb3c0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55d6c7ddb628 <line:1055:9, col:91>
| |   | `-VarDecl 0x55d6c7ddb438 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55d6c7ddb600 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55d6c7ddb5e0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55d6c7ddb590 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55d6c7ddb570 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55d6c7ddb518 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55d6c7ddb4c8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55d6c7ddb4f8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55d6c7ddb558 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55d6c7ddb538 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55d6c7ddb5c0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55d6c7ddb788 <line:1056:9, col:27>
| |   | `-VarDecl 0x55d6c7ddb720 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55d6c7ddbbd0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55d6c7ddbb00 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55d6c7ddba80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d6c7cdb5c8 0x55d6c7b24ba8 0x55d6c7b24880 0x55d6c7b15050 0x55d6c7b14d00 0x55d6c7b145f0 0x55d6c7ae6f60 0x55d6c7a74430
| |   | | |-CallExpr 0x55d6c7ddb9c0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55d6c7ddb7b0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55d6c7ddb860 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55d6c7ddb830 <col:19, col:23> '<bound member function type>' .begin 0x55d6c7b04258
| |   | | | |   `-DeclRefExpr 0x55d6c7ddb810 <col:19> 'const String' lvalue ParmVar 0x55d6c7dd9e58 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55d6c7ddb8d0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55d6c7ddb8a0 <col:32, col:36> '<bound member function type>' .end 0x55d6c7b04470
| |   | | | |   `-DeclRefExpr 0x55d6c7ddb880 <col:32> 'const String' lvalue ParmVar 0x55d6c7dd9e58 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55d6c7ddb8f0 <col:43> 'const bool' lvalue Var 0x55d6c7ddb298 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55d6c7ddb958 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55d6c7ddb938 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55d6c7ddb980 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d6c7ddb720 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55d6c7ddb9a0 <col:73> 'const int' lvalue Var 0x55d6c7ddb438 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55d6c7ddba60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55d6c7ddba30 <col:16, col:20> '<bound member function type>' .end 0x55d6c7b04470
| |   | |     `-DeclRefExpr 0x55d6c7ddba10 <col:16> 'const String' lvalue ParmVar 0x55d6c7dd9e58 'str' 'const String &'
| |   | `-BinaryOperator 0x55d6c7ddbbb0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55d6c7ddbb48 <col:13> 'int' lvalue ->status 0x55d6c7dda5e8
| |   |   | `-CXXThisExpr 0x55d6c7ddbb38 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55d6c7ddbb98 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55d6c7ddbb78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd9240 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55d6c7ddbe48 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55d6c7ddbd08 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55d6c7ddbcf0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55d6c7ddbcd8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55d6c7ddbbf8 <col:13> 'int' lvalue ->status 0x55d6c7dda5e8
| |   | | |     `-CXXThisExpr 0x55d6c7ddbbe8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55d6c7ddbcb8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55d6c7ddbc88 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55d6c7ddbc38 <col:23> 'int' lvalue ->status 0x55d6c7dda5e8
| |   | |   |   `-CXXThisExpr 0x55d6c7ddbc28 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55d6c7ddbca0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55d6c7ddbc68 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd92d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55d6c7ddbe28 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55d6c7ddbdc8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55d6c7ddbd70 <col:13, col:18> '<bound member function type>' .error 0x55d6c7c9ed60
| |   |   | | `-DeclRefExpr 0x55d6c7ddbd50 <col:13> 'const ArgContext' lvalue ParmVar 0x55d6c7dd9f70 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55d6c7ddbdf0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55d6c7ddbda0 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55d6c7ddbe18 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55d6c7ddbe08 <col:20> 'bool' false
| |   |-DeclStmt 0x55d6c7ddc018 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55d6c7ddbfc0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55d6c7ddbf50 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55d6c7ddc178 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55d6c7ddc030 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55d6c7aa83f8
| |   | |-DeclRefExpr 0x55d6c7ddc078 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d6c7ddb720 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55d6c7ddc148 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55d6c7ddc0c0 <col:64> 'V' lvalue ParmVar 0x55d6c7dd9ef8 'result' 'V &'
| |   `-ReturnStmt 0x55d6c7ddc1b8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55d6c7ddc1a8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55d6c7e3e968 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55d6c7e3e740 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55d6c7e3e818 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x55d6c7e3e880 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55d6c7e40700 <col:94, line:1067:5>
|     |-DeclStmt 0x55d6c7e3f178 <line:1054:9, col:64>
|     | `-VarDecl 0x55d6c7e3ef98 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55d6c7e3f108 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55d6c7e3f0d8 <col:36, col:55> 'const bool' lvalue Var 0x55d6c7a91320 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55d6c7e3f358 <line:1055:9, col:91>
|     | `-VarDecl 0x55d6c7e3f190 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55d6c7e3f2d8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55d6c7e3f2c0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55d6c7e3f2a0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55d6c7e3f280 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55d6c7e3f260 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55d6c7e3f228 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55d6c7e3f208 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55d6c7ddb4f8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55d6c7e3f248 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55d6c7ddb538 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55d6c7ddb5c0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55d6c7e3f4f0 <line:1056:9, col:27>
|     | `-VarDecl 0x55d6c7e3f488 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55d6c7e3f978 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55d6c7e3f920 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55d6c7e3f7d8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55d6c7e3f7a8 <col:13> '<bound member function type>' ->parse 0x55d6c7dd9ce0
|     | | | | `-CXXThisExpr 0x55d6c7e3f798 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55d6c7e3f638 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d6c7e3f608 <col:19, col:23> '<bound member function type>' .begin 0x55d6c7b04258
|     | | | |   `-DeclRefExpr 0x55d6c7e3f5e8 <col:19> 'const String' lvalue ParmVar 0x55d6c7e3e740 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55d6c7e3f6a8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d6c7e3f678 <col:32, col:36> '<bound member function type>' .end 0x55d6c7b04470
|     | | | |   `-DeclRefExpr 0x55d6c7e3f658 <col:32> 'const String' lvalue ParmVar 0x55d6c7e3e740 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55d6c7e3f848 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55d6c7e3f828 <col:43> 'const bool' lvalue Var 0x55d6c7e3ef98 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55d6c7e3f730 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55d6c7e3f718 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55d6c7e3f6f8 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x55d6c7e3f860 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55d6c7e3f758 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55d6c7e3f488 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55d6c7e3f898 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55d6c7e3f878 <col:73> 'const int' lvalue Var 0x55d6c7e3f190 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55d6c7e3f900 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55d6c7e3f8d0 <col:16, col:20> '<bound member function type>' .end 0x55d6c7b04470
|     | |     `-DeclRefExpr 0x55d6c7e3f8b0 <col:16> 'const String' lvalue ParmVar 0x55d6c7e3e740 'str' 'const String &'
|     | `-BinaryOperator 0x55d6c7e3f958 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55d6c7ddbb48 <col:13> 'int' lvalue ->status 0x55d6c7dda5e8
|     |   | `-CXXThisExpr 0x55d6c7ddbb38 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55d6c7e3f940 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55d6c7ddbb78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd9240 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55d6c7e3faf0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55d6c7e3fa10 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55d6c7e3f9f8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55d6c7e3f9e0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55d6c7ddbbf8 <col:13> 'int' lvalue ->status 0x55d6c7dda5e8
|     | | |     `-CXXThisExpr 0x55d6c7ddbbe8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55d6c7e3f9c0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55d6c7e3f990 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55d6c7ddbc38 <col:23> 'int' lvalue ->status 0x55d6c7dda5e8
|     | |   |   `-CXXThisExpr 0x55d6c7ddbc28 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55d6c7e3f9a8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55d6c7ddbc68 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd92d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55d6c7e3fad0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55d6c7e3fa80 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55d6c7e3fa50 <col:13, col:18> '<bound member function type>' .error 0x55d6c7c9ed60
|     |   | | `-DeclRefExpr 0x55d6c7e3fa30 <col:13> 'const ArgContext' lvalue ParmVar 0x55d6c7e3e880 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55d6c7e3faa8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55d6c7ddbda0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55d6c7e3fac0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55d6c7ddbe08 <col:20> 'bool' false
|     |-DeclStmt 0x55d6c7e40038 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55d6c7e3ffe0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x55d6c7e3ff90 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x55d6c7e3ff70 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x55d6c7e3ff00 'type'
|     |       `-ElaboratedType 0x55d6c7e3feb0 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x55d6c7e3fe90 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x55d6c7a91478 'unsigned_type'
|     |           `-BuiltinType 0x55d6c77bc5e0 'unsigned char'
|     |-CallExpr 0x55d6c7e40690 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55d6c7e40678 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55d6c7e405f8 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x55d6c7e404d8 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x55d6c7aa83f8 'extract_integer')
|     | |-ImplicitCastExpr 0x55d6c7e406d8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55d6c7e406c0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55d6c7e40098 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55d6c7e3f488 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55d6c7e40168 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55d6c7e40118 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x55d6c7e3e818 'result' 'unsigned char &'
|     `-ReturnStmt 0x55d6c7e406f0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55d6c7ddc1a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55d6c7dda4f8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55d6c7dda1a8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55d6c7dda458 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55d6c7dda258 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55d6c7dda2f8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55d6c7dda370 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55d6c7ddad08 <col:71> 'const ArgContext' lvalue Var 0x55d6c7dcdd18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55d6c7ddc938 <col:83, line:1083:5>
| |   |-DeclStmt 0x55d6c7ddc290 <line:1071:9, col:12>
| |   | `-VarDecl 0x55d6c7ddc228 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55d6c7ddc910 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55d6c7ddc520 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55d6c7ddc3a8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55d6c7ddc370 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55d6c7ddc2b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55d6c7ddc310 <col:31> 'const String' lvalue ParmVar 0x55d6c7dda258 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55d6c7ddc330 <col:36> 'V' lvalue Var 0x55d6c7ddc228 'x' 'V'
| |     | |   `-DeclRefExpr 0x55d6c7ddc350 <col:39> 'const ArgContext' lvalue ParmVar 0x55d6c7dda370 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55d6c7ddc500 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55d6c7ddc4e0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55d6c7ddc4c8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55d6c7ddc4b0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55d6c7ddc3d0 <col:17> 'int' lvalue ->status 0x55d6c7dda5e8
| |     |     |     `-CXXThisExpr 0x55d6c7ddc3c0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55d6c7ddc490 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55d6c7ddc460 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55d6c7ddc410 <col:27> 'int' lvalue ->status 0x55d6c7dda5e8
| |     |       |   `-CXXThisExpr 0x55d6c7ddc400 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55d6c7ddc478 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55d6c7ddc440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd92d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55d6c7ddc550 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55d6c7ddc540 <col:20> 'bool' false
| |     `-IfStmt 0x55d6c7ddc8e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55d6c7ddc5f0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55d6c7ddc5c0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55d6c7ddc570 <col:18> 'int' lvalue ->status 0x55d6c7dda5e8
| |       | |   `-CXXThisExpr 0x55d6c7ddc560 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55d6c7ddc5d8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55d6c7ddc5a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd92d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55d6c7ddc828 <col:42, line:1079:9>
| |       | |-CallExpr 0x55d6c7ddc7d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55d6c7ddc620 <line:1076:13> '<bound member function type>' ->range_error 0x55d6c7ddabf8
| |       | | | `-CXXThisExpr 0x55d6c7ddc610 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55d6c7ddc650 <col:25> 'const ArgContext' lvalue ParmVar 0x55d6c7dda370 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55d6c7ddc730 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55d6c7ddc7a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55d6c7ddc788 <col:43> 'V' lvalue Var 0x55d6c7ddc228 'x' 'V'
| |       | `-ReturnStmt 0x55d6c7ddc818 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55d6c7ddc808 <col:20> 'bool' false
| |       `-CompoundStmt 0x55d6c7ddc8c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55d6c7ddc888 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55d6c7ddc848 <col:13> 'V' lvalue ParmVar 0x55d6c7dda2f8 'result' 'V &'
| |         | `-DeclRefExpr 0x55d6c7ddc868 <col:22> 'V' lvalue Var 0x55d6c7ddc228 'x' 'V'
| |         `-ReturnStmt 0x55d6c7ddc8b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55d6c7ddc8a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55d6c7e3e328 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55d6c7e3e0c0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55d6c7e3e198 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x55d6c7e3e200 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55d6c7e3ef78 <col:83, line:1083:5>
|     |-DeclStmt 0x55d6c7e3e5b0 <line:1071:9, col:12>
|     | `-VarDecl 0x55d6c7e3e548 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x55d6c7e3ef50 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55d6c7e3ebe0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55d6c7e3eb08 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55d6c7e3ead0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55d6c7e3ea88 <col:14> '<bound member function type>' ->parse_saturating 0x55d6c7e3e968
|       | |   | `-CXXThisExpr 0x55d6c7e3ea78 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55d6c7e3e620 <col:31> 'const String' lvalue ParmVar 0x55d6c7e3e0c0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55d6c7e3e640 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x55d6c7e3e548 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x55d6c7e3e660 <col:39> 'const ArgContext' lvalue ParmVar 0x55d6c7e3e200 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55d6c7e3ebc0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55d6c7e3eba0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55d6c7e3eb88 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55d6c7e3eb70 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55d6c7ddc3d0 <col:17> 'int' lvalue ->status 0x55d6c7dda5e8
|       |     |     `-CXXThisExpr 0x55d6c7ddc3c0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55d6c7e3eb50 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55d6c7e3eb20 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55d6c7ddc410 <col:27> 'int' lvalue ->status 0x55d6c7dda5e8
|       |       |   `-CXXThisExpr 0x55d6c7ddc400 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55d6c7e3eb38 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55d6c7ddc440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd92d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55d6c7e3ec00 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55d6c7ddc540 <col:20> 'bool' false
|       `-IfStmt 0x55d6c7e3ef28 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55d6c7e3ec40 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55d6c7e3ec10 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55d6c7ddc570 <col:18> 'int' lvalue ->status 0x55d6c7dda5e8
|         | |   `-CXXThisExpr 0x55d6c7ddc560 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55d6c7e3ec28 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55d6c7ddc5a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d6c7dd92d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55d6c7e3ee60 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55d6c7e3edd0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55d6c7ddc620 <line:1076:13> '<bound member function type>' ->range_error 0x55d6c7ddabf8
|         | | | `-CXXThisExpr 0x55d6c7ddc610 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55d6c7e3ec60 <col:25> 'const ArgContext' lvalue ParmVar 0x55d6c7e3e200 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55d6c7e3ee38 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55d6c7e3ee08 <col:31, col:50> 'const bool' lvalue Var 0x55d6c7a91320 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55d6c7e3eda8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55d6c7e3ed90 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55d6c7e3ed78 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55d6c7e3ed58 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x55d6c7e3e548 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x55d6c7e3ee50 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55d6c7ddc808 <col:20> 'bool' false
|         `-CompoundStmt 0x55d6c7e3ef08 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55d6c7e3eed8 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x55d6c7e3ee80 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x55d6c7e3e198 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x55d6c7e3eec0 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x55d6c7e3eea0 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x55d6c7e3e548 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x55d6c7e3eef8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55d6c7ddc8a8 <col:20> 'bool' true
|-FieldDecl 0x55d6c7dda580 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55d6c7dda5e8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55d6c7dda638 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55d6c7dda8f0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55d6c7dda678 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55d6c7dda6f8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55d6c7dda770 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55d6c7dda7f0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55d6c7ddabf8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55d6c7dda9c0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55d6c7ddaa38 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55d6c7ddaad0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55d6c7ddd198 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55d6c7ddd198
| `-ParmVarDecl 0x55d6c7ddd2a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55d6c7ddd428 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7ddd538 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55d6c7e37f80 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d6c7e37f50 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55d6c7e37f20 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d6c7e37ef0 <col:7> 'IntArg' lvalue ParmVar 0x55d6c7ddd538 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55d6c7dda580 'base' 'int'
| | `-ImplicitCastExpr 0x55d6c7e38078 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d6c7e38048 <col:7> 'int' xvalue .base 0x55d6c7dda580
| |     `-CXXStaticCastExpr 0x55d6c7e38018 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d6c7e37fe8 <col:7> 'IntArg' lvalue ParmVar 0x55d6c7ddd538 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55d6c7dda5e8 'status' 'int'
| | `-ImplicitCastExpr 0x55d6c7e38148 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d6c7e38118 <col:7> 'int' xvalue .status 0x55d6c7dda5e8
| |     `-CXXStaticCastExpr 0x55d6c7e380e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d6c7e380b8 <col:7> 'IntArg' lvalue ParmVar 0x55d6c7ddd538 '' 'IntArg &&'
| `-CompoundStmt 0x55d6c7e381a0 <col:7>
`-CXXDestructorDecl 0x55d6c7e370e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d6c7de0738 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x55d6c7de0998 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d6c7e37008 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d6c7e37580 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55d6c7e37560 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55d6c7e375f0 <col:19>
|-CXXConstructorDecl 0x55d6c7e371e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x55d6c7e371e8
| `-ParmVarDecl 0x55d6c7e372f8 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x55d6c7e37398 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d6c7e374a8 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d6c7e381b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d6c7e37ed0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55d6c7e37ea0 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x55d6c7e37e70 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x55d6c7e374a8 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x55d6c7e38220 <col:19>
`-CXXDestructorDecl 0x55d6c7e37630 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
