
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e433519908 prev 0x55e4335110a8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e433519a00 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e433519a90 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e433519b08 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e433519bc8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e433519c90 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e433519e08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e433519d40 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e433519eb0 <col:24>
| `-OptimizeNoneAttr 0x55e433519f08 <col:34>
|-CXXMethodDecl 0x55e433519f50 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e43351a208 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e43351a000 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e43351a078 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e43351a0f8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e43351a2c0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e43351a2f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e43351a360 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e43351a3e8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e43351a708 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e43351a4a0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e43351a518 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e43351a590 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e43351a610 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e43351a820 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e433522198 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e433522198
| `-ParmVarDecl 0x55e4335222a8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e433522348 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e433522348
| `-ParmVarDecl 0x55e433522458 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e4335f2b90 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e43350c920 prev 0x55e43350c6a0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e43350ca18 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e43350caa8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e43350cb08 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e43350cbf8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e43350ccf8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e43350cec8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e43350cd78 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e43350cdf0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e43350d058 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e43350cf90 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e43350d100 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e43350d238 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e43350d170 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e43350d3d8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e43350d318 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e43350d578 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e43350d4b8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e43350d620 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e43350d720 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e43350d800 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e43350d700 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e43350d6e0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e43350d7b0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e43350d818 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e43350d790 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e43350d770 <col:44> 'int' 2
|-CXXMethodDecl 0x55e43350d960 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e43350d848 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e43350d8c8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e43350dab8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e43350da28 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e43350dcf8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e43350db78 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e43350dbf0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e43350dda8 <col:20>
| `-OptimizeNoneAttr 0x55e43350de00 <col:30>
|-CXXMethodDecl 0x55e43350df08 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e43350de40 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e43350dfb0 <col:20>
| `-OptimizeNoneAttr 0x55e43350e008 <col:30>
|-CXXMethodDecl 0x55e43350e058 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e43350e120 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e43350e238 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e43350e2c0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e43350e348 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e43350e3d0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55e43350e458 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e43350e4e8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e43350e5a8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e43350e630 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e43350e6b8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55e43350e740 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e43350e7c8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e43350e850 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e43350e8e0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e43350e9a0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e43350ea30 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e43350eb80 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e43350eae8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e43350ed10 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e43350ec40 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e43350efc0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e43350edc8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e43350ee48 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e43350eec8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e43350f078 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e43350f180 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e43350f410 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e43350f160 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e43350f140 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e43350f210 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e43350f428 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e43350f1f0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e43350f1d0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e43350f2a0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e43350f440 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e43350f280 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e43350f260 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e43350f330 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e43350f458 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e43350f310 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e43350f2f0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e43350f3c0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e43350f470 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e43350f3a0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e43350f380 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e43350f4b0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e43350f8f0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e43350f760 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e43350f7d8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e43350f9c0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e43350fb40 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e43350fa70 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e43350fd48 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e43350fbf8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e43350fc70 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e43350fe48 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e43350fee8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e43350ffb0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e433510040 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e433510270 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e433510020 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e433510000 <col:36> 'int' EnumConstant 0x55e43350ffb0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e433510090 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e4335100e0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e433510130 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e433510180 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e4335101d0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e433510220 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e433510358 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e433510298 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e433510420 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e4335104e0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e4335105a0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e433510660 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e433510778 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e433510840 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e4335109c0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e4335108f0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e433510ae8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e433510ce8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e433510b98 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e433510c18 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e43351e638 <col:54, line:127:5>
|   |-ParenExpr 0x55e43351e4e8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e43351e4b8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e43351e1a8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e43351e180 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e43351e168 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e43351e150 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e43351e120 <col:31> 'Router *' lvalue ->_router 0x55e43351c000
|   |   |         `-CXXThisExpr 0x55e43351e110 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e43351e208 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e43351e1e8 <col:48> 'int' 0
|   |   `-CallExpr 0x55e43351e418 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e43351e400 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e43351e3e0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e43351e458 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e43351e278 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e43351e470 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e43351e298 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e43351e488 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e43351e2d0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e43351e4a0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e43351e3c8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e43351e3b0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e43351e368 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e43351e580 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e43351e518 <col:9> 'Router *' lvalue ->_router 0x55e43351c000
|   | | `-CXXThisExpr 0x55e43351e508 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e43351e568 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e43351e548 <col:19> 'Router *' lvalue ParmVar 0x55e433510b98 'r' 'Router *'
|   `-BinaryOperator 0x55e43351e618 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e43351e5b0 <col:9> 'int' lvalue ->_eindex 0x55e43351c068
|     | `-CXXThisExpr 0x55e43351e5a0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e43351e600 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e43351e5e0 <col:19> 'int' lvalue ParmVar 0x55e433510c18 'eindex' 'int'
|-CXXMethodDecl 0x55e433510e70 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e433510da8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e433510f40 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e433511008 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e4335110a8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e4335112f8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e433511170 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e4335111f0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e4335113a8 <col:20>
| `-OptimizeNoneAttr 0x55e433511400 <col:30>
|-CXXMethodDecl 0x55e433511508 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e433511440 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e4335115b0 <col:20>
| `-OptimizeNoneAttr 0x55e433511608 <col:30>
|-CXXMethodDecl 0x55e4335116d8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e433511648 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e433511780 <col:20>
| `-OptimizeNoneAttr 0x55e4335117d8 <col:30>
|-CXXMethodDecl 0x55e433511968 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e433511810 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e433511890 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e433511af8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e433511a30 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e433511c48 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e433511bb8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e433511d98 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e433511d08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e433511ee8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e433511e58 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e4335121a8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e433511fa0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e433512020 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e4335120c8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e433512280 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e433512340 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e433512610 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e4335124c0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e433512538 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e433512738 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e433512910 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e4335127f0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e433512870 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e433512af8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e4335129d8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e433512a58 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e433512e68 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e433512bb8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e433512c30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e433512cb0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e43351dc20 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43351dc00 <col:106> 'int' 0
| `-ParmVarDecl 0x55e433512d28 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e43351dc58 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e43351dc38 <col:126> 'int' 0
|-CXXMethodDecl 0x55e433513208 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e433512f38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e433512fd0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e433513050 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e4335130c8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e43351dc90 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e43351dc70 <col:114> 'int' 0
|-CXXMethodDecl 0x55e433513598 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e4335132e0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e433513358 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e4335133d8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e43351dca8 <col:96> 'int' 0
| `-ParmVarDecl 0x55e433513450 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e43351dce8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e43351dcc8 <col:116> 'int' 0
|-CXXMethodDecl 0x55e433513918 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e433513668 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e4335136e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433513760 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e43351dd20 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43351dd00 <col:109> 'int' 0
| `-ParmVarDecl 0x55e4335137d8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e43351dd58 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e43351dd38 <col:129> 'int' 0
|-CXXMethodDecl 0x55e433513c98 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e4335139e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e433513a60 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433513ae0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e433513b58 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e43351dd90 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e43351dd70 <col:117> 'int' 0
|-CXXMethodDecl 0x55e433514028 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e433513d70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433513de8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433513e68 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e43351dda8 <col:99> 'int' 0
| `-ParmVarDecl 0x55e433513ee0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e43351dde8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e43351ddc8 <col:119> 'int' 0
|-CXXMethodDecl 0x55e433514448 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e4335140f8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e433514178 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e4335141f0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433514270 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e43351de20 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43351de00 <col:108> 'int' 0
| `-ParmVarDecl 0x55e4335142f0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e43351de58 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e43351de38 <col:141> 'int' 0
|-CXXMethodDecl 0x55e433514868 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e433514520 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e4335145a0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e433514618 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433514698 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e433514718 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e43351de70 <col:121> 'int' 0
|-CXXMethodDecl 0x55e433514c98 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e433514948 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e4335149c8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e433514a40 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433514ac0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e43351de90 <col:98> 'int' 0
| `-ParmVarDecl 0x55e433514b40 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e43351deb0 <col:123> 'int' 0
|-CXXMethodDecl 0x55e433514f60 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e433514d70 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e433514df0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e433514e70 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e43351ded0 <col:80> 'int' 0
|-EnumDecl 0x55e433515018 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e433515120 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e4335153b0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e433515100 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e4335150e0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e4335151b0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e4335153c8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e433515190 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e433515170 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e433515240 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e4335153e0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e433515220 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e433515200 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e4335152d0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e4335153f8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335152b0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e433515290 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e433515360 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e433515410 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e433515340 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e433515320 <col:34> 'int' 6
|-CXXMethodDecl 0x55e4335156c8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e433515438 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e4335154d8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e433515558 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e4335155d0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e43351df88 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e43351df70 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e43351df58 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e43351df38 <col:98, col:105> 'String' (CXXTemporary 0x55e43351df38)
|           `-CXXTemporaryObjectExpr 0x55e43351df00 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e433515968 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e433515798 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e433515810 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e433515888 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e43351e038 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e43351e020 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e43351e008 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e43351dfe8 <col:94, col:101> 'String' (CXXTemporary 0x55e43351dfe8)
| |         `-CXXTemporaryObjectExpr 0x55e43351dfb0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e43351e820 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e43351e798 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e43351e768 <col:9> '<bound member function type>' ->add_task_handlers 0x55e4335156c8
|     | `-CXXThisExpr 0x55e43351e758 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e43351e7d8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e43351e6d8 <col:27> 'Task *' lvalue ParmVar 0x55e433515798 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e43351e7f0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e43351e6f8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e433515810 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e43351e808 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e43351e718 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e433515360 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e43351e738 <col:62> 'const String' lvalue ParmVar 0x55e433515888 'prefix' 'const String &'
|-CXXMethodDecl 0x55e433515b78 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e433515a30 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e433515aa8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e43351e0e8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e43351e0d0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e43351e0b8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e43351e098 <col:70, col:77> 'String' (CXXTemporary 0x55e43351e098)
| |         `-CXXTemporaryObjectExpr 0x55e43351e060 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e43351e9f8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e43351e970 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e43351e940 <col:9> '<bound member function type>' ->add_task_handlers 0x55e4335156c8
|     | `-CXXThisExpr 0x55e43351e930 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e43351e9b0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e43351e8b0 <col:27> 'Task *' lvalue ParmVar 0x55e433515a30 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e43351e9c8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e43351e8d0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e43351e9e0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e43351e8f0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e433515360 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e43351e910 <col:57> 'const String' lvalue ParmVar 0x55e433515aa8 'prefix' 'const String &'
|-CXXMethodDecl 0x55e433515e58 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e433515c40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433515cc0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433515d38 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e433516108 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e433515f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433515fa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433516028 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e4335163f8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e4335161d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433516258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e4335162d0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e4335166a8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e4335164c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433516548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e4335165c8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e433516958 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e433516778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e4335167f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433516878 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e433516c08 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e433516a28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433516aa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433516b20 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e433516eb8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e433516cd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433516d58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433516dd8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e4335171c8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e433516fe0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433517060 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e4335170e0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e4335174a8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e433517298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433517318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e4335173c0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e433517788 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e433517578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e4335175f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e4335176a0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e4335179f0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e433517858 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e4335178d8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e433517950 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e433517c98 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e433517ac0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e433517b40 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e433517bb8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e433517f48 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e433517d68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433517de8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433517e68 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e4335181f8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e433518018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433518098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433518110 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e4335184a8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e4335182c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e433518348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e4335183c0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e433518778 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e433518578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e4335185f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e433518698 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e433518aa8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e433518848 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e4335188c8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e433518940 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e4335189b8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e43351e100 <col:93> 'bool' false
|-CXXMethodDecl 0x55e433518c90 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e433518b78 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e433518bf8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e433518e68 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e433518d50 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e433518dd0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e433519148 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e433518f28 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e433518fa0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e433519020 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e433519098 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e433519438 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e433519218 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e433519290 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e433519310 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e433519388 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e433519670 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e433519510 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e433519590 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e433519858 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e433519738 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e4335197b8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e433519908 prev 0x55e4335110a8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e433519a00 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e433519a90 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e433519b08 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e433519bc8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e433519c90 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e433519e08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e433519d40 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e433519eb0 <col:24>
| | `-OptimizeNoneAttr 0x55e433519f08 <col:34>
| |-CXXMethodDecl 0x55e433519f50 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e43351a208 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e43351a000 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e43351a078 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e43351a0f8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e43351a2c0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e43351a2f8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e43351a360 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e43351a3e8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e43351a708 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e43351a4a0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e43351a518 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e43351a590 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e43351a610 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e43351a820 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e433522198 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e433522198
| | `-ParmVarDecl 0x55e4335222a8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e433522348 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e433522348
| | `-ParmVarDecl 0x55e433522458 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e4335f2b90 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e43351a898 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e43351a938 <col:38> "" ""
|-CXXMethodDecl 0x55e43351a9c8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e43351aa68 <col:44> "" ""
|-AccessSpecDecl 0x55e43351aad8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e43351ab00 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e43351ac00 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e43351ac50 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e43351abe0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e43351abc0 <col:27> 'int' 4
|-FieldDecl 0x55e43351ad08 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e43351aeb8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e43351af70 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e43351c000 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e43351c068 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e43351c1b8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e43351c0f8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e43351c368 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e43351c278 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e43351c548 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e43351c428 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e43351c4a8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e43351c7f0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e43351c610 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e43351c690 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e43351c708 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e43351c8a8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e43351c970 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e43351c9c0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e43351ca10 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e43351cbf0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e43351caa0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e43351cb18 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e43351ce98 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e43351ccb8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e43351cd38 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e43351cdb0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e43351d0b8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e43351cf68 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e43351cfe8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e43351d3f0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e43351d178 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e43351d1f8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e43351d270 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e43351d2f0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e43351d5d8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e43351d4c0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e43351d540 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e43351d728 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e43351d698 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e43351daa8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e43351d7e8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e43351d868 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e43351d8e0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e43351d960 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e43351dbc0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetPacketType
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class Packet::PacketType _ptype
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e433525308 <../elements/standard/setpackettype.hh:24:1, line:43:1> line:24:7 class SetPacketType definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e433525468 <col:1, col:7> col:7 implicit referenced class SetPacketType
|-AccessSpecDecl 0x55e4335254f8 <col:40, col:46> col:40 public
|-CXXConstructorDecl 0x55e433525580 <line:26:5, col:19> col:5 SetPacketType 'void ()'
|-CXXMethodDecl 0x55e433525680 <line:28:5, col:62> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55e43350e058 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e4335268c0 <col:36, col:62>
|   `-ReturnStmt 0x55e4335268b0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e433526898 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e433526870 <col:45> 'const char [14]' lvalue "SetPacketType"
|-CXXMethodDecl 0x55e433525748 <line:29:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55e43350e120 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e433526920 <col:36, col:56>
|   `-ReturnStmt 0x55e433526910 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e4335268f8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e4335268d8 <col:45> 'const char []' lvalue Var 0x55e43350e3d0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55e4335258c0 <line:31:5, col:41> col:16 parse_type 'int (const String &)' static
| `-ParmVarDecl 0x55e4335257f8 <col:27, col:40> col:41 'const String &'
|-CXXMethodDecl 0x55e433525a50 <line:32:5, col:40> col:24 unparse_type 'const char *(int)' static
| `-ParmVarDecl 0x55e433525980 <col:37> col:40 'int'
|-CXXMethodDecl 0x55e433525d30 <line:34:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e43350f8f0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e433525be0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55e433525c58 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55e433525e00 <line:35:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55e433512340 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55e433526958 <col:39, col:54>
|   `-ReturnStmt 0x55e433526948 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55e433526938 <col:48> 'bool' true
|-CXXMethodDecl 0x55e433525f40 <line:37:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55e43350d238 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55e433525eb0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55e433525fe8 <line:39:3, col:12> col:3 protected
|-FieldDecl 0x55e4335260a0 <line:41:5, col:24> col:24 _ptype 'Packet::PacketType':'Packet::PacketType'
|-CXXConstructorDecl 0x55e433526118 <line:24:7> col:7 implicit SetPacketType 'void (const SetPacketType &)' inline default_delete noexcept-unevaluated 0x55e433526118
| `-ParmVarDecl 0x55e433526228 <col:7> col:7 'const SetPacketType &'
|-CXXConstructorDecl 0x55e4335262c8 <col:7> col:7 implicit SetPacketType 'void (SetPacketType &&)' inline default_delete noexcept-unevaluated 0x55e4335262c8
| `-ParmVarDecl 0x55e4335263d8 <col:7> col:7 'SetPacketType &&'
|-CXXMethodDecl 0x55e433526478 <col:7> col:7 implicit operator= 'SetPacketType &(const SetPacketType &)' inline default_delete noexcept-unevaluated 0x55e433526478
| `-ParmVarDecl 0x55e433526588 <col:7> col:7 'const SetPacketType &'
|-CXXMethodDecl 0x55e4335265f8 <col:7> col:7 implicit operator= 'SetPacketType &(SetPacketType &&)' inline default_delete noexcept-unevaluated 0x55e4335265f8
| `-ParmVarDecl 0x55e433526708 <col:7> col:7 'SetPacketType &&'
`-CXXDestructorDecl 0x55e433526790 <col:7> col:7 implicit ~SetPacketType 'void ()' inline default noexcept-unevaluated 0x55e433526790
  `-Overrides: [ 0x55e43350cbf8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.SetPacketType = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.SetPacketType = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4332e07c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e4332e08d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e4332e0978 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e4332e09d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e4332e0a38 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e4332e0ae8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4332e0df0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e4332e0f08 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e4332e0fb0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e4332e1018 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e4332e10a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e4332e7140 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e4332e7578 <col:12>
|-CXXConstructorDecl 0x55e4332e7248 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e4332e7358 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e4332e0fb0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e4332e9b00 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e4332e9ad0 <col:12> 'const char *const' lvalue .data 0x55e4332e0fb0
| |     `-DeclRefExpr 0x55e4332e9ab0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332e7358 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e4332e1018 'length' 'int'
| | `-ImplicitCastExpr 0x55e4332e9b90 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e4332e9b60 <col:12> 'const int' lvalue .length 0x55e4332e1018
| |     `-DeclRefExpr 0x55e4332e9b40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332e7358 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e4332e10a8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e4332e9c20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e4332e9bf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e4332e10a8
| |     `-DeclRefExpr 0x55e4332e9bd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332e7358 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e4332e9c78 <col:12>
|-CXXConstructorDecl 0x55e4332e73f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e4332e73f8
| `-ParmVarDecl 0x55e4332e7508 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e4332eca60 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e4332f8478 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e4332f8588 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e4332f8aa0 <col:12>
|   |-BinaryOperator 0x55e4332f88b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e4332f8870 <col:12> 'const char *' lvalue ->data 0x55e4332e0fb0
|   | | `-CXXThisExpr 0x55e4332f8860 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e4332f88a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e4332f8830 <col:12> 'const char *const' lvalue .data 0x55e4332e0fb0
|   |     `-DeclRefExpr 0x55e4332f8810 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332f8588 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e4332f8980 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e4332f8938 <col:12> 'int' lvalue ->length 0x55e4332e1018
|   | | `-CXXThisExpr 0x55e4332f8928 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e4332f8968 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e4332f88f8 <col:12> 'const int' lvalue .length 0x55e4332e1018
|   |     `-DeclRefExpr 0x55e4332f88d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332f8588 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e4332f8a48 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e4332f8a00 <col:12> 'String::memo_t *' lvalue ->memo 0x55e4332e10a8
|   | | `-CXXThisExpr 0x55e4332f89f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e4332f8a30 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e4332f89c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e4332e10a8
|   |     `-DeclRefExpr 0x55e4332f89a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332f8588 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e4332f8a90 <col:12>
|     `-UnaryOperator 0x55e4332f8a78 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4332f8a68 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e4332f85f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e4332f85f8
  `-ParmVarDecl 0x55e4332f8708 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4332d7d30 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e4332d7e48 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e4332d7ed8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e4332d7f18 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e432fabdc0 'const char *'
|   `-QualType 0x55e432fab311 'const char' const
|     `-BuiltinType 0x55e432fab310 'char'
|-TypedefDecl 0x55e4332d7fa0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e4332d7f70 'String::const_iterator' sugar
|   |-Typedef 0x55e4332d7f18 'const_iterator'
|   `-PointerType 0x55e432fabdc0 'const char *'
|     `-QualType 0x55e432fab311 'const char' const
|       `-BuiltinType 0x55e432fab310 'char'
|-TypedefDecl 0x55e4332d8110 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e4332d8080 'int (String::*)() const'
|   |-RecordType 0x55e4332d7dc0 'String'
|   | `-CXXRecord 0x55e4332d7d30 'String'
|   `-ParenType 0x55e4332d8020 'int () const' sugar
|     `-FunctionProtoType 0x55e4332abbb0 'int () const' const cdecl
|       `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4332d8178 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e433100790 'int64_t' sugar
|   |-Typedef 0x55e4330142d0 'int64_t'
|   `-TypedefType 0x55e432fed4d0 '__int64_t' sugar
|     |-Typedef 0x55e432fed0a8 '__int64_t'
|     `-BuiltinType 0x55e432fab390 'long'
|-TypedefDecl 0x55e4332d81e0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e4331006b0 'uint64_t' sugar
|   |-Typedef 0x55e433014470 'uint64_t'
|   `-TypedefType 0x55e432fed560 '__uint64_t' sugar
|     |-Typedef 0x55e432fed118 '__uint64_t'
|     `-BuiltinType 0x55e432fab430 'unsigned long'
|-TypedefDecl 0x55e4332d8270 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e4332d8240 'String::intmax_t' sugar
|   |-Typedef 0x55e4332d8178 'intmax_t'
|   `-TypedefType 0x55e433100790 'int64_t' sugar
|     |-Typedef 0x55e4330142d0 'int64_t'
|     `-TypedefType 0x55e432fed4d0 '__int64_t' sugar
|       |-Typedef 0x55e432fed0a8 '__int64_t'
|       `-BuiltinType 0x55e432fab390 'long'
|-TypedefDecl 0x55e4332d8300 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e4332d82d0 'String::uintmax_t' sugar
|   |-Typedef 0x55e4332d81e0 'uintmax_t'
|   `-TypedefType 0x55e4331006b0 'uint64_t' sugar
|     |-Typedef 0x55e433014470 'uint64_t'
|     `-TypedefType 0x55e432fed560 '__uint64_t' sugar
|       |-Typedef 0x55e432fed118 '__uint64_t'
|       `-BuiltinType 0x55e432fab430 'unsigned long'
|-CXXConstructorDecl 0x55e4332d83c0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e4332d8568 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e4332d84a8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e4332d8718 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e4332d8658 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e4332d8870 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e4332d87e0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e4332d8a88 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e4332d8938 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e4332d89b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e4332d8ca8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e4332d8b58 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e4332d8bd8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e4332d8ec8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e4332d8d78 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e4332d8df8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e4332d90e8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e4332d8f98 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e4332d9018 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e4332d9278 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e4332d91b0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e4332d93f8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e4332d9338 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e4332d9588 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e4332d94c0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e4332d96e0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e4332d9650 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e4332d9838 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e4332d97a8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e4332d9990 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e4332d9900 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e4332d9b18 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e4332d9a58 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e4332d9ca8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e4332d9be0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e4332d9e38 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e4332d9d70 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e4332d9fc8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e4332d9f00 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e4332da0c0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e4332da1e8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e4332da368 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e4332da2a0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e4332da4b8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e4332da428 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e4332da570 <col:63> "" ""
|-CXXMethodDecl 0x55e4332da6b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e4332da5f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e4332da8c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e4332da778 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e4332da7f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e4332daae8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e4332da990 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e4332daa10 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e4332dadc8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e4332daba8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e4332dac28 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e4332e6c10 <col:55> 'int' 10
| `-ParmVarDecl 0x55e4332daca0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e4332e6c30 <col:76> 'bool' true
|-CXXMethodDecl 0x55e4332db0a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e4332dae90 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e4332daf10 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e4332e6c40 <col:56> 'int' 10
| `-ParmVarDecl 0x55e4332daf88 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e4332e6c60 <col:77> 'bool' true
|-CXXMethodDecl 0x55e4332db1b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e4332db278 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e4332db340 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e4332db3e0 <col:20>
| `-OptimizeNoneAttr 0x55e4332db438 <col:30>
|-CXXConversionDecl 0x55e4332db528 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e4332db5f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e4332db6b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e4332db7a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e4332db868 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e4332db9e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e4332db920 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e4332dbb38 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e4332dbaa8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e4332dbc28 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e4332dbce8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e4332dbf38 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e4332dbda0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e4332dbe20 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e4332dc198 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e4332dc000 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e4332dc080 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e4332dc268 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4332dc478 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e4332dc320 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e4332dc3a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e4332dc698 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e4332dc540 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e4332dc5c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e4332dc828 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e4332dc760 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e4332dc918 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e4332dca88 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e4332dc9c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e4332dcc98 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e4332dcb48 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e4332dcbc8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e4332dceb0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e4332dcd58 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e4332dcdd0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e4332dd040 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e4332dcf70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e4332dd260 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e4332dd100 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e4332dd180 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e4332dd3b0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e4332dd320 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e4332dd588 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e4332dd470 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e4332dd4f0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e4332dd6d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e4332dd648 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e4332dd8f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e4332dd790 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e4332dd810 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e4332e6c70 <col:39> 'int' 0
|-CXXMethodDecl 0x55e4332ddb10 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e4332dd9b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e4332dda30 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e4332e6c90 <col:48> 'int' 0
|-CXXMethodDecl 0x55e4332ddcf0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e4332ddbd0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e4332ddc50 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e4332e6cb0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e4332dddc0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e4332dde80 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e4332ddf40 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e4332de000 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e4332de0c0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e4332de268 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e4332de170 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e4332de3e8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e4332de320 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e4332de5c0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e4332de4a8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e4332de738 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e4332de678 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e4332de880 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e4332de7f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e4332de9d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e4332de940 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e4332deba8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e4332dea90 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e4332deb10 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e4332ded88 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e4332dec70 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e4332decf0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e4332deed8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e4332dee48 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e4332df0e8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e4332def98 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e4332df018 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e4332df248 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e4332df1b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e4332df3a0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e4332df308 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e4332df448 <col:57> "" ""
|-CXXMethodDecl 0x55e4332df558 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e4332df4c8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e4332df6a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e4332df618 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e4332df828 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e4332df760 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e4332df8f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e4332df9b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e4332dfa70 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e4332dfb10 <col:49> "" ""
|-CXXMethodDecl 0x55e4332dfba0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e4332dfc60 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e4332dfd50 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e4332dfe18 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e4332dfed8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e4332dff98 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e4332e0090 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e4332e0158 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e4332e0220 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e4332e03f8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e4332e02d8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e4332e0358 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e4332e0620 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e4332e04c0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e4332e0540 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e4332e0730 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e4332e0798 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e4332e07c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e4332e08d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e4332e0978 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e4332e09d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e4332e0a38 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e4332e0ae8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e4332e0b50 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e4332e0d88 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e4332e0dd8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4332e0d68 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e4332e0c78 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e4332e0c20 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e4332e0c60 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e4332e0c40 <col:32> 'int' 8
|-CXXRecordDecl 0x55e4332e0df0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e4332e0f08 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e4332e0fb0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e4332e1018 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e4332e10a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e4332e7140 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e4332e7578 <col:12>
| |-CXXConstructorDecl 0x55e4332e7248 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e4332e7358 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e4332e0fb0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e4332e9b00 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e4332e9ad0 <col:12> 'const char *const' lvalue .data 0x55e4332e0fb0
| | |     `-DeclRefExpr 0x55e4332e9ab0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332e7358 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e4332e1018 'length' 'int'
| | | `-ImplicitCastExpr 0x55e4332e9b90 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e4332e9b60 <col:12> 'const int' lvalue .length 0x55e4332e1018
| | |     `-DeclRefExpr 0x55e4332e9b40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332e7358 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e4332e10a8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e4332e9c20 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e4332e9bf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e4332e10a8
| | |     `-DeclRefExpr 0x55e4332e9bd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332e7358 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e4332e9c78 <col:12>
| |-CXXConstructorDecl 0x55e4332e73f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e4332e73f8
| | `-ParmVarDecl 0x55e4332e7508 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e4332eca60 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e4332f8478 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e4332f8588 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e4332f8aa0 <col:12>
| |   |-BinaryOperator 0x55e4332f88b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e4332f8870 <col:12> 'const char *' lvalue ->data 0x55e4332e0fb0
| |   | | `-CXXThisExpr 0x55e4332f8860 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e4332f88a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e4332f8830 <col:12> 'const char *const' lvalue .data 0x55e4332e0fb0
| |   |     `-DeclRefExpr 0x55e4332f8810 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332f8588 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e4332f8980 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e4332f8938 <col:12> 'int' lvalue ->length 0x55e4332e1018
| |   | | `-CXXThisExpr 0x55e4332f8928 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e4332f8968 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e4332f88f8 <col:12> 'const int' lvalue .length 0x55e4332e1018
| |   |     `-DeclRefExpr 0x55e4332f88d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332f8588 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e4332f8a48 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e4332f8a00 <col:12> 'String::memo_t *' lvalue ->memo 0x55e4332e10a8
| |   | | `-CXXThisExpr 0x55e4332f89f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e4332f8a30 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e4332f89c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e4332e10a8
| |   |     `-DeclRefExpr 0x55e4332f89a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e4332f8588 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e4332f8a90 <col:12>
| |     `-UnaryOperator 0x55e4332f8a78 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e4332f8a68 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e4332f85f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e4332f85f8
|   `-ParmVarDecl 0x55e4332f8708 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e4332e1120 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e4332e1368 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e4332e1188 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e4332e1208 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e4332e1280 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e4332e7100 <col:79, line:261:5>
|   |-BinaryOperator 0x55e4332e6d78 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e4332e6d10 <col:2, col:5> 'const char *' lvalue .data 0x55e4332e0fb0
|   | | `-MemberExpr 0x55e4332e6ce0 <col:2> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|   | |   `-CXXThisExpr 0x55e4332e6cd0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e4332e6d60 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e4332e6d40 <col:12> 'const char *' lvalue ParmVar 0x55e4332e1188 'data' 'const char *'
|   |-BinaryOperator 0x55e4332e6e40 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e4332e6dd8 <col:2, col:5> 'int' lvalue .length 0x55e4332e1018
|   | | `-MemberExpr 0x55e4332e6da8 <col:2> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|   | |   `-CXXThisExpr 0x55e4332e6d98 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e4332e6e28 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e4332e6e08 <col:14> 'int' lvalue ParmVar 0x55e4332e1208 'length' 'int'
|   `-IfStmt 0x55e4332e70e8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e4332e6f60 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e4332e6f48 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e4332e6f28 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e4332e6f08 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e4332e6ea0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|     |       | `-MemberExpr 0x55e4332e6e70 <col:7> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|     |       |   `-CXXThisExpr 0x55e4332e6e60 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e4332e6ef0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e4332e6ed0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e4332e1280 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e4332e70c0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e4332e70a8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e4332e6fb0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e4332cfd98 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e4332e7018 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e4332e0978
|         `-ImplicitCastExpr 0x55e4332e7000 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e4332e6fe0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e4332e1280 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e4332e1618 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e4332e1438 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e4332e14b8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e4332e1530 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e4332e1120 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e4332e7588 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e4332e7718 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e4332e7680 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e4332e75f0 <col:2> '<bound member function type>' ->assign_memo 0x55e4332e1368
|     | `-ImplicitCastExpr 0x55e4332e76b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e4332e75e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e4332e76d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e4332e7620 <col:14> 'const char *' lvalue ParmVar 0x55e4332e1438 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e4332e76e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e4332e7640 <col:20> 'int' lvalue ParmVar 0x55e4332e14b8 'length' 'int'
|     `-ImplicitCastExpr 0x55e4332e7700 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e4332e7660 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e4332e1530 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e4332e17a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e4332e16e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e4332e7970 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e4332e78f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e4332e7740 <col:2> '<bound member function type>' ->assign_memo 0x55e4332e1368
|     | `-CXXThisExpr 0x55e4332e7730 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e4332e7928 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e4332e77c0 <col:14, col:19> 'const char *' lvalue .data 0x55e4332e0fb0
|     |   `-MemberExpr 0x55e4332e7790 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e4332e1120
|     |     `-DeclRefExpr 0x55e4332e7770 <col:14> 'const String' lvalue ParmVar 0x55e4332e16e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e4332e7940 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e4332e7840 <col:25, col:30> 'int' lvalue .length 0x55e4332e1018
|     |   `-MemberExpr 0x55e4332e7810 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e4332e1120
|     |     `-DeclRefExpr 0x55e4332e77f0 <col:25> 'const String' lvalue ParmVar 0x55e4332e16e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e4332e7958 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e4332e78c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|         `-MemberExpr 0x55e4332e7890 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e4332e1120
|           `-DeclRefExpr 0x55e4332e7870 <col:38> 'const String' lvalue ParmVar 0x55e4332e16e8 'x' 'const String &'
|-CXXMethodDecl 0x55e4332e1870 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e4332e8330 <col:31, line:278:5>
|   `-IfStmt 0x55e4332e8318 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e4332e7a10 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e4332e79f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e4332e79c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|     |     `-MemberExpr 0x55e4332e7998 <col:6> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|     |       `-CXXThisExpr 0x55e4332e7988 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e4332e82f0 <col:15, line:277:2>
|       |-ParenExpr 0x55e4332e7ec0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e4332e7e90 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e4332e7b20 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e4332e7b08 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e4332e7af0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e4332e7ab0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e4332e0978
|       |   |       `-ImplicitCastExpr 0x55e4332e7a98 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e4332e7a68 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|       |   |           `-MemberExpr 0x55e4332e7a38 <col:27> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|       |   |             `-CXXThisExpr 0x55e4332e7a28 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e4332e7b80 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e4332e7b60 <col:54> 'int' 0
|       |   `-CallExpr 0x55e4332e7df0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e4332e7dd8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e4332e7d58 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e4332e7e30 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e4332e7c68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e4332e7e48 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e4332e7c98 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e4332e7e60 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e4332e7cd0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e4332e7e78 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e4332e7d40 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e4332e7d28 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e4332e7cf0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e4332e8210 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e4332e80d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e4332e80b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e4332e8030 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e4332d11e0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e4332e8000 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e4332e0978
|       | |   `-ImplicitCastExpr 0x55e4332e7fe8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e4332e7fb8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|       | |       `-MemberExpr 0x55e4332e7f88 <col:40> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|       | |         `-CXXThisExpr 0x55e4332e7f78 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e4332e81d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e4332e81b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e4332e80f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e4332e6050 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e4332e81f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e4332e8158 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|       |       `-MemberExpr 0x55e4332e8128 <col:15> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|       |         `-CXXThisExpr 0x55e4332e8118 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e4332e82d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e4332e8268 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e4332e10a8
|         | `-MemberExpr 0x55e4332e8238 <col:6> 'String::rep_t' lvalue ->_r 0x55e4332e1120
|         |   `-CXXThisExpr 0x55e4332e8228 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e4332e82b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e4332e8298 <col:16> 'int' 0
|-CXXMethodDecl 0x55e4332e1b08 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e4332e1928 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e4332e19a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e4332e1a20 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e4332e1be0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e4332e1e30 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e4332e1c98 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e4332e1d18 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e4332e1d90 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e4332e2018 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e4332e1f00 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e4332e1f80 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e4332e2118 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e4332e8408 <col:41, line:286:5>
|   `-ReturnStmt 0x55e4332e83f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e4332e83c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e4332e8390 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e4332e8378 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e4332e8358 <col:46> 'int' 1
|-CXXMethodDecl 0x55e4332e23b8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e4332e21d0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e4332e2250 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e4332e22d0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e4332e6050 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e4332e2480 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e4332e6120 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e4332e62f0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e4332e61d8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e4332e6258 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e4332e63b0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e4332e6478 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e4332e6578 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e4332e65f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e4332e6668 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e4332e66d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e4332e67d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e4332e6820 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4332e67b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e4332e6790 <col:22> 'int' 14
|-CXXMethodDecl 0x55e4332e6a38 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e4332e6850 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e4332e68d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e4332e6950 <col:43> col:46 'int'
|-FriendDecl 0x55e4332e6b40 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e4332e6bd0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e4333a8c10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e4333a8de8 prev 0x55e4333a8c10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e4333a8e78 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e4333a8ea0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4333aa800 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e4333aa7b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e4333aa790 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e4333a90b8 'type'
|     `-SubstTemplateTypeParmType 0x55e4333a9080 'String' sugar
|       |-TemplateTypeParmType 0x55e43329b5d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e43329b580 'T'
|       `-RecordType 0x55e4332d7dc0 'String'
|         `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e4333aa8b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e4333aa880 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e4333aa860 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e4333aa800 'type'
|     `-ElaboratedType 0x55e4333aa7b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e4333aa790 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e4333a90b8 'type'
|         `-SubstTemplateTypeParmType 0x55e4333a9080 'String' sugar
|           |-TemplateTypeParmType 0x55e43329b5d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e43329b580 'T'
|           `-RecordType 0x55e4332d7dc0 'String'
|             `-CXXRecord 0x55e4332d7d30 'String'
|-CXXMethodDecl 0x55e4333aaa38 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e4333aa948 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e4333aab28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e4333aac08 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e4333aac08
|-CXXMethodDecl 0x55e4333aaed8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e4333aade0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e4333ab118 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e4333aaf90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e4333ab008 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e4335552b0 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e4335551a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e433555218 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e433555408 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e4335554d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e433555728 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e433555598 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e433555610 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e433555988 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e4335557f8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e433555870 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e433555b48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e433555a58 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e433555d08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e433555c10 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e433555dc0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e433555e70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e4335560a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e433555f20 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e433555f98 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e433556348 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e433556250 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e433556410 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e433556460 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e4335564b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e43350f560 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e4333a7678 prev 0x55e43350f560 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e4333a8b80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e4333a8b30 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e4333a8b10 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e4333a89c0 'type'
|     `-SubstTemplateTypeParmType 0x55e4333a8850 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e433271380 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e433271328 'F'
|       `-RecordType 0x55e4333a84b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e4333a83d0 'typed_array_memory'
|-FieldDecl 0x55e433556500 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e433556550 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e433556588 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|   |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e4332a8898 'T'
|   `-RecordType 0x55e4332d7dc0 'String'
|     `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e433556618 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e4335565e0 'String &'
|   `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|     |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e4332a8898 'T'
|     `-RecordType 0x55e4332d7dc0 'String'
|       `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e4335566a8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e433556670 'const String &'
|   `-QualType 0x55e4333a7711 'const String' const
|     `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-RecordType 0x55e4332d7dc0 'String'
|         `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e433556738 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e433556700 'String *'
|   `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|     |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e4332a8898 'T'
|     `-RecordType 0x55e4332d7dc0 'String'
|       `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e4335567c8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e433556790 'const String *'
|   `-QualType 0x55e4333a7711 'const String' const
|     `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-RecordType 0x55e4332d7dc0 'String'
|         `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e433557420 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e4335573d0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e4335573b0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e4335572e8 'type'
|     `-LValueReferenceType 0x55e4335572b0 'const String &'
|       `-QualType 0x55e433557051 'const String' const
|         `-SubstTemplateTypeParmType 0x55e433557050 'String' sugar
|           |-TemplateTypeParmType 0x55e43327b2d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e43327b278 'T'
|           `-RecordType 0x55e4332d7dc0 'String'
|             `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e433557488 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e433556670 'const String &'
|   `-QualType 0x55e4333a7711 'const String' const
|     `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-RecordType 0x55e4332d7dc0 'String'
|         `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e4335574e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e433557548 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e433556700 'String *'
|   `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|     |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e4332a8898 'T'
|     `-RecordType 0x55e4332d7dc0 'String'
|       `-CXXRecord 0x55e4332d7d30 'String'
|-TypedefDecl 0x55e4335575b0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e433556790 'const String *'
|   `-QualType 0x55e4333a7711 'const String' const
|     `-SubstTemplateTypeParmType 0x55e4333a7710 'String' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-RecordType 0x55e4332d7dc0 'String'
|         `-CXXRecord 0x55e4332d7d30 'String'
|-EnumDecl 0x55e433557608 <line:134:5> col:5
| `-EnumConstantDecl 0x55e433557700 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e4335576e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e4332a9f78 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e4332a9f50 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e4332a9f30 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e433557788 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e433557a18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e433557840 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e4335578e0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e433557ca8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e433557b90 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e433557f68 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e433557e50 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e433558280 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e433558160 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e433558590 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e433558470 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e433558880 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e4335586c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e433558740 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e4335589a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e433558a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e433558ab0 <col:30> Inherited
|-CXXMethodDecl 0x55e433558af8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e433558ba8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e433558c00 <col:30> Inherited
|-CXXMethodDecl 0x55e433558cc8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e433558d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e433558dd0 <col:30> Inherited
|-CXXMethodDecl 0x55e433558e18 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e433558ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e433558f20 <col:30> Inherited
|-CXXMethodDecl 0x55e433558f68 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e433559018 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e433559070 <col:30> Inherited
|-CXXMethodDecl 0x55e4335590b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e433559168 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335591c0 <col:30> Inherited
|-CXXMethodDecl 0x55e4335591e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e433559298 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e433559348 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e433559508 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e4335593f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e433559470 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e433559658 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e4335595c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e433559808 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e433559710 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e4335598c0 <col:20>
| `-OptimizeNoneAttr 0x55e433559918 <col:30>
|-CXXMethodDecl 0x55e433559a38 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e433559940 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e433559af0 <col:20>
| `-OptimizeNoneAttr 0x55e433559b48 <col:30>
|-CXXMethodDecl 0x55e433559c00 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e433559b70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e433559d48 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e433559cb8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e433559e78 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e433559f78 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e43355a048 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e43355a118 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e43355a258 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e43355a1c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e43355a3a0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e43355a310 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e43355a4e8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e43355a458 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e43355a5a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e43355a6a0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e43355a610 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e43355a758 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e43355a818 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e43355a918 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e43355aa98 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e43355a9d8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e43355b258 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e43355ab50 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e43355b1b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e43355b0b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e43355b338 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e43355b488 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e43355b3f8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e43355b540 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e43355b788 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e43355b600 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e43355b678 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e43355b918 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e43355b858 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e43355bb28 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e43355b9e0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e43355ba58 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e43355bbe8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e43355be48 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e43355bd50 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e43355bf18 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e43355bf18

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4335de6e8 prev 0x55e43348d3d8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e4335de7e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55e4335de870 <col:22, col:28> col:22 public
|-EnumDecl 0x55e4335de898 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55e4335de9b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335de998 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55e4335de980 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55e4335de960 <col:14> 'int' 999
| |-EnumConstantDecl 0x55e4335dea60 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335dea40 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55e4335dea28 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55e4335dea08 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e4335deaf0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335dead0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55e4335deab0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55e4335deb80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335deb60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55e4335deb40 <col:13> 'int' 1
| |-EnumConstantDecl 0x55e4335dec10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335debf0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55e4335debd0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55e4335deca0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335dec80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55e4335dec60 <col:13> 'int' 3
| |-EnumConstantDecl 0x55e4335ded30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335ded10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55e4335decf0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55e4335dedc0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335deda0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55e4335ded80 <col:14> 'int' 5
| |-EnumConstantDecl 0x55e4335dee50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e4335dee30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55e4335dee10 <col:12> 'int' 6
| `-EnumConstantDecl 0x55e4335deee0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55e4335deec0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55e4335deea0 <col:13> 'int' 7
|-VarDecl 0x55e4335def50 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55e4335defd8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55e4335df060 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55e4335df0e8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55e4335df170 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55e4335df1f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55e4335df280 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55e4335df308 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55e4335df390 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55e4335df418 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55e4335df4a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55e4335df5a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55e4335e48f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55e4335e5088 <line:128:13> 'int' 0
| `-CompoundStmt 0x55e4335e50f8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55e4335df690 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55e4335e5108 <col:29, line:132:5>
|-CXXMethodDecl 0x55e4335df848 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55e4335df780 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e4335df910 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e4335df9f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55e4335e5160 <col:44, line:161:5>
|   `-ReturnStmt 0x55e4335e5150 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55e4335e5138 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55e4335e5118 <col:9> 'ErrorHandler *' lvalue Var 0x55e4335e4958 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55e4335dfb38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55e4335dfaa8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e4335dfc00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55e4335e51c0 <col:43, line:173:5>
|   `-ReturnStmt 0x55e4335e51b0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55e4335e5198 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55e4335e5178 <col:9> 'ErrorHandler *' lvalue Var 0x55e4335e49d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55e4335dfcb8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55e4335dfd38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55e4335dfe48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55e4335dfdb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e4335dff98 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55e4335dff08 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e00f0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55e4335e0058 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e0248 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55e4335e01b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e03a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55e4335e0308 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e05b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e4335e0458 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55e4335e04d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e0788 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e4335e0670 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55e4335e06f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e09a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e4335e0848 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55e4335e08c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e0b88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e4335e0a68 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55e4335e0ae8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e0d68 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e4335e0c48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55e4335e0cc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e0ec0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55e4335e0e28 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55e4335e1090 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55e4335e0f78 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55e4335e0ff0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55e4335e5418 <col:57, line:234:5>
|   `-ReturnStmt 0x55e4335e5408 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55e4335e53f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55e4335e5398 <col:9, col:41> 'int'
|         |-MemberExpr 0x55e4335e5368 <col:9> '<bound member function type>' ->xmessage 0x55e4335e0ec0
|         | `-CXXThisExpr 0x55e4335e5358 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55e4335e53d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e4335e53c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e4335e5338 <col:18, col:40> 'String' (CXXTemporary 0x55e4335e5338)
|               `-CallExpr 0x55e4335e5300 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55e4335e52e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55e4335e5260 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55e4335e3088 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55e4335e5280 <col:31> 'const String' lvalue ParmVar 0x55e4335e0ff0 'str' 'const String &'
|                 `-DeclRefExpr 0x55e4335e52a0 <col:36> 'const String' lvalue ParmVar 0x55e4335e0f78 'anno' 'const String &'
|-CXXMethodDecl 0x55e4335e1370 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55e4335e1150 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55e4335e11d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55e4335e1248 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e4335e56a8 <col:68, line:243:5>
|   `-ReturnStmt 0x55e4335e5698 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55e4335e5680 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55e4335e5620 <col:9, col:41> 'int'
|         |-MemberExpr 0x55e4335e55f0 <col:9> '<bound member function type>' ->xmessage 0x55e4335e1090
|         | `-CXXThisExpr 0x55e4335e55e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55e4335e54b8 <col:18> 'const String' lvalue ParmVar 0x55e4335e1150 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55e4335e5668 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e4335e5650 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e4335e55c0 <col:24, col:40> 'String' (CXXTemporary 0x55e4335e55c0)
|               `-CXXMemberCallExpr 0x55e4335e5558 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55e4335e54e8 <col:24> '<bound member function type>' ->vformat 0x55e4335e2550
|                 | `-CXXThisExpr 0x55e4335e54d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55e4335e5588 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55e4335e5518 <col:32> 'const char *' lvalue ParmVar 0x55e4335e11d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55e4335e55a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55e4335e5538 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e4335e1248 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e4335e1610 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55e4335e1438 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55e4335e14b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55e4335e1528 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55e4335e59e8 <col:23, line:254:5>
|   `-ReturnStmt 0x55e4335e59d8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55e4335e59c0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55e4335e5960 <col:9, col:71> 'int'
|         |-MemberExpr 0x55e4335e5930 <col:9> '<bound member function type>' ->xmessage 0x55e4335e1090
|         | `-CXXThisExpr 0x55e4335e5920 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55e4335e59a8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55e4335e5990 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55e4335e58e0 <col:18, col:65> 'String' (CXXTemporary 0x55e4335e58e0)
|         |     `-CallExpr 0x55e4335e5878 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55e4335e5860 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55e4335e5748 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55e4335e3088 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55e4335e5768 <col:31> 'const String' lvalue ParmVar 0x55e4335e14b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55e4335e58c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55e4335e58a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55e4335e5840 <col:37, col:64> 'String' (CXXTemporary 0x55e4335e5840)
|         |             `-CallExpr 0x55e4335e5810 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55e4335e57f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55e4335e5788 <col:37> 'String (const String &)' lvalue CXXMethod 0x55e4335e36d8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55e4335e57a8 <col:56> 'const String' lvalue ParmVar 0x55e4335e1438 'landmark' 'const String &'
|         `-DeclRefExpr 0x55e4335e5900 <col:68> 'const String' lvalue ParmVar 0x55e4335e1528 'str' 'const String &'
|-CXXMethodDecl 0x55e4335e1990 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55e4335e16d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55e4335e1750 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55e4335e17d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55e4335e1848 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e4335e5ca0 <col:34, line:267:5>
|   `-ReturnStmt 0x55e4335e5c90 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55e4335e5c78 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55e4335e5c10 <col:9, col:51> 'int'
|         |-MemberExpr 0x55e4335e5be0 <col:9> '<bound member function type>' ->xmessage 0x55e4335e1610
|         | `-CXXThisExpr 0x55e4335e5bd0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55e4335e5a88 <col:18> 'const String' lvalue ParmVar 0x55e4335e16d8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55e4335e5aa8 <col:28> 'const String' lvalue ParmVar 0x55e4335e1750 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55e4335e5c60 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e4335e5c48 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e4335e5bb0 <col:34, col:50> 'String' (CXXTemporary 0x55e4335e5bb0)
|               `-CXXMemberCallExpr 0x55e4335e5b48 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55e4335e5ad8 <col:34> '<bound member function type>' ->vformat 0x55e4335e2550
|                 | `-CXXThisExpr 0x55e4335e5ac8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55e4335e5b78 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55e4335e5b08 <col:42> 'const char *' lvalue ParmVar 0x55e4335e17d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55e4335e5b90 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55e4335e5b28 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e4335e1848 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e4335e1aa0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55e4335e5d20 <col:25, line:288:5>
|   `-ReturnStmt 0x55e4335e5d10 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55e4335e5cf8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55e4335e5cc8 <col:9> 'const int' lvalue ->_nerrors 0x55e4335e48f8
|         `-CXXThisExpr 0x55e4335e5cb8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55e4335e1cb0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55e4335e1b58 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55e4335e1bd8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e1f98 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55e4335e1d78 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55e4335e1df8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55e4335e1e70 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e4335e2130 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55e4335e2068 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e2378 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55e4335e21f0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55e4335e2268 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e4335e5f80 <col:58, line:357:5>
|   `-ReturnStmt 0x55e4335e5f70 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55e4335e5f58 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55e4335e5f28 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55e4335e5f10 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55e4335e5ef0 <col:9, col:29> 'String' (CXXTemporary 0x55e4335e5ef0)
|             `-CallExpr 0x55e4335e5e80 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55e4335e5e68 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55e4335e5de8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55e4335e1f98 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55e4335e5d88 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55e4335e5eb8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55e4335e5da8 <col:21> 'const char *' lvalue ParmVar 0x55e4335e21f0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55e4335e5ed0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55e4335e5dc8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e4335e2268 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e4335e2550 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55e4335e2440 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55e4335e24b8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e4335e26a8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55e4335e2618 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55e4335e27f0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55e4335e2760 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55e4335e2a90 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55e4335e28a8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55e4335e2928 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55e4335e29a0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55e4335e2bf0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55e4335e2b60 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55e4335e6098 <col:37, line:441:5>
|   `-IfStmt 0x55e4335e6080 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55e4335e6008 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55e4335e5fd8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55e4335e5f98 <col:6> 'int' lvalue ParmVar 0x55e4335e2b60 'level' 'int'
|     | `-ImplicitCastExpr 0x55e4335e5ff0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55e4335e5fb8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55e4335deca0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55e4335e6068 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55e4335e6038 <col:8> 'int' lvalue ->_nerrors 0x55e4335e48f8
|         `-CXXThisExpr 0x55e4335e6028 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55e4335e2cb8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55e4335e6130 <col:26, line:448:5>
|   `-BinaryOperator 0x55e4335e6110 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55e4335e60c0 <col:2> 'int' lvalue ->_nerrors 0x55e4335e48f8
|     | `-CXXThisExpr 0x55e4335e60b0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55e4335e60f0 <col:13> 'int' 0
|-CXXMethodDecl 0x55e4335e2e80 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55e4335e2d70 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55e4335e2de8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55e4335e3088 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55e4335e2f40 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55e4335e2fb8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55e4335e3338 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55e4335e3148 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55e4335e31c8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55e4335e3248 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55e4335e33f0 <col:59> 0 0
|-CXXMethodDecl 0x55e4335e3588 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55e4335e3468 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55e4335e34e8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55e4335e67a0 <col:70, line:534:5>
|   |-DeclStmt 0x55e4335e62a0 <line:528:2, col:20>
|   | |-VarDecl 0x55e4335e6158 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55e4335e61c0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55e4335e61f8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55e4335e6260 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55e4335e6370 <line:529:2, col:23>
|   | `-VarDecl 0x55e4335e62d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55e4335e6358 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55e4335e6338 <col:18> 'const char *' lvalue ParmVar 0x55e4335e3468 'begin' 'const char *'
|   |-DoStmt 0x55e4335e6738 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55e4335e6668 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55e4335e6650 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55e4335e6630 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55e4335e6388 <col:6> 'const char *' lvalue Var 0x55e4335e62d0 'x' 'const char *'
|   | |     `-CallExpr 0x55e4335e6580 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55e4335e6568 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55e4335e6520 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55e4335e4dd0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55e4335e65e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55e4335e65d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55e4335e6440 <col:20, col:27> 'String' (CXXTemporary 0x55e4335e6440)
|   | |       |     `-CXXTemporaryObjectExpr 0x55e4335e6408 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55e4335e6600 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55e4335e6460 <col:30> 'const char *' lvalue Var 0x55e4335e62d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55e4335e6618 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55e4335e6480 <col:33> 'const char *' lvalue ParmVar 0x55e4335e34e8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55e4335e64c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55e4335e64a0 <col:39> 'String' lvalue Var 0x55e4335e6158 'name' 'String'
|   | |       |-UnaryOperator 0x55e4335e64f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55e4335e64d8 <col:46> 'String' lvalue Var 0x55e4335e61f8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55e4335e6510 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55e4335e6720 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55e4335e6708 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55e4335e66e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55e4335e66b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|   |         `-ImplicitCastExpr 0x55e4335e66a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55e4335e6680 <col:11> 'String' lvalue Var 0x55e4335e6158 'name' 'String'
|   `-ReturnStmt 0x55e4335e6790 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55e4335e6778 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55e4335e6758 <col:9> 'const char *' lvalue Var 0x55e4335e62d0 'x' 'const char *'
|-CXXMethodDecl 0x55e4335e36d8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55e4335e3648 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55e4335e6da8 <col:55, line:550:5>
|   `-IfStmt 0x55e4335e6d80 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55e4335e69e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55e4335e69c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e4335e69b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e4335e6990 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e4335e6960 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|     | |       `-DeclRefExpr 0x55e4335e6800 <col:6> 'const String' lvalue ParmVar 0x55e4335e3648 'x' 'const String &'
|     | `-BinaryOperator 0x55e4335e6940 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55e4335e6910 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55e4335e68c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55e4335e68a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55e4335e6860 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55e4332f4d60 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55e4335e6820 <col:11> 'const String' lvalue ParmVar 0x55e4335e3648 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55e4335e6840 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55e4335e6928 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55e4335e68f8 <col:19> 'char' 123
|     |-ReturnStmt 0x55e4335e6a50 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55e4335e6a20 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55e4335e6a00 <col:13> 'const String' lvalue ParmVar 0x55e4335e3648 'x' 'const String &'
|     `-IfStmt 0x55e4335e6d58 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55e4335e6ae8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e4335e6ad0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e4335e6ab0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e4335e6a80 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |       `-DeclRefExpr 0x55e4335e6a60 <col:11> 'const String' lvalue ParmVar 0x55e4335e3648 'x' 'const String &'
|       |-ReturnStmt 0x55e4335e6c70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55e4335e6c58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55e4335e6c28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55e4335e6c10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55e4335e6bf0 <col:13, col:29> 'String' (CXXTemporary 0x55e4335e6bf0)
|       |         `-CallExpr 0x55e4335e6ba0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55e4335e6b88 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55e4335e6b00 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55e4335e2e80 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55e4335e6bd0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55e4335e6b20 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55e4335e6b40 <col:28> 'const String' lvalue ParmVar 0x55e4335e3648 'x' 'const String &'
|       `-ReturnStmt 0x55e4335e6d48 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55e4335e6d30 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55e4335e6d00 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55e4335e6ce8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55e4335e6cc8 <col:13, col:20> 'String' (CXXTemporary 0x55e4335e6cc8)
|                 `-CXXTemporaryObjectExpr 0x55e4335e6c90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55e4335e38a0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55e4335e3790 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55e4335e3808 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e4335e5078 <col:71> 'bool' false
|-CXXRecordDecl 0x55e4335e3950 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55e4335e3c48 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55e4335e3be0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55e4335e3b80 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55e4335e3b40 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55e4332d7dc0 'String'
|       | `-CXXRecord 0x55e4332d7d30 'String'
|       |-BuiltinType 0x55e432fab370 'int'
|       `-DecayedType 0x55e43348e420 '__va_list_tag *' sugar
|         |-TypedefType 0x55e43348e3f0 'va_list' sugar
|         | |-Typedef 0x55e4331c8e70 'va_list'
|         | `-TypedefType 0x55e4331c8e20 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55e433100a48 '__gnuc_va_list'
|         |   `-TypedefType 0x55e4331009b0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55e432fecbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55e432fecb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55e432fac0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55e432fac028 '__va_list_tag'
|         `-PointerType 0x55e4331ce710 '__va_list_tag *'
|           `-RecordType 0x55e432fac0c0 '__va_list_tag'
|             `-CXXRecord 0x55e432fac028 '__va_list_tag'
|-EnumDecl 0x55e4335e3d40 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55e4335e3e40 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e43a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e3e20 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55e4335e3e00 <col:16> 'int' 1
| |-EnumConstantDecl 0x55e4335e3ed0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e43b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e3eb0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55e4335e3e90 <col:21> 'int' 2
| |-EnumConstantDecl 0x55e4335e3f60 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e43d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e3f40 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55e4335e3f20 <col:22> 'int' 4
| |-EnumConstantDecl 0x55e4335e3ff0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e43e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e3fd0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55e4335e3fb0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55e4335e4080 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e4400 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e4060 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55e4335e4040 <col:22> 'int' 16
| |-EnumConstantDecl 0x55e4335e4110 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e4418 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e40f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e4335e40d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e4335e41a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e4430 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e4180 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55e4335e4160 <col:17> 'int' 64
| |-EnumConstantDecl 0x55e4335e4230 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e4448 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e4210 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55e4335e41f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55e4335e42c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e4335e4460 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4335e42a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55e4335e4280 <col:16> 'int' 256
| `-EnumConstantDecl 0x55e4335e4350 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55e4335e4478 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4335e4330 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55e4335e4310 <col:12> 'int' 1024
|-CXXMethodDecl 0x55e4335e4688 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55e4335e44a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55e4335e4540 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55e4335e4810 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55e4335e4748 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55e4335e48b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55e4335e48f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55e4335e4958 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55e4335e49d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55e4335e4dd0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55e4335e4a48 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55e4335e4ac8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55e4335e4b48 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55e4335e4bc0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55e4335e4c38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55e4335e4cb0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55e4335e4ef8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55e4335e4ef8
| `-ParmVarDecl 0x55e4335e5008 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55e4335e7108 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55e4335e7108
  `-ParmVarDecl 0x55e4335e7218 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e43348d468 prev 0x55e4334d2008 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e43348d560 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e43348d5f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e43348d728 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e43348d628 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e43348eb50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43348eb30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e43348e6c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e43348ebe0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e43348eba0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e43348d628 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e43348e730 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e43348ec60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43348ec20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e43348e790 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e43348eca0 <col:54> 'bool' false
| `-CompoundStmt 0x55e43348eda8 <col:61, line:38:5>
|   `-BinaryOperator 0x55e43348ed88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e43348ed20 <col:9> 'const Element *' lvalue ->_context 0x55e43348e668
|     | `-CXXThisExpr 0x55e43348ed10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e43348ed70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e43348ed50 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e43348d938 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e43348d7e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e43348d860 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e43348eb88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43348eb68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e43348e668 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e43348ee00 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e43348edc0 <col:20> 'const Element *' lvalue ParmVar 0x55e43348d7e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e43348e6c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e43348ee80 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e43348ee40 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e43348d860 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e43348e730 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e43348ef00 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e43348eec0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e43348e790 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e43348ef40 <col:73> 'bool' false
| `-CompoundStmt 0x55e43348efb8 <col:80, line:46:5>
|-CXXMethodDecl 0x55e43348da68 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e43348f030 <col:36, line:51:5>
|   `-ReturnStmt 0x55e43348f020 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e43348f008 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e43348efd8 <col:16> 'const Element *const' lvalue ->_context 0x55e43348e668
|         `-CXXThisExpr 0x55e43348efc8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e43348db58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e43348f0b0 <col:32, line:57:5>
|   `-ReturnStmt 0x55e43348f0a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e43348f088 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e43348f058 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e43348e6c8
|         `-CXXThisExpr 0x55e43348f048 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e43348dc18 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e43348dda0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e43348dcd0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e43348def0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e43348de60 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e43348e040 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e43348dfb0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e43348e248 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e43348e0f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e43348e170 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e43348e578 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e43348e308 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e43348e388 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e43348e450 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e43348e630 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e43348e668 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e43348e6c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e43348e730 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e43348e790 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e43348e7e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e43348e7e0
| `-ParmVarDecl 0x55e43348e8f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e43348e998 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e43348e998
| `-ParmVarDecl 0x55e43348eaa8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e4335f48c0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e433599f20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e43359a0f8 prev 0x55e433599f20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e43359a188 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e43359a1b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e43359bd80 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e43359bd30 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e43359a660 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e43359a560 'type'
|     `-TemplateSpecializationType 0x55e43359a4f0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e43359a3d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e43359a3b0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e43359a390 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e43359a4d0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e43359a3f0 'char_array'
|-TypedefDecl 0x55e43359be38 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e43359be00 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e43359bde0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e43359bd80 'type'
|     `-ElaboratedType 0x55e43359bd30 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e43359a660 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e43359a560 'type'
|         `-TemplateSpecializationType 0x55e43359a4f0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e43359a3d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e43359a3b0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e43359a390 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e43359a4d0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e43359a3f0 'char_array'
|-CXXMethodDecl 0x55e43359bfb8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e43359bec8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e43359c0a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e43359c188 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e43359c458 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e43359c360 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e43359c698 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e43359c510 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e43359c588 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e43359c868 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e43359c758 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e43359c7d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e43359c9c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e43359ca98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e43359cce8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e43359cb58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e43359cbd0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e43359cf48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e43359cdb8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e43359ce30 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e43359d108 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e43359d018 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e4335a5658 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e43359d1d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e4335a5710 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e4335a57c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e4335a59f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e4335a5870 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e4335a58e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e4335a5c98 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e4335a5ba0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e4335a5d60 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e4335a5db0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e4335a5e00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e433598928 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e433598b38 prev 0x55e433598928 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e433599e90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e433599e40 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e433599e20 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e433599cd0 'type'
|     `-SubstTemplateTypeParmType 0x55e433599af0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e433270c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e433270ba8 'T'
|       `-RecordType 0x55e433599640 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e433599558 'sized_array_memory'
|-FieldDecl 0x55e4335a5e50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e4335a5ea0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e4335a5ed8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|   |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e4332a8898 'T'
|   `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a5f68 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e4335a5f30 'int &'
|   `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|     |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e4332a8898 'T'
|     `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6028 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e4335a5ff0 'const int &'
|   `-QualType 0x55e433598bd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a60b8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e4335a6080 'int *'
|   `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|     |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e4332a8898 'T'
|     `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6148 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e4335a6110 'const int *'
|   `-QualType 0x55e433598bd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6d30 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e4335a6ce0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e4335a6cc0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e4335a6c50 'type'
|     `-SubstTemplateTypeParmType 0x55e4335a6a10 'int' sugar
|       |-TemplateTypeParmType 0x55e43327ba00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e43327b9b0 'T'
|       `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6d98 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e4335a5ff0 'const int &'
|   `-QualType 0x55e433598bd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6df0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6e58 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e4335a6080 'int *'
|   `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|     |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e4332a8898 'T'
|     `-BuiltinType 0x55e432fab370 'int'
|-TypedefDecl 0x55e4335a6ec0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e4335a6110 'const int *'
|   `-QualType 0x55e433598bd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55e433598bd0 'int' sugar
|       |-TemplateTypeParmType 0x55e4332a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e4332a8898 'T'
|       `-BuiltinType 0x55e432fab370 'int'
|-EnumDecl 0x55e4335a6f18 <line:134:5> col:5
| `-EnumConstantDecl 0x55e4335a7010 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e4335a6ff0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e4332a9f78 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e4332a9f50 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e4332a9f30 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e4335a7098 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e4335a72e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e4335a7150 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e4335a71f0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e4335a75a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e4335a7490 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e4335a7868 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e4335a7750 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e4335a7bb0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e4335a7a90 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e4335a7ec0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e4335a7da0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e4335a81b0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e4335a7ff8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e4335a8070 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e4335a82d8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e4335a83b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335a8410 <col:30> Inherited
|-CXXMethodDecl 0x55e4335a8458 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e4335a8508 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335a8560 <col:30> Inherited
|-CXXMethodDecl 0x55e4335a8628 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e4335a86d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335a8730 <col:30> Inherited
|-CXXMethodDecl 0x55e4335a8778 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e4335a8828 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335a8880 <col:30> Inherited
|-CXXMethodDecl 0x55e4335a88c8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e4335a8978 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335a89d0 <col:30> Inherited
|-CXXMethodDecl 0x55e4335a8a18 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e4335a8ac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e4335a8b20 <col:30> Inherited
|-CXXMethodDecl 0x55e4335a8b48 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e4335a8bf8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e4335a8ca8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e4335a8e68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e4335a8d58 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e4335a8dd0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e4335a8fb8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e4335a8f28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e4335a9168 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e4335a9070 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e4335a9220 <col:20>
| `-OptimizeNoneAttr 0x55e4335a9278 <col:30>
|-CXXMethodDecl 0x55e4335a9398 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e4335a92a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e4335a9450 <col:20>
| `-OptimizeNoneAttr 0x55e4335a94a8 <col:30>
|-CXXMethodDecl 0x55e4335a9560 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e4335a94d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e4335a96a8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e4335a9618 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e4335a97d8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e4335a9908 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e4335a99d8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e4335a9aa8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e4335a9be8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e4335a9b58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e4335a9d30 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e4335a9ca0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e4335a9e78 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e4335a9de8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e4335a9f30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e4335aa030 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e4335a9fa0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e4335aa0e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e4335aa1a8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e4335aa2a8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e4335aa428 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e4335aa368 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e4335aabe8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e4335aa4e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e4335aab48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e4335aaa48 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e4335aacc8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e4335aae18 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e4335aad88 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e4335aaed0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e4335ab118 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e4335aaf90 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e4335ab008 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e4335ab2d8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e4335ab1e8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e4335ab528 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e4335ab3a0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e4335ab418 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e4335ab5e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e4335ab848 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e4335ab750 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e4335ab918 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e433596a98 prev 0x55e4335786d8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e433596b90 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e433596c80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e4335be6a0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e433596d70 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e4335be6b0 <col:25, line:830:9>
|-CXXMethodDecl 0x55e433596e70 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e433596f20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e433596fc8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e433596fc8
| `-ParmVarDecl 0x55e4335970d8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e433597898 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e433597898
  `-ParmVarDecl 0x55e4335979a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4335784e8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e433578648 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e4335786d8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e433578790 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e433578898 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e4335787c8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e4335aced8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e4335aceb8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e433578bb8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e433578a30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e433578aa8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e4335acf10 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e4335acef0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e433578d90 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433578c80 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e433578cf8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e4335acf48 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e4335acf28 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e433579148 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e433578f30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e433578fa8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e433579020 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e4335acf80 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e4335acf60 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e433579308 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e433579248 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e433579400 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e4335795e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e4335794f0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e4335796d8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e4335ad330 <col:24, line:291:5>
|   `-ReturnStmt 0x55e4335ad320 <line:290:9, col:79>
|     `-BinaryOperator 0x55e4335ad300 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e4335ad1d8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e4335ad130 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e4335ad110 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e4335ad008 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e4335acff0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e4335acfd8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e4335acfa8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e4335988c0
|       | |   |       `-CXXThisExpr 0x55e4335acf98 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e4335ad0f8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e4335ad0e0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e4335ad0a8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e4335ad078 <col:28, col:35> '<bound member function type>' ->size 0x55e4335591e8
|       | |           `-ImplicitCastExpr 0x55e4335ad0c8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e4335ad060 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e4335ad030 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e4335988c0
|       | |                 `-CXXThisExpr 0x55e4335ad020 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e4335ad1c0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e4335ad1a8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e4335ad190 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e4335ad160 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e4335aba60
|       |         `-CXXThisExpr 0x55e4335ad150 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e4335ad2e0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e4335ad2c8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e4335ad2b0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e4335ad270 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e4335ad258 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e4335ad208 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e4335abb10
|         |     |   `-CXXThisExpr 0x55e4335ad1f8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e4335ad238 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e4335ad290 <col:79> 'int' 0
|-CXXMethodDecl 0x55e433579798 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e4335ad508 <col:32, line:296:5>
|   `-ReturnStmt 0x55e4335ad4f8 <line:295:9, col:49>
|     `-BinaryOperator 0x55e4335ad4d8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e4335ad3b8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e4335ad3a0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e4335ad388 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e4335ad358 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e4335aba60
|       |       `-CXXThisExpr 0x55e4335ad348 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e4335ad4b8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e4335ad4a0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e4335ad488 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e4335ad448 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e4335ad430 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e4335ad3e0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e4335abb10
|         |     |   `-CXXThisExpr 0x55e4335ad3d0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e4335ad410 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e4335ad468 <col:49> 'int' 0
|-CXXMethodDecl 0x55e433579888 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e4335af090 <col:19, line:306:5>
|   |-IfStmt 0x55e4335aefb0 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e4335ad578 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e4335ad560 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e4335ad530 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e4335988c0
|   | |     `-CXXThisExpr 0x55e4335ad520 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e4335aef90 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e4335ad5e8 <col:13, col:20> '<bound member function type>' ->clear 0x55e43355bbe8
|   |     `-ImplicitCastExpr 0x55e4335ad5d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e4335ad5a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e4335988c0
|   |         `-CXXThisExpr 0x55e4335ad590 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e4335af038 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e4335af008 <col:9, col:16> '<bound member function type>' .clear 0x55e4335ab5e8
|   |   `-MemberExpr 0x55e4335aefd8 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e4335aba00
|   |     `-CXXThisExpr 0x55e4335aefc8 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e4335af080 <line:305:9, col:17>
|     `-UnaryOperator 0x55e4335af068 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4335af058 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e433579b08 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e433579a10 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e433579c88 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e433579bc0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e43357a008 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e433579d30 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e433579f68 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e433579dd8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e433579e50 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e4335af3b0 <col:67, line:327:5>
|     |-WhileStmt 0x55e4335af360 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e4335af178 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e4335af0f8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e4334ca4d8 0x55e433313ab8 0x55e433313790 0x55e433304f70 0x55e433304c20 0x55e433304510 0x55e4332d6e80 0x55e433263340
|     | | |-DeclRefExpr 0x55e4335af0b8 <col:16> 'Iter' lvalue ParmVar 0x55e433579dd8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e4335af0d8 <col:25> 'Iter' lvalue ParmVar 0x55e433579e50 'end' 'Iter'
|     | `-CompoundStmt 0x55e4335af340 <col:30, line:325:9>
|     |   |-CallExpr 0x55e4335af2e0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e4335af1c0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e4335af2b0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e4335af240 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|     |   |   `-DeclRefExpr 0x55e4335af220 <col:24> 'Iter' lvalue ParmVar 0x55e433579dd8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e4335af328 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e4335af308 <col:15> 'Iter' lvalue ParmVar 0x55e433579dd8 'begin' 'Iter'
|     `-ReturnStmt 0x55e4335af3a0 <line:326:9, col:17>
|       `-UnaryOperator 0x55e4335af388 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335af378 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e43357a110 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e43357a080 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e43357a258 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e43357a1c8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e43357a320 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e4335af490 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e4335af430 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e4335af3e0 <col:9> '<bound member function type>' ->reset_from 0x55e4335abe88
|   | | `-CXXThisExpr 0x55e4335af3d0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e4335af410 <col:20> 'int' 0
|   `-ReturnStmt 0x55e4335af480 <line:352:9, col:17>
|     `-UnaryOperator 0x55e4335af468 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4335af458 <col:17> 'Args *' this
|-VarDecl 0x55e43357a3d8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e43357a440 <col:38> 'int' 1
|-VarDecl 0x55e43357a4d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e43357a538 <col:39> 'int' 2
|-VarDecl 0x55e43357a5c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e43357a630 <col:39> 'int' 4
|-VarDecl 0x55e43357a6c0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e43357a728 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e43357aaa8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e43357a7a0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43357aa08 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e43357a850 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357a8f8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55e4335af5e8 <col:43, line:371:5>
|     `-ReturnStmt 0x55e4335af5d8 <line:370:9, col:34>
|       `-CallExpr 0x55e4335af5a0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335af4c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335af540 <col:21> 'const char *' lvalue ParmVar 0x55e43357a850 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335af560 <col:30> 'int' 0
|         `-DeclRefExpr 0x55e4335af580 <col:33> 'T' lvalue ParmVar 0x55e43357a8f8 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357add8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e43357ab10 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43357ad38 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e43357abc0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357ac68 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e4335af738 <col:45, line:375:5>
|     `-ReturnStmt 0x55e4335af728 <line:374:9, col:42>
|       `-CallExpr 0x55e4335af6f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335af610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335af690 <col:21> 'const char *' lvalue ParmVar 0x55e43357abc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335af6b0 <col:30> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e4335af6d0 <col:41> 'T' lvalue ParmVar 0x55e43357ac68 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357b108 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e43357ae40 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43357b068 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e43357aef0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357af98 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e4335af888 <col:45, line:379:5>
|     `-ReturnStmt 0x55e4335af878 <line:378:9, col:43>
|       `-CallExpr 0x55e4335af840 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335af760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335af7e0 <col:21> 'const char *' lvalue ParmVar 0x55e43357aef0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335af800 <col:30> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int'
|         `-DeclRefExpr 0x55e4335af820 <col:42> 'T' lvalue ParmVar 0x55e43357af98 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357b438 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e43357b170 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43357b398 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e43357b220 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357b2c8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55e4335afa88 <col:46, line:383:5>
|     `-ReturnStmt 0x55e4335afa78 <line:382:9, col:55>
|       `-CallExpr 0x55e4335afa40 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335af8b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335af930 <col:21> 'const char *' lvalue ParmVar 0x55e43357b220 'keyword' 'const char *'
|         |-BinaryOperator 0x55e4335afa00 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e4335af9b0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e4335af990 <col:30> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e4335af9e8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e4335af9c8 <col:42> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e4335afa20 <col:54> 'T' lvalue ParmVar 0x55e43357b2c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357b838 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e43357b4a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43357b798 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e43357b550 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357b5d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e43357b678 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e4335afbc8 <col:54, line:388:5>
|     |-CallExpr 0x55e4335afb50 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335afaa0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e4335afae0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e4335afaf0 <col:30> 'const char *' lvalue ParmVar 0x55e43357b550 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e4335afb10 <col:39> 'int' lvalue ParmVar 0x55e43357b5d0 'flags' 'int'
|     | `-DeclRefExpr 0x55e4335afb30 <col:46> 'T' lvalue ParmVar 0x55e43357b678 'x' 'T &'
|     `-ReturnStmt 0x55e4335afbb8 <line:387:9, col:17>
|       `-UnaryOperator 0x55e4335afba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335afb90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e43357bce8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e43357b8a8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e43357b928 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e43357bc48 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e43357b9e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357ba88 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e43357bb28 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e4335afd38 <col:74, line:403:5>
|     `-ReturnStmt 0x55e4335afd28 <line:402:9, col:56>
|       `-CallExpr 0x55e4335afce8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335afbf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335afc68 <col:28> 'const char *' lvalue ParmVar 0x55e43357b9e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335afc88 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e4335afca8 <col:40> 'T' lvalue ParmVar 0x55e43357ba88 'x' 'T &'
|         `-DeclRefExpr 0x55e4335afcc8 <col:43> 'const V' lvalue ParmVar 0x55e43357bb28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e43357c158 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e43357bd58 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e43357bdd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e43357c0b8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e43357be98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357bf38 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e43357bfd8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e4335afea0 <col:76, line:407:5>
|     `-ReturnStmt 0x55e4335afe90 <line:406:9, col:65>
|       `-CallExpr 0x55e4335afe50 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335afd60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335afdd0 <col:28> 'const char *' lvalue ParmVar 0x55e43357be98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335afdf0 <col:37> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int'
|         |-DeclRefExpr 0x55e4335afe10 <col:49> 'T' lvalue ParmVar 0x55e43357bf38 'x' 'T &'
|         `-DeclRefExpr 0x55e4335afe30 <col:52> 'const V' lvalue ParmVar 0x55e43357bfd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e43357c6a8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e43357c1c8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e43357c248 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e43357c608 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e43357c308 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357c388 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e43357c428 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e43357c4c8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e4335b0008 <col:85, line:412:5>
|     |-CallExpr 0x55e4335aff88 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335afeb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e4335afef8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e4335aff08 <col:37> 'const char *' lvalue ParmVar 0x55e43357c308 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e4335aff28 <col:46> 'int' lvalue ParmVar 0x55e43357c388 'flags' 'int'
|     | |-DeclRefExpr 0x55e4335aff48 <col:53> 'T' lvalue ParmVar 0x55e43357c428 'x' 'T &'
|     | `-DeclRefExpr 0x55e4335aff68 <col:56> 'const V' lvalue ParmVar 0x55e43357c4c8 'default_value' 'const V &'
|     `-ReturnStmt 0x55e4335afff8 <line:411:9, col:17>
|       `-UnaryOperator 0x55e4335affe0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335affd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e43357cb38 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e43357c720 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357c798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43357ca98 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e43357c858 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357c8d0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357c978 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b0188 <col:53, line:425:5>
|     `-ReturnStmt 0x55e4335b0178 <line:424:9, col:42>
|       `-CallExpr 0x55e4335b0138 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b0038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b00b8 <col:21> 'const char *' lvalue ParmVar 0x55e43357c858 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b00d8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e4335b00f8 <col:33> 'P' lvalue ParmVar 0x55e43357c8d0 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b0118 <col:41> 'T' lvalue ParmVar 0x55e43357c978 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357cf88 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e43357cba8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357cc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43357cee8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e43357cce8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357cd60 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357ce08 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b0300 <col:55, line:429:5>
|     `-ReturnStmt 0x55e4335b02f0 <line:428:9, col:50>
|       `-CallExpr 0x55e4335b02b0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b01b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b0230 <col:21> 'const char *' lvalue ParmVar 0x55e43357cce8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b0250 <col:30> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e4335b0270 <col:41> 'P' lvalue ParmVar 0x55e43357cd60 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b0290 <col:49> 'T' lvalue ParmVar 0x55e43357ce08 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357d3d8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e43357cff8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357d078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43357d338 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e43357d138 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357d1b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357d258 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b0478 <col:55, line:433:5>
|     `-ReturnStmt 0x55e4335b0468 <line:432:9, col:51>
|       `-CallExpr 0x55e4335b0428 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b0328 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b03a8 <col:21> 'const char *' lvalue ParmVar 0x55e43357d138 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b03c8 <col:30> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int'
|         |-DeclRefExpr 0x55e4335b03e8 <col:42> 'P' lvalue ParmVar 0x55e43357d1b0 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b0408 <col:50> 'T' lvalue ParmVar 0x55e43357d258 'x' 'T &'
|-FunctionTemplateDecl 0x55e43357d828 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e43357d448 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357d4c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55e43357d788 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55e43357d588 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e43357d600 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55e43357d6a8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55e4335b06a0 <col:56, line:437:5>
| |   `-ReturnStmt 0x55e4335b0690 <line:436:9, col:63>
| |     `-CallExpr 0x55e4335b0650 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e4335b04a0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e4335b0520 <col:21> 'const char *' lvalue ParmVar 0x55e43357d588 'keyword' 'const char *'
| |       |-BinaryOperator 0x55e4335b05f0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55e4335b05a0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55e4335b0580 <col:30> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55e4335b05d8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55e4335b05b8 <col:42> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55e4335b0610 <col:54> 'P' lvalue ParmVar 0x55e43357d600 'parser' 'P'
| |       `-DeclRefExpr 0x55e4335b0630 <col:62> 'T' lvalue ParmVar 0x55e43357d6a8 'x' 'T &'
| `-CXXMethodDecl 0x55e4335f5378 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55e4335f50e0 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55e4335f5188 <col:40, col:42> col:42 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x55e4335f5258 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55e43357dd58 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e43357d898 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357d918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43357dcb8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e43357d9d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357da58 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e43357dad0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357db78 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b0808 <col:64, line:442:5>
|     |-CallExpr 0x55e4335b0788 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b06b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e4335b06f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b0708 <col:30> 'const char *' lvalue ParmVar 0x55e43357d9d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e4335b0728 <col:39> 'int' lvalue ParmVar 0x55e43357da58 'flags' 'int'
|     | |-DeclRefExpr 0x55e4335b0748 <col:46> 'P' lvalue ParmVar 0x55e43357dad0 'parser' 'P'
|     | `-DeclRefExpr 0x55e4335b0768 <col:54> 'T' lvalue ParmVar 0x55e43357db78 'x' 'T &'
|     `-ReturnStmt 0x55e4335b07f8 <line:441:9, col:17>
|       `-UnaryOperator 0x55e4335b07e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b07d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e43357e358 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e43357ddd0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357de48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e43357dec8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e43357e2b8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e43357df90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357e008 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357e0a8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e43357e178 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e4335b09a0 <col:84, line:458:5>
|     `-ReturnStmt 0x55e4335b0990 <line:457:9, col:64>
|       `-CallExpr 0x55e4335b0948 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b0838 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b08a8 <col:28> 'const char *' lvalue ParmVar 0x55e43357df90 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b08c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e4335b08e8 <col:40> 'P' lvalue ParmVar 0x55e43357e008 'parser' 'P'
|         |-DeclRefExpr 0x55e4335b0908 <col:48> 'T' lvalue ParmVar 0x55e43357e0a8 'x' 'T &'
|         `-DeclRefExpr 0x55e4335b0928 <col:51> 'const V' lvalue ParmVar 0x55e43357e178 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e43357e8d8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e43357e3d0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357e448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e43357e4c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e43357e838 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e43357e590 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357e608 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357e6a8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e43357e748 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e4335b0b30 <col:86, line:462:5>
|     `-ReturnStmt 0x55e4335b0b20 <line:461:9, col:73>
|       `-CallExpr 0x55e4335b0ad8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b09c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b0a38 <col:28> 'const char *' lvalue ParmVar 0x55e43357e590 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b0a58 <col:37> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int'
|         |-DeclRefExpr 0x55e4335b0a78 <col:49> 'P' lvalue ParmVar 0x55e43357e608 'parser' 'P'
|         |-DeclRefExpr 0x55e4335b0a98 <col:57> 'T' lvalue ParmVar 0x55e43357e6a8 'x' 'T &'
|         `-DeclRefExpr 0x55e4335b0ab8 <col:60> 'const V' lvalue ParmVar 0x55e43357e748 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e43357ef38 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e43357e950 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357e9c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e43357ea48 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e43357ee98 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e43357eb10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357eb90 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e43357ec08 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357eca8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e43357ed48 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e4335b0cc0 <col:95, line:467:5>
|     |-CallExpr 0x55e4335b0c38 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b0b48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e4335b0b88 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b0b98 <col:37> 'const char *' lvalue ParmVar 0x55e43357eb10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e4335b0bb8 <col:46> 'int' lvalue ParmVar 0x55e43357eb90 'flags' 'int'
|     | |-DeclRefExpr 0x55e4335b0bd8 <col:53> 'P' lvalue ParmVar 0x55e43357ec08 'parser' 'P'
|     | |-DeclRefExpr 0x55e4335b0bf8 <col:61> 'T' lvalue ParmVar 0x55e43357eca8 'x' 'T &'
|     | `-DeclRefExpr 0x55e4335b0c18 <col:64> 'const V' lvalue ParmVar 0x55e43357ed48 'default_value' 'const V &'
|     `-ReturnStmt 0x55e4335b0cb0 <line:466:9, col:17>
|       `-UnaryOperator 0x55e4335b0c98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b0c88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e43357f518 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e43357efb8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357f038 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e43357f0b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e43357f478 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e43357f180 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357f1f8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357f298 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e43357f338 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e4335b0e68 <col:63, line:481:5>
|     `-ReturnStmt 0x55e4335b0e58 <line:480:9, col:47>
|       `-CallExpr 0x55e4335b0e10 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b0cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b0d70 <col:21> 'const char *' lvalue ParmVar 0x55e43357f180 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b0d90 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e4335b0db0 <col:33> 'P' lvalue ParmVar 0x55e43357f1f8 'parser' 'P'
|         |-DeclRefExpr 0x55e4335b0dd0 <col:41> 'T1' lvalue ParmVar 0x55e43357f298 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e4335b0df0 <col:45> 'T2' lvalue ParmVar 0x55e43357f338 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e43357fa98 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e43357f590 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357f608 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e43357f688 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e43357f9f8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e43357f750 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357f7c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357f868 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e43357f908 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e4335b1008 <col:65, line:485:5>
|     `-ReturnStmt 0x55e4335b0ff8 <line:484:9, col:55>
|       `-CallExpr 0x55e4335b0fb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b0e90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b0f10 <col:21> 'const char *' lvalue ParmVar 0x55e43357f750 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b0f30 <col:30> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e4335b0f50 <col:41> 'P' lvalue ParmVar 0x55e43357f7c8 'parser' 'P'
|         |-DeclRefExpr 0x55e4335b0f70 <col:49> 'T1' lvalue ParmVar 0x55e43357f868 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e4335b0f90 <col:53> 'T2' lvalue ParmVar 0x55e43357f908 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e433580018 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e43357fb10 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43357fb88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e43357fc08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e43357ff78 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e43357fcd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43357fd48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e43357fde8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e43357fe88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e4335b11a8 <col:65, line:489:5>
|     `-ReturnStmt 0x55e4335b1198 <line:488:9, col:56>
|       `-CallExpr 0x55e4335b1150 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b1030 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b10b0 <col:21> 'const char *' lvalue ParmVar 0x55e43357fcd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b10d0 <col:30> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int'
|         |-DeclRefExpr 0x55e4335b10f0 <col:42> 'P' lvalue ParmVar 0x55e43357fd48 'parser' 'P'
|         |-DeclRefExpr 0x55e4335b1110 <col:50> 'T1' lvalue ParmVar 0x55e43357fde8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e4335b1130 <col:54> 'T2' lvalue ParmVar 0x55e43357fe88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e433585a78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e433580090 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433580108 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e433585670 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e4335859d8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e433585730 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e4335857a8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e433585848 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e4335858e8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e4335b13f8 <col:66, line:493:5>
|     `-ReturnStmt 0x55e4335b13e8 <line:492:9, col:68>
|       `-CallExpr 0x55e4335b13a0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b11d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b1250 <col:21> 'const char *' lvalue ParmVar 0x55e433585730 'keyword' 'const char *'
|         |-BinaryOperator 0x55e4335b1320 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e4335b12d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e4335b12b0 <col:30> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e4335b1308 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e4335b12e8 <col:42> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e4335b1340 <col:54> 'P' lvalue ParmVar 0x55e4335857a8 'parser' 'P'
|         |-DeclRefExpr 0x55e4335b1360 <col:62> 'T1' lvalue ParmVar 0x55e433585848 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e4335b1380 <col:66> 'T2' lvalue ParmVar 0x55e4335858e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e4335860d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e433585af0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433585b68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e433585be8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e433586038 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e433585cb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433585d30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e433585da8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e433585e48 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e433585ee8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e4335b1588 <col:74, line:498:5>
|     |-CallExpr 0x55e4335b1500 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b1410 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e4335b1450 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b1460 <col:30> 'const char *' lvalue ParmVar 0x55e433585cb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e4335b1480 <col:39> 'int' lvalue ParmVar 0x55e433585d30 'flags' 'int'
|     | |-DeclRefExpr 0x55e4335b14a0 <col:46> 'P' lvalue ParmVar 0x55e433585da8 'parser' 'P'
|     | |-DeclRefExpr 0x55e4335b14c0 <col:54> 'T1' lvalue ParmVar 0x55e433585e48 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e4335b14e0 <col:58> 'T2' lvalue ParmVar 0x55e433585ee8 'x2' 'T2 &'
|     `-ReturnStmt 0x55e4335b1578 <line:497:9, col:17>
|       `-UnaryOperator 0x55e4335b1560 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b1550 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e433586438 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e433586158 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433586398 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e433586210 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433586288 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b16d0 <col:52, line:509:5>
|     `-ReturnStmt 0x55e4335b16c0 <line:508:9, col:44>
|       `-CallExpr 0x55e4335b1688 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b15b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b1628 <col:26> 'const char *' lvalue ParmVar 0x55e433586210 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b1648 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e4335b1668 <col:38> 'P' lvalue ParmVar 0x55e433586288 'parser' 'P'
|-FunctionTemplateDecl 0x55e433586738 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e4335864a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433586698 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e433586550 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e4335865c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b1810 <col:54, line:513:5>
|     `-ReturnStmt 0x55e4335b1800 <line:512:9, col:52>
|       `-CallExpr 0x55e4335b17c8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b16f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b1768 <col:26> 'const char *' lvalue ParmVar 0x55e433586550 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b1788 <col:35> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e4335b17a8 <col:46> 'P' lvalue ParmVar 0x55e4335865c8 'parser' 'P'
|-FunctionTemplateDecl 0x55e433586a38 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e4335867a0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433586998 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e433586850 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e4335868c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b1950 <col:54, line:517:5>
|     `-ReturnStmt 0x55e4335b1940 <line:516:9, col:53>
|       `-CallExpr 0x55e4335b1908 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b1838 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b18a8 <col:26> 'const char *' lvalue ParmVar 0x55e433586850 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b18c8 <col:35> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int'
|         `-DeclRefExpr 0x55e4335b18e8 <col:47> 'P' lvalue ParmVar 0x55e4335868c8 'parser' 'P'
|-FunctionTemplateDecl 0x55e433586d38 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e433586aa0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433586c98 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e433586b50 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433586bc8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b1b40 <col:55, line:521:5>
|     `-ReturnStmt 0x55e4335b1b30 <line:520:9, col:65>
|       `-CallExpr 0x55e4335b1af8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b1978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b19e8 <col:26> 'const char *' lvalue ParmVar 0x55e433586b50 'keyword' 'const char *'
|         |-BinaryOperator 0x55e4335b1ab8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e4335b1a68 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e4335b1a48 <col:35> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e4335b1aa0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e4335b1a80 <col:47> 'const int' lvalue Var 0x55e43357a4d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e4335b1ad8 <col:59> 'P' lvalue ParmVar 0x55e433586bc8 'parser' 'P'
|-FunctionTemplateDecl 0x55e433587108 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e433586da0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433587068 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e433586e50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433586ed0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e433586f48 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b1c80 <col:63, line:526:5>
|     |-CallExpr 0x55e4335b1c08 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b1b58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e4335b1b98 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b1ba8 <col:35> 'const char *' lvalue ParmVar 0x55e433586e50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e4335b1bc8 <col:44> 'int' lvalue ParmVar 0x55e433586ed0 'flags' 'int'
|     | `-DeclRefExpr 0x55e4335b1be8 <col:51> 'P' lvalue ParmVar 0x55e433586f48 'parser' 'P'
|     `-ReturnStmt 0x55e4335b1c70 <line:525:9, col:17>
|       `-UnaryOperator 0x55e4335b1c58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b1c48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e433587558 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e433587178 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e4335871f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e4335874b8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e4335872b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433587330 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e4335873d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b1dd8 <col:58, line:541:5>
|     `-ReturnStmt 0x55e4335b1dc8 <line:540:9, col:39>
|       `-CallExpr 0x55e4335b1d90 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b1cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b1d30 <col:21> 'const char *' lvalue ParmVar 0x55e4335872b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b1d50 <col:30> 'P' lvalue ParmVar 0x55e433587330 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b1d70 <col:38> 'T' lvalue ParmVar 0x55e4335873d8 'x' 'T &'
|-FunctionTemplateDecl 0x55e4335879a8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e4335875c8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433587648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433587908 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e433587708 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433587780 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e433587828 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b1f10 <col:60, line:545:5>
|     `-ReturnStmt 0x55e4335b1f00 <line:544:9, col:41>
|       `-CallExpr 0x55e4335b1ec8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b1e00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b1e68 <col:23> 'const char *' lvalue ParmVar 0x55e433587708 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b1e88 <col:32> 'P' lvalue ParmVar 0x55e433587780 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b1ea8 <col:40> 'T' lvalue ParmVar 0x55e433587828 'x' 'T &'
|-FunctionTemplateDecl 0x55e433587df8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e433587a18 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433587a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433587d58 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e433587b58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433587bd0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e433587c78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b2048 <col:60, line:549:5>
|     `-ReturnStmt 0x55e4335b2038 <line:548:9, col:41>
|       `-CallExpr 0x55e4335b2000 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b1f38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b1fa0 <col:23> 'const char *' lvalue ParmVar 0x55e433587b58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b1fc0 <col:32> 'P' lvalue ParmVar 0x55e433587bd0 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b1fe0 <col:40> 'T' lvalue ParmVar 0x55e433587c78 'x' 'T &'
|-FunctionTemplateDecl 0x55e433588248 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e433587e68 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433587ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e4335881a8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e433587fa8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433588020 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e4335880c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b2180 <col:61, line:553:5>
|     `-ReturnStmt 0x55e4335b2170 <line:552:9, col:42>
|       `-CallExpr 0x55e4335b2138 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b2070 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b20d8 <col:24> 'const char *' lvalue ParmVar 0x55e433587fa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b20f8 <col:33> 'P' lvalue ParmVar 0x55e433588020 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b2118 <col:41> 'T' lvalue ParmVar 0x55e4335880c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e433588728 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e4335882b8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433588338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433588688 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e4335883f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433588478 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e4335884f0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e433588598 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b22f8 <col:69, line:557:5>
|     `-ReturnStmt 0x55e4335b22e8 <line:556:9, col:46>
|       `-CallExpr 0x55e4335b22a8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b21a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b2228 <col:21> 'const char *' lvalue ParmVar 0x55e4335883f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b2248 <col:30> 'int' lvalue ParmVar 0x55e433588478 'flags' 'int'
|         |-DeclRefExpr 0x55e4335b2268 <col:37> 'P' lvalue ParmVar 0x55e4335884f0 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b2288 <col:45> 'T' lvalue ParmVar 0x55e433588598 'x' 'T &'
|-FunctionTemplateDecl 0x55e433588a38 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e4335887a0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433588998 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e433588850 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e4335888c8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b2438 <col:56, line:571:5>
|     `-ReturnStmt 0x55e4335b2428 <line:570:9, col:48>
|       `-CallExpr 0x55e4335b23f0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b2320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b2390 <col:30> 'const char *' lvalue ParmVar 0x55e433588850 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b23b0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e4335b23d0 <col:42> 'P' lvalue ParmVar 0x55e4335888c8 'parser' 'P'
|-FunctionTemplateDecl 0x55e433588dc8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e433588aa0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433588d28 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e433588b50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433588bd0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e433588c48 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e4335b2608 <col:67, line:576:5>
|     |-CallExpr 0x55e4335b2590 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b2450 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e4335b2490 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b24a0 <col:39> 'const char *' lvalue ParmVar 0x55e433588b50 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e4335b2550 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e4335b2500 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e4335b24c0 <col:48> 'int' lvalue ParmVar 0x55e433588bd0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e4335b2538 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e4335b2518 <col:56> 'const int' lvalue Var 0x55e43357a6c0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e4335b2570 <col:68> 'P' lvalue ParmVar 0x55e433588c48 'parser' 'P'
|     `-ReturnStmt 0x55e4335b25f8 <line:575:9, col:17>
|       `-UnaryOperator 0x55e4335b25e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b25d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e433589218 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e433588e38 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433588eb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433589178 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e433588f78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433588ff0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e433589098 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b2778 <col:62, line:592:5>
|     `-ReturnStmt 0x55e4335b2768 <line:591:9, col:51>
|       `-CallExpr 0x55e4335b2728 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b2638 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b26a8 <col:30> 'const char *' lvalue ParmVar 0x55e433588f78 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b26c8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e4335b26e8 <col:42> 'P' lvalue ParmVar 0x55e433588ff0 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b2708 <col:50> 'T' lvalue ParmVar 0x55e433589098 'x' 'T &'
|-FunctionTemplateDecl 0x55e4335896f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e433589288 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433589308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433589658 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e4335893c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433589448 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e4335894c0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e433589568 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b2970 <col:73, line:597:5>
|     |-CallExpr 0x55e4335b28f0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b2790 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e4335b27d0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b27e0 <col:39> 'const char *' lvalue ParmVar 0x55e4335893c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e4335b2890 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e4335b2840 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e4335b2800 <col:48> 'int' lvalue ParmVar 0x55e433589448 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e4335b2878 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e4335b2858 <col:56> 'const int' lvalue Var 0x55e43357a6c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e4335b28b0 <col:68> 'P' lvalue ParmVar 0x55e4335894c0 'parser' 'P'
|     | `-DeclRefExpr 0x55e4335b28d0 <col:76> 'T' lvalue ParmVar 0x55e433589568 'x' 'T &'
|     `-ReturnStmt 0x55e4335b2960 <line:596:9, col:17>
|       `-UnaryOperator 0x55e4335b2948 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b2938 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e433589ca8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e433589770 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e4335897e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433589c08 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e4335898a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433589920 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e433589ae0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e4335b2ae0 <col:65, line:614:5>
|     `-ReturnStmt 0x55e4335b2ad0 <line:613:9, col:46>
|       `-CallExpr 0x55e4335b2a90 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b29a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b2a10 <col:25> 'const char *' lvalue ParmVar 0x55e4335898a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b2a30 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e4335b2a50 <col:37> 'P' lvalue ParmVar 0x55e433589920 'parser' 'P'
|         `-DeclRefExpr 0x55e4335b2a70 <col:45> 'Vector<T>' lvalue ParmVar 0x55e433589ae0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e43358a0d8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e433589d18 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43358a038 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e433589dd0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433589f20 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e4335b2d00 <col:55, line:618:5>
|     `-ReturnStmt 0x55e4335b2cf0 <line:617:9, col:55>
|       `-CallExpr 0x55e4335b2cb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b2b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b2b78 <col:25> 'const char *' lvalue ParmVar 0x55e433589dd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e4335b2b98 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e4335b2c70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e4335b2c90 <col:54> 'Vector<T>' lvalue ParmVar 0x55e433589f20 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e43358a6a8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e43358a140 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43358a1b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43358a608 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e43358a278 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43358a2f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e43358a370 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e43358a4c0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e4335b2ef8 <col:76, line:623:5>
|     |-CallExpr 0x55e4335b2e78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e4335b2d18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e4335b2d58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e4335b2d68 <col:34> 'const char *' lvalue ParmVar 0x55e43358a278 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e4335b2e18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e4335b2dc8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e4335b2d88 <col:43> 'int' lvalue ParmVar 0x55e43358a2f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e4335b2e00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e4335b2de0 <col:51> 'const int' lvalue Var 0x55e43357a6c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e4335b2e38 <col:63> 'P' lvalue ParmVar 0x55e43358a370 'parser' 'P'
|     | `-DeclRefExpr 0x55e4335b2e58 <col:71> 'Vector<T>' lvalue ParmVar 0x55e43358a4c0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e4335b2ee8 <line:622:9, col:17>
|       `-UnaryOperator 0x55e4335b2ed0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b2ec0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e43358abe8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e43358a720 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43358a798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43358ab48 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e43358a858 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43358a8d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e43358aa20 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e4335b3160 <col:66, line:627:5>
|     `-ReturnStmt 0x55e4335b3150 <line:626:9, col:59>
|       `-CallExpr 0x55e4335b3110 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e4335b2f28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e4335b2f98 <col:25> 'const char *' lvalue ParmVar 0x55e43358a858 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e4335b2fb8 <col:34> 'int' lvalue ParmVar 0x55e43358a8d8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e4335b30d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e4335b30f0 <col:58> 'Vector<T>' lvalue ParmVar 0x55e43358aa20 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e43358ac78 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e4335b31e0 <col:25, line:633:5>
|   `-ReturnStmt 0x55e4335b31d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e4335b31b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e4335b3188 <col:16> 'const bool' lvalue ->_status 0x55e433598728
|         `-CXXThisExpr 0x55e4335b3178 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e43358adf8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e43358ad30 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e4335b32c8 <col:27, line:639:5>
|   |-BinaryOperator 0x55e4335b3270 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e4335b31f8 <col:9> 'bool' lvalue ParmVar 0x55e43358ad30 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e4335b3258 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e4335b3228 <col:13> 'bool' lvalue ->_status 0x55e433598728
|   |     `-CXXThisExpr 0x55e4335b3218 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e4335b32b8 <line:638:9, col:17>
|     `-UnaryOperator 0x55e4335b32a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4335b3290 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e43358af78 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e43358aeb8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e4335b33b8 <col:39, line:644:5>
|   |-BinaryOperator 0x55e4335b3360 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e4335b32e8 <col:9> 'bool' lvalue ParmVar 0x55e43358aeb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e4335b3348 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e4335b3318 <col:13> 'const bool' lvalue ->_status 0x55e433598728
|   |     `-CXXThisExpr 0x55e4335b3308 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e4335b33a8 <line:643:9, col:17>
|     `-UnaryOperator 0x55e4335b3390 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4335b3380 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e43358b040 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e4335b3460 <col:30, line:651:5>
|   `-ReturnStmt 0x55e4335b3450 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e4335b3438 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e4335b3408 <col:16> 'bool' lvalue ->_read_status 0x55e43348e790
|         `-ImplicitCastExpr 0x55e4335b33e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e4335b33d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e43358b188 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e43358b0f8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e4335b3568 <col:32, line:658:5>
|   |-BinaryOperator 0x55e4335b3510 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e4335b3478 <col:9> 'bool' lvalue ParmVar 0x55e43358b0f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e4335b34f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e4335b34c8 <col:13> 'bool' lvalue ->_read_status 0x55e43348e790
|   |     `-ImplicitCastExpr 0x55e4335b34a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e4335b3498 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e4335b3558 <line:657:9, col:17>
|     `-UnaryOperator 0x55e4335b3540 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4335b3530 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e43358b2d8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e43358b248 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e4335b3678 <col:44, line:663:5>
|   |-BinaryOperator 0x55e4335b3620 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e4335b3588 <col:9> 'bool' lvalue ParmVar 0x55e43358b248 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e4335b3608 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e4335b35d8 <col:13> 'bool' lvalue ->_read_status 0x55e43348e790
|   |     `-ImplicitCastExpr 0x55e4335b35b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e4335b35a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e4335b3668 <line:662:9, col:17>
|     `-UnaryOperator 0x55e4335b3650 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4335b3640 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e43358b3a0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e43358b468 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e43358b530 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e43358b5f8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e43358b908 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e43358b698 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43358b868 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e43358b778 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b3a30 <col:19, line:706:5>
|     `-IfStmt 0x55e4335b3a08 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e4335b3778 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e4335b3938 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e4335b3908 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e4335b38c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e4335b37d0 <col:42> '<bound member function type>' ->simple_slot 0x55e4335acb40
|       |     | `-CXXThisExpr 0x55e4335b37c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e4335b3868 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e4335b3820 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e433318558
|       |     | `-DeclRefExpr 0x55e4335b3800 <col:55> 'T' lvalue ParmVar 0x55e43358b778 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e4335b38a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e4335b39f8 <line:705:13, col:34>
|         `-CallExpr 0x55e4335b39d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e4335b3958 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e4335b39b0 <col:33> 'T' lvalue ParmVar 0x55e43358b778 'x' 'T &'
|-FunctionTemplateDecl 0x55e43358bbd8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e43358b968 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43358bb38 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e43358ba48 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e4335b3e10 <col:31, line:717:5>
|     |-DeclStmt 0x55e4335b3b70 <line:713:9, col:23>
|     | `-VarDecl 0x55e4335b3a58 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e4335b3b48 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e4335b3ad0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e4335b3b28 <col:21> 'T' lvalue ParmVar 0x55e43358ba48 'x' 'T &'
|     |-IfStmt 0x55e4335b3dc0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e4335b3c68 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e4335b3da0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e4335b3d40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e4335b3cd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|     |   | `-DeclRefExpr 0x55e4335b3cb0 <col:14> 'T *' lvalue Var 0x55e4335b3a58 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e4335b3d80 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e4335b3df8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e4335b3dd8 <col:16> 'T *' lvalue Var 0x55e4335b3a58 's' 'T *'
|-FunctionTemplateDecl 0x55e43358bfe8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e43358bc38 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e43358bcb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e43358bf48 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e43358bd98 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e43358be38 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e4335b4120 <col:37, line:726:5>
|     |-IfStmt 0x55e4335b40b0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e4335b40d0 <line:723:13, col:26>
|     | | `-VarDecl 0x55e4335b3e78 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e4335b3f68 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e4335b3ef0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e4335b3f48 <col:25> 'T' lvalue ParmVar 0x55e43358bd98 'x' 'T &'
|     | |-DeclRefExpr 0x55e4335b3f90 <col:16> 'T *' lvalue Var 0x55e4335b3e78 's' 'T *'
|     | `-BinaryOperator 0x55e4335b4090 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e4335b4040 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e4335b3fd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|     |   | `-DeclRefExpr 0x55e4335b3fb0 <col:14> 'T *' lvalue Var 0x55e4335b3e78 's' 'T *'
|     |   `-DeclRefExpr 0x55e4335b4070 <col:18> 'const V' lvalue ParmVar 0x55e43358be38 'value' 'const V &'
|     `-ReturnStmt 0x55e4335b4110 <line:725:9, col:17>
|       `-UnaryOperator 0x55e4335b40f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e4335b40e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e43358c3e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e43358c050 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e43358c348 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e43358c100 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43358c180 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e43358c228 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e4335b4f40 <col:65, line:737:5>
|     |-DeclStmt 0x55e4335b41b8 <line:732:9, col:26>
|     | `-VarDecl 0x55e4335b4150 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e4335b4f08 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e4335b4f28 <line:733:13, col:58>
|       | `-VarDecl 0x55e4335b41e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e4335b43c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e4335b4390 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e4335b4378 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e4335b4358 <col:26, col:58> 'String' (CXXTemporary 0x55e4335b4358)
|       |           `-CXXMemberCallExpr 0x55e4335b42e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e4335b4258 <col:26> '<bound member function type>' ->find 0x55e4335ac158
|       |             | `-CXXThisExpr 0x55e4335b4248 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e4335b4320 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335b4288 <col:31> 'const char *' lvalue ParmVar 0x55e43358c100 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e4335b4338 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335b42a8 <col:40> 'int' lvalue ParmVar 0x55e43358c180 'flags' 'int'
|       |             `-DeclRefExpr 0x55e4335b42c8 <col:47> 'Args::Slot *' lvalue Var 0x55e4335b4150 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e4335b4478 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e4335b4460 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e4335b4440 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e4335b4410 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |       `-ImplicitCastExpr 0x55e4335b43f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e4335b43d8 <col:20> 'String' lvalue Var 0x55e4335b41e0 'str' 'String'
|       `-CompoundStmt 0x55e4335b4ee8 <col:61, line:736:9>
|         |-DeclStmt 0x55e4335b4930 <line:734:13, col:76>
|         | `-VarDecl 0x55e4335b44c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e4335b4900 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e4335b4870 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e4335b48b8 <col:60> 'T' lvalue ParmVar 0x55e43358c228 'variable' 'T &'
|         |     `-UnaryOperator 0x55e4335b48e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e4335b48d8 <col:71> 'Args *' this
|         `-CallExpr 0x55e4335b4eb8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e4335b4958 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|           | `-CXXThisExpr 0x55e4335b4948 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e4335b4e78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e4335b4988 <col:23> 'T *' lvalue Var 0x55e4335b44c8 's' 'T *'
|           | `-CallExpr 0x55e4335b4e38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e4335b4c10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e4335b4d10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e4335b4d30 <col:86> 'String' lvalue Var 0x55e4335b41e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e4335b4de0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e4335b4d70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|           |   | `-DeclRefExpr 0x55e4335b4d50 <col:92> 'T *' lvalue Var 0x55e4335b44c8 's' 'T *'
|           |   `-UnaryOperator 0x55e4335b4e20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e4335b4e10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e4335b4e98 <col:103> 'Args::Slot *' lvalue Var 0x55e4335b4150 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e43358c938 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e43358c458 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e43358c4d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e43358c898 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e43358c598 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43358c618 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e43358c6b8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e43358c758 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e4335b5de0 <col:88, line:745:5>
|     |-DeclStmt 0x55e4335b4fd8 <line:741:9, col:26>
|     | `-VarDecl 0x55e4335b4f70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e4335b51f8 <line:742:9, col:55>
|     | `-VarDecl 0x55e4335b5000 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e4335b51e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e4335b51b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e4335b5198 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e4335b5178 <col:22, col:54> 'String' (CXXTemporary 0x55e4335b5178)
|     |           `-CXXMemberCallExpr 0x55e4335b5108 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e4335b5078 <col:22> '<bound member function type>' ->find 0x55e4335ac158
|     |             | `-CXXThisExpr 0x55e4335b5068 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e4335b5140 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e4335b50a8 <col:27> 'const char *' lvalue ParmVar 0x55e43358c598 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e4335b5158 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e4335b50c8 <col:36> 'int' lvalue ParmVar 0x55e43358c618 'flags' 'int'
|     |             `-DeclRefExpr 0x55e4335b50e8 <col:43> 'Args::Slot *' lvalue Var 0x55e4335b4f70 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e4335b55d0 <line:743:9, col:72>
|     | `-VarDecl 0x55e4335b5248 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e4335b55a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e4335b5510 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e4335b5558 <col:56> 'T' lvalue ParmVar 0x55e43358c6b8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e4335b5588 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e4335b5578 <col:67> 'Args *' this
|     `-CallExpr 0x55e4335b5db0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e4335b55f8 <col:9> '<bound member function type>' ->postparse 0x55e4335ac368
|       | `-CXXThisExpr 0x55e4335b55e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e4335b5d70 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e4335b5628 <col:19> 'T *' lvalue Var 0x55e4335b5248 's' 'T *'
|       | `-ParenExpr 0x55e4335b5d50 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e4335b5d20 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e4335b5d08 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e4335b5cf0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e4335b5cd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e4335b5ca0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |     |       `-ImplicitCastExpr 0x55e4335b5c88 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e4335b5648 <col:25> 'String' lvalue Var 0x55e4335b5000 'str' 'String'
|       |     |-CallExpr 0x55e4335b5af8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e4335b58d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e4335b59d0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e4335b59f0 <col:89> 'String' lvalue Var 0x55e4335b5000 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e4335b5aa0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e4335b5a30 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|       |     | | `-DeclRefExpr 0x55e4335b5a10 <col:95> 'T *' lvalue Var 0x55e4335b5248 's' 'T *'
|       |     | `-UnaryOperator 0x55e4335b5ae0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e4335b5ad0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e4335b5c68 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e4335b5c48 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e4335b5c18 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e4335b5bc8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e4335b5b58 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|       |         | | `-DeclRefExpr 0x55e4335b5b38 <col:109> 'T *' lvalue Var 0x55e4335b5248 's' 'T *'
|       |         | `-DeclRefExpr 0x55e4335b5bf8 <col:113> 'const V' lvalue ParmVar 0x55e43358c758 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e4335b5c38 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e4335b5d90 <col:128> 'Args::Slot *' lvalue Var 0x55e4335b4f70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e43358ce68 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e43358c9b0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43358ca28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e43358cdc8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e43358cae8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43358cb68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e43358cbe0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e43358cc88 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e4335b69d8 <col:75, line:754:5>
|     |-DeclStmt 0x55e4335b5e88 <line:749:9, col:26>
|     | `-VarDecl 0x55e4335b5e20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e4335b69a0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e4335b69c0 <line:750:13, col:58>
|       | `-VarDecl 0x55e4335b5eb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e4335b6090 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e4335b6060 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e4335b6048 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e4335b6028 <col:26, col:58> 'String' (CXXTemporary 0x55e4335b6028)
|       |           `-CXXMemberCallExpr 0x55e4335b5fb8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e4335b5f28 <col:26> '<bound member function type>' ->find 0x55e4335ac158
|       |             | `-CXXThisExpr 0x55e4335b5f18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e4335b5ff0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335b5f58 <col:31> 'const char *' lvalue ParmVar 0x55e43358cae8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e4335b6008 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335b5f78 <col:40> 'int' lvalue ParmVar 0x55e43358cb68 'flags' 'int'
|       |             `-DeclRefExpr 0x55e4335b5f98 <col:47> 'Args::Slot *' lvalue Var 0x55e4335b5e20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e4335b6148 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e4335b6130 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e4335b6110 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e4335b60e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |       `-ImplicitCastExpr 0x55e4335b60c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e4335b60a8 <col:20> 'String' lvalue Var 0x55e4335b5eb0 'str' 'String'
|       `-CompoundStmt 0x55e4335b6980 <col:61, line:753:9>
|         |-DeclStmt 0x55e4335b6520 <line:751:13, col:63>
|         | `-VarDecl 0x55e4335b6198 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e4335b64f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e4335b6460 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e4335b64a8 <col:47> 'T' lvalue ParmVar 0x55e43358cc88 'variable' 'T &'
|         |     `-UnaryOperator 0x55e4335b64d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e4335b64c8 <col:58> 'Args *' this
|         `-CallExpr 0x55e4335b6950 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e4335b6548 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|           | `-CXXThisExpr 0x55e4335b6538 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e4335b6910 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e4335b6578 <col:23> 'T *' lvalue Var 0x55e4335b6198 's' 'T *'
|           | `-CallExpr 0x55e4335b68d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e4335b6760 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e4335b67a8 <col:56> 'P' lvalue ParmVar 0x55e43358cbe0 'parser' 'P'
|           |   |-DeclRefExpr 0x55e4335b67c8 <col:64> 'String' lvalue Var 0x55e4335b5eb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e4335b6878 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e4335b6808 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|           |   | `-DeclRefExpr 0x55e4335b67e8 <col:70> 'T *' lvalue Var 0x55e4335b6198 's' 'T *'
|           |   `-UnaryOperator 0x55e4335b68b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e4335b68a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e4335b6930 <col:81> 'Args::Slot *' lvalue Var 0x55e4335b5e20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e43358d4c8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e43358cee0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e43358cf58 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e43358cfd8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e43358d428 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e43358d0a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e43358d120 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e43358d198 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e43358d238 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e43358d2d8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e4335baa68 <col:98, line:762:5>
|     |-DeclStmt 0x55e4335b6a70 <line:758:9, col:26>
|     | `-VarDecl 0x55e4335b6a08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e4335b6c90 <line:759:9, col:55>
|     | `-VarDecl 0x55e4335b6a98 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e4335b6c78 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e4335b6c48 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e4335b6c30 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e4335b6c10 <col:22, col:54> 'String' (CXXTemporary 0x55e4335b6c10)
|     |           `-CXXMemberCallExpr 0x55e4335b6ba0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e4335b6b10 <col:22> '<bound member function type>' ->find 0x55e4335ac158
|     |             | `-CXXThisExpr 0x55e4335b6b00 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e4335b6bd8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e4335b6b40 <col:27> 'const char *' lvalue ParmVar 0x55e43358d0a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e4335b6bf0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e4335b6b60 <col:36> 'int' lvalue ParmVar 0x55e43358d120 'flags' 'int'
|     |             `-DeclRefExpr 0x55e4335b6b80 <col:43> 'Args::Slot *' lvalue Var 0x55e4335b6a08 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e4335ba3b0 <line:760:9, col:59>
|     | `-VarDecl 0x55e4335b6ce8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e4335ba380 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e4335ba2f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e4335ba338 <col:43> 'T' lvalue ParmVar 0x55e43358d238 'variable' 'T &'
|     |     `-UnaryOperator 0x55e4335ba368 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e4335ba358 <col:54> 'Args *' this
|     `-CallExpr 0x55e4335baa38 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e4335ba3d8 <col:9> '<bound member function type>' ->postparse 0x55e4335ac368
|       | `-CXXThisExpr 0x55e4335ba3c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e4335ba9f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e4335ba408 <col:19> 'T *' lvalue Var 0x55e4335b6ce8 's' 'T *'
|       | `-ParenExpr 0x55e4335ba9d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e4335ba9a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e4335ba990 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e4335ba978 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e4335ba958 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e4335ba928 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |     |       `-ImplicitCastExpr 0x55e4335ba910 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e4335ba428 <col:25> 'String' lvalue Var 0x55e4335b6a98 'str' 'String'
|       |     |-CallExpr 0x55e4335ba780 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e4335ba610 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e4335ba658 <col:59> 'P' lvalue ParmVar 0x55e43358d198 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e4335ba678 <col:67> 'String' lvalue Var 0x55e4335b6a98 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e4335ba728 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e4335ba6b8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|       |     | | `-DeclRefExpr 0x55e4335ba698 <col:73> 'T *' lvalue Var 0x55e4335b6ce8 's' 'T *'
|       |     | `-UnaryOperator 0x55e4335ba768 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e4335ba758 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e4335ba8f0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e4335ba8d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e4335ba8a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e4335ba850 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e4335ba7e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|       |         | | `-DeclRefExpr 0x55e4335ba7c0 <col:87> 'T *' lvalue Var 0x55e4335b6ce8 's' 'T *'
|       |         | `-DeclRefExpr 0x55e4335ba880 <col:91> 'const V' lvalue ParmVar 0x55e43358d2d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e4335ba8c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e4335baa18 <col:106> 'Args::Slot *' lvalue Var 0x55e4335b6a08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e4335957a8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e43358d548 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e43358d5c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e4335952c0 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e433595708 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e433595380 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433595400 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e433595478 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e433595518 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e4335955b8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e4335bba48 <col:60, line:773:5>
|     |-DeclStmt 0x55e4335bab10 <line:767:9, col:26>
|     | `-VarDecl 0x55e4335baaa8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e4335bba10 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e4335bba30 <line:768:13, col:58>
|       | `-VarDecl 0x55e4335bab38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e4335bad18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e4335bace8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e4335bacd0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e4335bacb0 <col:26, col:58> 'String' (CXXTemporary 0x55e4335bacb0)
|       |           `-CXXMemberCallExpr 0x55e4335bac40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e4335babb0 <col:26> '<bound member function type>' ->find 0x55e4335ac158
|       |             | `-CXXThisExpr 0x55e4335baba0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e4335bac78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335babe0 <col:31> 'const char *' lvalue ParmVar 0x55e433595380 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e4335bac90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335bac00 <col:40> 'int' lvalue ParmVar 0x55e433595400 'flags' 'int'
|       |             `-DeclRefExpr 0x55e4335bac20 <col:47> 'Args::Slot *' lvalue Var 0x55e4335baaa8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e4335badd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e4335badb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e4335bad98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e4335bad68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |       `-ImplicitCastExpr 0x55e4335bad50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e4335bad30 <col:20> 'String' lvalue Var 0x55e4335bab38 'str' 'String'
|       `-CompoundStmt 0x55e4335bb9e8 <col:61, line:772:9>
|         |-DeclStmt 0x55e4335bb110 <line:769:13, col:66>
|         | `-VarDecl 0x55e4335bae28 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e4335bb0e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e4335bb050 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e4335bb098 <col:49> 'T1' lvalue ParmVar 0x55e433595518 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e4335bb0c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e4335bb0b8 <col:61> 'Args *' this
|         |-DeclStmt 0x55e4335bb480 <line:770:13, col:66>
|         | `-VarDecl 0x55e4335bb198 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e4335bb450 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e4335bb3c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e4335bb408 <col:49> 'T2' lvalue ParmVar 0x55e4335955b8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e4335bb438 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e4335bb428 <col:61> 'Args *' this
|         `-CallExpr 0x55e4335bb9b8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e4335bb4a8 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|           | `-CXXThisExpr 0x55e4335bb498 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e4335bb978 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e4335bb518 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e4335bb4d8 <col:23> 'T1 *' lvalue Var 0x55e4335bae28 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e4335bb4f8 <col:29> 'T2 *' lvalue Var 0x55e4335bb198 's2' 'T2 *'
|           | `-CallExpr 0x55e4335bb930 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e4335bb700 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e4335bb748 <col:63> 'P' lvalue ParmVar 0x55e433595478 'parser' 'P'
|           |   |-DeclRefExpr 0x55e4335bb768 <col:71> 'String' lvalue Var 0x55e4335bab38 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e4335bb818 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e4335bb7a8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|           |   | `-DeclRefExpr 0x55e4335bb788 <col:77> 'T1 *' lvalue Var 0x55e4335bae28 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e4335bb8d8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e4335bb868 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|           |   | `-DeclRefExpr 0x55e4335bb848 <col:82> 'T2 *' lvalue Var 0x55e4335bb198 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e4335bb918 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e4335bb908 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e4335bb998 <col:94> 'Args::Slot *' lvalue Var 0x55e4335baaa8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e433595b98 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e433595828 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433595af8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e4335958e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433595960 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e4335959d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e4335bbf60 <col:67, line:780:5>
|     |-DeclStmt 0x55e4335bbae0 <line:777:9, col:26>
|     | `-VarDecl 0x55e4335bba78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e4335bbf28 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e4335bbf48 <line:778:13, col:58>
|       | `-VarDecl 0x55e4335bbb08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e4335bbce8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e4335bbcb8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e4335bbca0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e4335bbc80 <col:26, col:58> 'String' (CXXTemporary 0x55e4335bbc80)
|       |           `-CXXMemberCallExpr 0x55e4335bbc10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e4335bbb80 <col:26> '<bound member function type>' ->find 0x55e4335ac158
|       |             | `-CXXThisExpr 0x55e4335bbb70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e4335bbc48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335bbbb0 <col:31> 'const char *' lvalue ParmVar 0x55e4335958e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e4335bbc60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e4335bbbd0 <col:40> 'int' lvalue ParmVar 0x55e433595960 'flags' 'int'
|       |             `-DeclRefExpr 0x55e4335bbbf0 <col:47> 'Args::Slot *' lvalue Var 0x55e4335bba78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e4335bbda0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e4335bbd88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e4335bbd68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e4335bbd38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|       |       `-ImplicitCastExpr 0x55e4335bbd20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e4335bbd00 <col:20> 'String' lvalue Var 0x55e4335bbb08 'str' 'String'
|       `-CallExpr 0x55e4335bbef8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e4335bbdc8 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|         | `-CXXThisExpr 0x55e4335bbdb8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e4335bbea8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e4335bbe18 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e4335bbdf8 <col:23> 'P' lvalue ParmVar 0x55e4335959d8 'parser' 'P'
|         | |-DeclRefExpr 0x55e4335bbe60 <col:36> 'String' lvalue Var 0x55e4335bbb08 'str' 'String'
|         | `-UnaryOperator 0x55e4335bbe90 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e4335bbe80 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e4335bbed8 <col:49> 'Args::Slot *' lvalue Var 0x55e4335bba78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e433595f38 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e433595c08 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e433595e98 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e433595cc0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433595d40 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e433595db8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e4335bc8d0 <col:71, line:792:5>
|     |-DeclStmt 0x55e4335bbff8 <line:784:9, col:26>
|     | `-VarDecl 0x55e4335bbf90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e4335bc0c8 <line:785:9, col:29>
|     | `-VarDecl 0x55e4335bc028 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e4335bc0b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e4335bc090 <col:28> 'int' 1
|     |-WhileStmt 0x55e4335bc780 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e4335bc7a0 <line:786:16, col:61>
|     | | `-VarDecl 0x55e4335bc0f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e4335bc2d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e4335bc2a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e4335bc288 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e4335bc268 <col:29, col:61> 'String' (CXXTemporary 0x55e4335bc268)
|     | |           `-CXXMemberCallExpr 0x55e4335bc1f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e4335bc168 <col:29> '<bound member function type>' ->find 0x55e4335ac158
|     | |             | `-CXXThisExpr 0x55e4335bc158 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e4335bc230 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e4335bc198 <col:34> 'const char *' lvalue ParmVar 0x55e433595cc0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e4335bc248 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e4335bc1b8 <col:43> 'int' lvalue ParmVar 0x55e433595d40 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e4335bc1d8 <col:50> 'Args::Slot *' lvalue Var 0x55e4335bbf90 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e4335bc388 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e4335bc370 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e4335bc350 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e4335bc320 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|     | |       `-ImplicitCastExpr 0x55e4335bc308 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e4335bc2e8 <col:23> 'String' lvalue Var 0x55e4335bc0f0 'str' 'String'
|     | `-CompoundStmt 0x55e4335bc758 <col:64, line:790:9>
|     |   |-CallExpr 0x55e4335bc4e0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e4335bc3b0 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|     |   | | `-CXXThisExpr 0x55e4335bc3a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e4335bc490 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e4335bc400 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e4335bc3e0 <col:23> 'P' lvalue ParmVar 0x55e433595db8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e4335bc448 <col:36> 'String' lvalue Var 0x55e4335bc0f0 'str' 'String'
|     |   | | `-UnaryOperator 0x55e4335bc478 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e4335bc468 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e4335bc4c0 <col:49> 'Args::Slot *' lvalue Var 0x55e4335bbf90 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e4335bc678 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e4335bc510 <col:13> 'int' lvalue Var 0x55e4335bc028 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e4335bc660 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e4335bc640 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e4335bc5a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e4335bc588 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e4335bc570 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e4335bc530 <col:28> 'int' lvalue Var 0x55e4335bc028 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e4335bc550 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e4335bc628 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e4335bc5f8 <col:49> 'bool' lvalue ->_read_status 0x55e43348e790
|     |   |         `-ImplicitCastExpr 0x55e4335bc5d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e4335bc5c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e4335bc728 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e4335bc698 <col:13> 'int' lvalue ParmVar 0x55e433595d40 'flags' 'int'
|     |     `-UnaryOperator 0x55e4335bc710 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e4335bc6f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e4335bc6d8 <col:23> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e4335bc8b0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e4335bc7e8 <col:9> 'bool' lvalue ->_read_status 0x55e43348e790
|       | `-ImplicitCastExpr 0x55e4335bc7c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e4335bc7b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e4335bc890 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e4335bc870 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e4335bc858 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e4335bc818 <col:25> 'int' lvalue Var 0x55e4335bc028 'read_status' 'int'
|           `-IntegerLiteral 0x55e4335bc838 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e433596418 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e433595fa8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433596028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433596378 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e4335960e8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433596168 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e4335961e0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e433596288 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e4335bd860 <col:84, line:805:5>
|     |-DeclStmt 0x55e4335bc978 <line:796:9, col:26>
|     | `-VarDecl 0x55e4335bc910 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e4335bca48 <line:797:9, col:29>
|     | `-VarDecl 0x55e4335bc9a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e4335bca30 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e4335bca10 <col:28> 'int' 1
|     |-DeclStmt 0x55e4335bcd80 <line:798:9, col:71>
|     | `-VarDecl 0x55e4335bca98 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e4335bcd50 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e4335bccc0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e4335bcd08 <col:55> 'T' lvalue ParmVar 0x55e433596288 'variable' 'T &'
|     |     `-UnaryOperator 0x55e4335bcd38 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e4335bcd28 <col:66> 'Args *' this
|     |-WhileStmt 0x55e4335bd710 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e4335bd730 <line:799:16, col:61>
|     | | `-VarDecl 0x55e4335bcda8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e4335bcf88 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e4335bcf58 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e4335bcf40 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e4335bcf20 <col:29, col:61> 'String' (CXXTemporary 0x55e4335bcf20)
|     | |           `-CXXMemberCallExpr 0x55e4335bceb0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e4335bce20 <col:29> '<bound member function type>' ->find 0x55e4335ac158
|     | |             | `-CXXThisExpr 0x55e4335bce10 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e4335bcee8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e4335bce50 <col:34> 'const char *' lvalue ParmVar 0x55e4335960e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e4335bcf00 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e4335bce70 <col:43> 'int' lvalue ParmVar 0x55e433596168 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e4335bce90 <col:50> 'Args::Slot *' lvalue Var 0x55e4335bc910 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e4335bd040 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e4335bd028 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e4335bd008 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e4335bcfd8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|     | |       `-ImplicitCastExpr 0x55e4335bcfc0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e4335bcfa0 <col:23> 'String' lvalue Var 0x55e4335bcda8 'str' 'String'
|     | `-CompoundStmt 0x55e4335bd6e8 <col:64, line:803:9>
|     |   |-CallExpr 0x55e4335bd470 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e4335bd068 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|     |   | | `-CXXThisExpr 0x55e4335bd058 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e4335bd430 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e4335bd098 <col:23> 'T *' lvalue Var 0x55e4335bca98 's' 'T *'
|     |   | | `-CallExpr 0x55e4335bd3f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e4335bd280 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e4335bd2c8 <col:56> 'P' lvalue ParmVar 0x55e4335961e0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e4335bd2e8 <col:64> 'String' lvalue Var 0x55e4335bcda8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e4335bd398 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e4335bd328 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|     |   | |   | `-DeclRefExpr 0x55e4335bd308 <col:70> 'T *' lvalue Var 0x55e4335bca98 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e4335bd3d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e4335bd3c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e4335bd450 <col:81> 'Args::Slot *' lvalue Var 0x55e4335bc910 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e4335bd608 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e4335bd4a0 <col:13> 'int' lvalue Var 0x55e4335bc9a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e4335bd5f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e4335bd5d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e4335bd538 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e4335bd518 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e4335bd500 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e4335bd4c0 <col:28> 'int' lvalue Var 0x55e4335bc9a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e4335bd4e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e4335bd5b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e4335bd588 <col:49> 'bool' lvalue ->_read_status 0x55e43348e790
|     |   |         `-ImplicitCastExpr 0x55e4335bd568 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e4335bd558 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e4335bd6b8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e4335bd628 <col:13> 'int' lvalue ParmVar 0x55e433596168 'flags' 'int'
|     |     `-UnaryOperator 0x55e4335bd6a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e4335bd688 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e4335bd668 <col:23> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e4335bd840 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e4335bd778 <col:9> 'bool' lvalue ->_read_status 0x55e43348e790
|       | `-ImplicitCastExpr 0x55e4335bd758 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e4335bd748 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e4335bd820 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e4335bd800 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e4335bd7e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e4335bd7a8 <col:25> 'int' lvalue Var 0x55e4335bc9a8 'read_status' 'int'
|           `-IntegerLiteral 0x55e4335bd7c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e4335969f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e433596490 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e433596508 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e433596958 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e4335965c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e433596648 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e4335966c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e433596810 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e4335be668 <col:87, line:821:5>
|     |-DeclStmt 0x55e4335bd910 <line:809:9, col:26>
|     | `-VarDecl 0x55e4335bd8a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e4335bd9e0 <line:810:9, col:29>
|     | `-VarDecl 0x55e4335bd940 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e4335bd9c8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e4335bd9a8 <col:28> 'int' 1
|     |-DeclStmt 0x55e4335bdc28 <line:811:9, col:38>
|     | `-VarDecl 0x55e4335bdb10 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e4335bdc00 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e4335bdb88 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e4335bdbe0 <col:29> 'Vector<T>' lvalue ParmVar 0x55e433596810 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e4335be518 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e4335be538 <line:812:16, col:61>
|     | | `-VarDecl 0x55e4335bdc50 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e4335bde30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e4335bde00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e4335bdde8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e4335bddc8 <col:29, col:61> 'String' (CXXTemporary 0x55e4335bddc8)
|     | |           `-CXXMemberCallExpr 0x55e4335bdd58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e4335bdcc8 <col:29> '<bound member function type>' ->find 0x55e4335ac158
|     | |             | `-CXXThisExpr 0x55e4335bdcb8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e4335bdd90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e4335bdcf8 <col:34> 'const char *' lvalue ParmVar 0x55e4335965c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e4335bdda8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e4335bdd18 <col:43> 'int' lvalue ParmVar 0x55e433596648 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e4335bdd38 <col:50> 'Args::Slot *' lvalue Var 0x55e4335bd8a8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e4335bdee8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e4335bded0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e4335bdeb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e4335bde80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e4332db528
|     | |       `-ImplicitCastExpr 0x55e4335bde68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e4335bde48 <col:23> 'String' lvalue Var 0x55e4335bdc50 'str' 'String'
|     | `-CompoundStmt 0x55e4335be4e0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e4335bdfa8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e4335bdf10 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e4335bdf88 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e4335be128 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e4335bdfd0 <col:13> '<bound member function type>' ->postparse 0x55e4335ac368
|     |   | | `-CXXThisExpr 0x55e4335bdfc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e4335be0d0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e4335be020 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e4335be000 <col:23> 'P' lvalue ParmVar 0x55e4335966c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e4335be068 <col:36> 'String' lvalue Var 0x55e4335bdc50 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e4335be088 <col:41> 'T' lvalue Var 0x55e4335bdf10 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e4335be0b8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e4335be0a8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e4335be108 <col:53> 'Args::Slot *' lvalue Var 0x55e4335bd8a8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e4335be280 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e4335be1b8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e4335be188 <col:17> 'bool' lvalue ->_read_status 0x55e43348e790
|     |   | |   `-ImplicitCastExpr 0x55e4335be168 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e4335be158 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e4335be258 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e4335be1f0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e4335be1d0 <col:17> 'Vector<T> *' lvalue Var 0x55e4335bdb10 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e4335be238 <col:30> 'T' lvalue Var 0x55e4335bdf10 'sx' 'T'
|     |   |-BinaryOperator 0x55e4335be400 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e4335be298 <col:13> 'int' lvalue Var 0x55e4335bd940 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e4335be3e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e4335be3c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e4335be330 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e4335be310 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e4335be2f8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e4335be2b8 <col:28> 'int' lvalue Var 0x55e4335bd940 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e4335be2d8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e4335be3b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e4335be380 <col:49> 'bool' lvalue ->_read_status 0x55e43348e790
|     |   |         `-ImplicitCastExpr 0x55e4335be360 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e4335be350 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e4335be4b0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e4335be420 <col:13> 'int' lvalue ParmVar 0x55e433596648 'flags' 'int'
|     |     `-UnaryOperator 0x55e4335be498 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e4335be480 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e4335be460 <col:23> 'const int' lvalue Var 0x55e43357a3d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e4335be648 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e4335be580 <col:9> 'bool' lvalue ->_read_status 0x55e43348e790
|       | `-ImplicitCastExpr 0x55e4335be560 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e4335be550 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e4335be628 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e4335be608 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e4335be5f0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e4335be5b0 <col:25> 'int' lvalue Var 0x55e4335bd940 'read_status' 'int'
|           `-IntegerLiteral 0x55e4335be5d0 <col:40> 'int' 1
|-AccessSpecDecl 0x55e433596a70 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e433596a98 prev 0x55e4335786d8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e433596b90 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e433596c80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e4335be6a0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e433596d70 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e4335be6b0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e433596e70 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e433596f20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e433596fc8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e433596fc8
| | `-ParmVarDecl 0x55e4335970d8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e433597898 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e433597898
|   `-ParmVarDecl 0x55e4335979a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e433597148 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e4335972a8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e4335974a0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e433597350 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e4335973c8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e4335be890 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e433597758 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e4335be700 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e4335be6c0 <col:20> 'void *' lvalue ParmVar 0x55e433597350 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e4335977c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e4335be788 <col:32, col:45> 'char *' array Function 0x55e4330fe198 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e4335be770 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e4335be740 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e4335973c8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e433597820 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e4335be850 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e4335be810 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e4335973c8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e4335be910 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e4335975a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e433596d70 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e4335be998 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e4335be978 <line:840:13, col:22> 'void' array Function 0x55e4330fe4f8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e4335be960 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e4335be930 <col:22> 'char *' lvalue ->_slot 0x55e4335977c0
| |         `-CXXThisExpr 0x55e4335be920 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e4335976a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e433596e70 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e4335beb88 <col:22, line:844:9>
| |   `-CallExpr 0x55e4335beaf0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e4335bead8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e4335beab8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e433209f78 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e4335beb28 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e4335bea08 <col:20> 'void *' lvalue ->_ptr 0x55e433597758
| |     |   `-CXXThisExpr 0x55e4335be9f8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e4335beb58 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e4335beb40 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e4335bea48 <col:26> 'char *' lvalue ->_slot 0x55e4335977c0
| |     |     `-CXXThisExpr 0x55e4335bea38 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e4335beb70 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e4335bea88 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e433597820
| |         `-CXXThisExpr 0x55e4335bea78 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e433597758 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e4335977c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e433597820 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e433597a18 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e433597a18
| | `-ParmVarDecl 0x55e433597b28 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e433597bc8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e433597bc8
|   `-ParmVarDecl 0x55e433597cd8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e433597e78 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e433597d48 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e433597de8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e433598110 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e433598308 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e4335981d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e433598488 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e4335bebc0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e4335beba0 <col:20> 'T *' lvalue ParmVar 0x55e4335981d8 'ptr' 'T *'
|   | `-CompoundStmt 0x55e4335bec10 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e4335983d8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e433596e70 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e4335bedc0 <col:22, line:857:9>
|   |   `-CallExpr 0x55e4335bed90 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e4335bec20 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e4332c26a8 0x55e43326c9d8
|   |     |-CXXOperatorCallExpr 0x55e4335bed20 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e4335becb0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e4334cf658 0x55e4334cf278 0x55e4334ceea8 0x55e4334ceac8 0x55e4334ce6e8 0x55e4334ce318
|   |     | `-MemberExpr 0x55e4335bec80 <col:29> 'T *' lvalue ->_ptr 0x55e433598488
|   |     |   `-CXXThisExpr 0x55e4335bec70 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e4335bed60 <col:35> 'T' lvalue ->_slot 0x55e4335984e8
|   |       `-CXXThisExpr 0x55e4335bed50 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e433598488 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e4335984e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e433598550 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e433598650 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e4335986a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e433598630 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e433598610 <col:31> 'int' 48
|-FieldDecl 0x55e4335986c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e433598728 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e433598788 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e4335988c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e4335aba00 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e4335aba60 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e4335abb10 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e4335abd38 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e4335abc40 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e4335abe88 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e4335abdf8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e4335ac158 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e4335abf48 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e4335abfc8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e4335ac070 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e4335ac368 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e4335ac220 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e4335ac298 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e4335ac438 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e4335ac588 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e4335ac4f0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e4335ac918 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e4335ac648 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e4335ac6c8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e4335ac770 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e4335ac828 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e4335acb40 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e4335ac9f0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e4335aca68 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e4335ace58 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e4335acbf0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e4335acdb8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e4335accc8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4335dc328 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e4335dc448 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x55e4335dc4d8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55e4335dc6d0 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55e4335dc510 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55e4335dc588 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55e4335dc600 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55e4335dc7a0 <col:79> 'const ArgContext' lvalue Var 0x55e4335bede8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55e4335dc918 <col:91, line:1372:5>
|   `-ReturnStmt 0x55e4335dc908 <line:1371:9, col:39>
|     `-CallExpr 0x55e4335dc8b8 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x55e4335dc8a0 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e4335dc880 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55e4335dc270 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55e4335dc808 <col:24> 'const String' lvalue ParmVar 0x55e4335dc510 'str' 'const String &'
|       |-UnaryOperator 0x55e4335dc848 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55e4335dc828 <col:30> 'String' lvalue ParmVar 0x55e4335dc588 'result' 'String &'
|       `-ImplicitCastExpr 0x55e4335dc8f0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55e4335dc860 <col:38> 'int' 0
|-CXXConstructorDecl 0x55e4335f4a90 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e4335f4b98 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55e4335f4b98
| `-ParmVarDecl 0x55e4335f4ca8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55e4335f4d48 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e4335f4e58 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55e4335f5580 <col:7>
`-CXXDestructorDecl 0x55e4335f4ef8 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4332cb3d0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e4332cb4e8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e4332cb578 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e4332cb648 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e4332cb730 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4332cb948 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e4332cb7f0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cbaf8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e4332cba00 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e4332cbc40 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e4332cbbb0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e4332cbd88 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e4332cbcf8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cbed0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e4332cbe40 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cbf98 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e4332cc0e0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e4332cc050 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e4332cc1a8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e4332cc2f0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e4332cc260 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e4332cc468 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e4332cc3a8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cc5b0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e4332cc520 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cc678 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e4332cc838 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e4332cc728 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e4332cc7a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cca88 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e4332cc8f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e4332cc970 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e4332ccb38 <col:86> "" ""
|-CXXMethodDecl 0x55e4332ccda8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e4332ccc18 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e4332ccc90 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332ccf58 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e4332cce68 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e4332cd108 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e4332cd010 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e4332cd3d8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e4332cd1c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e4332cd238 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e4332cd2b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332cd6b8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e4332cd4a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e4332cd518 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e4332cd590 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e4332cd770 <col:115> "" ""
|-AccessSpecDecl 0x55e4332cd7e0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e4332cd818 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4332ced30 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e4332ced30
| `-ParmVarDecl 0x55e4332cee38 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e4332ceed8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e4332ceed8
| `-ParmVarDecl 0x55e4332cefe8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e433304618 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e4334f6410 <col:7>
|-CXXConstructorDecl 0x55e4333046f0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e4333046f0
| `-ParmVarDecl 0x55e433304808 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e433304878 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e433304878
| `-ParmVarDecl 0x55e433304988 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e4334f8e10 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4334e4fb8 prev 0x55e4334da1c0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e4334e50b0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e4334e51a0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e4334e52c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e4334e5448 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e4334e55c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e4334e5748 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e4334f6578 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e4334f6de8 <col:11>
|-CXXDestructorDecl 0x55e4334f6650 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e4334f6788 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e4334f6788
| `-ParmVarDecl 0x55e4334f6898 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e4334f6938 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e4334f6938
| `-ParmVarDecl 0x55e4334f6a48 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e4334f9808 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e4334f9918 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e4334f9b98 <col:11>
|   `-ReturnStmt 0x55e4334f9b88 <col:11>
|     `-UnaryOperator 0x55e4334f9b70 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e4334f9b60 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e4334f9988 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e4334f9988
  `-ParmVarDecl 0x55e4334f9a98 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4334e57b0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e4334e58c8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e4334e5968 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e4334e59d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e4334e5a38 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e4334e5aa0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e4334e5b00 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e4334e5bc0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e4334e5c20 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e4334e5c80 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e4334f6488 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e4334e5968 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e4334f6df8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e4334f6e50 <col:12>
|-CXXConstructorDecl 0x55e4334f6ab8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e4334f6ab8
| `-ParmVarDecl 0x55e4334f6bc8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e4334f6c68 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e4334f6c68
| `-ParmVarDecl 0x55e4334f6d78 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e4334f8ef0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e4334d38d0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e4334d39e8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e4334d3a78 <col:16, col:22> col:16 public
|-EnumDecl 0x55e4334d3aa0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e4334d3ba0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e4334d3c80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334d3b80 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e4334d3b60 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e4334d3c30 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e4334d3c98 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4334d3c10 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e4334d3bf0 <col:22> 'int' 64
|-CXXMethodDecl 0x55e4334d3fd8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e4334d3cc0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e4334d3d40 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e4334d3db8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e4334d3e30 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e4334d4098 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d4298 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e4334d4110 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e4334d4188 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e4334d4348 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d44a8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e4334d43b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e4334d4550 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e4334d48b0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e4334d4840 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e4334d47e0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e4334d47a0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e432fab2d0 'void'
|       |-PointerType 0x55e433253c70 'unsigned char *'
|       | `-BuiltinType 0x55e432fab3d0 'unsigned char'
|       |-TypedefType 0x55e4330501e0 'size_t' sugar
|       | |-Typedef 0x55e43301bb20 'size_t'
|       | `-BuiltinType 0x55e432fab430 'unsigned long'
|       `-PointerType 0x55e432fabad0 'void *'
|         `-BuiltinType 0x55e432fab2d0 'void'
|-CXXMethodDecl 0x55e4334d4d28 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e4334d4920 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e4334d4998 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e4334d4a30 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e4334d4ab0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e4334ef420 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e4334ef408 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e4334ef3d0 <col:58> 'int' 0
| |-ParmVarDecl 0x55e4334d4b30 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e4334ef448 <col:76> 'int' 0
| |-ParmVarDecl 0x55e4334d4bb0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e4334ef468 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e4334d4df8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d4e78 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e4334d4f38 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e4334d4fd8 <col:20>
| `-OptimizeNoneAttr 0x55e4334d5030 <col:30>
|-CXXMethodDecl 0x55e4334d50a8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e4334d5148 <col:20>
| `-OptimizeNoneAttr 0x55e4334d51a0 <col:30>
|-CXXMethodDecl 0x55e4334d5218 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e4334d52b8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d5368 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e4334d5408 <col:20>
| |-OptimizeNoneAttr 0x55e4334d5460 <col:30>
| `-WarnUnusedResultAttr 0x55e4334d5488 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d54e0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e4334d5580 <col:20>
| `-OptimizeNoneAttr 0x55e4334d55d8 <col:30>
|-CXXMethodDecl 0x55e4334d5628 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e4334d56c8 <col:20>
| `-OptimizeNoneAttr 0x55e4334d5720 <col:30>
|-CXXMethodDecl 0x55e4334d5768 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e4334d5808 <col:20>
| `-OptimizeNoneAttr 0x55e4334d5860 <col:30>
|-CXXMethodDecl 0x55e4334d58a8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4334d5968 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4334d5a30 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e4334d5af8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e4334d5bb8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4334d5cd8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e4334ef530 <col:54, line:99:5>
|   `-ReturnStmt 0x55e4334ef520 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e4334ef508 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e4334ef4d8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e4334e5fb8
|         `-CXXThisExpr 0x55e4334ef4c8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e4334d5e78 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e4334d5d88 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e4334ef5e0 <col:67, line:103:5>
|   `-BinaryOperator 0x55e4334ef5c0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e4334ef558 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e4334e5fb8
|     | `-CXXThisExpr 0x55e4334ef548 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e4334ef5a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e4334ef588 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e4334d5d88 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e4334d5f70 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e4334ef660 <col:33, line:107:5>
|   `-ReturnStmt 0x55e4334ef650 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e4334ef638 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e4334ef608 <col:16> 'void *' lvalue ->_destructor_argument 0x55e4334e6020
|         `-CXXThisExpr 0x55e4334ef5f8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e4334d6030 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e4334efc90 <col:25, line:113:5>
|   |-ParenExpr 0x55e4334ef9d8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e4334ef9a8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334ef718 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e4334ef6f0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e4334ef6b8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e4334ef688 <col:24> '<bound member function type>' ->shared 0x55e4334d50a8
|   |   |       `-ImplicitCastExpr 0x55e4334ef6d8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e4334ef678 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e4334ef778 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334ef758 <col:42> 'int' 0
|   |   `-CallExpr 0x55e4334ef908 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e4334ef8f0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334ef8d0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334ef948 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334ef7e8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e4334ef960 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334ef810 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334ef978 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334ef848 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e4334ef990 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334ef8b8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334ef8a0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334ef868 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e4334efbd8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e4334efa08 <col:2> 'unsigned char *' lvalue ->_head 0x55e4334e5dc0
|   | | `-CXXThisExpr 0x55e4334ef9f8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e4334efbc0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e4334efba0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e4334efa48 <col:10> 'unsigned char *' lvalue ->_data 0x55e4334e5e28
|   |     | `-CXXThisExpr 0x55e4334efa38 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e4334efb88 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e4334efb68 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e4334efa88 <col:18> 'unsigned char *' lvalue ->_tail 0x55e4334e5e90
|   |         | `-CXXThisExpr 0x55e4334efa78 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e4334efb50 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e4334efb30 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e4334efac8 <col:26> 'unsigned char *' lvalue ->_end 0x55e4334e5ef8
|   |             | `-CXXThisExpr 0x55e4334efab8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e4334efb18 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e4334efaf8 <col:33> 'int' 0
|   `-BinaryOperator 0x55e4334efc70 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e4334efc08 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e4334e5fb8
|     | `-CXXThisExpr 0x55e4334efbf8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e4334efc58 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e4334efc38 <col:16> 'int' 0
|-CXXMethodDecl 0x55e4334d6170 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e4334d60e0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334d6218 <col:20>
| |-OptimizeNoneAttr 0x55e4334d6270 <col:30>
| `-WarnUnusedResultAttr 0x55e4334d6298 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d6368 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e4334d62d8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334d6410 <col:20>
| |-OptimizeNoneAttr 0x55e4334d6468 <col:30>
| `-WarnUnusedResultAttr 0x55e4334d6490 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d65c8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e4334d64d0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e4334d6670 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d6770 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e4334d66e0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334d6818 <col:20>
| `-OptimizeNoneAttr 0x55e4334d6870 <col:30>
|-CXXMethodDecl 0x55e4334d6938 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e4334d68a8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e4334d69e0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d6ae0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e4334d6a50 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e4334d6b88 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d6c88 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e4334d6bf8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334d6d30 <col:20>
| `-OptimizeNoneAttr 0x55e4334d6d88 <col:30>
|-CXXMethodDecl 0x55e4334d6f18 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e4334d6dc8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e4334d6e40 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e4334ef488 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e4334d6fc8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e4334d71c8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e4334d7040 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e4334d70b8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334d73d8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e4334d7288 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e4334d7300 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334d75e8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e4334d7498 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e4334d7518 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e4334ef498 <col:39> 'int' 0
|-CXXMethodDecl 0x55e4334d76b8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e4334d7780 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e4334d7848 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e4334d7908 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4334d79d0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e4334d7b18 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e4334d7a88 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e4334d7ce8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e4334d7bd8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e4334d7c50 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334d7db8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e4334d7e78 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55e4334d7f18 <col:20>
| `-OptimizeNoneAttr 0x55e4334d7f70 <col:30>
|-CXXMethodDecl 0x55e4334d7fc0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e4334d8060 <col:20>
| `-OptimizeNoneAttr 0x55e4334d80b8 <col:30>
|-CXXMethodDecl 0x55e4334d8108 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e4334d81c8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4334d8290 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55e4334d8330 <col:20>
| `-OptimizeNoneAttr 0x55e4334d8388 <col:30>
|-CXXMethodDecl 0x55e4334d84d8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e4334d83c8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e4334d8440 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334d8628 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e4334d8598 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334d8700 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e4334d87c0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e4334d8860 <col:20>
| `-OptimizeNoneAttr 0x55e4334d88b8 <col:30>
|-CXXMethodDecl 0x55e4334d8908 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e4334d89a8 <col:20>
| `-OptimizeNoneAttr 0x55e4334d8a00 <col:30>
|-CXXMethodDecl 0x55e4334d8a50 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e4334d8b18 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e4334d8bb8 <col:20>
| `-OptimizeNoneAttr 0x55e4334d8c10 <col:30>
|-CXXMethodDecl 0x55e4334d8c58 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e4334d8d78 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e4334d8ee8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e4334d8e28 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e4334d8fd8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e4334d9078 <col:20>
| `-OptimizeNoneAttr 0x55e4334d90d0 <col:30>
|-CXXMethodDecl 0x55e4334d9120 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e4334d91e0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e4334d9418 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e4334d9290 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e4334d9308 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334d94c8 <col:20>
| `-OptimizeNoneAttr 0x55e4334d9520 <col:30>
|-CXXMethodDecl 0x55e4334d95c8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e4334d9668 <col:20>
| `-OptimizeNoneAttr 0x55e4334d96c0 <col:30>
|-CXXMethodDecl 0x55e4334d9710 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e4334d97b0 <col:20>
| `-OptimizeNoneAttr 0x55e4334d9808 <col:30>
|-CXXMethodDecl 0x55e4334d9850 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e4334d98f0 <col:20>
| `-OptimizeNoneAttr 0x55e4334d9948 <col:30>
|-CXXMethodDecl 0x55e4334d9a48 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e4334d9980 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e4334d9af0 <col:20>
| `-OptimizeNoneAttr 0x55e4334d9b48 <col:30>
|-CXXMethodDecl 0x55e4334d9d08 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e4334d9b80 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e4334d9bf8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334d9db8 <col:20>
| `-OptimizeNoneAttr 0x55e4334d9e10 <col:30>
|-CXXMethodDecl 0x55e4334d9eb8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e4334d9fd8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e4334da0f8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e4334da198 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e4334da1c0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e4334da2e8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e4334da388 <col:20>
| `-OptimizeNoneAttr 0x55e4334da3e0 <col:30>
|-CXXMethodDecl 0x55e4334da488 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e4334da528 <col:20>
| `-OptimizeNoneAttr 0x55e4334da580 <col:30>
|-AccessSpecDecl 0x55e4334da5a8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e4334da5d0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e4334da6d0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e4334da720 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4334da6b0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e4334da690 <col:14> 'int' 48
|-CXXMethodDecl 0x55e4334da788 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e4334da828 <col:20>
| `-OptimizeNoneAttr 0x55e4334da880 <col:30>
|-CXXMethodDecl 0x55e4334da8f8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e4334da998 <col:20>
| `-OptimizeNoneAttr 0x55e4334da9f0 <col:30>
|-CXXMethodDecl 0x55e4334daab8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e4334daa28 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e4334dac58 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e4334dadf8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e4334dad08 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e4334daea0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e4334dafa0 <line:369:2, col:9> col:2 referenced HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e4334db350 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334daf80 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e4334daf60 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e4334db030 <line:370:2, col:14> col:2 referenced BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e4334db368 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334db010 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e4334daff0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e4334db0c0 <line:372:2, col:14> col:2 referenced MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e4334db380 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334db0a0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e4334db080 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e4334db150 <line:374:2, col:14> col:2 referenced OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e4334db398 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334db130 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e4334db110 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e4334db1e0 <line:377:2, col:13> col:2 referenced OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e4334db3b0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334db1c0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e4334db1a0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e4334db270 <line:379:2, col:13> col:2 referenced LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e4334db3c8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334db250 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e4334db230 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e4334db300 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e4334db3e0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4334db2e0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e4334db2c0 <col:14> 'int' 6
|-CXXMethodDecl 0x55e4334db448 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e4334db4e8 <col:20>
| `-OptimizeNoneAttr 0x55e4334db540 <col:30>
|-CXXMethodDecl 0x55e4334db638 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e4334db578 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e4334db6e0 <col:20>
| `-OptimizeNoneAttr 0x55e4334db738 <col:30>
|-CXXMethodDecl 0x55e4334db7a8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e4334db8d0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e4334dba48 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e4334db980 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e4334dbb10 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e4334dbbd8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e4334dbd18 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e4334dbc88 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e4334dbdc0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e4334dbec0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e4334dc0c0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334dbea0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e4334dbe80 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e4334dbf50 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e4334dc0d8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334dbf30 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e4334dbf10 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e4334dbfe0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e4334dc0f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334dbfc0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e4334dbfa0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e4334dc070 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e4334dc108 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4334dc050 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e4334dc030 <col:47> 'int' 16
|-CXXMethodDecl 0x55e4334dc168 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e4334dc2d8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e4334dc218 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e4334dc380 <col:20>
| `-OptimizeNoneAttr 0x55e4334dc3d8 <col:30>
|-CXXMethodDecl 0x55e4334dc428 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e4334efdb0 <col:18, col:36>
|   `-ReturnStmt 0x55e4334efda0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e4334efd88 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e4334efd68 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e4334efd38 <col:27> '<bound member function type>' ->xanno 0x55e4334da488
|           `-CXXThisExpr 0x55e4334efd28 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e4334dc520 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e4334efec0 <col:30, col:48>
|   `-ReturnStmt 0x55e4334efeb0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e4334efe98 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e4334efe78 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e4334efe48 <col:39> '<bound member function type>' ->xanno 0x55e4334da2e8
|           `-CXXThisExpr 0x55e4334efe38 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e4334dc608 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e4334f0058 <col:24, col:50>
|   `-ReturnStmt 0x55e4334f0048 <col:26, col:47>
|     `-UnaryOperator 0x55e4334f0030 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e4334f0010 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e4334efff8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e4334effa8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e4334e52c8
|         |   `-CXXMemberCallExpr 0x55e4334eff88 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e4334eff58 <col:34> '<bound member function type>' ->xanno 0x55e4334da488
|         |       `-CXXThisExpr 0x55e4334eff48 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e4334effd8 <col:46> 'int' 0
|-CXXMethodDecl 0x55e4334dc710 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e4334f0228 <col:36, col:62>
|   `-ReturnStmt 0x55e4334f0218 <col:38, col:59>
|     `-UnaryOperator 0x55e4334f0200 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e4334f01e0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e4334f01c8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e4334f0140 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e4334e52c8
|         |   `-CXXMemberCallExpr 0x55e4334f0120 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e4334f00f0 <col:46> '<bound member function type>' ->xanno 0x55e4334da2e8
|         |       `-CXXThisExpr 0x55e4334f00e0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e4334f0170 <col:58> 'int' 0
|-CXXMethodDecl 0x55e4334dc828 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e4334f03c0 <col:26, col:53>
|   `-ReturnStmt 0x55e4334f03b0 <col:28, col:50>
|     `-UnaryOperator 0x55e4334f0398 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e4334f0378 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e4334f0360 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e4334f0310 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e4334e55c8
|         |   `-CXXMemberCallExpr 0x55e4334f02f0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e4334f02c0 <col:36> '<bound member function type>' ->xanno 0x55e4334da488
|         |       `-CXXThisExpr 0x55e4334f02b0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e4334f0340 <col:49> 'int' 0
|-CXXMethodDecl 0x55e4334dc948 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e4334f0598 <col:38, col:65>
|   `-ReturnStmt 0x55e4334f0588 <col:40, col:62>
|     `-UnaryOperator 0x55e4334f0570 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e4334f0550 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e4334f0538 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e4334f04a8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e4334e55c8
|         |   `-CXXMemberCallExpr 0x55e4334f0488 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e4334f0458 <col:48> '<bound member function type>' ->xanno 0x55e4334da2e8
|         |       `-CXXThisExpr 0x55e4334f0448 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e4334f04d8 <col:61> 'int' 0
|-CXXMethodDecl 0x55e4334dcaf8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e4334dca00 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e4334f0c68 <col:34, line:463:5>
|   |-ParenExpr 0x55e4334f0ab0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e4334f0a80 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f06e8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f06b8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f0608 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f05f0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f05b0 <col:23> 'int' lvalue ParmVar 0x55e4334dca00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f05d0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f0698 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f0668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f0628 <col:33> 'int' lvalue ParmVar 0x55e4334dca00 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e4334f0680 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e4334f0648 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e4334f0748 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f0728 <col:56> 'int' 0
|   |   `-CallExpr 0x55e4334f09e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f09c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f09a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f0a20 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f0838 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e4334f0a38 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f0868 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f0a50 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f08a0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e4334f0a68 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f0990 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f0978 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f0938 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e4334f0c58 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e4334f0c40 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e4334f0c20 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e4334f0bf0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e4334f0ba0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e4334e52c8
|         |   `-CXXMemberCallExpr 0x55e4334f0b80 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e4334f0b50 <col:9> '<bound member function type>' ->xanno 0x55e4334da2e8
|         |       `-CXXThisExpr 0x55e4334f0b40 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e4334f0c08 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e4334f0bd0 <col:21> 'int' lvalue ParmVar 0x55e4334dca00 'i' 'int'
|-CXXMethodDecl 0x55e4334dcd48 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e4334dcbb8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e4334dcc30 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e4334f12f8 <col:40, line:472:5>
|   |-ParenExpr 0x55e4334f1110 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e4334f10e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f0dc0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f0d90 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f0ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f0cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f0c88 <col:23> 'int' lvalue ParmVar 0x55e4334dcbb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f0ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f0d70 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f0d40 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f0d00 <col:33> 'int' lvalue ParmVar 0x55e4334dcbb8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e4334f0d58 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e4334f0d20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e4334f0e20 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f0e00 <col:56> 'int' 0
|   |   `-CallExpr 0x55e4334f1040 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f1028 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f1008 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f1080 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f0e90 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e4334f1098 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f0ec0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f10b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f0ef8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e4334f10c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f0ff0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f0fd8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f0f98 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e4334f12d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e4334f1280 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e4334f1250 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e4334f1200 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e4334e52c8
|     | |   `-CXXMemberCallExpr 0x55e4334f11e0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e4334f11b0 <col:2> '<bound member function type>' ->xanno 0x55e4334da488
|     | |       `-CXXThisExpr 0x55e4334f11a0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e4334f1268 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e4334f1230 <col:14> 'int' lvalue ParmVar 0x55e4334dcbb8 'i' 'int'
|     `-ImplicitCastExpr 0x55e4334f12c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e4334f12a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e4334dcc30 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e4334dcf08 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e4334dce10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e4334f1a78 <col:36, line:485:5>
|   |-ParenExpr 0x55e4334f17e0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f17b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f1490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f1460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f1370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f1358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f1318 <col:23> 'int' lvalue ParmVar 0x55e4334dce10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f1338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f1440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f1428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f1390 <col:33> 'int' lvalue ParmVar 0x55e4334dce10 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f1408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f13f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f13b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f13d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e4334f14f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f14d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f1710 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f16f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f16d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f1750 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f1560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e4334f1768 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f1598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f1780 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f15d0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e4334f1798 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f16c0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f16a8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f1668 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e4334f1a68 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e4334f1a50 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e4334f1a38 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e4334f1a08 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e4334f19a8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e4334f1978 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e4334f18f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e4334e51a0
|             |   `-CXXMemberCallExpr 0x55e4334f18d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e4334f18a0 <col:61> '<bound member function type>' ->xanno 0x55e4334da2e8
|             |       `-CXXThisExpr 0x55e4334f1890 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e4334f1990 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e4334f1920 <col:74> 'int' lvalue ParmVar 0x55e4334dce10 'i' 'int'
|-CXXMethodDecl 0x55e4334dd158 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e4334dcfc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e4334dd040 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e4334f21c8 <col:42, line:500:5>
|   |-ParenExpr 0x55e4334f1f60 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f1f30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f1c10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f1be0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f1af0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f1ad8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f1a98 <col:23> 'int' lvalue ParmVar 0x55e4334dcfc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f1ab8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f1bc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f1ba8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f1b10 <col:33> 'int' lvalue ParmVar 0x55e4334dcfc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f1b88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f1b70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f1b30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f1b50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e4334f1c70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f1c50 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f1e90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f1e78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f1e58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f1ed0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f1ce0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e4334f1ee8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f1d18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f1f00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f1d50 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e4334f1f18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f1e40 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f1e28 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f1de8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e4334f21a8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e4334f2158 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e4334f2128 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e4334f20d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e4334f20a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e4334f2050 <col:48, col:57> 'char [48]' lvalue ->c 0x55e4334e51a0
|     |     |   `-CXXMemberCallExpr 0x55e4334f2030 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e4334f2000 <col:48> '<bound member function type>' ->xanno 0x55e4334da488
|     |     |       `-CXXThisExpr 0x55e4334f1ff0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e4334f20b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e4334f2080 <col:61> 'int' lvalue ParmVar 0x55e4334dcfc8 'i' 'int'
|     `-ImplicitCastExpr 0x55e4334f2190 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e4334f2170 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e4334dd040 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e4334dd318 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e4334dd220 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e4334f2928 <col:35, line:513:5>
|   |-ParenExpr 0x55e4334f2638 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f2608 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f2360 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f2330 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f2240 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f2228 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f21e8 <col:23> 'int' lvalue ParmVar 0x55e4334dd220 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f2208 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f2310 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f22f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f2260 <col:33> 'int' lvalue ParmVar 0x55e4334dd220 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f22d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f22c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f2280 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f22a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e4334f23c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f23a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f2568 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f2550 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f2530 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f25a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f2430 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e4334f25c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f2468 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f25d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f24a0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e4334f25f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f2518 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f2500 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f24c0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e4334f2918 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e4334f2900 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e4334f28e8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e4334f28b8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e4334f2830 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e4334f2800 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e4334f27b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e4334e51a0
|             |   `-CXXMemberCallExpr 0x55e4334f2790 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e4334f2760 <col:60> '<bound member function type>' ->xanno 0x55e4334da2e8
|             |       `-CXXThisExpr 0x55e4334f2750 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e4334f2818 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e4334f27e0 <col:73> 'int' lvalue ParmVar 0x55e4334dd220 'i' 'int'
|-CXXMethodDecl 0x55e4334dd568 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e4334dd3d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e4334dd450 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e4334f3048 <col:41, line:528:5>
|   |-ParenExpr 0x55e4334f2dd0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f2da0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f2ac0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f2a90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f29a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f2988 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f2948 <col:23> 'int' lvalue ParmVar 0x55e4334dd3d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f2968 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f2a70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f2a58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f29c0 <col:33> 'int' lvalue ParmVar 0x55e4334dd3d8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f2a38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f2a20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f29e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f2a00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e4334f2b20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f2b00 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f2d00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f2ce8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f2cc8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f2d40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f2b90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e4334f2d58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f2bc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f2d70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f2c00 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e4334f2d88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f2cb0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f2c98 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f2c58 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e4334f3028 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e4334f2fd8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e4334f2fa8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e4334f2f50 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e4334f2f10 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e4334f2ec0 <col:47, col:56> 'char [48]' lvalue ->c 0x55e4334e51a0
|     |     |   `-CXXMemberCallExpr 0x55e4334f2ea0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e4334f2e70 <col:47> '<bound member function type>' ->xanno 0x55e4334da488
|     |     |       `-CXXThisExpr 0x55e4334f2e60 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e4334f2f28 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e4334f2ef0 <col:60> 'int' lvalue ParmVar 0x55e4334dd3d8 'i' 'int'
|     `-ImplicitCastExpr 0x55e4334f3010 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e4334f2ff0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e4334dd450 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e4334dd728 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e4334dd630 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e4334f3718 <col:36, line:541:5>
|   |-ParenExpr 0x55e4334f34b8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f3488 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f31e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f31b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f30c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f30a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f3068 <col:23> 'int' lvalue ParmVar 0x55e4334dd630 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f3088 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f3190 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f3178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f30e0 <col:33> 'int' lvalue ParmVar 0x55e4334dd630 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f3158 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f3140 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f3100 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f3120 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e4334f3240 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f3220 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f33e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f33d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f33b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f3428 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f32b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e4334f3440 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f32e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f3458 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f3320 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e4334f3470 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f3398 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f3380 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f3340 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e4334f3708 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e4334f36f0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e4334f36d8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e4334f36a8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e4334f3650 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e4334f3620 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e4334f35d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e4334e51a0
|             |   `-CXXMemberCallExpr 0x55e4334f35b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e4334f3580 <col:61> '<bound member function type>' ->xanno 0x55e4334da2e8
|             |       `-CXXThisExpr 0x55e4334f3570 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e4334f3638 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e4334f3600 <col:74> 'int' lvalue ParmVar 0x55e4334dd630 'i' 'int'
|-CXXMethodDecl 0x55e4334dd8f8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e4334dd7e8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e4334dd860 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e4334dd9a8 <col:20>
| `-OptimizeNoneAttr 0x55e4334dda00 <col:30>
|-CXXMethodDecl 0x55e4334ddb38 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e4334dda40 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e4334f3de8 <col:35, line:562:5>
|   |-ParenExpr 0x55e4334f3b88 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f3b58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f38b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f3880 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f3790 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f3778 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f3738 <col:23> 'int' lvalue ParmVar 0x55e4334dda40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f3758 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f3860 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f3848 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f37b0 <col:33> 'int' lvalue ParmVar 0x55e4334dda40 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f3828 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f3810 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f37d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f37f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e4334f3910 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f38f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f3ab8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f3aa0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f3a80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f3af8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f3980 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e4334f3b10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f39b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f3b28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f39f0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e4334f3b40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f3a68 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f3a50 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f3a10 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e4334f3dd8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e4334f3dc0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e4334f3da8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e4334f3d78 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e4334f3d20 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e4334f3cf0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e4334f3ca0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e4334e51a0
|             |   `-CXXMemberCallExpr 0x55e4334f3c80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e4334f3c50 <col:60> '<bound member function type>' ->xanno 0x55e4334da2e8
|             |       `-CXXThisExpr 0x55e4334f3c40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e4334f3d08 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e4334f3cd0 <col:73> 'int' lvalue ParmVar 0x55e4334dda40 'i' 'int'
|-CXXMethodDecl 0x55e4334ddd48 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e4334ddbf8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e4334ddc70 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e4334f44c8 <col:41, line:577:5>
|   |-ParenExpr 0x55e4334f4258 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f4228 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f3f80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f3f50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f3e60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f3e48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f3e08 <col:23> 'int' lvalue ParmVar 0x55e4334ddbf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f3e28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f3f30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f3f18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f3e80 <col:33> 'int' lvalue ParmVar 0x55e4334ddbf8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f3ef8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f3ee0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f3ea0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f3ec0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e4334f3fe0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f3fc0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f4188 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f4170 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f4150 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f41c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f4050 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e4334f41e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f4088 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f41f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f40c0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e4334f4210 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f4138 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f4120 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f40e0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e4334f44a8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e4334f4458 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e4334f4428 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e4334f43c8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e4334f4398 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e4334f4348 <col:47, col:56> 'char [48]' lvalue ->c 0x55e4334e51a0
|     |     |   `-CXXMemberCallExpr 0x55e4334f4328 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e4334f42f8 <col:47> '<bound member function type>' ->xanno 0x55e4334da488
|     |     |       `-CXXThisExpr 0x55e4334f42e8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e4334f43b0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e4334f4378 <col:60> 'int' lvalue ParmVar 0x55e4334ddbf8 'i' 'int'
|     `-ImplicitCastExpr 0x55e4334f4490 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e4334f4470 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e4334ddc70 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e4334ddf08 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e4334dde10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e4334f4bf8 <col:36, line:591:5>
|   |-ParenExpr 0x55e4334f4938 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f4908 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f4660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f4630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f4540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f4528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f44e8 <col:23> 'int' lvalue ParmVar 0x55e4334dde10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f4508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f4610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f45f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f4560 <col:33> 'int' lvalue ParmVar 0x55e4334dde10 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f45d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f45c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f4580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f45a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e4334f46c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f46a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f4868 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f4850 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f4830 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f48a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f4730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e4334f48c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f4768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f48d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f47a0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e4334f48f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f4818 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f4800 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f47c0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e4334f4be8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e4334f4bd0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e4334f4bb8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e4334f4b88 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e4334f4b00 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e4334f4ad0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e4334f4a80 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e4334e51a0
|             |   `-CXXMemberCallExpr 0x55e4334f4a60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e4334f4a30 <col:61> '<bound member function type>' ->xanno 0x55e4334da2e8
|             |       `-CXXThisExpr 0x55e4334f4a20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e4334f4ae8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e4334f4ab0 <col:74> 'int' lvalue ParmVar 0x55e4334dde10 'i' 'int'
|-CXXMethodDecl 0x55e4334de158 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e4334ddfc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e4334de040 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e4334f52d8 <col:42, line:606:5>
|   |-ParenExpr 0x55e4334f5068 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e4334f5038 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f4d90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f4d60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f4c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f4c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f4c18 <col:23> 'int' lvalue ParmVar 0x55e4334ddfc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f4c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f4d40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e4334f4d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f4c90 <col:33> 'int' lvalue ParmVar 0x55e4334ddfc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f4d08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f4cf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f4cb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e4334f4cd0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e4334f4df0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f4dd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e4334f4f98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f4f80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f4f60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f4fd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f4e60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e4334f4ff0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f4e98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f5008 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f4ed0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e4334f5020 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f4f48 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f4f30 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f4ef0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e4334f52b8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e4334f5268 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e4334f5238 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e4334f51d8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e4334f51a8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e4334f5158 <col:48, col:57> 'char [48]' lvalue ->c 0x55e4334e51a0
|     |     |   `-CXXMemberCallExpr 0x55e4334f5138 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e4334f5108 <col:48> '<bound member function type>' ->xanno 0x55e4334da488
|     |     |       `-CXXThisExpr 0x55e4334f50f8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e4334f51c0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e4334f5188 <col:61> 'int' lvalue ParmVar 0x55e4334ddfc8 'i' 'int'
|     `-ImplicitCastExpr 0x55e4334f52a0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e4334f5280 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e4334de040 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e4334de2f0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e4334de220 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e4334f5b48 <col:33, line:620:5>
|   |-ParenExpr 0x55e4334f58c0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e4334f5890 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f54e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f54b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f5350 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f5338 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f52f8 <col:23> 'int' lvalue ParmVar 0x55e4334de220 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f5318 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f5490 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e4334f5478 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f5370 <col:33> 'int' lvalue ParmVar 0x55e4334de220 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f5458 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f5440 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f5390 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e4334f5418 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e4334f5400 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e4334f53c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e4334f5540 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f5520 <col:79> 'int' 0
|   |   `-CallExpr 0x55e4334f57f0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f57d8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f57b8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f5830 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f5628 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e4334f5848 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f5670 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f5860 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f56a8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e4334f5878 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f57a0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f5788 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f5748 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e4334f5b38 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e4334f5b20 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e4334f5b08 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e4334f5ad8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e4334f5a50 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e4334f5a20 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e4334f59d0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e4334e51a0
|             |   `-CXXMemberCallExpr 0x55e4334f59b0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e4334f5980 <col:67> '<bound member function type>' ->xanno 0x55e4334da2e8
|             |       `-CXXThisExpr 0x55e4334f5970 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e4334f5a38 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e4334f5a00 <col:80> 'int' lvalue ParmVar 0x55e4334de220 'i' 'int'
|-CXXMethodDecl 0x55e4334de508 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e4334de3b0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e4334de430 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e4334f6370 <col:45, line:635:5>
|   |-ParenExpr 0x55e4334f60b8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e4334f6088 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e4334f5d50 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e4334f5d20 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e4334f5bc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e4334f5ba8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e4334f5b68 <col:23> 'int' lvalue ParmVar 0x55e4334de3b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e4334f5b88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e4334f5d00 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e4334f5ce8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e4334f5be0 <col:33> 'int' lvalue ParmVar 0x55e4334de3b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e4334f5cc8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e4334f5cb0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e4334f5c00 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e4334da6d0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e4334f5c88 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e4334f5c70 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e4334f5c38 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e4334f5db0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e4334f5d90 <col:79> 'int' 0
|   |   `-CallExpr 0x55e4334f5fe8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e4334f5fd0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e4334f5fb0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e433046ff0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e4334f6028 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f5e20 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e4334f6040 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e4334f5e68 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e4334f6058 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e4334f5ea0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e4334f6070 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e4334f5f98 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e4334f5f80 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e4334f5f38 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e4334f6350 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e4334f62b8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e4334f6288 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e4334f6228 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e4334f61f8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e4334f61a8 <col:54, col:63> 'char [48]' lvalue ->c 0x55e4334e51a0
|     |     |   `-CXXMemberCallExpr 0x55e4334f6188 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e4334f6158 <col:54> '<bound member function type>' ->xanno 0x55e4334da488
|     |     |       `-CXXThisExpr 0x55e4334f6148 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e4334f6210 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e4334f61d8 <col:67> 'int' lvalue ParmVar 0x55e4334de3b0 'i' 'int'
|     `-CXXConstCastExpr 0x55e4334f6320 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e4334f6308 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e4334f62d0 <col:91> 'const void *' lvalue ParmVar 0x55e4334de430 'x' 'const void *'
|-CXXMethodDecl 0x55e4334de5d8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e4334f63f8 <col:34, line:640:5>
|   `-ReturnStmt 0x55e4334f63e8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e4334f63d0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e4334f63a0 <col:16> 'Packet *' lvalue ->_data_packet 0x55e4334e5d58
|         `-CXXThisExpr 0x55e4334f6390 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e4334de718 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e4334de688 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e4334ef4b8 <col:46> 'bool' true
|-CXXMethodDecl 0x55e4334de898 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e4334de7d0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e4334de940 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e4334df0f0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e4334dea40 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df160 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334dea20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e4334dea00 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e4334d3ba0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e4334dead0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df178 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334deab0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e4334dea90 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e4334d3c30 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e4334deb60 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df190 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334deb40 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e4334deb20 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e4334debf0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df1a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334debd0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e4334debb0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e4334dec80 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df1c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334dec60 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e4334dec40 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e4334ded10 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df1d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334decf0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e4334decd0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e4334deda0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df1f0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334ded80 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e4334ded60 <col:19> 'int' EnumConstant 0x55e4334debf0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e4334dee30 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df208 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334dee10 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e4334dedf0 <col:19> 'int' EnumConstant 0x55e4334ded10 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e4334def00 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df220 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334deee0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e4334deec0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e4334dee80 <col:23> 'int' EnumConstant 0x55e4334dee30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e4334deea0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e4334defd0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e4334df238 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e4334defb0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e4334def90 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e4334def50 <col:23> 'int' EnumConstant 0x55e4334dee30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e4334def70 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e4334df0a0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e4334df250 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e4334df080 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e4334df060 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e4334df020 <col:23> 'int' EnumConstant 0x55e4334dee30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e4334df040 <col:40> 'int' 8
|-CXXMethodDecl 0x55e4334df290 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e4334df330 <col:68> "" ""
|-CXXMethodDecl 0x55e4334df3c8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e4334df468 <col:45> "" ""
|-CXXMethodDecl 0x55e4334df500 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e4334df5a0 <col:57> "" ""
|-CXXMethodDecl 0x55e4334df638 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e4334df6d8 <col:45> "" ""
|-CXXMethodDecl 0x55e4334df770 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e4334df810 <col:57> "" ""
|-CXXMethodDecl 0x55e4334df8a0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e4334df940 <col:51> "" ""
|-CXXMethodDecl 0x55e4334df9d0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e4334dfa70 <col:63> "" ""
|-CXXMethodDecl 0x55e4334dfb00 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e4334dfba0 <col:53> "" ""
|-CXXMethodDecl 0x55e4334dfc30 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e4334dfcd0 <col:65> "" ""
|-CXXMethodDecl 0x55e4334dfde8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e4334dfd58 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e4334dfe90 <col:61> "" ""
|-CXXMethodDecl 0x55e4334e0028 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e4334dff18 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e4334dff90 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e4334e00d8 <col:67> "" ""
|-CXXMethodDecl 0x55e4334e01f0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e4334e0160 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e4334e0298 <col:63> "" ""
|-CXXMethodDecl 0x55e4334e0430 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e4334e0320 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e4334e0398 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e4334e04e0 <col:69> "" ""
|-CXXMethodDecl 0x55e4334e05f8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e4334e0568 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e4334e06a0 <col:63> "" ""
|-CXXMethodDecl 0x55e4334e2d78 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e4334e2c68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e4334e2ce0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e4334e2e28 <col:69> "" ""
|-CXXMethodDecl 0x55e4334e2f40 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e4334e2eb0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e4334e2fe8 <col:62> "" ""
|-CXXMethodDecl 0x55e4334e3180 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e4334e3070 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e4334e30e8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e4334e3230 <col:68> "" ""
|-CXXMethodDecl 0x55e4334e3348 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e4334e32b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e4334e33f0 <col:63> "" ""
|-CXXMethodDecl 0x55e4334e3588 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e4334e3478 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e4334e34f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e4334e3638 <col:69> "" ""
|-CXXMethodDecl 0x55e4334e36c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e4334e3768 <col:64> "" ""
|-CXXMethodDecl 0x55e4334e37f8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e4334e3898 <col:52> "" ""
|-CXXMethodDecl 0x55e4334e3928 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e4334e39c8 <col:67> "" ""
|-CXXMethodDecl 0x55e4334e3a58 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e4334e3af8 <col:55> "" ""
|-CXXMethodDecl 0x55e4334e3c10 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e4334e3b80 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e4334e3cb8 <col:58> "" ""
|-CXXMethodDecl 0x55e4334e3e50 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e4334e3d40 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e4334e3db8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e4334e3f00 <col:62> "" ""
|-CXXMethodDecl 0x55e4334e4018 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e4334e3f88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e4334e40c0 <col:58> "" ""
|-CXXMethodDecl 0x55e4334e4258 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e4334e4148 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e4334e41c0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e4334e4308 <col:62> "" ""
|-CXXMethodDecl 0x55e4334e4420 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e4334e4390 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e4334e44c8 <col:60> "" ""
|-CXXMethodDecl 0x55e4334e4660 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e4334e4550 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e4334e45c8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e4334e4710 <col:64> "" ""
|-CXXMethodDecl 0x55e4334e4828 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e4334e4798 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e4334e48d0 <col:58> "" ""
|-CXXMethodDecl 0x55e4334e4a68 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e4334e4958 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e4334e49d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e4334e4b18 <col:62> "" ""
|-CXXMethodDecl 0x55e4334e4c30 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e4334e4ba0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e4334e4cd8 <col:59> "" ""
|-CXXMethodDecl 0x55e4334e4e70 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e4334e4d60 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e4334e4dd8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e4334e4f20 <col:63> "" ""
|-AccessSpecDecl 0x55e4334e4f90 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e4334e4fb8 prev 0x55e4334da1c0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e4334e50b0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e4334e51a0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e4334e52c8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e4334e5448 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e4334e55c8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e4334e5748 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e4334f6578 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e4334f6de8 <col:11>
| |-CXXDestructorDecl 0x55e4334f6650 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e4334f6788 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e4334f6788
| | `-ParmVarDecl 0x55e4334f6898 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e4334f6938 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e4334f6938
| | `-ParmVarDecl 0x55e4334f6a48 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e4334f9808 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e4334f9918 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e4334f9b98 <col:11>
| |   `-ReturnStmt 0x55e4334f9b88 <col:11>
| |     `-UnaryOperator 0x55e4334f9b70 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e4334f9b60 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e4334f9988 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e4334f9988
|   `-ParmVarDecl 0x55e4334f9a98 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e4334e57b0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e4334e58c8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e4334e5968 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e4334e59d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e4334e5a38 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e4334e5aa0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e4334e5b00 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e4334e5bc0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e4334e5c20 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e4334e5c80 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e4334f6488 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e4334e5968 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e4334f6df8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e4334f6e50 <col:12>
| |-CXXConstructorDecl 0x55e4334f6ab8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e4334f6ab8
| | `-ParmVarDecl 0x55e4334f6bc8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e4334f6c68 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e4334f6c68
| | `-ParmVarDecl 0x55e4334f6d78 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e4334f8ef0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e4334e5cf8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e4334e5d58 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e4334e5dc0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e4334e5e28 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e4334e5e90 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e4334e5ef8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e4334e5f58 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e4334e5fb8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e4334e6020 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e4334e60a8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e4334e5cf8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e4334f6420 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e4334e5f58 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e4334f6e60 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e4334f6ec0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e4334e6248 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e4334e6188 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e4334e6340 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e4334e6528 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e4334e6430 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e4334e67f8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e4334e65e0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e4334e6658 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e4334e66d0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334e6a18 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e4334e68c8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e4334e6940 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e4334eeff8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e4334e6ad8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e4334e6b50 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e4334e6bc8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e4334ef150 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e4334ef0c0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e4334ef298 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e4334ef208 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e4334ef390 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e43362b6a8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e43362baa8 prev 0x55e43362b6a8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55e43362bca0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55e43362bba8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55e43362cbe8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55e43362be20 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55e43362cba8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e43362cb68 <col:20> 'String *' lvalue ParmVar 0x55e43362bba8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55e43362be80 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55e43362cc48 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55e4335bec10 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55e43362bd60 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55e433596e70 Slot::store 'void ()' ]
| `-CompoundStmt 0x55e433633cb8 <col:22, line:857:9>
|   `-CallExpr 0x55e433633c70 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55e433633c58 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55e433633bd8 <col:13> 'void (String &, const String &)' lvalue Function 0x55e433633ab8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55e43326c9d8 'assign_consume')
|     |-UnaryOperator 0x55e433633708 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55e4336336f0 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55e4336336c0 <col:29> 'String *' lvalue ->_ptr 0x55e43362be20
|     |     `-CXXThisExpr 0x55e4336336b0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55e433633ca0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55e433633730 <col:35> 'String':'String' lvalue ->_slot 0x55e43362be80
|         `-CXXThisExpr 0x55e433633720 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55e43362be20 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55e43362be80 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55e43362bef8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55e43362bef8
| `-ParmVarDecl 0x55e43362c008 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55e43362c0a8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55e43362c0a8
| `-ParmVarDecl 0x55e43362c1b8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55e43362c258 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55e43362c258
| `-ParmVarDecl 0x55e43362c368 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55e43362c3d8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55e43362c3d8
| `-ParmVarDecl 0x55e43362c4e8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55e43362c570 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55e433596d70 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55e4336335e0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
