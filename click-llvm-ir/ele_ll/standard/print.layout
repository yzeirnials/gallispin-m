
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55652132c458 prev 0x556521323bf8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55652132c550 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55652132c5e0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55652132c658 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55652132c718 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55652132c7e0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55652132c958 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55652132c890 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55652132ca00 <col:24>
| `-OptimizeNoneAttr 0x55652132ca58 <col:34>
|-CXXMethodDecl 0x55652132caa0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55652132cd58 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55652132cb50 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55652132cbc8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55652132cc48 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55652132ce10 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55652132ce48 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55652132ceb0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55652132cf38 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55652132d258 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55652132cff0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55652132d068 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55652132d0e0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55652132d160 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55652132d370 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x556521334ce8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x556521334ce8
| `-ParmVarDecl 0x556521334df8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x556521334e98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x556521334e98
| `-ParmVarDecl 0x556521334fa8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55652141a3b8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55652131f470 prev 0x55652131f1f0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55652131f568 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55652131f5f8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55652131f658 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55652131f748 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55652131f848 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55652131fa18 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55652131f8c8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55652131f940 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55652131fba8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55652131fae0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55652131fc50 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55652131fd88 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55652131fcc0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55652131ff28 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55652131fe68 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5565213200c8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x556521320008 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x556521320170 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x556521320270 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x556521320350 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521320250 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x556521320230 <col:26> 'int' 1
| `-EnumConstantDecl 0x556521320300 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x556521320368 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565213202e0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5565213202c0 <col:44> 'int' 2
|-CXXMethodDecl 0x5565213204b0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x556521320398 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x556521320418 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x556521320608 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x556521320578 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x556521320848 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5565213206c8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x556521320740 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5565213208f8 <col:20>
| `-OptimizeNoneAttr 0x556521320950 <col:30>
|-CXXMethodDecl 0x556521320a58 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x556521320990 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x556521320b00 <col:20>
| `-OptimizeNoneAttr 0x556521320b58 <col:30>
|-CXXMethodDecl 0x556521320ba8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x556521320c70 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x556521320d88 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x556521320e10 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x556521320e98 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x556521320f20 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x556521320fa8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x556521321038 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5565213210f8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x556521321180 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x556521321208 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x556521321290 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x556521321318 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5565213213a0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x556521321430 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5565213214f0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x556521321580 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5565213216d0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x556521321638 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x556521321860 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x556521321790 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x556521321b10 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x556521321918 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x556521321998 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x556521321a18 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x556521321bc8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x556521321cd0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556521321f60 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521321cb0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x556521321c90 <col:33> 'int' 0
| |-EnumConstantDecl 0x556521321d60 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556521321f78 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521321d40 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x556521321d20 <col:32> 'int' 20
| |-EnumConstantDecl 0x556521321df0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556521321f90 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521321dd0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x556521321db0 <col:38> 'int' 90
| |-EnumConstantDecl 0x556521321e80 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556521321fa8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521321e60 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x556521321e40 <col:35> 'int' 100
| `-EnumConstantDecl 0x556521321f10 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x556521321fc0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556521321ef0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x556521321ed0 <col:32> 'int' 2000
|-CXXMethodDecl 0x556521322000 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x556521322440 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5565213222b0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x556521322328 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556521322510 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x556521322690 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5565213225c0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556521322898 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556521322748 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5565213227c0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556521322998 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x556521322a38 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x556521322b00 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x556521322b90 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x556521322dc0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521322b70 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x556521322b50 <col:36> 'int' EnumConstant 0x556521322b00 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x556521322be0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556521322c30 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556521322c80 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556521322cd0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556521322d20 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x556521322d70 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x556521322ea8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x556521322de8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x556521322f70 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x556521323030 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5565213230f0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5565213231b0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5565213232c8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x556521323390 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x556521323510 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x556521323440 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x556521323638 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x556521323838 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5565213236e8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x556521323768 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x556521331188 <col:54, line:127:5>
|   |-ParenExpr 0x556521331038 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x556521331008 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x556521330cf8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x556521330cd0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x556521330cb8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x556521330ca0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x556521330c70 <col:31> 'Router *' lvalue ->_router 0x55652132eb50
|   |   |         `-CXXThisExpr 0x556521330c60 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x556521330d58 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521330d38 <col:48> 'int' 0
|   |   `-CallExpr 0x556521330f68 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x556521330f50 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521330f30 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521330fa8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521330dc8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x556521330fc0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521330de8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x556521330fd8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521330e20 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x556521330ff0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521330f18 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521330f00 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521330eb8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5565213310d0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x556521331068 <col:9> 'Router *' lvalue ->_router 0x55652132eb50
|   | | `-CXXThisExpr 0x556521331058 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5565213310b8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556521331098 <col:19> 'Router *' lvalue ParmVar 0x5565213236e8 'r' 'Router *'
|   `-BinaryOperator 0x556521331168 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x556521331100 <col:9> 'int' lvalue ->_eindex 0x55652132ebb8
|     | `-CXXThisExpr 0x5565213310f0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x556521331150 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x556521331130 <col:19> 'int' lvalue ParmVar 0x556521323768 'eindex' 'int'
|-CXXMethodDecl 0x5565213239c0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5565213238f8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x556521323a90 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x556521323b58 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x556521323bf8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x556521323e48 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x556521323cc0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x556521323d40 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x556521323ef8 <col:20>
| `-OptimizeNoneAttr 0x556521323f50 <col:30>
|-CXXMethodDecl 0x556521324058 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x556521323f90 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x556521324100 <col:20>
| `-OptimizeNoneAttr 0x556521324158 <col:30>
|-CXXMethodDecl 0x556521324228 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x556521324198 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5565213242d0 <col:20>
| `-OptimizeNoneAttr 0x556521324328 <col:30>
|-CXXMethodDecl 0x5565213244b8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x556521324360 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5565213243e0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x556521324648 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x556521324580 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x556521324798 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x556521324708 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5565213248e8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x556521324858 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x556521324a38 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5565213249a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x556521324cf8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x556521324af0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x556521324b70 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x556521324c18 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x556521324dd0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x556521324e90 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x556521325160 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556521325010 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x556521325088 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x556521325288 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x556521325460 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x556521325340 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5565213253c0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x556521325648 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x556521325528 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5565213255a8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5565213259b8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x556521325708 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556521325780 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556521325800 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556521330770 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556521330750 <col:106> 'int' 0
| `-ParmVarDecl 0x556521325878 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565213307a8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556521330788 <col:126> 'int' 0
|-CXXMethodDecl 0x556521325d58 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556521325a88 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556521325b20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556521325ba0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x556521325c18 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565213307e0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565213307c0 <col:114> 'int' 0
|-CXXMethodDecl 0x5565213260e8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556521325e30 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x556521325ea8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556521325f28 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5565213307f8 <col:96> 'int' 0
| `-ParmVarDecl 0x556521325fa0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556521330838 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556521330818 <col:116> 'int' 0
|-CXXMethodDecl 0x556521326468 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5565213261b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x556521326230 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5565213262b0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556521330870 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556521330850 <col:109> 'int' 0
| `-ParmVarDecl 0x556521326328 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565213308a8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556521330888 <col:129> 'int' 0
|-CXXMethodDecl 0x5565213267e8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556521326538 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5565213265b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556521326630 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5565213266a8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565213308e0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565213308c0 <col:117> 'int' 0
|-CXXMethodDecl 0x556521326b78 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5565213268c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521326938 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5565213269b8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5565213308f8 <col:99> 'int' 0
| `-ParmVarDecl 0x556521326a30 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556521330938 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556521330918 <col:119> 'int' 0
|-CXXMethodDecl 0x556521326f98 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x556521326c48 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x556521326cc8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x556521326d40 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556521326dc0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556521330970 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556521330950 <col:108> 'int' 0
| `-ParmVarDecl 0x556521326e40 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5565213309a8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x556521330988 <col:141> 'int' 0
|-CXXMethodDecl 0x5565213273b8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x556521327070 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5565213270f0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x556521327168 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5565213271e8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x556521327268 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5565213309c0 <col:121> 'int' 0
|-CXXMethodDecl 0x5565213277e8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x556521327498 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x556521327518 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x556521327590 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556521327610 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5565213309e0 <col:98> 'int' 0
| `-ParmVarDecl 0x556521327690 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x556521330a00 <col:123> 'int' 0
|-CXXMethodDecl 0x556521327ab0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5565213278c0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556521327940 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5565213279c0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x556521330a20 <col:80> 'int' 0
|-EnumDecl 0x556521327b68 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x556521327c70 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556521327f00 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521327c50 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x556521327c30 <col:42> 'int' 1
| |-EnumConstantDecl 0x556521327d00 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556521327f18 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521327ce0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x556521327cc0 <col:40> 'int' 2
| |-EnumConstantDecl 0x556521327d90 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556521327f30 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521327d70 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x556521327d50 <col:44> 'int' 4
| |-EnumConstantDecl 0x556521327e20 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556521327f48 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556521327e00 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x556521327de0 <col:36> 'int' 7
| `-EnumConstantDecl 0x556521327eb0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x556521327f60 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556521327e90 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x556521327e70 <col:34> 'int' 6
|-CXXMethodDecl 0x556521328218 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x556521327f88 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x556521328028 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5565213280a8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x556521328120 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x556521330ad8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x556521330ac0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x556521330aa8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x556521330a88 <col:98, col:105> 'String' (CXXTemporary 0x556521330a88)
|           `-CXXTemporaryObjectExpr 0x556521330a50 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5565213284b8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5565213282e8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x556521328360 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5565213283d8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x556521330b88 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x556521330b70 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x556521330b58 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x556521330b38 <col:94, col:101> 'String' (CXXTemporary 0x556521330b38)
| |         `-CXXTemporaryObjectExpr 0x556521330b00 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x556521331370 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5565213312e8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5565213312b8 <col:9> '<bound member function type>' ->add_task_handlers 0x556521328218
|     | `-CXXThisExpr 0x5565213312a8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x556521331328 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x556521331228 <col:27> 'Task *' lvalue ParmVar 0x5565213282e8 'task' 'Task *'
|     |-ImplicitCastExpr 0x556521331340 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x556521331248 <col:33> 'NotifierSignal *' lvalue ParmVar 0x556521328360 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x556521331358 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x556521331268 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x556521327eb0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x556521331288 <col:62> 'const String' lvalue ParmVar 0x5565213283d8 'prefix' 'const String &'
|-CXXMethodDecl 0x5565213286c8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x556521328580 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5565213285f8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x556521330c38 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x556521330c20 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x556521330c08 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x556521330be8 <col:70, col:77> 'String' (CXXTemporary 0x556521330be8)
| |         `-CXXTemporaryObjectExpr 0x556521330bb0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x556521331548 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5565213314c0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x556521331490 <col:9> '<bound member function type>' ->add_task_handlers 0x556521328218
|     | `-CXXThisExpr 0x556521331480 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x556521331500 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x556521331400 <col:27> 'Task *' lvalue ParmVar 0x556521328580 'task' 'Task *'
|     |-ImplicitCastExpr 0x556521331518 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x556521331420 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x556521331530 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x556521331440 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x556521327eb0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x556521331460 <col:57> 'const String' lvalue ParmVar 0x5565213285f8 'prefix' 'const String &'
|-CXXMethodDecl 0x5565213289a8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x556521328790 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521328810 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521328888 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x556521328c58 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x556521328a78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521328af8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521328b78 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x556521328f48 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x556521328d28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521328da8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521328e20 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5565213291f8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x556521329018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521329098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521329118 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5565213294a8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5565213292c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521329348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565213293c8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x556521329758 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x556521329578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565213295f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521329670 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x556521329a08 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x556521329828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565213298a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521329928 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x556521329d18 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x556521329b30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521329bb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521329c30 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x556521329ff8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x556521329de8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556521329e68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556521329f10 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55652132a2d8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55652132a0c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55652132a148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55652132a1f0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55652132a540 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55652132a3a8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55652132a428 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55652132a4a0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55652132a7e8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55652132a610 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55652132a690 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55652132a708 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55652132aa98 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55652132a8b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55652132a938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55652132a9b8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55652132ad48 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55652132ab68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55652132abe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55652132ac60 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55652132aff8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55652132ae18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55652132ae98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55652132af10 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55652132b2c8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55652132b0c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55652132b148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55652132b1e8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55652132b5f8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55652132b398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55652132b418 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55652132b490 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55652132b508 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556521330c50 <col:93> 'bool' false
|-CXXMethodDecl 0x55652132b7e0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55652132b6c8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55652132b748 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55652132b9b8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55652132b8a0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55652132b920 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55652132bc98 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55652132ba78 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55652132baf0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55652132bb70 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55652132bbe8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55652132bf88 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55652132bd68 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55652132bde0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55652132be60 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55652132bed8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55652132c1c0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55652132c060 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55652132c0e0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55652132c3a8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55652132c288 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55652132c308 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55652132c458 prev 0x556521323bf8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55652132c550 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55652132c5e0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55652132c658 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55652132c718 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55652132c7e0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55652132c958 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55652132c890 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55652132ca00 <col:24>
| | `-OptimizeNoneAttr 0x55652132ca58 <col:34>
| |-CXXMethodDecl 0x55652132caa0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55652132cd58 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55652132cb50 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55652132cbc8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55652132cc48 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55652132ce10 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55652132ce48 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55652132ceb0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55652132cf38 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55652132d258 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55652132cff0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55652132d068 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55652132d0e0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55652132d160 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55652132d370 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x556521334ce8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x556521334ce8
| | `-ParmVarDecl 0x556521334df8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x556521334e98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x556521334e98
| | `-ParmVarDecl 0x556521334fa8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55652141a3b8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55652132d3e8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55652132d488 <col:38> "" ""
|-CXXMethodDecl 0x55652132d518 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55652132d5b8 <col:44> "" ""
|-AccessSpecDecl 0x55652132d628 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55652132d650 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55652132d750 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55652132d7a0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55652132d730 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55652132d710 <col:27> 'int' 4
|-FieldDecl 0x55652132d858 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55652132da08 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55652132dac0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55652132eb50 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55652132ebb8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55652132ed08 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55652132ec48 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55652132eeb8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55652132edc8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55652132f098 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55652132ef78 <col:20> col:23 'int'
| `-ParmVarDecl 0x55652132eff8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55652132f340 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55652132f160 <col:23> col:26 'int'
| |-ParmVarDecl 0x55652132f1e0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55652132f258 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55652132f3f8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55652132f4c0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55652132f510 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55652132f560 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55652132f740 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55652132f5f0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55652132f668 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55652132f9e8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55652132f808 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55652132f888 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55652132f900 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55652132fc08 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55652132fab8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55652132fb38 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55652132ff40 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55652132fcc8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55652132fd48 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55652132fdc0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55652132fe40 <col:57> col:60 'int'
|-CXXMethodDecl 0x556521330128 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556521330010 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x556521330090 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x556521330278 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5565213301e8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5565213305f8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x556521330338 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5565213303b8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x556521330430 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5565213304b0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x556521330710 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Print
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class String _label
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
       136 |   int _bytes
       140 |   _Bool _active
   141:0-0 |   _Bool _timestamp
   141:1-1 |   _Bool _headroom
       142 |   _Bool _print_anno
       143 |   uint8_t _contents
           | [sizeof=144, dsize=144, align=8,
           |  nvsize=144, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565210f2300 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5565210f2418 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5565210f24b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5565210f2518 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5565210f2578 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5565210f2628 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565210f2930 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565210f2a48 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5565210f2af0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5565210f2b58 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5565210f2be8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5565210f8c80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565210f90b8 <col:12>
|-CXXConstructorDecl 0x5565210f8d88 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5565210f8e98 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5565210f2af0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5565210fb640 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5565210fb610 <col:12> 'const char *const' lvalue .data 0x5565210f2af0
| |     `-DeclRefExpr 0x5565210fb5f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565210f8e98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5565210f2b58 'length' 'int'
| | `-ImplicitCastExpr 0x5565210fb6d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5565210fb6a0 <col:12> 'const int' lvalue .length 0x5565210f2b58
| |     `-DeclRefExpr 0x5565210fb680 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565210f8e98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5565210f2be8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5565210fb760 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5565210fb730 <col:12> 'String::memo_t *const' lvalue .memo 0x5565210f2be8
| |     `-DeclRefExpr 0x5565210fb710 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565210f8e98 '' 'const String::rep_t &'
| `-CompoundStmt 0x5565210fb7b8 <col:12>
|-CXXConstructorDecl 0x5565210f8f38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5565210f8f38
| `-ParmVarDecl 0x5565210f9048 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5565210fe5a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556521109fb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55652110a0c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55652110a5e0 <col:12>
|   |-BinaryOperator 0x55652110a3f8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55652110a3b0 <col:12> 'const char *' lvalue ->data 0x5565210f2af0
|   | | `-CXXThisExpr 0x55652110a3a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55652110a3e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55652110a370 <col:12> 'const char *const' lvalue .data 0x5565210f2af0
|   |     `-DeclRefExpr 0x55652110a350 <col:12> 'const String::rep_t' lvalue ParmVar 0x55652110a0c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55652110a4c0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55652110a478 <col:12> 'int' lvalue ->length 0x5565210f2b58
|   | | `-CXXThisExpr 0x55652110a468 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55652110a4a8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55652110a438 <col:12> 'const int' lvalue .length 0x5565210f2b58
|   |     `-DeclRefExpr 0x55652110a418 <col:12> 'const String::rep_t' lvalue ParmVar 0x55652110a0c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55652110a588 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55652110a540 <col:12> 'String::memo_t *' lvalue ->memo 0x5565210f2be8
|   | | `-CXXThisExpr 0x55652110a530 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55652110a570 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55652110a500 <col:12> 'String::memo_t *const' lvalue .memo 0x5565210f2be8
|   |     `-DeclRefExpr 0x55652110a4e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55652110a0c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55652110a5d0 <col:12>
|     `-UnaryOperator 0x55652110a5b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55652110a5a8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55652110a138 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55652110a138
  `-ParmVarDecl 0x55652110a248 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565210e9870 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565210e9988 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5565210e9a18 <col:16, col:22> col:16 public
|-TypedefDecl 0x5565210e9a58 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x556520dbdfd0 'const char *'
|   `-QualType 0x556520dbd521 'const char' const
|     `-BuiltinType 0x556520dbd520 'char'
|-TypedefDecl 0x5565210e9ae0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5565210e9ab0 'String::const_iterator' sugar
|   |-Typedef 0x5565210e9a58 'const_iterator'
|   `-PointerType 0x556520dbdfd0 'const char *'
|     `-QualType 0x556520dbd521 'const char' const
|       `-BuiltinType 0x556520dbd520 'char'
|-TypedefDecl 0x5565210e9c50 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5565210e9bc0 'int (String::*)() const'
|   |-RecordType 0x5565210e9900 'String'
|   | `-CXXRecord 0x5565210e9870 'String'
|   `-ParenType 0x5565210e9b60 'int () const' sugar
|     `-FunctionProtoType 0x5565210be700 'int () const' const cdecl
|       `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565210e9cb8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x556520f132e0 'int64_t' sugar
|   |-Typedef 0x556520e26390 'int64_t'
|   `-TypedefType 0x556520dff630 '__int64_t' sugar
|     |-Typedef 0x556520dff208 '__int64_t'
|     `-BuiltinType 0x556520dbd5a0 'long'
|-TypedefDecl 0x5565210e9d20 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x556520f13200 'uint64_t' sugar
|   |-Typedef 0x556520e26530 'uint64_t'
|   `-TypedefType 0x556520dff6c0 '__uint64_t' sugar
|     |-Typedef 0x556520dff278 '__uint64_t'
|     `-BuiltinType 0x556520dbd640 'unsigned long'
|-TypedefDecl 0x5565210e9db0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5565210e9d80 'String::intmax_t' sugar
|   |-Typedef 0x5565210e9cb8 'intmax_t'
|   `-TypedefType 0x556520f132e0 'int64_t' sugar
|     |-Typedef 0x556520e26390 'int64_t'
|     `-TypedefType 0x556520dff630 '__int64_t' sugar
|       |-Typedef 0x556520dff208 '__int64_t'
|       `-BuiltinType 0x556520dbd5a0 'long'
|-TypedefDecl 0x5565210e9e40 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5565210e9e10 'String::uintmax_t' sugar
|   |-Typedef 0x5565210e9d20 'uintmax_t'
|   `-TypedefType 0x556520f13200 'uint64_t' sugar
|     |-Typedef 0x556520e26530 'uint64_t'
|     `-TypedefType 0x556520dff6c0 '__uint64_t' sugar
|       |-Typedef 0x556520dff278 '__uint64_t'
|       `-BuiltinType 0x556520dbd640 'unsigned long'
|-CXXConstructorDecl 0x5565210e9f00 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5565210ea0a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5565210e9fe8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5565210ea258 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5565210ea198 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5565210ea3b0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5565210ea320 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5565210ea5c8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5565210ea478 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5565210ea4f8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5565210ea7e8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5565210ea698 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5565210ea718 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5565210eaa08 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5565210ea8b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5565210ea938 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5565210eac28 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5565210eaad8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5565210eab58 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5565210eadb8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5565210eacf0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5565210eaf38 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5565210eae78 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5565210eb0c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5565210eb000 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5565210eb220 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5565210eb190 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5565210eb378 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5565210eb2e8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5565210eb4d0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5565210eb440 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5565210eb658 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5565210eb598 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5565210eb7e8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5565210eb720 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5565210eb978 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5565210eb8b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5565210ebb08 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5565210eba40 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5565210ebc00 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5565210ebd28 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5565210ebea8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5565210ebde0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5565210ebff8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5565210ebf68 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5565210ec0b0 <col:63> "" ""
|-CXXMethodDecl 0x5565210ec1f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5565210ec138 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5565210ec408 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5565210ec2b8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5565210ec338 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5565210ec628 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5565210ec4d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5565210ec550 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5565210ec908 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5565210ec6e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5565210ec768 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5565210f8750 <col:55> 'int' 10
| `-ParmVarDecl 0x5565210ec7e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565210f8770 <col:76> 'bool' true
|-CXXMethodDecl 0x5565210ecbe8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5565210ec9d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5565210eca50 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5565210f8780 <col:56> 'int' 10
| `-ParmVarDecl 0x5565210ecac8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565210f87a0 <col:77> 'bool' true
|-CXXMethodDecl 0x5565210eccf0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5565210ecdb8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5565210ece80 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5565210ecf20 <col:20>
| `-OptimizeNoneAttr 0x5565210ecf78 <col:30>
|-CXXConversionDecl 0x5565210ed068 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5565210ed138 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5565210ed1f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5565210ed2e8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5565210ed3a8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5565210ed528 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5565210ed460 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5565210ed678 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5565210ed5e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5565210ed768 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5565210ed828 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5565210eda78 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5565210ed8e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5565210ed960 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5565210edcd8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5565210edb40 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5565210edbc0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5565210edda8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5565210edfb8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5565210ede60 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5565210edee0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5565210ee1d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5565210ee080 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5565210ee100 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5565210ee368 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5565210ee2a0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5565210ee458 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5565210ee5c8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5565210ee508 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5565210ee7d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5565210ee688 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5565210ee708 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5565210ee9f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5565210ee898 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5565210ee910 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5565210eeb80 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5565210eeab0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5565210eeda0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5565210eec40 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5565210eecc0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5565210eeef0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5565210eee60 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5565210ef0c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5565210eefb0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5565210ef030 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5565210ef218 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5565210ef188 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5565210ef430 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5565210ef2d0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5565210ef350 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5565210f87b0 <col:39> 'int' 0
|-CXXMethodDecl 0x5565210ef650 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5565210ef4f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5565210ef570 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5565210f87d0 <col:48> 'int' 0
|-CXXMethodDecl 0x5565210ef830 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5565210ef710 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5565210ef790 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5565210f87f0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5565210ef900 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5565210ef9c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5565210efa80 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5565210efb40 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5565210efc00 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5565210efda8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5565210efcb0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5565210eff28 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5565210efe60 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5565210f0100 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5565210effe8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5565210f0278 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5565210f01b8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5565210f03c0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5565210f0330 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5565210f0510 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5565210f0480 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5565210f06e8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5565210f05d0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5565210f0650 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5565210f08c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5565210f07b0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5565210f0830 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5565210f0a18 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5565210f0988 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5565210f0c28 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5565210f0ad8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5565210f0b58 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5565210f0d88 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5565210f0cf0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5565210f0ee0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5565210f0e48 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5565210f0f88 <col:57> "" ""
|-CXXMethodDecl 0x5565210f1098 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5565210f1008 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5565210f11e8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5565210f1158 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5565210f1368 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5565210f12a0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5565210f1430 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5565210f14f0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5565210f15b0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5565210f1650 <col:49> "" ""
|-CXXMethodDecl 0x5565210f16e0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5565210f17a0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5565210f1890 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5565210f1958 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5565210f1a18 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5565210f1ad8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5565210f1bd0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5565210f1c98 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5565210f1d60 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5565210f1f38 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5565210f1e18 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5565210f1e98 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5565210f2160 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5565210f2000 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5565210f2080 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5565210f2270 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5565210f22d8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5565210f2300 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5565210f2418 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5565210f24b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5565210f2518 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5565210f2578 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5565210f2628 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5565210f2690 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5565210f28c8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5565210f2918 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565210f28a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5565210f27b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5565210f2760 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5565210f27a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5565210f2780 <col:32> 'int' 8
|-CXXRecordDecl 0x5565210f2930 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565210f2a48 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5565210f2af0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5565210f2b58 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5565210f2be8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5565210f8c80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5565210f90b8 <col:12>
| |-CXXConstructorDecl 0x5565210f8d88 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5565210f8e98 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5565210f2af0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5565210fb640 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5565210fb610 <col:12> 'const char *const' lvalue .data 0x5565210f2af0
| | |     `-DeclRefExpr 0x5565210fb5f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565210f8e98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5565210f2b58 'length' 'int'
| | | `-ImplicitCastExpr 0x5565210fb6d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5565210fb6a0 <col:12> 'const int' lvalue .length 0x5565210f2b58
| | |     `-DeclRefExpr 0x5565210fb680 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565210f8e98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5565210f2be8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5565210fb760 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5565210fb730 <col:12> 'String::memo_t *const' lvalue .memo 0x5565210f2be8
| | |     `-DeclRefExpr 0x5565210fb710 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565210f8e98 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5565210fb7b8 <col:12>
| |-CXXConstructorDecl 0x5565210f8f38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5565210f8f38
| | `-ParmVarDecl 0x5565210f9048 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5565210fe5a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x556521109fb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55652110a0c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55652110a5e0 <col:12>
| |   |-BinaryOperator 0x55652110a3f8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55652110a3b0 <col:12> 'const char *' lvalue ->data 0x5565210f2af0
| |   | | `-CXXThisExpr 0x55652110a3a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55652110a3e0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55652110a370 <col:12> 'const char *const' lvalue .data 0x5565210f2af0
| |   |     `-DeclRefExpr 0x55652110a350 <col:12> 'const String::rep_t' lvalue ParmVar 0x55652110a0c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55652110a4c0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55652110a478 <col:12> 'int' lvalue ->length 0x5565210f2b58
| |   | | `-CXXThisExpr 0x55652110a468 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55652110a4a8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55652110a438 <col:12> 'const int' lvalue .length 0x5565210f2b58
| |   |     `-DeclRefExpr 0x55652110a418 <col:12> 'const String::rep_t' lvalue ParmVar 0x55652110a0c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55652110a588 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55652110a540 <col:12> 'String::memo_t *' lvalue ->memo 0x5565210f2be8
| |   | | `-CXXThisExpr 0x55652110a530 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55652110a570 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55652110a500 <col:12> 'String::memo_t *const' lvalue .memo 0x5565210f2be8
| |   |     `-DeclRefExpr 0x55652110a4e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55652110a0c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55652110a5d0 <col:12>
| |     `-UnaryOperator 0x55652110a5b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55652110a5a8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55652110a138 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55652110a138
|   `-ParmVarDecl 0x55652110a248 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5565210f2c60 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5565210f2ea8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5565210f2cc8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5565210f2d48 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5565210f2dc0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5565210f8c40 <col:79, line:261:5>
|   |-BinaryOperator 0x5565210f88b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5565210f8850 <col:2, col:5> 'const char *' lvalue .data 0x5565210f2af0
|   | | `-MemberExpr 0x5565210f8820 <col:2> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|   | |   `-CXXThisExpr 0x5565210f8810 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5565210f88a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5565210f8880 <col:12> 'const char *' lvalue ParmVar 0x5565210f2cc8 'data' 'const char *'
|   |-BinaryOperator 0x5565210f8980 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5565210f8918 <col:2, col:5> 'int' lvalue .length 0x5565210f2b58
|   | | `-MemberExpr 0x5565210f88e8 <col:2> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|   | |   `-CXXThisExpr 0x5565210f88d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5565210f8968 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5565210f8948 <col:14> 'int' lvalue ParmVar 0x5565210f2d48 'length' 'int'
|   `-IfStmt 0x5565210f8c28 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5565210f8aa0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5565210f8a88 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5565210f8a68 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5565210f8a48 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5565210f89e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|     |       | `-MemberExpr 0x5565210f89b0 <col:7> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|     |       |   `-CXXThisExpr 0x5565210f89a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5565210f8a30 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565210f8a10 <col:17> 'String::memo_t *' lvalue ParmVar 0x5565210f2dc0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5565210f8c00 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5565210f8be8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565210f8af0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5565210e18d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5565210f8b58 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5565210f24b8
|         `-ImplicitCastExpr 0x5565210f8b40 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5565210f8b20 <col:27> 'String::memo_t *' lvalue ParmVar 0x5565210f2dc0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5565210f3158 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5565210f2f78 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5565210f2ff8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5565210f3070 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5565210f2c60 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5565210f90c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565210f9258 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5565210f91c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5565210f9130 <col:2> '<bound member function type>' ->assign_memo 0x5565210f2ea8
|     | `-ImplicitCastExpr 0x5565210f91f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5565210f9120 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5565210f9210 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5565210f9160 <col:14> 'const char *' lvalue ParmVar 0x5565210f2f78 'data' 'const char *'
|     |-ImplicitCastExpr 0x5565210f9228 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5565210f9180 <col:20> 'int' lvalue ParmVar 0x5565210f2ff8 'length' 'int'
|     `-ImplicitCastExpr 0x5565210f9240 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5565210f91a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5565210f3070 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5565210f32e8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5565210f3228 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5565210f94b0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5565210f9430 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5565210f9280 <col:2> '<bound member function type>' ->assign_memo 0x5565210f2ea8
|     | `-CXXThisExpr 0x5565210f9270 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5565210f9468 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5565210f9300 <col:14, col:19> 'const char *' lvalue .data 0x5565210f2af0
|     |   `-MemberExpr 0x5565210f92d0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5565210f2c60
|     |     `-DeclRefExpr 0x5565210f92b0 <col:14> 'const String' lvalue ParmVar 0x5565210f3228 'x' 'const String &'
|     |-ImplicitCastExpr 0x5565210f9480 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5565210f9380 <col:25, col:30> 'int' lvalue .length 0x5565210f2b58
|     |   `-MemberExpr 0x5565210f9350 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5565210f2c60
|     |     `-DeclRefExpr 0x5565210f9330 <col:25> 'const String' lvalue ParmVar 0x5565210f3228 'x' 'const String &'
|     `-ImplicitCastExpr 0x5565210f9498 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5565210f9400 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|         `-MemberExpr 0x5565210f93d0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5565210f2c60
|           `-DeclRefExpr 0x5565210f93b0 <col:38> 'const String' lvalue ParmVar 0x5565210f3228 'x' 'const String &'
|-CXXMethodDecl 0x5565210f33b0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5565210f9e70 <col:31, line:278:5>
|   `-IfStmt 0x5565210f9e58 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5565210f9550 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5565210f9538 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5565210f9508 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|     |     `-MemberExpr 0x5565210f94d8 <col:6> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|     |       `-CXXThisExpr 0x5565210f94c8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5565210f9e30 <col:15, line:277:2>
|       |-ParenExpr 0x5565210f9a00 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5565210f99d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5565210f9660 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5565210f9648 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5565210f9630 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5565210f95f0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5565210f24b8
|       |   |       `-ImplicitCastExpr 0x5565210f95d8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5565210f95a8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|       |   |           `-MemberExpr 0x5565210f9578 <col:27> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|       |   |             `-CXXThisExpr 0x5565210f9568 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5565210f96c0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5565210f96a0 <col:54> 'int' 0
|       |   `-CallExpr 0x5565210f9930 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5565210f9918 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5565210f9898 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5565210f9970 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5565210f97a8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5565210f9988 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5565210f97d8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5565210f99a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5565210f9810 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5565210f99b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5565210f9880 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5565210f9868 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5565210f9830 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5565210f9d50 <line:274:6, line:275:22>
|       | |-CallExpr 0x5565210f9c10 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5565210f9bf8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5565210f9b70 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5565210e2d20 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5565210f9b40 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5565210f24b8
|       | |   `-ImplicitCastExpr 0x5565210f9b28 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5565210f9af8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|       | |       `-MemberExpr 0x5565210f9ac8 <col:40> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|       | |         `-CXXThisExpr 0x5565210f9ab8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5565210f9d10 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5565210f9cf8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5565210f9c38 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5565210f7b90 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5565210f9d38 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5565210f9c98 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|       |       `-MemberExpr 0x5565210f9c68 <col:15> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|       |         `-CXXThisExpr 0x5565210f9c58 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5565210f9e10 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5565210f9da8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5565210f2be8
|         | `-MemberExpr 0x5565210f9d78 <col:6> 'String::rep_t' lvalue ->_r 0x5565210f2c60
|         |   `-CXXThisExpr 0x5565210f9d68 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5565210f9df8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5565210f9dd8 <col:16> 'int' 0
|-CXXMethodDecl 0x5565210f3648 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5565210f3468 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5565210f34e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5565210f3560 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5565210f3720 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5565210f3970 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5565210f37d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5565210f3858 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5565210f38d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5565210f3b58 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5565210f3a40 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5565210f3ac0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5565210f3c58 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5565210f9f48 <col:41, line:286:5>
|   `-ReturnStmt 0x5565210f9f38 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5565210f9f08 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5565210f9ed0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5565210f9eb8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5565210f9e98 <col:46> 'int' 1
|-CXXMethodDecl 0x5565210f3ef8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5565210f3d10 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5565210f3d90 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5565210f3e10 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5565210f7b90 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5565210f3fc0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5565210f7c60 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5565210f7e30 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5565210f7d18 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5565210f7d98 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5565210f7ef0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5565210f7fb8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5565210f80b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5565210f8130 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5565210f81a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5565210f8210 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5565210f8310 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5565210f8360 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565210f82f0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5565210f82d0 <col:22> 'int' 14
|-CXXMethodDecl 0x5565210f8578 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5565210f8390 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5565210f8410 <col:38> col:41 'int'
| `-ParmVarDecl 0x5565210f8490 <col:43> col:46 'int'
|-FriendDecl 0x5565210f8680 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5565210f8710 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556521337e58 <../elements/standard/print.hh:70:1, line:96:1> line:70:7 class Print definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x556521337fb8 <col:1, col:7> col:7 implicit referenced class Print
|-AccessSpecDecl 0x556521338048 <col:32, col:38> col:32 public
|-CXXConstructorDecl 0x5565213380d0 <line:72:5, col:11> col:5 Print 'void ()'
|-CXXMethodDecl 0x5565213381d0 <line:74:5, col:54> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x556521320ba8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x556521339408 <col:36, col:54>
|   `-ReturnStmt 0x5565213393f8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5565213393e0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5565213393c0 <col:45> 'const char [6]' lvalue "Print"
|-CXXMethodDecl 0x556521338298 <line:75:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x556521320c70 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x556521339468 <col:36, col:56>
|   `-ReturnStmt 0x556521339458 <col:38, col:45>
|     `-ImplicitCastExpr 0x556521339440 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x556521339420 <col:45> 'const char []' lvalue Var 0x556521320f20 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x556521338570 <line:77:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x556521322440 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x556521338420 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x556521338498 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x556521338640 <line:78:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x556521324e90 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5565213394a0 <col:39, col:54>
|   `-ReturnStmt 0x556521339490 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x556521339480 <col:48> 'bool' true
|-CXXMethodDecl 0x556521338700 <line:79:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x556521322510 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x556521338840 <line:81:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55652131fd88 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5565213387b0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5565213388e8 <line:83:2, col:9> col:2 private
|-FieldDecl 0x556521338920 <line:85:5, col:12> col:12 _label 'String'
|-FieldDecl 0x556521338988 <line:86:5, col:9> col:9 _bytes 'int'
|-FieldDecl 0x5565213389e8 <line:87:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x556521338a88 <line:88:5, col:23> col:10 _timestamp 'bool'
| `-ConstantExpr 0x556521338a68 <col:23> 'int' Int: 1
|   `-IntegerLiteral 0x556521338a38 <col:23> 'int' 1
|-FieldDecl 0x556521338b28 <line:89:5, col:22> col:10 _headroom 'bool'
| `-ConstantExpr 0x556521338b08 <col:22> 'int' Int: 1
|   `-IntegerLiteral 0x556521338ad8 <col:22> 'int' 1
|-FieldDecl 0x556521338b88 <line:93:5, col:10> col:10 _print_anno 'bool'
|-FieldDecl 0x556521338be8 <line:94:5, col:13> col:13 _contents 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x556521338c68 <line:70:7> col:7 implicit Print 'void (const Print &)' inline default_delete noexcept-unevaluated 0x556521338c68
| `-ParmVarDecl 0x556521338d78 <col:7> col:7 'const Print &'
|-CXXConstructorDecl 0x556521338e18 <col:7> col:7 implicit Print 'void (Print &&)' inline default_delete noexcept-unevaluated 0x556521338e18
| `-ParmVarDecl 0x556521338f28 <col:7> col:7 'Print &&'
|-CXXMethodDecl 0x556521338fc8 <col:7> col:7 implicit operator= 'Print &(const Print &)' inline default_delete noexcept-unevaluated 0x556521338fc8
| `-ParmVarDecl 0x5565213390d8 <col:7> col:7 'const Print &'
|-CXXMethodDecl 0x556521339148 <col:7> col:7 implicit operator= 'Print &(Print &&)' inline default_delete noexcept-unevaluated 0x556521339148
| `-ParmVarDecl 0x556521339258 <col:7> col:7 'Print &&'
`-CXXDestructorDecl 0x5565213392e0 <col:7> col:7 implicit ~Print 'void ()' inline default noexcept-unevaluated 0x5565213392e0
  `-Overrides: [ 0x55652131f748 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Print = type { %class.Element.base, %class.String, i32, i8, i8, i8, i8 }
  NonVirtualBaseLLVMType:%class.Print = type { %class.Element.base, %class.String, i32, i8, i8, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:141>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:141>
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556521367a60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x556521367c38 prev 0x556521367a60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556521367cc8 <col:46, col:52> col:46 public
|-TypedefDecl 0x556521367cf0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x556521369650 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x556521369600 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5565213695e0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x556521367f08 'type'
|     `-SubstTemplateTypeParmType 0x556521367ed0 'String' sugar
|       |-TemplateTypeParmType 0x5565210ae120 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210ae0d0 'T'
|       `-RecordType 0x5565210e9900 'String'
|         `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x556521369708 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5565213696d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5565213696b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x556521369650 'type'
|     `-ElaboratedType 0x556521369600 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5565213695e0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x556521367f08 'type'
|         `-SubstTemplateTypeParmType 0x556521367ed0 'String' sugar
|           |-TemplateTypeParmType 0x5565210ae120 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5565210ae0d0 'T'
|           `-RecordType 0x5565210e9900 'String'
|             `-CXXRecord 0x5565210e9870 'String'
|-CXXMethodDecl 0x556521369888 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x556521369798 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x556521369978 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x556521369a58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x556521369a58
|-CXXMethodDecl 0x556521369d28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x556521369c30 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x556521369f68 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x556521369de0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556521369e58 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136a160 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55652136a050 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55652136a0c8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136a2b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55652136a388 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55652136a5d8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55652136a448 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55652136a4c0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136a838 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55652136a6a8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55652136a720 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136a9f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55652136a908 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136abb8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55652136aac0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136ac70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55652136ad20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55652136af58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55652136add0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55652136ae48 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55652136b1f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55652136b100 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55652136b2c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55652136b310 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55652136b360 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565213220b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5565213664c8 prev 0x5565213220b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5565213679d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x556521367980 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x556521367960 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x556521367810 'type'
|     `-SubstTemplateTypeParmType 0x5565213676a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x556521083ed0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x556521083e78 'F'
|       `-RecordType 0x556521367300 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x556521367220 'typed_array_memory'
|-FieldDecl 0x55652136b3b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55652136b400 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55652136b438 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|   |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5565210bb3e8 'T'
|   `-RecordType 0x5565210e9900 'String'
|     `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136b4c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55652136b490 'String &'
|   `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|     |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565210bb3e8 'T'
|     `-RecordType 0x5565210e9900 'String'
|       `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136b558 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55652136b520 'const String &'
|   `-QualType 0x556521366561 'const String' const
|     `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-RecordType 0x5565210e9900 'String'
|         `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136b5e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55652136b5b0 'String *'
|   `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|     |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565210bb3e8 'T'
|     `-RecordType 0x5565210e9900 'String'
|       `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136b678 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55652136b640 'const String *'
|   `-QualType 0x556521366561 'const String' const
|     `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-RecordType 0x5565210e9900 'String'
|         `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136c2d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55652136c280 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55652136c260 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55652136c198 'type'
|     `-LValueReferenceType 0x55652136c160 'const String &'
|       `-QualType 0x55652136bf01 'const String' const
|         `-SubstTemplateTypeParmType 0x55652136bf00 'String' sugar
|           |-TemplateTypeParmType 0x55652108de20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55652108ddc8 'T'
|           `-RecordType 0x5565210e9900 'String'
|             `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136c338 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55652136b520 'const String &'
|   `-QualType 0x556521366561 'const String' const
|     `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-RecordType 0x5565210e9900 'String'
|         `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136c390 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x55652136c3f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55652136b5b0 'String *'
|   `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|     |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565210bb3e8 'T'
|     `-RecordType 0x5565210e9900 'String'
|       `-CXXRecord 0x5565210e9870 'String'
|-TypedefDecl 0x55652136c460 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55652136b640 'const String *'
|   `-QualType 0x556521366561 'const String' const
|     `-SubstTemplateTypeParmType 0x556521366560 'String' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-RecordType 0x5565210e9900 'String'
|         `-CXXRecord 0x5565210e9870 'String'
|-EnumDecl 0x55652136c4b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55652136c5b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55652136c590 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5565210bcac8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5565210bcaa0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5565210bca80 <col:40> 'int' 1
|-CXXConstructorDecl 0x55652136c638 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55652136c8c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55652136c6f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55652136c790 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55652136cb58 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55652136ca40 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55652136ce18 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55652136cd00 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55652136d130 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55652136d010 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55652136d440 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55652136d320 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55652136d730 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55652136d578 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55652136d5f0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55652136d858 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55652136d908 <col:20> Inherited
| `-OptimizeNoneAttr 0x55652136d960 <col:30> Inherited
|-CXXMethodDecl 0x55652136d9a8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55652136da58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55652136dab0 <col:30> Inherited
|-CXXMethodDecl 0x55652136db78 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55652136dc28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55652136dc80 <col:30> Inherited
|-CXXMethodDecl 0x55652136dcc8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55652136dd78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55652136ddd0 <col:30> Inherited
|-CXXMethodDecl 0x55652136de18 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55652136dec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55652136df20 <col:30> Inherited
|-CXXMethodDecl 0x55652136df68 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55652136e018 <col:20> Inherited
| `-OptimizeNoneAttr 0x55652136e070 <col:30> Inherited
|-CXXMethodDecl 0x55652136e098 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55652136e148 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55652136e1f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55652136e3b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55652136e2a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55652136e320 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55652136e508 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55652136e478 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55652136e6b8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55652136e5c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55652136e770 <col:20>
| `-OptimizeNoneAttr 0x55652136e7c8 <col:30>
|-CXXMethodDecl 0x55652136e8e8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55652136e7f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55652136e9a0 <col:20>
| `-OptimizeNoneAttr 0x55652136e9f8 <col:30>
|-CXXMethodDecl 0x55652136eab0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55652136ea20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55652136ebf8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55652136eb68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55652136ed28 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55652136ee28 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55652136eef8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55652136efc8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55652136f108 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55652136f078 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55652136f250 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55652136f1c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55652136f398 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55652136f308 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55652136f450 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55652136f550 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55652136f4c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55652136f608 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55652136f6c8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55652136f7c8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55652136f948 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55652136f888 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x556521370108 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55652136fa00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x556521370068 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55652136ff68 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5565213701e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556521370338 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5565213702a8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5565213703f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556521370638 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5565213704b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x556521370528 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5565213707c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x556521370708 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5565213709d8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x556521370890 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x556521370908 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x556521370a98 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x556521370cf8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x556521370c00 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x556521370dc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x556521370dc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213f0598 prev 0x55652129ff28 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565213f0690 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5565213f0720 <col:22, col:28> col:22 public
|-EnumDecl 0x5565213f0748 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5565213f0868 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0848 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5565213f0830 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5565213f0810 <col:14> 'int' 999
| |-EnumConstantDecl 0x5565213f0910 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f08f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5565213f08d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5565213f08b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5565213f09a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0980 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5565213f0960 <col:17> 'int' 0
| |-EnumConstantDecl 0x5565213f0a30 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0a10 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5565213f09f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5565213f0ac0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0aa0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5565213f0a80 <col:16> 'int' 2
| |-EnumConstantDecl 0x5565213f0b50 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0b30 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5565213f0b10 <col:13> 'int' 3
| |-EnumConstantDecl 0x5565213f0be0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0bc0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5565213f0ba0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5565213f0c70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0c50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5565213f0c30 <col:14> 'int' 5
| |-EnumConstantDecl 0x5565213f0d00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565213f0ce0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5565213f0cc0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5565213f0d90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5565213f0d70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5565213f0d50 <col:13> 'int' 7
|-VarDecl 0x5565213f0e00 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5565213f0e88 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5565213f0f10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5565213f0f98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5565213f1020 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5565213f10a8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5565213f1130 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5565213f11b8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5565213f1240 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5565213f12c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5565213f1350 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5565213f1450 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5565213f67a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5565213f6f38 <line:128:13> 'int' 0
| `-CompoundStmt 0x5565213f6fa8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5565213f1540 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5565213f6fb8 <col:29, line:132:5>
|-CXXMethodDecl 0x5565213f16f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5565213f1630 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565213f17c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5565213f18a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5565213f7010 <col:44, line:161:5>
|   `-ReturnStmt 0x5565213f7000 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5565213f6fe8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5565213f6fc8 <col:9> 'ErrorHandler *' lvalue Var 0x5565213f6808 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5565213f19e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5565213f1958 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565213f1ab0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5565213f7070 <col:43, line:173:5>
|   `-ReturnStmt 0x5565213f7060 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5565213f7048 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5565213f7028 <col:9> 'ErrorHandler *' lvalue Var 0x5565213f6880 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5565213f1b68 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5565213f1be8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5565213f1cf8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5565213f1c68 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5565213f1e48 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5565213f1db8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5565213f1fa0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5565213f1f08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5565213f20f8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5565213f2060 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2250 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5565213f21b8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2460 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565213f2308 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5565213f2388 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2638 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565213f2520 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5565213f25a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2858 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565213f26f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5565213f2778 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2a38 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565213f2918 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5565213f2998 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2c18 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565213f2af8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5565213f2b78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5565213f2da0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5565213f2cd8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5565213f2f70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5565213f2e58 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5565213f2ed0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5565213f72c8 <col:57, line:234:5>
|   `-ReturnStmt 0x5565213f72b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5565213f72a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5565213f7248 <col:9, col:41> 'int'
|         |-MemberExpr 0x5565213f7218 <col:9> '<bound member function type>' ->xmessage 0x5565213f2da0
|         | `-CXXThisExpr 0x5565213f7208 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5565213f7288 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5565213f7270 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5565213f71e8 <col:18, col:40> 'String' (CXXTemporary 0x5565213f71e8)
|               `-CallExpr 0x5565213f71b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5565213f7198 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5565213f7110 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5565213f4f68 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5565213f7130 <col:31> 'const String' lvalue ParmVar 0x5565213f2ed0 'str' 'const String &'
|                 `-DeclRefExpr 0x5565213f7150 <col:36> 'const String' lvalue ParmVar 0x5565213f2e58 'anno' 'const String &'
|-CXXMethodDecl 0x5565213f3250 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5565213f3030 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5565213f30b0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5565213f3128 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5565213f7558 <col:68, line:243:5>
|   `-ReturnStmt 0x5565213f7548 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5565213f7530 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5565213f74d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5565213f74a0 <col:9> '<bound member function type>' ->xmessage 0x5565213f2f70
|         | `-CXXThisExpr 0x5565213f7490 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5565213f7368 <col:18> 'const String' lvalue ParmVar 0x5565213f3030 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5565213f7518 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5565213f7500 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5565213f7470 <col:24, col:40> 'String' (CXXTemporary 0x5565213f7470)
|               `-CXXMemberCallExpr 0x5565213f7408 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5565213f7398 <col:24> '<bound member function type>' ->vformat 0x5565213f4430
|                 | `-CXXThisExpr 0x5565213f7388 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5565213f7438 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5565213f73c8 <col:32> 'const char *' lvalue ParmVar 0x5565213f30b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5565213f7450 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5565213f73e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5565213f3128 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565213f34f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5565213f3318 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5565213f3390 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5565213f3408 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5565213f7898 <col:23, line:254:5>
|   `-ReturnStmt 0x5565213f7888 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5565213f7870 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5565213f7810 <col:9, col:71> 'int'
|         |-MemberExpr 0x5565213f77e0 <col:9> '<bound member function type>' ->xmessage 0x5565213f2f70
|         | `-CXXThisExpr 0x5565213f77d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5565213f7858 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5565213f7840 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5565213f7790 <col:18, col:65> 'String' (CXXTemporary 0x5565213f7790)
|         |     `-CallExpr 0x5565213f7728 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5565213f7710 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5565213f75f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5565213f4f68 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5565213f7618 <col:31> 'const String' lvalue ParmVar 0x5565213f3390 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5565213f7770 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5565213f7758 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5565213f76f0 <col:37, col:64> 'String' (CXXTemporary 0x5565213f76f0)
|         |             `-CallExpr 0x5565213f76c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5565213f76a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5565213f7638 <col:37> 'String (const String &)' lvalue CXXMethod 0x5565213f55b8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5565213f7658 <col:56> 'const String' lvalue ParmVar 0x5565213f3318 'landmark' 'const String &'
|         `-DeclRefExpr 0x5565213f77b0 <col:68> 'const String' lvalue ParmVar 0x5565213f3408 'str' 'const String &'
|-CXXMethodDecl 0x5565213f3870 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5565213f35b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5565213f3630 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5565213f36b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5565213f3728 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5565213f7b50 <col:34, line:267:5>
|   `-ReturnStmt 0x5565213f7b40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5565213f7b28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5565213f7ac0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5565213f7a90 <col:9> '<bound member function type>' ->xmessage 0x5565213f34f0
|         | `-CXXThisExpr 0x5565213f7a80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5565213f7938 <col:18> 'const String' lvalue ParmVar 0x5565213f35b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5565213f7958 <col:28> 'const String' lvalue ParmVar 0x5565213f3630 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5565213f7b10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5565213f7af8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5565213f7a60 <col:34, col:50> 'String' (CXXTemporary 0x5565213f7a60)
|               `-CXXMemberCallExpr 0x5565213f79f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5565213f7988 <col:34> '<bound member function type>' ->vformat 0x5565213f4430
|                 | `-CXXThisExpr 0x5565213f7978 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5565213f7a28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5565213f79b8 <col:42> 'const char *' lvalue ParmVar 0x5565213f36b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5565213f7a40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5565213f79d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5565213f3728 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565213f3980 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5565213f7bd0 <col:25, line:288:5>
|   `-ReturnStmt 0x5565213f7bc0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5565213f7ba8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5565213f7b78 <col:9> 'const int' lvalue ->_nerrors 0x5565213f67a8
|         `-CXXThisExpr 0x5565213f7b68 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5565213f3b90 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5565213f3a38 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5565213f3ab8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5565213f3e78 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5565213f3c58 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5565213f3cd8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5565213f3d50 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565213f4010 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5565213f3f48 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5565213f4258 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5565213f40d0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5565213f4148 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5565213f7e30 <col:58, line:357:5>
|   `-ReturnStmt 0x5565213f7e20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5565213f7e08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5565213f7dd8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5565213f7dc0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5565213f7da0 <col:9, col:29> 'String' (CXXTemporary 0x5565213f7da0)
|             `-CallExpr 0x5565213f7d30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5565213f7d18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5565213f7c98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5565213f3e78 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5565213f7c38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5565213f7d68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5565213f7c58 <col:21> 'const char *' lvalue ParmVar 0x5565213f40d0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5565213f7d80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5565213f7c78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5565213f4148 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565213f4430 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5565213f4320 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5565213f4398 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565213f4588 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5565213f44f8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5565213f46d0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5565213f4640 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5565213f4970 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5565213f4788 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5565213f4808 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5565213f4880 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5565213f4ad0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5565213f4a40 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5565213f7f48 <col:37, line:441:5>
|   `-IfStmt 0x5565213f7f30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5565213f7eb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5565213f7e88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5565213f7e48 <col:6> 'int' lvalue ParmVar 0x5565213f4a40 'level' 'int'
|     | `-ImplicitCastExpr 0x5565213f7ea0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5565213f7e68 <col:15> 'ErrorHandler::Level' EnumConstant 0x5565213f0b50 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5565213f7f18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5565213f7ee8 <col:8> 'int' lvalue ->_nerrors 0x5565213f67a8
|         `-CXXThisExpr 0x5565213f7ed8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5565213f4b98 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5565213f7fe0 <col:26, line:448:5>
|   `-BinaryOperator 0x5565213f7fc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5565213f7f70 <col:2> 'int' lvalue ->_nerrors 0x5565213f67a8
|     | `-CXXThisExpr 0x5565213f7f60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5565213f7fa0 <col:13> 'int' 0
|-CXXMethodDecl 0x5565213f4d60 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5565213f4c50 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5565213f4cc8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5565213f4f68 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5565213f4e20 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5565213f4e98 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5565213f5218 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5565213f5028 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5565213f50a8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5565213f5128 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5565213f52d0 <col:59> 0 0
|-CXXMethodDecl 0x5565213f5468 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5565213f5348 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5565213f53c8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5565213f8650 <col:70, line:534:5>
|   |-DeclStmt 0x5565213f8150 <line:528:2, col:20>
|   | |-VarDecl 0x5565213f8008 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5565213f8070 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5565213f80a8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5565213f8110 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5565213f8220 <line:529:2, col:23>
|   | `-VarDecl 0x5565213f8180 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5565213f8208 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5565213f81e8 <col:18> 'const char *' lvalue ParmVar 0x5565213f5348 'begin' 'const char *'
|   |-DoStmt 0x5565213f85e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5565213f8518 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5565213f8500 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5565213f84e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5565213f8238 <col:6> 'const char *' lvalue Var 0x5565213f8180 'x' 'const char *'
|   | |     `-CallExpr 0x5565213f8430 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5565213f8418 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5565213f83d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5565213f6c80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5565213f8498 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5565213f8480 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5565213f82f0 <col:20, col:27> 'String' (CXXTemporary 0x5565213f82f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5565213f82b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5565213f84b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5565213f8310 <col:30> 'const char *' lvalue Var 0x5565213f8180 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5565213f84c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5565213f8330 <col:33> 'const char *' lvalue ParmVar 0x5565213f53c8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5565213f8370 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5565213f8350 <col:39> 'String' lvalue Var 0x5565213f8008 'name' 'String'
|   | |       |-UnaryOperator 0x5565213f83a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5565213f8388 <col:46> 'String' lvalue Var 0x5565213f80a8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5565213f83c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5565213f85d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5565213f85b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5565213f8598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5565213f8568 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|   |         `-ImplicitCastExpr 0x5565213f8550 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5565213f8530 <col:11> 'String' lvalue Var 0x5565213f8008 'name' 'String'
|   `-ReturnStmt 0x5565213f8640 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5565213f8628 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5565213f8608 <col:9> 'const char *' lvalue Var 0x5565213f8180 'x' 'const char *'
|-CXXMethodDecl 0x5565213f55b8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5565213f5528 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5565213f8c58 <col:55, line:550:5>
|   `-IfStmt 0x5565213f8c30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5565213f8890 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5565213f8878 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565213f8860 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565213f8840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565213f8810 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|     | |       `-DeclRefExpr 0x5565213f86b0 <col:6> 'const String' lvalue ParmVar 0x5565213f5528 'x' 'const String &'
|     | `-BinaryOperator 0x5565213f87f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5565213f87c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5565213f8770 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5565213f8758 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5565213f8710 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5565211068a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5565213f86d0 <col:11> 'const String' lvalue ParmVar 0x5565213f5528 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5565213f86f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5565213f87d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5565213f87a8 <col:19> 'char' 123
|     |-ReturnStmt 0x5565213f8900 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5565213f88d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5565213f88b0 <col:13> 'const String' lvalue ParmVar 0x5565213f5528 'x' 'const String &'
|     `-IfStmt 0x5565213f8c08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5565213f8998 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565213f8980 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565213f8960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565213f8930 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |       `-DeclRefExpr 0x5565213f8910 <col:11> 'const String' lvalue ParmVar 0x5565213f5528 'x' 'const String &'
|       |-ReturnStmt 0x5565213f8b20 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5565213f8b08 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5565213f8ad8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5565213f8ac0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5565213f8aa0 <col:13, col:29> 'String' (CXXTemporary 0x5565213f8aa0)
|       |         `-CallExpr 0x5565213f8a50 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5565213f8a38 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5565213f89b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5565213f4d60 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5565213f8a80 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5565213f89d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5565213f89f0 <col:28> 'const String' lvalue ParmVar 0x5565213f5528 'x' 'const String &'
|       `-ReturnStmt 0x5565213f8bf8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5565213f8be0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5565213f8bb0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5565213f8b98 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5565213f8b78 <col:13, col:20> 'String' (CXXTemporary 0x5565213f8b78)
|                 `-CXXTemporaryObjectExpr 0x5565213f8b40 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5565213f5780 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5565213f5670 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5565213f56e8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565213f6f28 <col:71> 'bool' false
|-CXXRecordDecl 0x5565213f5830 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5565213f5b28 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5565213f5ac0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5565213f5a60 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5565213f5a20 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5565210e9900 'String'
|       | `-CXXRecord 0x5565210e9870 'String'
|       |-BuiltinType 0x556520dbd580 'int'
|       `-DecayedType 0x5565212a0f70 '__va_list_tag *' sugar
|         |-TypedefType 0x5565212a0f40 'va_list' sugar
|         | |-Typedef 0x556520fdb9c0 'va_list'
|         | `-TypedefType 0x556520fdb970 '__gnuc_va_list' sugar
|         |   |-Typedef 0x556520f13598 '__gnuc_va_list'
|         |   `-TypedefType 0x556520f13500 '__builtin_va_list' sugar
|         |     |-Typedef 0x556520dfed38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x556520dfece0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x556520dbe2d0 '__va_list_tag'
|         |         `-CXXRecord 0x556520dbe238 '__va_list_tag'
|         `-PointerType 0x556520fe1260 '__va_list_tag *'
|           `-RecordType 0x556520dbe2d0 '__va_list_tag'
|             `-CXXRecord 0x556520dbe238 '__va_list_tag'
|-EnumDecl 0x5565213f5bf0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5565213f5cf0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f6250 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f5cd0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5565213f5cb0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5565213f5d80 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f6268 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f5d60 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5565213f5d40 <col:21> 'int' 2
| |-EnumConstantDecl 0x5565213f5e10 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f6280 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f5df0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5565213f5dd0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5565213f5ea0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f6298 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f5e80 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5565213f5e60 <col:17> 'int' 8
| |-EnumConstantDecl 0x5565213f5f30 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f62b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f5f10 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5565213f5ef0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5565213f5fc0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f62c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f5fa0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5565213f5f80 <col:19> 'int' 32
| |-EnumConstantDecl 0x5565213f6050 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f62e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f6030 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5565213f6010 <col:17> 'int' 64
| |-EnumConstantDecl 0x5565213f60e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f62f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f60c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5565213f60a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5565213f6170 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565213f6310 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213f6150 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5565213f6130 <col:16> 'int' 256
| `-EnumConstantDecl 0x5565213f6200 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5565213f6328 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565213f61e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5565213f61c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5565213f6538 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5565213f6350 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5565213f63f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5565213f66c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5565213f65f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5565213f6768 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5565213f67a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5565213f6808 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5565213f6880 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5565213f6c80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5565213f68f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5565213f6978 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5565213f69f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5565213f6a70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5565213f6ae8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5565213f6b60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5565213f6da8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5565213f6da8
| `-ParmVarDecl 0x5565213f6eb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5565213f8fb8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5565213f8fb8
  `-ParmVarDecl 0x5565213f90c8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55652129ffb8 prev 0x5565212e4b58 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565212a00b0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5565212a0140 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5565212a0278 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5565212a0178 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5565212a16a0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5565212a1680 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5565212a1218 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5565212a1730 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5565212a16f0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5565212a0178 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5565212a1280 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5565212a17b0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5565212a1770 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5565212a12e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5565212a17f0 <col:54> 'bool' false
| `-CompoundStmt 0x5565212a18f8 <col:61, line:38:5>
|   `-BinaryOperator 0x5565212a18d8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5565212a1870 <col:9> 'const Element *' lvalue ->_context 0x5565212a11b8
|     | `-CXXThisExpr 0x5565212a1860 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5565212a18c0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5565212a18a0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5565212a0488 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5565212a0338 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5565212a03b0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5565212a16d8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5565212a16b8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5565212a11b8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5565212a1950 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5565212a1910 <col:20> 'const Element *' lvalue ParmVar 0x5565212a0338 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5565212a1218 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5565212a19d0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5565212a1990 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5565212a03b0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5565212a1280 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5565212a1a50 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5565212a1a10 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5565212a12e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5565212a1a90 <col:73> 'bool' false
| `-CompoundStmt 0x5565212a1b08 <col:80, line:46:5>
|-CXXMethodDecl 0x5565212a05b8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5565212a1b80 <col:36, line:51:5>
|   `-ReturnStmt 0x5565212a1b70 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5565212a1b58 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5565212a1b28 <col:16> 'const Element *const' lvalue ->_context 0x5565212a11b8
|         `-CXXThisExpr 0x5565212a1b18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5565212a06a8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5565212a1c00 <col:32, line:57:5>
|   `-ReturnStmt 0x5565212a1bf0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5565212a1bd8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5565212a1ba8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5565212a1218
|         `-CXXThisExpr 0x5565212a1b98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5565212a0768 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5565212a08f0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5565212a0820 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5565212a0a40 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5565212a09b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5565212a0b90 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5565212a0b00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5565212a0d98 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5565212a0c48 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5565212a0cc0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5565212a10c8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5565212a0e58 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5565212a0ed8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5565212a0fa0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5565212a1180 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5565212a11b8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5565212a1218 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5565212a1280 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5565212a12e0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5565212a1330 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5565212a1330
| `-ParmVarDecl 0x5565212a1448 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5565212a14e8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5565212a14e8
| `-ParmVarDecl 0x5565212a15f8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55652141b160 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565213acde0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5565213acfb8 prev 0x5565213acde0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5565213ad048 <col:46, col:52> col:46 public
|-TypedefDecl 0x5565213ad070 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213aec40 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5565213aebf0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5565213ad520 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5565213ad420 'type'
|     `-TemplateSpecializationType 0x5565213ad3b0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5565213ad290 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5565213ad270 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5565213ad250 <col:24> 'unsigned long' 4
|       `-RecordType 0x5565213ad390 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5565213ad2b0 'char_array'
|-TypedefDecl 0x5565213aecf8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5565213aecc0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5565213aeca0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5565213aec40 'type'
|     `-ElaboratedType 0x5565213aebf0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5565213ad520 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5565213ad420 'type'
|         `-TemplateSpecializationType 0x5565213ad3b0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5565213ad290 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5565213ad270 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5565213ad250 <col:24> 'unsigned long' 4
|           `-RecordType 0x5565213ad390 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5565213ad2b0 'char_array'
|-CXXMethodDecl 0x5565213aee78 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5565213aed88 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5565213aef68 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5565213af048 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5565213af318 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5565213af220 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5565213af558 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565213af3d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565213af448 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213af728 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565213af618 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565213af690 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213af888 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5565213af958 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5565213afba8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565213afa18 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5565213afa90 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213afe08 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5565213afc78 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5565213afcf0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213affc8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5565213afed8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213b7508 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5565213b0090 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213b75c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5565213b7670 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5565213b78a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565213b7720 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565213b7798 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565213b7b48 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5565213b7a50 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5565213b7c10 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5565213b7c60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5565213b7cb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565213ab7e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5565213ab9f8 prev 0x5565213ab7e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5565213acd50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5565213acd00 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5565213acce0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5565213acb90 'type'
|     `-SubstTemplateTypeParmType 0x5565213ac9b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x556521083750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210836f8 'T'
|       `-RecordType 0x5565213ac500 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5565213ac418 'sized_array_memory'
|-FieldDecl 0x5565213b7d00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5565213b7d50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5565213b7d88 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|   |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5565210bb3e8 'T'
|   `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b7e18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5565213b7de0 'int &'
|   `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|     |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565210bb3e8 'T'
|     `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b7ed8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5565213b7ea0 'const int &'
|   `-QualType 0x5565213aba91 'const int' const
|     `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b7f68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5565213b7f30 'int *'
|   `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|     |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565210bb3e8 'T'
|     `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b7ff8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5565213b7fc0 'const int *'
|   `-QualType 0x5565213aba91 'const int' const
|     `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b8be0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5565213b8b90 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5565213b8b70 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5565213b8b00 'type'
|     `-SubstTemplateTypeParmType 0x5565213b88c0 'int' sugar
|       |-TemplateTypeParmType 0x55652108e550 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55652108e500 'T'
|       `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b8c48 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5565213b7ea0 'const int &'
|   `-QualType 0x5565213aba91 'const int' const
|     `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b8ca0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b8d08 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5565213b7f30 'int *'
|   `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|     |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565210bb3e8 'T'
|     `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565213b8d70 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5565213b7fc0 'const int *'
|   `-QualType 0x5565213aba91 'const int' const
|     `-SubstTemplateTypeParmType 0x5565213aba90 'int' sugar
|       |-TemplateTypeParmType 0x5565210bb440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565210bb3e8 'T'
|       `-BuiltinType 0x556520dbd580 'int'
|-EnumDecl 0x5565213b8dc8 <line:134:5> col:5
| `-EnumConstantDecl 0x5565213b8ec0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5565213b8ea0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5565210bcac8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5565210bcaa0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5565210bca80 <col:40> 'int' 1
|-CXXConstructorDecl 0x5565213b8f48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5565213b9198 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565213b9000 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565213b90a0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5565213b9458 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5565213b9340 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5565213b9718 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5565213b9600 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5565213b9a60 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5565213b9940 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5565213b9d70 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5565213b9c50 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5565213ba060 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565213b9ea8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565213b9f20 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565213ba188 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5565213ba268 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565213ba2c0 <col:30> Inherited
|-CXXMethodDecl 0x5565213ba308 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5565213ba3b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565213ba410 <col:30> Inherited
|-CXXMethodDecl 0x5565213ba4d8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565213ba588 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565213ba5e0 <col:30> Inherited
|-CXXMethodDecl 0x5565213ba628 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565213ba6d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565213ba730 <col:30> Inherited
|-CXXMethodDecl 0x5565213ba778 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565213ba828 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565213ba880 <col:30> Inherited
|-CXXMethodDecl 0x5565213ba8c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565213ba978 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565213ba9d0 <col:30> Inherited
|-CXXMethodDecl 0x5565213ba9f8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5565213baaa8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5565213bab58 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5565213bad18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565213bac08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565213bac80 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565213bae68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5565213badd8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565213bb018 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5565213baf20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5565213bb0d0 <col:20>
| `-OptimizeNoneAttr 0x5565213bb128 <col:30>
|-CXXMethodDecl 0x5565213bb248 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5565213bb150 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5565213bb300 <col:20>
| `-OptimizeNoneAttr 0x5565213bb358 <col:30>
|-CXXMethodDecl 0x5565213bb410 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5565213bb380 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565213bb558 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5565213bb4c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565213bb688 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5565213bb7b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5565213bb888 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5565213bb958 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5565213bba98 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5565213bba08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565213bbbe0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5565213bbb50 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565213bbd28 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5565213bbc98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5565213bbde0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5565213bbee0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5565213bbe50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5565213bbf98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5565213bc058 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5565213bc158 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5565213bc2d8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5565213bc218 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5565213bca98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5565213bc390 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5565213bc9f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5565213bc8f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5565213bcb78 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5565213bccc8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5565213bcc38 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565213bcd80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5565213bcfc8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565213bce40 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5565213bceb8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565213bd188 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5565213bd098 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5565213bd3d8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5565213bd250 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5565213bd2c8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5565213bd498 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5565213bd6f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5565213bd600 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5565213bd7c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213a9958 prev 0x55652138c5a8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565213a9a50 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5565213a9b40 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5565213cf540 <col:16, line:828:9>
|-CXXDestructorDecl 0x5565213a9c30 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5565213cf550 <col:25, line:830:9>
|-CXXMethodDecl 0x5565213a9d30 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5565213a9de0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5565213a9e88 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5565213a9e88
| `-ParmVarDecl 0x5565213a9f98 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5565213aa758 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5565213aa758
  `-ParmVarDecl 0x5565213aa868 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55652138c3b8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55652138c518 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55652138c5a8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55652138c660 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55652138c768 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55652138c698 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565213bed88 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565213bed68 <col:31> 'int' 0
|-CXXConstructorDecl 0x55652138ca88 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55652138c900 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55652138c978 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565213bedc0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565213beda0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55652138cc60 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55652138cb50 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55652138cbc8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565213bedf8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565213bedd8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55652138d018 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55652138ce00 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55652138ce78 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55652138cef0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565213bee30 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565213bee10 <col:31> 'int' 0
|-CXXConstructorDecl 0x55652138d1d8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55652138d118 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55652138d2d0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55652138d4b8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55652138d3c0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55652138d5a8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5565213bf1e0 <col:24, line:291:5>
|   `-ReturnStmt 0x5565213bf1d0 <line:290:9, col:79>
|     `-BinaryOperator 0x5565213bf1b0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5565213bf088 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5565213befe0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5565213befc0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5565213beeb8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5565213beea0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5565213bee88 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5565213bee58 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5565213ab780
|       | |   |       `-CXXThisExpr 0x5565213bee48 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5565213befa8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5565213bef90 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5565213bef58 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5565213bef28 <col:28, col:35> '<bound member function type>' ->size 0x55652136e098
|       | |           `-ImplicitCastExpr 0x5565213bef78 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5565213bef10 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5565213beee0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5565213ab780
|       | |                 `-CXXThisExpr 0x5565213beed0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5565213bf070 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5565213bf058 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5565213bf040 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5565213bf010 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5565213bd910
|       |         `-CXXThisExpr 0x5565213bf000 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5565213bf190 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5565213bf178 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5565213bf160 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5565213bf120 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5565213bf108 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5565213bf0b8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5565213bd9c0
|         |     |   `-CXXThisExpr 0x5565213bf0a8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5565213bf0e8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5565213bf140 <col:79> 'int' 0
|-CXXMethodDecl 0x55652138d668 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5565213bf3b8 <col:32, line:296:5>
|   `-ReturnStmt 0x5565213bf3a8 <line:295:9, col:49>
|     `-BinaryOperator 0x5565213bf388 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5565213bf268 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5565213bf250 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5565213bf238 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5565213bf208 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5565213bd910
|       |       `-CXXThisExpr 0x5565213bf1f8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5565213bf368 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5565213bf350 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5565213bf338 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5565213bf2f8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5565213bf2e0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5565213bf290 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5565213bd9c0
|         |     |   `-CXXThisExpr 0x5565213bf280 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5565213bf2c0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5565213bf318 <col:49> 'int' 0
|-CXXMethodDecl 0x55652138d758 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5565213c0f40 <col:19, line:306:5>
|   |-IfStmt 0x5565213c0e60 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5565213bf428 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5565213bf410 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5565213bf3e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5565213ab780
|   | |     `-CXXThisExpr 0x5565213bf3d0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5565213c0e40 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5565213bf498 <col:13, col:20> '<bound member function type>' ->clear 0x556521370a98
|   |     `-ImplicitCastExpr 0x5565213bf480 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5565213bf450 <col:13> 'Vector<String> *' lvalue ->_conf 0x5565213ab780
|   |         `-CXXThisExpr 0x5565213bf440 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5565213c0ee8 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5565213c0eb8 <col:9, col:16> '<bound member function type>' .clear 0x5565213bd498
|   |   `-MemberExpr 0x5565213c0e88 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5565213bd8b0
|   |     `-CXXThisExpr 0x5565213c0e78 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5565213c0f30 <line:305:9, col:17>
|     `-UnaryOperator 0x5565213c0f18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565213c0f08 <col:17> 'Args *' this
|-CXXMethodDecl 0x55652138d9d8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55652138d8e0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55652138db58 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55652138da90 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55652138ded8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55652138dc00 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55652138de38 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55652138dca8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55652138dd20 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5565213c1260 <col:67, line:327:5>
|     |-WhileStmt 0x5565213c1210 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5565213c1028 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5565213c0fa8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5565212dd028 0x556521126608 0x5565211262e0 0x556521116ab0 0x556521116760 0x556521116050 0x5565210e89c0 0x556521075e90
|     | | |-DeclRefExpr 0x5565213c0f68 <col:16> 'Iter' lvalue ParmVar 0x55652138dca8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5565213c0f88 <col:25> 'Iter' lvalue ParmVar 0x55652138dd20 'end' 'Iter'
|     | `-CompoundStmt 0x5565213c11f0 <col:30, line:325:9>
|     |   |-CallExpr 0x5565213c1190 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5565213c1070 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5565213c1160 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5565213c10f0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|     |   |   `-DeclRefExpr 0x5565213c10d0 <col:24> 'Iter' lvalue ParmVar 0x55652138dca8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5565213c11d8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5565213c11b8 <col:15> 'Iter' lvalue ParmVar 0x55652138dca8 'begin' 'Iter'
|     `-ReturnStmt 0x5565213c1250 <line:326:9, col:17>
|       `-UnaryOperator 0x5565213c1238 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c1228 <col:17> 'Args *' this
|-CXXMethodDecl 0x55652138dfe0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55652138df50 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55652138e128 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55652138e098 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55652138e1f0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5565213c1340 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5565213c12e0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5565213c1290 <col:9> '<bound member function type>' ->reset_from 0x5565213bdd38
|   | | `-CXXThisExpr 0x5565213c1280 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5565213c12c0 <col:20> 'int' 0
|   `-ReturnStmt 0x5565213c1330 <line:352:9, col:17>
|     `-UnaryOperator 0x5565213c1318 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565213c1308 <col:17> 'Args *' this
|-VarDecl 0x55652138e2a8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55652138e310 <col:38> 'int' 1
|-VarDecl 0x55652138e3a0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55652138e408 <col:39> 'int' 2
|-VarDecl 0x55652138e498 <line:358:5, col:39> col:26 referenced deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55652138e500 <col:39> 'int' 4
|-VarDecl 0x55652138e590 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55652138e5f8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55652138e978 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55652138e670 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55652138e8d8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55652138e720 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55652138e7c8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5565213c1498 <col:43, line:371:5>
| |   `-ReturnStmt 0x5565213c1488 <line:370:9, col:34>
| |     `-CallExpr 0x5565213c1450 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5565213c1370 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5565213c13f0 <col:21> 'const char *' lvalue ParmVar 0x55652138e720 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5565213c1410 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5565213c1430 <col:33> 'T' lvalue ParmVar 0x55652138e7c8 'x' 'T &'
| `-CXXMethodDecl 0x55652141d818 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55652141d630 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55652141d708 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55652138eca8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55652138e9e0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55652138ec08 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55652138ea90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652138eb38 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5565213c15e8 <col:45, line:375:5>
|     `-ReturnStmt 0x5565213c15d8 <line:374:9, col:42>
|       `-CallExpr 0x5565213c15a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c14c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c1540 <col:21> 'const char *' lvalue ParmVar 0x55652138ea90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c1560 <col:30> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5565213c1580 <col:41> 'T' lvalue ParmVar 0x55652138eb38 'x' 'T &'
|-FunctionTemplateDecl 0x55652138efd8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55652138ed10 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55652138ef38 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55652138edc0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55652138ee68 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5565213c1738 <col:45, line:379:5>
| |   `-ReturnStmt 0x5565213c1728 <line:378:9, col:43>
| |     `-CallExpr 0x5565213c16f0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5565213c1610 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5565213c1690 <col:21> 'const char *' lvalue ParmVar 0x55652138edc0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5565213c16b0 <col:30> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int'
| |       `-DeclRefExpr 0x5565213c16d0 <col:42> 'T' lvalue ParmVar 0x55652138ee68 'x' 'T &'
| |-CXXMethodDecl 0x55652141b5c8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x55652141b3e0 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x55652141b4b8 <col:39, col:42> col:42 x 'String &'
| `-CXXMethodDecl 0x55652141ba38 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55652141b850 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55652141b928 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55652138f308 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55652138f040 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55652138f268 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55652138f0f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652138f198 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5565213c1938 <col:46, line:383:5>
|     `-ReturnStmt 0x5565213c1928 <line:382:9, col:55>
|       `-CallExpr 0x5565213c18f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c1760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c17e0 <col:21> 'const char *' lvalue ParmVar 0x55652138f0f0 'keyword' 'const char *'
|         |-BinaryOperator 0x5565213c18b0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5565213c1860 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565213c1840 <col:30> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565213c1898 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565213c1878 <col:42> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5565213c18d0 <col:54> 'T' lvalue ParmVar 0x55652138f198 'x' 'T &'
|-FunctionTemplateDecl 0x55652138f708 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55652138f370 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55652138f668 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
| | |-ParmVarDecl 0x55652138f420 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55652138f4a0 <col:37, col:41> col:41 referenced flags 'int'
| | |-ParmVarDecl 0x55652138f548 <col:48, col:51> col:51 referenced x 'T &'
| | `-CompoundStmt 0x5565213c1a78 <col:54, line:388:5>
| |   |-CallExpr 0x5565213c1a00 <line:386:9, col:47> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5565213c1950 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
| |   | |-CXXThisExpr 0x5565213c1990 <col:24> 'Args *' this
| |   | |-DeclRefExpr 0x5565213c19a0 <col:30> 'const char *' lvalue ParmVar 0x55652138f420 'keyword' 'const char *'
| |   | |-DeclRefExpr 0x5565213c19c0 <col:39> 'int' lvalue ParmVar 0x55652138f4a0 'flags' 'int'
| |   | `-DeclRefExpr 0x5565213c19e0 <col:46> 'T' lvalue ParmVar 0x55652138f548 'x' 'T &'
| |   `-ReturnStmt 0x5565213c1a68 <line:387:9, col:17>
| |     `-UnaryOperator 0x5565213c1a50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5565213c1a40 <col:17> 'Args *' this
| `-CXXMethodDecl 0x55652141c018 <line:385:5, line:388:5> line:385:11 used read 'Args &(const char *, int, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55652141bdb8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55652141be20 <col:37, col:41> col:41 flags 'int'
|   `-ParmVarDecl 0x55652141bef8 <col:48, col:51> col:51 x 'int &'
|-FunctionTemplateDecl 0x55652138fbb8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55652138f778 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55652138f7f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55652138fb18 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55652138f8b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652138f958 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55652138f9f8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565213c1be8 <col:74, line:403:5>
|     `-ReturnStmt 0x5565213c1bd8 <line:402:9, col:56>
|       `-CallExpr 0x5565213c1b98 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c1aa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c1b18 <col:28> 'const char *' lvalue ParmVar 0x55652138f8b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c1b38 <col:37> 'int' 0
|         |-DeclRefExpr 0x5565213c1b58 <col:40> 'T' lvalue ParmVar 0x55652138f958 'x' 'T &'
|         `-DeclRefExpr 0x5565213c1b78 <col:43> 'const V' lvalue ParmVar 0x55652138f9f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556521390028 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55652138fc28 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55652138fca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55652138ff88 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55652138fd68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652138fe08 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55652138fea8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565213c1d50 <col:76, line:407:5>
|     `-ReturnStmt 0x5565213c1d40 <line:406:9, col:65>
|       `-CallExpr 0x5565213c1d00 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c1c10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c1c80 <col:28> 'const char *' lvalue ParmVar 0x55652138fd68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c1ca0 <col:37> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int'
|         |-DeclRefExpr 0x5565213c1cc0 <col:49> 'T' lvalue ParmVar 0x55652138fe08 'x' 'T &'
|         `-DeclRefExpr 0x5565213c1ce0 <col:52> 'const V' lvalue ParmVar 0x55652138fea8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556521390578 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x556521390098 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556521390118 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5565213904d8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5565213901d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521390258 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5565213902f8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x556521390398 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565213c1eb8 <col:85, line:412:5>
|     |-CallExpr 0x5565213c1e38 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c1d68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5565213c1da8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5565213c1db8 <col:37> 'const char *' lvalue ParmVar 0x5565213901d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565213c1dd8 <col:46> 'int' lvalue ParmVar 0x556521390258 'flags' 'int'
|     | |-DeclRefExpr 0x5565213c1df8 <col:53> 'T' lvalue ParmVar 0x5565213902f8 'x' 'T &'
|     | `-DeclRefExpr 0x5565213c1e18 <col:56> 'const V' lvalue ParmVar 0x556521390398 'default_value' 'const V &'
|     `-ReturnStmt 0x5565213c1ea8 <line:411:9, col:17>
|       `-UnaryOperator 0x5565213c1e90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c1e80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556521390a08 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5565213905f0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521390668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x556521390968 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x556521390728 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5565213907a0 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x556521390848 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x5565213c2038 <col:53, line:425:5>
| |   `-ReturnStmt 0x5565213c2028 <line:424:9, col:42>
| |     `-CallExpr 0x5565213c1fe8 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5565213c1ee8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5565213c1f68 <col:21> 'const char *' lvalue ParmVar 0x556521390728 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5565213c1f88 <col:30> 'int' 0
| |       |-DeclRefExpr 0x5565213c1fa8 <col:33> 'P' lvalue ParmVar 0x5565213907a0 'parser' 'P'
| |       `-DeclRefExpr 0x5565213c1fc8 <col:41> 'T' lvalue ParmVar 0x556521390848 'x' 'T &'
| |-CXXMethodDecl 0x55652141c468 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, int, int &)'
| | |-TemplateArgument type 'int'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55652141c218 <col:16, col:28> col:28 keyword 'const char *'
| | |-ParmVarDecl 0x55652141c2b8 <col:37, col:39> col:39 parser 'int':'int'
| | `-ParmVarDecl 0x55652141c388 <col:47, col:50> col:50 x 'int &'
| `-CXXMethodDecl 0x55652141d268 <col:5, line:425:5> line:423:11 used read 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55652141cfd0 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55652141d078 <col:37, col:39> col:39 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x55652141d148 <col:47, col:50> col:50 x 'String &'
|-FunctionTemplateDecl 0x556521390e58 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x556521390a78 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521390af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556521390db8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556521390bb8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521390c30 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556521390cd8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5565213c21b0 <col:55, line:429:5>
|     `-ReturnStmt 0x5565213c21a0 <line:428:9, col:50>
|       `-CallExpr 0x5565213c2160 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c2060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c20e0 <col:21> 'const char *' lvalue ParmVar 0x556521390bb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c2100 <col:30> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5565213c2120 <col:41> 'P' lvalue ParmVar 0x556521390c30 'parser' 'P'
|         `-DeclRefExpr 0x5565213c2140 <col:49> 'T' lvalue ParmVar 0x556521390cd8 'x' 'T &'
|-FunctionTemplateDecl 0x5565213912a8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x556521390ec8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521390f48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556521391208 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556521391008 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521391080 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556521391128 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5565213c2328 <col:55, line:433:5>
|     `-ReturnStmt 0x5565213c2318 <line:432:9, col:51>
|       `-CallExpr 0x5565213c22d8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c21d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c2258 <col:21> 'const char *' lvalue ParmVar 0x556521391008 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c2278 <col:30> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int'
|         |-DeclRefExpr 0x5565213c2298 <col:42> 'P' lvalue ParmVar 0x556521391080 'parser' 'P'
|         `-DeclRefExpr 0x5565213c22b8 <col:50> 'T' lvalue ParmVar 0x556521391128 'x' 'T &'
|-FunctionTemplateDecl 0x5565213916f8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x556521391318 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521391398 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556521391658 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556521391458 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213914d0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x556521391578 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5565213c2550 <col:56, line:437:5>
|     `-ReturnStmt 0x5565213c2540 <line:436:9, col:63>
|       `-CallExpr 0x5565213c2500 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c2350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c23d0 <col:21> 'const char *' lvalue ParmVar 0x556521391458 'keyword' 'const char *'
|         |-BinaryOperator 0x5565213c24a0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5565213c2450 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565213c2430 <col:30> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565213c2488 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565213c2468 <col:42> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5565213c24c0 <col:54> 'P' lvalue ParmVar 0x5565213914d0 'parser' 'P'
|         `-DeclRefExpr 0x5565213c24e0 <col:62> 'T' lvalue ParmVar 0x556521391578 'x' 'T &'
|-FunctionTemplateDecl 0x556521391c28 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x556521391768 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565213917e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556521391b88 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565213918a8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521391928 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5565213919a0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x556521391a48 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5565213c26b8 <col:64, line:442:5>
|     |-CallExpr 0x5565213c2638 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c2568 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5565213c25a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5565213c25b8 <col:30> 'const char *' lvalue ParmVar 0x5565213918a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565213c25d8 <col:39> 'int' lvalue ParmVar 0x556521391928 'flags' 'int'
|     | |-DeclRefExpr 0x5565213c25f8 <col:46> 'P' lvalue ParmVar 0x5565213919a0 'parser' 'P'
|     | `-DeclRefExpr 0x5565213c2618 <col:54> 'T' lvalue ParmVar 0x556521391a48 'x' 'T &'
|     `-ReturnStmt 0x5565213c26a8 <line:441:9, col:17>
|       `-UnaryOperator 0x5565213c2690 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c2680 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556521392228 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x556521391ca0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521391d18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x556521391d98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556521392188 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x556521391e60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521391ed8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x556521391f78 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x556521392048 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565213c2850 <col:84, line:458:5>
|     `-ReturnStmt 0x5565213c2840 <line:457:9, col:64>
|       `-CallExpr 0x5565213c27f8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c26e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c2758 <col:28> 'const char *' lvalue ParmVar 0x556521391e60 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c2778 <col:37> 'int' 0
|         |-DeclRefExpr 0x5565213c2798 <col:40> 'P' lvalue ParmVar 0x556521391ed8 'parser' 'P'
|         |-DeclRefExpr 0x5565213c27b8 <col:48> 'T' lvalue ParmVar 0x556521391f78 'x' 'T &'
|         `-DeclRefExpr 0x5565213c27d8 <col:51> 'const V' lvalue ParmVar 0x556521392048 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5565213927a8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5565213922a0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521392318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x556521392398 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556521392708 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x556521392460 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213924d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x556521392578 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x556521392618 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565213c29e0 <col:86, line:462:5>
|     `-ReturnStmt 0x5565213c29d0 <line:461:9, col:73>
|       `-CallExpr 0x5565213c2988 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c2878 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c28e8 <col:28> 'const char *' lvalue ParmVar 0x556521392460 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c2908 <col:37> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int'
|         |-DeclRefExpr 0x5565213c2928 <col:49> 'P' lvalue ParmVar 0x5565213924d8 'parser' 'P'
|         |-DeclRefExpr 0x5565213c2948 <col:57> 'T' lvalue ParmVar 0x556521392578 'x' 'T &'
|         `-DeclRefExpr 0x5565213c2968 <col:60> 'const V' lvalue ParmVar 0x556521392618 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556521392e08 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x556521392820 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521392898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x556521392918 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556521392d68 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5565213929e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521392a60 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x556521392ad8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x556521392b78 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x556521392c18 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565213c2b70 <col:95, line:467:5>
|     |-CallExpr 0x5565213c2ae8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c29f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5565213c2a38 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5565213c2a48 <col:37> 'const char *' lvalue ParmVar 0x5565213929e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565213c2a68 <col:46> 'int' lvalue ParmVar 0x556521392a60 'flags' 'int'
|     | |-DeclRefExpr 0x5565213c2a88 <col:53> 'P' lvalue ParmVar 0x556521392ad8 'parser' 'P'
|     | |-DeclRefExpr 0x5565213c2aa8 <col:61> 'T' lvalue ParmVar 0x556521392b78 'x' 'T &'
|     | `-DeclRefExpr 0x5565213c2ac8 <col:64> 'const V' lvalue ParmVar 0x556521392c18 'default_value' 'const V &'
|     `-ReturnStmt 0x5565213c2b60 <line:466:9, col:17>
|       `-UnaryOperator 0x5565213c2b48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c2b38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565213933e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x556521392e88 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521392f08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556521392f88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556521393348 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556521393050 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213930c8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x556521393168 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556521393208 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565213c2d18 <col:63, line:481:5>
|     `-ReturnStmt 0x5565213c2d08 <line:480:9, col:47>
|       `-CallExpr 0x5565213c2cc0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c2ba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c2c20 <col:21> 'const char *' lvalue ParmVar 0x556521393050 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c2c40 <col:30> 'int' 0
|         |-DeclRefExpr 0x5565213c2c60 <col:33> 'P' lvalue ParmVar 0x5565213930c8 'parser' 'P'
|         |-DeclRefExpr 0x5565213c2c80 <col:41> 'T1' lvalue ParmVar 0x556521393168 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565213c2ca0 <col:45> 'T2' lvalue ParmVar 0x556521393208 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556521393968 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x556521393460 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565213934d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556521393558 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565213938c8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556521393620 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521393698 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556521393738 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565213937d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565213c2eb8 <col:65, line:485:5>
|     `-ReturnStmt 0x5565213c2ea8 <line:484:9, col:55>
|       `-CallExpr 0x5565213c2e60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c2d40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c2dc0 <col:21> 'const char *' lvalue ParmVar 0x556521393620 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c2de0 <col:30> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5565213c2e00 <col:41> 'P' lvalue ParmVar 0x556521393698 'parser' 'P'
|         |-DeclRefExpr 0x5565213c2e20 <col:49> 'T1' lvalue ParmVar 0x556521393738 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565213c2e40 <col:53> 'T2' lvalue ParmVar 0x5565213937d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556521393ee8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5565213939e0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521393a58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556521393ad8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556521393e48 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556521393ba0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521393c18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556521393cb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556521393d58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565213c3058 <col:65, line:489:5>
|     `-ReturnStmt 0x5565213c3048 <line:488:9, col:56>
|       `-CallExpr 0x5565213c3000 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c2ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c2f60 <col:21> 'const char *' lvalue ParmVar 0x556521393ba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c2f80 <col:30> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int'
|         |-DeclRefExpr 0x5565213c2fa0 <col:42> 'P' lvalue ParmVar 0x556521393c18 'parser' 'P'
|         |-DeclRefExpr 0x5565213c2fc0 <col:50> 'T1' lvalue ParmVar 0x556521393cb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565213c2fe0 <col:54> 'T2' lvalue ParmVar 0x556521393d58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556521398938 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x556521393f60 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521393fd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556521398530 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556521398898 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565213985f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521398668 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x556521398708 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565213987a8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565213c32a8 <col:66, line:493:5>
|     `-ReturnStmt 0x5565213c3298 <line:492:9, col:68>
|       `-CallExpr 0x5565213c3250 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3080 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3100 <col:21> 'const char *' lvalue ParmVar 0x5565213985f0 'keyword' 'const char *'
|         |-BinaryOperator 0x5565213c31d0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5565213c3180 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565213c3160 <col:30> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565213c31b8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565213c3198 <col:42> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5565213c31f0 <col:54> 'P' lvalue ParmVar 0x556521398668 'parser' 'P'
|         |-DeclRefExpr 0x5565213c3210 <col:62> 'T1' lvalue ParmVar 0x556521398708 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565213c3230 <col:66> 'T2' lvalue ParmVar 0x5565213987a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556521398f98 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5565213989b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556521398a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556521398aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556521398ef8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556521398b70 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521398bf0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x556521398c68 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x556521398d08 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556521398da8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565213c3438 <col:74, line:498:5>
|     |-CallExpr 0x5565213c33b0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c32c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5565213c3300 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5565213c3310 <col:30> 'const char *' lvalue ParmVar 0x556521398b70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565213c3330 <col:39> 'int' lvalue ParmVar 0x556521398bf0 'flags' 'int'
|     | |-DeclRefExpr 0x5565213c3350 <col:46> 'P' lvalue ParmVar 0x556521398c68 'parser' 'P'
|     | |-DeclRefExpr 0x5565213c3370 <col:54> 'T1' lvalue ParmVar 0x556521398d08 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5565213c3390 <col:58> 'T2' lvalue ParmVar 0x556521398da8 'x2' 'T2 &'
|     `-ReturnStmt 0x5565213c3428 <line:497:9, col:17>
|       `-UnaryOperator 0x5565213c3410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c3400 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565213992f8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x556521399018 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556521399258 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5565213990d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521399148 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5565213c3580 <col:52, line:509:5>
|     `-ReturnStmt 0x5565213c3570 <line:508:9, col:44>
|       `-CallExpr 0x5565213c3538 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c34d8 <col:26> 'const char *' lvalue ParmVar 0x5565213990d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c34f8 <col:35> 'int' 0
|         `-DeclRefExpr 0x5565213c3518 <col:38> 'P' lvalue ParmVar 0x556521399148 'parser' 'P'
|-FunctionTemplateDecl 0x5565213995f8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x556521399360 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556521399558 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556521399410 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521399488 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5565213c36c0 <col:54, line:513:5>
|     `-ReturnStmt 0x5565213c36b0 <line:512:9, col:52>
|       `-CallExpr 0x5565213c3678 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c35a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3618 <col:26> 'const char *' lvalue ParmVar 0x556521399410 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c3638 <col:35> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5565213c3658 <col:46> 'P' lvalue ParmVar 0x556521399488 'parser' 'P'
|-FunctionTemplateDecl 0x5565213998f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x556521399660 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556521399858 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556521399710 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521399788 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5565213c3800 <col:54, line:517:5>
|     `-ReturnStmt 0x5565213c37f0 <line:516:9, col:53>
|       `-CallExpr 0x5565213c37b8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c36e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3758 <col:26> 'const char *' lvalue ParmVar 0x556521399710 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c3778 <col:35> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int'
|         `-DeclRefExpr 0x5565213c3798 <col:47> 'P' lvalue ParmVar 0x556521399788 'parser' 'P'
|-FunctionTemplateDecl 0x556521399bf8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x556521399960 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556521399b58 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556521399a10 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521399a88 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5565213c39f0 <col:55, line:521:5>
|     `-ReturnStmt 0x5565213c39e0 <line:520:9, col:65>
|       `-CallExpr 0x5565213c39a8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3828 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3898 <col:26> 'const char *' lvalue ParmVar 0x556521399a10 'keyword' 'const char *'
|         |-BinaryOperator 0x5565213c3968 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5565213c3918 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565213c38f8 <col:35> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565213c3950 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565213c3930 <col:47> 'const int' lvalue Var 0x55652138e3a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5565213c3988 <col:59> 'P' lvalue ParmVar 0x556521399a88 'parser' 'P'
|-FunctionTemplateDecl 0x556521399fc8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x556521399c60 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556521399f28 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x556521399d10 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556521399d90 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x556521399e08 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5565213c3b30 <col:63, line:526:5>
|     |-CallExpr 0x5565213c3ab8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c3a08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5565213c3a48 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5565213c3a58 <col:35> 'const char *' lvalue ParmVar 0x556521399d10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565213c3a78 <col:44> 'int' lvalue ParmVar 0x556521399d90 'flags' 'int'
|     | `-DeclRefExpr 0x5565213c3a98 <col:51> 'P' lvalue ParmVar 0x556521399e08 'parser' 'P'
|     `-ReturnStmt 0x5565213c3b20 <line:525:9, col:17>
|       `-UnaryOperator 0x5565213c3b08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c3af8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55652139a418 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55652139a038 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139a0b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139a378 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55652139a178 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139a1f0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55652139a298 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5565213c3c88 <col:58, line:541:5>
|     `-ReturnStmt 0x5565213c3c78 <line:540:9, col:39>
|       `-CallExpr 0x5565213c3c40 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3be0 <col:21> 'const char *' lvalue ParmVar 0x55652139a178 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c3c00 <col:30> 'P' lvalue ParmVar 0x55652139a1f0 'parser' 'P'
|         `-DeclRefExpr 0x5565213c3c20 <col:38> 'T' lvalue ParmVar 0x55652139a298 'x' 'T &'
|-FunctionTemplateDecl 0x55652139a868 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55652139a488 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139a508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139a7c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55652139a5c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139a640 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55652139a6e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5565213c3dc0 <col:60, line:545:5>
|     `-ReturnStmt 0x5565213c3db0 <line:544:9, col:41>
|       `-CallExpr 0x5565213c3d78 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3d18 <col:23> 'const char *' lvalue ParmVar 0x55652139a5c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c3d38 <col:32> 'P' lvalue ParmVar 0x55652139a640 'parser' 'P'
|         `-DeclRefExpr 0x5565213c3d58 <col:40> 'T' lvalue ParmVar 0x55652139a6e8 'x' 'T &'
|-FunctionTemplateDecl 0x55652139acb8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55652139a8d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139a958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139ac18 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55652139aa18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139aa90 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55652139ab38 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5565213c3ef8 <col:60, line:549:5>
|     `-ReturnStmt 0x5565213c3ee8 <line:548:9, col:41>
|       `-CallExpr 0x5565213c3eb0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3de8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3e50 <col:23> 'const char *' lvalue ParmVar 0x55652139aa18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c3e70 <col:32> 'P' lvalue ParmVar 0x55652139aa90 'parser' 'P'
|         `-DeclRefExpr 0x5565213c3e90 <col:40> 'T' lvalue ParmVar 0x55652139ab38 'x' 'T &'
|-FunctionTemplateDecl 0x55652139b108 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55652139ad28 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139ada8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139b068 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55652139ae68 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139aee0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55652139af88 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5565213c4030 <col:61, line:553:5>
|     `-ReturnStmt 0x5565213c4020 <line:552:9, col:42>
|       `-CallExpr 0x5565213c3fe8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c3f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c3f88 <col:24> 'const char *' lvalue ParmVar 0x55652139ae68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c3fa8 <col:33> 'P' lvalue ParmVar 0x55652139aee0 'parser' 'P'
|         `-DeclRefExpr 0x5565213c3fc8 <col:41> 'T' lvalue ParmVar 0x55652139af88 'x' 'T &'
|-FunctionTemplateDecl 0x55652139b5e8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55652139b178 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139b1f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139b548 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55652139b2b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139b338 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55652139b3b0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55652139b458 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5565213c41a8 <col:69, line:557:5>
|     `-ReturnStmt 0x5565213c4198 <line:556:9, col:46>
|       `-CallExpr 0x5565213c4158 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c4058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c40d8 <col:21> 'const char *' lvalue ParmVar 0x55652139b2b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c40f8 <col:30> 'int' lvalue ParmVar 0x55652139b338 'flags' 'int'
|         |-DeclRefExpr 0x5565213c4118 <col:37> 'P' lvalue ParmVar 0x55652139b3b0 'parser' 'P'
|         `-DeclRefExpr 0x5565213c4138 <col:45> 'T' lvalue ParmVar 0x55652139b458 'x' 'T &'
|-FunctionTemplateDecl 0x55652139b8f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55652139b660 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55652139b858 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55652139b710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139b788 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5565213c42e8 <col:56, line:571:5>
|     `-ReturnStmt 0x5565213c42d8 <line:570:9, col:48>
|       `-CallExpr 0x5565213c42a0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c41d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c4240 <col:30> 'const char *' lvalue ParmVar 0x55652139b710 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c4260 <col:39> 'int' 0
|         `-DeclRefExpr 0x5565213c4280 <col:42> 'P' lvalue ParmVar 0x55652139b788 'parser' 'P'
|-FunctionTemplateDecl 0x55652139bc88 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55652139b960 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55652139bbe8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55652139ba10 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139ba90 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55652139bb08 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5565213c44b8 <col:67, line:576:5>
|     |-CallExpr 0x5565213c4440 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c4300 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5565213c4340 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5565213c4350 <col:39> 'const char *' lvalue ParmVar 0x55652139ba10 'keyword' 'const char *'
|     | |-BinaryOperator 0x5565213c4400 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5565213c43b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5565213c4370 <col:48> 'int' lvalue ParmVar 0x55652139ba90 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5565213c43e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5565213c43c8 <col:56> 'const int' lvalue Var 0x55652138e590 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5565213c4420 <col:68> 'P' lvalue ParmVar 0x55652139bb08 'parser' 'P'
|     `-ReturnStmt 0x5565213c44a8 <line:575:9, col:17>
|       `-UnaryOperator 0x5565213c4490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c4480 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55652139c0d8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55652139bcf8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139bd78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139c038 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55652139be38 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139beb0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55652139bf58 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5565213c4628 <col:62, line:592:5>
|     `-ReturnStmt 0x5565213c4618 <line:591:9, col:51>
|       `-CallExpr 0x5565213c45d8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c44e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c4558 <col:30> 'const char *' lvalue ParmVar 0x55652139be38 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c4578 <col:39> 'int' 0
|         |-DeclRefExpr 0x5565213c4598 <col:42> 'P' lvalue ParmVar 0x55652139beb0 'parser' 'P'
|         `-DeclRefExpr 0x5565213c45b8 <col:50> 'T' lvalue ParmVar 0x55652139bf58 'x' 'T &'
|-FunctionTemplateDecl 0x55652139c5b8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55652139c148 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139c1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139c518 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55652139c288 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139c308 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55652139c380 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55652139c428 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5565213c4820 <col:73, line:597:5>
|     |-CallExpr 0x5565213c47a0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c4640 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5565213c4680 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5565213c4690 <col:39> 'const char *' lvalue ParmVar 0x55652139c288 'keyword' 'const char *'
|     | |-BinaryOperator 0x5565213c4740 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5565213c46f0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5565213c46b0 <col:48> 'int' lvalue ParmVar 0x55652139c308 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5565213c4728 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5565213c4708 <col:56> 'const int' lvalue Var 0x55652138e590 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5565213c4760 <col:68> 'P' lvalue ParmVar 0x55652139c380 'parser' 'P'
|     | `-DeclRefExpr 0x5565213c4780 <col:76> 'T' lvalue ParmVar 0x55652139c428 'x' 'T &'
|     `-ReturnStmt 0x5565213c4810 <line:596:9, col:17>
|       `-UnaryOperator 0x5565213c47f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c47e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55652139cb68 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55652139c630 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139c6a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139cac8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55652139c768 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139c7e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55652139c9a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565213c4990 <col:65, line:614:5>
|     `-ReturnStmt 0x5565213c4980 <line:613:9, col:46>
|       `-CallExpr 0x5565213c4940 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c4850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c48c0 <col:25> 'const char *' lvalue ParmVar 0x55652139c768 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c48e0 <col:34> 'int' 0
|         |-DeclRefExpr 0x5565213c4900 <col:37> 'P' lvalue ParmVar 0x55652139c7e0 'parser' 'P'
|         `-DeclRefExpr 0x5565213c4920 <col:45> 'Vector<T>' lvalue ParmVar 0x55652139c9a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55652139cf98 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55652139cbd8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55652139cef8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55652139cc90 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139cde0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565213c4bb0 <col:55, line:618:5>
|     `-ReturnStmt 0x5565213c4ba0 <line:617:9, col:55>
|       `-CallExpr 0x5565213c4b60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c49b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c4a28 <col:25> 'const char *' lvalue ParmVar 0x55652139cc90 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565213c4a48 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5565213c4b20 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5565213c4b40 <col:54> 'Vector<T>' lvalue ParmVar 0x55652139cde0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55652139d568 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55652139d000 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139d078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139d4c8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55652139d138 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139d1b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55652139d230 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55652139d380 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565213c4da8 <col:76, line:623:5>
|     |-CallExpr 0x5565213c4d28 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565213c4bc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5565213c4c08 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5565213c4c18 <col:34> 'const char *' lvalue ParmVar 0x55652139d138 'keyword' 'const char *'
|     | |-BinaryOperator 0x5565213c4cc8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5565213c4c78 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5565213c4c38 <col:43> 'int' lvalue ParmVar 0x55652139d1b8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5565213c4cb0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5565213c4c90 <col:51> 'const int' lvalue Var 0x55652138e590 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5565213c4ce8 <col:63> 'P' lvalue ParmVar 0x55652139d230 'parser' 'P'
|     | `-DeclRefExpr 0x5565213c4d08 <col:71> 'Vector<T>' lvalue ParmVar 0x55652139d380 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5565213c4d98 <line:622:9, col:17>
|       `-UnaryOperator 0x5565213c4d80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c4d70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55652139daa8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55652139d5e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139d658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139da08 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55652139d718 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139d798 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55652139d8e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565213c5010 <col:66, line:627:5>
|     `-ReturnStmt 0x5565213c5000 <line:626:9, col:59>
|       `-CallExpr 0x5565213c4fc0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565213c4dd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565213c4e48 <col:25> 'const char *' lvalue ParmVar 0x55652139d718 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565213c4e68 <col:34> 'int' lvalue ParmVar 0x55652139d798 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5565213c4f80 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5565213c4fa0 <col:58> 'Vector<T>' lvalue ParmVar 0x55652139d8e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55652139db38 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5565213c5090 <col:25, line:633:5>
|   `-ReturnStmt 0x5565213c5080 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5565213c5068 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5565213c5038 <col:16> 'const bool' lvalue ->_status 0x5565213ab5e8
|         `-CXXThisExpr 0x5565213c5028 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55652139dcb8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55652139dbf0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5565213c5178 <col:27, line:639:5>
|   |-BinaryOperator 0x5565213c5120 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565213c50a8 <col:9> 'bool' lvalue ParmVar 0x55652139dbf0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565213c5108 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565213c50d8 <col:13> 'bool' lvalue ->_status 0x5565213ab5e8
|   |     `-CXXThisExpr 0x5565213c50c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5565213c5168 <line:638:9, col:17>
|     `-UnaryOperator 0x5565213c5150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565213c5140 <col:17> 'Args *' this
|-CXXMethodDecl 0x55652139de38 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55652139dd78 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5565213c5268 <col:39, line:644:5>
|   |-BinaryOperator 0x5565213c5210 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565213c5198 <col:9> 'bool' lvalue ParmVar 0x55652139dd78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565213c51f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565213c51c8 <col:13> 'const bool' lvalue ->_status 0x5565213ab5e8
|   |     `-CXXThisExpr 0x5565213c51b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5565213c5258 <line:643:9, col:17>
|     `-UnaryOperator 0x5565213c5240 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565213c5230 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55652139df00 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5565213c5310 <col:30, line:651:5>
|   `-ReturnStmt 0x5565213c5300 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5565213c52e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5565213c52b8 <col:16> 'bool' lvalue ->_read_status 0x5565212a12e0
|         `-ImplicitCastExpr 0x5565213c5298 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5565213c5288 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55652139e048 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55652139dfb8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5565213c5418 <col:32, line:658:5>
|   |-BinaryOperator 0x5565213c53c0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565213c5328 <col:9> 'bool' lvalue ParmVar 0x55652139dfb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565213c53a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565213c5378 <col:13> 'bool' lvalue ->_read_status 0x5565212a12e0
|   |     `-ImplicitCastExpr 0x5565213c5358 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5565213c5348 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5565213c5408 <line:657:9, col:17>
|     `-UnaryOperator 0x5565213c53f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565213c53e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55652139e198 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55652139e108 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5565213c5528 <col:44, line:663:5>
|   |-BinaryOperator 0x5565213c54d0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565213c5438 <col:9> 'bool' lvalue ParmVar 0x55652139e108 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565213c54b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565213c5488 <col:13> 'bool' lvalue ->_read_status 0x5565212a12e0
|   |     `-ImplicitCastExpr 0x5565213c5468 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5565213c5458 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5565213c5518 <line:662:9, col:17>
|     `-UnaryOperator 0x5565213c5500 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565213c54f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55652139e260 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55652139e328 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55652139e3f0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55652139e4b8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55652139e7c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55652139e558 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55652139e728 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55652139e638 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5565213c58e0 <col:19, line:706:5>
|     `-IfStmt 0x5565213c58b8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5565213c5628 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5565213c57e8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5565213c57b8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5565213c5778 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5565213c5680 <col:42> '<bound member function type>' ->simple_slot 0x5565213be9f0
|       |     | `-CXXThisExpr 0x5565213c5670 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5565213c5718 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5565213c56d0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55652112b0a8
|       |     | `-DeclRefExpr 0x5565213c56b0 <col:55> 'T' lvalue ParmVar 0x55652139e638 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5565213c5758 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5565213c58a8 <line:705:13, col:34>
|         `-CallExpr 0x5565213c5880 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5565213c5808 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5565213c5860 <col:33> 'T' lvalue ParmVar 0x55652139e638 'x' 'T &'
|-FunctionTemplateDecl 0x55652139ea98 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55652139e828 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55652139e9f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55652139e908 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5565213c5cc0 <col:31, line:717:5>
|     |-DeclStmt 0x5565213c5a20 <line:713:9, col:23>
|     | `-VarDecl 0x5565213c5908 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5565213c59f8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5565213c5980 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5565213c59d8 <col:21> 'T' lvalue ParmVar 0x55652139e908 'x' 'T &'
|     |-IfStmt 0x5565213c5c70 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5565213c5b18 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5565213c5c50 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5565213c5bf0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5565213c5b80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|     |   | `-DeclRefExpr 0x5565213c5b60 <col:14> 'T *' lvalue Var 0x5565213c5908 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5565213c5c30 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5565213c5ca8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5565213c5c88 <col:16> 'T *' lvalue Var 0x5565213c5908 's' 'T *'
|-FunctionTemplateDecl 0x55652139eea8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55652139eaf8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55652139eb78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55652139ee08 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55652139ec58 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55652139ecf8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5565213c5fd0 <col:37, line:726:5>
|     |-IfStmt 0x5565213c5f60 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5565213c5f80 <line:723:13, col:26>
|     | | `-VarDecl 0x5565213c5d28 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5565213c5e18 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5565213c5da0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5565213c5df8 <col:25> 'T' lvalue ParmVar 0x55652139ec58 'x' 'T &'
|     | |-DeclRefExpr 0x5565213c5e40 <col:16> 'T *' lvalue Var 0x5565213c5d28 's' 'T *'
|     | `-BinaryOperator 0x5565213c5f40 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5565213c5ef0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5565213c5e80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|     |   | `-DeclRefExpr 0x5565213c5e60 <col:14> 'T *' lvalue Var 0x5565213c5d28 's' 'T *'
|     |   `-DeclRefExpr 0x5565213c5f20 <col:18> 'const V' lvalue ParmVar 0x55652139ecf8 'value' 'const V &'
|     `-ReturnStmt 0x5565213c5fc0 <line:725:9, col:17>
|       `-UnaryOperator 0x5565213c5fa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565213c5f98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55652139f2a8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55652139ef10 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55652139f208 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55652139efc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139f040 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55652139f0e8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5565213c6df0 <col:65, line:737:5>
|     |-DeclStmt 0x5565213c6068 <line:732:9, col:26>
|     | `-VarDecl 0x5565213c6000 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565213c6db8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5565213c6dd8 <line:733:13, col:58>
|       | `-VarDecl 0x5565213c6090 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565213c6270 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565213c6240 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565213c6228 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565213c6208 <col:26, col:58> 'String' (CXXTemporary 0x5565213c6208)
|       |           `-CXXMemberCallExpr 0x5565213c6198 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565213c6108 <col:26> '<bound member function type>' ->find 0x5565213be008
|       |             | `-CXXThisExpr 0x5565213c60f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565213c61d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213c6138 <col:31> 'const char *' lvalue ParmVar 0x55652139efc0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565213c61e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213c6158 <col:40> 'int' lvalue ParmVar 0x55652139f040 'flags' 'int'
|       |             `-DeclRefExpr 0x5565213c6178 <col:47> 'Args::Slot *' lvalue Var 0x5565213c6000 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565213c6328 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565213c6310 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565213c62f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565213c62c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |       `-ImplicitCastExpr 0x5565213c62a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565213c6288 <col:20> 'String' lvalue Var 0x5565213c6090 'str' 'String'
|       `-CompoundStmt 0x5565213c6d98 <col:61, line:736:9>
|         |-DeclStmt 0x5565213c67e0 <line:734:13, col:76>
|         | `-VarDecl 0x5565213c6378 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5565213c67b0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565213c6720 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565213c6768 <col:60> 'T' lvalue ParmVar 0x55652139f0e8 'variable' 'T &'
|         |     `-UnaryOperator 0x5565213c6798 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565213c6788 <col:71> 'Args *' this
|         `-CallExpr 0x5565213c6d68 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5565213c6808 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|           | `-CXXThisExpr 0x5565213c67f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5565213c6d28 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5565213c6838 <col:23> 'T *' lvalue Var 0x5565213c6378 's' 'T *'
|           | `-CallExpr 0x5565213c6ce8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5565213c6ac0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5565213c6bc0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5565213c6be0 <col:86> 'String' lvalue Var 0x5565213c6090 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5565213c6c90 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565213c6c20 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|           |   | `-DeclRefExpr 0x5565213c6c00 <col:92> 'T *' lvalue Var 0x5565213c6378 's' 'T *'
|           |   `-UnaryOperator 0x5565213c6cd0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5565213c6cc0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5565213c6d48 <col:103> 'Args::Slot *' lvalue Var 0x5565213c6000 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55652139f7f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55652139f318 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55652139f398 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55652139f758 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55652139f458 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139f4d8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55652139f578 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55652139f618 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5565213c7c90 <col:88, line:745:5>
|     |-DeclStmt 0x5565213c6e88 <line:741:9, col:26>
|     | `-VarDecl 0x5565213c6e20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565213c70a8 <line:742:9, col:55>
|     | `-VarDecl 0x5565213c6eb0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5565213c7090 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5565213c7060 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5565213c7048 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5565213c7028 <col:22, col:54> 'String' (CXXTemporary 0x5565213c7028)
|     |           `-CXXMemberCallExpr 0x5565213c6fb8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5565213c6f28 <col:22> '<bound member function type>' ->find 0x5565213be008
|     |             | `-CXXThisExpr 0x5565213c6f18 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5565213c6ff0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565213c6f58 <col:27> 'const char *' lvalue ParmVar 0x55652139f458 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5565213c7008 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565213c6f78 <col:36> 'int' lvalue ParmVar 0x55652139f4d8 'flags' 'int'
|     |             `-DeclRefExpr 0x5565213c6f98 <col:43> 'Args::Slot *' lvalue Var 0x5565213c6e20 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5565213c7480 <line:743:9, col:72>
|     | `-VarDecl 0x5565213c70f8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5565213c7450 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5565213c73c0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5565213c7408 <col:56> 'T' lvalue ParmVar 0x55652139f578 'variable' 'T &'
|     |     `-UnaryOperator 0x5565213c7438 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5565213c7428 <col:67> 'Args *' this
|     `-CallExpr 0x5565213c7c60 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5565213c74a8 <col:9> '<bound member function type>' ->postparse 0x5565213be218
|       | `-CXXThisExpr 0x5565213c7498 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5565213c7c20 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5565213c74d8 <col:19> 'T *' lvalue Var 0x5565213c70f8 's' 'T *'
|       | `-ParenExpr 0x5565213c7c00 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5565213c7bd0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5565213c7bb8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5565213c7ba0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5565213c7b80 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5565213c7b50 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |     |       `-ImplicitCastExpr 0x5565213c7b38 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5565213c74f8 <col:25> 'String' lvalue Var 0x5565213c6eb0 'str' 'String'
|       |     |-CallExpr 0x5565213c79a8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5565213c7780 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5565213c7880 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5565213c78a0 <col:89> 'String' lvalue Var 0x5565213c6eb0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5565213c7950 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5565213c78e0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|       |     | | `-DeclRefExpr 0x5565213c78c0 <col:95> 'T *' lvalue Var 0x5565213c70f8 's' 'T *'
|       |     | `-UnaryOperator 0x5565213c7990 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5565213c7980 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5565213c7b18 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5565213c7af8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5565213c7ac8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5565213c7a78 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5565213c7a08 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|       |         | | `-DeclRefExpr 0x5565213c79e8 <col:109> 'T *' lvalue Var 0x5565213c70f8 's' 'T *'
|       |         | `-DeclRefExpr 0x5565213c7aa8 <col:113> 'const V' lvalue ParmVar 0x55652139f618 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5565213c7ae8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5565213c7c40 <col:128> 'Args::Slot *' lvalue Var 0x5565213c6e20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55652139fd28 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55652139f870 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55652139f8e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55652139fc88 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55652139f9a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139fa28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55652139faa0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55652139fb48 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5565213c8888 <col:75, line:754:5>
|     |-DeclStmt 0x5565213c7d38 <line:749:9, col:26>
|     | `-VarDecl 0x5565213c7cd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565213c8850 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5565213c8870 <line:750:13, col:58>
|       | `-VarDecl 0x5565213c7d60 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565213c7f40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565213c7f10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565213c7ef8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565213c7ed8 <col:26, col:58> 'String' (CXXTemporary 0x5565213c7ed8)
|       |           `-CXXMemberCallExpr 0x5565213c7e68 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565213c7dd8 <col:26> '<bound member function type>' ->find 0x5565213be008
|       |             | `-CXXThisExpr 0x5565213c7dc8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565213c7ea0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213c7e08 <col:31> 'const char *' lvalue ParmVar 0x55652139f9a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565213c7eb8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213c7e28 <col:40> 'int' lvalue ParmVar 0x55652139fa28 'flags' 'int'
|       |             `-DeclRefExpr 0x5565213c7e48 <col:47> 'Args::Slot *' lvalue Var 0x5565213c7cd0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565213c7ff8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565213c7fe0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565213c7fc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565213c7f90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |       `-ImplicitCastExpr 0x5565213c7f78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565213c7f58 <col:20> 'String' lvalue Var 0x5565213c7d60 'str' 'String'
|       `-CompoundStmt 0x5565213c8830 <col:61, line:753:9>
|         |-DeclStmt 0x5565213c83d0 <line:751:13, col:63>
|         | `-VarDecl 0x5565213c8048 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5565213c83a0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565213c8310 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565213c8358 <col:47> 'T' lvalue ParmVar 0x55652139fb48 'variable' 'T &'
|         |     `-UnaryOperator 0x5565213c8388 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565213c8378 <col:58> 'Args *' this
|         `-CallExpr 0x5565213c8800 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5565213c83f8 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|           | `-CXXThisExpr 0x5565213c83e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5565213c87c0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5565213c8428 <col:23> 'T *' lvalue Var 0x5565213c8048 's' 'T *'
|           | `-CallExpr 0x5565213c8780 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5565213c8610 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5565213c8658 <col:56> 'P' lvalue ParmVar 0x55652139faa0 'parser' 'P'
|           |   |-DeclRefExpr 0x5565213c8678 <col:64> 'String' lvalue Var 0x5565213c7d60 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5565213c8728 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565213c86b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|           |   | `-DeclRefExpr 0x5565213c8698 <col:70> 'T *' lvalue Var 0x5565213c8048 's' 'T *'
|           |   `-UnaryOperator 0x5565213c8768 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5565213c8758 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5565213c87e0 <col:81> 'Args::Slot *' lvalue Var 0x5565213c7cd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565213a0388 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55652139fda0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55652139fe18 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55652139fe98 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5565213a02e8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55652139ff60 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55652139ffe0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5565213a0058 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5565213a00f8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5565213a0198 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5565213cb908 <col:98, line:762:5>
|     |-DeclStmt 0x5565213c8920 <line:758:9, col:26>
|     | `-VarDecl 0x5565213c88b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565213c8b40 <line:759:9, col:55>
|     | `-VarDecl 0x5565213c8948 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5565213c8b28 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5565213c8af8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5565213c8ae0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5565213c8ac0 <col:22, col:54> 'String' (CXXTemporary 0x5565213c8ac0)
|     |           `-CXXMemberCallExpr 0x5565213c8a50 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5565213c89c0 <col:22> '<bound member function type>' ->find 0x5565213be008
|     |             | `-CXXThisExpr 0x5565213c89b0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5565213c8a88 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565213c89f0 <col:27> 'const char *' lvalue ParmVar 0x55652139ff60 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5565213c8aa0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565213c8a10 <col:36> 'int' lvalue ParmVar 0x55652139ffe0 'flags' 'int'
|     |             `-DeclRefExpr 0x5565213c8a30 <col:43> 'Args::Slot *' lvalue Var 0x5565213c88b8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5565213cb250 <line:760:9, col:59>
|     | `-VarDecl 0x5565213c8b98 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5565213cb220 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5565213cb190 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5565213cb1d8 <col:43> 'T' lvalue ParmVar 0x5565213a00f8 'variable' 'T &'
|     |     `-UnaryOperator 0x5565213cb208 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5565213cb1f8 <col:54> 'Args *' this
|     `-CallExpr 0x5565213cb8d8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5565213cb278 <col:9> '<bound member function type>' ->postparse 0x5565213be218
|       | `-CXXThisExpr 0x5565213cb268 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5565213cb898 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5565213cb2a8 <col:19> 'T *' lvalue Var 0x5565213c8b98 's' 'T *'
|       | `-ParenExpr 0x5565213cb878 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5565213cb848 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5565213cb830 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5565213cb818 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5565213cb7f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5565213cb7c8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |     |       `-ImplicitCastExpr 0x5565213cb7b0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5565213cb2c8 <col:25> 'String' lvalue Var 0x5565213c8948 'str' 'String'
|       |     |-CallExpr 0x5565213cb620 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5565213cb4b0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5565213cb4f8 <col:59> 'P' lvalue ParmVar 0x5565213a0058 'parser' 'P'
|       |     | |-DeclRefExpr 0x5565213cb518 <col:67> 'String' lvalue Var 0x5565213c8948 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5565213cb5c8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5565213cb558 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|       |     | | `-DeclRefExpr 0x5565213cb538 <col:73> 'T *' lvalue Var 0x5565213c8b98 's' 'T *'
|       |     | `-UnaryOperator 0x5565213cb608 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5565213cb5f8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5565213cb790 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5565213cb770 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5565213cb740 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5565213cb6f0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5565213cb680 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|       |         | | `-DeclRefExpr 0x5565213cb660 <col:87> 'T *' lvalue Var 0x5565213c8b98 's' 'T *'
|       |         | `-DeclRefExpr 0x5565213cb720 <col:91> 'const V' lvalue ParmVar 0x5565213a0198 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5565213cb760 <col:98> 'bool' true
|       `-DeclRefExpr 0x5565213cb8b8 <col:106> 'Args::Slot *' lvalue Var 0x5565213c88b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565213a8668 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5565213a0408 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565213a0488 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565213a8180 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565213a85c8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565213a8240 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213a82c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5565213a8338 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5565213a83d8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5565213a8478 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5565213cc8e8 <col:60, line:773:5>
|     |-DeclStmt 0x5565213cb9b0 <line:767:9, col:26>
|     | `-VarDecl 0x5565213cb948 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565213cc8b0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5565213cc8d0 <line:768:13, col:58>
|       | `-VarDecl 0x5565213cb9d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565213cbbb8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565213cbb88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565213cbb70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565213cbb50 <col:26, col:58> 'String' (CXXTemporary 0x5565213cbb50)
|       |           `-CXXMemberCallExpr 0x5565213cbae0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565213cba50 <col:26> '<bound member function type>' ->find 0x5565213be008
|       |             | `-CXXThisExpr 0x5565213cba40 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565213cbb18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213cba80 <col:31> 'const char *' lvalue ParmVar 0x5565213a8240 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565213cbb30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213cbaa0 <col:40> 'int' lvalue ParmVar 0x5565213a82c0 'flags' 'int'
|       |             `-DeclRefExpr 0x5565213cbac0 <col:47> 'Args::Slot *' lvalue Var 0x5565213cb948 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565213cbc70 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565213cbc58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565213cbc38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565213cbc08 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |       `-ImplicitCastExpr 0x5565213cbbf0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565213cbbd0 <col:20> 'String' lvalue Var 0x5565213cb9d8 'str' 'String'
|       `-CompoundStmt 0x5565213cc888 <col:61, line:772:9>
|         |-DeclStmt 0x5565213cbfb0 <line:769:13, col:66>
|         | `-VarDecl 0x5565213cbcc8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5565213cbf80 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565213cbef0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565213cbf38 <col:49> 'T1' lvalue ParmVar 0x5565213a83d8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5565213cbf68 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565213cbf58 <col:61> 'Args *' this
|         |-DeclStmt 0x5565213cc320 <line:770:13, col:66>
|         | `-VarDecl 0x5565213cc038 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5565213cc2f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565213cc260 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565213cc2a8 <col:49> 'T2' lvalue ParmVar 0x5565213a8478 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5565213cc2d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565213cc2c8 <col:61> 'Args *' this
|         `-CallExpr 0x5565213cc858 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5565213cc348 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|           | `-CXXThisExpr 0x5565213cc338 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5565213cc818 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5565213cc3b8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5565213cc378 <col:23> 'T1 *' lvalue Var 0x5565213cbcc8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5565213cc398 <col:29> 'T2 *' lvalue Var 0x5565213cc038 's2' 'T2 *'
|           | `-CallExpr 0x5565213cc7d0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5565213cc5a0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5565213cc5e8 <col:63> 'P' lvalue ParmVar 0x5565213a8338 'parser' 'P'
|           |   |-DeclRefExpr 0x5565213cc608 <col:71> 'String' lvalue Var 0x5565213cb9d8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5565213cc6b8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565213cc648 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|           |   | `-DeclRefExpr 0x5565213cc628 <col:77> 'T1 *' lvalue Var 0x5565213cbcc8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5565213cc778 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565213cc708 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|           |   | `-DeclRefExpr 0x5565213cc6e8 <col:82> 'T2 *' lvalue Var 0x5565213cc038 's2' 'T2 *'
|           |   `-UnaryOperator 0x5565213cc7b8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5565213cc7a8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5565213cc838 <col:94> 'Args::Slot *' lvalue Var 0x5565213cb948 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565213a8a58 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5565213a86e8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565213a89b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5565213a87a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213a8820 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5565213a8898 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5565213cce00 <col:67, line:780:5>
|     |-DeclStmt 0x5565213cc980 <line:777:9, col:26>
|     | `-VarDecl 0x5565213cc918 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565213ccdc8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5565213ccde8 <line:778:13, col:58>
|       | `-VarDecl 0x5565213cc9a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565213ccb88 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565213ccb58 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565213ccb40 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565213ccb20 <col:26, col:58> 'String' (CXXTemporary 0x5565213ccb20)
|       |           `-CXXMemberCallExpr 0x5565213ccab0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565213cca20 <col:26> '<bound member function type>' ->find 0x5565213be008
|       |             | `-CXXThisExpr 0x5565213cca10 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565213ccae8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213cca50 <col:31> 'const char *' lvalue ParmVar 0x5565213a87a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565213ccb00 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565213cca70 <col:40> 'int' lvalue ParmVar 0x5565213a8820 'flags' 'int'
|       |             `-DeclRefExpr 0x5565213cca90 <col:47> 'Args::Slot *' lvalue Var 0x5565213cc918 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565213ccc40 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565213ccc28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565213ccc08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565213ccbd8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|       |       `-ImplicitCastExpr 0x5565213ccbc0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565213ccba0 <col:20> 'String' lvalue Var 0x5565213cc9a8 'str' 'String'
|       `-CallExpr 0x5565213ccd98 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5565213ccc68 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|         | `-CXXThisExpr 0x5565213ccc58 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5565213ccd48 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5565213cccb8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5565213ccc98 <col:23> 'P' lvalue ParmVar 0x5565213a8898 'parser' 'P'
|         | |-DeclRefExpr 0x5565213ccd00 <col:36> 'String' lvalue Var 0x5565213cc9a8 'str' 'String'
|         | `-UnaryOperator 0x5565213ccd30 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5565213ccd20 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5565213ccd78 <col:49> 'Args::Slot *' lvalue Var 0x5565213cc918 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565213a8df8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5565213a8ac8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565213a8d58 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5565213a8b80 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213a8c00 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5565213a8c78 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5565213cd770 <col:71, line:792:5>
|     |-DeclStmt 0x5565213cce98 <line:784:9, col:26>
|     | `-VarDecl 0x5565213cce30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565213ccf68 <line:785:9, col:29>
|     | `-VarDecl 0x5565213ccec8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5565213ccf50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5565213ccf30 <col:28> 'int' 1
|     |-WhileStmt 0x5565213cd620 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5565213cd640 <line:786:16, col:61>
|     | | `-VarDecl 0x5565213ccf90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5565213cd170 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5565213cd140 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5565213cd128 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5565213cd108 <col:29, col:61> 'String' (CXXTemporary 0x5565213cd108)
|     | |           `-CXXMemberCallExpr 0x5565213cd098 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5565213cd008 <col:29> '<bound member function type>' ->find 0x5565213be008
|     | |             | `-CXXThisExpr 0x5565213ccff8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5565213cd0d0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565213cd038 <col:34> 'const char *' lvalue ParmVar 0x5565213a8b80 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5565213cd0e8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565213cd058 <col:43> 'int' lvalue ParmVar 0x5565213a8c00 'flags' 'int'
|     | |             `-DeclRefExpr 0x5565213cd078 <col:50> 'Args::Slot *' lvalue Var 0x5565213cce30 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5565213cd228 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565213cd210 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565213cd1f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565213cd1c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|     | |       `-ImplicitCastExpr 0x5565213cd1a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5565213cd188 <col:23> 'String' lvalue Var 0x5565213ccf90 'str' 'String'
|     | `-CompoundStmt 0x5565213cd5f8 <col:64, line:790:9>
|     |   |-CallExpr 0x5565213cd380 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5565213cd250 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|     |   | | `-CXXThisExpr 0x5565213cd240 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5565213cd330 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5565213cd2a0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5565213cd280 <col:23> 'P' lvalue ParmVar 0x5565213a8c78 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5565213cd2e8 <col:36> 'String' lvalue Var 0x5565213ccf90 'str' 'String'
|     |   | | `-UnaryOperator 0x5565213cd318 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5565213cd308 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5565213cd360 <col:49> 'Args::Slot *' lvalue Var 0x5565213cce30 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5565213cd518 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5565213cd3b0 <col:13> 'int' lvalue Var 0x5565213ccec8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5565213cd500 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5565213cd4e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5565213cd448 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5565213cd428 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5565213cd410 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5565213cd3d0 <col:28> 'int' lvalue Var 0x5565213ccec8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5565213cd3f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5565213cd4c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5565213cd498 <col:49> 'bool' lvalue ->_read_status 0x5565212a12e0
|     |   |         `-ImplicitCastExpr 0x5565213cd478 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5565213cd468 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5565213cd5c8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5565213cd538 <col:13> 'int' lvalue ParmVar 0x5565213a8c00 'flags' 'int'
|     |     `-UnaryOperator 0x5565213cd5b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5565213cd598 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565213cd578 <col:23> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5565213cd750 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5565213cd688 <col:9> 'bool' lvalue ->_read_status 0x5565212a12e0
|       | `-ImplicitCastExpr 0x5565213cd668 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5565213cd658 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5565213cd730 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5565213cd710 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5565213cd6f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5565213cd6b8 <col:25> 'int' lvalue Var 0x5565213ccec8 'read_status' 'int'
|           `-IntegerLiteral 0x5565213cd6d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5565213a92d8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5565213a8e68 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565213a8ee8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565213a9238 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565213a8fa8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213a9028 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5565213a90a0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5565213a9148 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5565213ce700 <col:84, line:805:5>
|     |-DeclStmt 0x5565213cd818 <line:796:9, col:26>
|     | `-VarDecl 0x5565213cd7b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565213cd8e8 <line:797:9, col:29>
|     | `-VarDecl 0x5565213cd848 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5565213cd8d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5565213cd8b0 <col:28> 'int' 1
|     |-DeclStmt 0x5565213cdc20 <line:798:9, col:71>
|     | `-VarDecl 0x5565213cd938 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5565213cdbf0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5565213cdb60 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5565213cdba8 <col:55> 'T' lvalue ParmVar 0x5565213a9148 'variable' 'T &'
|     |     `-UnaryOperator 0x5565213cdbd8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5565213cdbc8 <col:66> 'Args *' this
|     |-WhileStmt 0x5565213ce5b0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5565213ce5d0 <line:799:16, col:61>
|     | | `-VarDecl 0x5565213cdc48 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5565213cde28 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5565213cddf8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5565213cdde0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5565213cddc0 <col:29, col:61> 'String' (CXXTemporary 0x5565213cddc0)
|     | |           `-CXXMemberCallExpr 0x5565213cdd50 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5565213cdcc0 <col:29> '<bound member function type>' ->find 0x5565213be008
|     | |             | `-CXXThisExpr 0x5565213cdcb0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5565213cdd88 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565213cdcf0 <col:34> 'const char *' lvalue ParmVar 0x5565213a8fa8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5565213cdda0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565213cdd10 <col:43> 'int' lvalue ParmVar 0x5565213a9028 'flags' 'int'
|     | |             `-DeclRefExpr 0x5565213cdd30 <col:50> 'Args::Slot *' lvalue Var 0x5565213cd7b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5565213cdee0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565213cdec8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565213cdea8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565213cde78 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|     | |       `-ImplicitCastExpr 0x5565213cde60 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5565213cde40 <col:23> 'String' lvalue Var 0x5565213cdc48 'str' 'String'
|     | `-CompoundStmt 0x5565213ce588 <col:64, line:803:9>
|     |   |-CallExpr 0x5565213ce310 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5565213cdf08 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|     |   | | `-CXXThisExpr 0x5565213cdef8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5565213ce2d0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5565213cdf38 <col:23> 'T *' lvalue Var 0x5565213cd938 's' 'T *'
|     |   | | `-CallExpr 0x5565213ce290 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5565213ce120 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5565213ce168 <col:56> 'P' lvalue ParmVar 0x5565213a90a0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5565213ce188 <col:64> 'String' lvalue Var 0x5565213cdc48 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5565213ce238 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5565213ce1c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|     |   | |   | `-DeclRefExpr 0x5565213ce1a8 <col:70> 'T *' lvalue Var 0x5565213cd938 's' 'T *'
|     |   | |   `-UnaryOperator 0x5565213ce278 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5565213ce268 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5565213ce2f0 <col:81> 'Args::Slot *' lvalue Var 0x5565213cd7b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5565213ce4a8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5565213ce340 <col:13> 'int' lvalue Var 0x5565213cd848 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5565213ce490 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5565213ce470 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5565213ce3d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5565213ce3b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5565213ce3a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5565213ce360 <col:28> 'int' lvalue Var 0x5565213cd848 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5565213ce380 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5565213ce458 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5565213ce428 <col:49> 'bool' lvalue ->_read_status 0x5565212a12e0
|     |   |         `-ImplicitCastExpr 0x5565213ce408 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5565213ce3f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5565213ce558 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5565213ce4c8 <col:13> 'int' lvalue ParmVar 0x5565213a9028 'flags' 'int'
|     |     `-UnaryOperator 0x5565213ce540 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5565213ce528 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565213ce508 <col:23> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5565213ce6e0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5565213ce618 <col:9> 'bool' lvalue ->_read_status 0x5565212a12e0
|       | `-ImplicitCastExpr 0x5565213ce5f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5565213ce5e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5565213ce6c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5565213ce6a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5565213ce688 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5565213ce648 <col:25> 'int' lvalue Var 0x5565213cd848 'read_status' 'int'
|           `-IntegerLiteral 0x5565213ce668 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5565213a98b8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5565213a9350 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565213a93c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565213a9818 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5565213a9488 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565213a9508 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5565213a9580 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5565213a96d0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5565213cf508 <col:87, line:821:5>
|     |-DeclStmt 0x5565213ce7b0 <line:809:9, col:26>
|     | `-VarDecl 0x5565213ce748 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565213ce880 <line:810:9, col:29>
|     | `-VarDecl 0x5565213ce7e0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5565213ce868 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5565213ce848 <col:28> 'int' 1
|     |-DeclStmt 0x5565213ceac8 <line:811:9, col:38>
|     | `-VarDecl 0x5565213ce9b0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5565213ceaa0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5565213cea28 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5565213cea80 <col:29> 'Vector<T>' lvalue ParmVar 0x5565213a96d0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5565213cf3b8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5565213cf3d8 <line:812:16, col:61>
|     | | `-VarDecl 0x5565213ceaf0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5565213cecd0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5565213ceca0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5565213cec88 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5565213cec68 <col:29, col:61> 'String' (CXXTemporary 0x5565213cec68)
|     | |           `-CXXMemberCallExpr 0x5565213cebf8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5565213ceb68 <col:29> '<bound member function type>' ->find 0x5565213be008
|     | |             | `-CXXThisExpr 0x5565213ceb58 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5565213cec30 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565213ceb98 <col:34> 'const char *' lvalue ParmVar 0x5565213a9488 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5565213cec48 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565213cebb8 <col:43> 'int' lvalue ParmVar 0x5565213a9508 'flags' 'int'
|     | |             `-DeclRefExpr 0x5565213cebd8 <col:50> 'Args::Slot *' lvalue Var 0x5565213ce748 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5565213ced88 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565213ced70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565213ced50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565213ced20 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5565210ed068
|     | |       `-ImplicitCastExpr 0x5565213ced08 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5565213cece8 <col:23> 'String' lvalue Var 0x5565213ceaf0 'str' 'String'
|     | `-CompoundStmt 0x5565213cf380 <col:64, line:819:9>
|     |   |-DeclStmt 0x5565213cee48 <line:813:13, col:23>
|     |   | `-VarDecl 0x5565213cedb0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5565213cee28 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5565213cefc8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5565213cee70 <col:13> '<bound member function type>' ->postparse 0x5565213be218
|     |   | | `-CXXThisExpr 0x5565213cee60 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5565213cef70 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5565213ceec0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5565213ceea0 <col:23> 'P' lvalue ParmVar 0x5565213a9580 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5565213cef08 <col:36> 'String' lvalue Var 0x5565213ceaf0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5565213cef28 <col:41> 'T' lvalue Var 0x5565213cedb0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5565213cef58 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5565213cef48 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5565213cefa8 <col:53> 'Args::Slot *' lvalue Var 0x5565213ce748 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5565213cf120 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5565213cf058 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5565213cf028 <col:17> 'bool' lvalue ->_read_status 0x5565212a12e0
|     |   | |   `-ImplicitCastExpr 0x5565213cf008 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5565213ceff8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5565213cf0f8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5565213cf090 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5565213cf070 <col:17> 'Vector<T> *' lvalue Var 0x5565213ce9b0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5565213cf0d8 <col:30> 'T' lvalue Var 0x5565213cedb0 'sx' 'T'
|     |   |-BinaryOperator 0x5565213cf2a0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5565213cf138 <col:13> 'int' lvalue Var 0x5565213ce7e0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5565213cf288 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5565213cf268 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5565213cf1d0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5565213cf1b0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5565213cf198 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5565213cf158 <col:28> 'int' lvalue Var 0x5565213ce7e0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5565213cf178 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5565213cf250 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5565213cf220 <col:49> 'bool' lvalue ->_read_status 0x5565212a12e0
|     |   |         `-ImplicitCastExpr 0x5565213cf200 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5565213cf1f0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5565213cf350 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5565213cf2c0 <col:13> 'int' lvalue ParmVar 0x5565213a9508 'flags' 'int'
|     |     `-UnaryOperator 0x5565213cf338 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5565213cf320 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565213cf300 <col:23> 'const int' lvalue Var 0x55652138e2a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5565213cf4e8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5565213cf420 <col:9> 'bool' lvalue ->_read_status 0x5565212a12e0
|       | `-ImplicitCastExpr 0x5565213cf400 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5565213cf3f0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5565213cf4c8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5565213cf4a8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5565213cf490 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5565213cf450 <col:25> 'int' lvalue Var 0x5565213ce7e0 'read_status' 'int'
|           `-IntegerLiteral 0x5565213cf470 <col:40> 'int' 1
|-AccessSpecDecl 0x5565213a9930 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5565213a9958 prev 0x55652138c5a8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5565213a9a50 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5565213a9b40 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5565213cf540 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5565213a9c30 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5565213cf550 <col:25, line:830:9>
| |-CXXMethodDecl 0x5565213a9d30 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5565213a9de0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5565213a9e88 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5565213a9e88
| | `-ParmVarDecl 0x5565213a9f98 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5565213aa758 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5565213aa758
|   `-ParmVarDecl 0x5565213aa868 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5565213aa008 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5565213aa168 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5565213aa360 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5565213aa210 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5565213aa288 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5565213cf730 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5565213aa618 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5565213cf5a0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5565213cf560 <col:20> 'void *' lvalue ParmVar 0x5565213aa210 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5565213aa680 '_slot' 'char *'
| | | `-CXXNewExpr 0x5565213cf628 <col:32, col:45> 'char *' array Function 0x556520f10ce8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5565213cf610 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5565213cf5e0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5565213aa288 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5565213aa6e0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5565213cf6f0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5565213cf6b0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5565213aa288 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5565213cf7b0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5565213aa460 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5565213a9c30 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5565213cf838 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5565213cf818 <line:840:13, col:22> 'void' array Function 0x556520f11048 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5565213cf800 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5565213cf7d0 <col:22> 'char *' lvalue ->_slot 0x5565213aa680
| |         `-CXXThisExpr 0x5565213cf7c0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5565213aa560 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5565213a9d30 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5565213cfa28 <col:22, line:844:9>
| |   `-CallExpr 0x5565213cf990 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5565213cf978 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5565213cf958 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55652101cac8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5565213cf9c8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5565213cf8a8 <col:20> 'void *' lvalue ->_ptr 0x5565213aa618
| |     |   `-CXXThisExpr 0x5565213cf898 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5565213cf9f8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5565213cf9e0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5565213cf8e8 <col:26> 'char *' lvalue ->_slot 0x5565213aa680
| |     |     `-CXXThisExpr 0x5565213cf8d8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5565213cfa10 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5565213cf928 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5565213aa6e0
| |         `-CXXThisExpr 0x5565213cf918 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5565213aa618 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5565213aa680 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5565213aa6e0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5565213aa8d8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5565213aa8d8
| | `-ParmVarDecl 0x5565213aa9e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5565213aaa88 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5565213aaa88
|   `-ParmVarDecl 0x5565213aab98 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5565213aad38 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5565213aac08 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5565213aaca8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5565213aafd0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5565213ab1c8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5565213ab098 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5565213ab348 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5565213cfa60 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5565213cfa40 <col:20> 'T *' lvalue ParmVar 0x5565213ab098 'ptr' 'T *'
|   | `-CompoundStmt 0x5565213cfab0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5565213ab298 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5565213a9d30 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5565213cfc60 <col:22, line:857:9>
|   |   `-CallExpr 0x5565213cfc30 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5565213cfac0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5565210d51f8 0x55652107f528
|   |     |-CXXOperatorCallExpr 0x5565213cfbc0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5565213cfb50 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565212e21a8 0x5565212e1dc8 0x5565212e19f8 0x5565212e1618 0x5565212e1238 0x5565212e0e68
|   |     | `-MemberExpr 0x5565213cfb20 <col:29> 'T *' lvalue ->_ptr 0x5565213ab348
|   |     |   `-CXXThisExpr 0x5565213cfb10 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5565213cfc00 <col:35> 'T' lvalue ->_slot 0x5565213ab3a8
|   |       `-CXXThisExpr 0x5565213cfbf0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5565213ab348 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5565213ab3a8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5565213ab410 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5565213ab510 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5565213ab560 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565213ab4f0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5565213ab4d0 <col:31> 'int' 48
|-FieldDecl 0x5565213ab588 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5565213ab5e8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5565213ab648 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5565213ab780 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5565213bd8b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5565213bd910 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5565213bd9c0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5565213bdbe8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5565213bdaf0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5565213bdd38 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5565213bdca8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5565213be008 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5565213bddf8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5565213bde78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5565213bdf20 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5565213be218 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5565213be0d0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5565213be148 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5565213be2e8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5565213be438 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5565213be3a0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5565213be7c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5565213be4f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5565213be578 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5565213be620 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5565213be6d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5565213be9f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5565213be8a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5565213be918 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5565213bed08 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5565213beaa0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5565213bec68 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5565213beb78 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213ee1d8 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565213ee2f8 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x5565213ee388 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5565213ee580 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5565213ee3c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5565213ee438 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5565213ee4b0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5565213ee650 <col:79> 'const ArgContext' lvalue Var 0x5565213cfc88 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5565213ee7c8 <col:91, line:1372:5>
|   `-ReturnStmt 0x5565213ee7b8 <line:1371:9, col:39>
|     `-CallExpr 0x5565213ee768 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x5565213ee750 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565213ee730 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5565213ee120 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5565213ee6b8 <col:24> 'const String' lvalue ParmVar 0x5565213ee3c0 'str' 'const String &'
|       |-UnaryOperator 0x5565213ee6f8 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5565213ee6d8 <col:30> 'String' lvalue ParmVar 0x5565213ee438 'result' 'String &'
|       `-ImplicitCastExpr 0x5565213ee7a0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5565213ee710 <col:38> 'int' 0
|-CXXConstructorDecl 0x55652141c9f0 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55652141caf8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55652141caf8
| `-ParmVarDecl 0x55652141cc08 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55652141cca8 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55652141cdb8 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55652141d470 <col:7>
`-CXXDestructorDecl 0x55652141ce58 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213e8a80 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565213e8b98 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5565213e8c28 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5565213e8e68 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5565213e8c60 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5565213e8ce0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5565213e8d58 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5565213e9080 <col:81> 'const ArgContext' lvalue Var 0x5565213cfc88 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5565213e8fc0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5565213e8f30 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5565213e91d8 <col:35, line:1261:5>
|   `-ReturnStmt 0x5565213e91c8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5565213e91b0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5565213e9180 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5565213e9168 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5565213e9140 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5565213e9120 <col:16, col:24> 'String' (CXXTemporary 0x5565213e9120)
|               `-CXXConstructExpr 0x5565213e90e8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5565213e90d0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5565213e90b0 <col:23> 'bool' lvalue ParmVar 0x5565213e8f30 'x' 'bool'
|-CXXConstructorDecl 0x55652141dfa0 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556521430230 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x556521430230
| `-ParmVarDecl 0x556521430348 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x5565214303e8 <col:7> col:7 implicit constexpr BoolArg 'void (BoolArg &&)' inline default trivial noexcept-unevaluated 0x5565214303e8
| `-ParmVarDecl 0x5565214304f8 <col:7> col:7 'BoolArg &&'
`-CXXDestructorDecl 0x556521430598 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565210ddf20 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565210de038 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5565210de0c8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5565210de198 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5565210de280 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5565210de498 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5565210de340 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210de648 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5565210de550 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5565210de790 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5565210de700 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5565210de8d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5565210de848 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210dea20 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5565210de990 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210deae8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5565210dec30 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5565210deba0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5565210decf8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5565210dee40 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5565210dedb0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5565210defb8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5565210deef8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210df100 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5565210df070 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210df1c8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5565210df388 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5565210df278 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565210df2f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210df5d8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5565210df448 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565210df4c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565210df688 <col:86> "" ""
|-CXXMethodDecl 0x5565210df8f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5565210df768 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5565210df7e0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210dfaa8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5565210df9b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5565210dfc58 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5565210dfb60 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5565210dff28 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5565210dfd10 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5565210dfd88 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565210dfe00 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210e0208 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5565210dfff0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5565210e0068 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565210e00e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565210e02c0 <col:115> "" ""
|-AccessSpecDecl 0x5565210e0330 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5565210e0368 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565210e0870 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5565210e0870
| `-ParmVarDecl 0x5565210e0978 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5565210e0a18 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5565210e0a18
| `-ParmVarDecl 0x5565210e0b28 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x556521116158 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556521308f60 <col:7>
|-CXXConstructorDecl 0x556521116230 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x556521116230
| `-ParmVarDecl 0x556521116348 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5565211163b8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5565211163b8
| `-ParmVarDecl 0x5565211164c8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55652130b960 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565212f7b08 prev 0x5565212ecd10 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565212f7c00 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5565212f7cf0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5565212f7e18 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5565212f7f98 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5565212f8118 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5565212f8298 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5565213090c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556521309938 <col:11>
|-CXXDestructorDecl 0x5565213091a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5565213092d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5565213092d8
| `-ParmVarDecl 0x5565213093e8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x556521309488 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556521309488
| `-ParmVarDecl 0x556521309598 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55652130c358 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55652130c468 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55652130c6e8 <col:11>
|   `-ReturnStmt 0x55652130c6d8 <col:11>
|     `-UnaryOperator 0x55652130c6c0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55652130c6b0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55652130c4d8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55652130c4d8
  `-ParmVarDecl 0x55652130c5e8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565212f8300 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565212f8418 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5565212f84b8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5565212f8520 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5565212f8588 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5565212f85f0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5565212f8650 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5565212f8710 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5565212f8770 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5565212f87d0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x556521308fd8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5565212f84b8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x556521309948 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5565213099a0 <col:12>
|-CXXConstructorDecl 0x556521309608 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x556521309608
| `-ParmVarDecl 0x556521309718 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5565213097b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5565213097b8
| `-ParmVarDecl 0x5565213098c8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55652130ba40 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565212e6420 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565212e6538 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5565212e65c8 <col:16, col:22> col:16 public
|-EnumDecl 0x5565212e65f0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5565212e66f0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5565212e67d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212e66d0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5565212e66b0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5565212e6780 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5565212e67e8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212e6760 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5565212e6740 <col:22> 'int' 64
|-CXXMethodDecl 0x5565212e6b28 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5565212e6810 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565212e6890 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5565212e6908 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565212e6980 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565212e6be8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5565212e6de8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5565212e6c60 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5565212e6cd8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565212e6e98 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5565212e6ff8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5565212e6f08 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565212e70a0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5565212e7400 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5565212e7390 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5565212e7330 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5565212e72f0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x556520dbd4e0 'void'
|       |-PointerType 0x5565210667c0 'unsigned char *'
|       | `-BuiltinType 0x556520dbd5e0 'unsigned char'
|       |-TypedefType 0x556520e62d90 'size_t' sugar
|       | |-Typedef 0x556520e2dbe0 'size_t'
|       | `-BuiltinType 0x556520dbd640 'unsigned long'
|       `-PointerType 0x556520dbdce0 'void *'
|         `-BuiltinType 0x556520dbd4e0 'void'
|-CXXMethodDecl 0x5565212e7878 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5565212e7470 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5565212e74e8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565212e7580 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5565212e7600 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x556521301f70 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x556521301f58 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x556521301f20 <col:58> 'int' 0
| |-ParmVarDecl 0x5565212e7680 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x556521301f98 <col:76> 'int' 0
| |-ParmVarDecl 0x5565212e7700 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x556521301fb8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5565212e7948 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5565212e79c8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5565212e7a88 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5565212e7b28 <col:20>
| `-OptimizeNoneAttr 0x5565212e7b80 <col:30>
|-CXXMethodDecl 0x5565212e7bf8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5565212e7c98 <col:20>
| `-OptimizeNoneAttr 0x5565212e7cf0 <col:30>
|-CXXMethodDecl 0x5565212e7d68 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5565212e7e08 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5565212e7eb8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5565212e7f58 <col:20>
| |-OptimizeNoneAttr 0x5565212e7fb0 <col:30>
| `-WarnUnusedResultAttr 0x5565212e7fd8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5565212e8030 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5565212e80d0 <col:20>
| `-OptimizeNoneAttr 0x5565212e8128 <col:30>
|-CXXMethodDecl 0x5565212e8178 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5565212e8218 <col:20>
| `-OptimizeNoneAttr 0x5565212e8270 <col:30>
|-CXXMethodDecl 0x5565212e82b8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5565212e8358 <col:20>
| `-OptimizeNoneAttr 0x5565212e83b0 <col:30>
|-CXXMethodDecl 0x5565212e83f8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212e84b8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212e8580 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5565212e8648 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5565212e8708 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212e8828 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x556521302080 <col:54, line:99:5>
|   `-ReturnStmt 0x556521302070 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x556521302058 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x556521302028 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5565212f8b08
|         `-CXXThisExpr 0x556521302018 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5565212e89c8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5565212e88d8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x556521302130 <col:67, line:103:5>
|   `-BinaryOperator 0x556521302110 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5565213020a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5565212f8b08
|     | `-CXXThisExpr 0x556521302098 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5565213020f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5565213020d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5565212e88d8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5565212e8ac0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5565213021b0 <col:33, line:107:5>
|   `-ReturnStmt 0x5565213021a0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x556521302188 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x556521302158 <col:16> 'void *' lvalue ->_destructor_argument 0x5565212f8b70
|         `-CXXThisExpr 0x556521302148 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5565212e8b80 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5565213027e0 <col:25, line:113:5>
|   |-ParenExpr 0x556521302528 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5565213024f8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x556521302268 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x556521302240 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x556521302208 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5565213021d8 <col:24> '<bound member function type>' ->shared 0x5565212e7bf8
|   |   |       `-ImplicitCastExpr 0x556521302228 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5565213021c8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5565213022c8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565213022a8 <col:42> 'int' 0
|   |   `-CallExpr 0x556521302458 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x556521302440 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521302420 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521302498 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521302338 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5565213024b0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521302360 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565213024c8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521302398 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5565213024e0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521302408 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565213023f0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565213023b8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x556521302728 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x556521302558 <col:2> 'unsigned char *' lvalue ->_head 0x5565212f8910
|   | | `-CXXThisExpr 0x556521302548 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x556521302710 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5565213026f0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x556521302598 <col:10> 'unsigned char *' lvalue ->_data 0x5565212f8978
|   |     | `-CXXThisExpr 0x556521302588 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5565213026d8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5565213026b8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5565213025d8 <col:18> 'unsigned char *' lvalue ->_tail 0x5565212f89e0
|   |         | `-CXXThisExpr 0x5565213025c8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5565213026a0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x556521302680 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x556521302618 <col:26> 'unsigned char *' lvalue ->_end 0x5565212f8a48
|   |             | `-CXXThisExpr 0x556521302608 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x556521302668 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x556521302648 <col:33> 'int' 0
|   `-BinaryOperator 0x5565213027c0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x556521302758 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5565212f8b08
|     | `-CXXThisExpr 0x556521302748 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5565213027a8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x556521302788 <col:16> 'int' 0
|-CXXMethodDecl 0x5565212e8cc0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5565212e8c30 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212e8d68 <col:20>
| |-OptimizeNoneAttr 0x5565212e8dc0 <col:30>
| `-WarnUnusedResultAttr 0x5565212e8de8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5565212e8eb8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5565212e8e28 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212e8f60 <col:20>
| |-OptimizeNoneAttr 0x5565212e8fb8 <col:30>
| `-WarnUnusedResultAttr 0x5565212e8fe0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5565212e9118 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5565212e9020 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565212e91c0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5565212e92c0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5565212e9230 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212e9368 <col:20>
| `-OptimizeNoneAttr 0x5565212e93c0 <col:30>
|-CXXMethodDecl 0x5565212e9488 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5565212e93f8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565212e9530 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5565212e9630 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5565212e95a0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565212e96d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5565212e97d8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5565212e9748 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212e9880 <col:20>
| `-OptimizeNoneAttr 0x5565212e98d8 <col:30>
|-CXXMethodDecl 0x5565212e9a68 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5565212e9918 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5565212e9990 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x556521301fd8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5565212e9b18 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5565212e9d18 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5565212e9b90 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5565212e9c08 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212e9f28 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5565212e9dd8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565212e9e50 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212ea138 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5565212e9fe8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5565212ea068 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x556521301fe8 <col:39> 'int' 0
|-CXXMethodDecl 0x5565212ea208 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5565212ea2d0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5565212ea398 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565212ea458 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212ea520 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5565212ea668 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5565212ea5d8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5565212ea838 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5565212ea728 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5565212ea7a0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212ea908 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5565212ea9c8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5565212eaa68 <col:20>
| `-OptimizeNoneAttr 0x5565212eaac0 <col:30>
|-CXXMethodDecl 0x5565212eab10 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5565212eabb0 <col:20>
| `-OptimizeNoneAttr 0x5565212eac08 <col:30>
|-CXXMethodDecl 0x5565212eac58 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565212ead18 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212eade0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5565212eae80 <col:20>
| `-OptimizeNoneAttr 0x5565212eaed8 <col:30>
|-CXXMethodDecl 0x5565212eb028 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5565212eaf18 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5565212eaf90 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212eb178 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5565212eb0e8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212eb250 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5565212eb310 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5565212eb3b0 <col:20>
| `-OptimizeNoneAttr 0x5565212eb408 <col:30>
|-CXXMethodDecl 0x5565212eb458 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5565212eb4f8 <col:20>
| `-OptimizeNoneAttr 0x5565212eb550 <col:30>
|-CXXMethodDecl 0x5565212eb5a0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565212eb668 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5565212eb708 <col:20>
| `-OptimizeNoneAttr 0x5565212eb760 <col:30>
|-CXXMethodDecl 0x5565212eb7a8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5565212eb8c8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5565212eba38 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5565212eb978 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5565212ebb28 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5565212ebbc8 <col:20>
| `-OptimizeNoneAttr 0x5565212ebc20 <col:30>
|-CXXMethodDecl 0x5565212ebc70 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565212ebd30 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212ebf68 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5565212ebde0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5565212ebe58 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212ec018 <col:20>
| `-OptimizeNoneAttr 0x5565212ec070 <col:30>
|-CXXMethodDecl 0x5565212ec118 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5565212ec1b8 <col:20>
| `-OptimizeNoneAttr 0x5565212ec210 <col:30>
|-CXXMethodDecl 0x5565212ec260 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5565212ec300 <col:20>
| `-OptimizeNoneAttr 0x5565212ec358 <col:30>
|-CXXMethodDecl 0x5565212ec3a0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5565212ec440 <col:20>
| `-OptimizeNoneAttr 0x5565212ec498 <col:30>
|-CXXMethodDecl 0x5565212ec598 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5565212ec4d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5565212ec640 <col:20>
| `-OptimizeNoneAttr 0x5565212ec698 <col:30>
|-CXXMethodDecl 0x5565212ec858 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5565212ec6d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5565212ec748 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212ec908 <col:20>
| `-OptimizeNoneAttr 0x5565212ec960 <col:30>
|-CXXMethodDecl 0x5565212eca08 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5565212ecb28 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5565212ecc48 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5565212ecce8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5565212ecd10 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5565212ece38 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5565212eced8 <col:20>
| `-OptimizeNoneAttr 0x5565212ecf30 <col:30>
|-CXXMethodDecl 0x5565212ecfd8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5565212ed078 <col:20>
| `-OptimizeNoneAttr 0x5565212ed0d0 <col:30>
|-AccessSpecDecl 0x5565212ed0f8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5565212ed120 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5565212ed220 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5565212ed270 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212ed200 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5565212ed1e0 <col:14> 'int' 48
|-CXXMethodDecl 0x5565212ed2d8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5565212ed378 <col:20>
| `-OptimizeNoneAttr 0x5565212ed3d0 <col:30>
|-CXXMethodDecl 0x5565212ed448 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5565212ed4e8 <col:20>
| `-OptimizeNoneAttr 0x5565212ed540 <col:30>
|-CXXMethodDecl 0x5565212ed608 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5565212ed578 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5565212ed7a8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5565212ed948 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5565212ed858 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5565212ed9f0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5565212edaf0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565212edea0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212edad0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5565212edab0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5565212edb80 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565212edeb8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212edb60 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5565212edb40 <col:14> 'int' 1
| |-EnumConstantDecl 0x5565212edc10 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565212eded0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212edbf0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5565212edbd0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5565212edca0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565212edee8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212edc80 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5565212edc60 <col:14> 'int' 3
| |-EnumConstantDecl 0x5565212edd30 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565212edf00 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212edd10 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5565212edcf0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5565212eddc0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565212edf18 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212edda0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5565212edd80 <col:13> 'int' 5
| `-EnumConstantDecl 0x5565212ede50 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5565212edf30 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212ede30 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5565212ede10 <col:14> 'int' 6
|-CXXMethodDecl 0x5565212edf98 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5565212ee038 <col:20>
| `-OptimizeNoneAttr 0x5565212ee090 <col:30>
|-CXXMethodDecl 0x5565212ee188 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5565212ee0c8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5565212ee230 <col:20>
| `-OptimizeNoneAttr 0x5565212ee288 <col:30>
|-CXXMethodDecl 0x5565212ee2f8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5565212ee420 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5565212ee598 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5565212ee4d0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5565212ee660 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5565212ee728 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5565212ee868 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5565212ee7d8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5565212ee910 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5565212eea10 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5565212eec10 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ee9f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5565212ee9d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5565212eeaa0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5565212eec28 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212eea80 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5565212eea60 <col:45> 'int' 4
| |-EnumConstantDecl 0x5565212eeb30 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5565212eec40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212eeb10 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5565212eeaf0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5565212eebc0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5565212eec58 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212eeba0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5565212eeb80 <col:47> 'int' 16
|-CXXMethodDecl 0x5565212eecb8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5565212eee28 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5565212eed68 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5565212eeed0 <col:20>
| `-OptimizeNoneAttr 0x5565212eef28 <col:30>
|-CXXMethodDecl 0x5565212eef78 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x556521302900 <col:18, col:36>
|   `-ReturnStmt 0x5565213028f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5565213028d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5565213028b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x556521302888 <col:27> '<bound member function type>' ->xanno 0x5565212ecfd8
|           `-CXXThisExpr 0x556521302878 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5565212ef070 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x556521302a10 <col:30, col:48>
|   `-ReturnStmt 0x556521302a00 <col:32, col:45>
|     `-ImplicitCastExpr 0x5565213029e8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5565213029c8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x556521302998 <col:39> '<bound member function type>' ->xanno 0x5565212ece38
|           `-CXXThisExpr 0x556521302988 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5565212ef158 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x556521302ba8 <col:24, col:50>
|   `-ReturnStmt 0x556521302b98 <col:26, col:47>
|     `-UnaryOperator 0x556521302b80 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556521302b60 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x556521302b48 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556521302af8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5565212f7e18
|         |   `-CXXMemberCallExpr 0x556521302ad8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x556521302aa8 <col:34> '<bound member function type>' ->xanno 0x5565212ecfd8
|         |       `-CXXThisExpr 0x556521302a98 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x556521302b28 <col:46> 'int' 0
|-CXXMethodDecl 0x5565212ef260 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x556521302d78 <col:36, col:62>
|   `-ReturnStmt 0x556521302d68 <col:38, col:59>
|     `-UnaryOperator 0x556521302d50 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556521302d30 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x556521302d18 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556521302c90 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5565212f7e18
|         |   `-CXXMemberCallExpr 0x556521302c70 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556521302c40 <col:46> '<bound member function type>' ->xanno 0x5565212ece38
|         |       `-CXXThisExpr 0x556521302c30 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x556521302cc0 <col:58> 'int' 0
|-CXXMethodDecl 0x5565212ef378 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x556521302f10 <col:26, col:53>
|   `-ReturnStmt 0x556521302f00 <col:28, col:50>
|     `-UnaryOperator 0x556521302ee8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556521302ec8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x556521302eb0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556521302e60 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5565212f8118
|         |   `-CXXMemberCallExpr 0x556521302e40 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x556521302e10 <col:36> '<bound member function type>' ->xanno 0x5565212ecfd8
|         |       `-CXXThisExpr 0x556521302e00 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x556521302e90 <col:49> 'int' 0
|-CXXMethodDecl 0x5565212ef498 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5565213030e8 <col:38, col:65>
|   `-ReturnStmt 0x5565213030d8 <col:40, col:62>
|     `-UnaryOperator 0x5565213030c0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5565213030a0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x556521303088 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556521302ff8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5565212f8118
|         |   `-CXXMemberCallExpr 0x556521302fd8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556521302fa8 <col:48> '<bound member function type>' ->xanno 0x5565212ece38
|         |       `-CXXThisExpr 0x556521302f98 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x556521303028 <col:61> 'int' 0
|-CXXMethodDecl 0x5565212ef648 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5565212ef550 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5565213037b8 <col:34, line:463:5>
|   |-ParenExpr 0x556521303600 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5565213035d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x556521303238 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521303208 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521303158 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521303140 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521303100 <col:23> 'int' lvalue ParmVar 0x5565212ef550 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521303120 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565213031e8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565213031b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521303178 <col:33> 'int' lvalue ParmVar 0x5565212ef550 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5565213031d0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x556521303198 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x556521303298 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521303278 <col:56> 'int' 0
|   |   `-CallExpr 0x556521303530 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x556521303518 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565213034f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521303570 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521303388 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x556521303588 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213033b8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565213035a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565213033f0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5565213035b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565213034e0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565213034c8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521303488 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5565213037a8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x556521303790 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x556521303770 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x556521303740 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5565213036f0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5565212f7e18
|         |   `-CXXMemberCallExpr 0x5565213036d0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5565213036a0 <col:9> '<bound member function type>' ->xanno 0x5565212ece38
|         |       `-CXXThisExpr 0x556521303690 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x556521303758 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x556521303720 <col:21> 'int' lvalue ParmVar 0x5565212ef550 'i' 'int'
|-CXXMethodDecl 0x5565212ef898 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5565212ef708 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5565212ef780 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x556521303e48 <col:40, line:472:5>
|   |-ParenExpr 0x556521303c60 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x556521303c30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x556521303910 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565213038e0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521303830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521303818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565213037d8 <col:23> 'int' lvalue ParmVar 0x5565212ef708 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565213037f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565213038c0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521303890 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521303850 <col:33> 'int' lvalue ParmVar 0x5565212ef708 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5565213038a8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x556521303870 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x556521303970 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521303950 <col:56> 'int' 0
|   |   `-CallExpr 0x556521303b90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x556521303b78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521303b58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521303bd0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213039e0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x556521303be8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521303a10 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521303c00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521303a48 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x556521303c18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521303b40 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521303b28 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521303ae8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x556521303e28 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x556521303dd0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x556521303da0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x556521303d50 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5565212f7e18
|     | |   `-CXXMemberCallExpr 0x556521303d30 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x556521303d00 <col:2> '<bound member function type>' ->xanno 0x5565212ecfd8
|     | |       `-CXXThisExpr 0x556521303cf0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x556521303db8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x556521303d80 <col:14> 'int' lvalue ParmVar 0x5565212ef708 'i' 'int'
|     `-ImplicitCastExpr 0x556521303e10 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x556521303df0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5565212ef780 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5565212efa58 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5565212ef960 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5565213045c8 <col:36, line:485:5>
|   |-ParenExpr 0x556521304330 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521304300 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521303fe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521303fb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521303ec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521303ea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521303e68 <col:23> 'int' lvalue ParmVar 0x5565212ef960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521303e88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521303f90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521303f78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521303ee0 <col:33> 'int' lvalue ParmVar 0x5565212ef960 'i' 'int'
|   |   |     `-BinaryOperator 0x556521303f58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521303f40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521303f00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521303f20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556521304040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521304020 <col:60> 'int' 0
|   |   `-CallExpr 0x556521304260 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556521304248 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521304228 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565213042a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213040b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5565213042b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213040e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565213042d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521304120 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5565213042e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521304210 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565213041f8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565213041b8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5565213045b8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5565213045a0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x556521304588 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556521304558 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5565213044f8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565213044c8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556521304440 <col:61, col:70> 'char const[48]' lvalue ->c 0x5565212f7cf0
|             |   `-CXXMemberCallExpr 0x556521304420 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565213043f0 <col:61> '<bound member function type>' ->xanno 0x5565212ece38
|             |       `-CXXThisExpr 0x5565213043e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565213044e0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556521304470 <col:74> 'int' lvalue ParmVar 0x5565212ef960 'i' 'int'
|-CXXMethodDecl 0x5565212efca8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5565212efb18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565212efb90 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556521304d18 <col:42, line:500:5>
|   |-ParenExpr 0x556521304ab0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521304a80 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521304760 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521304730 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521304640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521304628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565213045e8 <col:23> 'int' lvalue ParmVar 0x5565212efb18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521304608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521304710 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565213046f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521304660 <col:33> 'int' lvalue ParmVar 0x5565212efb18 'i' 'int'
|   |   |     `-BinaryOperator 0x5565213046d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565213046c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521304680 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565213046a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5565213047c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565213047a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5565213049e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565213049c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565213049a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521304a20 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521304830 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556521304a38 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521304868 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521304a50 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565213048a0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x556521304a68 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521304990 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521304978 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521304938 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x556521304cf8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x556521304ca8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556521304c78 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x556521304c20 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556521304bf0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556521304ba0 <col:48, col:57> 'char [48]' lvalue ->c 0x5565212f7cf0
|     |     |   `-CXXMemberCallExpr 0x556521304b80 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556521304b50 <col:48> '<bound member function type>' ->xanno 0x5565212ecfd8
|     |     |       `-CXXThisExpr 0x556521304b40 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556521304c08 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556521304bd0 <col:61> 'int' lvalue ParmVar 0x5565212efb18 'i' 'int'
|     `-ImplicitCastExpr 0x556521304ce0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x556521304cc0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5565212efb90 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5565212efe68 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5565212efd70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x556521305478 <col:35, line:513:5>
|   |-ParenExpr 0x556521305188 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521305158 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521304eb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521304e80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521304d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521304d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521304d38 <col:23> 'int' lvalue ParmVar 0x5565212efd70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521304d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521304e60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521304e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521304db0 <col:33> 'int' lvalue ParmVar 0x5565212efd70 'i' 'int'
|   |   |     `-BinaryOperator 0x556521304e28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521304e10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521304dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521304df0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556521304f10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521304ef0 <col:60> 'int' 0
|   |   `-CallExpr 0x5565213050b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565213050a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521305080 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565213050f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521304f80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556521305110 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521304fb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521305128 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521304ff0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x556521305140 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521305068 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521305050 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521305010 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x556521305468 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x556521305450 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x556521305438 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556521305408 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x556521305380 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x556521305350 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556521305300 <col:60, col:69> 'char const[48]' lvalue ->c 0x5565212f7cf0
|             |   `-CXXMemberCallExpr 0x5565213052e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565213052b0 <col:60> '<bound member function type>' ->xanno 0x5565212ece38
|             |       `-CXXThisExpr 0x5565213052a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556521305368 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556521305330 <col:73> 'int' lvalue ParmVar 0x5565212efd70 'i' 'int'
|-CXXMethodDecl 0x5565212f00b8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5565212eff28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565212effa0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x556521305b98 <col:41, line:528:5>
|   |-ParenExpr 0x556521305920 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565213058f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521305610 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565213055e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565213054f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565213054d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521305498 <col:23> 'int' lvalue ParmVar 0x5565212eff28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565213054b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565213055c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565213055a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521305510 <col:33> 'int' lvalue ParmVar 0x5565212eff28 'i' 'int'
|   |   |     `-BinaryOperator 0x556521305588 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521305570 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521305530 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521305550 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556521305670 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521305650 <col:60> 'int' 0
|   |   `-CallExpr 0x556521305850 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556521305838 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521305818 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521305890 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213056e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5565213058a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521305718 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565213058c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521305750 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5565213058d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521305800 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565213057e8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565213057a8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x556521305b78 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x556521305b28 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556521305af8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x556521305aa0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556521305a60 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556521305a10 <col:47, col:56> 'char [48]' lvalue ->c 0x5565212f7cf0
|     |     |   `-CXXMemberCallExpr 0x5565213059f0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5565213059c0 <col:47> '<bound member function type>' ->xanno 0x5565212ecfd8
|     |     |       `-CXXThisExpr 0x5565213059b0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556521305a78 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556521305a40 <col:60> 'int' lvalue ParmVar 0x5565212eff28 'i' 'int'
|     `-ImplicitCastExpr 0x556521305b60 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x556521305b40 <col:65> 'int16_t':'short' lvalue ParmVar 0x5565212effa0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5565212f0278 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5565212f0180 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556521306268 <col:36, line:541:5>
|   |-ParenExpr 0x556521306008 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521305fd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521305d30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521305d00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521305c10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521305bf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521305bb8 <col:23> 'int' lvalue ParmVar 0x5565212f0180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521305bd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521305ce0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521305cc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521305c30 <col:33> 'int' lvalue ParmVar 0x5565212f0180 'i' 'int'
|   |   |     `-BinaryOperator 0x556521305ca8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521305c90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521305c50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521305c70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556521305d90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521305d70 <col:60> 'int' 0
|   |   `-CallExpr 0x556521305f38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556521305f20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521305f00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521305f78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521305e00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556521305f90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521305e38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521305fa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521305e70 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x556521305fc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521305ee8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521305ed0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521305e90 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x556521306258 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x556521306240 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x556521306228 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565213061f8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5565213061a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556521306170 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556521306120 <col:61, col:70> 'char const[48]' lvalue ->c 0x5565212f7cf0
|             |   `-CXXMemberCallExpr 0x556521306100 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565213060d0 <col:61> '<bound member function type>' ->xanno 0x5565212ece38
|             |       `-CXXThisExpr 0x5565213060c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556521306188 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556521306150 <col:74> 'int' lvalue ParmVar 0x5565212f0180 'i' 'int'
|-CXXMethodDecl 0x5565212f0448 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5565212f0338 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5565212f03b0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565212f04f8 <col:20>
| `-OptimizeNoneAttr 0x5565212f0550 <col:30>
|-CXXMethodDecl 0x5565212f0688 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5565212f0590 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x556521306938 <col:35, line:562:5>
|   |-ParenExpr 0x5565213066d8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565213066a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521306400 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565213063d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565213062e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565213062c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521306288 <col:23> 'int' lvalue ParmVar 0x5565212f0590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565213062a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565213063b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521306398 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521306300 <col:33> 'int' lvalue ParmVar 0x5565212f0590 'i' 'int'
|   |   |     `-BinaryOperator 0x556521306378 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521306360 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521306320 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521306340 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556521306460 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521306440 <col:60> 'int' 0
|   |   `-CallExpr 0x556521306608 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565213065f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565213065d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521306648 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213064d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556521306660 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521306508 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521306678 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521306540 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x556521306690 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565213065b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565213065a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521306560 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x556521306928 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x556521306910 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5565213068f8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565213068c8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x556521306870 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x556521306840 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565213067f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5565212f7cf0
|             |   `-CXXMemberCallExpr 0x5565213067d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565213067a0 <col:60> '<bound member function type>' ->xanno 0x5565212ece38
|             |       `-CXXThisExpr 0x556521306790 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556521306858 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556521306820 <col:73> 'int' lvalue ParmVar 0x5565212f0590 'i' 'int'
|-CXXMethodDecl 0x5565212f0898 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5565212f0748 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565212f07c0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x556521307018 <col:41, line:577:5>
|   |-ParenExpr 0x556521306da8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521306d78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556521306ad0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521306aa0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565213069b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521306998 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521306958 <col:23> 'int' lvalue ParmVar 0x5565212f0748 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521306978 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521306a80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521306a68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565213069d0 <col:33> 'int' lvalue ParmVar 0x5565212f0748 'i' 'int'
|   |   |     `-BinaryOperator 0x556521306a48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521306a30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565213069f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521306a10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556521306b30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521306b10 <col:60> 'int' 0
|   |   `-CallExpr 0x556521306cd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556521306cc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521306ca0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521306d18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521306ba0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556521306d30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521306bd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521306d48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521306c10 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x556521306d60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521306c88 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521306c70 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521306c30 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x556521306ff8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x556521306fa8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556521306f78 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x556521306f18 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556521306ee8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556521306e98 <col:47, col:56> 'char [48]' lvalue ->c 0x5565212f7cf0
|     |     |   `-CXXMemberCallExpr 0x556521306e78 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556521306e48 <col:47> '<bound member function type>' ->xanno 0x5565212ecfd8
|     |     |       `-CXXThisExpr 0x556521306e38 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556521306f00 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556521306ec8 <col:60> 'int' lvalue ParmVar 0x5565212f0748 'i' 'int'
|     `-ImplicitCastExpr 0x556521306fe0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x556521306fc0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5565212f07c0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5565212f0a58 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5565212f0960 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556521307748 <col:36, line:591:5>
|   |-ParenExpr 0x556521307488 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521307458 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565213071b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521307180 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521307090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521307078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521307038 <col:23> 'int' lvalue ParmVar 0x5565212f0960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521307058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521307160 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521307148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565213070b0 <col:33> 'int' lvalue ParmVar 0x5565212f0960 'i' 'int'
|   |   |     `-BinaryOperator 0x556521307128 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521307110 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565213070d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565213070f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x556521307210 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565213071f0 <col:60> 'int' 0
|   |   `-CallExpr 0x5565213073b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565213073a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521307380 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565213073f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521307280 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x556521307410 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213072b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521307428 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565213072f0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x556521307440 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521307368 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521307350 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521307310 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x556521307738 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x556521307720 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x556521307708 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565213076d8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x556521307650 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556521307620 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565213075d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5565212f7cf0
|             |   `-CXXMemberCallExpr 0x5565213075b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556521307580 <col:61> '<bound member function type>' ->xanno 0x5565212ece38
|             |       `-CXXThisExpr 0x556521307570 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556521307638 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556521307600 <col:74> 'int' lvalue ParmVar 0x5565212f0960 'i' 'int'
|-CXXMethodDecl 0x5565212f0ca8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5565212f0b18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565212f0b90 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x556521307e28 <col:42, line:606:5>
|   |-ParenExpr 0x556521307bb8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x556521307b88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565213078e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565213078b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565213077c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565213077a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521307768 <col:23> 'int' lvalue ParmVar 0x5565212f0b18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521307788 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521307890 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556521307878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565213077e0 <col:33> 'int' lvalue ParmVar 0x5565212f0b18 'i' 'int'
|   |   |     `-BinaryOperator 0x556521307858 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521307840 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521307800 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556521307820 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x556521307940 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521307920 <col:60> 'int' 0
|   |   `-CallExpr 0x556521307ae8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556521307ad0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521307ab0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521307b28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213079b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x556521307b40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213079e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521307b58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556521307a20 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x556521307b70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521307a98 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521307a80 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521307a40 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x556521307e08 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x556521307db8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556521307d88 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x556521307d28 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556521307cf8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556521307ca8 <col:48, col:57> 'char [48]' lvalue ->c 0x5565212f7cf0
|     |     |   `-CXXMemberCallExpr 0x556521307c88 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556521307c58 <col:48> '<bound member function type>' ->xanno 0x5565212ecfd8
|     |     |       `-CXXThisExpr 0x556521307c48 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556521307d10 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556521307cd8 <col:61> 'int' lvalue ParmVar 0x5565212f0b18 'i' 'int'
|     `-ImplicitCastExpr 0x556521307df0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x556521307dd0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5565212f0b90 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5565212f0e40 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5565212f0d70 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x556521308698 <col:33, line:620:5>
|   |-ParenExpr 0x556521308410 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5565213083e0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x556521308030 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521308000 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521307ea0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556521307e88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556521307e48 <col:23> 'int' lvalue ParmVar 0x5565212f0d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556521307e68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521307fe0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x556521307fc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521307ec0 <col:33> 'int' lvalue ParmVar 0x5565212f0d70 'i' 'int'
|   |   |     `-BinaryOperator 0x556521307fa8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521307f90 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521307ee0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x556521307f68 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x556521307f50 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x556521307f18 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x556521308090 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556521308070 <col:79> 'int' 0
|   |   `-CallExpr 0x556521308340 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x556521308328 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521308308 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521308380 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521308178 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x556521308398 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213081c0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565213083b0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565213081f8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5565213083c8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565213082f0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565213082d8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521308298 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x556521308688 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x556521308670 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x556521308658 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556521308628 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5565213085a0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x556521308570 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556521308520 <col:67, col:76> 'char const[48]' lvalue ->c 0x5565212f7cf0
|             |   `-CXXMemberCallExpr 0x556521308500 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565213084d0 <col:67> '<bound member function type>' ->xanno 0x5565212ece38
|             |       `-CXXThisExpr 0x5565213084c0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556521308588 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556521308550 <col:80> 'int' lvalue ParmVar 0x5565212f0d70 'i' 'int'
|-CXXMethodDecl 0x5565212f1058 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5565212f0f00 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565212f0f80 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x556521308ec0 <col:45, line:635:5>
|   |-ParenExpr 0x556521308c08 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x556521308bd8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5565213088a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556521308870 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556521308710 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565213086f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565213086b8 <col:23> 'int' lvalue ParmVar 0x5565212f0f00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565213086d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556521308850 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x556521308838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556521308730 <col:33> 'int' lvalue ParmVar 0x5565212f0f00 'i' 'int'
|   |   |     `-BinaryOperator 0x556521308818 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556521308800 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556521308750 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565212ed220 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5565213087d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5565213087c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x556521308788 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x556521308900 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565213088e0 <col:79> 'int' 0
|   |   `-CallExpr 0x556521308b38 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x556521308b20 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556521308b00 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556520e59af0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556521308b78 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556521308970 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x556521308b90 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565213089b8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556521308ba8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565213089f0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x556521308bc0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556521308ae8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556521308ad0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556521308a88 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x556521308ea0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x556521308e08 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556521308dd8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x556521308d78 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556521308d48 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556521308cf8 <col:54, col:63> 'char [48]' lvalue ->c 0x5565212f7cf0
|     |     |   `-CXXMemberCallExpr 0x556521308cd8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556521308ca8 <col:54> '<bound member function type>' ->xanno 0x5565212ecfd8
|     |     |       `-CXXThisExpr 0x556521308c98 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556521308d60 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556521308d28 <col:67> 'int' lvalue ParmVar 0x5565212f0f00 'i' 'int'
|     `-CXXConstCastExpr 0x556521308e70 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x556521308e58 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x556521308e20 <col:91> 'const void *' lvalue ParmVar 0x5565212f0f80 'x' 'const void *'
|-CXXMethodDecl 0x5565212f1128 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x556521308f48 <col:34, line:640:5>
|   `-ReturnStmt 0x556521308f38 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x556521308f20 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x556521308ef0 <col:16> 'Packet *' lvalue ->_data_packet 0x5565212f88a8
|         `-CXXThisExpr 0x556521308ee0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5565212f1268 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5565212f11d8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556521302008 <col:46> 'bool' true
|-CXXMethodDecl 0x5565212f13e8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5565212f1320 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5565212f1490 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5565212f1c40 <line:660:22> "" ""
| |-EnumConstantDecl 0x5565212f1590 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1cb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1570 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5565212f1550 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5565212e66f0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5565212f1620 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1cc8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1600 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5565212f15e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5565212e6780 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5565212f16b0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1ce0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1690 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5565212f1670 <col:21> 'int' 0
| |-EnumConstantDecl 0x5565212f1740 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1cf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1720 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5565212f1700 <col:19> 'int' 16
| |-EnumConstantDecl 0x5565212f17d0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1d10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f17b0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5565212f1790 <col:21> 'int' 16
| |-EnumConstantDecl 0x5565212f1860 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1d28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1840 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5565212f1820 <col:19> 'int' 32
| |-EnumConstantDecl 0x5565212f18f0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1d40 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f18d0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5565212f18b0 <col:19> 'int' EnumConstant 0x5565212f1740 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5565212f1980 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1d58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1960 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5565212f1940 <col:19> 'int' EnumConstant 0x5565212f1860 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5565212f1a50 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1d70 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1a30 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5565212f1a10 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5565212f19d0 <col:23> 'int' EnumConstant 0x5565212f1980 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5565212f19f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5565212f1b20 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565212f1d88 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212f1b00 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5565212f1ae0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5565212f1aa0 <col:23> 'int' EnumConstant 0x5565212f1980 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5565212f1ac0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5565212f1bf0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5565212f1da0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212f1bd0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5565212f1bb0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5565212f1b70 <col:23> 'int' EnumConstant 0x5565212f1980 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5565212f1b90 <col:40> 'int' 8
|-CXXMethodDecl 0x5565212f1de0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5565212f1e80 <col:68> "" ""
|-CXXMethodDecl 0x5565212f1f18 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5565212f1fb8 <col:45> "" ""
|-CXXMethodDecl 0x5565212f2050 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5565212f20f0 <col:57> "" ""
|-CXXMethodDecl 0x5565212f2188 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5565212f2228 <col:45> "" ""
|-CXXMethodDecl 0x5565212f22c0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5565212f2360 <col:57> "" ""
|-CXXMethodDecl 0x5565212f23f0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5565212f2490 <col:51> "" ""
|-CXXMethodDecl 0x5565212f2520 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5565212f25c0 <col:63> "" ""
|-CXXMethodDecl 0x5565212f2650 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5565212f26f0 <col:53> "" ""
|-CXXMethodDecl 0x5565212f2780 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5565212f2820 <col:65> "" ""
|-CXXMethodDecl 0x5565212f2938 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5565212f28a8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5565212f29e0 <col:61> "" ""
|-CXXMethodDecl 0x5565212f2b78 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5565212f2a68 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5565212f2ae0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5565212f2c28 <col:67> "" ""
|-CXXMethodDecl 0x5565212f2d40 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5565212f2cb0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5565212f2de8 <col:63> "" ""
|-CXXMethodDecl 0x5565212f2f80 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5565212f2e70 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565212f2ee8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5565212f3030 <col:69> "" ""
|-CXXMethodDecl 0x5565212f3148 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5565212f30b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5565212f31f0 <col:63> "" ""
|-CXXMethodDecl 0x5565212f58c8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5565212f57b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565212f5830 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565212f5978 <col:69> "" ""
|-CXXMethodDecl 0x5565212f5a90 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5565212f5a00 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5565212f5b38 <col:62> "" ""
|-CXXMethodDecl 0x5565212f5cd0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5565212f5bc0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565212f5c38 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5565212f5d80 <col:68> "" ""
|-CXXMethodDecl 0x5565212f5e98 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5565212f5e08 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5565212f5f40 <col:63> "" ""
|-CXXMethodDecl 0x5565212f60d8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5565212f5fc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565212f6040 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5565212f6188 <col:69> "" ""
|-CXXMethodDecl 0x5565212f6218 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5565212f62b8 <col:64> "" ""
|-CXXMethodDecl 0x5565212f6348 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5565212f63e8 <col:52> "" ""
|-CXXMethodDecl 0x5565212f6478 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5565212f6518 <col:67> "" ""
|-CXXMethodDecl 0x5565212f65a8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5565212f6648 <col:55> "" ""
|-CXXMethodDecl 0x5565212f6760 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5565212f66d0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5565212f6808 <col:58> "" ""
|-CXXMethodDecl 0x5565212f69a0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5565212f6890 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565212f6908 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5565212f6a50 <col:62> "" ""
|-CXXMethodDecl 0x5565212f6b68 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5565212f6ad8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5565212f6c10 <col:58> "" ""
|-CXXMethodDecl 0x5565212f6da8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5565212f6c98 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565212f6d10 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5565212f6e58 <col:62> "" ""
|-CXXMethodDecl 0x5565212f6f70 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5565212f6ee0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5565212f7018 <col:60> "" ""
|-CXXMethodDecl 0x5565212f71b0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5565212f70a0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5565212f7118 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5565212f7260 <col:64> "" ""
|-CXXMethodDecl 0x5565212f7378 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5565212f72e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5565212f7420 <col:58> "" ""
|-CXXMethodDecl 0x5565212f75b8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5565212f74a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565212f7520 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5565212f7668 <col:62> "" ""
|-CXXMethodDecl 0x5565212f7780 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5565212f76f0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5565212f7828 <col:59> "" ""
|-CXXMethodDecl 0x5565212f79c0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5565212f78b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565212f7928 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565212f7a70 <col:63> "" ""
|-AccessSpecDecl 0x5565212f7ae0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5565212f7b08 prev 0x5565212ecd10 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565212f7c00 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5565212f7cf0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5565212f7e18 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5565212f7f98 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5565212f8118 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5565212f8298 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5565213090c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556521309938 <col:11>
| |-CXXDestructorDecl 0x5565213091a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5565213092d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5565213092d8
| | `-ParmVarDecl 0x5565213093e8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x556521309488 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556521309488
| | `-ParmVarDecl 0x556521309598 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55652130c358 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55652130c468 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55652130c6e8 <col:11>
| |   `-ReturnStmt 0x55652130c6d8 <col:11>
| |     `-UnaryOperator 0x55652130c6c0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55652130c6b0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55652130c4d8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55652130c4d8
|   `-ParmVarDecl 0x55652130c5e8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5565212f8300 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565212f8418 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5565212f84b8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5565212f8520 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5565212f8588 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5565212f85f0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5565212f8650 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5565212f8710 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5565212f8770 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5565212f87d0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x556521308fd8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5565212f84b8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x556521309948 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5565213099a0 <col:12>
| |-CXXConstructorDecl 0x556521309608 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x556521309608
| | `-ParmVarDecl 0x556521309718 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5565213097b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5565213097b8
| | `-ParmVarDecl 0x5565213098c8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55652130ba40 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5565212f8848 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5565212f88a8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5565212f8910 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5565212f8978 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5565212f89e0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5565212f8a48 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5565212f8aa8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5565212f8b08 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5565212f8b70 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5565212f8bf8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5565212f8848 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x556521308f70 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5565212f8aa8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5565213099b0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x556521309a10 <col:21, line:755:5>
|-CXXConstructorDecl 0x5565212f8d98 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5565212f8cd8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5565212f8e90 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5565212f9078 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5565212f8f80 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5565212f9348 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5565212f9130 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565212f91a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565212f9220 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212f9568 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5565212f9418 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5565212f9490 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x556521301b48 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5565212f9628 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5565212f96a0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5565212f9718 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x556521301ca0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x556521301c10 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556521301de8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x556521301d58 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x556521301ee0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565214056d0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565214057e8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x556521405890 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5565214058f8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x556521405960 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x556521405a10 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x556521405890 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x556521406920 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5565214068d8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5565214068a0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x556521406888 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x556521406830 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55652110fb50 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5565214058f8 'len' 'int'
| | `-IntegerLiteral 0x556521406998 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x556521405960 'cap' 'int'
| | `-IntegerLiteral 0x556521406a00 <col:20> 'int' 0
| `-CompoundStmt 0x556521406a80 <col:23, line:119:2>
|-CXXConstructorDecl 0x556521405c10 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x556521405ac8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x556521406a90 <col:37, line:121:2>
|-CXXConstructorDecl 0x556521408ca8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556521408db8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x556521405890 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55652140a770 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55652140a740 <col:12> 'unsigned char *const' lvalue .s 0x556521405890
| |     `-DeclRefExpr 0x55652140a720 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x556521408db8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5565214058f8 'len' 'int'
| | `-ImplicitCastExpr 0x55652140a800 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55652140a7d0 <col:12> 'const int' lvalue .len 0x5565214058f8
| |     `-DeclRefExpr 0x55652140a7b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x556521408db8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x556521405960 'cap' 'int'
| | `-ImplicitCastExpr 0x55652140a890 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55652140a860 <col:12> 'const int' lvalue .cap 0x556521405960
| |     `-DeclRefExpr 0x55652140a840 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x556521408db8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55652140a8e8 <col:12>
|-CXXConstructorDecl 0x556521408e58 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x556521408e58
| `-ParmVarDecl 0x556521408f68 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55652140aba0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556521400e78 prev 0x556521339668 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556521400f70 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x556521401000 <col:21, col:27> col:21 public
|-TypedefDecl 0x556521401040 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x556520dbdfd0 'const char *'
|   `-QualType 0x556520dbd521 'const char' const
|     `-BuiltinType 0x556520dbd520 'char'
|-TypedefDecl 0x5565214010b0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x556520dbe1a0 'char *'
|   `-BuiltinType 0x556520dbd520 'char'
|-TypedefDecl 0x5565214011f0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x556521401160 'int (StringAccum::*)() const'
|   |-RecordType 0x55652107b420 'StringAccum'
|   | `-CXXRecord 0x556521400e78 'StringAccum'
|   `-ParenType 0x5565210e9b60 'int () const' sugar
|     `-FunctionProtoType 0x5565210be700 'int () const' const cdecl
|       `-BuiltinType 0x556520dbd580 'int'
|-CXXConstructorDecl 0x5565214012b0 <line:35:5, col:24> col:12 StringAccum 'void ()' inline
|-CXXConstructorDecl 0x556521401400 <line:36:5, col:45> col:21 used StringAccum 'void (int)' inline
| `-ParmVarDecl 0x556521401370 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x556521401550 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5565214014c0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5565214016f8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x556521401638 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5565214018a8 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5565214017e8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5565214019a0 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x556521401b58 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x556521401a90 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x556521401cd8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x556521401c10 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x556521401dd0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x556521401e98 <line:50:5, col:23> col:18 used data 'char *()' inline
|-CXXMethodDecl 0x556521401f60 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x556521402028 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5565214020f0 <line:54:5, col:23> col:17 used c_str 'const char *()'
|-CXXConversionDecl 0x556521402258 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x556521402328 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5565214023e8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5565214024f8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x556521402608 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5565214026c8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x556521402788 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5565214028d0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x556521402840 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x556521402a60 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x556521402990 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x556521402b28 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x556521402c20 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x556521402ce0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x556521402da8 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x556521402e68 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x556521402f28 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x556521402fe8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x556521403138 <line:76:5, col:31> col:18 used reserve 'char *(int)' inline
| `-ParmVarDecl 0x5565214030a0 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x556521403288 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5565214031f8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5565214033e0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x556521403348 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x556521403530 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5565214034a0 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x556521403750 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5565214035f0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x556521403670 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x556521406758 <col:53> 'int' 0
|-CXXMethodDecl 0x5565214038a8 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x556521403818 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x556521406778 <col:34> 'int' 1
|-CXXMethodDecl 0x5565214039f0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x556521403960 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x556521403b40 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x556521403ab0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x556521403c90 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x556521403c00 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x556521403de0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x556521403d50 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x556521403fb8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x556521403ea0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x556521403f20 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x556521404198 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x556521404080 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x556521404100 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x556521404378 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x556521404260 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5565214042e0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x556521404558 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x556521404440 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5565214044c0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x556521404738 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x556521404620 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5565214046a0 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x556521404a98 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x556521404880 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x556521404900 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x556521406798 <col:56> 'int' 10
| `-ParmVarDecl 0x556521404978 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565214067b8 <col:77> 'bool' true
|-CXXMethodDecl 0x556521404df8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x556521404be0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x556521404c60 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5565214067c8 <col:57> 'int' 10
| `-ParmVarDecl 0x556521404cd8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565214067e8 <col:78> 'bool' true
|-CXXMethodDecl 0x556521405020 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x556521404ec8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x556521404f48 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x556521405118 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x556521405288 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5565214051c8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5565214053d8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x556521405348 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x556521405480 <col:51> "" ""
|-AccessSpecDecl 0x5565214054f0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x556521405518 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x556521405668 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5565214056b8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556521405648 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x556521405618 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x5565210f28c8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5565214056d0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565214057e8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x556521405890 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5565214058f8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x556521405960 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x556521405a10 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x556521405890 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x556521406920 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5565214068d8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5565214068a0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x556521406888 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x556521406830 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55652110fb50 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5565214058f8 'len' 'int'
| | | `-IntegerLiteral 0x556521406998 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x556521405960 'cap' 'int'
| | | `-IntegerLiteral 0x556521406a00 <col:20> 'int' 0
| | `-CompoundStmt 0x556521406a80 <col:23, line:119:2>
| |-CXXConstructorDecl 0x556521405c10 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x556521405ac8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x556521406a90 <col:37, line:121:2>
| |-CXXConstructorDecl 0x556521408ca8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556521408db8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x556521405890 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55652140a770 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55652140a740 <col:12> 'unsigned char *const' lvalue .s 0x556521405890
| | |     `-DeclRefExpr 0x55652140a720 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x556521408db8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5565214058f8 'len' 'int'
| | | `-ImplicitCastExpr 0x55652140a800 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55652140a7d0 <col:12> 'const int' lvalue .len 0x5565214058f8
| | |     `-DeclRefExpr 0x55652140a7b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x556521408db8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x556521405960 'cap' 'int'
| | | `-ImplicitCastExpr 0x55652140a890 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55652140a860 <col:12> 'const int' lvalue .cap 0x556521405960
| | |     `-DeclRefExpr 0x55652140a840 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x556521408db8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55652140a8e8 <col:12>
| |-CXXConstructorDecl 0x556521408e58 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x556521408e58
| | `-ParmVarDecl 0x556521408f68 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55652140aba0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x556521405ce8 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x556521405de8 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x556521405d50 <col:16> col:19 'int'
|-CXXMethodDecl 0x556521405fc8 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x556521405ea8 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x556521405f28 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5565214061a8 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x556521406090 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x556521406110 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x556521406300 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x556521406270 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x556521406450 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5565214063c0 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x556521406718 <line:132:5, col:70> col:25
  `-FunctionDecl 0x556521406658 parent 0x556520dbd488 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x556521406508 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x556521406580 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565212b7da0 prev 0x5565212aebe0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565212b7e98 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5565212b7f38 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5565212bed00 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565212bf0e8 <col:11>
|-CXXConstructorDecl 0x5565212bede0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5565212beec8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5565212bf830 <col:11>
|-CXXConstructorDecl 0x5565212bef68 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565212bf078 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5565212c1088 <col:11>
|-CXXDestructorDecl 0x5565212c0398 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556520fc6f48 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556520fc7058 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x556520fc7920 <col:11>
|   `-ReturnStmt 0x556520fc7910 <col:11>
|     `-UnaryOperator 0x556520fc78f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556520fc78e8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x556520fc70c8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x556520fc70c8
  `-ParmVarDecl 0x556520fc71d8 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565212add98 prev 0x5565212adaa8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565212ade90 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5565212adf20 <col:19, col:25> col:19 public
|-TypedefDecl 0x5565212adf58 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x556520f13120 'int32_t' sugar
|   |-Typedef 0x556520e26328 'int32_t'
|   `-TypedefType 0x556520dff510 '__int32_t' sugar
|     |-Typedef 0x556520dff128 '__int32_t'
|     `-BuiltinType 0x556520dbd580 'int'
|-TypedefDecl 0x5565212adfc0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x556520f132e0 'int64_t' sugar
|   |-Typedef 0x556520e26390 'int64_t'
|   `-TypedefType 0x556520dff630 '__int64_t' sugar
|     |-Typedef 0x556520dff208 '__int64_t'
|     `-BuiltinType 0x556520dbd5a0 'long'
|-EnumDecl 0x5565212ae018 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5565212ae190 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5565212ae170 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5565212ae148 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5565212ae130 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5565212ae100 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5565212ae288 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5565212ae268 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5565212ae240 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5565212ae228 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5565212ae200 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5565212ae1e0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5565212ae2d8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5565212ae3e0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae930 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae3c0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5565212ae3a0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5565212ae470 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae948 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae450 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5565212ae430 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5565212ae500 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae960 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae4e0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5565212ae4c0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5565212ae590 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae978 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae570 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5565212ae550 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5565212ae620 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae990 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae600 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5565212ae5e0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5565212ae6b0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae9a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae690 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5565212ae670 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5565212ae740 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae9c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae720 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5565212ae700 <col:26> 'int' EnumConstant 0x5565212ae3e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5565212ae810 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5565212ae9d8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212ae7f0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5565212ae7d0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5565212ae790 <col:27> 'int' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5565212ae7b0 <col:44> 'int' EnumConstant 0x5565212ae6b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5565212ae8e0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5565212ae9f0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212ae8c0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5565212ae8a0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5565212ae860 <col:27> 'int' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5565212ae880 <col:44> 'int' EnumConstant 0x5565212ae590 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5565212aea08 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5565212aeb10 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5565212aeb60 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212aeaf0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5565212aead0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5565212aeb88 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x556520f12d50 'uninitialized_type'
|   `-CXXRecord 0x556520f12cb8 'uninitialized_type'
|-CXXRecordDecl 0x5565212aebe0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5565212aecf0 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf0f8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565212bf218 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5565212bf1d0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5565212bf160 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212bf150 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5565212bf190 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5565212bf200 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5565212bf1b0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5565212aef38 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5565212aedb0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5565212aee28 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5565212baa30 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5565212baa10 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf230 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565212bf380 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5565212bf308 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5565212bf298 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212bf288 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5565212bf350 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5565212bf338 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5565212bf2c8 <col:16> 'long' lvalue ParmVar 0x5565212aedb0 'sec' 'long'
|     `-ImplicitCastExpr 0x5565212bf368 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5565212bf2e8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212aee28 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5565212af198 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5565212af008 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5565212af080 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5565212baa68 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5565212baa48 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf398 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565212bf4d0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5565212bf470 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5565212bf400 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212bf3f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5565212bf4a0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5565212bf430 <col:16> 'int' lvalue ParmVar 0x5565212af008 'sec' 'int'
|     `-ImplicitCastExpr 0x5565212bf4b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5565212bf450 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212af080 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5565212af3f8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5565212af268 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5565212af2e0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5565212baaa0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5565212baa80 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf4e8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565212bf638 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5565212bf5c0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5565212bf550 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212bf540 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5565212bf608 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5565212bf5f0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5565212bf580 <col:16> 'unsigned long' lvalue ParmVar 0x5565212af268 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5565212bf620 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5565212bf5a0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212af2e0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5565212b0590 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5565212af4c8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5565212af540 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5565212baad8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5565212baab8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf650 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565212bf7a0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5565212bf728 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5565212bf6b8 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212bf6a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5565212bf770 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5565212bf758 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5565212bf6e8 <col:16> 'unsigned int' lvalue ParmVar 0x5565212af4c8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5565212bf788 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5565212bf708 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212af540 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5565212b06f0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5565212b0660 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5565212b0888 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5565212b07c8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5565212b0ab8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5565212b09c0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5565212b0c68 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5565212b0ba8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf840 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5565212bf7b8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5565212b0ba8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5565212bf8a0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5565212b0e38 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5565212b0d78 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212bf8b0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565212bf960 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5565212bf938 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5565212bf908 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5565212b0d78 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5565212b1028 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5565212b0fa0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5565212adb40 'Timestamp'
|   | `-CXXRecord 0x5565212add98 'Timestamp'
|   `-ParenType 0x5565212b0f40 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5565212b0f10 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5565212ae0e0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5565212adf58 'seconds_type'
|         `-TypedefType 0x556520f13120 'int32_t' sugar
|           |-Typedef 0x556520e26328 'int32_t'
|           `-TypedefType 0x556520dff510 '__int32_t' sugar
|             |-Typedef 0x556520dff128 '__int32_t'
|             `-BuiltinType 0x556520dbd580 'int'
|-CXXConversionDecl 0x5565212b1168 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5565212b1238 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5565212bfa68 <col:37, line:231:5>
|   `-ReturnStmt 0x5565212bfa58 <line:227:9, col:23>
|     `-BinaryOperator 0x5565212bfa38 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5565212bfa08 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5565212bf9b8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5565212b7f38
|       |   `-MemberExpr 0x5565212bf988 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5565212b8ee8
|       |     `-CXXThisExpr 0x5565212bf978 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5565212bfa20 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5565212bf9e8 <col:23> 'int' 0
|-CXXMethodDecl 0x5565212b12f8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5565212b13b8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212b1478 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212b1538 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212b15f8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5565212b1768 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5565212b16a8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5565212b18b0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5565212b1820 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b1978 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5565212b1a18 <col:54> "" ""
|-CXXMethodDecl 0x5565212b1aa8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5565212b1b48 <col:54> "" ""
|-CXXMethodDecl 0x5565212b1bd8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5565212b1c78 <col:54> "" ""
|-CXXMethodDecl 0x5565212b1d78 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5565212b1e48 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5565212b1f78 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5565212b2070 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5565212b21a8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5565212bfc80 <col:39, line:271:5>
|   `-ReturnStmt 0x5565212bfc70 <line:267:9, col:61>
|     `-CallExpr 0x5565212bfc10 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5565212bfbf8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565212bfa80 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5565212b9218 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5565212bfc40 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5565212bfae0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5565212b7f38
|       |   `-MemberExpr 0x5565212bfab0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5565212b8ee8
|       |     `-CXXThisExpr 0x5565212bfaa0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5565212bfc58 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5565212bfb80 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5565212bfb50 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5565212bfb10 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5565212bfb68 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5565212bfb30 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae6b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b2268 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5565212bfe40 <col:39, line:279:5>
|   `-ReturnStmt 0x5565212bfe30 <line:275:9, col:61>
|     `-CallExpr 0x5565212bfdd0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5565212bfdb8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565212bfc98 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5565212b9218 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5565212bfe00 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5565212bfcf8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5565212b7f38
|       |   `-MemberExpr 0x5565212bfcc8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5565212b8ee8
|       |     `-CXXThisExpr 0x5565212bfcb8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5565212bfe18 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5565212bfd98 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5565212bfd68 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5565212bfd28 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5565212bfd80 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5565212bfd48 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae590 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b2328 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5565212bffd8 <col:39, line:287:5>
|   `-ReturnStmt 0x5565212bffc8 <line:283:9, col:53>
|     `-BinaryOperator 0x5565212bffa8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5565212bff78 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5565212bfe98 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5565212b7f38
|       |   `-MemberExpr 0x5565212bfe68 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5565212b8ee8
|       |     `-CXXThisExpr 0x5565212bfe58 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5565212bff90 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5565212bff58 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5565212bff38 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5565212bff08 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212bfec8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae3e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212bff20 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212bfee8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b2418 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5565212c1270 <col:40, line:293:5>
|   |-DeclStmt 0x5565212c0120 <line:291:9, col:48>
|   | `-VarDecl 0x5565212c0000 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5565212c0100 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5565212c00a8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5565212c0078 <col:22> '<bound member function type>' ->subsec 0x5565212b13b8
|   |     |   `-CXXThisExpr 0x5565212c0068 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5565212c00e8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5565212c00c8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae810 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5565212c1260 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5565212c1248 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5565212c1218 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212c1200 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5565212c11e0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5565212c11b0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5565212c0f48 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5565212c0f30 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5565212c0138 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5565212c0000 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5565212c1150 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5565212c1138 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5565212c1108 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5565212c0f60 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5565212c0ed0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5565212c0eb8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5565212c0e68 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5565212adce8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5565212c0e08 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5565212c0168 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5565212c0158 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5565212c0e50 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5565212c0e38 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5565212c0628 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5565212c0190 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5565212c0220 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5565212c01f0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5565212c01b0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae810 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5565212c0208 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5565212c01d0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5565212c0000 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5565212c1180 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5565212c0f18 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5565212c0f08 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5565212b24d8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5565212c17c8 <col:40, line:302:5>
|   |-DeclStmt 0x5565212c13c0 <line:297:9, col:48>
|   | `-VarDecl 0x5565212c12a0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5565212c13a0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5565212c1348 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5565212c1318 <col:22> '<bound member function type>' ->subsec 0x5565212b13b8
|   |     |   `-CXXThisExpr 0x5565212c1308 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5565212c1388 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5565212c1368 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae8e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5565212c17b8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5565212c17a0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5565212c1770 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212c1758 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5565212c1738 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5565212c1708 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5565212c1630 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5565212c1618 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5565212c13d8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5565212c12a0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5565212c16a8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5565212c1690 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5565212c1660 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5565212c1648 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5565212c15b8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5565212c15a0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5565212c1580 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5565212adce8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5565212c1520 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5565212c1408 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5565212c13f8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5565212c1568 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5565212c1550 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5565212c14e0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5565212c1430 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5565212c14c0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5565212c1490 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5565212c1450 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae8e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5565212c14a8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5565212c1470 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5565212c12a0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5565212c16d8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5565212c1600 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5565212c15f0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5565212b2598 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5565212c1850 <col:40, line:306:5>
|   `-ReturnStmt 0x5565212c1840 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5565212c1810 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5565212c17f8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565212c17e8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5565212b2738 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5565212b2648 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5565212b2908 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5565212b2810 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5565212b29f8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5565212b2b68 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5565212b2aa8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5565212c1998 <col:56, line:320:5>
|   `-ReturnStmt 0x5565212c1988 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5565212c1970 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5565212c1940 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212c1928 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5565212c18e8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5565212c18b8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5565212c1878 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b2aa8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5565212c18d0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5565212c1898 <col:31> 'int' 0
|-CXXMethodDecl 0x5565212b2da8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5565212b2c20 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b2c98 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212c1b68 <col:72, line:326:5>
|   `-ReturnStmt 0x5565212c1b58 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5565212c1b40 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5565212c1b10 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212c1af8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5565212c1ab8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5565212c1aa0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5565212c19c0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b2c20 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5565212c1a60 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5565212c1a48 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5565212c19e0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5565212b7690 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5565212c1a88 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5565212c1a00 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b2c98 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b2f58 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5565212b2e68 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5565212c2230 <col:56, line:337:5>
|   |-DeclStmt 0x5565212c1e68 <line:329:9, col:51>
|   | `-VarDecl 0x5565212c1b90 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5565212c1e50 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5565212c1e20 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5565212c1e08 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5565212c1df0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5565212c1dc0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5565212c1da8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5565212c1d90 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5565212c1c80 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5565212c2020 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5565212c1ed0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5565212b7f38
|   | | `-MemberExpr 0x5565212c1ea0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5565212b8ee8
|   | |   `-DeclRefExpr 0x5565212c1e80 <col:9> 'Timestamp' lvalue Var 0x5565212c1b90 't' 'Timestamp'
|   | `-BinaryOperator 0x5565212c2000 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5565212c1fd0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5565212c1f00 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5565212b2e68 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5565212c1fe8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5565212c1fb0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5565212c1f90 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5565212c1f60 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5565212c1f20 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5565212c1f78 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5565212c1f40 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae6b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5565212c2218 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5565212c21e8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5565212c21d0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5565212c21b0 <col:16> 'Timestamp' lvalue Var 0x5565212c1b90 't' 'Timestamp'
|-CXXMethodDecl 0x5565212b3120 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5565212b3010 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b3088 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212c23e8 <col:72, line:343:5>
|   `-ReturnStmt 0x5565212c23d8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5565212c23c0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5565212c2390 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212c2378 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5565212c2338 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5565212c2320 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5565212c2268 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b3010 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5565212c22e0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5565212c22c8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5565212c2288 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5565212b77d8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5565212c2308 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5565212c22a8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b3088 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b3270 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5565212b31e0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5565212c2830 <col:56, line:354:5>
|   |-DeclStmt 0x5565212c25d8 <line:346:9, col:51>
|   | `-VarDecl 0x5565212c2410 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5565212c25c0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5565212c2590 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5565212c2578 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5565212c2560 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5565212c2530 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5565212c2518 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5565212c2500 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5565212c24d0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5565212c2790 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5565212c2640 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5565212b7f38
|   | | `-MemberExpr 0x5565212c2610 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5565212b8ee8
|   | |   `-DeclRefExpr 0x5565212c25f0 <col:9> 'Timestamp' lvalue Var 0x5565212c2410 't' 'Timestamp'
|   | `-BinaryOperator 0x5565212c2770 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5565212c2740 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5565212c2670 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5565212b31e0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5565212c2758 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5565212c2720 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5565212c2700 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5565212c26d0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5565212c2690 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5565212c26e8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5565212c26b0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae590 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5565212c2818 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5565212c27e8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5565212c27d0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5565212c27b0 <col:16> 'Timestamp' lvalue Var 0x5565212c2410 't' 'Timestamp'
|-CXXMethodDecl 0x5565212b3438 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5565212b3328 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b33a0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212c29e8 <col:72, line:360:5>
|   `-ReturnStmt 0x5565212c29d8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5565212c29c0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5565212c2990 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212c2978 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5565212c2938 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5565212c2920 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5565212c2868 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b3328 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5565212c28e0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5565212c28c8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5565212c2888 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5565212b7920 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5565212c2908 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5565212c28a8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b33a0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b3588 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5565212b34f8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5565212cf358 <col:56, line:371:5>
|   |-DeclStmt 0x5565212c2bd8 <line:363:9, col:51>
|   | `-VarDecl 0x5565212c2a10 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5565212c2bc0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5565212c2b90 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5565212c2b78 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5565212c2b60 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5565212c2b30 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5565212c2b18 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5565212c2b00 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5565212c2ad0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5565212cf2b8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5565212c2c40 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5565212b7f38
|   | | `-MemberExpr 0x5565212c2c10 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5565212b8ee8
|   | |   `-DeclRefExpr 0x5565212c2bf0 <col:9> 'Timestamp' lvalue Var 0x5565212c2a10 't' 'Timestamp'
|   | `-CallExpr 0x5565212cf258 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5565212cf240 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5565212c2c70 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5565212b9218 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5565212cf288 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5565212c2c90 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5565212b34f8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5565212cf2a0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5565212cf220 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5565212cf1f0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5565212c2cb0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae3e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5565212cf208 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5565212c2cd0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5565212cf340 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5565212cf310 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5565212cf2f8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5565212cf2d8 <col:16> 'Timestamp' lvalue Var 0x5565212c2a10 't' 'Timestamp'
|-CXXMethodDecl 0x5565212b3678 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5565212cf498 <col:39, line:377:5>
|   `-ReturnStmt 0x5565212cf488 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5565212cf470 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5565212cf440 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565212cf428 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5565212cf3e8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5565212cf390 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5565212cf3d0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5565212cf3b0 <col:29> 'int' 1
|-CXXMethodDecl 0x5565212b3738 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5565212cf578 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5565212cf530 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5565212cf4c0 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212cf4b0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5565212cf4f0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5565212cf560 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5565212cf510 <col:19> 'int' 0
|-CXXMethodDecl 0x5565212b3938 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5565212b37e8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b3860 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5565212bab10 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5565212baaf0 <col:60> 'int' 0
| `-CompoundStmt 0x5565212cf770 <col:63, line:395:5>
|   `-BinaryOperator 0x5565212cf750 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5565212cf5d0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5565212b7f38
|     | `-MemberExpr 0x5565212cf5a0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5565212b8ee8
|     |   `-CXXThisExpr 0x5565212cf590 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5565212cf730 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5565212cf6c0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5565212cf660 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5565212cf648 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5565212cf630 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5565212cf600 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b37e8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5565212cf6a8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5565212cf688 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5565212cf718 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5565212cf700 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5565212cf6e0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b3860 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b3b08 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5565212b39f8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b3a70 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212cf8c8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5565212cf880 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5565212cf798 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212cf788 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5565212cf8b0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5565212cf7c8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b39f8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5565212cf840 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5565212cf828 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565212cf7e8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5565212b77d8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5565212cf868 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5565212cf808 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b3a70 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b3cd8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5565212b3bc8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b3c40 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212cfa20 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5565212cf9d8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5565212cf8f0 <col:9> '<bound member function type>' ->assign 0x5565212b3938
|     | `-CXXThisExpr 0x5565212cf8e0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5565212cfa08 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5565212cf920 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5565212b3bc8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5565212cf998 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5565212cf980 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565212cf940 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5565212b7920 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5565212cf9c0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5565212cf960 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b3c40 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b3ea8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5565212b3d98 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b3e10 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5565212bab48 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5565212bab28 <col:57> 'int' 0
| `-DeprecatedAttr 0x5565212b3f58 <col:75> "" ""
|-CXXMethodDecl 0x5565212b40e8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5565212b3fd8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b4050 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565212b4198 <col:74> "" ""
|-CXXMethodDecl 0x5565212b4328 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5565212b4218 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5565212b4290 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565212b43d8 <col:74> "" ""
|-CXXMethodDecl 0x5565212b4468 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5565212b4508 <col:42> "" ""
|-CXXMethodDecl 0x5565212b6d40 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5565212b6c20 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5565212b6ca0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5565212b6e10 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5565212b6ed0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5565212b6f70 <col:20>
| `-OptimizeNoneAttr 0x5565212b6fc8 <col:30>
|-CXXMethodDecl 0x5565212b7010 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5565212b70d0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5565212b7190 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5565212b7250 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5565212b7310 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5565212b73d0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5565212b7490 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5565212b7550 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5565212b7690 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5565212b7600 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212cfb68 <col:58, line:512:5>
|   `-ReturnStmt 0x5565212cfb58 <line:511:9, col:53>
|     `-BinaryOperator 0x5565212cfb38 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5565212cfb08 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212cfa38 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b7600 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5565212cfb20 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5565212cfae8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5565212cfac8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5565212cfa98 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212cfa58 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212cfab0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212cfa78 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae6b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b77d8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5565212b7748 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212cfcb0 <col:58, line:516:5>
|   `-ReturnStmt 0x5565212cfca0 <line:515:9, col:53>
|     `-BinaryOperator 0x5565212cfc80 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5565212cfc50 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212cfb80 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b7748 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5565212cfc68 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5565212cfc30 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5565212cfc10 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5565212cfbe0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212cfba0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212cfbf8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212cfbc0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae590 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b7920 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5565212b7890 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212cfdf8 <col:58, line:520:5>
|   `-ReturnStmt 0x5565212cfde8 <line:519:9, col:53>
|     `-BinaryOperator 0x5565212cfdc8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5565212cfd98 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212cfcc8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b7890 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5565212cfdb0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5565212cfd78 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5565212cfd58 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5565212cfd28 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212cfce8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae3e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212cfd40 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212cfd08 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b7a68 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5565212b79d8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212cff40 <col:60, line:524:5>
|   `-ReturnStmt 0x5565212cff30 <line:523:9, col:55>
|     `-BinaryOperator 0x5565212cff10 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5565212cfee0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212cfe10 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b79d8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5565212cfef8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5565212cfec0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5565212cfea0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5565212cfe70 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212cfe30 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212cfe88 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212cfe50 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae6b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b7bb0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5565212b7b20 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212d0088 <col:60, line:528:5>
|   `-ReturnStmt 0x5565212d0078 <line:527:9, col:55>
|     `-BinaryOperator 0x5565212d0058 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5565212d0028 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212cff58 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b7b20 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5565212d0040 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5565212d0008 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5565212cffe8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5565212cffb8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212cff78 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212cffd0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212cff98 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae590 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5565212b7cf8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5565212b7c68 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212d01d0 <col:60, line:532:5>
|   `-ReturnStmt 0x5565212d01c0 <line:531:9, col:55>
|     `-BinaryOperator 0x5565212d01a0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5565212d0170 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212d00a0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b7c68 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5565212d0188 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5565212d0150 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5565212d0130 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5565212d0100 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5565212d00c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae3e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5565212d0118 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5565212d00e0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5565212ae740 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5565212b7da0 prev 0x5565212aebe0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565212b7e98 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5565212b7f38 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5565212bed00 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5565212bf0e8 <col:11>
| |-CXXConstructorDecl 0x5565212bede0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5565212beec8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5565212bf830 <col:11>
| |-CXXConstructorDecl 0x5565212bef68 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5565212bf078 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5565212c1088 <col:11>
| |-CXXDestructorDecl 0x5565212c0398 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x556520fc6f48 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556520fc7058 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x556520fc7920 <col:11>
| |   `-ReturnStmt 0x556520fc7910 <col:11>
| |     `-UnaryOperator 0x556520fc78f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x556520fc78e8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x556520fc70c8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x556520fc70c8
|   `-ParmVarDecl 0x556520fc71d8 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x5565212b7fa0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5565212b80a0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5565212b82a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212b8080 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5565212b8060 <col:21> 'int' 0
| |-EnumConstantDecl 0x5565212b8130 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5565212b82b8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212b8110 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5565212b80f0 <col:23> 'int' 1
| |-EnumConstantDecl 0x5565212b81c0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5565212b82d0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565212b81a0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5565212b8180 <col:23> 'int' 2
| `-EnumConstantDecl 0x5565212b8250 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5565212b82e8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565212b8230 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5565212b8210 <col:27> 'int' 3
|-CXXMethodDecl 0x5565212b8328 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5565212b83f0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5565212b85f8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5565212b84a0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5565212b8520 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5565212bab60 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5565212b8808 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5565212b86b8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5565212b8730 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5565212b88d8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5565212b8998 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5565212b8b08 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5565212b8a48 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5565212b8bd0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5565212b8c90 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5565212b8d50 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5565212b8e10 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5565212b8eb0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5565212b8ee8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5565212b8f58 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5565212d01e8 <col:27, line:684:5>
|-CXXMethodDecl 0x5565212b9018 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5565212d01f8 <col:27, line:696:5>
|-CXXMethodDecl 0x5565212b9218 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5565212b90c8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5565212b9140 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212d0380 <col:66, line:700:5>
|   `-ReturnStmt 0x5565212d0370 <line:699:9, col:31>
|     `-CallExpr 0x5565212d0310 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5565212d02f8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565212d02a8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55652113b5c8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5565212d0340 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5565212d0268 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5565212b90c8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5565212d0358 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5565212d0288 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b9140 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565212b9588 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5565212b92d8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5565212b9350 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5565212b93c8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5565212b9440 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5565212d06d0 <col:64, line:707:5>
|   |-DeclStmt 0x5565212d0410 <line:704:9, col:24>
|   | `-VarDecl 0x5565212d03a8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5565212d0620 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5565212d0428 <col:9> 'int32_t':'int' lvalue ParmVar 0x5565212b9350 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5565212d0608 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5565212d05a0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5565212d0588 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565212d0508 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x556521140898 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5565212d05d8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5565212d04a8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5565212b93c8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5565212d05f0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5565212d04c8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5565212b9440 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5565212d04e8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5565212d03a8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5565212d06b0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5565212d0640 <col:9> 'int32_t':'int' lvalue ParmVar 0x5565212b92d8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5565212d0698 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5565212d0680 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5565212d0660 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5565212d03a8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5565212b9828 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5565212b9658 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5565212b96d0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5565212b9748 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5565212b9ac8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5565212b98f0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5565212b9968 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5565212b99e0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5565212b9c58 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5565212b9b90 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5565212b9e58 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5565212b9d10 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5565212b9d88 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5565212ba128 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5565212ba068 parent 0x556520dbd488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5565212b9f18 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5565212b9f90 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5565212ba348 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5565212ba288 parent 0x556520dbd488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5565212ba178 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5565212ba1f0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5565212ba510 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5565212ba458 parent 0x556520dbd488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5565212ba398 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5565212ba798 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5565212ba6d8 parent 0x556520dbd488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5565212ba588 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5565212ba600 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5565212ba9b8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5565212ba8f8 parent 0x556520dbd488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5565212ba7e8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5565212ba860 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5565212c0240 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5565212c0328 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212c0d98 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5565212c0d50 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5565212b8ee8
| |     `-DeclRefExpr 0x5565212c0d30 <col:7> 'const Timestamp' lvalue ParmVar 0x5565212c0328 '' 'const Timestamp &'
| `-CompoundStmt 0x5565212c0df8 <col:7>
|-CXXConstructorDecl 0x5565212c04a8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565212c05b8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5565212b8ee8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5565212c1098 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5565212c1040 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5565212b8ee8
| |     `-CXXStaticCastExpr 0x5565212c1010 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5565212c0fe0 <col:7> 'Timestamp' lvalue ParmVar 0x5565212c05b8 '' 'Timestamp &&'
| `-CompoundStmt 0x5565212c10f8 <col:7>
|-CXXDestructorDecl 0x5565212c0668 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556520fc6d98 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x556520fc6ea8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x556520fc7998 <col:7>
|   |-CXXMemberCallExpr 0x556520fc7938 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x556520fc7878 <col:7> '<bound member function type>' .operator= 0x556520fc6f48
|   | | `-MemberExpr 0x556520fc7788 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5565212b8ee8
|   | |   `-CXXThisExpr 0x556520fc7778 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x556520fc7848 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5565212b8ee8
|   |   `-DeclRefExpr 0x556520fc7828 <col:7> 'const Timestamp' lvalue ParmVar 0x556520fc6ea8 '' 'const Timestamp &'
|   `-ReturnStmt 0x556520fc7988 <col:7>
|     `-UnaryOperator 0x556520fc7970 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556520fc7960 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x556520fc7248 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x556520fc7248
  `-ParmVarDecl 0x556520fc7358 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213ecd68 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565213ece88 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x5565213ecf18 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x5565213ed110 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5565213ecf50 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5565213ecfc8 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5565213ed040 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5565213ed1e0 <col:79> 'const ArgContext' lvalue Var 0x5565213cfc88 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5565213ed380 <col:91, line:1348:5>
|   `-ReturnStmt 0x5565213ed370 <line:1347:9, col:41>
|     `-CallExpr 0x5565213ed320 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x5565213ed308 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565213ed2c0 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5565213eccb0 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5565213ed248 <col:26> 'const String' lvalue ParmVar 0x5565213ecf50 'str' 'const String &'
|       |-UnaryOperator 0x5565213ed288 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5565213ed268 <col:32> 'String' lvalue ParmVar 0x5565213ecfc8 'result' 'String &'
|       `-ImplicitCastExpr 0x5565213ed358 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5565213ed2a0 <col:40> 'int' 0
|-CXXConstructorDecl 0x55652147db58 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55652147dc30 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55652147dd68 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x55652147dd68
| `-ParmVarDecl 0x55652147de78 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x55652147df18 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55652147e028 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x55652147ec80 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565213ed3c0 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5565213ed618 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55652147da68 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55652147e098 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x55652147e098
| `-ParmVarDecl 0x55652147e1a8 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x55652147e248 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55652147e358 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x55652147ec90 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55652147ec60 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x55652147ec30 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x55652147ec00 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x55652147e358 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x55652147ed00 <col:19>
`-CXXDestructorDecl 0x55652147e3f8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55652147f9c8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55652147fdc8 prev 0x55652147f9c8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55652147ffc0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55652147fec8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x556521480f08 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x556521480140 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x556521480ec8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x556521480e88 <col:20> 'String *' lvalue ParmVar 0x55652147fec8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5565214801a0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x556521480f68 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5565213cfab0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x556521480080 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x5565213a9d30 Slot::store 'void ()' ]
| `-CompoundStmt 0x556521485788 <col:22, line:857:9>
|   `-CallExpr 0x556521481660 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x556521481648 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5565214815c8 <col:13> 'void (String &, const String &)' lvalue Function 0x5565214814a8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55652107f528 'assign_consume')
|     |-UnaryOperator 0x5565214810f8 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5565214810e0 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5565214810b0 <col:29> 'String *' lvalue ->_ptr 0x556521480140
|     |     `-CXXThisExpr 0x5565214810a0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x556521485770 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x556521481120 <col:35> 'String':'String' lvalue ->_slot 0x5565214801a0
|         `-CXXThisExpr 0x556521481110 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x556521480140 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5565214801a0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x556521480218 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x556521480218
| `-ParmVarDecl 0x556521480328 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5565214803c8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5565214803c8
| `-ParmVarDecl 0x5565214804d8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x556521480578 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x556521480578
| `-ParmVarDecl 0x556521480688 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5565214806f8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5565214806f8
| `-ParmVarDecl 0x556521480808 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x556521480890 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x5565213a9c30 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x556521480fd0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213dae50 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565213daf68 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5565213daff8 <col:16, col:22> col:16 public
|-EnumDecl 0x5565213db020 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5565213db120 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5565213db370 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213db100 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5565213db0e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5565213db1b0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5565213db388 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213db190 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5565213db170 <col:24> 'int' 22
| |-EnumConstantDecl 0x5565213db240 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5565213db3a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213db220 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5565213db200 <col:24> 'int' 34
| |-EnumConstantDecl 0x5565213db2d0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5565213db3b8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565213db2b0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5565213db290 <col:25> 'int' 95
| `-EnumConstantDecl 0x5565213db320 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5565213dcd30 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565213dd168 <col:7>
|-CXXConstructorDecl 0x5565213dce38 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5565213dce38
| `-ParmVarDecl 0x5565213dcf48 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5565213dcfe8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565213dd0f8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55652148ad20 <col:7>
`-CXXDestructorDecl 0x5565213df278 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565213db3e8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5565213db548 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5565213db5d8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5565213db610 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x556520f13040 'uint32_t' sugar
|   |-Typedef 0x556520e264c8 'uint32_t'
|   `-TypedefType 0x556520dff5a0 '__uint32_t' sugar
|     |-Typedef 0x556520dff198 '__uint32_t'
|     `-BuiltinType 0x556520dbd620 'unsigned int'
|-CXXConstructorDecl 0x5565213db758 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5565213db680 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5565213dcc38 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5565213dd178 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5565213dc4f0 'base' 'int'
| | `-ImplicitCastExpr 0x5565213dccd8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5565213dcc98 <col:16> 'int' lvalue ParmVar 0x5565213db680 'b' 'int'
| `-CompoundStmt 0x5565213dd1e8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5565213dbc50 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5565213db820 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5565213db8a0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5565213db918 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5565213db998 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5565213dba58 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5565213dbad8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5565213dc0a8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5565213dbd20 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5565213dc008 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5565213dbdc8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5565213dbe68 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5565213dbee0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5565213dcc58 <col:82> 'const ArgContext' lvalue Var 0x5565213cfc88 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5565213de128 <col:94, line:1067:5>
| |   |-DeclStmt 0x5565213dd378 <line:1054:9, col:64>
| |   | `-VarDecl 0x5565213dd208 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5565213dd330 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5565213dd598 <line:1055:9, col:91>
| |   | `-VarDecl 0x5565213dd3a8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5565213dd570 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5565213dd550 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5565213dd500 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5565213dd4e0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5565213dd488 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5565213dd438 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5565213dd468 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5565213dd4c8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5565213dd4a8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5565213dd530 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5565213dd6f8 <line:1056:9, col:27>
| |   | `-VarDecl 0x5565213dd690 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5565213ddb40 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5565213dda70 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5565213dd9f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5565212dd028 0x556521126608 0x5565211262e0 0x556521116ab0 0x556521116760 0x556521116050 0x5565210e89c0 0x556521075e90
| |   | | |-CallExpr 0x5565213dd930 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5565213dd720 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5565213dd7d0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5565213dd7a0 <col:19, col:23> '<bound member function type>' .begin 0x556521105cb8
| |   | | | |   `-DeclRefExpr 0x5565213dd780 <col:19> 'const String' lvalue ParmVar 0x5565213dbdc8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5565213dd840 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5565213dd810 <col:32, col:36> '<bound member function type>' .end 0x556521105ed0
| |   | | | |   `-DeclRefExpr 0x5565213dd7f0 <col:32> 'const String' lvalue ParmVar 0x5565213dbdc8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5565213dd860 <col:43> 'const bool' lvalue Var 0x5565213dd208 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5565213dd8c8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5565213dd8a8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5565213dd8f0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5565213dd690 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5565213dd910 <col:73> 'const int' lvalue Var 0x5565213dd3a8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5565213dd9d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5565213dd9a0 <col:16, col:20> '<bound member function type>' .end 0x556521105ed0
| |   | |     `-DeclRefExpr 0x5565213dd980 <col:16> 'const String' lvalue ParmVar 0x5565213dbdc8 'str' 'const String &'
| |   | `-BinaryOperator 0x5565213ddb20 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5565213ddab8 <col:13> 'int' lvalue ->status 0x5565213dc558
| |   |   | `-CXXThisExpr 0x5565213ddaa8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5565213ddb08 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5565213ddae8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db1b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5565213ddda8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5565213ddc90 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5565213ddc78 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5565213ddc60 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5565213ddb68 <col:13> 'int' lvalue ->status 0x5565213dc558
| |   | | |     `-CXXThisExpr 0x5565213ddb58 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5565213ddc40 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5565213ddc10 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5565213ddbc0 <col:23> 'int' lvalue ->status 0x5565213dc558
| |   | |   |   `-CXXThisExpr 0x5565213ddb98 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5565213ddc28 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5565213ddbf0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5565213ddd88 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5565213ddd28 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5565213ddcd0 <col:13, col:18> '<bound member function type>' .error 0x5565212a08f0
| |   |   | | `-DeclRefExpr 0x5565213ddcb0 <col:13> 'const ArgContext' lvalue ParmVar 0x5565213dbee0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5565213ddd50 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5565213ddd00 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5565213ddd78 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5565213ddd68 <col:20> 'bool' false
| |   |-DeclStmt 0x5565213ddf78 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5565213ddf20 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5565213ddeb0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5565213de0d8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5565213ddf90 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5565210a9e58
| |   | |-DeclRefExpr 0x5565213ddfd8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5565213dd690 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5565213de0a8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5565213de020 <col:64> 'V' lvalue ParmVar 0x5565213dbe68 'result' 'V &'
| |   `-ReturnStmt 0x5565213de118 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5565213de108 <col:16> 'bool' true
| `-CXXMethodDecl 0x55652149e358 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55652149e130 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55652149e208 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55652149e270 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5565214a00f0 <col:94, line:1067:5>
|     |-DeclStmt 0x55652149eb68 <line:1054:9, col:64>
|     | `-VarDecl 0x55652149e988 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55652149eaf8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55652149eac8 <col:36, col:55> 'const bool' lvalue Var 0x556521099dc8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55652149ed48 <line:1055:9, col:91>
|     | `-VarDecl 0x55652149eb80 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55652149ecc8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55652149ecb0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55652149ec90 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55652149ec70 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55652149ec50 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55652149ec18 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55652149ebf8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5565213dd468 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55652149ec38 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5565213dd4a8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5565213dd530 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55652149eee0 <line:1056:9, col:27>
|     | `-VarDecl 0x55652149ee78 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55652149f368 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55652149f310 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55652149f1c8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55652149f198 <col:13> '<bound member function type>' ->parse 0x5565213dbc50
|     | | | | `-CXXThisExpr 0x55652149f188 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55652149f028 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55652149eff8 <col:19, col:23> '<bound member function type>' .begin 0x556521105cb8
|     | | | |   `-DeclRefExpr 0x55652149efd8 <col:19> 'const String' lvalue ParmVar 0x55652149e130 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55652149f098 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55652149f068 <col:32, col:36> '<bound member function type>' .end 0x556521105ed0
|     | | | |   `-DeclRefExpr 0x55652149f048 <col:32> 'const String' lvalue ParmVar 0x55652149e130 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55652149f238 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55652149f218 <col:43> 'const bool' lvalue Var 0x55652149e988 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55652149f120 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55652149f108 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55652149f0e8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55652149f250 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55652149f148 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55652149ee78 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55652149f288 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55652149f268 <col:73> 'const int' lvalue Var 0x55652149eb80 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55652149f2f0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55652149f2c0 <col:16, col:20> '<bound member function type>' .end 0x556521105ed0
|     | |     `-DeclRefExpr 0x55652149f2a0 <col:16> 'const String' lvalue ParmVar 0x55652149e130 'str' 'const String &'
|     | `-BinaryOperator 0x55652149f348 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5565213ddab8 <col:13> 'int' lvalue ->status 0x5565213dc558
|     |   | `-CXXThisExpr 0x5565213ddaa8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55652149f330 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5565213ddae8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db1b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55652149f4e0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55652149f400 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55652149f3e8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55652149f3d0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5565213ddb68 <col:13> 'int' lvalue ->status 0x5565213dc558
|     | | |     `-CXXThisExpr 0x5565213ddb58 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55652149f3b0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55652149f380 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5565213ddbc0 <col:23> 'int' lvalue ->status 0x5565213dc558
|     | |   |   `-CXXThisExpr 0x5565213ddb98 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55652149f398 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5565213ddbf0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55652149f4c0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55652149f470 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55652149f440 <col:13, col:18> '<bound member function type>' .error 0x5565212a08f0
|     |   | | `-DeclRefExpr 0x55652149f420 <col:13> 'const ArgContext' lvalue ParmVar 0x55652149e270 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55652149f498 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5565213ddd00 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55652149f4b0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5565213ddd68 <col:20> 'bool' false
|     |-DeclStmt 0x55652149fa28 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55652149f9d0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55652149f980 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55652149f960 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55652149f8f0 'type'
|     |       `-ElaboratedType 0x55652149f8a0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55652149f880 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x556521099f20 'unsigned_type'
|     |           `-BuiltinType 0x556520dbd620 'unsigned int'
|     |-CallExpr 0x5565214a0080 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5565214a0068 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55652149ffe8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55652149fec8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5565210a9e58 'extract_integer')
|     | |-ImplicitCastExpr 0x5565214a00c8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5565214a00b0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55652149fa88 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55652149ee78 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55652149fb58 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55652149fb08 <col:64> 'int':'int' lvalue ParmVar 0x55652149e208 'result' 'int &'
|     `-ReturnStmt 0x5565214a00e0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5565213de108 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5565213dc468 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5565213dc118 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5565213dc3c8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5565213dc1c8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5565213dc268 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5565213dc2e0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5565213dcc78 <col:71> 'const ArgContext' lvalue Var 0x5565213cfc88 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5565213de898 <col:83, line:1083:5>
| |   |-DeclStmt 0x5565213de1f0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5565213de188 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5565213de870 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5565213de480 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5565213de308 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5565213de2d0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5565213de218 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5565213de270 <col:31> 'const String' lvalue ParmVar 0x5565213dc1c8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5565213de290 <col:36> 'V' lvalue Var 0x5565213de188 'x' 'V'
| |     | |   `-DeclRefExpr 0x5565213de2b0 <col:39> 'const ArgContext' lvalue ParmVar 0x5565213dc2e0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5565213de460 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5565213de440 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5565213de428 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5565213de410 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5565213de330 <col:17> 'int' lvalue ->status 0x5565213dc558
| |     |     |     `-CXXThisExpr 0x5565213de320 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5565213de3f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5565213de3c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5565213de370 <col:27> 'int' lvalue ->status 0x5565213dc558
| |     |       |   `-CXXThisExpr 0x5565213de360 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5565213de3d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5565213de3a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5565213de4b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5565213de4a0 <col:20> 'bool' false
| |     `-IfStmt 0x5565213de848 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5565213de550 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5565213de520 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5565213de4d0 <col:18> 'int' lvalue ->status 0x5565213dc558
| |       | |   `-CXXThisExpr 0x5565213de4c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5565213de538 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5565213de500 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5565213de788 <col:42, line:1079:9>
| |       | |-CallExpr 0x5565213de730 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5565213de580 <line:1076:13> '<bound member function type>' ->range_error 0x5565213dcb68
| |       | | | `-CXXThisExpr 0x5565213de570 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5565213de5b0 <col:25> 'const ArgContext' lvalue ParmVar 0x5565213dc2e0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5565213de690 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5565213de708 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5565213de6e8 <col:43> 'V' lvalue Var 0x5565213de188 'x' 'V'
| |       | `-ReturnStmt 0x5565213de778 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5565213de768 <col:20> 'bool' false
| |       `-CompoundStmt 0x5565213de828 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5565213de7e8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5565213de7a8 <col:13> 'V' lvalue ParmVar 0x5565213dc268 'result' 'V &'
| |         | `-DeclRefExpr 0x5565213de7c8 <col:22> 'V' lvalue Var 0x5565213de188 'x' 'V'
| |         `-ReturnStmt 0x5565213de818 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5565213de808 <col:20> 'bool' true
| `-CXXMethodDecl 0x55652149dd18 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55652149daf0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55652149dbc8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55652149dc30 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55652149e968 <col:83, line:1083:5>
|     |-DeclStmt 0x55652149dfa0 <line:1071:9, col:12>
|     | `-VarDecl 0x55652149df38 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55652149e940 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55652149e5d0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55652149e4f8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55652149e4c0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55652149e478 <col:14> '<bound member function type>' ->parse_saturating 0x55652149e358
|       | |   | `-CXXThisExpr 0x55652149e468 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55652149e010 <col:31> 'const String' lvalue ParmVar 0x55652149daf0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55652149e030 <col:36> 'int':'int' lvalue Var 0x55652149df38 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55652149e050 <col:39> 'const ArgContext' lvalue ParmVar 0x55652149dc30 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55652149e5b0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55652149e590 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55652149e578 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55652149e560 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5565213de330 <col:17> 'int' lvalue ->status 0x5565213dc558
|       |     |     `-CXXThisExpr 0x5565213de320 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55652149e540 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55652149e510 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5565213de370 <col:27> 'int' lvalue ->status 0x5565213dc558
|       |       |   `-CXXThisExpr 0x5565213de360 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55652149e528 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5565213de3a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55652149e5f0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5565213de4a0 <col:20> 'bool' false
|       `-IfStmt 0x55652149e918 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55652149e630 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55652149e600 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5565213de4d0 <col:18> 'int' lvalue ->status 0x5565213dc558
|         | |   `-CXXThisExpr 0x5565213de4c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55652149e618 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5565213de500 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5565213db240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55652149e850 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55652149e7c0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5565213de580 <line:1076:13> '<bound member function type>' ->range_error 0x5565213dcb68
|         | | | `-CXXThisExpr 0x5565213de570 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55652149e650 <col:25> 'const ArgContext' lvalue ParmVar 0x55652149dc30 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55652149e828 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55652149e7f8 <col:31, col:50> 'const bool' lvalue Var 0x556521099dc8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55652149e798 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55652149e780 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55652149e768 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55652149e748 <col:43> 'int':'int' lvalue Var 0x55652149df38 'x' 'int':'int'
|         | `-ReturnStmt 0x55652149e840 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5565213de768 <col:20> 'bool' false
|         `-CompoundStmt 0x55652149e8f8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55652149e8c8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55652149e870 <col:13> 'int':'int' lvalue ParmVar 0x55652149dbc8 'result' 'int &'
|           | `-ImplicitCastExpr 0x55652149e8b0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55652149e890 <col:22> 'int':'int' lvalue Var 0x55652149df38 'x' 'int':'int'
|           `-ReturnStmt 0x55652149e8e8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5565213de808 <col:20> 'bool' true
|-FieldDecl 0x5565213dc4f0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5565213dc558 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5565213dc5a8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5565213dc860 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5565213dc5e8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5565213dc668 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5565213dc6e0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5565213dc760 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5565213dcb68 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5565213dc930 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5565213dc9a8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5565213dca40 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5565213df0f8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5565213df0f8
| `-ParmVarDecl 0x5565213df208 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5565213df388 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565213df498 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55652148ad30 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55652148ad00 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55652148acd0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55652148aca0 <col:7> 'IntArg' lvalue ParmVar 0x5565213df498 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5565213dc4f0 'base' 'int'
| | `-ImplicitCastExpr 0x55652148ae28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55652148adf8 <col:7> 'int' xvalue .base 0x5565213dc4f0
| |     `-CXXStaticCastExpr 0x55652148adc8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55652148ad98 <col:7> 'IntArg' lvalue ParmVar 0x5565213df498 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5565213dc558 'status' 'int'
| | `-ImplicitCastExpr 0x55652148aef8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55652148aec8 <col:7> 'int' xvalue .status 0x5565213dc558
| |     `-CXXStaticCastExpr 0x55652148ae98 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55652148ae68 <col:7> 'IntArg' lvalue ParmVar 0x5565213df498 '' 'IntArg &&'
| `-CompoundStmt 0x55652148af50 <col:7>
`-CXXDestructorDecl 0x556521489e90 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565213e39c0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5565213e3c18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x556521489db8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55652148a330 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55652148a310 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55652148a3a0 <col:19>
|-CXXConstructorDecl 0x556521489f98 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x556521489f98
| `-ParmVarDecl 0x55652148a0a8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55652148a148 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55652148a258 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55652148af60 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55652148ac80 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55652148ac50 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55652148ac20 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55652148a258 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55652148afd0 <col:19>
`-CXXDestructorDecl 0x55652148a3e0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565213e9218 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5565213e9478 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5565214aaef8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5565214aaff8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x5565214aaff8
| `-ParmVarDecl 0x5565214ab108 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5565214ab1a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565214ab2b8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5565214abbf0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5565214abbc0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x5565214abb90 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x5565214abb60 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5565214ab2b8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x5565214abc60 <col:19>
`-CXXDestructorDecl 0x5565214ab358 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
