
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c3ea278 prev 0x55e33c3e1a18 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c3ea370 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e33c3ea400 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e33c3ea478 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e33c3ea538 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e33c3ea600 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e33c3ea778 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e33c3ea6b0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e33c3ea820 <col:24>
| `-OptimizeNoneAttr 0x55e33c3ea878 <col:34>
|-CXXMethodDecl 0x55e33c3ea8c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e33c3eab78 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e33c3ea970 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e33c3ea9e8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e33c3eaa68 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e33c3eac30 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e33c3eac68 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e33c3eacd0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e33c3ead58 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e33c3eb078 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e33c3eae10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e33c3eae88 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e33c3eaf00 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e33c3eaf80 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e33c3eb190 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e33c3f2b08 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e33c3f2b08
| `-ParmVarDecl 0x55e33c3f2c18 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e33c3f2cb8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e33c3f2cb8
| `-ParmVarDecl 0x55e33c3f2dc8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e33c4aeed0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c3dd290 prev 0x55e33c3dd010 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e33c3dd388 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e33c3dd418 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e33c3dd478 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e33c3dd568 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e33c3dd668 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e33c3dd838 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e33c3dd6e8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e33c3dd760 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e33c3dd9c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e33c3dd900 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e33c3dda70 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3ddba8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e33c3ddae0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e33c3ddd48 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e33c3ddc88 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e33c3ddee8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e33c3dde28 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e33c3ddf90 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e33c3de090 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e33c3de170 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3de070 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e33c3de050 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e33c3de120 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e33c3de188 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3de100 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e33c3de0e0 <col:44> 'int' 2
|-CXXMethodDecl 0x55e33c3de2d0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e33c3de1b8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e33c3de238 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e33c3de428 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e33c3de398 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e33c3de668 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e33c3de4e8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e33c3de560 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e33c3de718 <col:20>
| `-OptimizeNoneAttr 0x55e33c3de770 <col:30>
|-CXXMethodDecl 0x55e33c3de878 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e33c3de7b0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e33c3de920 <col:20>
| `-OptimizeNoneAttr 0x55e33c3de978 <col:30>
|-CXXMethodDecl 0x55e33c3de9c8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e33c3dea90 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e33c3deba8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e33c3dec30 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e33c3decb8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e33c3ded40 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55e33c3dedc8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e33c3dee58 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e33c3def18 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e33c3defa0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e33c3df028 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x55e33c3df0b0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e33c3df138 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e33c3df1c0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e33c3df250 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e33c3df310 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e33c3df3a0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e33c3df4f0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e33c3df458 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e33c3df680 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e33c3df5b0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e33c3df930 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e33c3df738 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e33c3df7b8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e33c3df838 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e33c3df9e8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e33c3dfaf0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e33c3dfd80 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3dfad0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e33c3dfab0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e33c3dfb80 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e33c3dfd98 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3dfb60 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e33c3dfb40 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e33c3dfc10 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e33c3dfdb0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3dfbf0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e33c3dfbd0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e33c3dfca0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e33c3dfdc8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3dfc80 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e33c3dfc60 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e33c3dfd30 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e33c3dfde0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3dfd10 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e33c3dfcf0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e33c3dfe20 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e33c3e0260 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e33c3e00d0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e33c3e0148 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3e0330 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e33c3e04b0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e33c3e03e0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3e06b8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e33c3e0568 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e33c3e05e0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3e07b8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e33c3e0858 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e33c3e0920 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e33c3e09b0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e33c3e0be0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3e0990 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e33c3e0970 <col:36> 'int' EnumConstant 0x55e33c3e0920 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e33c3e0a00 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e33c3e0a50 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e33c3e0aa0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e33c3e0af0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e33c3e0b40 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e33c3e0b90 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e33c3e0cc8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e33c3e0c08 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e33c3e0d90 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e33c3e0e50 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e33c3e0f10 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e33c3e0fd0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e33c3e10e8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e33c3e11b0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e33c3e1330 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e33c3e1260 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e33c3e1458 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e33c3e1658 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e33c3e1508 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e33c3e1588 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e33c3eefa8 <col:54, line:127:5>
|   |-ParenExpr 0x55e33c3eee58 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e33c3eee28 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3eeb18 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e33c3eeaf0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e33c3eead8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e33c3eeac0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e33c3eea90 <col:31> 'Router *' lvalue ->_router 0x55e33c3ec970
|   |   |         `-CXXThisExpr 0x55e33c3eea80 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e33c3eeb78 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3eeb58 <col:48> 'int' 0
|   |   `-CallExpr 0x55e33c3eed88 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3eed70 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3eed50 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3eedc8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3eebe8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e33c3eede0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3eec08 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e33c3eedf8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3eec40 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e33c3eee10 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3eed38 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3eed20 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3eecd8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e33c3eeef0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e33c3eee88 <col:9> 'Router *' lvalue ->_router 0x55e33c3ec970
|   | | `-CXXThisExpr 0x55e33c3eee78 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e33c3eeed8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e33c3eeeb8 <col:19> 'Router *' lvalue ParmVar 0x55e33c3e1508 'r' 'Router *'
|   `-BinaryOperator 0x55e33c3eef88 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e33c3eef20 <col:9> 'int' lvalue ->_eindex 0x55e33c3ec9d8
|     | `-CXXThisExpr 0x55e33c3eef10 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e33c3eef70 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3eef50 <col:19> 'int' lvalue ParmVar 0x55e33c3e1588 'eindex' 'int'
|-CXXMethodDecl 0x55e33c3e17e0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e33c3e1718 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e33c3e18b0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e33c3e1978 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e33c3e1a18 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e33c3e1c68 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e33c3e1ae0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e33c3e1b60 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e33c3e1d18 <col:20>
| `-OptimizeNoneAttr 0x55e33c3e1d70 <col:30>
|-CXXMethodDecl 0x55e33c3e1e78 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e33c3e1db0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e33c3e1f20 <col:20>
| `-OptimizeNoneAttr 0x55e33c3e1f78 <col:30>
|-CXXMethodDecl 0x55e33c3e2048 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e33c3e1fb8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e33c3e20f0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3e2148 <col:30>
|-CXXMethodDecl 0x55e33c3e22d8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e33c3e2180 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e33c3e2200 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e33c3e2468 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e33c3e23a0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e33c3e25b8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e33c3e2528 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e33c3e2708 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e33c3e2678 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e33c3e2858 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e33c3e27c8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e33c3e2b18 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e33c3e2910 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e33c3e2990 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e33c3e2a38 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e33c3e2bf0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e33c3e2cb0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e33c3e2f80 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e33c3e2e30 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e33c3e2ea8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3e30a8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e33c3e3280 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e33c3e3160 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e33c3e31e0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e33c3e3468 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e33c3e3348 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e33c3e33c8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e33c3e37d8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e33c3e3528 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e33c3e35a0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e33c3e3620 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e33c3ee590 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c3ee570 <col:106> 'int' 0
| `-ParmVarDecl 0x55e33c3e3698 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e33c3ee5c8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e33c3ee5a8 <col:126> 'int' 0
|-CXXMethodDecl 0x55e33c3e3b78 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e33c3e38a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e33c3e3940 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e33c3e39c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e33c3e3a38 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e33c3ee600 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e33c3ee5e0 <col:114> 'int' 0
|-CXXMethodDecl 0x55e33c3e3f08 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e33c3e3c50 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e33c3e3cc8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e33c3e3d48 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e33c3ee618 <col:96> 'int' 0
| `-ParmVarDecl 0x55e33c3e3dc0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e33c3ee658 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e33c3ee638 <col:116> 'int' 0
|-CXXMethodDecl 0x55e33c3e4288 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e33c3e3fd8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e33c3e4050 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3e40d0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e33c3ee690 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c3ee670 <col:109> 'int' 0
| `-ParmVarDecl 0x55e33c3e4148 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e33c3ee6c8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e33c3ee6a8 <col:129> 'int' 0
|-CXXMethodDecl 0x55e33c3e4608 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e33c3e4358 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e33c3e43d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3e4450 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e33c3e44c8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e33c3ee700 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e33c3ee6e0 <col:117> 'int' 0
|-CXXMethodDecl 0x55e33c3e4998 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e33c3e46e0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e4758 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3e47d8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e33c3ee718 <col:99> 'int' 0
| `-ParmVarDecl 0x55e33c3e4850 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e33c3ee758 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e33c3ee738 <col:119> 'int' 0
|-CXXMethodDecl 0x55e33c3e4db8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e33c3e4a68 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e33c3e4ae8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e33c3e4b60 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3e4be0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e33c3ee790 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c3ee770 <col:108> 'int' 0
| `-ParmVarDecl 0x55e33c3e4c60 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e33c3ee7c8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e33c3ee7a8 <col:141> 'int' 0
|-CXXMethodDecl 0x55e33c3e51d8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e33c3e4e90 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e33c3e4f10 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e33c3e4f88 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3e5008 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e33c3e5088 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e33c3ee7e0 <col:121> 'int' 0
|-CXXMethodDecl 0x55e33c3e5608 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e33c3e52b8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e33c3e5338 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e33c3e53b0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3e5430 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e33c3ee800 <col:98> 'int' 0
| `-ParmVarDecl 0x55e33c3e54b0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e33c3ee820 <col:123> 'int' 0
|-CXXMethodDecl 0x55e33c3e58d0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e33c3e56e0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e33c3e5760 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e33c3e57e0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e33c3ee840 <col:80> 'int' 0
|-EnumDecl 0x55e33c3e5988 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e33c3e5a90 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e33c3e5d20 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3e5a70 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e33c3e5a50 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e33c3e5b20 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e33c3e5d38 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3e5b00 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e33c3e5ae0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e33c3e5bb0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e33c3e5d50 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3e5b90 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e33c3e5b70 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e33c3e5c40 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e33c3e5d68 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3e5c20 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e33c3e5c00 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e33c3e5cd0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e33c3e5d80 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3e5cb0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e33c3e5c90 <col:34> 'int' 6
|-CXXMethodDecl 0x55e33c3e6038 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e33c3e5da8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e33c3e5e48 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e33c3e5ec8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e33c3e5f40 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e33c3ee8f8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e33c3ee8e0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e33c3ee8c8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e33c3ee8a8 <col:98, col:105> 'String' (CXXTemporary 0x55e33c3ee8a8)
|           `-CXXTemporaryObjectExpr 0x55e33c3ee870 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e33c3e62d8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e33c3e6108 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e33c3e6180 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e33c3e61f8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e33c3ee9a8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e33c3ee990 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e33c3ee978 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e33c3ee958 <col:94, col:101> 'String' (CXXTemporary 0x55e33c3ee958)
| |         `-CXXTemporaryObjectExpr 0x55e33c3ee920 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e33c3ef190 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e33c3ef108 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e33c3ef0d8 <col:9> '<bound member function type>' ->add_task_handlers 0x55e33c3e6038
|     | `-CXXThisExpr 0x55e33c3ef0c8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e33c3ef148 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e33c3ef048 <col:27> 'Task *' lvalue ParmVar 0x55e33c3e6108 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e33c3ef160 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e33c3ef068 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e33c3e6180 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e33c3ef178 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e33c3ef088 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e33c3e5cd0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e33c3ef0a8 <col:62> 'const String' lvalue ParmVar 0x55e33c3e61f8 'prefix' 'const String &'
|-CXXMethodDecl 0x55e33c3e64e8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e33c3e63a0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e33c3e6418 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e33c3eea58 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e33c3eea40 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e33c3eea28 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e33c3eea08 <col:70, col:77> 'String' (CXXTemporary 0x55e33c3eea08)
| |         `-CXXTemporaryObjectExpr 0x55e33c3ee9d0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e33c3ef368 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e33c3ef2e0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e33c3ef2b0 <col:9> '<bound member function type>' ->add_task_handlers 0x55e33c3e6038
|     | `-CXXThisExpr 0x55e33c3ef2a0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e33c3ef320 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e33c3ef220 <col:27> 'Task *' lvalue ParmVar 0x55e33c3e63a0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e33c3ef338 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e33c3ef240 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e33c3ef350 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e33c3ef260 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e33c3e5cd0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e33c3ef280 <col:57> 'const String' lvalue ParmVar 0x55e33c3e6418 'prefix' 'const String &'
|-CXXMethodDecl 0x55e33c3e67c8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e33c3e65b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e6630 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e66a8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e33c3e6a78 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e33c3e6898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e6918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e6998 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e33c3e6d68 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e33c3e6b48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e6bc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e6c40 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e33c3e7018 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e33c3e6e38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e6eb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e6f38 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e33c3e72c8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e33c3e70e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e7168 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e71e8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e33c3e7578 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e33c3e7398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e7418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e7490 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e33c3e7828 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e33c3e7648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e76c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e7748 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e33c3e7b38 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e33c3e7950 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e79d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e7a50 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e33c3e7e18 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e33c3e7c08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e7c88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e7d30 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e33c3e80f8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e33c3e7ee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e7f68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e8010 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e33c3e8360 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e33c3e81c8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e33c3e8248 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e33c3e82c0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e33c3e8608 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e33c3e8430 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e33c3e84b0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e33c3e8528 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e33c3e88b8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e33c3e86d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e8758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e87d8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e33c3e8b68 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e33c3e8988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e8a08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e8a80 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e33c3e8e18 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e33c3e8c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e8cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e8d30 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e33c3e90e8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e33c3e8ee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e8f68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e33c3e9008 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e33c3e9418 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e33c3e91b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e33c3e9238 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e33c3e92b0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e33c3e9328 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e33c3eea70 <col:93> 'bool' false
|-CXXMethodDecl 0x55e33c3e9600 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e33c3e94e8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e33c3e9568 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e33c3e97d8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e33c3e96c0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e33c3e9740 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e33c3e9ab8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e33c3e9898 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e33c3e9910 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e33c3e9990 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e33c3e9a08 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3e9da8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e33c3e9b88 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e33c3e9c00 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e33c3e9c80 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e33c3e9cf8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3e9fe0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e33c3e9e80 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e33c3e9f00 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e33c3ea1c8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e33c3ea0a8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e33c3ea128 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e33c3ea278 prev 0x55e33c3e1a18 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e33c3ea370 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e33c3ea400 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e33c3ea478 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e33c3ea538 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e33c3ea600 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e33c3ea778 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e33c3ea6b0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e33c3ea820 <col:24>
| | `-OptimizeNoneAttr 0x55e33c3ea878 <col:34>
| |-CXXMethodDecl 0x55e33c3ea8c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e33c3eab78 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e33c3ea970 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e33c3ea9e8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e33c3eaa68 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e33c3eac30 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e33c3eac68 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e33c3eacd0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e33c3ead58 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e33c3eb078 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e33c3eae10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e33c3eae88 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e33c3eaf00 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e33c3eaf80 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e33c3eb190 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e33c3f2b08 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e33c3f2b08
| | `-ParmVarDecl 0x55e33c3f2c18 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e33c3f2cb8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e33c3f2cb8
| | `-ParmVarDecl 0x55e33c3f2dc8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e33c4aeed0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e33c3eb208 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e33c3eb2a8 <col:38> "" ""
|-CXXMethodDecl 0x55e33c3eb338 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e33c3eb3d8 <col:44> "" ""
|-AccessSpecDecl 0x55e33c3eb448 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e33c3eb470 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e33c3eb570 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e33c3eb5c0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3eb550 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e33c3eb530 <col:27> 'int' 4
|-FieldDecl 0x55e33c3eb678 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e33c3eb828 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e33c3eb8e0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e33c3ec970 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e33c3ec9d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e33c3ecb28 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e33c3eca68 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e33c3eccd8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e33c3ecbe8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e33c3eceb8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e33c3ecd98 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e33c3ece18 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e33c3ed160 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c3ecf80 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e33c3ed000 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e33c3ed078 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e33c3ed218 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e33c3ed2e0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e33c3ed330 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e33c3ed380 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e33c3ed560 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e33c3ed410 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e33c3ed488 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3ed808 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e33c3ed628 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e33c3ed6a8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e33c3ed720 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3eda28 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e33c3ed8d8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e33c3ed958 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e33c3edd60 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e33c3edae8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e33c3edb68 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e33c3edbe0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e33c3edc60 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e33c3edf48 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e33c3ede30 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e33c3edeb0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e33c3ee098 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e33c3ee008 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e33c3ee418 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e33c3ee158 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e33c3ee1d8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e33c3ee250 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e33c3ee2d0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e33c3ee530 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StaticPullSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _input
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c3f5c78 <../elements/standard/staticpullswitch.hh:24:1, line:40:1> line:24:7 class StaticPullSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e33c3f5dd8 <col:1, col:7> col:7 implicit referenced class StaticPullSwitch
|-FieldDecl 0x55e33c3f5e80 <line:26:3, col:7> col:7 _input 'int'
|-AccessSpecDecl 0x55e33c3f5ed0 <line:28:2, col:8> col:2 public
|-CXXConstructorDecl 0x55e33c3f5f60 <line:30:3, col:20> col:3 StaticPullSwitch 'void ()'
|-CXXMethodDecl 0x55e33c3f6060 <line:32:3, col:63> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55e33c3de9c8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e33c3f6e90 <col:34, col:63>
|   `-ReturnStmt 0x55e33c3f6e80 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e33c3f6e68 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e33c3f6e40 <col:43> 'const char [17]' lvalue "StaticPullSwitch"
|-CXXMethodDecl 0x55e33c3f6128 <line:33:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55e33c3dea90 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e33c3f6ef0 <col:34, col:50>
|   `-ReturnStmt 0x55e33c3f6ee0 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e33c3f6ec8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e33c3f6ea8 <col:43> 'const char [4]' lvalue "-/1"
|-CXXMethodDecl 0x55e33c3f61f0 <line:34:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55e33c3dee58 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55e33c3f6f50 <col:34, col:49>
|   `-ReturnStmt 0x55e33c3f6f40 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e33c3f6f28 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e33c3f6f08 <col:43> 'const char []' lvalue Var 0x55e33c3df028 'PULL' 'const char []'
|-CXXMethodDecl 0x55e33c3f64c0 <line:36:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e33c3e0260 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e33c3f6370 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55e33c3f63e8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55e33c3f6618 <line:38:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x55e33c3dd9c8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55e33c3f6588 <col:16> col:19 'int'
|-CXXConstructorDecl 0x55e33c3f66e8 <line:24:7> col:7 implicit StaticPullSwitch 'void (const StaticPullSwitch &)' inline default_delete noexcept-unevaluated 0x55e33c3f66e8
| `-ParmVarDecl 0x55e33c3f67f8 <col:7> col:7 'const StaticPullSwitch &'
|-CXXConstructorDecl 0x55e33c3f6898 <col:7> col:7 implicit StaticPullSwitch 'void (StaticPullSwitch &&)' inline default_delete noexcept-unevaluated 0x55e33c3f6898
| `-ParmVarDecl 0x55e33c3f69a8 <col:7> col:7 'StaticPullSwitch &&'
|-CXXMethodDecl 0x55e33c3f6a48 <col:7> col:7 implicit operator= 'StaticPullSwitch &(const StaticPullSwitch &)' inline default_delete noexcept-unevaluated 0x55e33c3f6a48
| `-ParmVarDecl 0x55e33c3f6b58 <col:7> col:7 'const StaticPullSwitch &'
|-CXXMethodDecl 0x55e33c3f6bc8 <col:7> col:7 implicit operator= 'StaticPullSwitch &(StaticPullSwitch &&)' inline default_delete noexcept-unevaluated 0x55e33c3f6bc8
| `-ParmVarDecl 0x55e33c3f6cd8 <col:7> col:7 'StaticPullSwitch &&'
`-CXXDestructorDecl 0x55e33c3f6d60 <col:7> col:7 implicit ~StaticPullSwitch 'void ()' inline default noexcept-unevaluated 0x55e33c3f6d60
  `-Overrides: [ 0x55e33c3dd568 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.StaticPullSwitch = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.StaticPullSwitch = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c1b1130 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e33c1b1248 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e33c1b12e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e33c1b1348 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e33c1b13a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e33c1b1458 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c1b1760 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c1b1878 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e33c1b1920 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e33c1b1988 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e33c1b1a18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e33c1b7ab0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e33c1b7ee8 <col:12>
|-CXXConstructorDecl 0x55e33c1b7bb8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e33c1b7cc8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e33c1b1920 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e33c1ba470 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e33c1ba440 <col:12> 'const char *const' lvalue .data 0x55e33c1b1920
| |     `-DeclRefExpr 0x55e33c1ba420 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1b7cc8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e33c1b1988 'length' 'int'
| | `-ImplicitCastExpr 0x55e33c1ba500 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e33c1ba4d0 <col:12> 'const int' lvalue .length 0x55e33c1b1988
| |     `-DeclRefExpr 0x55e33c1ba4b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1b7cc8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e33c1b1a18 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e33c1ba590 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e33c1ba560 <col:12> 'String::memo_t *const' lvalue .memo 0x55e33c1b1a18
| |     `-DeclRefExpr 0x55e33c1ba540 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1b7cc8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e33c1ba5e8 <col:12>
|-CXXConstructorDecl 0x55e33c1b7d68 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e33c1b7d68
| `-ParmVarDecl 0x55e33c1b7e78 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e33c1bd3d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e33c1c8de8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e33c1c8ef8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e33c1c9410 <col:12>
|   |-BinaryOperator 0x55e33c1c9228 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e33c1c91e0 <col:12> 'const char *' lvalue ->data 0x55e33c1b1920
|   | | `-CXXThisExpr 0x55e33c1c91d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e33c1c9210 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c1c91a0 <col:12> 'const char *const' lvalue .data 0x55e33c1b1920
|   |     `-DeclRefExpr 0x55e33c1c9180 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1c8ef8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e33c1c92f0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e33c1c92a8 <col:12> 'int' lvalue ->length 0x55e33c1b1988
|   | | `-CXXThisExpr 0x55e33c1c9298 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e33c1c92d8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c1c9268 <col:12> 'const int' lvalue .length 0x55e33c1b1988
|   |     `-DeclRefExpr 0x55e33c1c9248 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1c8ef8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e33c1c93b8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e33c1c9370 <col:12> 'String::memo_t *' lvalue ->memo 0x55e33c1b1a18
|   | | `-CXXThisExpr 0x55e33c1c9360 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e33c1c93a0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c1c9330 <col:12> 'String::memo_t *const' lvalue .memo 0x55e33c1b1a18
|   |     `-DeclRefExpr 0x55e33c1c9310 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1c8ef8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e33c1c9400 <col:12>
|     `-UnaryOperator 0x55e33c1c93e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c1c93d8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e33c1c8f68 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e33c1c8f68
  `-ParmVarDecl 0x55e33c1c9078 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c1a86a0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e33c1a87b8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e33c1a8848 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e33c1a8888 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e33be7ce00 'const char *'
|   `-QualType 0x55e33be7c351 'const char' const
|     `-BuiltinType 0x55e33be7c350 'char'
|-TypedefDecl 0x55e33c1a8910 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e33c1a88e0 'String::const_iterator' sugar
|   |-Typedef 0x55e33c1a8888 'const_iterator'
|   `-PointerType 0x55e33be7ce00 'const char *'
|     `-QualType 0x55e33be7c351 'const char' const
|       `-BuiltinType 0x55e33be7c350 'char'
|-TypedefDecl 0x55e33c1a8a80 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e33c1a89f0 'int (String::*)() const'
|   |-RecordType 0x55e33c1a8730 'String'
|   | `-CXXRecord 0x55e33c1a86a0 'String'
|   `-ParenType 0x55e33c1a8990 'int () const' sugar
|     `-FunctionProtoType 0x55e33c17c520 'int () const' const cdecl
|       `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c1a8ae8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e33bfd1100 'int64_t' sugar
|   |-Typedef 0x55e33bee52a0 'int64_t'
|   `-TypedefType 0x55e33bebe510 '__int64_t' sugar
|     |-Typedef 0x55e33bebe0e8 '__int64_t'
|     `-BuiltinType 0x55e33be7c3d0 'long'
|-TypedefDecl 0x55e33c1a8b50 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e33bfd1020 'uint64_t' sugar
|   |-Typedef 0x55e33bee5440 'uint64_t'
|   `-TypedefType 0x55e33bebe5a0 '__uint64_t' sugar
|     |-Typedef 0x55e33bebe158 '__uint64_t'
|     `-BuiltinType 0x55e33be7c470 'unsigned long'
|-TypedefDecl 0x55e33c1a8be0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e33c1a8bb0 'String::intmax_t' sugar
|   |-Typedef 0x55e33c1a8ae8 'intmax_t'
|   `-TypedefType 0x55e33bfd1100 'int64_t' sugar
|     |-Typedef 0x55e33bee52a0 'int64_t'
|     `-TypedefType 0x55e33bebe510 '__int64_t' sugar
|       |-Typedef 0x55e33bebe0e8 '__int64_t'
|       `-BuiltinType 0x55e33be7c3d0 'long'
|-TypedefDecl 0x55e33c1a8c70 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e33c1a8c40 'String::uintmax_t' sugar
|   |-Typedef 0x55e33c1a8b50 'uintmax_t'
|   `-TypedefType 0x55e33bfd1020 'uint64_t' sugar
|     |-Typedef 0x55e33bee5440 'uint64_t'
|     `-TypedefType 0x55e33bebe5a0 '__uint64_t' sugar
|       |-Typedef 0x55e33bebe158 '__uint64_t'
|       `-BuiltinType 0x55e33be7c470 'unsigned long'
|-CXXConstructorDecl 0x55e33c1a8d30 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e33c1a8ed8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e33c1a8e18 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e33c1a9088 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e33c1a8fc8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e33c1a91e0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e33c1a9150 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e33c1a93f8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e33c1a92a8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e33c1a9328 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e33c1a9618 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e33c1a94c8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e33c1a9548 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e33c1a9838 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e33c1a96e8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e33c1a9768 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e33c1a9a58 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e33c1a9908 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e33c1a9988 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e33c1a9be8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e33c1a9b20 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e33c1a9d68 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e33c1a9ca8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e33c1a9ef8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e33c1a9e30 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e33c1aa050 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e33c1a9fc0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e33c1aa1a8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e33c1aa118 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e33c1aa300 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e33c1aa270 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e33c1aa488 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e33c1aa3c8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e33c1aa618 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e33c1aa550 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e33c1aa7a8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e33c1aa6e0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e33c1aa938 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e33c1aa870 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e33c1aaa30 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e33c1aab58 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e33c1aacd8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e33c1aac10 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e33c1aae28 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e33c1aad98 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e33c1aaee0 <col:63> "" ""
|-CXXMethodDecl 0x55e33c1ab028 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e33c1aaf68 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e33c1ab238 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e33c1ab0e8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e33c1ab168 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e33c1ab458 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e33c1ab300 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e33c1ab380 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e33c1ab738 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e33c1ab518 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e33c1ab598 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e33c1b7580 <col:55> 'int' 10
| `-ParmVarDecl 0x55e33c1ab610 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e33c1b75a0 <col:76> 'bool' true
|-CXXMethodDecl 0x55e33c1aba18 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e33c1ab800 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e33c1ab880 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e33c1b75b0 <col:56> 'int' 10
| `-ParmVarDecl 0x55e33c1ab8f8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e33c1b75d0 <col:77> 'bool' true
|-CXXMethodDecl 0x55e33c1abb20 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e33c1abbe8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e33c1abcb0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e33c1abd50 <col:20>
| `-OptimizeNoneAttr 0x55e33c1abda8 <col:30>
|-CXXConversionDecl 0x55e33c1abe98 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e33c1abf68 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e33c1ac028 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e33c1ac118 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e33c1ac1d8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e33c1ac358 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e33c1ac290 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e33c1ac4a8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e33c1ac418 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e33c1ac598 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e33c1ac658 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e33c1ac8a8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e33c1ac710 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e33c1ac790 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e33c1acb08 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e33c1ac970 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e33c1ac9f0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e33c1acbd8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c1acde8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e33c1acc90 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e33c1acd10 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e33c1ad008 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e33c1aceb0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e33c1acf30 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e33c1ad198 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e33c1ad0d0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e33c1ad288 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e33c1ad3f8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e33c1ad338 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e33c1ad608 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e33c1ad4b8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e33c1ad538 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e33c1ad820 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e33c1ad6c8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e33c1ad740 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e33c1ad9b0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e33c1ad8e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e33c1adbd0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e33c1ada70 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e33c1adaf0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e33c1add20 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e33c1adc90 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e33c1adef8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e33c1adde0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e33c1ade60 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e33c1ae048 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e33c1adfb8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e33c1ae260 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e33c1ae100 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e33c1ae180 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e33c1b75e0 <col:39> 'int' 0
|-CXXMethodDecl 0x55e33c1ae480 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e33c1ae320 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e33c1ae3a0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e33c1b7600 <col:48> 'int' 0
|-CXXMethodDecl 0x55e33c1ae660 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e33c1ae540 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e33c1ae5c0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e33c1b7620 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e33c1ae730 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e33c1ae7f0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e33c1ae8b0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e33c1ae970 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e33c1aea30 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e33c1aebd8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e33c1aeae0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e33c1aed58 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e33c1aec90 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e33c1aef30 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e33c1aee18 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e33c1af0a8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e33c1aefe8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e33c1af1f0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e33c1af160 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e33c1af340 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e33c1af2b0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e33c1af518 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e33c1af400 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e33c1af480 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e33c1af6f8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e33c1af5e0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e33c1af660 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e33c1af848 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e33c1af7b8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e33c1afa58 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e33c1af908 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e33c1af988 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e33c1afbb8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e33c1afb20 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e33c1afd10 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e33c1afc78 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e33c1afdb8 <col:57> "" ""
|-CXXMethodDecl 0x55e33c1afec8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e33c1afe38 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e33c1b0018 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e33c1aff88 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e33c1b0198 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e33c1b00d0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e33c1b0260 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e33c1b0320 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e33c1b03e0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e33c1b0480 <col:49> "" ""
|-CXXMethodDecl 0x55e33c1b0510 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e33c1b05d0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e33c1b06c0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e33c1b0788 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e33c1b0848 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e33c1b0908 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e33c1b0a00 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e33c1b0ac8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e33c1b0b90 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e33c1b0d68 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e33c1b0c48 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e33c1b0cc8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e33c1b0f90 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e33c1b0e30 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e33c1b0eb0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e33c1b10a0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e33c1b1108 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e33c1b1130 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e33c1b1248 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e33c1b12e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e33c1b1348 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e33c1b13a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e33c1b1458 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e33c1b14c0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e33c1b16f8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e33c1b1748 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c1b16d8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e33c1b15e8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e33c1b1590 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e33c1b15d0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e33c1b15b0 <col:32> 'int' 8
|-CXXRecordDecl 0x55e33c1b1760 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e33c1b1878 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e33c1b1920 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e33c1b1988 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e33c1b1a18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e33c1b7ab0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e33c1b7ee8 <col:12>
| |-CXXConstructorDecl 0x55e33c1b7bb8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e33c1b7cc8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e33c1b1920 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e33c1ba470 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e33c1ba440 <col:12> 'const char *const' lvalue .data 0x55e33c1b1920
| | |     `-DeclRefExpr 0x55e33c1ba420 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1b7cc8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e33c1b1988 'length' 'int'
| | | `-ImplicitCastExpr 0x55e33c1ba500 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e33c1ba4d0 <col:12> 'const int' lvalue .length 0x55e33c1b1988
| | |     `-DeclRefExpr 0x55e33c1ba4b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1b7cc8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e33c1b1a18 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e33c1ba590 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e33c1ba560 <col:12> 'String::memo_t *const' lvalue .memo 0x55e33c1b1a18
| | |     `-DeclRefExpr 0x55e33c1ba540 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1b7cc8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e33c1ba5e8 <col:12>
| |-CXXConstructorDecl 0x55e33c1b7d68 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e33c1b7d68
| | `-ParmVarDecl 0x55e33c1b7e78 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e33c1bd3d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e33c1c8de8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e33c1c8ef8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e33c1c9410 <col:12>
| |   |-BinaryOperator 0x55e33c1c9228 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e33c1c91e0 <col:12> 'const char *' lvalue ->data 0x55e33c1b1920
| |   | | `-CXXThisExpr 0x55e33c1c91d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e33c1c9210 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e33c1c91a0 <col:12> 'const char *const' lvalue .data 0x55e33c1b1920
| |   |     `-DeclRefExpr 0x55e33c1c9180 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1c8ef8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e33c1c92f0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e33c1c92a8 <col:12> 'int' lvalue ->length 0x55e33c1b1988
| |   | | `-CXXThisExpr 0x55e33c1c9298 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e33c1c92d8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e33c1c9268 <col:12> 'const int' lvalue .length 0x55e33c1b1988
| |   |     `-DeclRefExpr 0x55e33c1c9248 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1c8ef8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e33c1c93b8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e33c1c9370 <col:12> 'String::memo_t *' lvalue ->memo 0x55e33c1b1a18
| |   | | `-CXXThisExpr 0x55e33c1c9360 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e33c1c93a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e33c1c9330 <col:12> 'String::memo_t *const' lvalue .memo 0x55e33c1b1a18
| |   |     `-DeclRefExpr 0x55e33c1c9310 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e33c1c8ef8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e33c1c9400 <col:12>
| |     `-UnaryOperator 0x55e33c1c93e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e33c1c93d8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e33c1c8f68 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e33c1c8f68
|   `-ParmVarDecl 0x55e33c1c9078 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e33c1b1a90 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e33c1b1cd8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e33c1b1af8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e33c1b1b78 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e33c1b1bf0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e33c1b7a70 <col:79, line:261:5>
|   |-BinaryOperator 0x55e33c1b76e8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e33c1b7680 <col:2, col:5> 'const char *' lvalue .data 0x55e33c1b1920
|   | | `-MemberExpr 0x55e33c1b7650 <col:2> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|   | |   `-CXXThisExpr 0x55e33c1b7640 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e33c1b76d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e33c1b76b0 <col:12> 'const char *' lvalue ParmVar 0x55e33c1b1af8 'data' 'const char *'
|   |-BinaryOperator 0x55e33c1b77b0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e33c1b7748 <col:2, col:5> 'int' lvalue .length 0x55e33c1b1988
|   | | `-MemberExpr 0x55e33c1b7718 <col:2> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|   | |   `-CXXThisExpr 0x55e33c1b7708 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e33c1b7798 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e33c1b7778 <col:14> 'int' lvalue ParmVar 0x55e33c1b1b78 'length' 'int'
|   `-IfStmt 0x55e33c1b7a58 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e33c1b78d0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e33c1b78b8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e33c1b7898 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e33c1b7878 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e33c1b7810 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|     |       | `-MemberExpr 0x55e33c1b77e0 <col:7> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|     |       |   `-CXXThisExpr 0x55e33c1b77d0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e33c1b7860 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e33c1b7840 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e33c1b1bf0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e33c1b7a30 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e33c1b7a18 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e33c1b7920 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e33c1a0708 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e33c1b7988 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e33c1b12e8
|         `-ImplicitCastExpr 0x55e33c1b7970 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e33c1b7950 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e33c1b1bf0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e33c1b1f88 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e33c1b1da8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e33c1b1e28 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e33c1b1ea0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e33c1b1a90 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e33c1b7ef8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e33c1b8088 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e33c1b7ff0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e33c1b7f60 <col:2> '<bound member function type>' ->assign_memo 0x55e33c1b1cd8
|     | `-ImplicitCastExpr 0x55e33c1b8028 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e33c1b7f50 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e33c1b8040 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e33c1b7f90 <col:14> 'const char *' lvalue ParmVar 0x55e33c1b1da8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e33c1b8058 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e33c1b7fb0 <col:20> 'int' lvalue ParmVar 0x55e33c1b1e28 'length' 'int'
|     `-ImplicitCastExpr 0x55e33c1b8070 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c1b7fd0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e33c1b1ea0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e33c1b2118 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e33c1b2058 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e33c1b82e0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e33c1b8260 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e33c1b80b0 <col:2> '<bound member function type>' ->assign_memo 0x55e33c1b1cd8
|     | `-CXXThisExpr 0x55e33c1b80a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e33c1b8298 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e33c1b8130 <col:14, col:19> 'const char *' lvalue .data 0x55e33c1b1920
|     |   `-MemberExpr 0x55e33c1b8100 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e33c1b1a90
|     |     `-DeclRefExpr 0x55e33c1b80e0 <col:14> 'const String' lvalue ParmVar 0x55e33c1b2058 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e33c1b82b0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e33c1b81b0 <col:25, col:30> 'int' lvalue .length 0x55e33c1b1988
|     |   `-MemberExpr 0x55e33c1b8180 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e33c1b1a90
|     |     `-DeclRefExpr 0x55e33c1b8160 <col:25> 'const String' lvalue ParmVar 0x55e33c1b2058 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e33c1b82c8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e33c1b8230 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|         `-MemberExpr 0x55e33c1b8200 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e33c1b1a90
|           `-DeclRefExpr 0x55e33c1b81e0 <col:38> 'const String' lvalue ParmVar 0x55e33c1b2058 'x' 'const String &'
|-CXXMethodDecl 0x55e33c1b21e0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e33c1b8ca0 <col:31, line:278:5>
|   `-IfStmt 0x55e33c1b8c88 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e33c1b8380 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e33c1b8368 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e33c1b8338 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|     |     `-MemberExpr 0x55e33c1b8308 <col:6> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|     |       `-CXXThisExpr 0x55e33c1b82f8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e33c1b8c60 <col:15, line:277:2>
|       |-ParenExpr 0x55e33c1b8830 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e33c1b8800 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e33c1b8490 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e33c1b8478 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e33c1b8460 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e33c1b8420 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e33c1b12e8
|       |   |       `-ImplicitCastExpr 0x55e33c1b8408 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e33c1b83d8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|       |   |           `-MemberExpr 0x55e33c1b83a8 <col:27> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|       |   |             `-CXXThisExpr 0x55e33c1b8398 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e33c1b84f0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e33c1b84d0 <col:54> 'int' 0
|       |   `-CallExpr 0x55e33c1b8760 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e33c1b8748 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e33c1b86c8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e33c1b87a0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e33c1b85d8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e33c1b87b8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e33c1b8608 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e33c1b87d0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e33c1b8640 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e33c1b87e8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e33c1b86b0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e33c1b8698 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e33c1b8660 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e33c1b8b80 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e33c1b8a40 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e33c1b8a28 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e33c1b89a0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e33c1a1b50 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e33c1b8970 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e33c1b12e8
|       | |   `-ImplicitCastExpr 0x55e33c1b8958 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e33c1b8928 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|       | |       `-MemberExpr 0x55e33c1b88f8 <col:40> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|       | |         `-CXXThisExpr 0x55e33c1b88e8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e33c1b8b40 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e33c1b8b28 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e33c1b8a68 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e33c1b69c0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e33c1b8b68 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e33c1b8ac8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|       |       `-MemberExpr 0x55e33c1b8a98 <col:15> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|       |         `-CXXThisExpr 0x55e33c1b8a88 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e33c1b8c40 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e33c1b8bd8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e33c1b1a18
|         | `-MemberExpr 0x55e33c1b8ba8 <col:6> 'String::rep_t' lvalue ->_r 0x55e33c1b1a90
|         |   `-CXXThisExpr 0x55e33c1b8b98 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e33c1b8c28 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e33c1b8c08 <col:16> 'int' 0
|-CXXMethodDecl 0x55e33c1b2478 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e33c1b2298 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e33c1b2318 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e33c1b2390 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e33c1b2550 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e33c1b27a0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e33c1b2608 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e33c1b2688 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e33c1b2700 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e33c1b2988 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e33c1b2870 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e33c1b28f0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e33c1b2a88 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e33c1b8d78 <col:41, line:286:5>
|   `-ReturnStmt 0x55e33c1b8d68 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e33c1b8d38 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e33c1b8d00 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e33c1b8ce8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e33c1b8cc8 <col:46> 'int' 1
|-CXXMethodDecl 0x55e33c1b2d28 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e33c1b2b40 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e33c1b2bc0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e33c1b2c40 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e33c1b69c0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e33c1b2df0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e33c1b6a90 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e33c1b6c60 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e33c1b6b48 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e33c1b6bc8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e33c1b6d20 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e33c1b6de8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e33c1b6ee8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e33c1b6f60 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e33c1b6fd8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e33c1b7040 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e33c1b7140 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e33c1b7190 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c1b7120 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e33c1b7100 <col:22> 'int' 14
|-CXXMethodDecl 0x55e33c1b73a8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e33c1b71c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e33c1b7240 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e33c1b72c0 <col:43> col:46 'int'
|-FriendDecl 0x55e33c1b74b0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e33c1b7540 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e33c2792c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e33c279498 prev 0x55e33c2792c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e33c279528 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e33c279550 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c27aeb0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e33c27ae60 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e33c27ae40 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e33c279768 'type'
|     `-SubstTemplateTypeParmType 0x55e33c279730 'String' sugar
|       |-TemplateTypeParmType 0x55e33c16bf40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c16bef0 'T'
|       `-RecordType 0x55e33c1a8730 'String'
|         `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c27af68 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e33c27af30 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e33c27af10 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e33c27aeb0 'type'
|     `-ElaboratedType 0x55e33c27ae60 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e33c27ae40 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e33c279768 'type'
|         `-SubstTemplateTypeParmType 0x55e33c279730 'String' sugar
|           |-TemplateTypeParmType 0x55e33c16bf40 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e33c16bef0 'T'
|           `-RecordType 0x55e33c1a8730 'String'
|             `-CXXRecord 0x55e33c1a86a0 'String'
|-CXXMethodDecl 0x55e33c27b0e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e33c27aff8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e33c27b1d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e33c27b2b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e33c27b2b8
|-CXXMethodDecl 0x55e33c27b588 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e33c27b490 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e33c27b7c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e33c27b640 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e33c27b6b8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c27b998 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e33c27b888 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e33c27b900 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c425b10 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e33c425be0 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e33c425e28 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e33c425ca0 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e33c425d18 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c426088 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e33c425ef8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e33c425f70 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c426248 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e33c426158 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c426408 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e33c426310 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c4264c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e33c426570 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e33c4267a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e33c426620 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e33c426698 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e33c426a48 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e33c426950 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e33c426b10 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e33c426b60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e33c426bb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e33c3dfed0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e33c277d28 prev 0x55e33c3dfed0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e33c279230 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e33c2791e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e33c2791c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e33c279070 'type'
|     `-SubstTemplateTypeParmType 0x55e33c278f00 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e33c141cf0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e33c141c98 'F'
|       `-RecordType 0x55e33c278b60 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e33c278a80 'typed_array_memory'
|-FieldDecl 0x55e33c426c00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e33c426c50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e33c426c88 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|   |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e33c179208 'T'
|   `-RecordType 0x55e33c1a8730 'String'
|     `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c426d18 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e33c426ce0 'String &'
|   `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|     |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e33c179208 'T'
|     `-RecordType 0x55e33c1a8730 'String'
|       `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c426da8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e33c426d70 'const String &'
|   `-QualType 0x55e33c277dc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-RecordType 0x55e33c1a8730 'String'
|         `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c426e38 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e33c426e00 'String *'
|   `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|     |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e33c179208 'T'
|     `-RecordType 0x55e33c1a8730 'String'
|       `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c426ec8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e33c426e90 'const String *'
|   `-QualType 0x55e33c277dc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-RecordType 0x55e33c1a8730 'String'
|         `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c427b20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e33c427ad0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e33c427ab0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e33c4279e8 'type'
|     `-LValueReferenceType 0x55e33c4279b0 'const String &'
|       `-QualType 0x55e33c427751 'const String' const
|         `-SubstTemplateTypeParmType 0x55e33c427750 'String' sugar
|           |-TemplateTypeParmType 0x55e33c14bc40 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e33c14bbe8 'T'
|           `-RecordType 0x55e33c1a8730 'String'
|             `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c427b88 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e33c426d70 'const String &'
|   `-QualType 0x55e33c277dc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-RecordType 0x55e33c1a8730 'String'
|         `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c427be0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c427c48 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e33c426e00 'String *'
|   `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|     |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e33c179208 'T'
|     `-RecordType 0x55e33c1a8730 'String'
|       `-CXXRecord 0x55e33c1a86a0 'String'
|-TypedefDecl 0x55e33c427cb0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e33c426e90 'const String *'
|   `-QualType 0x55e33c277dc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55e33c277dc0 'String' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-RecordType 0x55e33c1a8730 'String'
|         `-CXXRecord 0x55e33c1a86a0 'String'
|-EnumDecl 0x55e33c427d08 <line:134:5> col:5
| `-EnumConstantDecl 0x55e33c427e00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e33c427de0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e33c17a8e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e33c17a8c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e33c17a8a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e33c427e88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e33c428118 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c427f40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e33c427fe0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e33c4283a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e33c428290 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e33c428668 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e33c428550 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e33c428980 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e33c428860 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e33c428c90 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e33c428b70 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e33c428f80 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c428dc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e33c428e40 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e33c4290a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e33c429158 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c4291b0 <col:30> Inherited
|-CXXMethodDecl 0x55e33c4291f8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e33c4292a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c429300 <col:30> Inherited
|-CXXMethodDecl 0x55e33c4293c8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e33c429478 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c4294d0 <col:30> Inherited
|-CXXMethodDecl 0x55e33c429518 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e33c4295c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c429620 <col:30> Inherited
|-CXXMethodDecl 0x55e33c429668 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e33c429718 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c429770 <col:30> Inherited
|-CXXMethodDecl 0x55e33c4297b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e33c429868 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c4298c0 <col:30> Inherited
|-CXXMethodDecl 0x55e33c4298e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e33c429998 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e33c429a48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e33c429c08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c429af8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e33c429b70 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e33c429d58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e33c429cc8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c429f08 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e33c429e10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e33c429fc0 <col:20>
| `-OptimizeNoneAttr 0x55e33c42a018 <col:30>
|-CXXMethodDecl 0x55e33c42a138 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e33c42a040 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e33c42a1f0 <col:20>
| `-OptimizeNoneAttr 0x55e33c42a248 <col:30>
|-CXXMethodDecl 0x55e33c42a300 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e33c42a270 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c42a448 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e33c42a3b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c42a578 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e33c42a678 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e33c42a748 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e33c42a818 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e33c42a958 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e33c42a8c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c42aaa0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e33c42aa10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c42abe8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e33c42ab58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e33c42aca0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e33c42ada0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e33c42ad10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e33c42ae58 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e33c42af18 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e33c42b018 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e33c42b198 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e33c42b0d8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e33c42b958 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e33c42b250 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e33c42b8b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e33c42b7b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e33c42ba38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e33c42bb88 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e33c42baf8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e33c42bc40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e33c42be88 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c42bd00 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e33c42bd78 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e33c42c018 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e33c42bf58 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e33c42c228 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e33c42c0e0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e33c42c158 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e33c42c2e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e33c42c548 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e33c42c450 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e33c42c618 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e33c42c618

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c35db38 prev 0x55e33c3a2978 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c35dc30 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e33c35dcc0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e33c35ddf8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e33c35dcf8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e33c35f220 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c35f200 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e33c35ed98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e33c35f2b0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e33c35f270 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e33c35dcf8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e33c35ee00 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e33c35f330 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c35f2f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e33c35ee60 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e33c35f370 <col:54> 'bool' false
| `-CompoundStmt 0x55e33c35f478 <col:61, line:38:5>
|   `-BinaryOperator 0x55e33c35f458 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e33c35f3f0 <col:9> 'const Element *' lvalue ->_context 0x55e33c35ed38
|     | `-CXXThisExpr 0x55e33c35f3e0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e33c35f440 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e33c35f420 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e33c35e008 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c35deb8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e33c35df30 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e33c35f258 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c35f238 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e33c35ed38 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e33c35f4d0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e33c35f490 <col:20> 'const Element *' lvalue ParmVar 0x55e33c35deb8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e33c35ed98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e33c35f550 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e33c35f510 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e33c35df30 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e33c35ee00 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e33c35f5d0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e33c35f590 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e33c35ee60 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e33c35f610 <col:73> 'bool' false
| `-CompoundStmt 0x55e33c35f688 <col:80, line:46:5>
|-CXXMethodDecl 0x55e33c35e138 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e33c35f700 <col:36, line:51:5>
|   `-ReturnStmt 0x55e33c35f6f0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e33c35f6d8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e33c35f6a8 <col:16> 'const Element *const' lvalue ->_context 0x55e33c35ed38
|         `-CXXThisExpr 0x55e33c35f698 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e33c35e228 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e33c35f780 <col:32, line:57:5>
|   `-ReturnStmt 0x55e33c35f770 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e33c35f758 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e33c35f728 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e33c35ed98
|         `-CXXThisExpr 0x55e33c35f718 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e33c35e2e8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e33c35e470 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e33c35e3a0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e33c35e5c0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e33c35e530 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e33c35e710 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e33c35e680 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e33c35e918 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e33c35e7c8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e33c35e840 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e33c35ec48 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e33c35e9d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e33c35ea58 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e33c35eb20 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e33c35ed00 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e33c35ed38 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e33c35ed98 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e33c35ee00 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e33c35ee60 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e33c35eeb0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e33c35eeb0
| `-ParmVarDecl 0x55e33c35efc8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e33c35f068 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e33c35f068
| `-ParmVarDecl 0x55e33c35f178 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e33c4af6e8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e33c46a5a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e33c46a778 prev 0x55e33c46a5a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e33c46a808 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e33c46a830 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c46c400 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e33c46c3b0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e33c46ace0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e33c46abe0 'type'
|     `-TemplateSpecializationType 0x55e33c46ab70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e33c46aa50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e33c46aa30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e33c46aa10 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e33c46ab50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e33c46aa70 'char_array'
|-TypedefDecl 0x55e33c46c4b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e33c46c480 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e33c46c460 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e33c46c400 'type'
|     `-ElaboratedType 0x55e33c46c3b0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e33c46ace0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e33c46abe0 'type'
|         `-TemplateSpecializationType 0x55e33c46ab70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e33c46aa50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e33c46aa30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e33c46aa10 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e33c46ab50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e33c46aa70 'char_array'
|-CXXMethodDecl 0x55e33c46c638 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e33c46c548 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e33c46c728 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e33c46c808 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e33c46cad8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e33c46c9e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e33c46cd18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e33c46cb90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e33c46cc08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c46cee8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e33c46cdd8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e33c46ce50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c46d048 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e33c46d118 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e33c46d368 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e33c46d1d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e33c46d250 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c46d5c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e33c46d438 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e33c46d4b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c46d788 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e33c46d698 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c46d948 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e33c46d850 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c46da00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e33c46dab0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e33c4760b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e33c46db60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e33c475fa0 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e33c476358 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e33c476260 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e33c476420 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e33c476470 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e33c4764c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e33c468fa8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e33c4691b8 prev 0x55e33c468fa8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e33c46a510 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e33c46a4c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e33c46a4a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e33c46a350 'type'
|     `-SubstTemplateTypeParmType 0x55e33c46a170 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e33c141570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c141518 'T'
|       `-RecordType 0x55e33c469cc0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e33c469bd8 'sized_array_memory'
|-FieldDecl 0x55e33c476510 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e33c476560 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e33c476598 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|   |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e33c179208 'T'
|   `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c476628 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e33c4765f0 'int &'
|   `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|     |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e33c179208 'T'
|     `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c4766e8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e33c4766b0 'const int &'
|   `-QualType 0x55e33c469251 'const int' const
|     `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c476778 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e33c476740 'int *'
|   `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|     |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e33c179208 'T'
|     `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c476808 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e33c4767d0 'const int *'
|   `-QualType 0x55e33c469251 'const int' const
|     `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c4773f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e33c4773a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e33c477380 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e33c477310 'type'
|     `-SubstTemplateTypeParmType 0x55e33c4770d0 'int' sugar
|       |-TemplateTypeParmType 0x55e33c14c370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c14c320 'T'
|       `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c477458 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e33c4766b0 'const int &'
|   `-QualType 0x55e33c469251 'const int' const
|     `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c4774b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c477518 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e33c476740 'int *'
|   `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|     |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e33c179208 'T'
|     `-BuiltinType 0x55e33be7c3b0 'int'
|-TypedefDecl 0x55e33c477580 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e33c4767d0 'const int *'
|   `-QualType 0x55e33c469251 'const int' const
|     `-SubstTemplateTypeParmType 0x55e33c469250 'int' sugar
|       |-TemplateTypeParmType 0x55e33c179260 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e33c179208 'T'
|       `-BuiltinType 0x55e33be7c3b0 'int'
|-EnumDecl 0x55e33c4775d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55e33c4776d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e33c4776b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e33c17a8e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e33c17a8c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e33c17a8a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e33c477758 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e33c4779a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c477810 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e33c4778b0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e33c477c68 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e33c477b50 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e33c477f28 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e33c477e10 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e33c478270 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e33c478150 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e33c478580 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e33c478460 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e33c478870 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c4786b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e33c478730 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e33c478998 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e33c478a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c478ad0 <col:30> Inherited
|-CXXMethodDecl 0x55e33c478b18 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e33c478bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c478c20 <col:30> Inherited
|-CXXMethodDecl 0x55e33c478ce8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e33c478d98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c478df0 <col:30> Inherited
|-CXXMethodDecl 0x55e33c478e38 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e33c478ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c478f40 <col:30> Inherited
|-CXXMethodDecl 0x55e33c478f88 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e33c479038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c479090 <col:30> Inherited
|-CXXMethodDecl 0x55e33c4790d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e33c479188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e33c4791e0 <col:30> Inherited
|-CXXMethodDecl 0x55e33c479208 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e33c4792b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e33c479368 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e33c479528 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c479418 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e33c479490 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e33c479678 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e33c4795e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c479828 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e33c479730 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e33c4798e0 <col:20>
| `-OptimizeNoneAttr 0x55e33c479938 <col:30>
|-CXXMethodDecl 0x55e33c479a58 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e33c479960 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e33c479b10 <col:20>
| `-OptimizeNoneAttr 0x55e33c479b68 <col:30>
|-CXXMethodDecl 0x55e33c479c20 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e33c479b90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c479d68 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e33c479cd8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c479e98 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e33c479fc8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e33c47a098 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e33c47a168 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e33c47a2a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e33c47a218 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c47a3f0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e33c47a360 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e33c47a538 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e33c47a4a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e33c47a5f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e33c47a6f0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e33c47a660 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e33c47a7a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e33c47a868 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e33c47a968 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e33c47aae8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e33c47aa28 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e33c47b2a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e33c47aba0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e33c47b208 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e33c47b108 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e33c47b388 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e33c47b4d8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e33c47b448 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e33c47b590 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e33c47b7d8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e33c47b650 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e33c47b6c8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e33c47b998 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e33c47b8a8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e33c47bbe8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e33c47ba60 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e33c47bad8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e33c47bca8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e33c47bf08 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e33c47be10 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e33c47bfd8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c467118 prev 0x55e33c448d98 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e33c467210 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e33c467300 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e33c48ddb0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e33c4673f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e33c48ddc0 <col:25, line:830:9>
|-CXXMethodDecl 0x55e33c4674f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e33c4675a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e33c467648 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e33c467648
| `-ParmVarDecl 0x55e33c467758 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e33c467f18 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e33c467f18
  `-ParmVarDecl 0x55e33c468028 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c448ba8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e33c448d08 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e33c448d98 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e33c448e50 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e33c448f58 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e33c448e88 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e33c47d598 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e33c47d578 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e33c449278 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c4490f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e33c449168 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e33c47d5d0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e33c47d5b0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e33c449450 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c449340 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e33c4493b8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e33c47d608 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e33c47d5e8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e33c449808 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e33c4495f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e33c449668 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e33c4496e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e33c47d640 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e33c47d620 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e33c4499c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e33c449908 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e33c449ac0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e33c449ca8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e33c449bb0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e33c449d98 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e33c47d9f0 <col:24, line:291:5>
|   `-ReturnStmt 0x55e33c47d9e0 <line:290:9, col:79>
|     `-BinaryOperator 0x55e33c47d9c0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e33c47d898 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e33c47d7f0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e33c47d7d0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e33c47d6c8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e33c47d6b0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e33c47d698 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e33c47d668 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e33c468f40
|       | |   |       `-CXXThisExpr 0x55e33c47d658 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e33c47d7b8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e33c47d7a0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e33c47d768 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e33c47d738 <col:28, col:35> '<bound member function type>' ->size 0x55e33c4298e8
|       | |           `-ImplicitCastExpr 0x55e33c47d788 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e33c47d720 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e33c47d6f0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e33c468f40
|       | |                 `-CXXThisExpr 0x55e33c47d6e0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e33c47d880 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e33c47d868 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e33c47d850 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e33c47d820 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e33c47c120
|       |         `-CXXThisExpr 0x55e33c47d810 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e33c47d9a0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e33c47d988 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e33c47d970 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e33c47d930 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e33c47d918 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e33c47d8c8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e33c47c1d0
|         |     |   `-CXXThisExpr 0x55e33c47d8b8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e33c47d8f8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e33c47d950 <col:79> 'int' 0
|-CXXMethodDecl 0x55e33c449e58 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e33c47dbc8 <col:32, line:296:5>
|   `-ReturnStmt 0x55e33c47dbb8 <line:295:9, col:49>
|     `-BinaryOperator 0x55e33c47db98 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e33c47da78 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e33c47da60 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e33c47da48 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e33c47da18 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e33c47c120
|       |       `-CXXThisExpr 0x55e33c47da08 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e33c47db78 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e33c47db60 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e33c47db48 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e33c47db08 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e33c47daf0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e33c47daa0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e33c47c1d0
|         |     |   `-CXXThisExpr 0x55e33c47da90 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e33c47dad0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e33c47db28 <col:49> 'int' 0
|-CXXMethodDecl 0x55e33c449f48 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e33c47ddd8 <col:19, line:306:5>
|   |-IfStmt 0x55e33c47dcf8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e33c47dc38 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e33c47dc20 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e33c47dbf0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e33c468f40
|   | |     `-CXXThisExpr 0x55e33c47dbe0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e33c47dcd8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e33c47dca8 <col:13, col:20> '<bound member function type>' ->clear 0x55e33c42c2e8
|   |     `-ImplicitCastExpr 0x55e33c47dc90 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e33c47dc60 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e33c468f40
|   |         `-CXXThisExpr 0x55e33c47dc50 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e33c47dd80 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e33c47dd50 <col:9, col:16> '<bound member function type>' .clear 0x55e33c47bca8
|   |   `-MemberExpr 0x55e33c47dd20 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e33c47c0c0
|   |     `-CXXThisExpr 0x55e33c47dd10 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e33c47ddc8 <line:305:9, col:17>
|     `-UnaryOperator 0x55e33c47ddb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c47dda0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e33c44a1c8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e33c44a0d0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e33c44a348 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e33c44a280 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e33c44a6c8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e33c44a3f0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e33c44a628 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e33c44a498 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e33c44a510 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e33c47fa70 <col:67, line:327:5>
|     |-WhileStmt 0x55e33c47fa20 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e33c47dec0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e33c47de40 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e33c39ae48 0x55e33c1e4428 0x55e33c1e4100 0x55e33c1d58e0 0x55e33c1d5590 0x55e33c1d4e80 0x55e33c1a77f0 0x55e33c133cb0
|     | | |-DeclRefExpr 0x55e33c47de00 <col:16> 'Iter' lvalue ParmVar 0x55e33c44a498 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e33c47de20 <col:25> 'Iter' lvalue ParmVar 0x55e33c44a510 'end' 'Iter'
|     | `-CompoundStmt 0x55e33c47fa00 <col:30, line:325:9>
|     |   |-CallExpr 0x55e33c47f9a0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e33c47df08 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e33c47f970 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e33c47f900 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|     |   |   `-DeclRefExpr 0x55e33c47df68 <col:24> 'Iter' lvalue ParmVar 0x55e33c44a498 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e33c47f9e8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e33c47f9c8 <col:15> 'Iter' lvalue ParmVar 0x55e33c44a498 'begin' 'Iter'
|     `-ReturnStmt 0x55e33c47fa60 <line:326:9, col:17>
|       `-UnaryOperator 0x55e33c47fa48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c47fa38 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e33c44a7d0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e33c44a740 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e33c44a918 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e33c44a888 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e33c44a9e0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e33c47fb50 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e33c47faf0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e33c47faa0 <col:9> '<bound member function type>' ->reset_from 0x55e33c47c548
|   | | `-CXXThisExpr 0x55e33c47fa90 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e33c47fad0 <col:20> 'int' 0
|   `-ReturnStmt 0x55e33c47fb40 <line:352:9, col:17>
|     `-UnaryOperator 0x55e33c47fb28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c47fb18 <col:17> 'Args *' this
|-VarDecl 0x55e33c44aa98 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e33c44ab00 <col:38> 'int' 1
|-VarDecl 0x55e33c44ab90 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e33c44abf8 <col:39> 'int' 2
|-VarDecl 0x55e33c44ac88 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e33c44acf0 <col:39> 'int' 4
|-VarDecl 0x55e33c44ad80 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e33c44ade8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e33c44b168 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e33c44ae60 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c44b0c8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e33c44af10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44afb8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55e33c47fca8 <col:43, line:371:5>
|     `-ReturnStmt 0x55e33c47fc98 <line:370:9, col:34>
|       `-CallExpr 0x55e33c47fc60 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c47fb80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c47fc00 <col:21> 'const char *' lvalue ParmVar 0x55e33c44af10 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c47fc20 <col:30> 'int' 0
|         `-DeclRefExpr 0x55e33c47fc40 <col:33> 'T' lvalue ParmVar 0x55e33c44afb8 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44b498 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e33c44b1d0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c44b3f8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e33c44b280 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44b328 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e33c47fdf8 <col:45, line:375:5>
|     `-ReturnStmt 0x55e33c47fde8 <line:374:9, col:42>
|       `-CallExpr 0x55e33c47fdb0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c47fcd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c47fd50 <col:21> 'const char *' lvalue ParmVar 0x55e33c44b280 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c47fd70 <col:30> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e33c47fd90 <col:41> 'T' lvalue ParmVar 0x55e33c44b328 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44b7c8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e33c44b500 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c44b728 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e33c44b5b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44b658 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e33c47ff48 <col:45, line:379:5>
|     `-ReturnStmt 0x55e33c47ff38 <line:378:9, col:43>
|       `-CallExpr 0x55e33c47ff00 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c47fe20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c47fea0 <col:21> 'const char *' lvalue ParmVar 0x55e33c44b5b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c47fec0 <col:30> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int'
|         `-DeclRefExpr 0x55e33c47fee0 <col:42> 'T' lvalue ParmVar 0x55e33c44b658 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44baf8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e33c44b830 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55e33c44ba58 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55e33c44b8e0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e33c44b988 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55e33c480148 <col:46, line:383:5>
| |   `-ReturnStmt 0x55e33c480138 <line:382:9, col:55>
| |     `-CallExpr 0x55e33c480100 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e33c47ff70 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e33c47fff0 <col:21> 'const char *' lvalue ParmVar 0x55e33c44b8e0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55e33c4800c0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55e33c480070 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55e33c480050 <col:30> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55e33c4800a8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55e33c480088 <col:42> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55e33c4800e0 <col:54> 'T' lvalue ParmVar 0x55e33c44b988 'x' 'T &'
| `-CXXMethodDecl 0x55e33c4afb78 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e33c4af998 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55e33c4afa68 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55e33c44bef8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e33c44bb60 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c44be58 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e33c44bc10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44bc90 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c44bd38 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e33c480288 <col:54, line:388:5>
|     |-CallExpr 0x55e33c480210 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c480160 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e33c4801a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e33c4801b0 <col:30> 'const char *' lvalue ParmVar 0x55e33c44bc10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e33c4801d0 <col:39> 'int' lvalue ParmVar 0x55e33c44bc90 'flags' 'int'
|     | `-DeclRefExpr 0x55e33c4801f0 <col:46> 'T' lvalue ParmVar 0x55e33c44bd38 'x' 'T &'
|     `-ReturnStmt 0x55e33c480278 <line:387:9, col:17>
|       `-UnaryOperator 0x55e33c480260 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c480250 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c44c3a8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e33c44bf68 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e33c44bfe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e33c44c308 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e33c44c0a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44c148 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c44c1e8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e33c4803f8 <col:74, line:403:5>
|     `-ReturnStmt 0x55e33c4803e8 <line:402:9, col:56>
|       `-CallExpr 0x55e33c4803a8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4802b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c480328 <col:28> 'const char *' lvalue ParmVar 0x55e33c44c0a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c480348 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e33c480368 <col:40> 'T' lvalue ParmVar 0x55e33c44c148 'x' 'T &'
|         `-DeclRefExpr 0x55e33c480388 <col:43> 'const V' lvalue ParmVar 0x55e33c44c1e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e33c44c818 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e33c44c418 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e33c44c498 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e33c44c778 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e33c44c558 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44c5f8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c44c698 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e33c480560 <col:76, line:407:5>
|     `-ReturnStmt 0x55e33c480550 <line:406:9, col:65>
|       `-CallExpr 0x55e33c480510 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c480420 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c480490 <col:28> 'const char *' lvalue ParmVar 0x55e33c44c558 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c4804b0 <col:37> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int'
|         |-DeclRefExpr 0x55e33c4804d0 <col:49> 'T' lvalue ParmVar 0x55e33c44c5f8 'x' 'T &'
|         `-DeclRefExpr 0x55e33c4804f0 <col:52> 'const V' lvalue ParmVar 0x55e33c44c698 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e33c44cd68 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e33c44c888 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e33c44c908 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e33c44ccc8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e33c44c9c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44ca48 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c44cae8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c44cb88 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e33c4806c8 <col:85, line:412:5>
|     |-CallExpr 0x55e33c480648 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c480578 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e33c4805b8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e33c4805c8 <col:37> 'const char *' lvalue ParmVar 0x55e33c44c9c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e33c4805e8 <col:46> 'int' lvalue ParmVar 0x55e33c44ca48 'flags' 'int'
|     | |-DeclRefExpr 0x55e33c480608 <col:53> 'T' lvalue ParmVar 0x55e33c44cae8 'x' 'T &'
|     | `-DeclRefExpr 0x55e33c480628 <col:56> 'const V' lvalue ParmVar 0x55e33c44cb88 'default_value' 'const V &'
|     `-ReturnStmt 0x55e33c4806b8 <line:411:9, col:17>
|       `-UnaryOperator 0x55e33c4806a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c480690 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c44d1f8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e33c44cde0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44ce58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c44d158 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c44cf18 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44cf90 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44d038 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e33c480848 <col:53, line:425:5>
|     `-ReturnStmt 0x55e33c480838 <line:424:9, col:42>
|       `-CallExpr 0x55e33c4807f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4806f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c480778 <col:21> 'const char *' lvalue ParmVar 0x55e33c44cf18 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c480798 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e33c4807b8 <col:33> 'P' lvalue ParmVar 0x55e33c44cf90 'parser' 'P'
|         `-DeclRefExpr 0x55e33c4807d8 <col:41> 'T' lvalue ParmVar 0x55e33c44d038 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44d648 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e33c44d268 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44d2e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c44d5a8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c44d3a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44d420 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44d4c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e33c4809c0 <col:55, line:429:5>
|     `-ReturnStmt 0x55e33c4809b0 <line:428:9, col:50>
|       `-CallExpr 0x55e33c480970 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c480870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4808f0 <col:21> 'const char *' lvalue ParmVar 0x55e33c44d3a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c480910 <col:30> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e33c480930 <col:41> 'P' lvalue ParmVar 0x55e33c44d420 'parser' 'P'
|         `-DeclRefExpr 0x55e33c480950 <col:49> 'T' lvalue ParmVar 0x55e33c44d4c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44da98 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e33c44d6b8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44d738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c44d9f8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c44d7f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44d870 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44d918 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e33c480b38 <col:55, line:433:5>
|     `-ReturnStmt 0x55e33c480b28 <line:432:9, col:51>
|       `-CallExpr 0x55e33c480ae8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4809e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c480a68 <col:21> 'const char *' lvalue ParmVar 0x55e33c44d7f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c480a88 <col:30> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int'
|         |-DeclRefExpr 0x55e33c480aa8 <col:42> 'P' lvalue ParmVar 0x55e33c44d870 'parser' 'P'
|         `-DeclRefExpr 0x55e33c480ac8 <col:50> 'T' lvalue ParmVar 0x55e33c44d918 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44dee8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e33c44db08 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44db88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c44de48 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c44dc48 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44dcc0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44dd68 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55e33c480d60 <col:56, line:437:5>
|     `-ReturnStmt 0x55e33c480d50 <line:436:9, col:63>
|       `-CallExpr 0x55e33c480d10 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c480b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c480be0 <col:21> 'const char *' lvalue ParmVar 0x55e33c44dc48 'keyword' 'const char *'
|         |-BinaryOperator 0x55e33c480cb0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e33c480c60 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e33c480c40 <col:30> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e33c480c98 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e33c480c78 <col:42> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e33c480cd0 <col:54> 'P' lvalue ParmVar 0x55e33c44dcc0 'parser' 'P'
|         `-DeclRefExpr 0x55e33c480cf0 <col:62> 'T' lvalue ParmVar 0x55e33c44dd68 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c44e418 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e33c44df58 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44dfd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c44e378 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e33c44e098 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44e118 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c44e190 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44e238 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e33c480ec8 <col:64, line:442:5>
|     |-CallExpr 0x55e33c480e48 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c480d78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e33c480db8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e33c480dc8 <col:30> 'const char *' lvalue ParmVar 0x55e33c44e098 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e33c480de8 <col:39> 'int' lvalue ParmVar 0x55e33c44e118 'flags' 'int'
|     | |-DeclRefExpr 0x55e33c480e08 <col:46> 'P' lvalue ParmVar 0x55e33c44e190 'parser' 'P'
|     | `-DeclRefExpr 0x55e33c480e28 <col:54> 'T' lvalue ParmVar 0x55e33c44e238 'x' 'T &'
|     `-ReturnStmt 0x55e33c480eb8 <line:441:9, col:17>
|       `-UnaryOperator 0x55e33c480ea0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c480e90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c44ea18 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e33c44e490 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44e508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e33c44e588 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e33c44e978 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e33c44e650 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44e6c8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44e768 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c44e838 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e33c481060 <col:84, line:458:5>
|     `-ReturnStmt 0x55e33c481050 <line:457:9, col:64>
|       `-CallExpr 0x55e33c481008 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c480ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c480f68 <col:28> 'const char *' lvalue ParmVar 0x55e33c44e650 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c480f88 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e33c480fa8 <col:40> 'P' lvalue ParmVar 0x55e33c44e6c8 'parser' 'P'
|         |-DeclRefExpr 0x55e33c480fc8 <col:48> 'T' lvalue ParmVar 0x55e33c44e768 'x' 'T &'
|         `-DeclRefExpr 0x55e33c480fe8 <col:51> 'const V' lvalue ParmVar 0x55e33c44e838 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e33c44ef98 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e33c44ea90 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44eb08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e33c44eb88 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e33c44eef8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e33c44ec50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44ecc8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44ed68 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c44ee08 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e33c4811f0 <col:86, line:462:5>
|     `-ReturnStmt 0x55e33c4811e0 <line:461:9, col:73>
|       `-CallExpr 0x55e33c481198 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c481088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4810f8 <col:28> 'const char *' lvalue ParmVar 0x55e33c44ec50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c481118 <col:37> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int'
|         |-DeclRefExpr 0x55e33c481138 <col:49> 'P' lvalue ParmVar 0x55e33c44ecc8 'parser' 'P'
|         |-DeclRefExpr 0x55e33c481158 <col:57> 'T' lvalue ParmVar 0x55e33c44ed68 'x' 'T &'
|         `-DeclRefExpr 0x55e33c481178 <col:60> 'const V' lvalue ParmVar 0x55e33c44ee08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e33c44f5f8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e33c44f010 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44f088 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e33c44f108 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e33c44f558 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e33c44f1d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44f250 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c44f2c8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44f368 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c44f408 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e33c481380 <col:95, line:467:5>
|     |-CallExpr 0x55e33c4812f8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c481208 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e33c481248 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e33c481258 <col:37> 'const char *' lvalue ParmVar 0x55e33c44f1d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e33c481278 <col:46> 'int' lvalue ParmVar 0x55e33c44f250 'flags' 'int'
|     | |-DeclRefExpr 0x55e33c481298 <col:53> 'P' lvalue ParmVar 0x55e33c44f2c8 'parser' 'P'
|     | |-DeclRefExpr 0x55e33c4812b8 <col:61> 'T' lvalue ParmVar 0x55e33c44f368 'x' 'T &'
|     | `-DeclRefExpr 0x55e33c4812d8 <col:64> 'const V' lvalue ParmVar 0x55e33c44f408 'default_value' 'const V &'
|     `-ReturnStmt 0x55e33c481370 <line:466:9, col:17>
|       `-UnaryOperator 0x55e33c481358 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c481348 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c44fbd8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e33c44f678 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44f6f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e33c44f778 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e33c44fb38 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e33c44f840 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44f8b8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44f958 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e33c44f9f8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e33c481528 <col:63, line:481:5>
|     `-ReturnStmt 0x55e33c481518 <line:480:9, col:47>
|       `-CallExpr 0x55e33c4814d0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4813b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c481430 <col:21> 'const char *' lvalue ParmVar 0x55e33c44f840 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c481450 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e33c481470 <col:33> 'P' lvalue ParmVar 0x55e33c44f8b8 'parser' 'P'
|         |-DeclRefExpr 0x55e33c481490 <col:41> 'T1' lvalue ParmVar 0x55e33c44f958 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e33c4814b0 <col:45> 'T2' lvalue ParmVar 0x55e33c44f9f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e33c450158 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e33c44fc50 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c44fcc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e33c44fd48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e33c4500b8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e33c44fe10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c44fe88 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c44ff28 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e33c44ffc8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e33c4816c8 <col:65, line:485:5>
|     `-ReturnStmt 0x55e33c4816b8 <line:484:9, col:55>
|       `-CallExpr 0x55e33c481670 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c481550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4815d0 <col:21> 'const char *' lvalue ParmVar 0x55e33c44fe10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c4815f0 <col:30> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e33c481610 <col:41> 'P' lvalue ParmVar 0x55e33c44fe88 'parser' 'P'
|         |-DeclRefExpr 0x55e33c481630 <col:49> 'T1' lvalue ParmVar 0x55e33c44ff28 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e33c481650 <col:53> 'T2' lvalue ParmVar 0x55e33c44ffc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e33c4506d8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e33c4501d0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c450248 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e33c4502c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e33c450638 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e33c450390 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c450408 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c4504a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e33c450548 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e33c481868 <col:65, line:489:5>
|     `-ReturnStmt 0x55e33c481858 <line:488:9, col:56>
|       `-CallExpr 0x55e33c481810 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4816f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c481770 <col:21> 'const char *' lvalue ParmVar 0x55e33c450390 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c481790 <col:30> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int'
|         |-DeclRefExpr 0x55e33c4817b0 <col:42> 'P' lvalue ParmVar 0x55e33c450408 'parser' 'P'
|         |-DeclRefExpr 0x55e33c4817d0 <col:50> 'T1' lvalue ParmVar 0x55e33c4504a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e33c4817f0 <col:54> 'T2' lvalue ParmVar 0x55e33c450548 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e33c456108 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e33c450750 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c4507c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e33c450848 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e33c456068 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e33c450910 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c450988 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c450a28 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e33c450ac8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e33c481ab8 <col:66, line:493:5>
|     `-ReturnStmt 0x55e33c481aa8 <line:492:9, col:68>
|       `-CallExpr 0x55e33c481a60 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c481890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c481910 <col:21> 'const char *' lvalue ParmVar 0x55e33c450910 'keyword' 'const char *'
|         |-BinaryOperator 0x55e33c4819e0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e33c481990 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e33c481970 <col:30> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e33c4819c8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e33c4819a8 <col:42> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e33c481a00 <col:54> 'P' lvalue ParmVar 0x55e33c450988 'parser' 'P'
|         |-DeclRefExpr 0x55e33c481a20 <col:62> 'T1' lvalue ParmVar 0x55e33c450a28 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e33c481a40 <col:66> 'T2' lvalue ParmVar 0x55e33c450ac8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e33c456768 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e33c456180 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c4561f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e33c456278 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e33c4566c8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e33c456340 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c4563c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c456438 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c4564d8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e33c456578 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e33c481c48 <col:74, line:498:5>
|     |-CallExpr 0x55e33c481bc0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c481ad0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e33c481b10 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e33c481b20 <col:30> 'const char *' lvalue ParmVar 0x55e33c456340 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e33c481b40 <col:39> 'int' lvalue ParmVar 0x55e33c4563c0 'flags' 'int'
|     | |-DeclRefExpr 0x55e33c481b60 <col:46> 'P' lvalue ParmVar 0x55e33c456438 'parser' 'P'
|     | |-DeclRefExpr 0x55e33c481b80 <col:54> 'T1' lvalue ParmVar 0x55e33c4564d8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e33c481ba0 <col:58> 'T2' lvalue ParmVar 0x55e33c456578 'x2' 'T2 &'
|     `-ReturnStmt 0x55e33c481c38 <line:497:9, col:17>
|       `-UnaryOperator 0x55e33c481c20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c481c10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c456ac8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e33c4567e8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c456a28 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e33c4568a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c456918 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e33c481d90 <col:52, line:509:5>
|     `-ReturnStmt 0x55e33c481d80 <line:508:9, col:44>
|       `-CallExpr 0x55e33c481d48 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c481c78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c481ce8 <col:26> 'const char *' lvalue ParmVar 0x55e33c4568a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c481d08 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e33c481d28 <col:38> 'P' lvalue ParmVar 0x55e33c456918 'parser' 'P'
|-FunctionTemplateDecl 0x55e33c456dc8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e33c456b30 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c456d28 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e33c456be0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c456c58 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e33c481ed0 <col:54, line:513:5>
|     `-ReturnStmt 0x55e33c481ec0 <line:512:9, col:52>
|       `-CallExpr 0x55e33c481e88 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c481db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c481e28 <col:26> 'const char *' lvalue ParmVar 0x55e33c456be0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c481e48 <col:35> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e33c481e68 <col:46> 'P' lvalue ParmVar 0x55e33c456c58 'parser' 'P'
|-FunctionTemplateDecl 0x55e33c4570c8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e33c456e30 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c457028 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e33c456ee0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c456f58 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e33c482010 <col:54, line:517:5>
|     `-ReturnStmt 0x55e33c482000 <line:516:9, col:53>
|       `-CallExpr 0x55e33c481fc8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c481ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c481f68 <col:26> 'const char *' lvalue ParmVar 0x55e33c456ee0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c481f88 <col:35> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int'
|         `-DeclRefExpr 0x55e33c481fa8 <col:47> 'P' lvalue ParmVar 0x55e33c456f58 'parser' 'P'
|-FunctionTemplateDecl 0x55e33c4573c8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e33c457130 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c457328 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e33c4571e0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c457258 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e33c482200 <col:55, line:521:5>
|     `-ReturnStmt 0x55e33c4821f0 <line:520:9, col:65>
|       `-CallExpr 0x55e33c4821b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c482038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4820a8 <col:26> 'const char *' lvalue ParmVar 0x55e33c4571e0 'keyword' 'const char *'
|         |-BinaryOperator 0x55e33c482178 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e33c482128 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e33c482108 <col:35> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e33c482160 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e33c482140 <col:47> 'const int' lvalue Var 0x55e33c44ab90 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e33c482198 <col:59> 'P' lvalue ParmVar 0x55e33c457258 'parser' 'P'
|-FunctionTemplateDecl 0x55e33c457798 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e33c457430 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c4576f8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e33c4574e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c457560 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c4575d8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e33c482340 <col:63, line:526:5>
|     |-CallExpr 0x55e33c4822c8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c482218 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e33c482258 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e33c482268 <col:35> 'const char *' lvalue ParmVar 0x55e33c4574e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e33c482288 <col:44> 'int' lvalue ParmVar 0x55e33c457560 'flags' 'int'
|     | `-DeclRefExpr 0x55e33c4822a8 <col:51> 'P' lvalue ParmVar 0x55e33c4575d8 'parser' 'P'
|     `-ReturnStmt 0x55e33c482330 <line:525:9, col:17>
|       `-UnaryOperator 0x55e33c482318 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c482308 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c457be8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e33c457808 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c457888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c457b48 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c457948 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c4579c0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c457a68 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e33c482498 <col:58, line:541:5>
|     `-ReturnStmt 0x55e33c482488 <line:540:9, col:39>
|       `-CallExpr 0x55e33c482450 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c482370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4823f0 <col:21> 'const char *' lvalue ParmVar 0x55e33c457948 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c482410 <col:30> 'P' lvalue ParmVar 0x55e33c4579c0 'parser' 'P'
|         `-DeclRefExpr 0x55e33c482430 <col:38> 'T' lvalue ParmVar 0x55e33c457a68 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c458038 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e33c457c58 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c457cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c457f98 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c457d98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c457e10 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c457eb8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e33c4825d0 <col:60, line:545:5>
|     `-ReturnStmt 0x55e33c4825c0 <line:544:9, col:41>
|       `-CallExpr 0x55e33c482588 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4824c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c482528 <col:23> 'const char *' lvalue ParmVar 0x55e33c457d98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c482548 <col:32> 'P' lvalue ParmVar 0x55e33c457e10 'parser' 'P'
|         `-DeclRefExpr 0x55e33c482568 <col:40> 'T' lvalue ParmVar 0x55e33c457eb8 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c458488 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e33c4580a8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c458128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c4583e8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c4581e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c458260 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c458308 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e33c482708 <col:60, line:549:5>
|     `-ReturnStmt 0x55e33c4826f8 <line:548:9, col:41>
|       `-CallExpr 0x55e33c4826c0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4825f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c482660 <col:23> 'const char *' lvalue ParmVar 0x55e33c4581e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c482680 <col:32> 'P' lvalue ParmVar 0x55e33c458260 'parser' 'P'
|         `-DeclRefExpr 0x55e33c4826a0 <col:40> 'T' lvalue ParmVar 0x55e33c458308 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c4588d8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e33c4584f8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c458578 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c458838 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c458638 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c4586b0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c458758 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e33c482840 <col:61, line:553:5>
|     `-ReturnStmt 0x55e33c482830 <line:552:9, col:42>
|       `-CallExpr 0x55e33c4827f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c482730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c482798 <col:24> 'const char *' lvalue ParmVar 0x55e33c458638 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c4827b8 <col:33> 'P' lvalue ParmVar 0x55e33c4586b0 'parser' 'P'
|         `-DeclRefExpr 0x55e33c4827d8 <col:41> 'T' lvalue ParmVar 0x55e33c458758 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c458db8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e33c458948 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c4589c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c458d18 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e33c458a88 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c458b08 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c458b80 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c458c28 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e33c4829b8 <col:69, line:557:5>
|     `-ReturnStmt 0x55e33c4829a8 <line:556:9, col:46>
|       `-CallExpr 0x55e33c482968 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c482868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4828e8 <col:21> 'const char *' lvalue ParmVar 0x55e33c458a88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c482908 <col:30> 'int' lvalue ParmVar 0x55e33c458b08 'flags' 'int'
|         |-DeclRefExpr 0x55e33c482928 <col:37> 'P' lvalue ParmVar 0x55e33c458b80 'parser' 'P'
|         `-DeclRefExpr 0x55e33c482948 <col:45> 'T' lvalue ParmVar 0x55e33c458c28 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c4590c8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e33c458e30 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c459028 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e33c458ee0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c458f58 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e33c482af8 <col:56, line:571:5>
|     `-ReturnStmt 0x55e33c482ae8 <line:570:9, col:48>
|       `-CallExpr 0x55e33c482ab0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4829e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c482a50 <col:30> 'const char *' lvalue ParmVar 0x55e33c458ee0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c482a70 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e33c482a90 <col:42> 'P' lvalue ParmVar 0x55e33c458f58 'parser' 'P'
|-FunctionTemplateDecl 0x55e33c459458 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e33c459130 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c4593b8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e33c4591e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c459260 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c4592d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e33c482cc8 <col:67, line:576:5>
|     |-CallExpr 0x55e33c482c50 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c482b10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e33c482b50 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e33c482b60 <col:39> 'const char *' lvalue ParmVar 0x55e33c4591e0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e33c482c10 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e33c482bc0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e33c482b80 <col:48> 'int' lvalue ParmVar 0x55e33c459260 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e33c482bf8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e33c482bd8 <col:56> 'const int' lvalue Var 0x55e33c44ad80 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e33c482c30 <col:68> 'P' lvalue ParmVar 0x55e33c4592d8 'parser' 'P'
|     `-ReturnStmt 0x55e33c482cb8 <line:575:9, col:17>
|       `-UnaryOperator 0x55e33c482ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c482c90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c4598a8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e33c4594c8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c459548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c459808 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e33c459608 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c459680 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c459728 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e33c482e38 <col:62, line:592:5>
|     `-ReturnStmt 0x55e33c482e28 <line:591:9, col:51>
|       `-CallExpr 0x55e33c482de8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c482cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c482d68 <col:30> 'const char *' lvalue ParmVar 0x55e33c459608 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c482d88 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e33c482da8 <col:42> 'P' lvalue ParmVar 0x55e33c459680 'parser' 'P'
|         `-DeclRefExpr 0x55e33c482dc8 <col:50> 'T' lvalue ParmVar 0x55e33c459728 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c459d88 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e33c459918 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c459998 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c459ce8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e33c459a58 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c459ad8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c459b50 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c459bf8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e33c483030 <col:73, line:597:5>
|     |-CallExpr 0x55e33c482fb0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c482e50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e33c482e90 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e33c482ea0 <col:39> 'const char *' lvalue ParmVar 0x55e33c459a58 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e33c482f50 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e33c482f00 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e33c482ec0 <col:48> 'int' lvalue ParmVar 0x55e33c459ad8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e33c482f38 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e33c482f18 <col:56> 'const int' lvalue Var 0x55e33c44ad80 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e33c482f70 <col:68> 'P' lvalue ParmVar 0x55e33c459b50 'parser' 'P'
|     | `-DeclRefExpr 0x55e33c482f90 <col:76> 'T' lvalue ParmVar 0x55e33c459bf8 'x' 'T &'
|     `-ReturnStmt 0x55e33c483020 <line:596:9, col:17>
|       `-UnaryOperator 0x55e33c483008 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c482ff8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c45a338 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e33c459e00 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c459e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c45a298 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e33c459f38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c459fb0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c45a170 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e33c4831a0 <col:65, line:614:5>
|     `-ReturnStmt 0x55e33c483190 <line:613:9, col:46>
|       `-CallExpr 0x55e33c483150 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c483060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c4830d0 <col:25> 'const char *' lvalue ParmVar 0x55e33c459f38 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c4830f0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e33c483110 <col:37> 'P' lvalue ParmVar 0x55e33c459fb0 'parser' 'P'
|         `-DeclRefExpr 0x55e33c483130 <col:45> 'Vector<T>' lvalue ParmVar 0x55e33c45a170 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e33c45a768 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e33c45a3a8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c45a6c8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e33c45a460 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45a5b0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e33c4833c0 <col:55, line:618:5>
|     `-ReturnStmt 0x55e33c4833b0 <line:617:9, col:55>
|       `-CallExpr 0x55e33c483370 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4831c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c483238 <col:25> 'const char *' lvalue ParmVar 0x55e33c45a460 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e33c483258 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e33c483330 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e33c483350 <col:54> 'Vector<T>' lvalue ParmVar 0x55e33c45a5b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e33c45ad38 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e33c45a7d0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c45a848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c45ac98 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e33c45a908 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45a988 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45aa00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c45ab50 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e33c4835b8 <col:76, line:623:5>
|     |-CallExpr 0x55e33c483538 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e33c4833d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e33c483418 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e33c483428 <col:34> 'const char *' lvalue ParmVar 0x55e33c45a908 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e33c4834d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e33c483488 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e33c483448 <col:43> 'int' lvalue ParmVar 0x55e33c45a988 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e33c4834c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e33c4834a0 <col:51> 'const int' lvalue Var 0x55e33c44ad80 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e33c4834f8 <col:63> 'P' lvalue ParmVar 0x55e33c45aa00 'parser' 'P'
|     | `-DeclRefExpr 0x55e33c483518 <col:71> 'Vector<T>' lvalue ParmVar 0x55e33c45ab50 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e33c4835a8 <line:622:9, col:17>
|       `-UnaryOperator 0x55e33c483590 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c483580 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c45b278 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e33c45adb0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c45ae28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c45b1d8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e33c45aee8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45af68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45b0b0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e33c483820 <col:66, line:627:5>
|     `-ReturnStmt 0x55e33c483810 <line:626:9, col:59>
|       `-CallExpr 0x55e33c4837d0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e33c4835e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e33c483658 <col:25> 'const char *' lvalue ParmVar 0x55e33c45aee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e33c483678 <col:34> 'int' lvalue ParmVar 0x55e33c45af68 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e33c483790 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e33c4837b0 <col:58> 'Vector<T>' lvalue ParmVar 0x55e33c45b0b0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e33c45b308 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e33c4838a0 <col:25, line:633:5>
|   `-ReturnStmt 0x55e33c483890 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e33c483878 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e33c483848 <col:16> 'const bool' lvalue ->_status 0x55e33c468da8
|         `-CXXThisExpr 0x55e33c483838 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e33c45b488 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e33c45b3c0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e33c483988 <col:27, line:639:5>
|   |-BinaryOperator 0x55e33c483930 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e33c4838b8 <col:9> 'bool' lvalue ParmVar 0x55e33c45b3c0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e33c483918 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c4838e8 <col:13> 'bool' lvalue ->_status 0x55e33c468da8
|   |     `-CXXThisExpr 0x55e33c4838d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e33c483978 <line:638:9, col:17>
|     `-UnaryOperator 0x55e33c483960 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c483950 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e33c45b608 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e33c45b548 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e33c483a78 <col:39, line:644:5>
|   |-BinaryOperator 0x55e33c483a20 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e33c4839a8 <col:9> 'bool' lvalue ParmVar 0x55e33c45b548 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e33c483a08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c4839d8 <col:13> 'const bool' lvalue ->_status 0x55e33c468da8
|   |     `-CXXThisExpr 0x55e33c4839c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e33c483a68 <line:643:9, col:17>
|     `-UnaryOperator 0x55e33c483a50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c483a40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e33c45b6d0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e33c483b20 <col:30, line:651:5>
|   `-ReturnStmt 0x55e33c483b10 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e33c483af8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e33c483ac8 <col:16> 'bool' lvalue ->_read_status 0x55e33c35ee60
|         `-ImplicitCastExpr 0x55e33c483aa8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e33c483a98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e33c45b818 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e33c45b788 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e33c483c28 <col:32, line:658:5>
|   |-BinaryOperator 0x55e33c483bd0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e33c483b38 <col:9> 'bool' lvalue ParmVar 0x55e33c45b788 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e33c483bb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c483b88 <col:13> 'bool' lvalue ->_read_status 0x55e33c35ee60
|   |     `-ImplicitCastExpr 0x55e33c483b68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e33c483b58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e33c483c18 <line:657:9, col:17>
|     `-UnaryOperator 0x55e33c483c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c483bf0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e33c45b968 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e33c45b8d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e33c483d38 <col:44, line:663:5>
|   |-BinaryOperator 0x55e33c483ce0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e33c483c48 <col:9> 'bool' lvalue ParmVar 0x55e33c45b8d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e33c483cc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e33c483c98 <col:13> 'bool' lvalue ->_read_status 0x55e33c35ee60
|   |     `-ImplicitCastExpr 0x55e33c483c78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e33c483c68 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e33c483d28 <line:662:9, col:17>
|     `-UnaryOperator 0x55e33c483d10 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c483d00 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e33c45ba30 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e33c45baf8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e33c45bbc0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e33c45bc88 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e33c45bf98 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e33c45bd28 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c45bef8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e33c45be08 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e33c4840f0 <col:19, line:706:5>
|     `-IfStmt 0x55e33c4840c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e33c483e38 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e33c483ff8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e33c483fc8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e33c483f88 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e33c483e90 <col:42> '<bound member function type>' ->simple_slot 0x55e33c47d200
|       |     | `-CXXThisExpr 0x55e33c483e80 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e33c483f28 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e33c483ee0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e33c1e8ec8
|       |     | `-DeclRefExpr 0x55e33c483ec0 <col:55> 'T' lvalue ParmVar 0x55e33c45be08 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e33c483f68 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e33c4840b8 <line:705:13, col:34>
|         `-CallExpr 0x55e33c484090 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e33c484018 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e33c484070 <col:33> 'T' lvalue ParmVar 0x55e33c45be08 'x' 'T &'
|-FunctionTemplateDecl 0x55e33c45c268 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e33c45bff8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c45c1c8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e33c45c0d8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e33c4844d0 <col:31, line:717:5>
|     |-DeclStmt 0x55e33c484230 <line:713:9, col:23>
|     | `-VarDecl 0x55e33c484118 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e33c484208 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e33c484190 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e33c4841e8 <col:21> 'T' lvalue ParmVar 0x55e33c45c0d8 'x' 'T &'
|     |-IfStmt 0x55e33c484480 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e33c484328 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e33c484460 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e33c484400 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e33c484390 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|     |   | `-DeclRefExpr 0x55e33c484370 <col:14> 'T *' lvalue Var 0x55e33c484118 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e33c484440 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e33c4844b8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e33c484498 <col:16> 'T *' lvalue Var 0x55e33c484118 's' 'T *'
|-FunctionTemplateDecl 0x55e33c45c678 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e33c45c2c8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e33c45c348 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e33c45c5d8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e33c45c428 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e33c45c4c8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e33c4847e0 <col:37, line:726:5>
|     |-IfStmt 0x55e33c484770 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e33c484790 <line:723:13, col:26>
|     | | `-VarDecl 0x55e33c484538 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e33c484628 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e33c4845b0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e33c484608 <col:25> 'T' lvalue ParmVar 0x55e33c45c428 'x' 'T &'
|     | |-DeclRefExpr 0x55e33c484650 <col:16> 'T *' lvalue Var 0x55e33c484538 's' 'T *'
|     | `-BinaryOperator 0x55e33c484750 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e33c484700 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e33c484690 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|     |   | `-DeclRefExpr 0x55e33c484670 <col:14> 'T *' lvalue Var 0x55e33c484538 's' 'T *'
|     |   `-DeclRefExpr 0x55e33c484730 <col:18> 'const V' lvalue ParmVar 0x55e33c45c4c8 'value' 'const V &'
|     `-ReturnStmt 0x55e33c4847d0 <line:725:9, col:17>
|       `-UnaryOperator 0x55e33c4847b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e33c4847a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e33c45ca78 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e33c45c6e0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e33c45c9d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e33c45c790 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45c810 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45c8b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e33c485600 <col:65, line:737:5>
|     |-DeclStmt 0x55e33c484878 <line:732:9, col:26>
|     | `-VarDecl 0x55e33c484810 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e33c4855c8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e33c4855e8 <line:733:13, col:58>
|       | `-VarDecl 0x55e33c4848a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e33c484a80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e33c484a50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e33c484a38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e33c484a18 <col:26, col:58> 'String' (CXXTemporary 0x55e33c484a18)
|       |           `-CXXMemberCallExpr 0x55e33c4849a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e33c484918 <col:26> '<bound member function type>' ->find 0x55e33c47c818
|       |             | `-CXXThisExpr 0x55e33c484908 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e33c4849e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c484948 <col:31> 'const char *' lvalue ParmVar 0x55e33c45c790 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e33c4849f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c484968 <col:40> 'int' lvalue ParmVar 0x55e33c45c810 'flags' 'int'
|       |             `-DeclRefExpr 0x55e33c484988 <col:47> 'Args::Slot *' lvalue Var 0x55e33c484810 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e33c484b38 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e33c484b20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e33c484b00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e33c484ad0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|       |       `-ImplicitCastExpr 0x55e33c484ab8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e33c484a98 <col:20> 'String' lvalue Var 0x55e33c4848a0 'str' 'String'
|       `-CompoundStmt 0x55e33c4855a8 <col:61, line:736:9>
|         |-DeclStmt 0x55e33c484ff0 <line:734:13, col:76>
|         | `-VarDecl 0x55e33c484b88 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e33c484fc0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e33c484f30 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e33c484f78 <col:60> 'T' lvalue ParmVar 0x55e33c45c8b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55e33c484fa8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e33c484f98 <col:71> 'Args *' this
|         `-CallExpr 0x55e33c485578 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e33c485018 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|           | `-CXXThisExpr 0x55e33c485008 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e33c485538 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e33c485048 <col:23> 'T *' lvalue Var 0x55e33c484b88 's' 'T *'
|           | `-CallExpr 0x55e33c4854f8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e33c4852d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e33c4853d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e33c4853f0 <col:86> 'String' lvalue Var 0x55e33c4848a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e33c4854a0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e33c485430 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|           |   | `-DeclRefExpr 0x55e33c485410 <col:92> 'T *' lvalue Var 0x55e33c484b88 's' 'T *'
|           |   `-UnaryOperator 0x55e33c4854e0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e33c4854d0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e33c485558 <col:103> 'Args::Slot *' lvalue Var 0x55e33c484810 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e33c45cfc8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e33c45cae8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e33c45cb68 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e33c45cf28 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e33c45cc28 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45cca8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45cd48 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e33c45cde8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e33c4864a0 <col:88, line:745:5>
|     |-DeclStmt 0x55e33c485698 <line:741:9, col:26>
|     | `-VarDecl 0x55e33c485630 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e33c4858b8 <line:742:9, col:55>
|     | `-VarDecl 0x55e33c4856c0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e33c4858a0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e33c485870 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e33c485858 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e33c485838 <col:22, col:54> 'String' (CXXTemporary 0x55e33c485838)
|     |           `-CXXMemberCallExpr 0x55e33c4857c8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e33c485738 <col:22> '<bound member function type>' ->find 0x55e33c47c818
|     |             | `-CXXThisExpr 0x55e33c485728 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e33c485800 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e33c485768 <col:27> 'const char *' lvalue ParmVar 0x55e33c45cc28 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e33c485818 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e33c485788 <col:36> 'int' lvalue ParmVar 0x55e33c45cca8 'flags' 'int'
|     |             `-DeclRefExpr 0x55e33c4857a8 <col:43> 'Args::Slot *' lvalue Var 0x55e33c485630 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e33c485c90 <line:743:9, col:72>
|     | `-VarDecl 0x55e33c485908 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e33c485c60 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e33c485bd0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e33c485c18 <col:56> 'T' lvalue ParmVar 0x55e33c45cd48 'variable' 'T &'
|     |     `-UnaryOperator 0x55e33c485c48 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e33c485c38 <col:67> 'Args *' this
|     `-CallExpr 0x55e33c486470 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e33c485cb8 <col:9> '<bound member function type>' ->postparse 0x55e33c47ca28
|       | `-CXXThisExpr 0x55e33c485ca8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e33c486430 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e33c485ce8 <col:19> 'T *' lvalue Var 0x55e33c485908 's' 'T *'
|       | `-ParenExpr 0x55e33c486410 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e33c4863e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e33c4863c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e33c4863b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e33c486390 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e33c486360 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|       |     |       `-ImplicitCastExpr 0x55e33c486348 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e33c485d08 <col:25> 'String' lvalue Var 0x55e33c4856c0 'str' 'String'
|       |     |-CallExpr 0x55e33c4861b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e33c485f90 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e33c486090 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e33c4860b0 <col:89> 'String' lvalue Var 0x55e33c4856c0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e33c486160 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e33c4860f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|       |     | | `-DeclRefExpr 0x55e33c4860d0 <col:95> 'T *' lvalue Var 0x55e33c485908 's' 'T *'
|       |     | `-UnaryOperator 0x55e33c4861a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e33c486190 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e33c486328 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e33c486308 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e33c4862d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e33c486288 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e33c486218 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|       |         | | `-DeclRefExpr 0x55e33c4861f8 <col:109> 'T *' lvalue Var 0x55e33c485908 's' 'T *'
|       |         | `-DeclRefExpr 0x55e33c4862b8 <col:113> 'const V' lvalue ParmVar 0x55e33c45cde8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e33c4862f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e33c486450 <col:128> 'Args::Slot *' lvalue Var 0x55e33c485630 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e33c45d4f8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e33c45d040 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c45d0b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c45d458 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e33c45d178 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45d1f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45d270 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c45d318 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e33c487098 <col:75, line:754:5>
|     |-DeclStmt 0x55e33c486548 <line:749:9, col:26>
|     | `-VarDecl 0x55e33c4864e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e33c487060 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e33c487080 <line:750:13, col:58>
|       | `-VarDecl 0x55e33c486570 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e33c486750 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e33c486720 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e33c486708 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e33c4866e8 <col:26, col:58> 'String' (CXXTemporary 0x55e33c4866e8)
|       |           `-CXXMemberCallExpr 0x55e33c486678 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e33c4865e8 <col:26> '<bound member function type>' ->find 0x55e33c47c818
|       |             | `-CXXThisExpr 0x55e33c4865d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e33c4866b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c486618 <col:31> 'const char *' lvalue ParmVar 0x55e33c45d178 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e33c4866c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c486638 <col:40> 'int' lvalue ParmVar 0x55e33c45d1f8 'flags' 'int'
|       |             `-DeclRefExpr 0x55e33c486658 <col:47> 'Args::Slot *' lvalue Var 0x55e33c4864e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e33c486808 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e33c4867f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e33c4867d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e33c4867a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|       |       `-ImplicitCastExpr 0x55e33c486788 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e33c486768 <col:20> 'String' lvalue Var 0x55e33c486570 'str' 'String'
|       `-CompoundStmt 0x55e33c487040 <col:61, line:753:9>
|         |-DeclStmt 0x55e33c486be0 <line:751:13, col:63>
|         | `-VarDecl 0x55e33c486858 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e33c486bb0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e33c486b20 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e33c486b68 <col:47> 'T' lvalue ParmVar 0x55e33c45d318 'variable' 'T &'
|         |     `-UnaryOperator 0x55e33c486b98 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e33c486b88 <col:58> 'Args *' this
|         `-CallExpr 0x55e33c487010 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e33c486c08 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|           | `-CXXThisExpr 0x55e33c486bf8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e33c486fd0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e33c486c38 <col:23> 'T *' lvalue Var 0x55e33c486858 's' 'T *'
|           | `-CallExpr 0x55e33c486f90 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e33c486e20 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e33c486e68 <col:56> 'P' lvalue ParmVar 0x55e33c45d270 'parser' 'P'
|           |   |-DeclRefExpr 0x55e33c486e88 <col:64> 'String' lvalue Var 0x55e33c486570 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e33c486f38 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e33c486ec8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|           |   | `-DeclRefExpr 0x55e33c486ea8 <col:70> 'T *' lvalue Var 0x55e33c486858 's' 'T *'
|           |   `-UnaryOperator 0x55e33c486f78 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e33c486f68 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e33c486ff0 <col:81> 'Args::Slot *' lvalue Var 0x55e33c4864e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e33c45db58 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e33c45d570 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e33c45d5e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e33c45d668 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e33c45dab8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e33c45d730 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45d7b0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45d828 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c45d8c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e33c45d968 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e33c48a178 <col:98, line:762:5>
|     |-DeclStmt 0x55e33c487130 <line:758:9, col:26>
|     | `-VarDecl 0x55e33c4870c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e33c487350 <line:759:9, col:55>
|     | `-VarDecl 0x55e33c487158 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e33c487338 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e33c487308 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e33c4872f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e33c4872d0 <col:22, col:54> 'String' (CXXTemporary 0x55e33c4872d0)
|     |           `-CXXMemberCallExpr 0x55e33c487260 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e33c4871d0 <col:22> '<bound member function type>' ->find 0x55e33c47c818
|     |             | `-CXXThisExpr 0x55e33c4871c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e33c487298 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e33c487200 <col:27> 'const char *' lvalue ParmVar 0x55e33c45d730 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e33c4872b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e33c487220 <col:36> 'int' lvalue ParmVar 0x55e33c45d7b0 'flags' 'int'
|     |             `-DeclRefExpr 0x55e33c487240 <col:43> 'Args::Slot *' lvalue Var 0x55e33c4870c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e33c487770 <line:760:9, col:59>
|     | `-VarDecl 0x55e33c4873a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e33c487740 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e33c4876b0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e33c4876f8 <col:43> 'T' lvalue ParmVar 0x55e33c45d8c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e33c487728 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e33c487718 <col:54> 'Args *' this
|     `-CallExpr 0x55e33c48a148 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e33c487798 <col:9> '<bound member function type>' ->postparse 0x55e33c47ca28
|       | `-CXXThisExpr 0x55e33c487788 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e33c48a108 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e33c4877c8 <col:19> 'T *' lvalue Var 0x55e33c4873a8 's' 'T *'
|       | `-ParenExpr 0x55e33c48a0e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e33c48a0b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e33c48a0a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e33c48a088 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e33c48a068 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e33c48a038 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|       |     |       `-ImplicitCastExpr 0x55e33c48a020 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e33c4877e8 <col:25> 'String' lvalue Var 0x55e33c487158 'str' 'String'
|       |     |-CallExpr 0x55e33c489e90 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e33c489d20 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e33c489d68 <col:59> 'P' lvalue ParmVar 0x55e33c45d828 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e33c489d88 <col:67> 'String' lvalue Var 0x55e33c487158 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e33c489e38 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e33c489dc8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|       |     | | `-DeclRefExpr 0x55e33c489da8 <col:73> 'T *' lvalue Var 0x55e33c4873a8 's' 'T *'
|       |     | `-UnaryOperator 0x55e33c489e78 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e33c489e68 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e33c48a000 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e33c489fe0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e33c489fb0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e33c489f60 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e33c489ef0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|       |         | | `-DeclRefExpr 0x55e33c489ed0 <col:87> 'T *' lvalue Var 0x55e33c4873a8 's' 'T *'
|       |         | `-DeclRefExpr 0x55e33c489f90 <col:91> 'const V' lvalue ParmVar 0x55e33c45d968 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e33c489fd0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e33c48a128 <col:106> 'Args::Slot *' lvalue Var 0x55e33c4870c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e33c465e28 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e33c45dbd8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c45dc58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e33c45dcd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e33c465d88 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e33c45dda0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c45de20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c45de98 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c45df38 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e33c465c30 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e33c48b158 <col:60, line:773:5>
|     |-DeclStmt 0x55e33c48a220 <line:767:9, col:26>
|     | `-VarDecl 0x55e33c48a1b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e33c48b120 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e33c48b140 <line:768:13, col:58>
|       | `-VarDecl 0x55e33c48a248 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e33c48a428 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e33c48a3f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e33c48a3e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e33c48a3c0 <col:26, col:58> 'String' (CXXTemporary 0x55e33c48a3c0)
|       |           `-CXXMemberCallExpr 0x55e33c48a350 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e33c48a2c0 <col:26> '<bound member function type>' ->find 0x55e33c47c818
|       |             | `-CXXThisExpr 0x55e33c48a2b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e33c48a388 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c48a2f0 <col:31> 'const char *' lvalue ParmVar 0x55e33c45dda0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e33c48a3a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c48a310 <col:40> 'int' lvalue ParmVar 0x55e33c45de20 'flags' 'int'
|       |             `-DeclRefExpr 0x55e33c48a330 <col:47> 'Args::Slot *' lvalue Var 0x55e33c48a1b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e33c48a4e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e33c48a4c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e33c48a4a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e33c48a478 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|       |       `-ImplicitCastExpr 0x55e33c48a460 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e33c48a440 <col:20> 'String' lvalue Var 0x55e33c48a248 'str' 'String'
|       `-CompoundStmt 0x55e33c48b0f8 <col:61, line:772:9>
|         |-DeclStmt 0x55e33c48a820 <line:769:13, col:66>
|         | `-VarDecl 0x55e33c48a538 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e33c48a7f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e33c48a760 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e33c48a7a8 <col:49> 'T1' lvalue ParmVar 0x55e33c45df38 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e33c48a7d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e33c48a7c8 <col:61> 'Args *' this
|         |-DeclStmt 0x55e33c48ab90 <line:770:13, col:66>
|         | `-VarDecl 0x55e33c48a8a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e33c48ab60 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e33c48aad0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e33c48ab18 <col:49> 'T2' lvalue ParmVar 0x55e33c465c30 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e33c48ab48 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e33c48ab38 <col:61> 'Args *' this
|         `-CallExpr 0x55e33c48b0c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e33c48abb8 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|           | `-CXXThisExpr 0x55e33c48aba8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e33c48b088 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e33c48ac28 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e33c48abe8 <col:23> 'T1 *' lvalue Var 0x55e33c48a538 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e33c48ac08 <col:29> 'T2 *' lvalue Var 0x55e33c48a8a8 's2' 'T2 *'
|           | `-CallExpr 0x55e33c48b040 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e33c48ae10 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e33c48ae58 <col:63> 'P' lvalue ParmVar 0x55e33c45de98 'parser' 'P'
|           |   |-DeclRefExpr 0x55e33c48ae78 <col:71> 'String' lvalue Var 0x55e33c48a248 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e33c48af28 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e33c48aeb8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|           |   | `-DeclRefExpr 0x55e33c48ae98 <col:77> 'T1 *' lvalue Var 0x55e33c48a538 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e33c48afe8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e33c48af78 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|           |   | `-DeclRefExpr 0x55e33c48af58 <col:82> 'T2 *' lvalue Var 0x55e33c48a8a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e33c48b028 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e33c48b018 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e33c48b0a8 <col:94> 'Args::Slot *' lvalue Var 0x55e33c48a1b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e33c466218 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e33c465ea8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c466178 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e33c465f60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c465fe0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c466058 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e33c48b670 <col:67, line:780:5>
|     |-DeclStmt 0x55e33c48b1f0 <line:777:9, col:26>
|     | `-VarDecl 0x55e33c48b188 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e33c48b638 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e33c48b658 <line:778:13, col:58>
|       | `-VarDecl 0x55e33c48b218 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e33c48b3f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e33c48b3c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e33c48b3b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e33c48b390 <col:26, col:58> 'String' (CXXTemporary 0x55e33c48b390)
|       |           `-CXXMemberCallExpr 0x55e33c48b320 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e33c48b290 <col:26> '<bound member function type>' ->find 0x55e33c47c818
|       |             | `-CXXThisExpr 0x55e33c48b280 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e33c48b358 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c48b2c0 <col:31> 'const char *' lvalue ParmVar 0x55e33c465f60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e33c48b370 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e33c48b2e0 <col:40> 'int' lvalue ParmVar 0x55e33c465fe0 'flags' 'int'
|       |             `-DeclRefExpr 0x55e33c48b300 <col:47> 'Args::Slot *' lvalue Var 0x55e33c48b188 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e33c48b4b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e33c48b498 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e33c48b478 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e33c48b448 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|       |       `-ImplicitCastExpr 0x55e33c48b430 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e33c48b410 <col:20> 'String' lvalue Var 0x55e33c48b218 'str' 'String'
|       `-CallExpr 0x55e33c48b608 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e33c48b4d8 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|         | `-CXXThisExpr 0x55e33c48b4c8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e33c48b5b8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e33c48b528 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e33c48b508 <col:23> 'P' lvalue ParmVar 0x55e33c466058 'parser' 'P'
|         | |-DeclRefExpr 0x55e33c48b570 <col:36> 'String' lvalue Var 0x55e33c48b218 'str' 'String'
|         | `-UnaryOperator 0x55e33c48b5a0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e33c48b590 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e33c48b5e8 <col:49> 'Args::Slot *' lvalue Var 0x55e33c48b188 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e33c4665b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e33c466288 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e33c466518 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e33c466340 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c4663c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c466438 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e33c48bfe0 <col:71, line:792:5>
|     |-DeclStmt 0x55e33c48b708 <line:784:9, col:26>
|     | `-VarDecl 0x55e33c48b6a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e33c48b7d8 <line:785:9, col:29>
|     | `-VarDecl 0x55e33c48b738 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e33c48b7c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e33c48b7a0 <col:28> 'int' 1
|     |-WhileStmt 0x55e33c48be90 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e33c48beb0 <line:786:16, col:61>
|     | | `-VarDecl 0x55e33c48b800 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e33c48b9e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e33c48b9b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e33c48b998 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e33c48b978 <col:29, col:61> 'String' (CXXTemporary 0x55e33c48b978)
|     | |           `-CXXMemberCallExpr 0x55e33c48b908 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e33c48b878 <col:29> '<bound member function type>' ->find 0x55e33c47c818
|     | |             | `-CXXThisExpr 0x55e33c48b868 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e33c48b940 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e33c48b8a8 <col:34> 'const char *' lvalue ParmVar 0x55e33c466340 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e33c48b958 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e33c48b8c8 <col:43> 'int' lvalue ParmVar 0x55e33c4663c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e33c48b8e8 <col:50> 'Args::Slot *' lvalue Var 0x55e33c48b6a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e33c48ba98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e33c48ba80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e33c48ba60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e33c48ba30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|     | |       `-ImplicitCastExpr 0x55e33c48ba18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e33c48b9f8 <col:23> 'String' lvalue Var 0x55e33c48b800 'str' 'String'
|     | `-CompoundStmt 0x55e33c48be68 <col:64, line:790:9>
|     |   |-CallExpr 0x55e33c48bbf0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e33c48bac0 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|     |   | | `-CXXThisExpr 0x55e33c48bab0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e33c48bba0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e33c48bb10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e33c48baf0 <col:23> 'P' lvalue ParmVar 0x55e33c466438 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e33c48bb58 <col:36> 'String' lvalue Var 0x55e33c48b800 'str' 'String'
|     |   | | `-UnaryOperator 0x55e33c48bb88 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e33c48bb78 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e33c48bbd0 <col:49> 'Args::Slot *' lvalue Var 0x55e33c48b6a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e33c48bd88 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e33c48bc20 <col:13> 'int' lvalue Var 0x55e33c48b738 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e33c48bd70 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e33c48bd50 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e33c48bcb8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e33c48bc98 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e33c48bc80 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e33c48bc40 <col:28> 'int' lvalue Var 0x55e33c48b738 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e33c48bc60 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e33c48bd38 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e33c48bd08 <col:49> 'bool' lvalue ->_read_status 0x55e33c35ee60
|     |   |         `-ImplicitCastExpr 0x55e33c48bce8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e33c48bcd8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e33c48be38 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e33c48bda8 <col:13> 'int' lvalue ParmVar 0x55e33c4663c0 'flags' 'int'
|     |     `-UnaryOperator 0x55e33c48be20 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e33c48be08 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e33c48bde8 <col:23> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e33c48bfc0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e33c48bef8 <col:9> 'bool' lvalue ->_read_status 0x55e33c35ee60
|       | `-ImplicitCastExpr 0x55e33c48bed8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e33c48bec8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e33c48bfa0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e33c48bf80 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e33c48bf68 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e33c48bf28 <col:25> 'int' lvalue Var 0x55e33c48b738 'read_status' 'int'
|           `-IntegerLiteral 0x55e33c48bf48 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e33c466a98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e33c466628 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c4666a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c4669f8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e33c466768 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c4667e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c466860 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c466908 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e33c48cf70 <col:84, line:805:5>
|     |-DeclStmt 0x55e33c48c088 <line:796:9, col:26>
|     | `-VarDecl 0x55e33c48c020 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e33c48c158 <line:797:9, col:29>
|     | `-VarDecl 0x55e33c48c0b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e33c48c140 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e33c48c120 <col:28> 'int' 1
|     |-DeclStmt 0x55e33c48c490 <line:798:9, col:71>
|     | `-VarDecl 0x55e33c48c1a8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e33c48c460 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e33c48c3d0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e33c48c418 <col:55> 'T' lvalue ParmVar 0x55e33c466908 'variable' 'T &'
|     |     `-UnaryOperator 0x55e33c48c448 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e33c48c438 <col:66> 'Args *' this
|     |-WhileStmt 0x55e33c48ce20 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e33c48ce40 <line:799:16, col:61>
|     | | `-VarDecl 0x55e33c48c4b8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e33c48c698 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e33c48c668 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e33c48c650 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e33c48c630 <col:29, col:61> 'String' (CXXTemporary 0x55e33c48c630)
|     | |           `-CXXMemberCallExpr 0x55e33c48c5c0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e33c48c530 <col:29> '<bound member function type>' ->find 0x55e33c47c818
|     | |             | `-CXXThisExpr 0x55e33c48c520 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e33c48c5f8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e33c48c560 <col:34> 'const char *' lvalue ParmVar 0x55e33c466768 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e33c48c610 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e33c48c580 <col:43> 'int' lvalue ParmVar 0x55e33c4667e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e33c48c5a0 <col:50> 'Args::Slot *' lvalue Var 0x55e33c48c020 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e33c48c750 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e33c48c738 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e33c48c718 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e33c48c6e8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|     | |       `-ImplicitCastExpr 0x55e33c48c6d0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e33c48c6b0 <col:23> 'String' lvalue Var 0x55e33c48c4b8 'str' 'String'
|     | `-CompoundStmt 0x55e33c48cdf8 <col:64, line:803:9>
|     |   |-CallExpr 0x55e33c48cb80 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e33c48c778 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|     |   | | `-CXXThisExpr 0x55e33c48c768 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e33c48cb40 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e33c48c7a8 <col:23> 'T *' lvalue Var 0x55e33c48c1a8 's' 'T *'
|     |   | | `-CallExpr 0x55e33c48cb00 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e33c48c990 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e33c48c9d8 <col:56> 'P' lvalue ParmVar 0x55e33c466860 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e33c48c9f8 <col:64> 'String' lvalue Var 0x55e33c48c4b8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e33c48caa8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e33c48ca38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|     |   | |   | `-DeclRefExpr 0x55e33c48ca18 <col:70> 'T *' lvalue Var 0x55e33c48c1a8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e33c48cae8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e33c48cad8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e33c48cb60 <col:81> 'Args::Slot *' lvalue Var 0x55e33c48c020 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e33c48cd18 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e33c48cbb0 <col:13> 'int' lvalue Var 0x55e33c48c0b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e33c48cd00 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e33c48cce0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e33c48cc48 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e33c48cc28 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e33c48cc10 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e33c48cbd0 <col:28> 'int' lvalue Var 0x55e33c48c0b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e33c48cbf0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e33c48ccc8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e33c48cc98 <col:49> 'bool' lvalue ->_read_status 0x55e33c35ee60
|     |   |         `-ImplicitCastExpr 0x55e33c48cc78 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e33c48cc68 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e33c48cdc8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e33c48cd38 <col:13> 'int' lvalue ParmVar 0x55e33c4667e8 'flags' 'int'
|     |     `-UnaryOperator 0x55e33c48cdb0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e33c48cd98 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e33c48cd78 <col:23> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e33c48cf50 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e33c48ce88 <col:9> 'bool' lvalue ->_read_status 0x55e33c35ee60
|       | `-ImplicitCastExpr 0x55e33c48ce68 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e33c48ce58 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e33c48cf30 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e33c48cf10 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e33c48cef8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e33c48ceb8 <col:25> 'int' lvalue Var 0x55e33c48c0b8 'read_status' 'int'
|           `-IntegerLiteral 0x55e33c48ced8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e33c467078 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e33c466b10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e33c466b88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e33c466fd8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e33c466c48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e33c466cc8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e33c466d40 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e33c466e90 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e33c48dd78 <col:87, line:821:5>
|     |-DeclStmt 0x55e33c48d020 <line:809:9, col:26>
|     | `-VarDecl 0x55e33c48cfb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e33c48d0f0 <line:810:9, col:29>
|     | `-VarDecl 0x55e33c48d050 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e33c48d0d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e33c48d0b8 <col:28> 'int' 1
|     |-DeclStmt 0x55e33c48d338 <line:811:9, col:38>
|     | `-VarDecl 0x55e33c48d220 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e33c48d310 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e33c48d298 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e33c48d2f0 <col:29> 'Vector<T>' lvalue ParmVar 0x55e33c466e90 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e33c48dc28 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e33c48dc48 <line:812:16, col:61>
|     | | `-VarDecl 0x55e33c48d360 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e33c48d540 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e33c48d510 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e33c48d4f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e33c48d4d8 <col:29, col:61> 'String' (CXXTemporary 0x55e33c48d4d8)
|     | |           `-CXXMemberCallExpr 0x55e33c48d468 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e33c48d3d8 <col:29> '<bound member function type>' ->find 0x55e33c47c818
|     | |             | `-CXXThisExpr 0x55e33c48d3c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e33c48d4a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e33c48d408 <col:34> 'const char *' lvalue ParmVar 0x55e33c466c48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e33c48d4b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e33c48d428 <col:43> 'int' lvalue ParmVar 0x55e33c466cc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e33c48d448 <col:50> 'Args::Slot *' lvalue Var 0x55e33c48cfb8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e33c48d5f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e33c48d5e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e33c48d5c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e33c48d590 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e33c1abe98
|     | |       `-ImplicitCastExpr 0x55e33c48d578 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e33c48d558 <col:23> 'String' lvalue Var 0x55e33c48d360 'str' 'String'
|     | `-CompoundStmt 0x55e33c48dbf0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e33c48d6b8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e33c48d620 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e33c48d698 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e33c48d838 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e33c48d6e0 <col:13> '<bound member function type>' ->postparse 0x55e33c47ca28
|     |   | | `-CXXThisExpr 0x55e33c48d6d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e33c48d7e0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e33c48d730 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e33c48d710 <col:23> 'P' lvalue ParmVar 0x55e33c466d40 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e33c48d778 <col:36> 'String' lvalue Var 0x55e33c48d360 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e33c48d798 <col:41> 'T' lvalue Var 0x55e33c48d620 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e33c48d7c8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e33c48d7b8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e33c48d818 <col:53> 'Args::Slot *' lvalue Var 0x55e33c48cfb8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e33c48d990 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e33c48d8c8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e33c48d898 <col:17> 'bool' lvalue ->_read_status 0x55e33c35ee60
|     |   | |   `-ImplicitCastExpr 0x55e33c48d878 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e33c48d868 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e33c48d968 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e33c48d900 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e33c48d8e0 <col:17> 'Vector<T> *' lvalue Var 0x55e33c48d220 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e33c48d948 <col:30> 'T' lvalue Var 0x55e33c48d620 'sx' 'T'
|     |   |-BinaryOperator 0x55e33c48db10 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e33c48d9a8 <col:13> 'int' lvalue Var 0x55e33c48d050 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e33c48daf8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e33c48dad8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e33c48da40 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e33c48da20 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e33c48da08 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e33c48d9c8 <col:28> 'int' lvalue Var 0x55e33c48d050 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e33c48d9e8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e33c48dac0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e33c48da90 <col:49> 'bool' lvalue ->_read_status 0x55e33c35ee60
|     |   |         `-ImplicitCastExpr 0x55e33c48da70 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e33c48da60 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e33c48dbc0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e33c48db30 <col:13> 'int' lvalue ParmVar 0x55e33c466cc8 'flags' 'int'
|     |     `-UnaryOperator 0x55e33c48dba8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e33c48db90 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e33c48db70 <col:23> 'const int' lvalue Var 0x55e33c44aa98 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e33c48dd58 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e33c48dc90 <col:9> 'bool' lvalue ->_read_status 0x55e33c35ee60
|       | `-ImplicitCastExpr 0x55e33c48dc70 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e33c48dc60 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e33c48dd38 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e33c48dd18 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e33c48dd00 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e33c48dcc0 <col:25> 'int' lvalue Var 0x55e33c48d050 'read_status' 'int'
|           `-IntegerLiteral 0x55e33c48dce0 <col:40> 'int' 1
|-AccessSpecDecl 0x55e33c4670f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e33c467118 prev 0x55e33c448d98 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e33c467210 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e33c467300 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e33c48ddb0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e33c4673f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e33c48ddc0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e33c4674f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e33c4675a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e33c467648 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e33c467648
| | `-ParmVarDecl 0x55e33c467758 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e33c467f18 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e33c467f18
|   `-ParmVarDecl 0x55e33c468028 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e33c4677c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e33c467928 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e33c467b20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e33c4679d0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e33c467a48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e33c48dfa0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e33c467dd8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e33c48de10 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e33c48ddd0 <col:20> 'void *' lvalue ParmVar 0x55e33c4679d0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e33c467e40 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e33c48de98 <col:32, col:45> 'char *' array Function 0x55e33bfceb08 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e33c48de80 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e33c48de50 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e33c467a48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e33c467ea0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e33c48df60 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e33c48df20 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e33c467a48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e33c48e020 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e33c467c20 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e33c4673f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e33c48e0a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e33c48e088 <line:840:13, col:22> 'void' array Function 0x55e33bfcee68 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e33c48e070 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e33c48e040 <col:22> 'char *' lvalue ->_slot 0x55e33c467e40
| |         `-CXXThisExpr 0x55e33c48e030 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e33c467d20 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e33c4674f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e33c48e298 <col:22, line:844:9>
| |   `-CallExpr 0x55e33c48e200 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e33c48e1e8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e33c48e1c8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e33c0da8e8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e33c48e238 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e33c48e118 <col:20> 'void *' lvalue ->_ptr 0x55e33c467dd8
| |     |   `-CXXThisExpr 0x55e33c48e108 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e33c48e268 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e33c48e250 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e33c48e158 <col:26> 'char *' lvalue ->_slot 0x55e33c467e40
| |     |     `-CXXThisExpr 0x55e33c48e148 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e33c48e280 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e33c48e198 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e33c467ea0
| |         `-CXXThisExpr 0x55e33c48e188 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e33c467dd8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e33c467e40 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e33c467ea0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e33c468098 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e33c468098
| | `-ParmVarDecl 0x55e33c4681a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e33c468248 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e33c468248
|   `-ParmVarDecl 0x55e33c468358 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e33c4684f8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e33c4683c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e33c468468 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e33c468790 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e33c468988 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e33c468858 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e33c468b08 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e33c48e2d0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e33c48e2b0 <col:20> 'T *' lvalue ParmVar 0x55e33c468858 'ptr' 'T *'
|   | `-CompoundStmt 0x55e33c48e320 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e33c468a58 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e33c4674f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e33c48e4d0 <col:22, line:857:9>
|   |   `-CallExpr 0x55e33c48e4a0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e33c48e330 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e33c193018 0x55e33c13d348
|   |     |-CXXOperatorCallExpr 0x55e33c48e430 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e33c48e3c0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e33c39ffc8 0x55e33c39fbe8 0x55e33c39f818 0x55e33c39f438 0x55e33c39f058 0x55e33c39ec88
|   |     | `-MemberExpr 0x55e33c48e390 <col:29> 'T *' lvalue ->_ptr 0x55e33c468b08
|   |     |   `-CXXThisExpr 0x55e33c48e380 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e33c48e470 <col:35> 'T' lvalue ->_slot 0x55e33c468b68
|   |       `-CXXThisExpr 0x55e33c48e460 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e33c468b08 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e33c468b68 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e33c468bd0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e33c468cd0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e33c468d20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c468cb0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e33c468c90 <col:31> 'int' 48
|-FieldDecl 0x55e33c468d48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e33c468da8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e33c468e08 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e33c468f40 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e33c47c0c0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e33c47c120 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e33c47c1d0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e33c47c3f8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e33c47c300 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e33c47c548 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e33c47c4b8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e33c47c818 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e33c47c608 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e33c47c688 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e33c47c730 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e33c47ca28 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e33c47c8e0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e33c47c958 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e33c47caf8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e33c47cc48 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e33c47cbb0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e33c47cfd8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e33c47cd08 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e33c47cd88 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e33c47ce30 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e33c47cee8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e33c47d200 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e33c47d0b0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e33c47d128 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e33c47d518 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e33c47d2b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e33c47d478 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e33c47d388 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c19bd40 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c19be58 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e33c19bee8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e33c19bfb8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e33c19c0a0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c19c2b8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e33c19c160 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19c468 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e33c19c370 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e33c19c5b0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e33c19c520 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e33c19c6f8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e33c19c668 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19c840 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e33c19c7b0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19c908 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e33c19ca50 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e33c19c9c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e33c19cb18 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e33c19cc60 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e33c19cbd0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e33c19cdd8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e33c19cd18 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19cf20 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e33c19ce90 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19cfe8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e33c19d1a8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e33c19d098 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e33c19d110 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19d3f8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e33c19d268 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e33c19d2e0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e33c19d4a8 <col:86> "" ""
|-CXXMethodDecl 0x55e33c19d718 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e33c19d588 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e33c19d600 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19d8c8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e33c19d7d8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e33c19da78 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e33c19d980 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e33c19dd48 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e33c19db30 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e33c19dba8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e33c19dc20 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19e028 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e33c19de10 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e33c19de88 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e33c19df00 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e33c19e0e0 <col:115> "" ""
|-AccessSpecDecl 0x55e33c19e150 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e33c19e188 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c19f6a0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e33c19f6a0
| `-ParmVarDecl 0x55e33c19f7a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e33c19f848 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e33c19f848
| `-ParmVarDecl 0x55e33c19f958 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e33c1d4f88 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e33c3c6d80 <col:7>
|-CXXConstructorDecl 0x55e33c1d5060 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e33c1d5060
| `-ParmVarDecl 0x55e33c1d5178 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e33c1d51e8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e33c1d51e8
| `-ParmVarDecl 0x55e33c1d52f8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e33c3c9780 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c3b5928 prev 0x55e33c3aab30 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c3b5a20 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e33c3b5b10 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e33c3b5c38 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e33c3b5db8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e33c3b5f38 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e33c3b60b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e33c3c6ee8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e33c3c7758 <col:11>
|-CXXDestructorDecl 0x55e33c3c6fc0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e33c3c70f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e33c3c70f8
| `-ParmVarDecl 0x55e33c3c7208 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e33c3c72a8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e33c3c72a8
| `-ParmVarDecl 0x55e33c3c73b8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e33c3ca178 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e33c3ca288 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e33c3ca508 <col:11>
|   `-ReturnStmt 0x55e33c3ca4f8 <col:11>
|     `-UnaryOperator 0x55e33c3ca4e0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e33c3ca4d0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e33c3ca2f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e33c3ca2f8
  `-ParmVarDecl 0x55e33c3ca408 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c3b6120 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c3b6238 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e33c3b62d8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e33c3b6340 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e33c3b63a8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e33c3b6410 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e33c3b6470 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e33c3b6530 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e33c3b6590 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e33c3b65f0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e33c3c6df8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e33c3b62d8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e33c3c7768 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e33c3c77c0 <col:12>
|-CXXConstructorDecl 0x55e33c3c7428 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e33c3c7428
| `-ParmVarDecl 0x55e33c3c7538 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e33c3c75d8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e33c3c75d8
| `-ParmVarDecl 0x55e33c3c76e8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e33c3c9860 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c3a4240 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e33c3a4358 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e33c3a43e8 <col:16, col:22> col:16 public
|-EnumDecl 0x55e33c3a4410 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e33c3a4510 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e33c3a45f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3a44f0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e33c3a44d0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e33c3a45a0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e33c3a4608 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3a4580 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e33c3a4560 <col:22> 'int' 64
|-CXXMethodDecl 0x55e33c3a4948 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e33c3a4630 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e33c3a46b0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e33c3a4728 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e33c3a47a0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e33c3a4a08 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a4c08 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e33c3a4a80 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e33c3a4af8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e33c3a4cb8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a4e18 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e33c3a4d28 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e33c3a4ec0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e33c3a5220 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e33c3a51b0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e33c3a5150 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e33c3a5110 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e33be7c310 'void'
|       |-PointerType 0x55e33c1245e0 'unsigned char *'
|       | `-BuiltinType 0x55e33be7c410 'unsigned char'
|       |-TypedefType 0x55e33bf20bb0 'size_t' sugar
|       | |-Typedef 0x55e33beecaf0 'size_t'
|       | `-BuiltinType 0x55e33be7c470 'unsigned long'
|       `-PointerType 0x55e33be7cb10 'void *'
|         `-BuiltinType 0x55e33be7c310 'void'
|-CXXMethodDecl 0x55e33c3a5698 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e33c3a5290 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e33c3a5308 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e33c3a53a0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e33c3a5420 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e33c3bfd90 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e33c3bfd78 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e33c3bfd40 <col:58> 'int' 0
| |-ParmVarDecl 0x55e33c3a54a0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e33c3bfdb8 <col:76> 'int' 0
| |-ParmVarDecl 0x55e33c3a5520 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e33c3bfdd8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e33c3a5768 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a57e8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e33c3a58a8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e33c3a5948 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a59a0 <col:30>
|-CXXMethodDecl 0x55e33c3a5a18 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e33c3a5ab8 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a5b10 <col:30>
|-CXXMethodDecl 0x55e33c3a5b88 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e33c3a5c28 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a5cd8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e33c3a5d78 <col:20>
| |-OptimizeNoneAttr 0x55e33c3a5dd0 <col:30>
| `-WarnUnusedResultAttr 0x55e33c3a5df8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a5e50 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e33c3a5ef0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a5f48 <col:30>
|-CXXMethodDecl 0x55e33c3a5f98 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e33c3a6038 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a6090 <col:30>
|-CXXMethodDecl 0x55e33c3a60d8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e33c3a6178 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a61d0 <col:30>
|-CXXMethodDecl 0x55e33c3a6218 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c3a62d8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c3a63a0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e33c3a6468 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e33c3a6528 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c3a6648 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e33c3bfea0 <col:54, line:99:5>
|   `-ReturnStmt 0x55e33c3bfe90 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e33c3bfe78 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e33c3bfe48 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e33c3b6928
|         `-CXXThisExpr 0x55e33c3bfe38 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e33c3a67e8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e33c3a66f8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e33c3bff50 <col:67, line:103:5>
|   `-BinaryOperator 0x55e33c3bff30 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e33c3bfec8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e33c3b6928
|     | `-CXXThisExpr 0x55e33c3bfeb8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e33c3bff18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3bfef8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e33c3a66f8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e33c3a68e0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e33c3bffd0 <col:33, line:107:5>
|   `-ReturnStmt 0x55e33c3bffc0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e33c3bffa8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e33c3bff78 <col:16> 'void *' lvalue ->_destructor_argument 0x55e33c3b6990
|         `-CXXThisExpr 0x55e33c3bff68 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e33c3a69a0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e33c3c0600 <col:25, line:113:5>
|   |-ParenExpr 0x55e33c3c0348 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e33c3c0318 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c0088 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e33c3c0060 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e33c3c0028 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e33c3bfff8 <col:24> '<bound member function type>' ->shared 0x55e33c3a5a18
|   |   |       `-ImplicitCastExpr 0x55e33c3c0048 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e33c3bffe8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e33c3c00e8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c00c8 <col:42> 'int' 0
|   |   `-CallExpr 0x55e33c3c0278 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c0260 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c0240 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c02b8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c0158 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e33c3c02d0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c0180 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c02e8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c01b8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e33c3c0300 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c0228 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c0210 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c01d8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e33c3c0548 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e33c3c0378 <col:2> 'unsigned char *' lvalue ->_head 0x55e33c3b6730
|   | | `-CXXThisExpr 0x55e33c3c0368 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e33c3c0530 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e33c3c0510 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e33c3c03b8 <col:10> 'unsigned char *' lvalue ->_data 0x55e33c3b6798
|   |     | `-CXXThisExpr 0x55e33c3c03a8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e33c3c04f8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e33c3c04d8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e33c3c03f8 <col:18> 'unsigned char *' lvalue ->_tail 0x55e33c3b6800
|   |         | `-CXXThisExpr 0x55e33c3c03e8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e33c3c04c0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e33c3c04a0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e33c3c0438 <col:26> 'unsigned char *' lvalue ->_end 0x55e33c3b6868
|   |             | `-CXXThisExpr 0x55e33c3c0428 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e33c3c0488 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e33c3c0468 <col:33> 'int' 0
|   `-BinaryOperator 0x55e33c3c05e0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e33c3c0578 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e33c3b6928
|     | `-CXXThisExpr 0x55e33c3c0568 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e33c3c05c8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e33c3c05a8 <col:16> 'int' 0
|-CXXMethodDecl 0x55e33c3a6ae0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e33c3a6a50 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3a6b88 <col:20>
| |-OptimizeNoneAttr 0x55e33c3a6be0 <col:30>
| `-WarnUnusedResultAttr 0x55e33c3a6c08 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a6cd8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e33c3a6c48 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3a6d80 <col:20>
| |-OptimizeNoneAttr 0x55e33c3a6dd8 <col:30>
| `-WarnUnusedResultAttr 0x55e33c3a6e00 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a6f38 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e33c3a6e40 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e33c3a6fe0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a70e0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e33c3a7050 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3a7188 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a71e0 <col:30>
|-CXXMethodDecl 0x55e33c3a72a8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e33c3a7218 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e33c3a7350 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a7450 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e33c3a73c0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e33c3a74f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a75f8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e33c3a7568 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3a76a0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a76f8 <col:30>
|-CXXMethodDecl 0x55e33c3a7888 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e33c3a7738 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e33c3a77b0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e33c3bfdf8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e33c3a7938 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e33c3a7b38 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e33c3a79b0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e33c3a7a28 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3a7d48 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e33c3a7bf8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e33c3a7c70 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3a7f58 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e33c3a7e08 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e33c3a7e88 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e33c3bfe08 <col:39> 'int' 0
|-CXXMethodDecl 0x55e33c3a8028 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e33c3a80f0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e33c3a81b8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e33c3a8278 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c3a8340 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e33c3a8488 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e33c3a83f8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e33c3a8658 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e33c3a8548 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e33c3a85c0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3a8728 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e33c3a87e8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55e33c3a8888 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a88e0 <col:30>
|-CXXMethodDecl 0x55e33c3a8930 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e33c3a89d0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a8a28 <col:30>
|-CXXMethodDecl 0x55e33c3a8a78 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e33c3a8b38 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c3a8c00 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55e33c3a8ca0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a8cf8 <col:30>
|-CXXMethodDecl 0x55e33c3a8e48 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e33c3a8d38 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e33c3a8db0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3a8f98 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e33c3a8f08 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3a9070 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e33c3a9130 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e33c3a91d0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a9228 <col:30>
|-CXXMethodDecl 0x55e33c3a9278 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e33c3a9318 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a9370 <col:30>
|-CXXMethodDecl 0x55e33c3a93c0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e33c3a9488 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e33c3a9528 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a9580 <col:30>
|-CXXMethodDecl 0x55e33c3a95c8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e33c3a96e8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e33c3a9858 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e33c3a9798 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e33c3a9948 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e33c3a99e8 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a9a40 <col:30>
|-CXXMethodDecl 0x55e33c3a9a90 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e33c3a9b50 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e33c3a9d88 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e33c3a9c00 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e33c3a9c78 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3a9e38 <col:20>
| `-OptimizeNoneAttr 0x55e33c3a9e90 <col:30>
|-CXXMethodDecl 0x55e33c3a9f38 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e33c3a9fd8 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aa030 <col:30>
|-CXXMethodDecl 0x55e33c3aa080 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e33c3aa120 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aa178 <col:30>
|-CXXMethodDecl 0x55e33c3aa1c0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e33c3aa260 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aa2b8 <col:30>
|-CXXMethodDecl 0x55e33c3aa3b8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e33c3aa2f0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e33c3aa460 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aa4b8 <col:30>
|-CXXMethodDecl 0x55e33c3aa678 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e33c3aa4f0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e33c3aa568 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3aa728 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aa780 <col:30>
|-CXXMethodDecl 0x55e33c3aa828 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e33c3aa948 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e33c3aaa68 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e33c3aab08 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e33c3aab30 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e33c3aac58 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e33c3aacf8 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aad50 <col:30>
|-CXXMethodDecl 0x55e33c3aadf8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e33c3aae98 <col:20>
| `-OptimizeNoneAttr 0x55e33c3aaef0 <col:30>
|-AccessSpecDecl 0x55e33c3aaf18 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e33c3aaf40 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e33c3ab040 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e33c3ab090 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3ab020 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e33c3ab000 <col:14> 'int' 48
|-CXXMethodDecl 0x55e33c3ab0f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e33c3ab198 <col:20>
| `-OptimizeNoneAttr 0x55e33c3ab1f0 <col:30>
|-CXXMethodDecl 0x55e33c3ab268 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e33c3ab308 <col:20>
| `-OptimizeNoneAttr 0x55e33c3ab360 <col:30>
|-CXXMethodDecl 0x55e33c3ab428 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e33c3ab398 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e33c3ab5c8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e33c3ab768 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e33c3ab678 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e33c3ab810 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e33c3ab910 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e33c3abcc0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3ab8f0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e33c3ab8d0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e33c3ab9a0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e33c3abcd8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3ab980 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e33c3ab960 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e33c3aba30 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e33c3abcf0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3aba10 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e33c3ab9f0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e33c3abac0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e33c3abd08 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3abaa0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e33c3aba80 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e33c3abb50 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e33c3abd20 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3abb30 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e33c3abb10 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e33c3abbe0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e33c3abd38 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3abbc0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e33c3abba0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e33c3abc70 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e33c3abd50 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3abc50 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e33c3abc30 <col:14> 'int' 6
|-CXXMethodDecl 0x55e33c3abdb8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e33c3abe58 <col:20>
| `-OptimizeNoneAttr 0x55e33c3abeb0 <col:30>
|-CXXMethodDecl 0x55e33c3abfa8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e33c3abee8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e33c3ac050 <col:20>
| `-OptimizeNoneAttr 0x55e33c3ac0a8 <col:30>
|-CXXMethodDecl 0x55e33c3ac118 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e33c3ac240 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e33c3ac3b8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e33c3ac2f0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e33c3ac480 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e33c3ac548 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e33c3ac688 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e33c3ac5f8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e33c3ac730 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e33c3ac830 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e33c3aca30 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3ac810 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e33c3ac7f0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e33c3ac8c0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e33c3aca48 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3ac8a0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e33c3ac880 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e33c3ac950 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e33c3aca60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3ac930 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e33c3ac910 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e33c3ac9e0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e33c3aca78 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3ac9c0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e33c3ac9a0 <col:47> 'int' 16
|-CXXMethodDecl 0x55e33c3acad8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e33c3acc48 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e33c3acb88 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e33c3accf0 <col:20>
| `-OptimizeNoneAttr 0x55e33c3acd48 <col:30>
|-CXXMethodDecl 0x55e33c3acd98 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e33c3c0720 <col:18, col:36>
|   `-ReturnStmt 0x55e33c3c0710 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e33c3c06f8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e33c3c06d8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e33c3c06a8 <col:27> '<bound member function type>' ->xanno 0x55e33c3aadf8
|           `-CXXThisExpr 0x55e33c3c0698 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e33c3ace90 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e33c3c0830 <col:30, col:48>
|   `-ReturnStmt 0x55e33c3c0820 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e33c3c0808 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e33c3c07e8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e33c3c07b8 <col:39> '<bound member function type>' ->xanno 0x55e33c3aac58
|           `-CXXThisExpr 0x55e33c3c07a8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e33c3acf78 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e33c3c09c8 <col:24, col:50>
|   `-ReturnStmt 0x55e33c3c09b8 <col:26, col:47>
|     `-UnaryOperator 0x55e33c3c09a0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e33c3c0980 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e33c3c0968 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e33c3c0918 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e33c3b5c38
|         |   `-CXXMemberCallExpr 0x55e33c3c08f8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e33c3c08c8 <col:34> '<bound member function type>' ->xanno 0x55e33c3aadf8
|         |       `-CXXThisExpr 0x55e33c3c08b8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e33c3c0948 <col:46> 'int' 0
|-CXXMethodDecl 0x55e33c3ad080 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e33c3c0b98 <col:36, col:62>
|   `-ReturnStmt 0x55e33c3c0b88 <col:38, col:59>
|     `-UnaryOperator 0x55e33c3c0b70 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e33c3c0b50 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e33c3c0b38 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e33c3c0ab0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e33c3b5c38
|         |   `-CXXMemberCallExpr 0x55e33c3c0a90 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e33c3c0a60 <col:46> '<bound member function type>' ->xanno 0x55e33c3aac58
|         |       `-CXXThisExpr 0x55e33c3c0a50 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e33c3c0ae0 <col:58> 'int' 0
|-CXXMethodDecl 0x55e33c3ad198 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e33c3c0d30 <col:26, col:53>
|   `-ReturnStmt 0x55e33c3c0d20 <col:28, col:50>
|     `-UnaryOperator 0x55e33c3c0d08 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e33c3c0ce8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e33c3c0cd0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e33c3c0c80 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e33c3b5f38
|         |   `-CXXMemberCallExpr 0x55e33c3c0c60 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e33c3c0c30 <col:36> '<bound member function type>' ->xanno 0x55e33c3aadf8
|         |       `-CXXThisExpr 0x55e33c3c0c20 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e33c3c0cb0 <col:49> 'int' 0
|-CXXMethodDecl 0x55e33c3ad2b8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e33c3c0f08 <col:38, col:65>
|   `-ReturnStmt 0x55e33c3c0ef8 <col:40, col:62>
|     `-UnaryOperator 0x55e33c3c0ee0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e33c3c0ec0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e33c3c0ea8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e33c3c0e18 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e33c3b5f38
|         |   `-CXXMemberCallExpr 0x55e33c3c0df8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e33c3c0dc8 <col:48> '<bound member function type>' ->xanno 0x55e33c3aac58
|         |       `-CXXThisExpr 0x55e33c3c0db8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e33c3c0e48 <col:61> 'int' 0
|-CXXMethodDecl 0x55e33c3ad468 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e33c3ad370 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e33c3c15d8 <col:34, line:463:5>
|   |-ParenExpr 0x55e33c3c1420 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e33c3c13f0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c1058 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c1028 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c0f78 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c0f60 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c0f20 <col:23> 'int' lvalue ParmVar 0x55e33c3ad370 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c0f40 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c1008 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c0fd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c0f98 <col:33> 'int' lvalue ParmVar 0x55e33c3ad370 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e33c3c0ff0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e33c3c0fb8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e33c3c10b8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c1098 <col:56> 'int' 0
|   |   `-CallExpr 0x55e33c3c1350 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c1338 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c1318 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c1390 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c11a8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e33c3c13a8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c11d8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c13c0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c1210 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e33c3c13d8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c1300 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c12e8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c12a8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e33c3c15c8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e33c3c15b0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e33c3c1590 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e33c3c1560 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e33c3c1510 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e33c3b5c38
|         |   `-CXXMemberCallExpr 0x55e33c3c14f0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e33c3c14c0 <col:9> '<bound member function type>' ->xanno 0x55e33c3aac58
|         |       `-CXXThisExpr 0x55e33c3c14b0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e33c3c1578 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e33c3c1540 <col:21> 'int' lvalue ParmVar 0x55e33c3ad370 'i' 'int'
|-CXXMethodDecl 0x55e33c3ad6b8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e33c3ad528 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e33c3ad5a0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e33c3c1c68 <col:40, line:472:5>
|   |-ParenExpr 0x55e33c3c1a80 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e33c3c1a50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c1730 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c1700 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c1650 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c1638 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c15f8 <col:23> 'int' lvalue ParmVar 0x55e33c3ad528 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c1618 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c16e0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c16b0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c1670 <col:33> 'int' lvalue ParmVar 0x55e33c3ad528 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e33c3c16c8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e33c3c1690 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e33c3c1790 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c1770 <col:56> 'int' 0
|   |   `-CallExpr 0x55e33c3c19b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c1998 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c1978 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c19f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c1800 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e33c3c1a08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c1830 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c1a20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c1868 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e33c3c1a38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c1960 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c1948 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c1908 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e33c3c1c48 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e33c3c1bf0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e33c3c1bc0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e33c3c1b70 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e33c3b5c38
|     | |   `-CXXMemberCallExpr 0x55e33c3c1b50 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e33c3c1b20 <col:2> '<bound member function type>' ->xanno 0x55e33c3aadf8
|     | |       `-CXXThisExpr 0x55e33c3c1b10 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e33c3c1bd8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e33c3c1ba0 <col:14> 'int' lvalue ParmVar 0x55e33c3ad528 'i' 'int'
|     `-ImplicitCastExpr 0x55e33c3c1c30 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3c1c10 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e33c3ad5a0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e33c3ad878 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e33c3ad780 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e33c3c23e8 <col:36, line:485:5>
|   |-ParenExpr 0x55e33c3c2150 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c2120 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c1e00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c1dd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c1ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c1cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c1c88 <col:23> 'int' lvalue ParmVar 0x55e33c3ad780 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c1ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c1db0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c1d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c1d00 <col:33> 'int' lvalue ParmVar 0x55e33c3ad780 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c1d78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c1d60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c1d20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c1d40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e33c3c1e60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c1e40 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c2080 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c2068 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c2048 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c20c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c1ed0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e33c3c20d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c1f08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c20f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c1f40 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e33c3c2108 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c2030 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c2018 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c1fd8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e33c3c23d8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e33c3c23c0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e33c3c23a8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e33c3c2378 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e33c3c2318 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e33c3c22e8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e33c3c2260 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e33c3b5b10
|             |   `-CXXMemberCallExpr 0x55e33c3c2240 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e33c3c2210 <col:61> '<bound member function type>' ->xanno 0x55e33c3aac58
|             |       `-CXXThisExpr 0x55e33c3c2200 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e33c3c2300 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e33c3c2290 <col:74> 'int' lvalue ParmVar 0x55e33c3ad780 'i' 'int'
|-CXXMethodDecl 0x55e33c3adac8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e33c3ad938 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e33c3ad9b0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e33c3c2b38 <col:42, line:500:5>
|   |-ParenExpr 0x55e33c3c28d0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c28a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c2580 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c2550 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c2460 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c2448 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c2408 <col:23> 'int' lvalue ParmVar 0x55e33c3ad938 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c2428 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c2530 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c2518 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c2480 <col:33> 'int' lvalue ParmVar 0x55e33c3ad938 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c24f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c24e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c24a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c24c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e33c3c25e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c25c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c2800 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c27e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c27c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c2840 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c2650 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e33c3c2858 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c2688 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c2870 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c26c0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e33c3c2888 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c27b0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c2798 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c2758 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e33c3c2b18 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e33c3c2ac8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e33c3c2a98 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e33c3c2a40 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e33c3c2a10 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e33c3c29c0 <col:48, col:57> 'char [48]' lvalue ->c 0x55e33c3b5b10
|     |     |   `-CXXMemberCallExpr 0x55e33c3c29a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e33c3c2970 <col:48> '<bound member function type>' ->xanno 0x55e33c3aadf8
|     |     |       `-CXXThisExpr 0x55e33c3c2960 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e33c3c2a28 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e33c3c29f0 <col:61> 'int' lvalue ParmVar 0x55e33c3ad938 'i' 'int'
|     `-ImplicitCastExpr 0x55e33c3c2b00 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3c2ae0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e33c3ad9b0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e33c3adc88 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e33c3adb90 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e33c3c3298 <col:35, line:513:5>
|   |-ParenExpr 0x55e33c3c2fa8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c2f78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c2cd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c2ca0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c2bb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c2b98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c2b58 <col:23> 'int' lvalue ParmVar 0x55e33c3adb90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c2b78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c2c80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c2c68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c2bd0 <col:33> 'int' lvalue ParmVar 0x55e33c3adb90 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c2c48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c2c30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c2bf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c2c10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e33c3c2d30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c2d10 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c2ed8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c2ec0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c2ea0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c2f18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c2da0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e33c3c2f30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c2dd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c2f48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c2e10 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e33c3c2f60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c2e88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c2e70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c2e30 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e33c3c3288 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e33c3c3270 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e33c3c3258 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e33c3c3228 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e33c3c31a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e33c3c3170 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e33c3c3120 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e33c3b5b10
|             |   `-CXXMemberCallExpr 0x55e33c3c3100 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e33c3c30d0 <col:60> '<bound member function type>' ->xanno 0x55e33c3aac58
|             |       `-CXXThisExpr 0x55e33c3c30c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e33c3c3188 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e33c3c3150 <col:73> 'int' lvalue ParmVar 0x55e33c3adb90 'i' 'int'
|-CXXMethodDecl 0x55e33c3aded8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e33c3add48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e33c3addc0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e33c3c39b8 <col:41, line:528:5>
|   |-ParenExpr 0x55e33c3c3740 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c3710 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c3430 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c3400 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c3310 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c32f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c32b8 <col:23> 'int' lvalue ParmVar 0x55e33c3add48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c32d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c33e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c33c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c3330 <col:33> 'int' lvalue ParmVar 0x55e33c3add48 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c33a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c3390 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c3350 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c3370 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e33c3c3490 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c3470 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c3670 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c3658 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c3638 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c36b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c3500 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e33c3c36c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c3538 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c36e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c3570 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e33c3c36f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c3620 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c3608 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c35c8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e33c3c3998 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e33c3c3948 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e33c3c3918 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e33c3c38c0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e33c3c3880 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e33c3c3830 <col:47, col:56> 'char [48]' lvalue ->c 0x55e33c3b5b10
|     |     |   `-CXXMemberCallExpr 0x55e33c3c3810 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e33c3c37e0 <col:47> '<bound member function type>' ->xanno 0x55e33c3aadf8
|     |     |       `-CXXThisExpr 0x55e33c3c37d0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e33c3c3898 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e33c3c3860 <col:60> 'int' lvalue ParmVar 0x55e33c3add48 'i' 'int'
|     `-ImplicitCastExpr 0x55e33c3c3980 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3c3960 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e33c3addc0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e33c3ae098 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e33c3adfa0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e33c3c4088 <col:36, line:541:5>
|   |-ParenExpr 0x55e33c3c3e28 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c3df8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c3b50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c3b20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c3a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c3a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c39d8 <col:23> 'int' lvalue ParmVar 0x55e33c3adfa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c39f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c3b00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c3ae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c3a50 <col:33> 'int' lvalue ParmVar 0x55e33c3adfa0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c3ac8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c3ab0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c3a70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c3a90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e33c3c3bb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c3b90 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c3d58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c3d40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c3d20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c3d98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c3c20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e33c3c3db0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c3c58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c3dc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c3c90 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e33c3c3de0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c3d08 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c3cf0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c3cb0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e33c3c4078 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e33c3c4060 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e33c3c4048 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e33c3c4018 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e33c3c3fc0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e33c3c3f90 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e33c3c3f40 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e33c3b5b10
|             |   `-CXXMemberCallExpr 0x55e33c3c3f20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e33c3c3ef0 <col:61> '<bound member function type>' ->xanno 0x55e33c3aac58
|             |       `-CXXThisExpr 0x55e33c3c3ee0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e33c3c3fa8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e33c3c3f70 <col:74> 'int' lvalue ParmVar 0x55e33c3adfa0 'i' 'int'
|-CXXMethodDecl 0x55e33c3ae268 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e33c3ae158 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e33c3ae1d0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e33c3ae318 <col:20>
| `-OptimizeNoneAttr 0x55e33c3ae370 <col:30>
|-CXXMethodDecl 0x55e33c3ae4a8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e33c3ae3b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e33c3c4758 <col:35, line:562:5>
|   |-ParenExpr 0x55e33c3c44f8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c44c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c4220 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c41f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c4100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c40e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c40a8 <col:23> 'int' lvalue ParmVar 0x55e33c3ae3b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c40c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c41d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c41b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c4120 <col:33> 'int' lvalue ParmVar 0x55e33c3ae3b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c4198 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c4180 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c4140 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c4160 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e33c3c4280 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c4260 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c4428 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c4410 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c43f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c4468 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c42f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e33c3c4480 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c4328 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c4498 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c4360 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e33c3c44b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c43d8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c43c0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c4380 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e33c3c4748 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e33c3c4730 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e33c3c4718 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e33c3c46e8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e33c3c4690 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e33c3c4660 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e33c3c4610 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e33c3b5b10
|             |   `-CXXMemberCallExpr 0x55e33c3c45f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e33c3c45c0 <col:60> '<bound member function type>' ->xanno 0x55e33c3aac58
|             |       `-CXXThisExpr 0x55e33c3c45b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e33c3c4678 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e33c3c4640 <col:73> 'int' lvalue ParmVar 0x55e33c3ae3b0 'i' 'int'
|-CXXMethodDecl 0x55e33c3ae6b8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e33c3ae568 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e33c3ae5e0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e33c3c4e38 <col:41, line:577:5>
|   |-ParenExpr 0x55e33c3c4bc8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c4b98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c48f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c48c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c47d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c47b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c4778 <col:23> 'int' lvalue ParmVar 0x55e33c3ae568 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c4798 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c48a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c4888 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c47f0 <col:33> 'int' lvalue ParmVar 0x55e33c3ae568 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c4868 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c4850 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c4810 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c4830 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e33c3c4950 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c4930 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c4af8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c4ae0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c4ac0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c4b38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c49c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e33c3c4b50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c49f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c4b68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c4a30 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e33c3c4b80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c4aa8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c4a90 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c4a50 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e33c3c4e18 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e33c3c4dc8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e33c3c4d98 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e33c3c4d38 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e33c3c4d08 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e33c3c4cb8 <col:47, col:56> 'char [48]' lvalue ->c 0x55e33c3b5b10
|     |     |   `-CXXMemberCallExpr 0x55e33c3c4c98 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e33c3c4c68 <col:47> '<bound member function type>' ->xanno 0x55e33c3aadf8
|     |     |       `-CXXThisExpr 0x55e33c3c4c58 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e33c3c4d20 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e33c3c4ce8 <col:60> 'int' lvalue ParmVar 0x55e33c3ae568 'i' 'int'
|     `-ImplicitCastExpr 0x55e33c3c4e00 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3c4de0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e33c3ae5e0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e33c3ae878 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e33c3ae780 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e33c3c5568 <col:36, line:591:5>
|   |-ParenExpr 0x55e33c3c52a8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c5278 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c4fd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c4fa0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c4eb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c4e98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c4e58 <col:23> 'int' lvalue ParmVar 0x55e33c3ae780 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c4e78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c4f80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c4f68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c4ed0 <col:33> 'int' lvalue ParmVar 0x55e33c3ae780 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c4f48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c4f30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c4ef0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c4f10 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e33c3c5030 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c5010 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c51d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c51c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c51a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c5218 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c50a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e33c3c5230 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c50d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c5248 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c5110 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e33c3c5260 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c5188 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c5170 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c5130 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e33c3c5558 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e33c3c5540 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e33c3c5528 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e33c3c54f8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e33c3c5470 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e33c3c5440 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e33c3c53f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e33c3b5b10
|             |   `-CXXMemberCallExpr 0x55e33c3c53d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e33c3c53a0 <col:61> '<bound member function type>' ->xanno 0x55e33c3aac58
|             |       `-CXXThisExpr 0x55e33c3c5390 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e33c3c5458 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e33c3c5420 <col:74> 'int' lvalue ParmVar 0x55e33c3ae780 'i' 'int'
|-CXXMethodDecl 0x55e33c3aeac8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e33c3ae938 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e33c3ae9b0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e33c3c5c48 <col:42, line:606:5>
|   |-ParenExpr 0x55e33c3c59d8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e33c3c59a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c5700 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c56d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c55e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c55c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c5588 <col:23> 'int' lvalue ParmVar 0x55e33c3ae938 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c55a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c56b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e33c3c5698 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c5600 <col:33> 'int' lvalue ParmVar 0x55e33c3ae938 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c5678 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c5660 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c5620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e33c3c5640 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e33c3c5760 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c5740 <col:60> 'int' 0
|   |   `-CallExpr 0x55e33c3c5908 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c58f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c58d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c5948 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c57d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e33c3c5960 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c5808 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c5978 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c5840 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e33c3c5990 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c58b8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c58a0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c5860 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e33c3c5c28 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e33c3c5bd8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e33c3c5ba8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e33c3c5b48 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e33c3c5b18 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e33c3c5ac8 <col:48, col:57> 'char [48]' lvalue ->c 0x55e33c3b5b10
|     |     |   `-CXXMemberCallExpr 0x55e33c3c5aa8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e33c3c5a78 <col:48> '<bound member function type>' ->xanno 0x55e33c3aadf8
|     |     |       `-CXXThisExpr 0x55e33c3c5a68 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e33c3c5b30 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e33c3c5af8 <col:61> 'int' lvalue ParmVar 0x55e33c3ae938 'i' 'int'
|     `-ImplicitCastExpr 0x55e33c3c5c10 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e33c3c5bf0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e33c3ae9b0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e33c3aec60 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e33c3aeb90 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e33c3c64b8 <col:33, line:620:5>
|   |-ParenExpr 0x55e33c3c6230 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e33c3c6200 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c5e50 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c5e20 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c5cc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c5ca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c5c68 <col:23> 'int' lvalue ParmVar 0x55e33c3aeb90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c5c88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c5e00 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e33c3c5de8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c5ce0 <col:33> 'int' lvalue ParmVar 0x55e33c3aeb90 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c5dc8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c5db0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c5d00 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e33c3c5d88 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e33c3c5d70 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e33c3c5d38 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e33c3c5eb0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c5e90 <col:79> 'int' 0
|   |   `-CallExpr 0x55e33c3c6160 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c6148 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c6128 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c61a0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c5f98 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e33c3c61b8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c5fe0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c61d0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c6018 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e33c3c61e8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c6110 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c60f8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c60b8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e33c3c64a8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e33c3c6490 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e33c3c6478 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e33c3c6448 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e33c3c63c0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e33c3c6390 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e33c3c6340 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e33c3b5b10
|             |   `-CXXMemberCallExpr 0x55e33c3c6320 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e33c3c62f0 <col:67> '<bound member function type>' ->xanno 0x55e33c3aac58
|             |       `-CXXThisExpr 0x55e33c3c62e0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e33c3c63a8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e33c3c6370 <col:80> 'int' lvalue ParmVar 0x55e33c3aeb90 'i' 'int'
|-CXXMethodDecl 0x55e33c3aee78 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e33c3aed20 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e33c3aeda0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e33c3c6ce0 <col:45, line:635:5>
|   |-ParenExpr 0x55e33c3c6a28 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e33c3c69f8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e33c3c66c0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e33c3c6690 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e33c3c6530 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e33c3c6518 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e33c3c64d8 <col:23> 'int' lvalue ParmVar 0x55e33c3aed20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e33c3c64f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e33c3c6670 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e33c3c6658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e33c3c6550 <col:33> 'int' lvalue ParmVar 0x55e33c3aed20 'i' 'int'
|   |   |     `-BinaryOperator 0x55e33c3c6638 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e33c3c6620 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e33c3c6570 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e33c3ab040 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e33c3c65f8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e33c3c65e0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e33c3c65a8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e33c3c6720 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e33c3c6700 <col:79> 'int' 0
|   |   `-CallExpr 0x55e33c3c6958 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e33c3c6940 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e33c3c6920 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e33bf17970 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e33c3c6998 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c6790 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e33c3c69b0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e33c3c67d8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e33c3c69c8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e33c3c6810 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e33c3c69e0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e33c3c6908 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e33c3c68f0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e33c3c68a8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e33c3c6cc0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e33c3c6c28 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e33c3c6bf8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e33c3c6b98 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e33c3c6b68 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e33c3c6b18 <col:54, col:63> 'char [48]' lvalue ->c 0x55e33c3b5b10
|     |     |   `-CXXMemberCallExpr 0x55e33c3c6af8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e33c3c6ac8 <col:54> '<bound member function type>' ->xanno 0x55e33c3aadf8
|     |     |       `-CXXThisExpr 0x55e33c3c6ab8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e33c3c6b80 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e33c3c6b48 <col:67> 'int' lvalue ParmVar 0x55e33c3aed20 'i' 'int'
|     `-CXXConstCastExpr 0x55e33c3c6c90 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e33c3c6c78 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e33c3c6c40 <col:91> 'const void *' lvalue ParmVar 0x55e33c3aeda0 'x' 'const void *'
|-CXXMethodDecl 0x55e33c3aef48 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e33c3c6d68 <col:34, line:640:5>
|   `-ReturnStmt 0x55e33c3c6d58 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e33c3c6d40 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e33c3c6d10 <col:16> 'Packet *' lvalue ->_data_packet 0x55e33c3b66c8
|         `-CXXThisExpr 0x55e33c3c6d00 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e33c3af088 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e33c3aeff8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e33c3bfe28 <col:46> 'bool' true
|-CXXMethodDecl 0x55e33c3af208 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e33c3af140 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e33c3af2b0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e33c3afa60 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e33c3af3b0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afad0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af390 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e33c3af370 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e33c3a4510 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e33c3af440 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afae8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af420 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e33c3af400 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e33c3a45a0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e33c3af4d0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af4b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e33c3af490 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e33c3af560 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af540 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e33c3af520 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e33c3af5f0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af5d0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e33c3af5b0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e33c3af680 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af660 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e33c3af640 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e33c3af710 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb60 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af6f0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e33c3af6d0 <col:19> 'int' EnumConstant 0x55e33c3af560 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e33c3af7a0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb78 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af780 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e33c3af760 <col:19> 'int' EnumConstant 0x55e33c3af680 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e33c3af870 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afb90 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af850 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e33c3af830 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e33c3af7f0 <col:23> 'int' EnumConstant 0x55e33c3af7a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e33c3af810 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e33c3af940 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e33c3afba8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c3af920 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e33c3af900 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e33c3af8c0 <col:23> 'int' EnumConstant 0x55e33c3af7a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e33c3af8e0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e33c3afa10 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e33c3afbc0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e33c3af9f0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e33c3af9d0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e33c3af990 <col:23> 'int' EnumConstant 0x55e33c3af7a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e33c3af9b0 <col:40> 'int' 8
|-CXXMethodDecl 0x55e33c3afc00 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e33c3afca0 <col:68> "" ""
|-CXXMethodDecl 0x55e33c3afd38 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e33c3afdd8 <col:45> "" ""
|-CXXMethodDecl 0x55e33c3afe70 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e33c3aff10 <col:57> "" ""
|-CXXMethodDecl 0x55e33c3affa8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e33c3b0048 <col:45> "" ""
|-CXXMethodDecl 0x55e33c3b00e0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e33c3b0180 <col:57> "" ""
|-CXXMethodDecl 0x55e33c3b0210 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e33c3b02b0 <col:51> "" ""
|-CXXMethodDecl 0x55e33c3b0340 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e33c3b03e0 <col:63> "" ""
|-CXXMethodDecl 0x55e33c3b0470 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e33c3b0510 <col:53> "" ""
|-CXXMethodDecl 0x55e33c3b05a0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e33c3b0640 <col:65> "" ""
|-CXXMethodDecl 0x55e33c3b0758 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b06c8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e33c3b0800 <col:61> "" ""
|-CXXMethodDecl 0x55e33c3b0998 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e33c3b0888 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e33c3b0900 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e33c3b0a48 <col:67> "" ""
|-CXXMethodDecl 0x55e33c3b0b60 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b0ad0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e33c3b0c08 <col:63> "" ""
|-CXXMethodDecl 0x55e33c3b0da0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e33c3b0c90 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e33c3b0d08 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e33c3b0e50 <col:69> "" ""
|-CXXMethodDecl 0x55e33c3b0f68 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b0ed8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e33c3b1010 <col:63> "" ""
|-CXXMethodDecl 0x55e33c3b36e8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e33c3b35d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e33c3b3650 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e33c3b3798 <col:69> "" ""
|-CXXMethodDecl 0x55e33c3b38b0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b3820 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e33c3b3958 <col:62> "" ""
|-CXXMethodDecl 0x55e33c3b3af0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e33c3b39e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e33c3b3a58 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e33c3b3ba0 <col:68> "" ""
|-CXXMethodDecl 0x55e33c3b3cb8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b3c28 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e33c3b3d60 <col:63> "" ""
|-CXXMethodDecl 0x55e33c3b3ef8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e33c3b3de8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e33c3b3e60 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e33c3b3fa8 <col:69> "" ""
|-CXXMethodDecl 0x55e33c3b4038 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e33c3b40d8 <col:64> "" ""
|-CXXMethodDecl 0x55e33c3b4168 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e33c3b4208 <col:52> "" ""
|-CXXMethodDecl 0x55e33c3b4298 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e33c3b4338 <col:67> "" ""
|-CXXMethodDecl 0x55e33c3b43c8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e33c3b4468 <col:55> "" ""
|-CXXMethodDecl 0x55e33c3b4580 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b44f0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e33c3b4628 <col:58> "" ""
|-CXXMethodDecl 0x55e33c3b47c0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e33c3b46b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e33c3b4728 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e33c3b4870 <col:62> "" ""
|-CXXMethodDecl 0x55e33c3b4988 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b48f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e33c3b4a30 <col:58> "" ""
|-CXXMethodDecl 0x55e33c3b4bc8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e33c3b4ab8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e33c3b4b30 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e33c3b4c78 <col:62> "" ""
|-CXXMethodDecl 0x55e33c3b4d90 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b4d00 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e33c3b4e38 <col:60> "" ""
|-CXXMethodDecl 0x55e33c3b4fd0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e33c3b4ec0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e33c3b4f38 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e33c3b5080 <col:64> "" ""
|-CXXMethodDecl 0x55e33c3b5198 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b5108 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e33c3b5240 <col:58> "" ""
|-CXXMethodDecl 0x55e33c3b53d8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e33c3b52c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e33c3b5340 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e33c3b5488 <col:62> "" ""
|-CXXMethodDecl 0x55e33c3b55a0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e33c3b5510 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e33c3b5648 <col:59> "" ""
|-CXXMethodDecl 0x55e33c3b57e0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e33c3b56d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e33c3b5748 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e33c3b5890 <col:63> "" ""
|-AccessSpecDecl 0x55e33c3b5900 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e33c3b5928 prev 0x55e33c3aab30 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e33c3b5a20 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e33c3b5b10 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e33c3b5c38 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e33c3b5db8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e33c3b5f38 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e33c3b60b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e33c3c6ee8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e33c3c7758 <col:11>
| |-CXXDestructorDecl 0x55e33c3c6fc0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e33c3c70f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e33c3c70f8
| | `-ParmVarDecl 0x55e33c3c7208 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e33c3c72a8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e33c3c72a8
| | `-ParmVarDecl 0x55e33c3c73b8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e33c3ca178 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e33c3ca288 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e33c3ca508 <col:11>
| |   `-ReturnStmt 0x55e33c3ca4f8 <col:11>
| |     `-UnaryOperator 0x55e33c3ca4e0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e33c3ca4d0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e33c3ca2f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e33c3ca2f8
|   `-ParmVarDecl 0x55e33c3ca408 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e33c3b6120 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e33c3b6238 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e33c3b62d8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e33c3b6340 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e33c3b63a8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e33c3b6410 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e33c3b6470 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e33c3b6530 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e33c3b6590 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e33c3b65f0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e33c3c6df8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e33c3b62d8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e33c3c7768 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e33c3c77c0 <col:12>
| |-CXXConstructorDecl 0x55e33c3c7428 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e33c3c7428
| | `-ParmVarDecl 0x55e33c3c7538 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e33c3c75d8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e33c3c75d8
| | `-ParmVarDecl 0x55e33c3c76e8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e33c3c9860 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e33c3b6668 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e33c3b66c8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e33c3b6730 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e33c3b6798 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e33c3b6800 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e33c3b6868 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e33c3b68c8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e33c3b6928 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e33c3b6990 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e33c3b6a18 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e33c3b6668 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e33c3c6d90 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e33c3b68c8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e33c3c77d0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e33c3c7830 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e33c3b6bb8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e33c3b6af8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e33c3b6cb0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e33c3b6e98 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e33c3b6da0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e33c3b7168 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e33c3b6f50 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e33c3b6fc8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e33c3b7040 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3b7388 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e33c3b7238 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e33c3b72b0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e33c3bf968 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e33c3b7448 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e33c3b74c0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e33c3b7538 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e33c3bfac0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e33c3bfa30 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e33c3bfc08 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e33c3bfb78 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e33c3bfd00 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c499650 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e33c499768 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55e33c4997f8 <col:16, col:22> col:16 public
|-EnumDecl 0x55e33c499820 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55e33c499920 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e33c499b70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c499900 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e33c4998e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e33c4999b0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e33c499b88 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c499990 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55e33c499970 <col:24> 'int' 22
| |-EnumConstantDecl 0x55e33c499a40 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e33c499ba0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c499a20 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55e33c499a00 <col:24> 'int' 34
| |-EnumConstantDecl 0x55e33c499ad0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e33c499bb8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e33c499ab0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55e33c499a90 <col:25> 'int' 95
| `-EnumConstantDecl 0x55e33c499b20 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55e33c49b530 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e33c49b968 <col:7>
|-CXXConstructorDecl 0x55e33c49b638 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55e33c49b638
| `-ParmVarDecl 0x55e33c49b748 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55e33c49b7e8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e33c49b8f8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55e33c4dbf90 <col:7>
`-CXXDestructorDecl 0x55e33c49da78 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e33c499be8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55e33c499d48 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55e33c499dd8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55e33c499e10 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55e33bfd0e60 'uint32_t' sugar
|   |-Typedef 0x55e33bee53d8 'uint32_t'
|   `-TypedefType 0x55e33bebe480 '__uint32_t' sugar
|     |-Typedef 0x55e33bebe078 '__uint32_t'
|     `-BuiltinType 0x55e33be7c450 'unsigned int'
|-CXXConstructorDecl 0x55e33c499f58 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55e33c499e80 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55e33c49b438 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e33c49b978 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e33c49acf0 'base' 'int'
| | `-ImplicitCastExpr 0x55e33c49b4d8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e33c49b498 <col:16> 'int' lvalue ParmVar 0x55e33c499e80 'b' 'int'
| `-CompoundStmt 0x55e33c49b9e8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55e33c49a450 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55e33c49a020 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55e33c49a0a0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55e33c49a118 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55e33c49a198 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55e33c49a258 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55e33c49a2d8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55e33c49a8a8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55e33c49a520 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e33c49a808 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e33c49a5c8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55e33c49a668 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55e33c49a6e0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e33c49b458 <col:82> 'const ArgContext' lvalue Var 0x55e33c48e4f8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e33c49c928 <col:94, line:1067:5>
| |   |-DeclStmt 0x55e33c49bb78 <line:1054:9, col:64>
| |   | `-VarDecl 0x55e33c49ba08 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55e33c49bb30 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55e33c49bd98 <line:1055:9, col:91>
| |   | `-VarDecl 0x55e33c49bba8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55e33c49bd70 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55e33c49bd50 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55e33c49bd00 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55e33c49bce0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55e33c49bc88 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55e33c49bc38 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55e33c49bc68 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55e33c49bcc8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55e33c49bca8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55e33c49bd30 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55e33c49bef8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55e33c49be90 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55e33c49c340 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55e33c49c270 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55e33c49c1f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e33c39ae48 0x55e33c1e4428 0x55e33c1e4100 0x55e33c1d58e0 0x55e33c1d5590 0x55e33c1d4e80 0x55e33c1a77f0 0x55e33c133cb0
| |   | | |-CallExpr 0x55e33c49c130 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55e33c49bf20 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55e33c49bfd0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e33c49bfa0 <col:19, col:23> '<bound member function type>' .begin 0x55e33c1c4ae8
| |   | | | |   `-DeclRefExpr 0x55e33c49bf80 <col:19> 'const String' lvalue ParmVar 0x55e33c49a5c8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55e33c49c040 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e33c49c010 <col:32, col:36> '<bound member function type>' .end 0x55e33c1c4d00
| |   | | | |   `-DeclRefExpr 0x55e33c49bff0 <col:32> 'const String' lvalue ParmVar 0x55e33c49a5c8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55e33c49c060 <col:43> 'const bool' lvalue Var 0x55e33c49ba08 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55e33c49c0c8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55e33c49c0a8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55e33c49c0f0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e33c49be90 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55e33c49c110 <col:73> 'const int' lvalue Var 0x55e33c49bba8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55e33c49c1d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55e33c49c1a0 <col:16, col:20> '<bound member function type>' .end 0x55e33c1c4d00
| |   | |     `-DeclRefExpr 0x55e33c49c180 <col:16> 'const String' lvalue ParmVar 0x55e33c49a5c8 'str' 'const String &'
| |   | `-BinaryOperator 0x55e33c49c320 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55e33c49c2b8 <col:13> 'int' lvalue ->status 0x55e33c49ad58
| |   |   | `-CXXThisExpr 0x55e33c49c2a8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55e33c49c308 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55e33c49c2e8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c4999b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55e33c49c590 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55e33c49c478 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55e33c49c460 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55e33c49c448 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55e33c49c368 <col:13> 'int' lvalue ->status 0x55e33c49ad58
| |   | | |     `-CXXThisExpr 0x55e33c49c358 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55e33c49c428 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55e33c49c3f8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55e33c49c3a8 <col:23> 'int' lvalue ->status 0x55e33c49ad58
| |   | |   |   `-CXXThisExpr 0x55e33c49c398 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55e33c49c410 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55e33c49c3d8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c499a40 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55e33c49c570 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55e33c49c510 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55e33c49c4b8 <col:13, col:18> '<bound member function type>' .error 0x55e33c35e470
| |   |   | | `-DeclRefExpr 0x55e33c49c498 <col:13> 'const ArgContext' lvalue ParmVar 0x55e33c49a6e0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55e33c49c538 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55e33c49c4e8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55e33c49c560 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55e33c49c550 <col:20> 'bool' false
| |   |-DeclStmt 0x55e33c49c778 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55e33c49c720 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55e33c49c6b0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55e33c49c8d8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55e33c49c790 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55e33c167c78
| |   | |-DeclRefExpr 0x55e33c49c7d8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e33c49be90 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55e33c49c8a8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55e33c49c820 <col:64> 'V' lvalue ParmVar 0x55e33c49a668 'result' 'V &'
| |   `-ReturnStmt 0x55e33c49c918 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55e33c49c908 <col:16> 'bool' true
| `-CXXMethodDecl 0x55e33c4df718 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e33c4df4f0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55e33c4df5c8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55e33c4df630 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e33c4e69c0 <col:94, line:1067:5>
|     |-DeclStmt 0x55e33c4dff28 <line:1054:9, col:64>
|     | `-VarDecl 0x55e33c4dfd48 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55e33c4dfeb8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55e33c4dfe88 <col:36, col:55> 'const bool' lvalue Var 0x55e33c157be8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55e33c4e0108 <line:1055:9, col:91>
|     | `-VarDecl 0x55e33c4dff40 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55e33c4e0088 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55e33c4e0070 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55e33c4e0050 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55e33c4e0030 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55e33c4e0010 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55e33c4dffd8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55e33c4dffb8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55e33c49bc68 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55e33c4dfff8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55e33c49bca8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55e33c49bd30 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55e33c4e02a0 <line:1056:9, col:27>
|     | `-VarDecl 0x55e33c4e0238 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55e33c4e0728 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55e33c4e06d0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55e33c4e0588 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55e33c4e0558 <col:13> '<bound member function type>' ->parse 0x55e33c49a450
|     | | | | `-CXXThisExpr 0x55e33c4e0548 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55e33c4e03e8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e33c4e03b8 <col:19, col:23> '<bound member function type>' .begin 0x55e33c1c4ae8
|     | | | |   `-DeclRefExpr 0x55e33c4e0398 <col:19> 'const String' lvalue ParmVar 0x55e33c4df4f0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55e33c4e0458 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e33c4e0428 <col:32, col:36> '<bound member function type>' .end 0x55e33c1c4d00
|     | | | |   `-DeclRefExpr 0x55e33c4e0408 <col:32> 'const String' lvalue ParmVar 0x55e33c4df4f0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55e33c4e05f8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55e33c4e05d8 <col:43> 'const bool' lvalue Var 0x55e33c4dfd48 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55e33c4e04e0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55e33c4e04c8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55e33c4e04a8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55e33c4e0610 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55e33c4e0508 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55e33c4e0238 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55e33c4e0648 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55e33c4e0628 <col:73> 'const int' lvalue Var 0x55e33c4dff40 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55e33c4e06b0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55e33c4e0680 <col:16, col:20> '<bound member function type>' .end 0x55e33c1c4d00
|     | |     `-DeclRefExpr 0x55e33c4e0660 <col:16> 'const String' lvalue ParmVar 0x55e33c4df4f0 'str' 'const String &'
|     | `-BinaryOperator 0x55e33c4e0708 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55e33c49c2b8 <col:13> 'int' lvalue ->status 0x55e33c49ad58
|     |   | `-CXXThisExpr 0x55e33c49c2a8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55e33c4e06f0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55e33c49c2e8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c4999b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55e33c4e08a0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55e33c4e07c0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55e33c4e07a8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55e33c4e0790 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55e33c49c368 <col:13> 'int' lvalue ->status 0x55e33c49ad58
|     | | |     `-CXXThisExpr 0x55e33c49c358 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55e33c4e0770 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55e33c4e0740 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55e33c49c3a8 <col:23> 'int' lvalue ->status 0x55e33c49ad58
|     | |   |   `-CXXThisExpr 0x55e33c49c398 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55e33c4e0758 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55e33c49c3d8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c499a40 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55e33c4e0880 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55e33c4e0830 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55e33c4e0800 <col:13, col:18> '<bound member function type>' .error 0x55e33c35e470
|     |   | | `-DeclRefExpr 0x55e33c4e07e0 <col:13> 'const ArgContext' lvalue ParmVar 0x55e33c4df630 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55e33c4e0858 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55e33c49c4e8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55e33c4e0870 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55e33c49c550 <col:20> 'bool' false
|     |-DeclStmt 0x55e33c4e62f8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55e33c4e62a0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55e33c4e6250 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55e33c4e6230 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55e33c4e61c0 'type'
|     |       `-ElaboratedType 0x55e33c4e6170 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55e33c4e6150 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55e33c157d40 'unsigned_type'
|     |           `-BuiltinType 0x55e33be7c450 'unsigned int'
|     |-CallExpr 0x55e33c4e6950 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55e33c4e6938 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55e33c4e68b8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55e33c4e6798 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55e33c167c78 'extract_integer')
|     | |-ImplicitCastExpr 0x55e33c4e6998 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55e33c4e6980 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55e33c4e6358 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55e33c4e0238 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55e33c4e6428 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55e33c4e63d8 <col:64> 'int':'int' lvalue ParmVar 0x55e33c4df5c8 'result' 'int &'
|     `-ReturnStmt 0x55e33c4e69b0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55e33c49c908 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55e33c49ac68 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55e33c49a918 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e33c49abc8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e33c49a9c8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55e33c49aa68 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55e33c49aae0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e33c49b478 <col:71> 'const ArgContext' lvalue Var 0x55e33c48e4f8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e33c49d098 <col:83, line:1083:5>
| |   |-DeclStmt 0x55e33c49c9f0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55e33c49c988 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55e33c49d070 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55e33c49cc80 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55e33c49cb08 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55e33c49cad0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55e33c49ca18 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55e33c49ca70 <col:31> 'const String' lvalue ParmVar 0x55e33c49a9c8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55e33c49ca90 <col:36> 'V' lvalue Var 0x55e33c49c988 'x' 'V'
| |     | |   `-DeclRefExpr 0x55e33c49cab0 <col:39> 'const ArgContext' lvalue ParmVar 0x55e33c49aae0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55e33c49cc60 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55e33c49cc40 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55e33c49cc28 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55e33c49cc10 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55e33c49cb30 <col:17> 'int' lvalue ->status 0x55e33c49ad58
| |     |     |     `-CXXThisExpr 0x55e33c49cb20 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55e33c49cbf0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55e33c49cbc0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55e33c49cb70 <col:27> 'int' lvalue ->status 0x55e33c49ad58
| |     |       |   `-CXXThisExpr 0x55e33c49cb60 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55e33c49cbd8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55e33c49cba0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c499a40 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55e33c49ccb0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55e33c49cca0 <col:20> 'bool' false
| |     `-IfStmt 0x55e33c49d048 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55e33c49cd50 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55e33c49cd20 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55e33c49ccd0 <col:18> 'int' lvalue ->status 0x55e33c49ad58
| |       | |   `-CXXThisExpr 0x55e33c49ccc0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55e33c49cd38 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55e33c49cd00 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c499a40 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55e33c49cf88 <col:42, line:1079:9>
| |       | |-CallExpr 0x55e33c49cf30 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55e33c49cd80 <line:1076:13> '<bound member function type>' ->range_error 0x55e33c49b368
| |       | | | `-CXXThisExpr 0x55e33c49cd70 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55e33c49cdb0 <col:25> 'const ArgContext' lvalue ParmVar 0x55e33c49aae0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55e33c49ce90 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55e33c49cf08 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55e33c49cee8 <col:43> 'V' lvalue Var 0x55e33c49c988 'x' 'V'
| |       | `-ReturnStmt 0x55e33c49cf78 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55e33c49cf68 <col:20> 'bool' false
| |       `-CompoundStmt 0x55e33c49d028 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55e33c49cfe8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55e33c49cfa8 <col:13> 'V' lvalue ParmVar 0x55e33c49aa68 'result' 'V &'
| |         | `-DeclRefExpr 0x55e33c49cfc8 <col:22> 'V' lvalue Var 0x55e33c49c988 'x' 'V'
| |         `-ReturnStmt 0x55e33c49d018 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55e33c49d008 <col:20> 'bool' true
| `-CXXMethodDecl 0x55e33c4df0d8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e33c4deeb0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55e33c4def88 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55e33c4deff0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e33c4dfd28 <col:83, line:1083:5>
|     |-DeclStmt 0x55e33c4df360 <line:1071:9, col:12>
|     | `-VarDecl 0x55e33c4df2f8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55e33c4dfd00 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55e33c4df990 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55e33c4df8b8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55e33c4df880 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55e33c4df838 <col:14> '<bound member function type>' ->parse_saturating 0x55e33c4df718
|       | |   | `-CXXThisExpr 0x55e33c4df828 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55e33c4df3d0 <col:31> 'const String' lvalue ParmVar 0x55e33c4deeb0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55e33c4df3f0 <col:36> 'int':'int' lvalue Var 0x55e33c4df2f8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55e33c4df410 <col:39> 'const ArgContext' lvalue ParmVar 0x55e33c4deff0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55e33c4df970 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55e33c4df950 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55e33c4df938 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55e33c4df920 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55e33c49cb30 <col:17> 'int' lvalue ->status 0x55e33c49ad58
|       |     |     `-CXXThisExpr 0x55e33c49cb20 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55e33c4df900 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55e33c4df8d0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55e33c49cb70 <col:27> 'int' lvalue ->status 0x55e33c49ad58
|       |       |   `-CXXThisExpr 0x55e33c49cb60 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55e33c4df8e8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55e33c49cba0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c499a40 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55e33c4df9b0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55e33c49cca0 <col:20> 'bool' false
|       `-IfStmt 0x55e33c4dfcd8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55e33c4df9f0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55e33c4df9c0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55e33c49ccd0 <col:18> 'int' lvalue ->status 0x55e33c49ad58
|         | |   `-CXXThisExpr 0x55e33c49ccc0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55e33c4df9d8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55e33c49cd00 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e33c499a40 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55e33c4dfc10 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55e33c4dfb80 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55e33c49cd80 <line:1076:13> '<bound member function type>' ->range_error 0x55e33c49b368
|         | | | `-CXXThisExpr 0x55e33c49cd70 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55e33c4dfa10 <col:25> 'const ArgContext' lvalue ParmVar 0x55e33c4deff0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55e33c4dfbe8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55e33c4dfbb8 <col:31, col:50> 'const bool' lvalue Var 0x55e33c157be8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55e33c4dfb58 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55e33c4dfb40 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55e33c4dfb28 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55e33c4dfb08 <col:43> 'int':'int' lvalue Var 0x55e33c4df2f8 'x' 'int':'int'
|         | `-ReturnStmt 0x55e33c4dfc00 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55e33c49cf68 <col:20> 'bool' false
|         `-CompoundStmt 0x55e33c4dfcb8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55e33c4dfc88 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55e33c4dfc30 <col:13> 'int':'int' lvalue ParmVar 0x55e33c4def88 'result' 'int &'
|           | `-ImplicitCastExpr 0x55e33c4dfc70 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55e33c4dfc50 <col:22> 'int':'int' lvalue Var 0x55e33c4df2f8 'x' 'int':'int'
|           `-ReturnStmt 0x55e33c4dfca8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55e33c49d008 <col:20> 'bool' true
|-FieldDecl 0x55e33c49acf0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55e33c49ad58 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55e33c49ada8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55e33c49b060 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55e33c49ade8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55e33c49ae68 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55e33c49aee0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55e33c49af60 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55e33c49b368 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55e33c49b130 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55e33c49b1a8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55e33c49b240 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55e33c49d8f8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55e33c49d8f8
| `-ParmVarDecl 0x55e33c49da08 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55e33c49db88 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e33c49dc98 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e33c4dbfa0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e33c4dbf70 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55e33c4dbf40 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e33c4dbf10 <col:7> 'IntArg' lvalue ParmVar 0x55e33c49dc98 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e33c49acf0 'base' 'int'
| | `-ImplicitCastExpr 0x55e33c4dc098 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e33c4dc068 <col:7> 'int' xvalue .base 0x55e33c49acf0
| |     `-CXXStaticCastExpr 0x55e33c4dc038 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e33c4dc008 <col:7> 'IntArg' lvalue ParmVar 0x55e33c49dc98 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e33c49ad58 'status' 'int'
| | `-ImplicitCastExpr 0x55e33c4dc168 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e33c4dc138 <col:7> 'int' xvalue .status 0x55e33c49ad58
| |     `-CXXStaticCastExpr 0x55e33c4dc108 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e33c4dc0d8 <col:7> 'IntArg' lvalue ParmVar 0x55e33c49dc98 '' 'IntArg &&'
| `-CompoundStmt 0x55e33c4dc1c0 <col:7>
`-CXXDestructorDecl 0x55e33c4db100 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e33c4a21c0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e33c4a2418 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e33c4db028 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e33c4db5a0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55e33c4db580 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55e33c4db610 <col:19>
|-CXXConstructorDecl 0x55e33c4db208 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55e33c4db208
| `-ParmVarDecl 0x55e33c4db318 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55e33c4db3b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e33c4db4c8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e33c4dc1d0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e33c4dbef0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55e33c4dbec0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55e33c4dbe90 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55e33c4db4c8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55e33c4dc240 <col:19>
`-CXXDestructorDecl 0x55e33c4db650 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
