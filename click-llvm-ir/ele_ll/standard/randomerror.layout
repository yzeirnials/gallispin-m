
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b32909d48 prev 0x563b329014e8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b32909e40 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x563b32909ed0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x563b32909f48 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x563b3290a008 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x563b3290a0d0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x563b3290a248 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x563b3290a180 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x563b3290a2f0 <col:24>
| `-OptimizeNoneAttr 0x563b3290a348 <col:34>
|-CXXMethodDecl 0x563b3290a390 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x563b3290a648 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x563b3290a440 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563b3290a4b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x563b3290a538 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x563b3290a700 <line:229:7, col:14> col:7 private
|-FieldDecl 0x563b3290a738 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x563b3290a7a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x563b3290a828 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x563b3290ab48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x563b3290a8e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563b3290a958 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x563b3290a9d0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x563b3290aa50 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x563b3290ac60 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x563b329125d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x563b329125d8
| `-ParmVarDecl 0x563b329126e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x563b32912788 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563b32912788
| `-ParmVarDecl 0x563b32912898 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x563b329e52f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b328fcd60 prev 0x563b328fcae0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b328fce58 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x563b328fcee8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x563b328fcf48 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x563b328fd038 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x563b328fd138 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x563b328fd308 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x563b328fd1b8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x563b328fd230 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x563b328fd498 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x563b328fd3d0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x563b328fd540 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x563b328fd678 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x563b328fd5b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x563b328fd818 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x563b328fd758 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x563b328fd9b8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x563b328fd8f8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x563b328fda60 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x563b328fdb60 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x563b328fdc40 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328fdb40 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x563b328fdb20 <col:26> 'int' 1
| `-EnumConstantDecl 0x563b328fdbf0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x563b328fdc58 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328fdbd0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x563b328fdbb0 <col:44> 'int' 2
|-CXXMethodDecl 0x563b328fdda0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x563b328fdc88 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x563b328fdd08 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x563b328fdef8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x563b328fde68 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x563b328fe138 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x563b328fdfb8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x563b328fe030 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x563b328fe1e8 <col:20>
| `-OptimizeNoneAttr 0x563b328fe240 <col:30>
|-CXXMethodDecl 0x563b328fe348 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x563b328fe280 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x563b328fe3f0 <col:20>
| `-OptimizeNoneAttr 0x563b328fe448 <col:30>
|-CXXMethodDecl 0x563b328fe498 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x563b328fe560 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x563b328fe678 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x563b328fe700 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x563b328fe788 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x563b328fe810 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x563b328fe898 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x563b328fe928 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x563b328fe9e8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x563b328fea70 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x563b328feaf8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x563b328feb80 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x563b328fec08 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x563b328fec90 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x563b328fed20 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x563b328fede0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x563b328fee70 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x563b328fefc0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x563b328fef28 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x563b328ff150 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x563b328ff080 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x563b328ff400 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x563b328ff208 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x563b328ff288 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x563b328ff308 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x563b328ff4b8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x563b328ff5c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b328ff850 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328ff5a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x563b328ff580 <col:33> 'int' 0
| |-EnumConstantDecl 0x563b328ff650 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b328ff868 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328ff630 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x563b328ff610 <col:32> 'int' 20
| |-EnumConstantDecl 0x563b328ff6e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b328ff880 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328ff6c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x563b328ff6a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x563b328ff770 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563b328ff898 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328ff750 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x563b328ff730 <col:35> 'int' 100
| `-EnumConstantDecl 0x563b328ff800 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x563b328ff8b0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328ff7e0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x563b328ff7c0 <col:32> 'int' 2000
|-CXXMethodDecl 0x563b328ff8f0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x563b328ffd30 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563b328ffba0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x563b328ffc18 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b328ffe00 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x563b328fff80 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x563b328ffeb0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b32900188 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563b32900038 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x563b329000b0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b32900288 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x563b32900328 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x563b329003f0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b32900480 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x563b329006b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b32900460 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x563b32900440 <col:36> 'int' EnumConstant 0x563b329003f0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b329004d0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b32900520 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b32900570 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b329005c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563b32900610 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x563b32900660 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x563b32900798 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x563b329006d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x563b32900860 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x563b32900920 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x563b329009e0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x563b32900aa0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x563b32900bb8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x563b32900c80 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x563b32900e00 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x563b32900d30 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x563b32900f28 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x563b32901128 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x563b32900fd8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x563b32901058 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x563b3290ea78 <col:54, line:127:5>
|   |-ParenExpr 0x563b3290e928 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x563b3290e8f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x563b3290e5e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563b3290e5c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x563b3290e5a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x563b3290e590 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x563b3290e560 <col:31> 'Router *' lvalue ->_router 0x563b3290c440
|   |   |         `-CXXThisExpr 0x563b3290e550 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563b3290e648 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b3290e628 <col:48> 'int' 0
|   |   `-CallExpr 0x563b3290e858 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x563b3290e840 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b3290e820 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b3290e898 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b3290e6b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x563b3290e8b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b3290e6d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x563b3290e8c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b3290e710 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x563b3290e8e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b3290e808 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b3290e7f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b3290e7a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x563b3290e9c0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x563b3290e958 <col:9> 'Router *' lvalue ->_router 0x563b3290c440
|   | | `-CXXThisExpr 0x563b3290e948 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x563b3290e9a8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563b3290e988 <col:19> 'Router *' lvalue ParmVar 0x563b32900fd8 'r' 'Router *'
|   `-BinaryOperator 0x563b3290ea58 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x563b3290e9f0 <col:9> 'int' lvalue ->_eindex 0x563b3290c4a8
|     | `-CXXThisExpr 0x563b3290e9e0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x563b3290ea40 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563b3290ea20 <col:19> 'int' lvalue ParmVar 0x563b32901058 'eindex' 'int'
|-CXXMethodDecl 0x563b329012b0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x563b329011e8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x563b32901380 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x563b32901448 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x563b329014e8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x563b32901738 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x563b329015b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x563b32901630 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x563b329017e8 <col:20>
| `-OptimizeNoneAttr 0x563b32901840 <col:30>
|-CXXMethodDecl 0x563b32901948 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563b32901880 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x563b329019f0 <col:20>
| `-OptimizeNoneAttr 0x563b32901a48 <col:30>
|-CXXMethodDecl 0x563b32901b18 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563b32901a88 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x563b32901bc0 <col:20>
| `-OptimizeNoneAttr 0x563b32901c18 <col:30>
|-CXXMethodDecl 0x563b32901da8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x563b32901c50 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x563b32901cd0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x563b32901f38 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563b32901e70 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563b32902088 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563b32901ff8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563b329021d8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563b32902148 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563b32902328 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563b32902298 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563b329025e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x563b329023e0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x563b32902460 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x563b32902508 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x563b329026c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x563b32902780 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x563b32902a50 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563b32902900 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x563b32902978 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x563b32902b78 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x563b32902d50 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x563b32902c30 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x563b32902cb0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x563b32902f38 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x563b32902e18 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x563b32902e98 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x563b329032a8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563b32902ff8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563b32903070 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563b329030f0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563b3290e060 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563b3290e040 <col:106> 'int' 0
| `-ParmVarDecl 0x563b32903168 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b3290e098 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b3290e078 <col:126> 'int' 0
|-CXXMethodDecl 0x563b32903648 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b32903378 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563b32903410 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563b32903490 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x563b32903508 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b3290e0d0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b3290e0b0 <col:114> 'int' 0
|-CXXMethodDecl 0x563b329039d8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b32903720 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x563b32903798 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563b32903818 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x563b3290e0e8 <col:96> 'int' 0
| `-ParmVarDecl 0x563b32903890 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b3290e128 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b3290e108 <col:116> 'int' 0
|-CXXMethodDecl 0x563b32903d58 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563b32903aa8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563b32903b20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563b32903ba0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563b3290e160 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563b3290e140 <col:109> 'int' 0
| `-ParmVarDecl 0x563b32903c18 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b3290e198 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b3290e178 <col:129> 'int' 0
|-CXXMethodDecl 0x563b329040d8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b32903e28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563b32903ea0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563b32903f20 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x563b32903f98 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b3290e1d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b3290e1b0 <col:117> 'int' 0
|-CXXMethodDecl 0x563b32904468 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563b329041b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32904228 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563b329042a8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x563b3290e1e8 <col:99> 'int' 0
| `-ParmVarDecl 0x563b32904320 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563b3290e228 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563b3290e208 <col:119> 'int' 0
|-CXXMethodDecl 0x563b32904888 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x563b32904538 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x563b329045b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563b32904630 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563b329046b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563b3290e260 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563b3290e240 <col:108> 'int' 0
| `-ParmVarDecl 0x563b32904730 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x563b3290e298 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x563b3290e278 <col:141> 'int' 0
|-CXXMethodDecl 0x563b32904ca8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563b32904960 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x563b329049e0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563b32904a58 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563b32904ad8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x563b32904b58 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563b3290e2b0 <col:121> 'int' 0
|-CXXMethodDecl 0x563b329050d8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563b32904d88 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x563b32904e08 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x563b32904e80 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563b32904f00 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x563b3290e2d0 <col:98> 'int' 0
| `-ParmVarDecl 0x563b32904f80 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563b3290e2f0 <col:123> 'int' 0
|-CXXMethodDecl 0x563b329053a0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x563b329051b0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563b32905230 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x563b329052b0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x563b3290e310 <col:80> 'int' 0
|-EnumDecl 0x563b32905458 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x563b32905560 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b329057f0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b32905540 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x563b32905520 <col:42> 'int' 1
| |-EnumConstantDecl 0x563b329055f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b32905808 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329055d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x563b329055b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x563b32905680 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b32905820 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b32905660 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x563b32905640 <col:44> 'int' 4
| |-EnumConstantDecl 0x563b32905710 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563b32905838 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329056f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x563b329056d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x563b329057a0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x563b32905850 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b32905780 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x563b32905760 <col:34> 'int' 6
|-CXXMethodDecl 0x563b32905b08 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x563b32905878 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x563b32905918 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x563b32905998 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x563b32905a10 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x563b3290e3c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x563b3290e3b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x563b3290e398 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x563b3290e378 <col:98, col:105> 'String' (CXXTemporary 0x563b3290e378)
|           `-CXXTemporaryObjectExpr 0x563b3290e340 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x563b32905da8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x563b32905bd8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563b32905c50 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x563b32905cc8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563b3290e478 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563b3290e460 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563b3290e448 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563b3290e428 <col:94, col:101> 'String' (CXXTemporary 0x563b3290e428)
| |         `-CXXTemporaryObjectExpr 0x563b3290e3f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x563b3290ec60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x563b3290ebd8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x563b3290eba8 <col:9> '<bound member function type>' ->add_task_handlers 0x563b32905b08
|     | `-CXXThisExpr 0x563b3290eb98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563b3290ec18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b3290eb18 <col:27> 'Task *' lvalue ParmVar 0x563b32905bd8 'task' 'Task *'
|     |-ImplicitCastExpr 0x563b3290ec30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b3290eb38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x563b32905c50 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x563b3290ec48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563b3290eb58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x563b329057a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563b3290eb78 <col:62> 'const String' lvalue ParmVar 0x563b32905cc8 'prefix' 'const String &'
|-CXXMethodDecl 0x563b32905fb8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x563b32905e70 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563b32905ee8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563b3290e528 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563b3290e510 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563b3290e4f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563b3290e4d8 <col:70, col:77> 'String' (CXXTemporary 0x563b3290e4d8)
| |         `-CXXTemporaryObjectExpr 0x563b3290e4a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x563b3290ee38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x563b3290edb0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x563b3290ed80 <col:9> '<bound member function type>' ->add_task_handlers 0x563b32905b08
|     | `-CXXThisExpr 0x563b3290ed70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563b3290edf0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b3290ecf0 <col:27> 'Task *' lvalue ParmVar 0x563b32905e70 'task' 'Task *'
|     |-ImplicitCastExpr 0x563b3290ee08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x563b3290ed10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x563b3290ee20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563b3290ed30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x563b329057a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563b3290ed50 <col:57> 'const String' lvalue ParmVar 0x563b32905ee8 'prefix' 'const String &'
|-CXXMethodDecl 0x563b32906298 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x563b32906080 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32906100 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32906178 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x563b32906548 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x563b32906368 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b329063e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32906468 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x563b32906838 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563b32906618 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32906698 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32906710 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x563b32906ae8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x563b32906908 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32906988 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32906a08 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x563b32906d98 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x563b32906bb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32906c38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32906cb8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x563b32907048 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x563b32906e68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32906ee8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32906f60 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x563b329072f8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x563b32907118 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32907198 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32907218 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x563b32907608 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x563b32907420 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b329074a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32907520 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x563b329078e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x563b329076d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32907758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32907800 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x563b32907bc8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x563b329079b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32907a38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32907ae0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x563b32907e30 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563b32907c98 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563b32907d18 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563b32907d90 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x563b329080d8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x563b32907f00 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563b32907f80 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563b32907ff8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x563b32908388 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x563b329081a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32908228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b329082a8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x563b32908638 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x563b32908458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b329084d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32908550 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x563b329088e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x563b32908708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32908788 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32908800 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x563b32908bb8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x563b329089b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32908a38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563b32908ad8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x563b32908ee8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x563b32908c88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563b32908d08 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x563b32908d80 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x563b32908df8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b3290e540 <col:93> 'bool' false
|-CXXMethodDecl 0x563b329090d0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563b32908fb8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x563b32909038 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x563b329092a8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563b32909190 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x563b32909210 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x563b32909588 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563b32909368 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x563b329093e0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x563b32909460 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x563b329094d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x563b32909878 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563b32909658 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x563b329096d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x563b32909750 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x563b329097c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x563b32909ab0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x563b32909950 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x563b329099d0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x563b32909c98 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x563b32909b78 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x563b32909bf8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x563b32909d48 prev 0x563b329014e8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b32909e40 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x563b32909ed0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x563b32909f48 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x563b3290a008 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x563b3290a0d0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x563b3290a248 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x563b3290a180 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x563b3290a2f0 <col:24>
| | `-OptimizeNoneAttr 0x563b3290a348 <col:34>
| |-CXXMethodDecl 0x563b3290a390 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x563b3290a648 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x563b3290a440 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563b3290a4b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x563b3290a538 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x563b3290a700 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x563b3290a738 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x563b3290a7a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x563b3290a828 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x563b3290ab48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x563b3290a8e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563b3290a958 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x563b3290a9d0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x563b3290aa50 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x563b3290ac60 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x563b329125d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x563b329125d8
| | `-ParmVarDecl 0x563b329126e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x563b32912788 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563b32912788
| | `-ParmVarDecl 0x563b32912898 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x563b329e52f0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563b3290acd8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x563b3290ad78 <col:38> "" ""
|-CXXMethodDecl 0x563b3290ae08 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x563b3290aea8 <col:44> "" ""
|-AccessSpecDecl 0x563b3290af18 <line:260:3, col:10> col:3 private
|-EnumDecl 0x563b3290af40 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x563b3290b040 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x563b3290b090 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b3290b020 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x563b3290b000 <col:27> 'int' 4
|-FieldDecl 0x563b3290b148 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x563b3290b2f8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x563b3290b3b0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x563b3290c440 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x563b3290c4a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x563b3290c5f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x563b3290c538 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x563b3290c7a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x563b3290c6b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x563b3290c988 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x563b3290c868 <col:20> col:23 'int'
| `-ParmVarDecl 0x563b3290c8e8 <col:25> col:28 'int'
|-CXXMethodDecl 0x563b3290cc30 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x563b3290ca50 <col:23> col:26 'int'
| |-ParmVarDecl 0x563b3290cad0 <col:28> col:31 'int'
| `-ParmVarDecl 0x563b3290cb48 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x563b3290cce8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x563b3290cdb0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x563b3290ce00 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x563b3290ce50 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x563b3290d030 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x563b3290cee0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x563b3290cf58 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b3290d2d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x563b3290d0f8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x563b3290d178 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x563b3290d1f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x563b3290d4f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x563b3290d3a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x563b3290d428 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x563b3290d830 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x563b3290d5b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x563b3290d638 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x563b3290d6b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x563b3290d730 <col:57> col:60 'int'
|-CXXMethodDecl 0x563b3290da18 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563b3290d900 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x563b3290d980 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x563b3290db68 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x563b3290dad8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x563b3290dee8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x563b3290dc28 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x563b3290dca8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x563b3290dd20 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x563b3290dda0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x563b3290e000 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class RandomBitErrors
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int [9] _p_error
       144 |   unsigned int _p_bit_error
       148 |   int _kind
       152 |   _Bool _on
           | [sizeof=160, dsize=153, align=8,
           |  nvsize=153, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b32915748 <../elements/standard/randomerror.hh:30:1, line:55:1> line:30:7 class RandomBitErrors definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x563b329158a8 <col:1, col:7> col:7 implicit referenced class RandomBitErrors
|-FieldDecl 0x563b329159e0 <line:32:3, col:17> col:7 _p_error 'int [9]'
|-FieldDecl 0x563b32915a48 <line:33:3, col:12> col:12 referenced _p_bit_error 'unsigned int'
|-FieldDecl 0x563b32915ab0 <line:34:3, col:7> col:7 referenced _kind 'int'
|-FieldDecl 0x563b32915b10 <line:35:3, col:8> col:8 referenced _on 'bool'
|-AccessSpecDecl 0x563b32915b60 <line:37:2, col:8> col:2 public
|-CXXConstructorDecl 0x563b32915bf0 <line:39:3, col:19> col:3 RandomBitErrors 'void ()'
|-CXXMethodDecl 0x563b32915cf0 <line:41:3, col:62> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x563b328fe498 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x563b32916f80 <col:34, col:62>
|   `-ReturnStmt 0x563b32916f70 <col:36, col:43>
|     `-ImplicitCastExpr 0x563b32916f58 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x563b32916f30 <col:43> 'const char [16]' lvalue "RandomBitErrors"
|-CXXMethodDecl 0x563b32915db8 <line:42:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x563b328fe560 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x563b32916fe0 <col:34, col:54>
|   `-ReturnStmt 0x563b32916fd0 <col:36, col:43>
|     `-ImplicitCastExpr 0x563b32916fb8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x563b32916f98 <col:43> 'const char []' lvalue Var 0x563b328fe810 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x563b32915e80 <line:44:3, col:55> col:12 p_bit_error 'unsigned int () const'
| `-CompoundStmt 0x563b32917060 <col:32, col:55>
|   `-ReturnStmt 0x563b32917050 <col:34, col:41>
|     `-ImplicitCastExpr 0x563b32917038 <col:41> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563b32917008 <col:41> 'const unsigned int' lvalue ->_p_bit_error 0x563b32915a48
|         `-CXXThisExpr 0x563b32916ff8 <col:41> 'const RandomBitErrors *' implicit this
|-CXXMethodDecl 0x563b32915f48 <line:45:3, col:36> col:7 kind 'int () const'
| `-CompoundStmt 0x563b329170e0 <col:20, col:36>
|   `-ReturnStmt 0x563b329170d0 <col:22, col:29>
|     `-ImplicitCastExpr 0x563b329170b8 <col:29> 'int' <LValueToRValue>
|       `-MemberExpr 0x563b32917088 <col:29> 'const int' lvalue ->_kind 0x563b32915ab0
|         `-CXXThisExpr 0x563b32917078 <col:29> 'const RandomBitErrors *' implicit this
|-CXXMethodDecl 0x563b32916008 <line:46:3, col:33> col:8 on 'bool () const'
| `-CompoundStmt 0x563b32917160 <col:19, col:33>
|   `-ReturnStmt 0x563b32917150 <col:21, col:28>
|     `-ImplicitCastExpr 0x563b32917138 <col:28> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563b32917108 <col:28> 'const bool' lvalue ->_on 0x563b32915b10
|         `-CXXThisExpr 0x563b329170f8 <col:28> 'const RandomBitErrors *' implicit this
|-CXXMethodDecl 0x563b32916150 <line:47:3, col:30> col:8 set_bit_error 'void (unsigned int)'
| `-ParmVarDecl 0x563b329160c0 <col:22> col:30 'unsigned int'
|-CXXMethodDecl 0x563b32916430 <line:49:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x563b328ffd30 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x563b329162e0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x563b32916358 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x563b32916500 <line:50:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x563b32902780 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x563b32917198 <col:37, col:52>
|   `-ReturnStmt 0x563b32917188 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x563b32917178 <col:46> 'bool' true
|-CXXMethodDecl 0x563b329165c0 <line:51:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x563b328ffe00 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x563b32916700 <line:53:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x563b328fd678 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x563b32916670 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x563b329167d8 <line:30:7> col:7 implicit RandomBitErrors 'void (const RandomBitErrors &)' inline default_delete noexcept-unevaluated 0x563b329167d8
| `-ParmVarDecl 0x563b329168e8 <col:7> col:7 'const RandomBitErrors &'
|-CXXConstructorDecl 0x563b32916988 <col:7> col:7 implicit RandomBitErrors 'void (RandomBitErrors &&)' inline default_delete noexcept-unevaluated 0x563b32916988
| `-ParmVarDecl 0x563b32916a98 <col:7> col:7 'RandomBitErrors &&'
|-CXXMethodDecl 0x563b32916b38 <col:7> col:7 implicit operator= 'RandomBitErrors &(const RandomBitErrors &)' inline default_delete noexcept-unevaluated 0x563b32916b38
| `-ParmVarDecl 0x563b32916c48 <col:7> col:7 'const RandomBitErrors &'
|-CXXMethodDecl 0x563b32916cb8 <col:7> col:7 implicit operator= 'RandomBitErrors &(RandomBitErrors &&)' inline default_delete noexcept-unevaluated 0x563b32916cb8
| `-ParmVarDecl 0x563b32916dc8 <col:7> col:7 'RandomBitErrors &&'
`-CXXDestructorDecl 0x563b32916e50 <col:7> col:7 implicit ~RandomBitErrors 'void ()' inline default noexcept-unevaluated 0x563b32916e50
  `-Overrides: [ 0x563b328fd038 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.RandomBitErrors = type <{ %class.Element.base, [9 x i32], i32, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.RandomBitErrors.base = type <{ %class.Element.base, [9 x i32], i32, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b326d0c00 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563b326d0d18 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x563b326d0db8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x563b326d0e18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x563b326d0e78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x563b326d0f28 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b326d1230 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b326d1348 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x563b326d13f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x563b326d1458 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x563b326d14e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x563b326d7580 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b326d79b8 <col:12>
|-CXXConstructorDecl 0x563b326d7688 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563b326d7798 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563b326d13f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x563b326d9f40 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x563b326d9f10 <col:12> 'const char *const' lvalue .data 0x563b326d13f0
| |     `-DeclRefExpr 0x563b326d9ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326d7798 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563b326d1458 'length' 'int'
| | `-ImplicitCastExpr 0x563b326d9fd0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b326d9fa0 <col:12> 'const int' lvalue .length 0x563b326d1458
| |     `-DeclRefExpr 0x563b326d9f80 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326d7798 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563b326d14e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x563b326da060 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x563b326da030 <col:12> 'String::memo_t *const' lvalue .memo 0x563b326d14e8
| |     `-DeclRefExpr 0x563b326da010 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326d7798 '' 'const String::rep_t &'
| `-CompoundStmt 0x563b326da0b8 <col:12>
|-CXXConstructorDecl 0x563b326d7838 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b326d7838
| `-ParmVarDecl 0x563b326d7948 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x563b326dcea0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563b326e88b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563b326e89c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x563b326e8ee0 <col:12>
|   |-BinaryOperator 0x563b326e8cf8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563b326e8cb0 <col:12> 'const char *' lvalue ->data 0x563b326d13f0
|   | | `-CXXThisExpr 0x563b326e8ca0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563b326e8ce0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x563b326e8c70 <col:12> 'const char *const' lvalue .data 0x563b326d13f0
|   |     `-DeclRefExpr 0x563b326e8c50 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326e89c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563b326e8dc0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x563b326e8d78 <col:12> 'int' lvalue ->length 0x563b326d1458
|   | | `-CXXThisExpr 0x563b326e8d68 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563b326e8da8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x563b326e8d38 <col:12> 'const int' lvalue .length 0x563b326d1458
|   |     `-DeclRefExpr 0x563b326e8d18 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326e89c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563b326e8e88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x563b326e8e40 <col:12> 'String::memo_t *' lvalue ->memo 0x563b326d14e8
|   | | `-CXXThisExpr 0x563b326e8e30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563b326e8e70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x563b326e8e00 <col:12> 'String::memo_t *const' lvalue .memo 0x563b326d14e8
|   |     `-DeclRefExpr 0x563b326e8de0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326e89c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x563b326e8ed0 <col:12>
|     `-UnaryOperator 0x563b326e8eb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b326e8ea8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x563b326e8a38 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b326e8a38
  `-ParmVarDecl 0x563b326e8b48 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b326c8170 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b326c8288 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x563b326c8318 <col:16, col:22> col:16 public
|-TypedefDecl 0x563b326c8358 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563b3239bdc0 'const char *'
|   `-QualType 0x563b3239b311 'const char' const
|     `-BuiltinType 0x563b3239b310 'char'
|-TypedefDecl 0x563b326c83e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x563b326c83b0 'String::const_iterator' sugar
|   |-Typedef 0x563b326c8358 'const_iterator'
|   `-PointerType 0x563b3239bdc0 'const char *'
|     `-QualType 0x563b3239b311 'const char' const
|       `-BuiltinType 0x563b3239b310 'char'
|-TypedefDecl 0x563b326c8550 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x563b326c84c0 'int (String::*)() const'
|   |-RecordType 0x563b326c8200 'String'
|   | `-CXXRecord 0x563b326c8170 'String'
|   `-ParenType 0x563b326c8460 'int () const' sugar
|     `-FunctionProtoType 0x563b3269bff0 'int () const' const cdecl
|       `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b326c85b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x563b324f09b0 'int64_t' sugar
|   |-Typedef 0x563b324042d0 'int64_t'
|   `-TypedefType 0x563b323dd4d0 '__int64_t' sugar
|     |-Typedef 0x563b323dd0a8 '__int64_t'
|     `-BuiltinType 0x563b3239b390 'long'
|-TypedefDecl 0x563b326c8620 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563b324f08d0 'uint64_t' sugar
|   |-Typedef 0x563b32404470 'uint64_t'
|   `-TypedefType 0x563b323dd560 '__uint64_t' sugar
|     |-Typedef 0x563b323dd118 '__uint64_t'
|     `-BuiltinType 0x563b3239b430 'unsigned long'
|-TypedefDecl 0x563b326c86b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x563b326c8680 'String::intmax_t' sugar
|   |-Typedef 0x563b326c85b8 'intmax_t'
|   `-TypedefType 0x563b324f09b0 'int64_t' sugar
|     |-Typedef 0x563b324042d0 'int64_t'
|     `-TypedefType 0x563b323dd4d0 '__int64_t' sugar
|       |-Typedef 0x563b323dd0a8 '__int64_t'
|       `-BuiltinType 0x563b3239b390 'long'
|-TypedefDecl 0x563b326c8740 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x563b326c8710 'String::uintmax_t' sugar
|   |-Typedef 0x563b326c8620 'uintmax_t'
|   `-TypedefType 0x563b324f08d0 'uint64_t' sugar
|     |-Typedef 0x563b32404470 'uint64_t'
|     `-TypedefType 0x563b323dd560 '__uint64_t' sugar
|       |-Typedef 0x563b323dd118 '__uint64_t'
|       `-BuiltinType 0x563b3239b430 'unsigned long'
|-CXXConstructorDecl 0x563b326c8800 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x563b326c89a8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x563b326c88e8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x563b326c8b58 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x563b326c8a98 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x563b326c8cb0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x563b326c8c20 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x563b326c8ec8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x563b326c8d78 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x563b326c8df8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x563b326c90e8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x563b326c8f98 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x563b326c9018 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x563b326c9308 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563b326c91b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x563b326c9238 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x563b326c9528 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x563b326c93d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x563b326c9458 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x563b326c96b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x563b326c95f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x563b326c9838 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x563b326c9778 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x563b326c99c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x563b326c9900 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x563b326c9b20 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x563b326c9a90 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x563b326c9c78 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x563b326c9be8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x563b326c9dd0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x563b326c9d40 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x563b326c9f58 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x563b326c9e98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x563b326ca0e8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x563b326ca020 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x563b326ca278 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x563b326ca1b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x563b326ca408 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x563b326ca340 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x563b326ca500 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x563b326ca628 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x563b326ca7a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x563b326ca6e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x563b326ca8f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x563b326ca868 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x563b326ca9b0 <col:63> "" ""
|-CXXMethodDecl 0x563b326caaf8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x563b326caa38 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x563b326cad08 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x563b326cabb8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x563b326cac38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x563b326caf28 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x563b326cadd0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x563b326cae50 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x563b326cb208 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x563b326cafe8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x563b326cb068 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x563b326d7050 <col:55> 'int' 10
| `-ParmVarDecl 0x563b326cb0e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b326d7070 <col:76> 'bool' true
|-CXXMethodDecl 0x563b326cb4e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x563b326cb2d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x563b326cb350 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x563b326d7080 <col:56> 'int' 10
| `-ParmVarDecl 0x563b326cb3c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b326d70a0 <col:77> 'bool' true
|-CXXMethodDecl 0x563b326cb5f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x563b326cb6b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x563b326cb780 <line:81:5, col:60> col:52 used c_str 'const char *() const'
| |-NoInlineAttr 0x563b326cb820 <col:20>
| `-OptimizeNoneAttr 0x563b326cb878 <col:30>
|-CXXConversionDecl 0x563b326cb968 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563b326cba38 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x563b326cbaf8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x563b326cbbe8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563b326cbca8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563b326cbe28 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x563b326cbd60 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x563b326cbf78 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x563b326cbee8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x563b326cc068 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x563b326cc128 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x563b326cc378 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x563b326cc1e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x563b326cc260 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x563b326cc5d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x563b326cc440 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x563b326cc4c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x563b326cc6a8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x563b326cc8b8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x563b326cc760 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x563b326cc7e0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x563b326ccad8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x563b326cc980 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x563b326cca00 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x563b326ccc68 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x563b326ccba0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x563b326ccd58 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x563b326ccec8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x563b326cce08 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563b326cd0d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x563b326ccf88 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563b326cd008 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563b326cd2f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x563b326cd198 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x563b326cd210 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x563b326cd480 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x563b326cd3b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563b326cd6a0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x563b326cd540 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x563b326cd5c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563b326cd7f0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x563b326cd760 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x563b326cd9c8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x563b326cd8b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563b326cd930 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x563b326cdb18 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x563b326cda88 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x563b326cdd30 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x563b326cdbd0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x563b326cdc50 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x563b326d70b0 <col:39> 'int' 0
|-CXXMethodDecl 0x563b326cdf50 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x563b326cddf0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x563b326cde70 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x563b326d70d0 <col:48> 'int' 0
|-CXXMethodDecl 0x563b326ce130 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x563b326ce010 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x563b326ce090 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x563b326d70f0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x563b326ce200 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x563b326ce2c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x563b326ce380 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x563b326ce440 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x563b326ce500 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x563b326ce6a8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x563b326ce5b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x563b326ce828 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x563b326ce760 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x563b326cea00 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x563b326ce8e8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x563b326ceb78 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x563b326ceab8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x563b326cecc0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x563b326cec30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563b326cee10 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x563b326ced80 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x563b326cefe8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x563b326ceed0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563b326cef50 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563b326cf1c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563b326cf0b0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x563b326cf130 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x563b326cf318 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x563b326cf288 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x563b326cf528 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x563b326cf3d8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x563b326cf458 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x563b326cf688 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x563b326cf5f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563b326cf7e0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x563b326cf748 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x563b326cf888 <col:57> "" ""
|-CXXMethodDecl 0x563b326cf998 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x563b326cf908 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x563b326cfae8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x563b326cfa58 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x563b326cfc68 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x563b326cfba0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x563b326cfd30 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x563b326cfdf0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x563b326cfeb0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x563b326cff50 <col:49> "" ""
|-CXXMethodDecl 0x563b326cffe0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x563b326d00a0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x563b326d0190 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x563b326d0258 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x563b326d0318 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x563b326d03d8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x563b326d04d0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x563b326d0598 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x563b326d0660 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x563b326d0838 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x563b326d0718 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x563b326d0798 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x563b326d0a60 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x563b326d0900 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x563b326d0980 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x563b326d0b70 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x563b326d0bd8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x563b326d0c00 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563b326d0d18 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x563b326d0db8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x563b326d0e18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x563b326d0e78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x563b326d0f28 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x563b326d0f90 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x563b326d11c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x563b326d1218 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b326d11a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x563b326d10b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x563b326d1060 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x563b326d10a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x563b326d1080 <col:32> 'int' 8
|-CXXRecordDecl 0x563b326d1230 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b326d1348 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x563b326d13f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x563b326d1458 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x563b326d14e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x563b326d7580 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563b326d79b8 <col:12>
| |-CXXConstructorDecl 0x563b326d7688 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563b326d7798 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563b326d13f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x563b326d9f40 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x563b326d9f10 <col:12> 'const char *const' lvalue .data 0x563b326d13f0
| | |     `-DeclRefExpr 0x563b326d9ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326d7798 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563b326d1458 'length' 'int'
| | | `-ImplicitCastExpr 0x563b326d9fd0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563b326d9fa0 <col:12> 'const int' lvalue .length 0x563b326d1458
| | |     `-DeclRefExpr 0x563b326d9f80 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326d7798 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563b326d14e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x563b326da060 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x563b326da030 <col:12> 'String::memo_t *const' lvalue .memo 0x563b326d14e8
| | |     `-DeclRefExpr 0x563b326da010 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326d7798 '' 'const String::rep_t &'
| | `-CompoundStmt 0x563b326da0b8 <col:12>
| |-CXXConstructorDecl 0x563b326d7838 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b326d7838
| | `-ParmVarDecl 0x563b326d7948 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x563b326dcea0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x563b326e88b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563b326e89c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x563b326e8ee0 <col:12>
| |   |-BinaryOperator 0x563b326e8cf8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x563b326e8cb0 <col:12> 'const char *' lvalue ->data 0x563b326d13f0
| |   | | `-CXXThisExpr 0x563b326e8ca0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563b326e8ce0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x563b326e8c70 <col:12> 'const char *const' lvalue .data 0x563b326d13f0
| |   |     `-DeclRefExpr 0x563b326e8c50 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326e89c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563b326e8dc0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x563b326e8d78 <col:12> 'int' lvalue ->length 0x563b326d1458
| |   | | `-CXXThisExpr 0x563b326e8d68 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563b326e8da8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x563b326e8d38 <col:12> 'const int' lvalue .length 0x563b326d1458
| |   |     `-DeclRefExpr 0x563b326e8d18 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326e89c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563b326e8e88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x563b326e8e40 <col:12> 'String::memo_t *' lvalue ->memo 0x563b326d14e8
| |   | | `-CXXThisExpr 0x563b326e8e30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563b326e8e70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x563b326e8e00 <col:12> 'String::memo_t *const' lvalue .memo 0x563b326d14e8
| |   |     `-DeclRefExpr 0x563b326e8de0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563b326e89c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x563b326e8ed0 <col:12>
| |     `-UnaryOperator 0x563b326e8eb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563b326e8ea8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x563b326e8a38 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563b326e8a38
|   `-ParmVarDecl 0x563b326e8b48 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x563b326d1560 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x563b326d17a8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x563b326d15c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x563b326d1648 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x563b326d16c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x563b326d7540 <col:79, line:261:5>
|   |-BinaryOperator 0x563b326d71b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563b326d7150 <col:2, col:5> 'const char *' lvalue .data 0x563b326d13f0
|   | | `-MemberExpr 0x563b326d7120 <col:2> 'String::rep_t' lvalue ->_r 0x563b326d1560
|   | |   `-CXXThisExpr 0x563b326d7110 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563b326d71a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563b326d7180 <col:12> 'const char *' lvalue ParmVar 0x563b326d15c8 'data' 'const char *'
|   |-BinaryOperator 0x563b326d7280 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x563b326d7218 <col:2, col:5> 'int' lvalue .length 0x563b326d1458
|   | | `-MemberExpr 0x563b326d71e8 <col:2> 'String::rep_t' lvalue ->_r 0x563b326d1560
|   | |   `-CXXThisExpr 0x563b326d71d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563b326d7268 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563b326d7248 <col:14> 'int' lvalue ParmVar 0x563b326d1648 'length' 'int'
|   `-IfStmt 0x563b326d7528 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x563b326d73a0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563b326d7388 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x563b326d7368 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x563b326d7348 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x563b326d72e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|     |       | `-MemberExpr 0x563b326d72b0 <col:7> 'String::rep_t' lvalue ->_r 0x563b326d1560
|     |       |   `-CXXThisExpr 0x563b326d72a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x563b326d7330 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b326d7310 <col:17> 'String::memo_t *' lvalue ParmVar 0x563b326d16c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x563b326d7500 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x563b326d74e8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563b326d73f0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x563b326c01d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x563b326d7458 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563b326d0db8
|         `-ImplicitCastExpr 0x563b326d7440 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563b326d7420 <col:27> 'String::memo_t *' lvalue ParmVar 0x563b326d16c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x563b326d1a58 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x563b326d1878 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x563b326d18f8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x563b326d1970 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x563b326d1560 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x563b326d79c8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563b326d7b58 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x563b326d7ac0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x563b326d7a30 <col:2> '<bound member function type>' ->assign_memo 0x563b326d17a8
|     | `-ImplicitCastExpr 0x563b326d7af8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x563b326d7a20 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x563b326d7b10 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x563b326d7a60 <col:14> 'const char *' lvalue ParmVar 0x563b326d1878 'data' 'const char *'
|     |-ImplicitCastExpr 0x563b326d7b28 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563b326d7a80 <col:20> 'int' lvalue ParmVar 0x563b326d18f8 'length' 'int'
|     `-ImplicitCastExpr 0x563b326d7b40 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563b326d7aa0 <col:28> 'String::memo_t *' lvalue ParmVar 0x563b326d1970 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x563b326d1be8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x563b326d1b28 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x563b326d7db0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x563b326d7d30 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x563b326d7b80 <col:2> '<bound member function type>' ->assign_memo 0x563b326d17a8
|     | `-CXXThisExpr 0x563b326d7b70 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x563b326d7d68 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x563b326d7c00 <col:14, col:19> 'const char *' lvalue .data 0x563b326d13f0
|     |   `-MemberExpr 0x563b326d7bd0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x563b326d1560
|     |     `-DeclRefExpr 0x563b326d7bb0 <col:14> 'const String' lvalue ParmVar 0x563b326d1b28 'x' 'const String &'
|     |-ImplicitCastExpr 0x563b326d7d80 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x563b326d7c80 <col:25, col:30> 'int' lvalue .length 0x563b326d1458
|     |   `-MemberExpr 0x563b326d7c50 <col:25, col:27> 'String::rep_t' lvalue ._r 0x563b326d1560
|     |     `-DeclRefExpr 0x563b326d7c30 <col:25> 'const String' lvalue ParmVar 0x563b326d1b28 'x' 'const String &'
|     `-ImplicitCastExpr 0x563b326d7d98 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x563b326d7d00 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|         `-MemberExpr 0x563b326d7cd0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x563b326d1560
|           `-DeclRefExpr 0x563b326d7cb0 <col:38> 'const String' lvalue ParmVar 0x563b326d1b28 'x' 'const String &'
|-CXXMethodDecl 0x563b326d1cb0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x563b326d8770 <col:31, line:278:5>
|   `-IfStmt 0x563b326d8758 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x563b326d7e50 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563b326d7e38 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x563b326d7e08 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|     |     `-MemberExpr 0x563b326d7dd8 <col:6> 'String::rep_t' lvalue ->_r 0x563b326d1560
|     |       `-CXXThisExpr 0x563b326d7dc8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x563b326d8730 <col:15, line:277:2>
|       |-ParenExpr 0x563b326d8300 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x563b326d82d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x563b326d7f60 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x563b326d7f48 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x563b326d7f30 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x563b326d7ef0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563b326d0db8
|       |   |       `-ImplicitCastExpr 0x563b326d7ed8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x563b326d7ea8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|       |   |           `-MemberExpr 0x563b326d7e78 <col:27> 'String::rep_t' lvalue ->_r 0x563b326d1560
|       |   |             `-CXXThisExpr 0x563b326d7e68 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x563b326d7fc0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x563b326d7fa0 <col:54> 'int' 0
|       |   `-CallExpr 0x563b326d8230 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x563b326d8218 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563b326d8198 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x563b326d8270 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563b326d80a8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x563b326d8288 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563b326d80d8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x563b326d82a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x563b326d8110 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x563b326d82b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x563b326d8180 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x563b326d8168 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x563b326d8130 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x563b326d8650 <line:274:6, line:275:22>
|       | |-CallExpr 0x563b326d8510 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x563b326d84f8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563b326d8470 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x563b326c1620 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x563b326d8440 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563b326d0db8
|       | |   `-ImplicitCastExpr 0x563b326d8428 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x563b326d83f8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|       | |       `-MemberExpr 0x563b326d83c8 <col:40> 'String::rep_t' lvalue ->_r 0x563b326d1560
|       | |         `-CXXThisExpr 0x563b326d83b8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x563b326d8610 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x563b326d85f8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563b326d8538 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x563b326d6490 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x563b326d8638 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x563b326d8598 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|       |       `-MemberExpr 0x563b326d8568 <col:15> 'String::rep_t' lvalue ->_r 0x563b326d1560
|       |         `-CXXThisExpr 0x563b326d8558 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x563b326d8710 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x563b326d86a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563b326d14e8
|         | `-MemberExpr 0x563b326d8678 <col:6> 'String::rep_t' lvalue ->_r 0x563b326d1560
|         |   `-CXXThisExpr 0x563b326d8668 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x563b326d86f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x563b326d86d8 <col:16> 'int' 0
|-CXXMethodDecl 0x563b326d1f48 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x563b326d1d68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563b326d1de8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563b326d1e60 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x563b326d2020 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x563b326d2270 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x563b326d20d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563b326d2158 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563b326d21d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x563b326d2458 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x563b326d2340 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x563b326d23c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x563b326d2558 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x563b326d8848 <col:41, line:286:5>
|   `-ReturnStmt 0x563b326d8838 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x563b326d8808 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x563b326d87d0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x563b326d87b8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x563b326d8798 <col:46> 'int' 1
|-CXXMethodDecl 0x563b326d27f8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x563b326d2610 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x563b326d2690 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x563b326d2710 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x563b326d6490 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x563b326d28c0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x563b326d6560 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x563b326d6730 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x563b326d6618 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563b326d6698 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x563b326d67f0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x563b326d68b8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x563b326d69b8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x563b326d6a30 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x563b326d6aa8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x563b326d6b10 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x563b326d6c10 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x563b326d6c60 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b326d6bf0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x563b326d6bd0 <col:22> 'int' 14
|-CXXMethodDecl 0x563b326d6e78 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x563b326d6c90 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x563b326d6d10 <col:38> col:41 'int'
| `-ParmVarDecl 0x563b326d6d90 <col:43> col:46 'int'
|-FriendDecl 0x563b326d6f80 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x563b326d7010 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b32799470 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x563b32799648 prev 0x563b32799470 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563b327996d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x563b32799700 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b3279b060 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x563b3279b010 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x563b3279aff0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x563b32799918 'type'
|     `-SubstTemplateTypeParmType 0x563b327998e0 'String' sugar
|       |-TemplateTypeParmType 0x563b3268ba10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b3268b9c0 'T'
|       `-RecordType 0x563b326c8200 'String'
|         `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b3279b118 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x563b3279b0e0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x563b3279b0c0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563b3279b060 'type'
|     `-ElaboratedType 0x563b3279b010 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x563b3279aff0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x563b32799918 'type'
|         `-SubstTemplateTypeParmType 0x563b327998e0 'String' sugar
|           |-TemplateTypeParmType 0x563b3268ba10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563b3268b9c0 'T'
|           `-RecordType 0x563b326c8200 'String'
|             `-CXXRecord 0x563b326c8170 'String'
|-CXXMethodDecl 0x563b3279b298 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x563b3279b1a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x563b3279b388 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563b3279b468 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x563b3279b468
|-CXXMethodDecl 0x563b32945b08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563b32945a18 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x563b32945d48 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b32945bc0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b32945c38 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b32945f18 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b32945e08 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b32945e80 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b32946078 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563b32946148 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563b32946398 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b32946208 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563b32946280 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b329465f8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x563b32946468 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563b329464e0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b329467b8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x563b329466c8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b32946978 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x563b32946880 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b32946a30 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b32946ae0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563b32946d18 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563b32946b90 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b32946c08 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563b32946fb8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563b32946ec0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x563b32947080 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x563b329470d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563b32947120 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b328ff9a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563b32797ed8 prev 0x563b328ff9a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563b327993e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x563b32799390 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x563b32799370 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563b32799220 'type'
|     `-SubstTemplateTypeParmType 0x563b327990b0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x563b326615a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x563b32661548 'F'
|       `-RecordType 0x563b32798d10 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x563b32798c30 'typed_array_memory'
|-FieldDecl 0x563b32947170 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x563b329471c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563b329471f8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|   |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563b32698cd8 'T'
|   `-RecordType 0x563b326c8200 'String'
|     `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b32947288 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x563b32947250 'String &'
|   `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|     |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b32698cd8 'T'
|     `-RecordType 0x563b326c8200 'String'
|       `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b32947318 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x563b329472e0 'const String &'
|   `-QualType 0x563b32797f71 'const String' const
|     `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-RecordType 0x563b326c8200 'String'
|         `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b329473a8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x563b32947370 'String *'
|   `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|     |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b32698cd8 'T'
|     `-RecordType 0x563b326c8200 'String'
|       `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b32947438 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x563b32947400 'const String *'
|   `-QualType 0x563b32797f71 'const String' const
|     `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-RecordType 0x563b326c8200 'String'
|         `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b32948090 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x563b32948040 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x563b32948020 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x563b32947f58 'type'
|     `-LValueReferenceType 0x563b32947f20 'const String &'
|       `-QualType 0x563b32947cc1 'const String' const
|         `-SubstTemplateTypeParmType 0x563b32947cc0 'String' sugar
|           |-TemplateTypeParmType 0x563b3266b710 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563b3266b6b8 'T'
|           `-RecordType 0x563b326c8200 'String'
|             `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b329480f8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x563b329472e0 'const String &'
|   `-QualType 0x563b32797f71 'const String' const
|     `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-RecordType 0x563b326c8200 'String'
|         `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b32948150 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b329481b8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x563b32947370 'String *'
|   `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|     |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b32698cd8 'T'
|     `-RecordType 0x563b326c8200 'String'
|       `-CXXRecord 0x563b326c8170 'String'
|-TypedefDecl 0x563b32948220 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x563b32947400 'const String *'
|   `-QualType 0x563b32797f71 'const String' const
|     `-SubstTemplateTypeParmType 0x563b32797f70 'String' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-RecordType 0x563b326c8200 'String'
|         `-CXXRecord 0x563b326c8170 'String'
|-EnumDecl 0x563b32948278 <line:134:5> col:5
| `-EnumConstantDecl 0x563b32948370 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563b32948350 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563b3269a3b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563b3269a390 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563b3269a370 <col:40> 'int' 1
|-CXXConstructorDecl 0x563b329483f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563b32948688 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b329484b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b32948550 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x563b32948918 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x563b32948800 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x563b32948bd8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x563b32948ac0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x563b32948ef0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x563b32948dd0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x563b32949200 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x563b329490e0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x563b329494f0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b32949338 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b329493b0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b32949618 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563b329496c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32949720 <col:30> Inherited
|-CXXMethodDecl 0x563b32949768 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563b32949818 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32949870 <col:30> Inherited
|-CXXMethodDecl 0x563b32949938 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b329499e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32949a40 <col:30> Inherited
|-CXXMethodDecl 0x563b32949a88 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b32949b38 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32949b90 <col:30> Inherited
|-CXXMethodDecl 0x563b32949bd8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b32949c88 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32949ce0 <col:30> Inherited
|-CXXMethodDecl 0x563b32949d28 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563b32949dd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32949e30 <col:30> Inherited
|-CXXMethodDecl 0x563b32949e58 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b32949f08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b32949fb8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563b3294a178 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b3294a068 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b3294a0e0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b3294a2c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563b3294a238 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3294a478 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x563b3294a380 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b3294a530 <col:20>
| `-OptimizeNoneAttr 0x563b3294a588 <col:30>
|-CXXMethodDecl 0x563b3294a6a8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x563b3294a5b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b3294a760 <col:20>
| `-OptimizeNoneAttr 0x563b3294a7b8 <col:30>
|-CXXMethodDecl 0x563b3294a870 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b3294a7e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3294a9b8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b3294a928 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3294aae8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x563b3294abe8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x563b3294acb8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x563b3294ad88 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x563b3294aec8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b3294ae38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3294b010 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b3294af80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3294b158 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x563b3294b0c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b3294b210 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563b3294b310 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563b3294b280 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b3294b3c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563b3294b488 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x563b3294b588 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x563b3294b708 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563b3294b648 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x563b3294bec8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563b3294b7c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x563b3294be28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x563b3294bd28 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x563b3294bfa8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b3294c0f8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563b3294c068 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b3294c1b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563b3294c3f8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563b3294c270 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563b3294c2e8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563b3294c588 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x563b3294c4c8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563b3294c798 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x563b3294c650 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563b3294c6c8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563b3294c858 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563b3294cab8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x563b3294c9c0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x563b3294cb88 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563b3294cb88

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b329cf338 prev 0x563b32961738 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b329cf430 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x563b329cf4c0 <col:22, col:28> col:22 public
|-EnumDecl 0x563b329cf4e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x563b329cf608 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf5e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x563b329cf5d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x563b329cf5b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x563b329cf6b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf690 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x563b329cf678 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x563b329cf658 <col:14> 'int' 1
| |-EnumConstantDecl 0x563b329cf740 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf720 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x563b329cf700 <col:17> 'int' 0
| |-EnumConstantDecl 0x563b329cf7d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf7b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x563b329cf790 <col:13> 'int' 1
| |-EnumConstantDecl 0x563b329cf860 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf840 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x563b329cf820 <col:16> 'int' 2
| |-EnumConstantDecl 0x563b329cf8f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf8d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x563b329cf8b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x563b329cf980 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf960 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x563b329cf940 <col:15> 'int' 4
| |-EnumConstantDecl 0x563b329cfa10 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cf9f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x563b329cf9d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x563b329cfaa0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x563b329cfa80 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x563b329cfa60 <col:12> 'int' 6
| `-EnumConstantDecl 0x563b329cfb30 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x563b329cfb10 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x563b329cfaf0 <col:13> 'int' 7
|-VarDecl 0x563b329cfba0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x563b329cfc28 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x563b329cfcb0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x563b329cfd38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x563b329cfdc0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x563b329cfe48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x563b329cfed0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x563b329cff58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x563b329cffe0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x563b329d0068 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x563b329d00f0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x563b329d01f0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x563b329d5518 '_nerrors' 'int'
| | `-IntegerLiteral 0x563b329d5ca8 <line:128:13> 'int' 0
| `-CompoundStmt 0x563b329d5d18 <col:16, line:129:5>
|-CXXDestructorDecl 0x563b329d02e0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x563b329d5d28 <col:29, line:132:5>
|-CXXMethodDecl 0x563b329d0498 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x563b329d03d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b329d0560 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x563b329d0648 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x563b329d5d80 <col:44, line:161:5>
|   `-ReturnStmt 0x563b329d5d70 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x563b329d5d58 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x563b329d5d38 <col:9> 'ErrorHandler *' lvalue Var 0x563b329d5578 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x563b329d0788 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x563b329d06f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563b329d0850 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x563b329d5de0 <col:43, line:173:5>
|   `-ReturnStmt 0x563b329d5dd0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x563b329d5db8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x563b329d5d98 <col:9> 'ErrorHandler *' lvalue Var 0x563b329d55f0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x563b329d0908 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x563b329d0988 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x563b329d0a98 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x563b329d0a08 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x563b329d0be8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x563b329d0b58 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563b329d0d40 <line:193:5, col:37> col:9 used warning 'int (const char *, ...)'
| `-ParmVarDecl 0x563b329d0ca8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x563b329d0e98 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x563b329d0e00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x563b329d0ff0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x563b329d0f58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x563b329d1200 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x563b329d10a8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x563b329d1128 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x563b329d13d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x563b329d12c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x563b329d1340 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x563b329d15f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x563b329d1498 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x563b329d1518 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x563b329d17d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x563b329d16b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x563b329d1738 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x563b329d19b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x563b329d1898 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x563b329d1918 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x563b329d1b40 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x563b329d1a78 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x563b329d1d10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x563b329d1bf8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x563b329d1c70 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x563b329d6038 <col:57, line:234:5>
|   `-ReturnStmt 0x563b329d6028 <line:233:2, col:41>
|     `-ExprWithCleanups 0x563b329d6010 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x563b329d5fb8 <col:9, col:41> 'int'
|         |-MemberExpr 0x563b329d5f88 <col:9> '<bound member function type>' ->xmessage 0x563b329d1b40
|         | `-CXXThisExpr 0x563b329d5f78 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x563b329d5ff8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x563b329d5fe0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x563b329d5f58 <col:18, col:40> 'String' (CXXTemporary 0x563b329d5f58)
|               `-CallExpr 0x563b329d5f20 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x563b329d5f08 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x563b329d5e80 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x563b329d3d08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x563b329d5ea0 <col:31> 'const String' lvalue ParmVar 0x563b329d1c70 'str' 'const String &'
|                 `-DeclRefExpr 0x563b329d5ec0 <col:36> 'const String' lvalue ParmVar 0x563b329d1bf8 'anno' 'const String &'
|-CXXMethodDecl 0x563b329d1ff0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x563b329d1dd0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x563b329d1e50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x563b329d1ec8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x563b329d62c8 <col:68, line:243:5>
|   `-ReturnStmt 0x563b329d62b8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x563b329d62a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x563b329d6240 <col:9, col:41> 'int'
|         |-MemberExpr 0x563b329d6210 <col:9> '<bound member function type>' ->xmessage 0x563b329d1d10
|         | `-CXXThisExpr 0x563b329d6200 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x563b329d60d8 <col:18> 'const String' lvalue ParmVar 0x563b329d1dd0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x563b329d6288 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x563b329d6270 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x563b329d61e0 <col:24, col:40> 'String' (CXXTemporary 0x563b329d61e0)
|               `-CXXMemberCallExpr 0x563b329d6178 <col:24, col:40> 'String'
|                 |-MemberExpr 0x563b329d6108 <col:24> '<bound member function type>' ->vformat 0x563b329d31d0
|                 | `-CXXThisExpr 0x563b329d60f8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x563b329d61a8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x563b329d6138 <col:32> 'const char *' lvalue ParmVar 0x563b329d1e50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x563b329d61c0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x563b329d6158 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x563b329d1ec8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563b329d2290 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x563b329d20b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x563b329d2130 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x563b329d21a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x563b329d6608 <col:23, line:254:5>
|   `-ReturnStmt 0x563b329d65f8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x563b329d65e0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x563b329d6580 <col:9, col:71> 'int'
|         |-MemberExpr 0x563b329d6550 <col:9> '<bound member function type>' ->xmessage 0x563b329d1d10
|         | `-CXXThisExpr 0x563b329d6540 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x563b329d65c8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x563b329d65b0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x563b329d6500 <col:18, col:65> 'String' (CXXTemporary 0x563b329d6500)
|         |     `-CallExpr 0x563b329d6498 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x563b329d6480 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x563b329d6368 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x563b329d3d08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x563b329d6388 <col:31> 'const String' lvalue ParmVar 0x563b329d2130 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x563b329d64e0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x563b329d64c8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x563b329d6460 <col:37, col:64> 'String' (CXXTemporary 0x563b329d6460)
|         |             `-CallExpr 0x563b329d6430 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x563b329d6418 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x563b329d63a8 <col:37> 'String (const String &)' lvalue CXXMethod 0x563b329d4358 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x563b329d63c8 <col:56> 'const String' lvalue ParmVar 0x563b329d20b8 'landmark' 'const String &'
|         `-DeclRefExpr 0x563b329d6520 <col:68> 'const String' lvalue ParmVar 0x563b329d21a8 'str' 'const String &'
|-CXXMethodDecl 0x563b329d2610 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x563b329d2358 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x563b329d23d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x563b329d2450 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x563b329d24c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x563b329d68c0 <col:34, line:267:5>
|   `-ReturnStmt 0x563b329d68b0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x563b329d6898 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x563b329d6830 <col:9, col:51> 'int'
|         |-MemberExpr 0x563b329d6800 <col:9> '<bound member function type>' ->xmessage 0x563b329d2290
|         | `-CXXThisExpr 0x563b329d67f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x563b329d66a8 <col:18> 'const String' lvalue ParmVar 0x563b329d2358 'landmark' 'const String &'
|         |-DeclRefExpr 0x563b329d66c8 <col:28> 'const String' lvalue ParmVar 0x563b329d23d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x563b329d6880 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x563b329d6868 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x563b329d67d0 <col:34, col:50> 'String' (CXXTemporary 0x563b329d67d0)
|               `-CXXMemberCallExpr 0x563b329d6768 <col:34, col:50> 'String'
|                 |-MemberExpr 0x563b329d66f8 <col:34> '<bound member function type>' ->vformat 0x563b329d31d0
|                 | `-CXXThisExpr 0x563b329d66e8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x563b329d6798 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x563b329d6728 <col:42> 'const char *' lvalue ParmVar 0x563b329d2450 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x563b329d67b0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x563b329d6748 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x563b329d24c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563b329d2720 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x563b329d6940 <col:25, line:288:5>
|   `-ReturnStmt 0x563b329d6930 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x563b329d6918 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x563b329d68e8 <col:9> 'const int' lvalue ->_nerrors 0x563b329d5518
|         `-CXXThisExpr 0x563b329d68d8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x563b329d2930 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x563b329d27d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x563b329d2858 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x563b329d2c18 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x563b329d29f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x563b329d2a78 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x563b329d2af0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563b329d2db0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x563b329d2ce8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x563b329d2ff8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x563b329d2e70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x563b329d2ee8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x563b329d6ba0 <col:58, line:357:5>
|   `-ReturnStmt 0x563b329d6b90 <line:356:2, col:29>
|     `-ExprWithCleanups 0x563b329d6b78 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x563b329d6b48 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x563b329d6b30 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x563b329d6b10 <col:9, col:29> 'String' (CXXTemporary 0x563b329d6b10)
|             `-CallExpr 0x563b329d6aa0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x563b329d6a88 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x563b329d6a08 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x563b329d2c18 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x563b329d69a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x563b329d6ad8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x563b329d69c8 <col:21> 'const char *' lvalue ParmVar 0x563b329d2e70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x563b329d6af0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x563b329d69e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x563b329d2ee8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563b329d31d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x563b329d30c0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x563b329d3138 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563b329d3328 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x563b329d3298 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x563b329d3470 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x563b329d33e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x563b329d3710 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x563b329d3528 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x563b329d35a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x563b329d3620 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x563b329d3870 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x563b329d37e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x563b329d6cb8 <col:37, line:441:5>
|   `-IfStmt 0x563b329d6ca0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x563b329d6c28 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x563b329d6bf8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x563b329d6bb8 <col:6> 'int' lvalue ParmVar 0x563b329d37e0 'level' 'int'
|     | `-ImplicitCastExpr 0x563b329d6c10 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x563b329d6bd8 <col:15> 'ErrorHandler::Level' EnumConstant 0x563b329cf8f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x563b329d6c88 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x563b329d6c58 <col:8> 'int' lvalue ->_nerrors 0x563b329d5518
|         `-CXXThisExpr 0x563b329d6c48 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x563b329d3938 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x563b329d6d50 <col:26, line:448:5>
|   `-BinaryOperator 0x563b329d6d30 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x563b329d6ce0 <col:2> 'int' lvalue ->_nerrors 0x563b329d5518
|     | `-CXXThisExpr 0x563b329d6cd0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x563b329d6d10 <col:13> 'int' 0
|-CXXMethodDecl 0x563b329d3b00 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x563b329d39f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x563b329d3a68 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x563b329d3d08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x563b329d3bc0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x563b329d3c38 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x563b329d3fb8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x563b329d3dc8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x563b329d3e48 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x563b329d3ec8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x563b329d4070 <col:59> 0 0
|-CXXMethodDecl 0x563b329d4208 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x563b329d40e8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x563b329d4168 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x563b329d73c0 <col:70, line:534:5>
|   |-DeclStmt 0x563b329d6ec0 <line:528:2, col:20>
|   | |-VarDecl 0x563b329d6d78 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x563b329d6de0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x563b329d6e18 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x563b329d6e80 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x563b329d6f90 <line:529:2, col:23>
|   | `-VarDecl 0x563b329d6ef0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x563b329d6f78 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563b329d6f58 <col:18> 'const char *' lvalue ParmVar 0x563b329d40e8 'begin' 'const char *'
|   |-DoStmt 0x563b329d7358 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x563b329d7288 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x563b329d7270 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x563b329d7250 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x563b329d6fa8 <col:6> 'const char *' lvalue Var 0x563b329d6ef0 'x' 'const char *'
|   | |     `-CallExpr 0x563b329d71a0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x563b329d7188 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x563b329d7140 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x563b329d59f0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x563b329d7208 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x563b329d71f0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x563b329d7060 <col:20, col:27> 'String' (CXXTemporary 0x563b329d7060)
|   | |       |     `-CXXTemporaryObjectExpr 0x563b329d7028 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x563b329d7220 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x563b329d7080 <col:30> 'const char *' lvalue Var 0x563b329d6ef0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x563b329d7238 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x563b329d70a0 <col:33> 'const char *' lvalue ParmVar 0x563b329d4168 'end' 'const char *'
|   | |       |-UnaryOperator 0x563b329d70e0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x563b329d70c0 <col:39> 'String' lvalue Var 0x563b329d6d78 'name' 'String'
|   | |       |-UnaryOperator 0x563b329d7118 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x563b329d70f8 <col:46> 'String' lvalue Var 0x563b329d6e18 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x563b329d7130 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x563b329d7340 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x563b329d7328 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x563b329d7308 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x563b329d72d8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|   |         `-ImplicitCastExpr 0x563b329d72c0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x563b329d72a0 <col:11> 'String' lvalue Var 0x563b329d6d78 'name' 'String'
|   `-ReturnStmt 0x563b329d73b0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x563b329d7398 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x563b329d7378 <col:9> 'const char *' lvalue Var 0x563b329d6ef0 'x' 'const char *'
|-CXXMethodDecl 0x563b329d4358 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x563b329d42c8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x563b329d79c8 <col:55, line:550:5>
|   `-IfStmt 0x563b329d79a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x563b329d7600 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x563b329d75e8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b329d75d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b329d75b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b329d7580 <col:6> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|     | |       `-DeclRefExpr 0x563b329d7420 <col:6> 'const String' lvalue ParmVar 0x563b329d42c8 'x' 'const String &'
|     | `-BinaryOperator 0x563b329d7560 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x563b329d7530 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x563b329d74e0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x563b329d74c8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x563b329d7480 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x563b326e51a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x563b329d7440 <col:11> 'const String' lvalue ParmVar 0x563b329d42c8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x563b329d7460 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x563b329d7548 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x563b329d7518 <col:19> 'char' 123
|     |-ReturnStmt 0x563b329d7670 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x563b329d7640 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x563b329d7620 <col:13> 'const String' lvalue ParmVar 0x563b329d42c8 'x' 'const String &'
|     `-IfStmt 0x563b329d7978 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x563b329d7708 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b329d76f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b329d76d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b329d76a0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |       `-DeclRefExpr 0x563b329d7680 <col:11> 'const String' lvalue ParmVar 0x563b329d42c8 'x' 'const String &'
|       |-ReturnStmt 0x563b329d7890 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x563b329d7878 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x563b329d7848 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x563b329d7830 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x563b329d7810 <col:13, col:29> 'String' (CXXTemporary 0x563b329d7810)
|       |         `-CallExpr 0x563b329d77c0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x563b329d77a8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x563b329d7720 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x563b329d3b00 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x563b329d77f0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x563b329d7740 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x563b329d7760 <col:28> 'const String' lvalue ParmVar 0x563b329d42c8 'x' 'const String &'
|       `-ReturnStmt 0x563b329d7968 <line:549:6, col:20>
|         `-ExprWithCleanups 0x563b329d7950 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x563b329d7920 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x563b329d7908 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x563b329d78e8 <col:13, col:20> 'String' (CXXTemporary 0x563b329d78e8)
|                 `-CXXTemporaryObjectExpr 0x563b329d78b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x563b329d4560 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x563b329d4410 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x563b329d4488 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b329d5c98 <col:71> 'bool' false
|-CXXRecordDecl 0x563b329d4610 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x563b329d4908 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x563b329d48a0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x563b329d4840 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x563b329d4800 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x563b326c8200 'String'
|       | `-CXXRecord 0x563b326c8170 'String'
|       |-BuiltinType 0x563b3239b370 'int'
|       `-DecayedType 0x563b32962780 '__va_list_tag *' sugar
|         |-TypedefType 0x563b32962750 'va_list' sugar
|         | |-Typedef 0x563b325b9090 'va_list'
|         | `-TypedefType 0x563b325b9040 '__gnuc_va_list' sugar
|         |   |-Typedef 0x563b324f0c68 '__gnuc_va_list'
|         |   `-TypedefType 0x563b324f0bd0 '__builtin_va_list' sugar
|         |     |-Typedef 0x563b323dcbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x563b323dcb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x563b3239c0c0 '__va_list_tag'
|         |         `-CXXRecord 0x563b3239c028 '__va_list_tag'
|         `-PointerType 0x563b325be930 '__va_list_tag *'
|           `-RecordType 0x563b3239c0c0 '__va_list_tag'
|             `-CXXRecord 0x563b3239c028 '__va_list_tag'
|-EnumDecl 0x563b329d4960 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x563b329d4a60 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d4fc0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4a40 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x563b329d4a20 <col:16> 'int' 1
| |-EnumConstantDecl 0x563b329d4af0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d4fd8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4ad0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x563b329d4ab0 <col:21> 'int' 2
| |-EnumConstantDecl 0x563b329d4b80 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d4ff0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4b60 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x563b329d4b40 <col:22> 'int' 4
| |-EnumConstantDecl 0x563b329d4c10 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d5008 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4bf0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x563b329d4bd0 <col:17> 'int' 8
| |-EnumConstantDecl 0x563b329d4ca0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d5020 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4c80 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x563b329d4c60 <col:22> 'int' 16
| |-EnumConstantDecl 0x563b329d4d30 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d5038 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4d10 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x563b329d4cf0 <col:19> 'int' 32
| |-EnumConstantDecl 0x563b329d4dc0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d5050 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4da0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x563b329d4d80 <col:17> 'int' 64
| |-EnumConstantDecl 0x563b329d4e50 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d5068 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4e30 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x563b329d4e10 <col:14> 'int' 128
| |-EnumConstantDecl 0x563b329d4ee0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563b329d5080 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329d4ec0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x563b329d4ea0 <col:16> 'int' 256
| `-EnumConstantDecl 0x563b329d4f70 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x563b329d5098 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b329d4f50 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x563b329d4f30 <col:12> 'int' 1024
|-CXXMethodDecl 0x563b329d52a8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x563b329d50c0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x563b329d5160 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x563b329d5430 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x563b329d5368 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x563b329d54d8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x563b329d5518 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x563b329d5578 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x563b329d55f0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x563b329d59f0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x563b329d5668 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x563b329d56e8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x563b329d5768 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x563b329d57e0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x563b329d5858 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x563b329d58d0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x563b329d5b18 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x563b329d5b18
| `-ParmVarDecl 0x563b329d5c28 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x563b329d7d28 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x563b329d7d28
  `-ParmVarDecl 0x563b329d7e38 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b329617c8 prev 0x563b328c2448 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b329618c0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x563b32961950 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x563b32961a88 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x563b32961988 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563b32962eb0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563b32962e90 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563b32962a28 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563b32962f40 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b32962f00 <col:17> 'ErrorHandler *' lvalue ParmVar 0x563b32961988 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563b32962a90 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563b32962fc0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563b32962f80 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563b32962af0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563b32963000 <col:54> 'bool' false
| `-CompoundStmt 0x563b32963108 <col:61, line:38:5>
|   `-BinaryOperator 0x563b329630e8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x563b32963080 <col:9> 'const Element *' lvalue ->_context 0x563b329629c8
|     | `-CXXThisExpr 0x563b32963070 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x563b329630d0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x563b329630b0 <col:20> 'int' 0
|-CXXConstructorDecl 0x563b32961c98 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563b32961b48 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x563b32961bc0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563b32962ee8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563b32962ec8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x563b329629c8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x563b32963160 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b32963120 <col:20> 'const Element *' lvalue ParmVar 0x563b32961b48 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x563b32962a28 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563b329631e0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b329631a0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x563b32961bc0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563b32962a90 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563b32963260 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563b32963220 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x563b32962af0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563b329632a0 <col:73> 'bool' false
| `-CompoundStmt 0x563b32963318 <col:80, line:46:5>
|-CXXMethodDecl 0x563b32961dc8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x563b32963390 <col:36, line:51:5>
|   `-ReturnStmt 0x563b32963380 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x563b32963368 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x563b32963338 <col:16> 'const Element *const' lvalue ->_context 0x563b329629c8
|         `-CXXThisExpr 0x563b32963328 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563b32961eb8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x563b32963410 <col:32, line:57:5>
|   `-ReturnStmt 0x563b32963400 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x563b329633e8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x563b329633b8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x563b32962a28
|         `-CXXThisExpr 0x563b329633a8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563b32961f78 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x563b32962100 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x563b32962030 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x563b32962250 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x563b329621c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563b329623a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x563b32962310 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563b329625a8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x563b32962458 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x563b329624d0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x563b329628d8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x563b32962668 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x563b329626e8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x563b329627b0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x563b32962990 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x563b329629c8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x563b32962a28 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x563b32962a90 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x563b32962af0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x563b32962b40 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x563b32962b40
| `-ParmVarDecl 0x563b32962c58 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x563b32962cf8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x563b32962cf8
| `-ParmVarDecl 0x563b32962e08 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x563b329e7740 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b3298b370 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x563b3298b548 prev 0x563b3298b370 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563b3298b5d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x563b3298b600 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b3298d1d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x563b3298d180 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x563b3298bab0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x563b3298b9b0 'type'
|     `-TemplateSpecializationType 0x563b3298b940 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x563b3298b820 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x563b3298b800 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x563b3298b7e0 <col:24> 'unsigned long' 4
|       `-RecordType 0x563b3298b920 'char_array<4>'
|         `-ClassTemplateSpecialization 0x563b3298b840 'char_array'
|-TypedefDecl 0x563b3298d288 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x563b3298d250 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x563b3298d230 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x563b3298d1d0 'type'
|     `-ElaboratedType 0x563b3298d180 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x563b3298bab0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x563b3298b9b0 'type'
|         `-TemplateSpecializationType 0x563b3298b940 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x563b3298b820 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x563b3298b800 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x563b3298b7e0 <col:24> 'unsigned long' 4
|           `-RecordType 0x563b3298b920 'char_array<4>'
|             `-ClassTemplateSpecialization 0x563b3298b840 'char_array'
|-CXXMethodDecl 0x563b3298d408 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x563b3298d318 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x563b3298d4f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563b3298d5d8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x563b3298d8a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563b3298d7b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x563b3298dae8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b3298d960 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b3298d9d8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b3298dcb8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b3298dba8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b3298dc20 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b3298de18 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563b3298dee8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563b3298e138 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b3298dfa8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563b3298e020 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b32995f88 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x563b3298e208 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563b32995e70 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b32996148 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563b32996058 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b32996308 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563b32996210 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b329963c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b32996470 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563b329966a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563b32996520 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563b32996598 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563b32996948 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563b32996850 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x563b32996a10 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x563b32996a60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563b32996ab0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b32989d78 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x563b32989f88 prev 0x563b32989d78 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563b3298b2e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x563b3298b290 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x563b3298b270 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x563b3298b120 'type'
|     `-SubstTemplateTypeParmType 0x563b3298af40 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563b32660e20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32660dc8 'T'
|       `-RecordType 0x563b3298aa90 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x563b3298a9a8 'sized_array_memory'
|-FieldDecl 0x563b32996b00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x563b32996b50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563b32996b88 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|   |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563b32698cd8 'T'
|   `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32996c18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x563b32996be0 'int &'
|   `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|     |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b32698cd8 'T'
|     `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32996cd8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x563b32996ca0 'const int &'
|   `-QualType 0x563b3298a021 'const int' const
|     `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32996d68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x563b32996d30 'int *'
|   `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|     |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b32698cd8 'T'
|     `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32996df8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x563b32996dc0 'const int *'
|   `-QualType 0x563b3298a021 'const int' const
|     `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b329979e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x563b32997990 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x563b32997970 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x563b32997900 'type'
|     `-SubstTemplateTypeParmType 0x563b329976c0 'int' sugar
|       |-TemplateTypeParmType 0x563b3266be40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b3266bdf0 'T'
|       `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32997a48 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x563b32996ca0 'const int &'
|   `-QualType 0x563b3298a021 'const int' const
|     `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32997aa0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32997b08 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x563b32996d30 'int *'
|   `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|     |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563b32698cd8 'T'
|     `-BuiltinType 0x563b3239b370 'int'
|-TypedefDecl 0x563b32997b70 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x563b32996dc0 'const int *'
|   `-QualType 0x563b3298a021 'const int' const
|     `-SubstTemplateTypeParmType 0x563b3298a020 'int' sugar
|       |-TemplateTypeParmType 0x563b32698d30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563b32698cd8 'T'
|       `-BuiltinType 0x563b3239b370 'int'
|-EnumDecl 0x563b32997bc8 <line:134:5> col:5
| `-EnumConstantDecl 0x563b32997cc0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563b32997ca0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563b3269a3b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563b3269a390 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563b3269a370 <col:40> 'int' 1
|-CXXConstructorDecl 0x563b32997d48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563b32997f98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b32997e00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b32997ea0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x563b32998258 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x563b32998140 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x563b32998518 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x563b32998400 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x563b32998860 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x563b32998740 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x563b32998b70 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x563b32998a50 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x563b32998e60 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b32998ca8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b32998d20 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b32998f88 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563b32999068 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b329990c0 <col:30> Inherited
|-CXXMethodDecl 0x563b32999108 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563b329991b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32999210 <col:30> Inherited
|-CXXMethodDecl 0x563b329992d8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b32999388 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b329993e0 <col:30> Inherited
|-CXXMethodDecl 0x563b32999428 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b329994d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32999530 <col:30> Inherited
|-CXXMethodDecl 0x563b32999578 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b32999628 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b32999680 <col:30> Inherited
|-CXXMethodDecl 0x563b329996c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563b32999778 <col:20> Inherited
| `-OptimizeNoneAttr 0x563b329997d0 <col:30> Inherited
|-CXXMethodDecl 0x563b329997f8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b329998a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563b32999958 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563b32999b18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b32999a08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563b32999a80 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b32999c68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563b32999bd8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b32999e18 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x563b32999d20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b32999ed0 <col:20>
| `-OptimizeNoneAttr 0x563b32999f28 <col:30>
|-CXXMethodDecl 0x563b3299a048 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x563b32999f50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563b3299a100 <col:20>
| `-OptimizeNoneAttr 0x563b3299a158 <col:30>
|-CXXMethodDecl 0x563b3299a210 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b3299a180 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3299a358 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b3299a2c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3299a488 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x563b3299a5b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x563b3299a688 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x563b3299a758 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x563b3299a898 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563b3299a808 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3299a9e0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563b3299a950 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563b3299ab28 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x563b3299aa98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b3299abe0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563b3299ace0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563b3299ac50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563b3299ad98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563b3299ae58 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x563b3299af58 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x563b3299b0d8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563b3299b018 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x563b3299b898 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563b3299b190 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x563b3299b7f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x563b3299b6f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x563b3299b978 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563b3299bac8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563b3299ba38 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b3299bb80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563b3299bdc8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563b3299bc40 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563b3299bcb8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563b3299bf88 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x563b3299be98 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563b3299c1d8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x563b3299c050 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563b3299c0c8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563b3299c298 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563b3299c4f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x563b3299c400 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x563b3299c5c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b32987ee8 prev 0x563b3296a1b8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b32987fe0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x563b329880d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x563b329ae230 <col:16, line:828:9>
|-CXXDestructorDecl 0x563b329881c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x563b329ae240 <col:25, line:830:9>
|-CXXMethodDecl 0x563b329882c0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x563b32988370 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x563b32988418 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563b32988418
| `-ParmVarDecl 0x563b32988528 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x563b32988ce8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563b32988ce8
  `-ParmVarDecl 0x563b32988df8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b32969fc8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x563b3296a128 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x563b3296a1b8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x563b3296a270 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x563b3296a378 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x563b3296a2a8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b3299db88 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b3299db68 <col:31> 'int' 0
|-CXXConstructorDecl 0x563b3296a698 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x563b3296a510 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x563b3296a588 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b3299dbc0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b3299dba0 <col:59> 'int' 0
|-CXXConstructorDecl 0x563b3296a870 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563b3296a760 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x563b3296a7d8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b3299dbf8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b3299dbd8 <col:55> 'int' 0
|-CXXConstructorDecl 0x563b3296ac28 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563b3296aa10 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x563b3296aa88 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x563b3296ab00 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563b3299dc30 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563b3299dc10 <col:31> 'int' 0
|-CXXConstructorDecl 0x563b3296ade8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x563b3296ad28 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x563b3296aee0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x563b3296b0c8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x563b3296afd0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x563b3296b1b8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x563b3299f8d0 <col:24, line:291:5>
|   `-ReturnStmt 0x563b3299f8c0 <line:290:9, col:79>
|     `-BinaryOperator 0x563b3299f8a0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x563b3299f778 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x563b3299dde0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x563b3299ddc0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x563b3299dcb8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x563b3299dca0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x563b3299dc88 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x563b3299dc58 <col:18> 'Vector<String> *const' lvalue ->_conf 0x563b32989d10
|       | |   |       `-CXXThisExpr 0x563b3299dc48 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x563b3299dda8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x563b3299dd90 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x563b3299dd58 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x563b3299dd28 <col:28, col:35> '<bound member function type>' ->size 0x563b32949e58
|       | |           `-ImplicitCastExpr 0x563b3299dd78 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x563b3299dd10 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x563b3299dce0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x563b32989d10
|       | |                 `-CXXThisExpr 0x563b3299dcd0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x563b3299f760 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x563b3299de58 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x563b3299de40 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x563b3299de10 <col:47> 'Args::Slot *const' lvalue ->_slots 0x563b3299c710
|       |         `-CXXThisExpr 0x563b3299de00 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x563b3299f880 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x563b3299f868 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563b3299f850 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x563b3299f810 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563b3299f7f8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563b3299f7a8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563b3299c7c0
|         |     |   `-CXXThisExpr 0x563b3299f798 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563b3299f7d8 <col:73> 'int' 0
|         `-IntegerLiteral 0x563b3299f830 <col:79> 'int' 0
|-CXXMethodDecl 0x563b3296b278 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x563b3299faa8 <col:32, line:296:5>
|   `-ReturnStmt 0x563b3299fa98 <line:295:9, col:49>
|     `-BinaryOperator 0x563b3299fa78 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x563b3299f958 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x563b3299f940 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x563b3299f928 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x563b3299f8f8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x563b3299c710
|       |       `-CXXThisExpr 0x563b3299f8e8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x563b3299fa58 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x563b3299fa40 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563b3299fa28 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x563b3299f9e8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563b3299f9d0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563b3299f980 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563b3299c7c0
|         |     |   `-CXXThisExpr 0x563b3299f970 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563b3299f9b0 <col:43> 'int' 0
|         `-IntegerLiteral 0x563b3299fa08 <col:49> 'int' 0
|-CXXMethodDecl 0x563b3296b368 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x563b3299fcb8 <col:19, line:306:5>
|   |-IfStmt 0x563b3299fbd8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x563b3299fb18 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x563b3299fb00 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x563b3299fad0 <col:13> 'Vector<String> *' lvalue ->_conf 0x563b32989d10
|   | |     `-CXXThisExpr 0x563b3299fac0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x563b3299fbb8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x563b3299fb88 <col:13, col:20> '<bound member function type>' ->clear 0x563b3294c858
|   |     `-ImplicitCastExpr 0x563b3299fb70 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x563b3299fb40 <col:13> 'Vector<String> *' lvalue ->_conf 0x563b32989d10
|   |         `-CXXThisExpr 0x563b3299fb30 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x563b3299fc60 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x563b3299fc30 <col:9, col:16> '<bound member function type>' .clear 0x563b3299c298
|   |   `-MemberExpr 0x563b3299fc00 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x563b3299c6b0
|   |     `-CXXThisExpr 0x563b3299fbf0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x563b3299fca8 <line:305:9, col:17>
|     `-UnaryOperator 0x563b3299fc90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b3299fc80 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b3296b5e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x563b3296b4f0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x563b3296b768 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x563b3296b6a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x563b3296bae8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x563b3296b810 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x563b3296ba48 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x563b3296b8b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x563b3296b930 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x563b3299ffd8 <col:67, line:327:5>
|     |-WhileStmt 0x563b3299ff88 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x563b3299fda0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x563b3299fd20 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x563b328ba918 0x563b32703ef8 0x563b32703bd0 0x563b326f53b0 0x563b326f5060 0x563b326f4950 0x563b326c72c0 0x563b32653560
|     | | |-DeclRefExpr 0x563b3299fce0 <col:16> 'Iter' lvalue ParmVar 0x563b3296b8b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x563b3299fd00 <col:25> 'Iter' lvalue ParmVar 0x563b3296b930 'end' 'Iter'
|     | `-CompoundStmt 0x563b3299ff68 <col:30, line:325:9>
|     |   |-CallExpr 0x563b3299ff08 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x563b3299fde8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x563b3299fed8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x563b3299fe68 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|     |   |   `-DeclRefExpr 0x563b3299fe48 <col:24> 'Iter' lvalue ParmVar 0x563b3296b8b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x563b3299ff50 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x563b3299ff30 <col:15> 'Iter' lvalue ParmVar 0x563b3296b8b8 'begin' 'Iter'
|     `-ReturnStmt 0x563b3299ffc8 <line:326:9, col:17>
|       `-UnaryOperator 0x563b3299ffb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b3299ffa0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b3296bbf0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x563b3296bb60 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x563b3296bd38 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x563b3296bca8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x563b3296be00 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x563b329a00b8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x563b329a0058 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x563b329a0008 <col:9> '<bound member function type>' ->reset_from 0x563b3299cb38
|   | | `-CXXThisExpr 0x563b3299fff8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x563b329a0038 <col:20> 'int' 0
|   `-ReturnStmt 0x563b329a00a8 <line:352:9, col:17>
|     `-UnaryOperator 0x563b329a0090 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b329a0080 <col:17> 'Args *' this
|-VarDecl 0x563b3296beb8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b3296bf20 <col:38> 'int' 1
|-VarDecl 0x563b3296bfb0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b3296c018 <col:39> 'int' 2
|-VarDecl 0x563b3296c0a8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b3296c110 <col:39> 'int' 4
|-VarDecl 0x563b3296c1a0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x563b3296c208 <col:39> 'int' 8
|-FunctionTemplateDecl 0x563b3296c588 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x563b3296c280 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3296c4e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563b3296c330 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296c3d8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x563b329a0210 <col:43, line:371:5>
|     `-ReturnStmt 0x563b329a0200 <line:370:9, col:34>
|       `-CallExpr 0x563b329a01c8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a00e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a0168 <col:21> 'const char *' lvalue ParmVar 0x563b3296c330 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a0188 <col:30> 'int' 0
|         `-DeclRefExpr 0x563b329a01a8 <col:33> 'T' lvalue ParmVar 0x563b3296c3d8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3296c8b8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x563b3296c5f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3296c818 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563b3296c6a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296c748 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x563b329a0360 <col:45, line:375:5>
|     `-ReturnStmt 0x563b329a0350 <line:374:9, col:42>
|       `-CallExpr 0x563b329a0318 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a0238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a02b8 <col:21> 'const char *' lvalue ParmVar 0x563b3296c6a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a02d8 <col:30> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x563b329a02f8 <col:41> 'T' lvalue ParmVar 0x563b3296c748 'x' 'T &'
|-FunctionTemplateDecl 0x563b3296cbe8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x563b3296c920 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x563b3296cb48 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563b3296c9d0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563b3296ca78 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x563b329a04b0 <col:45, line:379:5>
| |   `-ReturnStmt 0x563b329a04a0 <line:378:9, col:43>
| |     `-CallExpr 0x563b329a0468 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563b329a0388 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563b329a0408 <col:21> 'const char *' lvalue ParmVar 0x563b3296c9d0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x563b329a0428 <col:30> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int'
| |       `-DeclRefExpr 0x563b329a0448 <col:42> 'T' lvalue ParmVar 0x563b3296ca78 'x' 'T &'
| |-CXXMethodDecl 0x563b329e8ab8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, String &)'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x563b329e88d8 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x563b329e89a8 <col:39, col:42> col:42 x 'String &'
| `-CXXMethodDecl 0x563b329e8f18 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x563b329e8d30 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x563b329e8e08 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x563b3296cf18 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x563b3296cc50 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3296ce78 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563b3296cd00 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296cda8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x563b329a06b0 <col:46, line:383:5>
|     `-ReturnStmt 0x563b329a06a0 <line:382:9, col:55>
|       `-CallExpr 0x563b329a0668 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a04d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a0558 <col:21> 'const char *' lvalue ParmVar 0x563b3296cd00 'keyword' 'const char *'
|         |-BinaryOperator 0x563b329a0628 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563b329a05d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b329a05b8 <col:30> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b329a0610 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b329a05f0 <col:42> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563b329a0648 <col:54> 'T' lvalue ParmVar 0x563b3296cda8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3296d318 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x563b3296cf80 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3296d278 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x563b3296d030 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296d0b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563b3296d158 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x563b329a07f0 <col:54, line:388:5>
|     |-CallExpr 0x563b329a0778 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a06c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563b329a0708 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563b329a0718 <col:30> 'const char *' lvalue ParmVar 0x563b3296d030 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b329a0738 <col:39> 'int' lvalue ParmVar 0x563b3296d0b0 'flags' 'int'
|     | `-DeclRefExpr 0x563b329a0758 <col:46> 'T' lvalue ParmVar 0x563b3296d158 'x' 'T &'
|     `-ReturnStmt 0x563b329a07e0 <line:387:9, col:17>
|       `-UnaryOperator 0x563b329a07c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a07b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3296d7c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x563b3296d388 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b3296d408 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b3296d728 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563b3296d4c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296d568 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x563b3296d608 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b329a0960 <col:74, line:403:5>
|     `-ReturnStmt 0x563b329a0950 <line:402:9, col:56>
|       `-CallExpr 0x563b329a0910 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a0820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a0890 <col:28> 'const char *' lvalue ParmVar 0x563b3296d4c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a08b0 <col:37> 'int' 0
|         |-DeclRefExpr 0x563b329a08d0 <col:40> 'T' lvalue ParmVar 0x563b3296d568 'x' 'T &'
|         `-DeclRefExpr 0x563b329a08f0 <col:43> 'const V' lvalue ParmVar 0x563b3296d608 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b3296dc38 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563b3296d838 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b3296d8b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b3296db98 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563b3296d978 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296da18 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x563b3296dab8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b329a0ac8 <col:76, line:407:5>
|     `-ReturnStmt 0x563b329a0ab8 <line:406:9, col:65>
|       `-CallExpr 0x563b329a0a78 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a0988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a09f8 <col:28> 'const char *' lvalue ParmVar 0x563b3296d978 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a0a18 <col:37> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int'
|         |-DeclRefExpr 0x563b329a0a38 <col:49> 'T' lvalue ParmVar 0x563b3296da18 'x' 'T &'
|         `-DeclRefExpr 0x563b329a0a58 <col:52> 'const V' lvalue ParmVar 0x563b3296dab8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b3296e188 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x563b3296dca8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b3296dd28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b3296e0e8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563b3296dde8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296de68 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563b3296df08 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x563b3296dfa8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b329a0c30 <col:85, line:412:5>
|     |-CallExpr 0x563b329a0bb0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a0ae0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563b329a0b20 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563b329a0b30 <col:37> 'const char *' lvalue ParmVar 0x563b3296dde8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b329a0b50 <col:46> 'int' lvalue ParmVar 0x563b3296de68 'flags' 'int'
|     | |-DeclRefExpr 0x563b329a0b70 <col:53> 'T' lvalue ParmVar 0x563b3296df08 'x' 'T &'
|     | `-DeclRefExpr 0x563b329a0b90 <col:56> 'const V' lvalue ParmVar 0x563b3296dfa8 'default_value' 'const V &'
|     `-ReturnStmt 0x563b329a0c20 <line:411:9, col:17>
|       `-UnaryOperator 0x563b329a0c08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a0bf8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3296e618 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x563b3296e200 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296e278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3296e578 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b3296e338 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296e3b0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563b3296e458 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x563b329a0db0 <col:53, line:425:5>
|     `-ReturnStmt 0x563b329a0da0 <line:424:9, col:42>
|       `-CallExpr 0x563b329a0d60 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a0c60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a0ce0 <col:21> 'const char *' lvalue ParmVar 0x563b3296e338 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a0d00 <col:30> 'int' 0
|         |-DeclRefExpr 0x563b329a0d20 <col:33> 'P' lvalue ParmVar 0x563b3296e3b0 'parser' 'P'
|         `-DeclRefExpr 0x563b329a0d40 <col:41> 'T' lvalue ParmVar 0x563b3296e458 'x' 'T &'
|-FunctionTemplateDecl 0x563b3296ea68 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x563b3296e688 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296e708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3296e9c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b3296e7c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296e840 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b3296e8e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x563b329a0f28 <col:55, line:429:5>
|     `-ReturnStmt 0x563b329a0f18 <line:428:9, col:50>
|       `-CallExpr 0x563b329a0ed8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a0dd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a0e58 <col:21> 'const char *' lvalue ParmVar 0x563b3296e7c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a0e78 <col:30> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x563b329a0e98 <col:41> 'P' lvalue ParmVar 0x563b3296e840 'parser' 'P'
|         `-DeclRefExpr 0x563b329a0eb8 <col:49> 'T' lvalue ParmVar 0x563b3296e8e8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3296eeb8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x563b3296ead8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296eb58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3296ee18 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b3296ec18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296ec90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b3296ed38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x563b329a10a0 <col:55, line:433:5>
|     `-ReturnStmt 0x563b329a1090 <line:432:9, col:51>
|       `-CallExpr 0x563b329a1050 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a0f50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a0fd0 <col:21> 'const char *' lvalue ParmVar 0x563b3296ec18 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a0ff0 <col:30> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int'
|         |-DeclRefExpr 0x563b329a1010 <col:42> 'P' lvalue ParmVar 0x563b3296ec90 'parser' 'P'
|         `-DeclRefExpr 0x563b329a1030 <col:50> 'T' lvalue ParmVar 0x563b3296ed38 'x' 'T &'
|-FunctionTemplateDecl 0x563b3296f308 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x563b3296ef28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296efa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x563b3296f268 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x563b3296f068 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563b3296f0e0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x563b3296f188 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x563b329a12c8 <col:56, line:437:5>
| |   `-ReturnStmt 0x563b329a12b8 <line:436:9, col:63>
| |     `-CallExpr 0x563b329a1278 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563b329a10c8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563b329a1148 <col:21> 'const char *' lvalue ParmVar 0x563b3296f068 'keyword' 'const char *'
| |       |-BinaryOperator 0x563b329a1218 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x563b329a11c8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x563b329a11a8 <col:30> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x563b329a1200 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563b329a11e0 <col:42> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x563b329a1238 <col:54> 'P' lvalue ParmVar 0x563b3296f0e0 'parser' 'P'
| |       `-DeclRefExpr 0x563b329a1258 <col:62> 'T' lvalue ParmVar 0x563b3296f188 'x' 'T &'
| `-CXXMethodDecl 0x563b329e8178 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, FixedPointArg, unsigned int &)'
|   |-TemplateArgument type 'FixedPointArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x563b329e7ee0 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x563b329e7f88 <col:40, col:42> col:42 parser 'FixedPointArg':'FixedPointArg'
|   `-ParmVarDecl 0x563b329e8058 <col:50, col:53> col:53 x 'unsigned int &'
|-FunctionTemplateDecl 0x563b3296f838 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x563b3296f378 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296f3f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3296f798 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b3296f4b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296f538 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563b3296f5b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563b3296f658 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x563b329a1430 <col:64, line:442:5>
|     |-CallExpr 0x563b329a13b0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a12e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563b329a1320 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563b329a1330 <col:30> 'const char *' lvalue ParmVar 0x563b3296f4b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b329a1350 <col:39> 'int' lvalue ParmVar 0x563b3296f538 'flags' 'int'
|     | |-DeclRefExpr 0x563b329a1370 <col:46> 'P' lvalue ParmVar 0x563b3296f5b0 'parser' 'P'
|     | `-DeclRefExpr 0x563b329a1390 <col:54> 'T' lvalue ParmVar 0x563b3296f658 'x' 'T &'
|     `-ReturnStmt 0x563b329a1420 <line:441:9, col:17>
|       `-UnaryOperator 0x563b329a1408 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a13f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3296fe38 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x563b3296f8b0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296f928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563b3296f9a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b3296fd98 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563b3296fa70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3296fae8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563b3296fb88 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x563b3296fc58 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b329a15c8 <col:84, line:458:5>
|     `-ReturnStmt 0x563b329a15b8 <line:457:9, col:64>
|       `-CallExpr 0x563b329a1570 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a1460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a14d0 <col:28> 'const char *' lvalue ParmVar 0x563b3296fa70 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a14f0 <col:37> 'int' 0
|         |-DeclRefExpr 0x563b329a1510 <col:40> 'P' lvalue ParmVar 0x563b3296fae8 'parser' 'P'
|         |-DeclRefExpr 0x563b329a1530 <col:48> 'T' lvalue ParmVar 0x563b3296fb88 'x' 'T &'
|         `-DeclRefExpr 0x563b329a1550 <col:51> 'const V' lvalue ParmVar 0x563b3296fc58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b329703b8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563b3296feb0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3296ff28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563b3296ffa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b32970318 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563b32970070 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329700e8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563b32970188 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x563b32970228 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b329a1758 <col:86, line:462:5>
|     `-ReturnStmt 0x563b329a1748 <line:461:9, col:73>
|       `-CallExpr 0x563b329a1700 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a15f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a1660 <col:28> 'const char *' lvalue ParmVar 0x563b32970070 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a1680 <col:37> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int'
|         |-DeclRefExpr 0x563b329a16a0 <col:49> 'P' lvalue ParmVar 0x563b329700e8 'parser' 'P'
|         |-DeclRefExpr 0x563b329a16c0 <col:57> 'T' lvalue ParmVar 0x563b32970188 'x' 'T &'
|         `-DeclRefExpr 0x563b329a16e0 <col:60> 'const V' lvalue ParmVar 0x563b32970228 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563b32970a18 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x563b32970430 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b329704a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563b32970528 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b32970978 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563b329705f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32970670 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563b329706e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x563b32970788 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x563b32970828 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x563b329a18e8 <col:95, line:467:5>
|     |-CallExpr 0x563b329a1860 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a1770 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563b329a17b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563b329a17c0 <col:37> 'const char *' lvalue ParmVar 0x563b329705f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b329a17e0 <col:46> 'int' lvalue ParmVar 0x563b32970670 'flags' 'int'
|     | |-DeclRefExpr 0x563b329a1800 <col:53> 'P' lvalue ParmVar 0x563b329706e8 'parser' 'P'
|     | |-DeclRefExpr 0x563b329a1820 <col:61> 'T' lvalue ParmVar 0x563b32970788 'x' 'T &'
|     | `-DeclRefExpr 0x563b329a1840 <col:64> 'const V' lvalue ParmVar 0x563b32970828 'default_value' 'const V &'
|     `-ReturnStmt 0x563b329a18d8 <line:466:9, col:17>
|       `-UnaryOperator 0x563b329a18c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a18b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b32970ff8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x563b32970a98 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32970b18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b32970b98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b32970f58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b32970c60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32970cd8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563b32970d78 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b32970e18 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b329a1a90 <col:63, line:481:5>
|     `-ReturnStmt 0x563b329a1a80 <line:480:9, col:47>
|       `-CallExpr 0x563b329a1a38 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a1918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a1998 <col:21> 'const char *' lvalue ParmVar 0x563b32970c60 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a19b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x563b329a19d8 <col:33> 'P' lvalue ParmVar 0x563b32970cd8 'parser' 'P'
|         |-DeclRefExpr 0x563b329a19f8 <col:41> 'T1' lvalue ParmVar 0x563b32970d78 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b329a1a18 <col:45> 'T2' lvalue ParmVar 0x563b32970e18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b32971578 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x563b32971070 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b329710e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b32971168 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b329714d8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b32971230 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329712a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b32971348 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b329713e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b329a1c30 <col:65, line:485:5>
|     `-ReturnStmt 0x563b329a1c20 <line:484:9, col:55>
|       `-CallExpr 0x563b329a1bd8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a1ab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a1b38 <col:21> 'const char *' lvalue ParmVar 0x563b32971230 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a1b58 <col:30> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x563b329a1b78 <col:41> 'P' lvalue ParmVar 0x563b329712a8 'parser' 'P'
|         |-DeclRefExpr 0x563b329a1b98 <col:49> 'T1' lvalue ParmVar 0x563b32971348 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b329a1bb8 <col:53> 'T2' lvalue ParmVar 0x563b329713e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b32976f28 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x563b329715f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32971668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b329716e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b32976e88 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b329717b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32976c50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563b32976cf8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b32976d98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b329a1dd0 <col:65, line:489:5>
|     `-ReturnStmt 0x563b329a1dc0 <line:488:9, col:56>
|       `-CallExpr 0x563b329a1d78 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a1c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a1cd8 <col:21> 'const char *' lvalue ParmVar 0x563b329717b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a1cf8 <col:30> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int'
|         |-DeclRefExpr 0x563b329a1d18 <col:42> 'P' lvalue ParmVar 0x563b32976c50 'parser' 'P'
|         |-DeclRefExpr 0x563b329a1d38 <col:50> 'T1' lvalue ParmVar 0x563b32976cf8 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b329a1d58 <col:54> 'T2' lvalue ParmVar 0x563b32976d98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b329774a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x563b32976fa0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32977018 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b32977098 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b32977408 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b32977160 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329771d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x563b32977278 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b32977318 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b329a2020 <col:66, line:493:5>
|     `-ReturnStmt 0x563b329a2010 <line:492:9, col:68>
|       `-CallExpr 0x563b329a1fc8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a1df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a1e78 <col:21> 'const char *' lvalue ParmVar 0x563b32977160 'keyword' 'const char *'
|         |-BinaryOperator 0x563b329a1f48 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563b329a1ef8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b329a1ed8 <col:30> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b329a1f30 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b329a1f10 <col:42> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563b329a1f68 <col:54> 'P' lvalue ParmVar 0x563b329771d8 'parser' 'P'
|         |-DeclRefExpr 0x563b329a1f88 <col:62> 'T1' lvalue ParmVar 0x563b32977278 'x1' 'T1 &'
|         `-DeclRefExpr 0x563b329a1fa8 <col:66> 'T2' lvalue ParmVar 0x563b32977318 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563b32977b08 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x563b32977520 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32977598 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b32977618 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b32977a68 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b329776e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32977760 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563b329777d8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563b32977878 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563b32977918 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x563b329a21b0 <col:74, line:498:5>
|     |-CallExpr 0x563b329a2128 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a2038 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563b329a2078 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563b329a2088 <col:30> 'const char *' lvalue ParmVar 0x563b329776e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b329a20a8 <col:39> 'int' lvalue ParmVar 0x563b32977760 'flags' 'int'
|     | |-DeclRefExpr 0x563b329a20c8 <col:46> 'P' lvalue ParmVar 0x563b329777d8 'parser' 'P'
|     | |-DeclRefExpr 0x563b329a20e8 <col:54> 'T1' lvalue ParmVar 0x563b32977878 'x1' 'T1 &'
|     | `-DeclRefExpr 0x563b329a2108 <col:58> 'T2' lvalue ParmVar 0x563b32977918 'x2' 'T2 &'
|     `-ReturnStmt 0x563b329a21a0 <line:497:9, col:17>
|       `-UnaryOperator 0x563b329a2188 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a2178 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b32977e68 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x563b32977b88 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b32977dc8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b32977c40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32977cb8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x563b329a22f8 <col:52, line:509:5>
|     `-ReturnStmt 0x563b329a22e8 <line:508:9, col:44>
|       `-CallExpr 0x563b329a22b0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a21e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2250 <col:26> 'const char *' lvalue ParmVar 0x563b32977c40 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a2270 <col:35> 'int' 0
|         `-DeclRefExpr 0x563b329a2290 <col:38> 'P' lvalue ParmVar 0x563b32977cb8 'parser' 'P'
|-FunctionTemplateDecl 0x563b32978168 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x563b32977ed0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b329780c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b32977f80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32977ff8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563b329a2438 <col:54, line:513:5>
|     `-ReturnStmt 0x563b329a2428 <line:512:9, col:52>
|       `-CallExpr 0x563b329a23f0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2390 <col:26> 'const char *' lvalue ParmVar 0x563b32977f80 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a23b0 <col:35> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x563b329a23d0 <col:46> 'P' lvalue ParmVar 0x563b32977ff8 'parser' 'P'
|-FunctionTemplateDecl 0x563b32978468 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x563b329781d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b329783c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b32978280 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329782f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563b329a2578 <col:54, line:517:5>
|     `-ReturnStmt 0x563b329a2568 <line:516:9, col:53>
|       `-CallExpr 0x563b329a2530 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a24d0 <col:26> 'const char *' lvalue ParmVar 0x563b32978280 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a24f0 <col:35> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int'
|         `-DeclRefExpr 0x563b329a2510 <col:47> 'P' lvalue ParmVar 0x563b329782f8 'parser' 'P'
|-FunctionTemplateDecl 0x563b32978768 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x563b329784d0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b329786c8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b32978580 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329785f8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x563b329a2768 <col:55, line:521:5>
|     `-ReturnStmt 0x563b329a2758 <line:520:9, col:65>
|       `-CallExpr 0x563b329a2720 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a25a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2610 <col:26> 'const char *' lvalue ParmVar 0x563b32978580 'keyword' 'const char *'
|         |-BinaryOperator 0x563b329a26e0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x563b329a2690 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563b329a2670 <col:35> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563b329a26c8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563b329a26a8 <col:47> 'const int' lvalue Var 0x563b3296bfb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563b329a2700 <col:59> 'P' lvalue ParmVar 0x563b329785f8 'parser' 'P'
|-FunctionTemplateDecl 0x563b32978b38 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x563b329787d0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b32978a98 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563b32978880 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32978900 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563b32978978 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x563b329a28a8 <col:63, line:526:5>
|     |-CallExpr 0x563b329a2830 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a2780 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x563b329a27c0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x563b329a27d0 <col:35> 'const char *' lvalue ParmVar 0x563b32978880 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563b329a27f0 <col:44> 'int' lvalue ParmVar 0x563b32978900 'flags' 'int'
|     | `-DeclRefExpr 0x563b329a2810 <col:51> 'P' lvalue ParmVar 0x563b32978978 'parser' 'P'
|     `-ReturnStmt 0x563b329a2898 <line:525:9, col:17>
|       `-UnaryOperator 0x563b329a2880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a2870 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b32978f88 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x563b32978ba8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32978c28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b32978ee8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b32978ce8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32978d60 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x563b32978e08 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x563b329a2a00 <col:58, line:541:5>
|     `-ReturnStmt 0x563b329a29f0 <line:540:9, col:39>
|       `-CallExpr 0x563b329a29b8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a28d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2958 <col:21> 'const char *' lvalue ParmVar 0x563b32978ce8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a2978 <col:30> 'P' lvalue ParmVar 0x563b32978d60 'parser' 'P'
|         `-DeclRefExpr 0x563b329a2998 <col:38> 'T' lvalue ParmVar 0x563b32978e08 'x' 'T &'
|-FunctionTemplateDecl 0x563b329793d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x563b32978ff8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32979078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b32979338 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b32979138 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329791b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563b32979258 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563b329a2b38 <col:60, line:545:5>
|     `-ReturnStmt 0x563b329a2b28 <line:544:9, col:41>
|       `-CallExpr 0x563b329a2af0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2a28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2a90 <col:23> 'const char *' lvalue ParmVar 0x563b32979138 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a2ab0 <col:32> 'P' lvalue ParmVar 0x563b329791b0 'parser' 'P'
|         `-DeclRefExpr 0x563b329a2ad0 <col:40> 'T' lvalue ParmVar 0x563b32979258 'x' 'T &'
|-FunctionTemplateDecl 0x563b32979828 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x563b32979448 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b329794c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b32979788 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b32979588 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32979600 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563b329796a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563b329a2c70 <col:60, line:549:5>
|     `-ReturnStmt 0x563b329a2c60 <line:548:9, col:41>
|       `-CallExpr 0x563b329a2c28 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2bc8 <col:23> 'const char *' lvalue ParmVar 0x563b32979588 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a2be8 <col:32> 'P' lvalue ParmVar 0x563b32979600 'parser' 'P'
|         `-DeclRefExpr 0x563b329a2c08 <col:40> 'T' lvalue ParmVar 0x563b329796a8 'x' 'T &'
|-FunctionTemplateDecl 0x563b32979c78 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x563b32979898 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32979918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b32979bd8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b329799d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32979a50 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x563b32979af8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x563b329a2da8 <col:61, line:553:5>
|     `-ReturnStmt 0x563b329a2d98 <line:552:9, col:42>
|       `-CallExpr 0x563b329a2d60 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2d00 <col:24> 'const char *' lvalue ParmVar 0x563b329799d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a2d20 <col:33> 'P' lvalue ParmVar 0x563b32979a50 'parser' 'P'
|         `-DeclRefExpr 0x563b329a2d40 <col:41> 'T' lvalue ParmVar 0x563b32979af8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3297a158 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x563b32979ce8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32979d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297a0b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b32979e28 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32979ea8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563b32979f20 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x563b32979fc8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x563b329a2f20 <col:69, line:557:5>
|     `-ReturnStmt 0x563b329a2f10 <line:556:9, col:46>
|       `-CallExpr 0x563b329a2ed0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2dd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2e50 <col:21> 'const char *' lvalue ParmVar 0x563b32979e28 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a2e70 <col:30> 'int' lvalue ParmVar 0x563b32979ea8 'flags' 'int'
|         |-DeclRefExpr 0x563b329a2e90 <col:37> 'P' lvalue ParmVar 0x563b32979f20 'parser' 'P'
|         `-DeclRefExpr 0x563b329a2eb0 <col:45> 'T' lvalue ParmVar 0x563b32979fc8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3297a468 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x563b3297a1d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b3297a3c8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563b3297a280 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297a2f8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x563b329a3060 <col:56, line:571:5>
|     `-ReturnStmt 0x563b329a3050 <line:570:9, col:48>
|       `-CallExpr 0x563b329a3018 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a2f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a2fb8 <col:30> 'const char *' lvalue ParmVar 0x563b3297a280 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a2fd8 <col:39> 'int' 0
|         `-DeclRefExpr 0x563b329a2ff8 <col:42> 'P' lvalue ParmVar 0x563b3297a2f8 'parser' 'P'
|-FunctionTemplateDecl 0x563b3297a7f8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x563b3297a4d0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b3297a758 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563b3297a580 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297a600 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297a678 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x563b329a3230 <col:67, line:576:5>
|     |-CallExpr 0x563b329a31b8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a3078 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x563b329a30b8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x563b329a30c8 <col:39> 'const char *' lvalue ParmVar 0x563b3297a580 'keyword' 'const char *'
|     | |-BinaryOperator 0x563b329a3178 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x563b329a3128 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563b329a30e8 <col:48> 'int' lvalue ParmVar 0x563b3297a600 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563b329a3160 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563b329a3140 <col:56> 'const int' lvalue Var 0x563b3296c1a0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x563b329a3198 <col:68> 'P' lvalue ParmVar 0x563b3297a678 'parser' 'P'
|     `-ReturnStmt 0x563b329a3220 <line:575:9, col:17>
|       `-UnaryOperator 0x563b329a3208 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a31f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3297ac48 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x563b3297a868 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3297a8e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297aba8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563b3297a9a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297aa20 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563b3297aac8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x563b329a33a0 <col:62, line:592:5>
|     `-ReturnStmt 0x563b329a3390 <line:591:9, col:51>
|       `-CallExpr 0x563b329a3350 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a3260 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a32d0 <col:30> 'const char *' lvalue ParmVar 0x563b3297a9a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a32f0 <col:39> 'int' 0
|         |-DeclRefExpr 0x563b329a3310 <col:42> 'P' lvalue ParmVar 0x563b3297aa20 'parser' 'P'
|         `-DeclRefExpr 0x563b329a3330 <col:50> 'T' lvalue ParmVar 0x563b3297aac8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3297b128 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x563b3297acb8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3297ad38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297b088 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b3297adf8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297ae78 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297aef0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x563b3297af98 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x563b329a3598 <col:73, line:597:5>
|     |-CallExpr 0x563b329a3518 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a33b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x563b329a33f8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x563b329a3408 <col:39> 'const char *' lvalue ParmVar 0x563b3297adf8 'keyword' 'const char *'
|     | |-BinaryOperator 0x563b329a34b8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x563b329a3468 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563b329a3428 <col:48> 'int' lvalue ParmVar 0x563b3297ae78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563b329a34a0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563b329a3480 <col:56> 'const int' lvalue Var 0x563b3296c1a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x563b329a34d8 <col:68> 'P' lvalue ParmVar 0x563b3297aef0 'parser' 'P'
|     | `-DeclRefExpr 0x563b329a34f8 <col:76> 'T' lvalue ParmVar 0x563b3297af98 'x' 'T &'
|     `-ReturnStmt 0x563b329a3588 <line:596:9, col:17>
|       `-UnaryOperator 0x563b329a3570 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a3560 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3297b6d8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x563b3297b1a0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3297b218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297b638 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x563b3297b2d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297b350 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x563b3297b510 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b329a3708 <col:65, line:614:5>
|     `-ReturnStmt 0x563b329a36f8 <line:613:9, col:46>
|       `-CallExpr 0x563b329a36b8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a35c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a3638 <col:25> 'const char *' lvalue ParmVar 0x563b3297b2d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a3658 <col:34> 'int' 0
|         |-DeclRefExpr 0x563b329a3678 <col:37> 'P' lvalue ParmVar 0x563b3297b350 'parser' 'P'
|         `-DeclRefExpr 0x563b329a3698 <col:45> 'Vector<T>' lvalue ParmVar 0x563b3297b510 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563b3297bb08 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x563b3297b748 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3297ba68 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x563b3297b800 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297b950 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b329a3920 <col:55, line:618:5>
|     `-ReturnStmt 0x563b329a3910 <line:617:9, col:55>
|       `-CallExpr 0x563b329a38d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a3730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a37a0 <col:25> 'const char *' lvalue ParmVar 0x563b3297b800 'keyword' 'const char *'
|         |-IntegerLiteral 0x563b329a37c0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x563b329a3890 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x563b329a38b0 <col:54> 'Vector<T>' lvalue ParmVar 0x563b3297b950 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563b3297c0d8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x563b3297bb70 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3297bbe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297c038 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563b3297bca8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297bd28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297bda0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563b3297bef0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b329a3b18 <col:76, line:623:5>
|     |-CallExpr 0x563b329a3a98 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563b329a3938 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x563b329a3978 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x563b329a3988 <col:34> 'const char *' lvalue ParmVar 0x563b3297bca8 'keyword' 'const char *'
|     | |-BinaryOperator 0x563b329a3a38 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x563b329a39e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563b329a39a8 <col:43> 'int' lvalue ParmVar 0x563b3297bd28 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563b329a3a20 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563b329a3a00 <col:51> 'const int' lvalue Var 0x563b3296c1a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x563b329a3a58 <col:63> 'P' lvalue ParmVar 0x563b3297bda0 'parser' 'P'
|     | `-DeclRefExpr 0x563b329a3a78 <col:71> 'Vector<T>' lvalue ParmVar 0x563b3297bef0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x563b329a3b08 <line:622:9, col:17>
|       `-UnaryOperator 0x563b329a3af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a3ae0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3297c618 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x563b3297c150 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3297c1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297c578 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x563b3297c288 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297c308 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297c450 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563b329a3d80 <col:66, line:627:5>
|     `-ReturnStmt 0x563b329a3d70 <line:626:9, col:59>
|       `-CallExpr 0x563b329a3d30 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563b329a3b48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563b329a3bb8 <col:25> 'const char *' lvalue ParmVar 0x563b3297c288 'keyword' 'const char *'
|         |-DeclRefExpr 0x563b329a3bd8 <col:34> 'int' lvalue ParmVar 0x563b3297c308 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x563b329a3cf0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x563b329a3d10 <col:58> 'Vector<T>' lvalue ParmVar 0x563b3297c450 'x' 'Vector<T> &'
|-CXXMethodDecl 0x563b3297c6a8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x563b329a3e00 <col:25, line:633:5>
|   `-ReturnStmt 0x563b329a3df0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x563b329a3dd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563b329a3da8 <col:16> 'const bool' lvalue ->_status 0x563b32989b78
|         `-CXXThisExpr 0x563b329a3d98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563b3297c828 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x563b3297c760 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x563b329a3ee8 <col:27, line:639:5>
|   |-BinaryOperator 0x563b329a3e90 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b329a3e18 <col:9> 'bool' lvalue ParmVar 0x563b3297c760 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b329a3e78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b329a3e48 <col:13> 'bool' lvalue ->_status 0x563b32989b78
|   |     `-CXXThisExpr 0x563b329a3e38 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x563b329a3ed8 <line:638:9, col:17>
|     `-UnaryOperator 0x563b329a3ec0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b329a3eb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b3297c9a8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563b3297c8e8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x563b329a3fd8 <col:39, line:644:5>
|   |-BinaryOperator 0x563b329a3f80 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b329a3f08 <col:9> 'bool' lvalue ParmVar 0x563b3297c8e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b329a3f68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b329a3f38 <col:13> 'const bool' lvalue ->_status 0x563b32989b78
|   |     `-CXXThisExpr 0x563b329a3f28 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x563b329a3fc8 <line:643:9, col:17>
|     `-UnaryOperator 0x563b329a3fb0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b329a3fa0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563b3297ca70 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x563b329a4080 <col:30, line:651:5>
|   `-ReturnStmt 0x563b329a4070 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x563b329a4058 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563b329a4028 <col:16> 'bool' lvalue ->_read_status 0x563b32962af0
|         `-ImplicitCastExpr 0x563b329a4008 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x563b329a3ff8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563b3297cbb8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x563b3297cb28 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x563b329a4188 <col:32, line:658:5>
|   |-BinaryOperator 0x563b329a4130 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b329a4098 <col:9> 'bool' lvalue ParmVar 0x563b3297cb28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b329a4118 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b329a40e8 <col:13> 'bool' lvalue ->_read_status 0x563b32962af0
|   |     `-ImplicitCastExpr 0x563b329a40c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x563b329a40b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x563b329a4178 <line:657:9, col:17>
|     `-UnaryOperator 0x563b329a4160 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b329a4150 <col:17> 'Args *' this
|-CXXMethodDecl 0x563b3297cd08 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563b3297cc78 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x563b329a4298 <col:44, line:663:5>
|   |-BinaryOperator 0x563b329a4240 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563b329a41a8 <col:9> 'bool' lvalue ParmVar 0x563b3297cc78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563b329a4228 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563b329a41f8 <col:13> 'bool' lvalue ->_read_status 0x563b32962af0
|   |     `-ImplicitCastExpr 0x563b329a41d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x563b329a41c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x563b329a4288 <line:662:9, col:17>
|     `-UnaryOperator 0x563b329a4270 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b329a4260 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563b3297cdd0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x563b3297ce98 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x563b3297cf60 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x563b3297d028 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x563b3297d338 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x563b3297d0c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3297d298 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x563b3297d1a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x563b329a4650 <col:19, line:706:5>
|     `-IfStmt 0x563b329a4628 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x563b329a4398 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x563b329a4558 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x563b329a4528 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x563b329a44e8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x563b329a43f0 <col:42> '<bound member function type>' ->simple_slot 0x563b3299d7f0
|       |     | `-CXXThisExpr 0x563b329a43e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x563b329a4488 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x563b329a4440 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x563b32708998
|       |     | `-DeclRefExpr 0x563b329a4420 <col:55> 'T' lvalue ParmVar 0x563b3297d1a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x563b329a44c8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x563b329a4618 <line:705:13, col:34>
|         `-CallExpr 0x563b329a45f0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x563b329a4578 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x563b329a45d0 <col:33> 'T' lvalue ParmVar 0x563b3297d1a8 'x' 'T &'
|-FunctionTemplateDecl 0x563b3297d608 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x563b3297d398 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3297d568 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x563b3297d478 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x563b329a4a30 <col:31, line:717:5>
|     |-DeclStmt 0x563b329a4790 <line:713:9, col:23>
|     | `-VarDecl 0x563b329a4678 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x563b329a4768 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x563b329a46f0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x563b329a4748 <col:21> 'T' lvalue ParmVar 0x563b3297d478 'x' 'T &'
|     |-IfStmt 0x563b329a49e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x563b329a4888 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x563b329a49c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x563b329a4960 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x563b329a48f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|     |   | `-DeclRefExpr 0x563b329a48d0 <col:14> 'T *' lvalue Var 0x563b329a4678 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x563b329a49a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x563b329a4a18 <line:716:9, col:16>
|       `-DeclRefExpr 0x563b329a49f8 <col:16> 'T *' lvalue Var 0x563b329a4678 's' 'T *'
|-FunctionTemplateDecl 0x563b3297da18 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x563b3297d668 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b3297d6e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b3297d978 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x563b3297d7c8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x563b3297d868 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x563b329a4d40 <col:37, line:726:5>
|     |-IfStmt 0x563b329a4cd0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x563b329a4cf0 <line:723:13, col:26>
|     | | `-VarDecl 0x563b329a4a98 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x563b329a4b88 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x563b329a4b10 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x563b329a4b68 <col:25> 'T' lvalue ParmVar 0x563b3297d7c8 'x' 'T &'
|     | |-DeclRefExpr 0x563b329a4bb0 <col:16> 'T *' lvalue Var 0x563b329a4a98 's' 'T *'
|     | `-BinaryOperator 0x563b329a4cb0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x563b329a4c60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x563b329a4bf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|     |   | `-DeclRefExpr 0x563b329a4bd0 <col:14> 'T *' lvalue Var 0x563b329a4a98 's' 'T *'
|     |   `-DeclRefExpr 0x563b329a4c90 <col:18> 'const V' lvalue ParmVar 0x563b3297d868 'value' 'const V &'
|     `-ReturnStmt 0x563b329a4d30 <line:725:9, col:17>
|       `-UnaryOperator 0x563b329a4d18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563b329a4d08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563b3297de18 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x563b3297da80 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563b3297dd78 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x563b3297db30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297dbb0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297dc58 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x563b329a5b60 <col:65, line:737:5>
|     |-DeclStmt 0x563b329a4dd8 <line:732:9, col:26>
|     | `-VarDecl 0x563b329a4d70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b329a5b28 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x563b329a5b48 <line:733:13, col:58>
|       | `-VarDecl 0x563b329a4e00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b329a4fe0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b329a4fb0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b329a4f98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b329a4f78 <col:26, col:58> 'String' (CXXTemporary 0x563b329a4f78)
|       |           `-CXXMemberCallExpr 0x563b329a4f08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b329a4e78 <col:26> '<bound member function type>' ->find 0x563b3299ce08
|       |             | `-CXXThisExpr 0x563b329a4e68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b329a4f40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329a4ea8 <col:31> 'const char *' lvalue ParmVar 0x563b3297db30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b329a4f58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329a4ec8 <col:40> 'int' lvalue ParmVar 0x563b3297dbb0 'flags' 'int'
|       |             `-DeclRefExpr 0x563b329a4ee8 <col:47> 'Args::Slot *' lvalue Var 0x563b329a4d70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b329a5098 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b329a5080 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b329a5060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b329a5030 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |       `-ImplicitCastExpr 0x563b329a5018 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b329a4ff8 <col:20> 'String' lvalue Var 0x563b329a4e00 'str' 'String'
|       `-CompoundStmt 0x563b329a5b08 <col:61, line:736:9>
|         |-DeclStmt 0x563b329a5550 <line:734:13, col:76>
|         | `-VarDecl 0x563b329a50e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x563b329a5520 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b329a5490 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b329a54d8 <col:60> 'T' lvalue ParmVar 0x563b3297dc58 'variable' 'T &'
|         |     `-UnaryOperator 0x563b329a5508 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b329a54f8 <col:71> 'Args *' this
|         `-CallExpr 0x563b329a5ad8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x563b329a5578 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|           | `-CXXThisExpr 0x563b329a5568 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563b329a5a98 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x563b329a55a8 <col:23> 'T *' lvalue Var 0x563b329a50e8 's' 'T *'
|           | `-CallExpr 0x563b329a5a58 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563b329a5830 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x563b329a5930 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x563b329a5950 <col:86> 'String' lvalue Var 0x563b329a4e00 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563b329a5a00 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b329a5990 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|           |   | `-DeclRefExpr 0x563b329a5970 <col:92> 'T *' lvalue Var 0x563b329a50e8 's' 'T *'
|           |   `-UnaryOperator 0x563b329a5a40 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563b329a5a30 <col:96> 'Args *' this
|           `-DeclRefExpr 0x563b329a5ab8 <col:103> 'Args::Slot *' lvalue Var 0x563b329a4d70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b3297e368 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563b3297de88 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b3297df08 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563b3297e2c8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563b3297dfc8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297e048 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297e0e8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x563b3297e188 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x563b329a6a00 <col:88, line:745:5>
|     |-DeclStmt 0x563b329a5bf8 <line:741:9, col:26>
|     | `-VarDecl 0x563b329a5b90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b329a5e18 <line:742:9, col:55>
|     | `-VarDecl 0x563b329a5c20 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x563b329a5e00 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x563b329a5dd0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x563b329a5db8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x563b329a5d98 <col:22, col:54> 'String' (CXXTemporary 0x563b329a5d98)
|     |           `-CXXMemberCallExpr 0x563b329a5d28 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x563b329a5c98 <col:22> '<bound member function type>' ->find 0x563b3299ce08
|     |             | `-CXXThisExpr 0x563b329a5c88 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x563b329a5d60 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b329a5cc8 <col:27> 'const char *' lvalue ParmVar 0x563b3297dfc8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x563b329a5d78 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b329a5ce8 <col:36> 'int' lvalue ParmVar 0x563b3297e048 'flags' 'int'
|     |             `-DeclRefExpr 0x563b329a5d08 <col:43> 'Args::Slot *' lvalue Var 0x563b329a5b90 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x563b329a61f0 <line:743:9, col:72>
|     | `-VarDecl 0x563b329a5e68 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563b329a61c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563b329a6130 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x563b329a6178 <col:56> 'T' lvalue ParmVar 0x563b3297e0e8 'variable' 'T &'
|     |     `-UnaryOperator 0x563b329a61a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563b329a6198 <col:67> 'Args *' this
|     `-CallExpr 0x563b329a69d0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x563b329a6218 <col:9> '<bound member function type>' ->postparse 0x563b3299d018
|       | `-CXXThisExpr 0x563b329a6208 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x563b329a6990 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x563b329a6248 <col:19> 'T *' lvalue Var 0x563b329a5e68 's' 'T *'
|       | `-ParenExpr 0x563b329a6970 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x563b329a6940 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x563b329a6928 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x563b329a6910 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x563b329a68f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x563b329a68c0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |     |       `-ImplicitCastExpr 0x563b329a68a8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x563b329a6268 <col:25> 'String' lvalue Var 0x563b329a5c20 'str' 'String'
|       |     |-CallExpr 0x563b329a6718 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x563b329a64f0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x563b329a65f0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x563b329a6610 <col:89> 'String' lvalue Var 0x563b329a5c20 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x563b329a66c0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x563b329a6650 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|       |     | | `-DeclRefExpr 0x563b329a6630 <col:95> 'T *' lvalue Var 0x563b329a5e68 's' 'T *'
|       |     | `-UnaryOperator 0x563b329a6700 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x563b329a66f0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x563b329a6888 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x563b329a6868 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x563b329a6838 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x563b329a67e8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x563b329a6778 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|       |         | | `-DeclRefExpr 0x563b329a6758 <col:109> 'T *' lvalue Var 0x563b329a5e68 's' 'T *'
|       |         | `-DeclRefExpr 0x563b329a6818 <col:113> 'const V' lvalue ParmVar 0x563b3297e188 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x563b329a6858 <col:120> 'bool' true
|       `-DeclRefExpr 0x563b329a69b0 <col:128> 'Args::Slot *' lvalue Var 0x563b329a5b90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b3297e898 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x563b3297e3e0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b3297e458 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b3297e7f8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b3297e518 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297e598 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297e610 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563b3297e6b8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x563b329a75f8 <col:75, line:754:5>
|     |-DeclStmt 0x563b329a6aa8 <line:749:9, col:26>
|     | `-VarDecl 0x563b329a6a40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b329a75c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x563b329a75e0 <line:750:13, col:58>
|       | `-VarDecl 0x563b329a6ad0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b329a6cb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b329a6c80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b329a6c68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b329a6c48 <col:26, col:58> 'String' (CXXTemporary 0x563b329a6c48)
|       |           `-CXXMemberCallExpr 0x563b329a6bd8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b329a6b48 <col:26> '<bound member function type>' ->find 0x563b3299ce08
|       |             | `-CXXThisExpr 0x563b329a6b38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b329a6c10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329a6b78 <col:31> 'const char *' lvalue ParmVar 0x563b3297e518 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b329a6c28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329a6b98 <col:40> 'int' lvalue ParmVar 0x563b3297e598 'flags' 'int'
|       |             `-DeclRefExpr 0x563b329a6bb8 <col:47> 'Args::Slot *' lvalue Var 0x563b329a6a40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b329a6d68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b329a6d50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b329a6d30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b329a6d00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |       `-ImplicitCastExpr 0x563b329a6ce8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b329a6cc8 <col:20> 'String' lvalue Var 0x563b329a6ad0 'str' 'String'
|       `-CompoundStmt 0x563b329a75a0 <col:61, line:753:9>
|         |-DeclStmt 0x563b329a7140 <line:751:13, col:63>
|         | `-VarDecl 0x563b329a6db8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x563b329a7110 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b329a7080 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b329a70c8 <col:47> 'T' lvalue ParmVar 0x563b3297e6b8 'variable' 'T &'
|         |     `-UnaryOperator 0x563b329a70f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b329a70e8 <col:58> 'Args *' this
|         `-CallExpr 0x563b329a7570 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x563b329a7168 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|           | `-CXXThisExpr 0x563b329a7158 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563b329a7530 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x563b329a7198 <col:23> 'T *' lvalue Var 0x563b329a6db8 's' 'T *'
|           | `-CallExpr 0x563b329a74f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563b329a7380 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x563b329a73c8 <col:56> 'P' lvalue ParmVar 0x563b3297e610 'parser' 'P'
|           |   |-DeclRefExpr 0x563b329a73e8 <col:64> 'String' lvalue Var 0x563b329a6ad0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563b329a7498 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b329a7428 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|           |   | `-DeclRefExpr 0x563b329a7408 <col:70> 'T *' lvalue Var 0x563b329a6db8 's' 'T *'
|           |   `-UnaryOperator 0x563b329a74d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563b329a74c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x563b329a7550 <col:81> 'Args::Slot *' lvalue Var 0x563b329a6a40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b32986588 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563b3297e910 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563b3297e988 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x563b3297ea08 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563b329864e8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563b3297ead0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b3297eb50 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563b3297ebc8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x563b329862f8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x563b32986398 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x563b329aa5f8 <col:98, line:762:5>
|     |-DeclStmt 0x563b329a7690 <line:758:9, col:26>
|     | `-VarDecl 0x563b329a7628 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b329a9b20 <line:759:9, col:55>
|     | `-VarDecl 0x563b329a76b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x563b329a9b08 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x563b329a9ad8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x563b329a9ac0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x563b329a9aa0 <col:22, col:54> 'String' (CXXTemporary 0x563b329a9aa0)
|     |           `-CXXMemberCallExpr 0x563b329a9a30 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x563b329a7730 <col:22> '<bound member function type>' ->find 0x563b3299ce08
|     |             | `-CXXThisExpr 0x563b329a7720 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x563b329a9a68 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b329a99d0 <col:27> 'const char *' lvalue ParmVar 0x563b3297ead0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x563b329a9a80 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563b329a99f0 <col:36> 'int' lvalue ParmVar 0x563b3297eb50 'flags' 'int'
|     |             `-DeclRefExpr 0x563b329a9a10 <col:43> 'Args::Slot *' lvalue Var 0x563b329a7628 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x563b329a9f40 <line:760:9, col:59>
|     | `-VarDecl 0x563b329a9b78 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563b329a9f10 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563b329a9e80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x563b329a9ec8 <col:43> 'T' lvalue ParmVar 0x563b329862f8 'variable' 'T &'
|     |     `-UnaryOperator 0x563b329a9ef8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563b329a9ee8 <col:54> 'Args *' this
|     `-CallExpr 0x563b329aa5c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x563b329a9f68 <col:9> '<bound member function type>' ->postparse 0x563b3299d018
|       | `-CXXThisExpr 0x563b329a9f58 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x563b329aa588 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x563b329a9f98 <col:19> 'T *' lvalue Var 0x563b329a9b78 's' 'T *'
|       | `-ParenExpr 0x563b329aa568 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x563b329aa538 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x563b329aa520 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x563b329aa508 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x563b329aa4e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x563b329aa4b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |     |       `-ImplicitCastExpr 0x563b329aa4a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x563b329a9fb8 <col:25> 'String' lvalue Var 0x563b329a76b8 'str' 'String'
|       |     |-CallExpr 0x563b329aa310 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x563b329aa1a0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x563b329aa1e8 <col:59> 'P' lvalue ParmVar 0x563b3297ebc8 'parser' 'P'
|       |     | |-DeclRefExpr 0x563b329aa208 <col:67> 'String' lvalue Var 0x563b329a76b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x563b329aa2b8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x563b329aa248 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|       |     | | `-DeclRefExpr 0x563b329aa228 <col:73> 'T *' lvalue Var 0x563b329a9b78 's' 'T *'
|       |     | `-UnaryOperator 0x563b329aa2f8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x563b329aa2e8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x563b329aa480 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x563b329aa460 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x563b329aa430 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x563b329aa3e0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x563b329aa370 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|       |         | | `-DeclRefExpr 0x563b329aa350 <col:87> 'T *' lvalue Var 0x563b329a9b78 's' 'T *'
|       |         | `-DeclRefExpr 0x563b329aa410 <col:91> 'const V' lvalue ParmVar 0x563b32986398 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x563b329aa450 <col:98> 'bool' true
|       `-DeclRefExpr 0x563b329aa5a8 <col:106> 'Args::Slot *' lvalue Var 0x563b329a7628 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b32986bf8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x563b32986608 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32986688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563b32986708 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563b32986b58 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563b329867d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32986850 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563b329868c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x563b32986968 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x563b32986a08 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x563b329ab5d8 <col:60, line:773:5>
|     |-DeclStmt 0x563b329aa6a0 <line:767:9, col:26>
|     | `-VarDecl 0x563b329aa638 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b329ab5a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x563b329ab5c0 <line:768:13, col:58>
|       | `-VarDecl 0x563b329aa6c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b329aa8a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b329aa878 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b329aa860 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b329aa840 <col:26, col:58> 'String' (CXXTemporary 0x563b329aa840)
|       |           `-CXXMemberCallExpr 0x563b329aa7d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b329aa740 <col:26> '<bound member function type>' ->find 0x563b3299ce08
|       |             | `-CXXThisExpr 0x563b329aa730 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b329aa808 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329aa770 <col:31> 'const char *' lvalue ParmVar 0x563b329867d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b329aa820 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329aa790 <col:40> 'int' lvalue ParmVar 0x563b32986850 'flags' 'int'
|       |             `-DeclRefExpr 0x563b329aa7b0 <col:47> 'Args::Slot *' lvalue Var 0x563b329aa638 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b329aa960 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b329aa948 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b329aa928 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b329aa8f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |       `-ImplicitCastExpr 0x563b329aa8e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b329aa8c0 <col:20> 'String' lvalue Var 0x563b329aa6c8 'str' 'String'
|       `-CompoundStmt 0x563b329ab578 <col:61, line:772:9>
|         |-DeclStmt 0x563b329aaca0 <line:769:13, col:66>
|         | `-VarDecl 0x563b329aa9b8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x563b329aac70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b329aabe0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b329aac28 <col:49> 'T1' lvalue ParmVar 0x563b32986968 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x563b329aac58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b329aac48 <col:61> 'Args *' this
|         |-DeclStmt 0x563b329ab010 <line:770:13, col:66>
|         | `-VarDecl 0x563b329aad28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x563b329aafe0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563b329aaf50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563b329aaf98 <col:49> 'T2' lvalue ParmVar 0x563b32986a08 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x563b329aafc8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563b329aafb8 <col:61> 'Args *' this
|         `-CallExpr 0x563b329ab548 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x563b329ab038 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|           | `-CXXThisExpr 0x563b329ab028 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563b329ab508 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x563b329ab0a8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x563b329ab068 <col:23> 'T1 *' lvalue Var 0x563b329aa9b8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x563b329ab088 <col:29> 'T2 *' lvalue Var 0x563b329aad28 's2' 'T2 *'
|           | `-CallExpr 0x563b329ab4c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563b329ab290 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x563b329ab2d8 <col:63> 'P' lvalue ParmVar 0x563b329868c8 'parser' 'P'
|           |   |-DeclRefExpr 0x563b329ab2f8 <col:71> 'String' lvalue Var 0x563b329aa6c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563b329ab3a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b329ab338 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|           |   | `-DeclRefExpr 0x563b329ab318 <col:77> 'T1 *' lvalue Var 0x563b329aa9b8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x563b329ab468 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563b329ab3f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|           |   | `-DeclRefExpr 0x563b329ab3d8 <col:82> 'T2 *' lvalue Var 0x563b329aad28 's2' 'T2 *'
|           |   `-UnaryOperator 0x563b329ab4a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563b329ab498 <col:87> 'Args *' this
|           `-DeclRefExpr 0x563b329ab528 <col:94> 'Args::Slot *' lvalue Var 0x563b329aa638 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b32986fe8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x563b32986c78 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b32986f48 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563b32986d30 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32986db0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563b32986e28 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x563b329abaf0 <col:67, line:780:5>
|     |-DeclStmt 0x563b329ab670 <line:777:9, col:26>
|     | `-VarDecl 0x563b329ab608 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563b329abab8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x563b329abad8 <line:778:13, col:58>
|       | `-VarDecl 0x563b329ab698 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563b329ab878 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563b329ab848 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563b329ab830 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563b329ab810 <col:26, col:58> 'String' (CXXTemporary 0x563b329ab810)
|       |           `-CXXMemberCallExpr 0x563b329ab7a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563b329ab710 <col:26> '<bound member function type>' ->find 0x563b3299ce08
|       |             | `-CXXThisExpr 0x563b329ab700 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563b329ab7d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329ab740 <col:31> 'const char *' lvalue ParmVar 0x563b32986d30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563b329ab7f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563b329ab760 <col:40> 'int' lvalue ParmVar 0x563b32986db0 'flags' 'int'
|       |             `-DeclRefExpr 0x563b329ab780 <col:47> 'Args::Slot *' lvalue Var 0x563b329ab608 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563b329ab930 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563b329ab918 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563b329ab8f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563b329ab8c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|       |       `-ImplicitCastExpr 0x563b329ab8b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563b329ab890 <col:20> 'String' lvalue Var 0x563b329ab698 'str' 'String'
|       `-CallExpr 0x563b329aba88 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x563b329ab958 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|         | `-CXXThisExpr 0x563b329ab948 <col:13> 'Args *' implicit this
|         |-CallExpr 0x563b329aba38 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x563b329ab9a8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x563b329ab988 <col:23> 'P' lvalue ParmVar 0x563b32986e28 'parser' 'P'
|         | |-DeclRefExpr 0x563b329ab9f0 <col:36> 'String' lvalue Var 0x563b329ab698 'str' 'String'
|         | `-UnaryOperator 0x563b329aba20 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x563b329aba10 <col:42> 'Args *' this
|         `-DeclRefExpr 0x563b329aba68 <col:49> 'Args::Slot *' lvalue Var 0x563b329ab608 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563b32987388 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563b32987058 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563b329872e8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563b32987110 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32987190 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563b32987208 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x563b329ac460 <col:71, line:792:5>
|     |-DeclStmt 0x563b329abb88 <line:784:9, col:26>
|     | `-VarDecl 0x563b329abb20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b329abc58 <line:785:9, col:29>
|     | `-VarDecl 0x563b329abbb8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563b329abc40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563b329abc20 <col:28> 'int' 1
|     |-WhileStmt 0x563b329ac310 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x563b329ac330 <line:786:16, col:61>
|     | | `-VarDecl 0x563b329abc80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563b329abe60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563b329abe30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563b329abe18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563b329abdf8 <col:29, col:61> 'String' (CXXTemporary 0x563b329abdf8)
|     | |           `-CXXMemberCallExpr 0x563b329abd88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563b329abcf8 <col:29> '<bound member function type>' ->find 0x563b3299ce08
|     | |             | `-CXXThisExpr 0x563b329abce8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563b329abdc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b329abd28 <col:34> 'const char *' lvalue ParmVar 0x563b32987110 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563b329abdd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b329abd48 <col:43> 'int' lvalue ParmVar 0x563b32987190 'flags' 'int'
|     | |             `-DeclRefExpr 0x563b329abd68 <col:50> 'Args::Slot *' lvalue Var 0x563b329abb20 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563b329abf18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b329abf00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b329abee0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b329abeb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|     | |       `-ImplicitCastExpr 0x563b329abe98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563b329abe78 <col:23> 'String' lvalue Var 0x563b329abc80 'str' 'String'
|     | `-CompoundStmt 0x563b329ac2e8 <col:64, line:790:9>
|     |   |-CallExpr 0x563b329ac070 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x563b329abf40 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|     |   | | `-CXXThisExpr 0x563b329abf30 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x563b329ac020 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x563b329abf90 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x563b329abf70 <col:23> 'P' lvalue ParmVar 0x563b32987208 'parser' 'P'
|     |   | | |-DeclRefExpr 0x563b329abfd8 <col:36> 'String' lvalue Var 0x563b329abc80 'str' 'String'
|     |   | | `-UnaryOperator 0x563b329ac008 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x563b329abff8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x563b329ac050 <col:49> 'Args::Slot *' lvalue Var 0x563b329abb20 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x563b329ac208 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563b329ac0a0 <col:13> 'int' lvalue Var 0x563b329abbb8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563b329ac1f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563b329ac1d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563b329ac138 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563b329ac118 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563b329ac100 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563b329ac0c0 <col:28> 'int' lvalue Var 0x563b329abbb8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563b329ac0e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563b329ac1b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563b329ac188 <col:49> 'bool' lvalue ->_read_status 0x563b32962af0
|     |   |         `-ImplicitCastExpr 0x563b329ac168 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563b329ac158 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563b329ac2b8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563b329ac228 <col:13> 'int' lvalue ParmVar 0x563b32987190 'flags' 'int'
|     |     `-UnaryOperator 0x563b329ac2a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563b329ac288 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b329ac268 <col:23> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563b329ac440 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563b329ac378 <col:9> 'bool' lvalue ->_read_status 0x563b32962af0
|       | `-ImplicitCastExpr 0x563b329ac358 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563b329ac348 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563b329ac420 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563b329ac400 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563b329ac3e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563b329ac3a8 <col:25> 'int' lvalue Var 0x563b329abbb8 'read_status' 'int'
|           `-IntegerLiteral 0x563b329ac3c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563b32987868 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563b329873f8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32987478 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b329877c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563b32987538 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b329875b8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563b32987630 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x563b329876d8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x563b329ad3f0 <col:84, line:805:5>
|     |-DeclStmt 0x563b329ac508 <line:796:9, col:26>
|     | `-VarDecl 0x563b329ac4a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b329ac5d8 <line:797:9, col:29>
|     | `-VarDecl 0x563b329ac538 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563b329ac5c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563b329ac5a0 <col:28> 'int' 1
|     |-DeclStmt 0x563b329ac910 <line:798:9, col:71>
|     | `-VarDecl 0x563b329ac628 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563b329ac8e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563b329ac850 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x563b329ac898 <col:55> 'T' lvalue ParmVar 0x563b329876d8 'variable' 'T &'
|     |     `-UnaryOperator 0x563b329ac8c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563b329ac8b8 <col:66> 'Args *' this
|     |-WhileStmt 0x563b329ad2a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x563b329ad2c0 <line:799:16, col:61>
|     | | `-VarDecl 0x563b329ac938 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563b329acb18 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563b329acae8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563b329acad0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563b329acab0 <col:29, col:61> 'String' (CXXTemporary 0x563b329acab0)
|     | |           `-CXXMemberCallExpr 0x563b329aca40 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563b329ac9b0 <col:29> '<bound member function type>' ->find 0x563b3299ce08
|     | |             | `-CXXThisExpr 0x563b329ac9a0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563b329aca78 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b329ac9e0 <col:34> 'const char *' lvalue ParmVar 0x563b32987538 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563b329aca90 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b329aca00 <col:43> 'int' lvalue ParmVar 0x563b329875b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x563b329aca20 <col:50> 'Args::Slot *' lvalue Var 0x563b329ac4a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563b329acbd0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b329acbb8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b329acb98 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b329acb68 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|     | |       `-ImplicitCastExpr 0x563b329acb50 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563b329acb30 <col:23> 'String' lvalue Var 0x563b329ac938 'str' 'String'
|     | `-CompoundStmt 0x563b329ad278 <col:64, line:803:9>
|     |   |-CallExpr 0x563b329ad000 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x563b329acbf8 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|     |   | | `-CXXThisExpr 0x563b329acbe8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x563b329acfc0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x563b329acc28 <col:23> 'T *' lvalue Var 0x563b329ac628 's' 'T *'
|     |   | | `-CallExpr 0x563b329acf80 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x563b329ace10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x563b329ace58 <col:56> 'P' lvalue ParmVar 0x563b32987630 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x563b329ace78 <col:64> 'String' lvalue Var 0x563b329ac938 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x563b329acf28 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x563b329aceb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|     |   | |   | `-DeclRefExpr 0x563b329ace98 <col:70> 'T *' lvalue Var 0x563b329ac628 's' 'T *'
|     |   | |   `-UnaryOperator 0x563b329acf68 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x563b329acf58 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x563b329acfe0 <col:81> 'Args::Slot *' lvalue Var 0x563b329ac4a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x563b329ad198 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563b329ad030 <col:13> 'int' lvalue Var 0x563b329ac538 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563b329ad180 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563b329ad160 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563b329ad0c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563b329ad0a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563b329ad090 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563b329ad050 <col:28> 'int' lvalue Var 0x563b329ac538 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563b329ad070 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563b329ad148 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563b329ad118 <col:49> 'bool' lvalue ->_read_status 0x563b32962af0
|     |   |         `-ImplicitCastExpr 0x563b329ad0f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563b329ad0e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563b329ad248 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563b329ad1b8 <col:13> 'int' lvalue ParmVar 0x563b329875b8 'flags' 'int'
|     |     `-UnaryOperator 0x563b329ad230 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563b329ad218 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b329ad1f8 <col:23> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563b329ad3d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563b329ad308 <col:9> 'bool' lvalue ->_read_status 0x563b32962af0
|       | `-ImplicitCastExpr 0x563b329ad2e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563b329ad2d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563b329ad3b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563b329ad390 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563b329ad378 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563b329ad338 <col:25> 'int' lvalue Var 0x563b329ac538 'read_status' 'int'
|           `-IntegerLiteral 0x563b329ad358 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563b32987e48 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x563b329878e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563b32987958 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563b32987da8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563b32987a18 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563b32987a98 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x563b32987b10 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x563b32987c60 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x563b329ae1f8 <col:87, line:821:5>
|     |-DeclStmt 0x563b329ad4a0 <line:809:9, col:26>
|     | `-VarDecl 0x563b329ad438 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563b329ad570 <line:810:9, col:29>
|     | `-VarDecl 0x563b329ad4d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563b329ad558 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563b329ad538 <col:28> 'int' 1
|     |-DeclStmt 0x563b329ad7b8 <line:811:9, col:38>
|     | `-VarDecl 0x563b329ad6a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x563b329ad790 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x563b329ad718 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x563b329ad770 <col:29> 'Vector<T>' lvalue ParmVar 0x563b32987c60 'variable' 'Vector<T> &'
|     |-WhileStmt 0x563b329ae0a8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x563b329ae0c8 <line:812:16, col:61>
|     | | `-VarDecl 0x563b329ad7e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563b329ad9c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563b329ad990 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563b329ad978 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563b329ad958 <col:29, col:61> 'String' (CXXTemporary 0x563b329ad958)
|     | |           `-CXXMemberCallExpr 0x563b329ad8e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563b329ad858 <col:29> '<bound member function type>' ->find 0x563b3299ce08
|     | |             | `-CXXThisExpr 0x563b329ad848 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563b329ad920 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b329ad888 <col:34> 'const char *' lvalue ParmVar 0x563b32987a18 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563b329ad938 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563b329ad8a8 <col:43> 'int' lvalue ParmVar 0x563b32987a98 'flags' 'int'
|     | |             `-DeclRefExpr 0x563b329ad8c8 <col:50> 'Args::Slot *' lvalue Var 0x563b329ad438 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563b329ada78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563b329ada60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563b329ada40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563b329ada10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563b326cb968
|     | |       `-ImplicitCastExpr 0x563b329ad9f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563b329ad9d8 <col:23> 'String' lvalue Var 0x563b329ad7e0 'str' 'String'
|     | `-CompoundStmt 0x563b329ae070 <col:64, line:819:9>
|     |   |-DeclStmt 0x563b329adb38 <line:813:13, col:23>
|     |   | `-VarDecl 0x563b329adaa0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x563b329adb18 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x563b329adcb8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x563b329adb60 <col:13> '<bound member function type>' ->postparse 0x563b3299d018
|     |   | | `-CXXThisExpr 0x563b329adb50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x563b329adc60 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x563b329adbb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x563b329adb90 <col:23> 'P' lvalue ParmVar 0x563b32987b10 'parser' 'P'
|     |   | | |-DeclRefExpr 0x563b329adbf8 <col:36> 'String' lvalue Var 0x563b329ad7e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x563b329adc18 <col:41> 'T' lvalue Var 0x563b329adaa0 'sx' 'T'
|     |   | | `-UnaryOperator 0x563b329adc48 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x563b329adc38 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x563b329adc98 <col:53> 'Args::Slot *' lvalue Var 0x563b329ad438 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x563b329ade10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x563b329add48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x563b329add18 <col:17> 'bool' lvalue ->_read_status 0x563b32962af0
|     |   | |   `-ImplicitCastExpr 0x563b329adcf8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x563b329adce8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x563b329adde8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x563b329add80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x563b329add60 <col:17> 'Vector<T> *' lvalue Var 0x563b329ad6a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x563b329addc8 <col:30> 'T' lvalue Var 0x563b329adaa0 'sx' 'T'
|     |   |-BinaryOperator 0x563b329adf90 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563b329ade28 <col:13> 'int' lvalue Var 0x563b329ad4d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563b329adf78 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563b329adf58 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563b329adec0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563b329adea0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563b329ade88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563b329ade48 <col:28> 'int' lvalue Var 0x563b329ad4d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563b329ade68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563b329adf40 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563b329adf10 <col:49> 'bool' lvalue ->_read_status 0x563b32962af0
|     |   |         `-ImplicitCastExpr 0x563b329adef0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563b329adee0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563b329ae040 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563b329adfb0 <col:13> 'int' lvalue ParmVar 0x563b32987a98 'flags' 'int'
|     |     `-UnaryOperator 0x563b329ae028 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563b329ae010 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563b329adff0 <col:23> 'const int' lvalue Var 0x563b3296beb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563b329ae1d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563b329ae110 <col:9> 'bool' lvalue ->_read_status 0x563b32962af0
|       | `-ImplicitCastExpr 0x563b329ae0f0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563b329ae0e0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563b329ae1b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563b329ae198 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563b329ae180 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563b329ae140 <col:25> 'int' lvalue Var 0x563b329ad4d0 'read_status' 'int'
|           `-IntegerLiteral 0x563b329ae160 <col:40> 'int' 1
|-AccessSpecDecl 0x563b32987ec0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x563b32987ee8 prev 0x563b3296a1b8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x563b32987fe0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x563b329880d0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x563b329ae230 <col:16, line:828:9>
| |-CXXDestructorDecl 0x563b329881c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x563b329ae240 <col:25, line:830:9>
| |-CXXMethodDecl 0x563b329882c0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x563b32988370 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x563b32988418 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563b32988418
| | `-ParmVarDecl 0x563b32988528 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x563b32988ce8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563b32988ce8
|   `-ParmVarDecl 0x563b32988df8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x563b32988598 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x563b329886f8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x563b329888f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x563b329887a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x563b32988818 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x563b329ae420 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x563b32988ba8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x563b329ae290 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563b329ae250 <col:20> 'void *' lvalue ParmVar 0x563b329887a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x563b32988c10 '_slot' 'char *'
| | | `-CXXNewExpr 0x563b329ae318 <col:32, col:45> 'char *' array Function 0x563b324ee3b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x563b329ae300 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x563b329ae2d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x563b32988818 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x563b32988c70 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x563b329ae3e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x563b329ae3a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x563b32988818 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x563b329ae4a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x563b329889f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x563b329881c0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x563b329ae528 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x563b329ae508 <line:840:13, col:22> 'void' array Function 0x563b324ee718 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x563b329ae4f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x563b329ae4c0 <col:22> 'char *' lvalue ->_slot 0x563b32988c10
| |         `-CXXThisExpr 0x563b329ae4b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x563b32988af0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x563b329882c0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x563b329ae718 <col:22, line:844:9>
| |   `-CallExpr 0x563b329ae680 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x563b329ae668 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563b329ae648 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x563b325fa198 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x563b329ae6b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x563b329ae598 <col:20> 'void *' lvalue ->_ptr 0x563b32988ba8
| |     |   `-CXXThisExpr 0x563b329ae588 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x563b329ae6e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x563b329ae6d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x563b329ae5d8 <col:26> 'char *' lvalue ->_slot 0x563b32988c10
| |     |     `-CXXThisExpr 0x563b329ae5c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x563b329ae700 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x563b329ae618 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x563b32988c70
| |         `-CXXThisExpr 0x563b329ae608 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x563b32988ba8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x563b32988c10 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x563b32988c70 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x563b32988e68 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563b32988e68
| | `-ParmVarDecl 0x563b32988f78 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x563b32989018 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563b32989018
|   `-ParmVarDecl 0x563b32989128 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x563b329892c8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x563b32989198 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x563b32989238 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x563b32989560 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x563b32989758 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x563b32989628 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x563b329898d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x563b329ae750 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x563b329ae730 <col:20> 'T *' lvalue ParmVar 0x563b32989628 'ptr' 'T *'
|   | `-CompoundStmt 0x563b329ae7a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x563b32989828 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x563b329882c0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x563b329ae950 <col:22, line:857:9>
|   |   `-CallExpr 0x563b329ae920 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x563b329ae7b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x563b326b2ae8 0x563b3265cbf8
|   |     |-CXXOperatorCallExpr 0x563b329ae8b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x563b329ae840 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563b328bfa98 0x563b328bf6b8 0x563b328bf2e8 0x563b328bef08 0x563b328beb28 0x563b328be758
|   |     | `-MemberExpr 0x563b329ae810 <col:29> 'T *' lvalue ->_ptr 0x563b329898d8
|   |     |   `-CXXThisExpr 0x563b329ae800 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x563b329ae8f0 <col:35> 'T' lvalue ->_slot 0x563b32989938
|   |       `-CXXThisExpr 0x563b329ae8e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x563b329898d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x563b32989938 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x563b329899a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x563b32989aa0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x563b32989af0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b32989a80 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x563b32989a60 <col:31> 'int' 48
|-FieldDecl 0x563b32989b18 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x563b32989b78 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x563b32989bd8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x563b32989d10 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x563b3299c6b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x563b3299c710 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x563b3299c7c0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x563b3299c9e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x563b3299c8f0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x563b3299cb38 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x563b3299caa8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x563b3299ce08 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x563b3299cbf8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x563b3299cc78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x563b3299cd20 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x563b3299d018 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x563b3299ced0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x563b3299cf48 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x563b3299d0e8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x563b3299d238 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x563b3299d1a0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x563b3299d5c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x563b3299d2f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x563b3299d378 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x563b3299d420 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x563b3299d4d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x563b3299d7f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x563b3299d6a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x563b3299d718 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x563b3299db08 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x563b3299d8a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x563b3299da68 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x563b3299d978 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class FixedPointArg
         0 |   class NumArg (base) (empty)
         0 |   int fraction_bits
         4 |   int exponent_delta
         8 |   int status
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b329b9bf0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b329b9d08 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x563b329b9d98 <col:16, col:22> col:16 public
|-EnumDecl 0x563b329b9dc0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x563b329b9ec0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b329ba110 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329b9ea0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x563b329b9e80 <col:21> 'int' 0
| |-EnumConstantDecl 0x563b329b9f50 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b329ba128 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329b9f30 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x563b329b9f10 <col:24> 'int' 22
| |-EnumConstantDecl 0x563b329b9fe0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b329ba140 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329b9fc0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x563b329b9fa0 <col:24> 'int' 34
| |-EnumConstantDecl 0x563b329ba070 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563b329ba158 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b329ba050 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x563b329ba030 <col:25> 'int' 95
| `-EnumConstantDecl 0x563b329ba0c0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x563b329bbad0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b329bbf08 <col:7>
|-CXXConstructorDecl 0x563b329bbbd8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x563b329bbbd8
| `-ParmVarDecl 0x563b329bbce8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x563b329bbd88 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b329bbe98 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x563b329e8430 <col:7>
`-CXXDestructorDecl 0x563b329be018 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b329c3720 <../dummy_inc/click/args.hh:1194:1, line:1207:1> line:1194:7 referenced class FixedPointArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x563b329c3878 <col:1, col:7> col:7 implicit referenced class FixedPointArg
|-AccessSpecDecl 0x563b329c3908 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x563b329c3aa0 <line:1195:5, line:1197:5> line:1195:14 used FixedPointArg 'void (int, int)'
| |-ParmVarDecl 0x563b329c3948 <col:28, col:32> col:32 used b 'int'
| |-ParmVarDecl 0x563b329c39c8 <col:35, col:50> col:39 used exponent 'int' cinit
| | `-IntegerLiteral 0x563b329c4a48 <col:50> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563b329c4be8 <col:14> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563b329c4610 'fraction_bits' 'int'
| | `-ImplicitCastExpr 0x563b329c4b28 <line:1196:25> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x563b329c4ae8 <col:25> 'int' lvalue ParmVar 0x563b329c3948 'b' 'int'
| |-CXXCtorInitializer Field 0x563b329c4678 'exponent_delta' 'int'
| | `-ImplicitCastExpr 0x563b329c4ba8 <col:44> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x563b329c4b68 <col:44> 'int' lvalue ParmVar 0x563b329c39c8 'exponent' 'int'
| `-CompoundStmt 0x563b329c4c60 <col:54, line:1197:5>
|-CXXMethodDecl 0x563b329c3d78 <line:1198:5, col:106> col:17 parse_saturating 'bool (const String &, uint32_t &, const ArgContext &)' inline
| |-ParmVarDecl 0x563b329c3b68 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x563b329c3be0 <col:53, col:63> col:63 result 'uint32_t &'
| `-ParmVarDecl 0x563b329c3c58 <col:71, col:96> col:89 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563b329c4a68 <col:96> 'const ArgContext' lvalue Var 0x563b329ae978 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x563b329c3fd0 <line:1199:5, col:88> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x563b329c3e40 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x563b329c3eb8 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x563b329c3f30 <col:53, col:78> col:71 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563b329c4a88 <col:78> 'const ArgContext' lvalue Var 0x563b329ae978 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x563b329c42a8 <line:1200:5, col:98> col:10 parse_saturating 'bool (const String &, int32_t &, const ArgContext &)'
| |-ParmVarDecl 0x563b329c4098 <col:27, col:41> col:41 str 'const String &'
| |-ParmVarDecl 0x563b329c4110 <col:46, col:55> col:55 result 'int32_t &'
| `-ParmVarDecl 0x563b329c4188 <col:63, col:88> col:81 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563b329c4aa8 <col:88> 'const ArgContext' lvalue Var 0x563b329ae978 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x563b329c4540 <line:1201:5, col:87> col:10 parse 'bool (const String &, int32_t &, const ArgContext &)'
| |-ParmVarDecl 0x563b329c4370 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x563b329c43e8 <col:35, col:44> col:44 result 'int32_t &'
| `-ParmVarDecl 0x563b329c4460 <col:52, col:77> col:70 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563b329c4ac8 <col:77> 'const ArgContext' lvalue Var 0x563b329ae978 'blank_args' 'const ArgContext'
|-FieldDecl 0x563b329c4610 <line:1202:5, col:9> col:9 referenced fraction_bits 'int'
|-FieldDecl 0x563b329c4678 <line:1203:5, col:9> col:9 referenced exponent_delta 'int'
|-FieldDecl 0x563b329c46e0 <line:1204:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x563b329c4730 <line:1205:3, col:10> col:3 private
|-CXXMethodDecl 0x563b329c4978 <line:1206:5, col:72> col:10 used underparse 'bool (const String &, bool, uint32_t &)'
| |-ParmVarDecl 0x563b329c4768 <col:21, col:35> col:35 str 'const String &'
| |-ParmVarDecl 0x563b329c47e0 <col:40, col:45> col:45 is_signed 'bool'
| `-ParmVarDecl 0x563b329c4858 <col:56, col:66> col:66 result 'uint32_t &'
|-CXXConstructorDecl 0x563b329e7948 <line:1194:7> col:7 implicit constexpr FixedPointArg 'void (const FixedPointArg &)' inline default trivial noexcept-unevaluated 0x563b329e7948
| `-ParmVarDecl 0x563b329e7a58 <col:7> col:7 'const FixedPointArg &'
|-CXXConstructorDecl 0x563b329e7af8 <col:7> col:7 implicit used constexpr FixedPointArg 'void (FixedPointArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b329e7c08 <col:7> col:7 used 'FixedPointArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563b329e8440 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563b329e8410 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x563b329e83e0 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b329e83b0 <col:7> 'FixedPointArg' lvalue ParmVar 0x563b329e7c08 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x563b329c4610 'fraction_bits' 'int'
| | `-ImplicitCastExpr 0x563b329e8538 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b329e8508 <col:7> 'int' xvalue .fraction_bits 0x563b329c4610
| |     `-CXXStaticCastExpr 0x563b329e84d8 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b329e84a8 <col:7> 'FixedPointArg' lvalue ParmVar 0x563b329e7c08 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x563b329c4678 'exponent_delta' 'int'
| | `-ImplicitCastExpr 0x563b329e8608 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b329e85d8 <col:7> 'int' xvalue .exponent_delta 0x563b329c4678
| |     `-CXXStaticCastExpr 0x563b329e85a8 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b329e8578 <col:7> 'FixedPointArg' lvalue ParmVar 0x563b329e7c08 '' 'FixedPointArg &&'
| |-CXXCtorInitializer Field 0x563b329c46e0 'status' 'int'
| | `-ImplicitCastExpr 0x563b329e86d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563b329e86a8 <col:7> 'int' xvalue .status 0x563b329c46e0
| |     `-CXXStaticCastExpr 0x563b329e8678 <col:7> 'FixedPointArg' xvalue static_cast<class FixedPointArg &&> <NoOp>
| |       `-DeclRefExpr 0x563b329e8648 <col:7> 'FixedPointArg' lvalue ParmVar 0x563b329e7c08 '' 'FixedPointArg &&'
| `-CompoundStmt 0x563b329e8738 <col:7>
`-CXXDestructorDecl 0x563b329e7cd0 <col:7> col:7 implicit referenced ~FixedPointArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.FixedPointArg = type { i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.FixedPointArg = type { i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b326bb810 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b326bb928 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x563b326bb9b8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x563b326bba88 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x563b326bbb70 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x563b326bbd88 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563b326bbc30 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bbf38 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563b326bbe40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563b326bc080 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563b326bbff0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563b326bc1c8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563b326bc138 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bc310 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563b326bc280 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bc3d8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x563b326bc520 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x563b326bc490 <col:28> col:31 'int'
|-CXXMethodDecl 0x563b326bc5e8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x563b326bc730 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x563b326bc6a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x563b326bc8a8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563b326bc7e8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bc9f0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563b326bc960 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bcab8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x563b326bcc78 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563b326bcb68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b326bcbe0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bcec8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563b326bcd38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b326bcdb0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b326bcf78 <col:86> "" ""
|-CXXMethodDecl 0x563b326bd1e8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x563b326bd058 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x563b326bd0d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bd398 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563b326bd2a8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563b326bd548 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563b326bd450 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563b326bd818 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563b326bd600 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563b326bd678 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b326bd6f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bdaf8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563b326bd8e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563b326bd958 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b326bd9d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b326bdbb0 <col:115> "" ""
|-AccessSpecDecl 0x563b326bdc20 <line:84:3, col:10> col:3 private
|-FieldDecl 0x563b326bdc58 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b326bf170 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563b326bf170
| `-ParmVarDecl 0x563b326bf278 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x563b326bf318 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563b326bf318
| `-ParmVarDecl 0x563b326bf428 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x563b326f4a58 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b328e6850 <col:7>
|-CXXConstructorDecl 0x563b326f4b30 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563b326f4b30
| `-ParmVarDecl 0x563b326f4c48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x563b326f4cb8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563b326f4cb8
| `-ParmVarDecl 0x563b326f4dc8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x563b328e9250 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b328d53f8 prev 0x563b328ca600 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b328d54f0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x563b328d55e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x563b328d5708 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x563b328d5888 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x563b328d5a08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x563b328d5b88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x563b328e69b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563b328e7228 <col:11>
|-CXXDestructorDecl 0x563b328e6a90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563b328e6bc8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x563b328e6bc8
| `-ParmVarDecl 0x563b328e6cd8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x563b328e6d78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b328e6d78
| `-ParmVarDecl 0x563b328e6e88 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x563b328e9c48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x563b328e9d58 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x563b328e9fd8 <col:11>
|   `-ReturnStmt 0x563b328e9fc8 <col:11>
|     `-UnaryOperator 0x563b328e9fb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563b328e9fa0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x563b328e9dc8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b328e9dc8
  `-ParmVarDecl 0x563b328e9ed8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b328d5bf0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b328d5d08 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x563b328d5da8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x563b328d5e10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x563b328d5e78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x563b328d5ee0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x563b328d5f40 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x563b328d6000 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x563b328d6060 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x563b328d60c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x563b328e68c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x563b328d5da8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x563b328e7238 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x563b328e7290 <col:12>
|-CXXConstructorDecl 0x563b328e6ef8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x563b328e6ef8
| `-ParmVarDecl 0x563b328e7008 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x563b328e70a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x563b328e70a8
| `-ParmVarDecl 0x563b328e71b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x563b328e9330 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b328c3d10 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563b328c3e28 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x563b328c3eb8 <col:16, col:22> col:16 public
|-EnumDecl 0x563b328c3ee0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x563b328c3fe0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x563b328c40c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328c3fc0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x563b328c3fa0 <col:21> 'int' 28
| `-EnumConstantDecl 0x563b328c4070 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x563b328c40d8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328c4050 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x563b328c4030 <col:22> 'int' 64
|-CXXMethodDecl 0x563b328c4418 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x563b328c4100 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b328c4180 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x563b328c41f8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b328c4270 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b328c44d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x563b328c46d8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x563b328c4550 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x563b328c45c8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b328c4788 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x563b328c48e8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x563b328c47f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b328c4990 <col:72> warn_unused_result ""
|-TypedefDecl 0x563b328c4cf0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x563b328c4c80 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x563b328c4c20 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x563b328c4be0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x563b3239b2d0 'void'
|       |-PointerType 0x563b32643e90 'unsigned char *'
|       | `-BuiltinType 0x563b3239b3d0 'unsigned char'
|       |-TypedefType 0x563b32440400 'size_t' sugar
|       | |-Typedef 0x563b3240bb20 'size_t'
|       | `-BuiltinType 0x563b3239b430 'unsigned long'
|       `-PointerType 0x563b3239bad0 'void *'
|         `-BuiltinType 0x563b3239b2d0 'void'
|-CXXMethodDecl 0x563b328c5168 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x563b328c4d60 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x563b328c4dd8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b328c4e70 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x563b328c4ef0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x563b328df860 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x563b328df848 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x563b328df810 <col:58> 'int' 0
| |-ParmVarDecl 0x563b328c4f70 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x563b328df888 <col:76> 'int' 0
| |-ParmVarDecl 0x563b328c4ff0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x563b328df8a8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x563b328c5238 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x563b328c52b8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x563b328c5378 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x563b328c5418 <col:20>
| `-OptimizeNoneAttr 0x563b328c5470 <col:30>
|-CXXMethodDecl 0x563b328c54e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x563b328c5588 <col:20>
| `-OptimizeNoneAttr 0x563b328c55e0 <col:30>
|-CXXMethodDecl 0x563b328c5658 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x563b328c56f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x563b328c57a8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x563b328c5848 <col:20>
| |-OptimizeNoneAttr 0x563b328c58a0 <col:30>
| `-WarnUnusedResultAttr 0x563b328c58c8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x563b328c5920 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x563b328c59c0 <col:20>
| `-OptimizeNoneAttr 0x563b328c5a18 <col:30>
|-CXXMethodDecl 0x563b328c5a68 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x563b328c5b08 <col:20>
| `-OptimizeNoneAttr 0x563b328c5b60 <col:30>
|-CXXMethodDecl 0x563b328c5ba8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x563b328c5c48 <col:20>
| `-OptimizeNoneAttr 0x563b328c5ca0 <col:30>
|-CXXMethodDecl 0x563b328c5ce8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x563b328c5da8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x563b328c5e70 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563b328c5f38 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563b328c5ff8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b328c6118 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x563b328df970 <col:54, line:99:5>
|   `-ReturnStmt 0x563b328df960 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x563b328df948 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x563b328df918 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563b328d63f8
|         `-CXXThisExpr 0x563b328df908 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x563b328c62b8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x563b328c61c8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x563b328dfa20 <col:67, line:103:5>
|   `-BinaryOperator 0x563b328dfa00 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x563b328df998 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563b328d63f8
|     | `-CXXThisExpr 0x563b328df988 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x563b328df9e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x563b328df9c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x563b328c61c8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x563b328c63b0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x563b328dfaa0 <col:33, line:107:5>
|   `-ReturnStmt 0x563b328dfa90 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x563b328dfa78 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x563b328dfa48 <col:16> 'void *' lvalue ->_destructor_argument 0x563b328d6460
|         `-CXXThisExpr 0x563b328dfa38 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x563b328c6470 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x563b328e00d0 <col:25, line:113:5>
|   |-ParenExpr 0x563b328dfe18 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x563b328dfde8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x563b328dfb58 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563b328dfb30 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x563b328dfaf8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x563b328dfac8 <col:24> '<bound member function type>' ->shared 0x563b328c54e8
|   |   |       `-ImplicitCastExpr 0x563b328dfb18 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x563b328dfab8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563b328dfbb8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328dfb98 <col:42> 'int' 0
|   |   `-CallExpr 0x563b328dfd48 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x563b328dfd30 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328dfd10 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328dfd88 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328dfc28 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x563b328dfda0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328dfc50 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328dfdb8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328dfc88 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x563b328dfdd0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328dfcf8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328dfce0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328dfca8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x563b328e0018 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x563b328dfe48 <col:2> 'unsigned char *' lvalue ->_head 0x563b328d6200
|   | | `-CXXThisExpr 0x563b328dfe38 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x563b328e0000 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x563b328dffe0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x563b328dfe88 <col:10> 'unsigned char *' lvalue ->_data 0x563b328d6268
|   |     | `-CXXThisExpr 0x563b328dfe78 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x563b328dffc8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x563b328dffa8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x563b328dfec8 <col:18> 'unsigned char *' lvalue ->_tail 0x563b328d62d0
|   |         | `-CXXThisExpr 0x563b328dfeb8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x563b328dff90 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x563b328dff70 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x563b328dff08 <col:26> 'unsigned char *' lvalue ->_end 0x563b328d6338
|   |             | `-CXXThisExpr 0x563b328dfef8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x563b328dff58 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x563b328dff38 <col:33> 'int' 0
|   `-BinaryOperator 0x563b328e00b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x563b328e0048 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563b328d63f8
|     | `-CXXThisExpr 0x563b328e0038 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x563b328e0098 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x563b328e0078 <col:16> 'int' 0
|-CXXMethodDecl 0x563b328c65b0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563b328c6520 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328c6658 <col:20>
| |-OptimizeNoneAttr 0x563b328c66b0 <col:30>
| `-WarnUnusedResultAttr 0x563b328c66d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x563b328c67a8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563b328c6718 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328c6850 <col:20>
| |-OptimizeNoneAttr 0x563b328c68a8 <col:30>
| `-WarnUnusedResultAttr 0x563b328c68d0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x563b328c6a08 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x563b328c6910 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b328c6ab0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x563b328c6bb0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x563b328c6b20 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328c6c58 <col:20>
| `-OptimizeNoneAttr 0x563b328c6cb0 <col:30>
|-CXXMethodDecl 0x563b328c6d78 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563b328c6ce8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b328c6e20 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x563b328c6f20 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x563b328c6e90 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563b328c6fc8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x563b328c70c8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x563b328c7038 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328c7170 <col:20>
| `-OptimizeNoneAttr 0x563b328c71c8 <col:30>
|-CXXMethodDecl 0x563b328c7358 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x563b328c7208 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x563b328c7280 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x563b328df8c8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x563b328c7408 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x563b328c7608 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563b328c7480 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x563b328c74f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328c7818 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563b328c76c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b328c7740 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328c7a28 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x563b328c78d8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x563b328c7958 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x563b328df8d8 <col:39> 'int' 0
|-CXXMethodDecl 0x563b328c7af8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x563b328c7bc0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563b328c7c88 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b328c7d48 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b328c7e10 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x563b328c7f58 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x563b328c7ec8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x563b328c8128 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563b328c8018 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x563b328c8090 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328c81f8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x563b328c82b8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x563b328c8358 <col:20>
| `-OptimizeNoneAttr 0x563b328c83b0 <col:30>
|-CXXMethodDecl 0x563b328c8400 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x563b328c84a0 <col:20>
| `-OptimizeNoneAttr 0x563b328c84f8 <col:30>
|-CXXMethodDecl 0x563b328c8548 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b328c8608 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b328c86d0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x563b328c8770 <col:20>
| `-OptimizeNoneAttr 0x563b328c87c8 <col:30>
|-CXXMethodDecl 0x563b328c8918 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563b328c8808 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x563b328c8880 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328c8a68 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x563b328c89d8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328c8b40 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x563b328c8c00 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x563b328c8ca0 <col:20>
| `-OptimizeNoneAttr 0x563b328c8cf8 <col:30>
|-CXXMethodDecl 0x563b328c8d48 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x563b328c8de8 <col:20>
| `-OptimizeNoneAttr 0x563b328c8e40 <col:30>
|-CXXMethodDecl 0x563b328c8e90 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b328c8f58 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x563b328c8ff8 <col:20>
| `-OptimizeNoneAttr 0x563b328c9050 <col:30>
|-CXXMethodDecl 0x563b328c9098 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x563b328c91b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x563b328c9328 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x563b328c9268 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x563b328c9418 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x563b328c94b8 <col:20>
| `-OptimizeNoneAttr 0x563b328c9510 <col:30>
|-CXXMethodDecl 0x563b328c9560 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x563b328c9620 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563b328c9858 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x563b328c96d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x563b328c9748 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328c9908 <col:20>
| `-OptimizeNoneAttr 0x563b328c9960 <col:30>
|-CXXMethodDecl 0x563b328c9a08 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x563b328c9aa8 <col:20>
| `-OptimizeNoneAttr 0x563b328c9b00 <col:30>
|-CXXMethodDecl 0x563b328c9b50 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x563b328c9bf0 <col:20>
| `-OptimizeNoneAttr 0x563b328c9c48 <col:30>
|-CXXMethodDecl 0x563b328c9c90 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x563b328c9d30 <col:20>
| `-OptimizeNoneAttr 0x563b328c9d88 <col:30>
|-CXXMethodDecl 0x563b328c9e88 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x563b328c9dc0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x563b328c9f30 <col:20>
| `-OptimizeNoneAttr 0x563b328c9f88 <col:30>
|-CXXMethodDecl 0x563b328ca148 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x563b328c9fc0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x563b328ca038 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328ca1f8 <col:20>
| `-OptimizeNoneAttr 0x563b328ca250 <col:30>
|-CXXMethodDecl 0x563b328ca2f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x563b328ca418 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x563b328ca538 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x563b328ca5d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x563b328ca600 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x563b328ca728 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x563b328ca7c8 <col:20>
| `-OptimizeNoneAttr 0x563b328ca820 <col:30>
|-CXXMethodDecl 0x563b328ca8c8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x563b328ca968 <col:20>
| `-OptimizeNoneAttr 0x563b328ca9c0 <col:30>
|-AccessSpecDecl 0x563b328ca9e8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x563b328caa10 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x563b328cab10 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x563b328cab60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328caaf0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x563b328caad0 <col:14> 'int' 48
|-CXXMethodDecl 0x563b328cabc8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x563b328cac68 <col:20>
| `-OptimizeNoneAttr 0x563b328cacc0 <col:30>
|-CXXMethodDecl 0x563b328cad38 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x563b328cadd8 <col:20>
| `-OptimizeNoneAttr 0x563b328cae30 <col:30>
|-CXXMethodDecl 0x563b328caef8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x563b328cae68 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x563b328cb098 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x563b328cb238 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x563b328cb148 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x563b328cb2e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x563b328cb3e0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b328cb790 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cb3c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x563b328cb3a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x563b328cb470 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b328cb7a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cb450 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x563b328cb430 <col:14> 'int' 1
| |-EnumConstantDecl 0x563b328cb500 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b328cb7c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cb4e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x563b328cb4c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x563b328cb590 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b328cb7d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cb570 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x563b328cb550 <col:14> 'int' 3
| |-EnumConstantDecl 0x563b328cb620 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b328cb7f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cb600 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x563b328cb5e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x563b328cb6b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563b328cb808 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cb690 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x563b328cb670 <col:13> 'int' 5
| `-EnumConstantDecl 0x563b328cb740 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x563b328cb820 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328cb720 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x563b328cb700 <col:14> 'int' 6
|-CXXMethodDecl 0x563b328cb888 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x563b328cb928 <col:20>
| `-OptimizeNoneAttr 0x563b328cb980 <col:30>
|-CXXMethodDecl 0x563b328cba78 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x563b328cb9b8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x563b328cbb20 <col:20>
| `-OptimizeNoneAttr 0x563b328cbb78 <col:30>
|-CXXMethodDecl 0x563b328cbbe8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x563b328cbd10 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x563b328cbe88 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x563b328cbdc0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x563b328cbf50 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x563b328cc018 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x563b328cc158 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x563b328cc0c8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x563b328cc200 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x563b328cc300 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563b328cc500 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cc2e0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x563b328cc2c0 <col:23> 'int' 0
| |-EnumConstantDecl 0x563b328cc390 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563b328cc518 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cc370 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x563b328cc350 <col:45> 'int' 4
| |-EnumConstantDecl 0x563b328cc420 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563b328cc530 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cc400 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x563b328cc3e0 <col:24> 'int' 0
| `-EnumConstantDecl 0x563b328cc4b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x563b328cc548 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328cc490 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x563b328cc470 <col:47> 'int' 16
|-CXXMethodDecl 0x563b328cc5a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x563b328cc718 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x563b328cc658 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x563b328cc7c0 <col:20>
| `-OptimizeNoneAttr 0x563b328cc818 <col:30>
|-CXXMethodDecl 0x563b328cc868 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x563b328e01f0 <col:18, col:36>
|   `-ReturnStmt 0x563b328e01e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x563b328e01c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x563b328e01a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x563b328e0178 <col:27> '<bound member function type>' ->xanno 0x563b328ca8c8
|           `-CXXThisExpr 0x563b328e0168 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x563b328cc960 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x563b328e0300 <col:30, col:48>
|   `-ReturnStmt 0x563b328e02f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x563b328e02d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x563b328e02b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x563b328e0288 <col:39> '<bound member function type>' ->xanno 0x563b328ca728
|           `-CXXThisExpr 0x563b328e0278 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x563b328cca48 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x563b328e0498 <col:24, col:50>
|   `-ReturnStmt 0x563b328e0488 <col:26, col:47>
|     `-UnaryOperator 0x563b328e0470 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b328e0450 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x563b328e0438 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b328e03e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x563b328d5708
|         |   `-CXXMemberCallExpr 0x563b328e03c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x563b328e0398 <col:34> '<bound member function type>' ->xanno 0x563b328ca8c8
|         |       `-CXXThisExpr 0x563b328e0388 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x563b328e0418 <col:46> 'int' 0
|-CXXMethodDecl 0x563b328ccb50 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x563b328e0668 <col:36, col:62>
|   `-ReturnStmt 0x563b328e0658 <col:38, col:59>
|     `-UnaryOperator 0x563b328e0640 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b328e0620 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x563b328e0608 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b328e0580 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x563b328d5708
|         |   `-CXXMemberCallExpr 0x563b328e0560 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563b328e0530 <col:46> '<bound member function type>' ->xanno 0x563b328ca728
|         |       `-CXXThisExpr 0x563b328e0520 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x563b328e05b0 <col:58> 'int' 0
|-CXXMethodDecl 0x563b328ccc68 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x563b328e0800 <col:26, col:53>
|   `-ReturnStmt 0x563b328e07f0 <col:28, col:50>
|     `-UnaryOperator 0x563b328e07d8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b328e07b8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x563b328e07a0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b328e0750 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x563b328d5a08
|         |   `-CXXMemberCallExpr 0x563b328e0730 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x563b328e0700 <col:36> '<bound member function type>' ->xanno 0x563b328ca8c8
|         |       `-CXXThisExpr 0x563b328e06f0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x563b328e0780 <col:49> 'int' 0
|-CXXMethodDecl 0x563b328ccd88 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x563b328e09d8 <col:38, col:65>
|   `-ReturnStmt 0x563b328e09c8 <col:40, col:62>
|     `-UnaryOperator 0x563b328e09b0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563b328e0990 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x563b328e0978 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b328e08e8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x563b328d5a08
|         |   `-CXXMemberCallExpr 0x563b328e08c8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563b328e0898 <col:48> '<bound member function type>' ->xanno 0x563b328ca728
|         |       `-CXXThisExpr 0x563b328e0888 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x563b328e0918 <col:61> 'int' 0
|-CXXMethodDecl 0x563b328ccf38 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x563b328cce40 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x563b328e10a8 <col:34, line:463:5>
|   |-ParenExpr 0x563b328e0ef0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x563b328e0ec0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e0b28 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e0af8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e0a48 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e0a30 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e09f0 <col:23> 'int' lvalue ParmVar 0x563b328cce40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e0a10 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e0ad8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e0aa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e0a68 <col:33> 'int' lvalue ParmVar 0x563b328cce40 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x563b328e0ac0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x563b328e0a88 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x563b328e0b88 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e0b68 <col:56> 'int' 0
|   |   `-CallExpr 0x563b328e0e20 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x563b328e0e08 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e0de8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e0e60 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e0c78 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x563b328e0e78 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e0ca8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e0e90 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e0ce0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x563b328e0ea8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e0dd0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e0db8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e0d78 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x563b328e1098 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x563b328e1080 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x563b328e1060 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x563b328e1030 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563b328e0fe0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x563b328d5708
|         |   `-CXXMemberCallExpr 0x563b328e0fc0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563b328e0f90 <col:9> '<bound member function type>' ->xanno 0x563b328ca728
|         |       `-CXXThisExpr 0x563b328e0f80 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x563b328e1048 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x563b328e1010 <col:21> 'int' lvalue ParmVar 0x563b328cce40 'i' 'int'
|-CXXMethodDecl 0x563b328cd188 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x563b328ccff8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x563b328cd070 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x563b328e1738 <col:40, line:472:5>
|   |-ParenExpr 0x563b328e1550 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x563b328e1520 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e1200 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e11d0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e1120 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e1108 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e10c8 <col:23> 'int' lvalue ParmVar 0x563b328ccff8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e10e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e11b0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e1180 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e1140 <col:33> 'int' lvalue ParmVar 0x563b328ccff8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x563b328e1198 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x563b328e1160 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x563b328e1260 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e1240 <col:56> 'int' 0
|   |   `-CallExpr 0x563b328e1480 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x563b328e1468 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e1448 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e14c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e12d0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x563b328e14d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e1300 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e14f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e1338 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x563b328e1508 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e1430 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e1418 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e13d8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x563b328e1718 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x563b328e16c0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x563b328e1690 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x563b328e1640 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x563b328d5708
|     | |   `-CXXMemberCallExpr 0x563b328e1620 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x563b328e15f0 <col:2> '<bound member function type>' ->xanno 0x563b328ca8c8
|     | |       `-CXXThisExpr 0x563b328e15e0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x563b328e16a8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x563b328e1670 <col:14> 'int' lvalue ParmVar 0x563b328ccff8 'i' 'int'
|     `-ImplicitCastExpr 0x563b328e1700 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x563b328e16e0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x563b328cd070 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x563b328cd348 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x563b328cd250 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563b328e1eb8 <col:36, line:485:5>
|   |-ParenExpr 0x563b328e1c20 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e1bf0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e18d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e18a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e17b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e1798 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e1758 <col:23> 'int' lvalue ParmVar 0x563b328cd250 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e1778 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e1880 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e1868 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e17d0 <col:33> 'int' lvalue ParmVar 0x563b328cd250 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e1848 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e1830 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e17f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e1810 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b328e1930 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e1910 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e1b50 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e1b38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e1b18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e1b90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e19a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b328e1ba8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e19d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e1bc0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e1a10 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x563b328e1bd8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e1b00 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e1ae8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e1aa8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x563b328e1ea8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x563b328e1e90 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x563b328e1e78 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b328e1e48 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x563b328e1de8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b328e1db8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b328e1d30 <col:61, col:70> 'char const[48]' lvalue ->c 0x563b328d55e0
|             |   `-CXXMemberCallExpr 0x563b328e1d10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b328e1ce0 <col:61> '<bound member function type>' ->xanno 0x563b328ca728
|             |       `-CXXThisExpr 0x563b328e1cd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b328e1dd0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b328e1d60 <col:74> 'int' lvalue ParmVar 0x563b328cd250 'i' 'int'
|-CXXMethodDecl 0x563b328cd598 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x563b328cd408 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b328cd480 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x563b328e2608 <col:42, line:500:5>
|   |-ParenExpr 0x563b328e23a0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e2370 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e2050 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e2020 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e1f30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e1f18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e1ed8 <col:23> 'int' lvalue ParmVar 0x563b328cd408 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e1ef8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e2000 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e1fe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e1f50 <col:33> 'int' lvalue ParmVar 0x563b328cd408 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e1fc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e1fb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e1f70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e1f90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b328e20b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e2090 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e22d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e22b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e2298 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e2310 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e2120 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b328e2328 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e2158 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e2340 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e2190 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x563b328e2358 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e2280 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e2268 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e2228 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x563b328e25e8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x563b328e2598 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b328e2568 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x563b328e2510 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b328e24e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b328e2490 <col:48, col:57> 'char [48]' lvalue ->c 0x563b328d55e0
|     |     |   `-CXXMemberCallExpr 0x563b328e2470 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b328e2440 <col:48> '<bound member function type>' ->xanno 0x563b328ca8c8
|     |     |       `-CXXThisExpr 0x563b328e2430 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b328e24f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b328e24c0 <col:61> 'int' lvalue ParmVar 0x563b328cd408 'i' 'int'
|     `-ImplicitCastExpr 0x563b328e25d0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x563b328e25b0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x563b328cd480 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x563b328cd758 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x563b328cd660 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x563b328e2d68 <col:35, line:513:5>
|   |-ParenExpr 0x563b328e2a78 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e2a48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e27a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e2770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e2680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e2668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e2628 <col:23> 'int' lvalue ParmVar 0x563b328cd660 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e2648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e2750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e2738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e26a0 <col:33> 'int' lvalue ParmVar 0x563b328cd660 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e2718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e2700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e26c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e26e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b328e2800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e27e0 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e29a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e2990 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e2970 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e29e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e2870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b328e2a00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e28a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e2a18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e28e0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x563b328e2a30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e2958 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e2940 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e2900 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x563b328e2d58 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x563b328e2d40 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x563b328e2d28 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b328e2cf8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x563b328e2c70 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b328e2c40 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b328e2bf0 <col:60, col:69> 'char const[48]' lvalue ->c 0x563b328d55e0
|             |   `-CXXMemberCallExpr 0x563b328e2bd0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b328e2ba0 <col:60> '<bound member function type>' ->xanno 0x563b328ca728
|             |       `-CXXThisExpr 0x563b328e2b90 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b328e2c58 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b328e2c20 <col:73> 'int' lvalue ParmVar 0x563b328cd660 'i' 'int'
|-CXXMethodDecl 0x563b328cd9a8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x563b328cd818 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b328cd890 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x563b328e3488 <col:41, line:528:5>
|   |-ParenExpr 0x563b328e3210 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e31e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e2f00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e2ed0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e2de0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e2dc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e2d88 <col:23> 'int' lvalue ParmVar 0x563b328cd818 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e2da8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e2eb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e2e98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e2e00 <col:33> 'int' lvalue ParmVar 0x563b328cd818 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e2e78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e2e60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e2e20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e2e40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563b328e2f60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e2f40 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e3140 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e3128 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e3108 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e3180 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e2fd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563b328e3198 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e3008 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e31b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e3040 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x563b328e31c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e30f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e30d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e3098 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x563b328e3468 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x563b328e3418 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b328e33e8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x563b328e3390 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b328e3350 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b328e3300 <col:47, col:56> 'char [48]' lvalue ->c 0x563b328d55e0
|     |     |   `-CXXMemberCallExpr 0x563b328e32e0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b328e32b0 <col:47> '<bound member function type>' ->xanno 0x563b328ca8c8
|     |     |       `-CXXThisExpr 0x563b328e32a0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b328e3368 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b328e3330 <col:60> 'int' lvalue ParmVar 0x563b328cd818 'i' 'int'
|     `-ImplicitCastExpr 0x563b328e3450 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x563b328e3430 <col:65> 'int16_t':'short' lvalue ParmVar 0x563b328cd890 'x' 'int16_t':'short'
|-CXXMethodDecl 0x563b328cdb68 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x563b328cda70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563b328e3b58 <col:36, line:541:5>
|   |-ParenExpr 0x563b328e38f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e38c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e3620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e35f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e3500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e34e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e34a8 <col:23> 'int' lvalue ParmVar 0x563b328cda70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e34c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e35d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e35b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e3520 <col:33> 'int' lvalue ParmVar 0x563b328cda70 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e3598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e3580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e3540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e3560 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563b328e3680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e3660 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e3828 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e3810 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e37f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e3868 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e36f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563b328e3880 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e3728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e3898 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e3760 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x563b328e38b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e37d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e37c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e3780 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x563b328e3b48 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x563b328e3b30 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x563b328e3b18 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b328e3ae8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x563b328e3a90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b328e3a60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b328e3a10 <col:61, col:70> 'char const[48]' lvalue ->c 0x563b328d55e0
|             |   `-CXXMemberCallExpr 0x563b328e39f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b328e39c0 <col:61> '<bound member function type>' ->xanno 0x563b328ca728
|             |       `-CXXThisExpr 0x563b328e39b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b328e3a78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b328e3a40 <col:74> 'int' lvalue ParmVar 0x563b328cda70 'i' 'int'
|-CXXMethodDecl 0x563b328cdd38 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x563b328cdc28 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x563b328cdca0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563b328cdde8 <col:20>
| `-OptimizeNoneAttr 0x563b328cde40 <col:30>
|-CXXMethodDecl 0x563b328cdf78 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x563b328cde80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x563b328e4228 <col:35, line:562:5>
|   |-ParenExpr 0x563b328e3fc8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e3f98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e3cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e3cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e3bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e3bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e3b78 <col:23> 'int' lvalue ParmVar 0x563b328cde80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e3b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e3ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e3c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e3bf0 <col:33> 'int' lvalue ParmVar 0x563b328cde80 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e3c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e3c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e3c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e3c30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563b328e3d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e3d30 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e3ef8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e3ee0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e3ec0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e3f38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e3dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563b328e3f50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e3df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e3f68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e3e30 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x563b328e3f80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e3ea8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e3e90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e3e50 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x563b328e4218 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x563b328e4200 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x563b328e41e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b328e41b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x563b328e4160 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b328e4130 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b328e40e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x563b328d55e0
|             |   `-CXXMemberCallExpr 0x563b328e40c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b328e4090 <col:60> '<bound member function type>' ->xanno 0x563b328ca728
|             |       `-CXXThisExpr 0x563b328e4080 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b328e4148 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b328e4110 <col:73> 'int' lvalue ParmVar 0x563b328cde80 'i' 'int'
|-CXXMethodDecl 0x563b328ce188 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x563b328ce038 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b328ce0b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x563b328e4908 <col:41, line:577:5>
|   |-ParenExpr 0x563b328e4698 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e4668 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e43c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e4390 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e42a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e4288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e4248 <col:23> 'int' lvalue ParmVar 0x563b328ce038 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e4268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e4370 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e4358 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e42c0 <col:33> 'int' lvalue ParmVar 0x563b328ce038 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e4338 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e4320 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e42e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e4300 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563b328e4420 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e4400 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e45c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e45b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e4590 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e4608 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e4490 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563b328e4620 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e44c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e4638 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e4500 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x563b328e4650 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e4578 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e4560 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e4520 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x563b328e48e8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x563b328e4898 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b328e4868 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x563b328e4808 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b328e47d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b328e4788 <col:47, col:56> 'char [48]' lvalue ->c 0x563b328d55e0
|     |     |   `-CXXMemberCallExpr 0x563b328e4768 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b328e4738 <col:47> '<bound member function type>' ->xanno 0x563b328ca8c8
|     |     |       `-CXXThisExpr 0x563b328e4728 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b328e47f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b328e47b8 <col:60> 'int' lvalue ParmVar 0x563b328ce038 'i' 'int'
|     `-ImplicitCastExpr 0x563b328e48d0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x563b328e48b0 <col:65> 'int32_t':'int' lvalue ParmVar 0x563b328ce0b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x563b328ce348 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x563b328ce250 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563b328e5038 <col:36, line:591:5>
|   |-ParenExpr 0x563b328e4d78 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e4d48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e4aa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e4a70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e4980 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e4968 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e4928 <col:23> 'int' lvalue ParmVar 0x563b328ce250 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e4948 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e4a50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e4a38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e49a0 <col:33> 'int' lvalue ParmVar 0x563b328ce250 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e4a18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e4a00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e49c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e49e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x563b328e4b00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e4ae0 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e4ca8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e4c90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e4c70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e4ce8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e4b70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x563b328e4d00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e4ba8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e4d18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e4be0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x563b328e4d30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e4c58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e4c40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e4c00 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x563b328e5028 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x563b328e5010 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x563b328e4ff8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b328e4fc8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x563b328e4f40 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b328e4f10 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b328e4ec0 <col:61, col:70> 'char const[48]' lvalue ->c 0x563b328d55e0
|             |   `-CXXMemberCallExpr 0x563b328e4ea0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b328e4e70 <col:61> '<bound member function type>' ->xanno 0x563b328ca728
|             |       `-CXXThisExpr 0x563b328e4e60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b328e4f28 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b328e4ef0 <col:74> 'int' lvalue ParmVar 0x563b328ce250 'i' 'int'
|-CXXMethodDecl 0x563b328ce598 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x563b328ce408 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b328ce480 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x563b328e5718 <col:42, line:606:5>
|   |-ParenExpr 0x563b328e54a8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x563b328e5478 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e51d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e51a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e50b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e5098 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e5058 <col:23> 'int' lvalue ParmVar 0x563b328ce408 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e5078 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e5180 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563b328e5168 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e50d0 <col:33> 'int' lvalue ParmVar 0x563b328ce408 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e5148 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e5130 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e50f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563b328e5110 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x563b328e5230 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e5210 <col:60> 'int' 0
|   |   `-CallExpr 0x563b328e53d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563b328e53c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e53a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e5418 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e52a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x563b328e5430 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e52d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e5448 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e5310 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x563b328e5460 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e5388 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e5370 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e5330 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x563b328e56f8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x563b328e56a8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b328e5678 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x563b328e5618 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b328e55e8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b328e5598 <col:48, col:57> 'char [48]' lvalue ->c 0x563b328d55e0
|     |     |   `-CXXMemberCallExpr 0x563b328e5578 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b328e5548 <col:48> '<bound member function type>' ->xanno 0x563b328ca8c8
|     |     |       `-CXXThisExpr 0x563b328e5538 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b328e5600 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b328e55c8 <col:61> 'int' lvalue ParmVar 0x563b328ce408 'i' 'int'
|     `-ImplicitCastExpr 0x563b328e56e0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x563b328e56c0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x563b328ce480 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x563b328ce730 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x563b328ce660 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x563b328e5f88 <col:33, line:620:5>
|   |-ParenExpr 0x563b328e5d00 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x563b328e5cd0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e5920 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e58f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e5790 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e5778 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e5738 <col:23> 'int' lvalue ParmVar 0x563b328ce660 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e5758 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e58d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x563b328e58b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e57b0 <col:33> 'int' lvalue ParmVar 0x563b328ce660 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e5898 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e5880 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e57d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x563b328e5858 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x563b328e5840 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x563b328e5808 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x563b328e5980 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e5960 <col:79> 'int' 0
|   |   `-CallExpr 0x563b328e5c30 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x563b328e5c18 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e5bf8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e5c70 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e5a68 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x563b328e5c88 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e5ab0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e5ca0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e5ae8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x563b328e5cb8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e5be0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e5bc8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e5b88 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x563b328e5f78 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x563b328e5f60 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x563b328e5f48 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563b328e5f18 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x563b328e5e90 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x563b328e5e60 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563b328e5e10 <col:67, col:76> 'char const[48]' lvalue ->c 0x563b328d55e0
|             |   `-CXXMemberCallExpr 0x563b328e5df0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563b328e5dc0 <col:67> '<bound member function type>' ->xanno 0x563b328ca728
|             |       `-CXXThisExpr 0x563b328e5db0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563b328e5e78 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563b328e5e40 <col:80> 'int' lvalue ParmVar 0x563b328ce660 'i' 'int'
|-CXXMethodDecl 0x563b328ce948 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x563b328ce7f0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563b328ce870 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x563b328e67b0 <col:45, line:635:5>
|   |-ParenExpr 0x563b328e64f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x563b328e64c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x563b328e6190 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563b328e6160 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563b328e6000 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563b328e5fe8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563b328e5fa8 <col:23> 'int' lvalue ParmVar 0x563b328ce7f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563b328e5fc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563b328e6140 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x563b328e6128 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563b328e6020 <col:33> 'int' lvalue ParmVar 0x563b328ce7f0 'i' 'int'
|   |   |     `-BinaryOperator 0x563b328e6108 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563b328e60f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563b328e6040 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563b328cab10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x563b328e60c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x563b328e60b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x563b328e6078 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x563b328e61f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563b328e61d0 <col:79> 'int' 0
|   |   `-CallExpr 0x563b328e6428 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x563b328e6410 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563b328e63f0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563b32437210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563b328e6468 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e6260 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x563b328e6480 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563b328e62a8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563b328e6498 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563b328e62e0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x563b328e64b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563b328e63d8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563b328e63c0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563b328e6378 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x563b328e6790 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x563b328e66f8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563b328e66c8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x563b328e6668 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563b328e6638 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563b328e65e8 <col:54, col:63> 'char [48]' lvalue ->c 0x563b328d55e0
|     |     |   `-CXXMemberCallExpr 0x563b328e65c8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563b328e6598 <col:54> '<bound member function type>' ->xanno 0x563b328ca8c8
|     |     |       `-CXXThisExpr 0x563b328e6588 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563b328e6650 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563b328e6618 <col:67> 'int' lvalue ParmVar 0x563b328ce7f0 'i' 'int'
|     `-CXXConstCastExpr 0x563b328e6760 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x563b328e6748 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x563b328e6710 <col:91> 'const void *' lvalue ParmVar 0x563b328ce870 'x' 'const void *'
|-CXXMethodDecl 0x563b328cea18 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x563b328e6838 <col:34, line:640:5>
|   `-ReturnStmt 0x563b328e6828 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x563b328e6810 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x563b328e67e0 <col:16> 'Packet *' lvalue ->_data_packet 0x563b328d6198
|         `-CXXThisExpr 0x563b328e67d0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x563b328ceb58 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x563b328ceac8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563b328df8f8 <col:46> 'bool' true
|-CXXMethodDecl 0x563b328cecd8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x563b328cec10 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x563b328ced80 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x563b328cf530 <line:660:22> "" ""
| |-EnumConstantDecl 0x563b328cee80 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf5a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cee60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x563b328cee40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x563b328c3fe0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x563b328cef10 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf5b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328ceef0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x563b328ceed0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x563b328c4070 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x563b328cefa0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf5d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cef80 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x563b328cef60 <col:21> 'int' 0
| |-EnumConstantDecl 0x563b328cf030 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf5e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf010 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x563b328ceff0 <col:19> 'int' 16
| |-EnumConstantDecl 0x563b328cf0c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf600 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf0a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x563b328cf080 <col:21> 'int' 16
| |-EnumConstantDecl 0x563b328cf150 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf618 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf130 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x563b328cf110 <col:19> 'int' 32
| |-EnumConstantDecl 0x563b328cf1e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf630 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf1c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x563b328cf1a0 <col:19> 'int' EnumConstant 0x563b328cf030 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x563b328cf270 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf648 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf250 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x563b328cf230 <col:19> 'int' EnumConstant 0x563b328cf150 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x563b328cf340 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf660 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf320 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x563b328cf300 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x563b328cf2c0 <col:23> 'int' EnumConstant 0x563b328cf270 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x563b328cf2e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x563b328cf410 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563b328cf678 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563b328cf3f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x563b328cf3d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x563b328cf390 <col:23> 'int' EnumConstant 0x563b328cf270 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x563b328cf3b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x563b328cf4e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x563b328cf690 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563b328cf4c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x563b328cf4a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x563b328cf460 <col:23> 'int' EnumConstant 0x563b328cf270 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x563b328cf480 <col:40> 'int' 8
|-CXXMethodDecl 0x563b328cf6d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x563b328cf770 <col:68> "" ""
|-CXXMethodDecl 0x563b328cf808 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x563b328cf8a8 <col:45> "" ""
|-CXXMethodDecl 0x563b328cf940 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x563b328cf9e0 <col:57> "" ""
|-CXXMethodDecl 0x563b328cfa78 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x563b328cfb18 <col:45> "" ""
|-CXXMethodDecl 0x563b328cfbb0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x563b328cfc50 <col:57> "" ""
|-CXXMethodDecl 0x563b328cfce0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x563b328cfd80 <col:51> "" ""
|-CXXMethodDecl 0x563b328cfe10 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x563b328cfeb0 <col:63> "" ""
|-CXXMethodDecl 0x563b328cff40 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x563b328cffe0 <col:53> "" ""
|-CXXMethodDecl 0x563b328d0070 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x563b328d0110 <col:65> "" ""
|-CXXMethodDecl 0x563b328d0228 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x563b328d0198 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x563b328d02d0 <col:61> "" ""
|-CXXMethodDecl 0x563b328d0468 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x563b328d0358 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x563b328d03d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x563b328d0518 <col:67> "" ""
|-CXXMethodDecl 0x563b328d0630 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x563b328d05a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563b328d06d8 <col:63> "" ""
|-CXXMethodDecl 0x563b328d0870 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x563b328d0760 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b328d07d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x563b328d0920 <col:69> "" ""
|-CXXMethodDecl 0x563b328d0a38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x563b328d09a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563b328d0ae0 <col:63> "" ""
|-CXXMethodDecl 0x563b328d31b8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x563b328d30a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b328d3120 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b328d3268 <col:69> "" ""
|-CXXMethodDecl 0x563b328d3380 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x563b328d32f0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x563b328d3428 <col:62> "" ""
|-CXXMethodDecl 0x563b328d35c0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x563b328d34b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b328d3528 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x563b328d3670 <col:68> "" ""
|-CXXMethodDecl 0x563b328d3788 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x563b328d36f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563b328d3830 <col:63> "" ""
|-CXXMethodDecl 0x563b328d39c8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x563b328d38b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563b328d3930 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x563b328d3a78 <col:69> "" ""
|-CXXMethodDecl 0x563b328d3b08 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x563b328d3ba8 <col:64> "" ""
|-CXXMethodDecl 0x563b328d3c38 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x563b328d3cd8 <col:52> "" ""
|-CXXMethodDecl 0x563b328d3d68 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x563b328d3e08 <col:67> "" ""
|-CXXMethodDecl 0x563b328d3e98 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x563b328d3f38 <col:55> "" ""
|-CXXMethodDecl 0x563b328d4050 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x563b328d3fc0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563b328d40f8 <col:58> "" ""
|-CXXMethodDecl 0x563b328d4290 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x563b328d4180 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b328d41f8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x563b328d4340 <col:62> "" ""
|-CXXMethodDecl 0x563b328d4458 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x563b328d43c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563b328d4500 <col:58> "" ""
|-CXXMethodDecl 0x563b328d4698 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x563b328d4588 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b328d4600 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x563b328d4748 <col:62> "" ""
|-CXXMethodDecl 0x563b328d4860 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x563b328d47d0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x563b328d4908 <col:60> "" ""
|-CXXMethodDecl 0x563b328d4aa0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x563b328d4990 <col:34> col:37 'int'
| |-ParmVarDecl 0x563b328d4a08 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x563b328d4b50 <col:64> "" ""
|-CXXMethodDecl 0x563b328d4c68 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x563b328d4bd8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563b328d4d10 <col:58> "" ""
|-CXXMethodDecl 0x563b328d4ea8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x563b328d4d98 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b328d4e10 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x563b328d4f58 <col:62> "" ""
|-CXXMethodDecl 0x563b328d5070 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x563b328d4fe0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x563b328d5118 <col:59> "" ""
|-CXXMethodDecl 0x563b328d52b0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x563b328d51a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x563b328d5218 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563b328d5360 <col:63> "" ""
|-AccessSpecDecl 0x563b328d53d0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x563b328d53f8 prev 0x563b328ca600 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b328d54f0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x563b328d55e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x563b328d5708 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x563b328d5888 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x563b328d5a08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x563b328d5b88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x563b328e69b8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563b328e7228 <col:11>
| |-CXXDestructorDecl 0x563b328e6a90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x563b328e6bc8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x563b328e6bc8
| | `-ParmVarDecl 0x563b328e6cd8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x563b328e6d78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b328e6d78
| | `-ParmVarDecl 0x563b328e6e88 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x563b328e9c48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563b328e9d58 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x563b328e9fd8 <col:11>
| |   `-ReturnStmt 0x563b328e9fc8 <col:11>
| |     `-UnaryOperator 0x563b328e9fb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563b328e9fa0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x563b328e9dc8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563b328e9dc8
|   `-ParmVarDecl 0x563b328e9ed8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x563b328d5bf0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563b328d5d08 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x563b328d5da8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x563b328d5e10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x563b328d5e78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x563b328d5ee0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x563b328d5f40 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x563b328d6000 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x563b328d6060 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x563b328d60c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x563b328e68c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x563b328d5da8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x563b328e7238 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x563b328e7290 <col:12>
| |-CXXConstructorDecl 0x563b328e6ef8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x563b328e6ef8
| | `-ParmVarDecl 0x563b328e7008 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x563b328e70a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x563b328e70a8
| | `-ParmVarDecl 0x563b328e71b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x563b328e9330 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x563b328d6138 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x563b328d6198 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x563b328d6200 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x563b328d6268 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x563b328d62d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x563b328d6338 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x563b328d6398 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x563b328d63f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x563b328d6460 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x563b328d64e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x563b328d6138 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x563b328e6860 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563b328d6398 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x563b328e72a0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x563b328e7300 <col:21, line:755:5>
|-CXXConstructorDecl 0x563b328d6688 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x563b328d65c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x563b328d6780 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x563b328d6968 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x563b328d6870 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x563b328d6c38 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x563b328d6a20 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b328d6a98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b328d6b10 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328d6e58 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x563b328d6d08 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x563b328d6d80 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x563b328df438 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x563b328d6f18 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x563b328d6f90 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x563b328d7008 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x563b328df590 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x563b328df500 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328df6d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x563b328df648 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x563b328df7d0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b328e73a0 prev 0x563b328c3c60 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x563b328e74d8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x563b328e7568 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x563b328e7610 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x563b328e76b0 <col:20>
| `-OptimizeNoneAttr 0x563b328e7708 <col:30>
|-CXXMethodDecl 0x563b328e7758 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x563b328e77f8 <col:20>
| `-OptimizeNoneAttr 0x563b328e7850 <col:30>
|-CXXMethodDecl 0x563b328e78a0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x563b328e7968 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x563b328e7a30 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x563b328e7b48 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x563b328e7c10 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x563b328e7cb0 <col:20>
| `-OptimizeNoneAttr 0x563b328e7d08 <col:30>
|-CXXMethodDecl 0x563b328e7d78 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x563b328e7e18 <col:20>
| `-OptimizeNoneAttr 0x563b328e7e70 <col:30>
|-CXXMethodDecl 0x563b328e7f18 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x563b328e7fb8 <col:20>
| `-OptimizeNoneAttr 0x563b328e8010 <col:30>
|-CXXMethodDecl 0x563b328e8060 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x563b328e8178 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x563b328e8298 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x563b328e83b8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x563b328e8480 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x563b328e8520 <col:62> "" ""
|-AccessSpecDecl 0x563b328e8590 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x563b328e85f0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x563b328e91e8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x563b328e9410 <col:29, col:31>
|-CXXMethodDecl 0x563b328e86b8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x563b328e87f8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x563b328e8768 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x563b328e88f0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x563b328e9420 <col:23, col:25>
|-CXXMethodDecl 0x563b328e8aa8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x563b328e89e0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x563b328e8d78 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x563b328e8b60 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563b328e8bd8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563b328e8c50 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563b328e8f08 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x563b328e8e40 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x563b328e9000 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x563b328e9068 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x563b328e9068
  `-ParmVarDecl 0x563b328e9178 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b329cbb18 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b329cbc38 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x563b329cbcc8 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x563b329cbec0 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x563b329cbd00 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x563b329cbd78 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x563b329cbdf0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x563b329cbf90 <col:79> 'const ArgContext' lvalue Var 0x563b329ae978 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x563b329cc130 <col:91, line:1348:5>
|   `-ReturnStmt 0x563b329cc120 <line:1347:9, col:41>
|     `-CallExpr 0x563b329cc0d0 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x563b329cc0b8 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563b329cc070 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x563b329cba60 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x563b329cbff8 <col:26> 'const String' lvalue ParmVar 0x563b329cbd00 'str' 'const String &'
|       |-UnaryOperator 0x563b329cc038 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x563b329cc018 <col:32> 'String' lvalue ParmVar 0x563b329cbd78 'result' 'String &'
|       `-ImplicitCastExpr 0x563b329cc108 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x563b329cc050 <col:40> 'int' 0
|-CXXConstructorDecl 0x563b32a4d078 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x563b32a4d150 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563b32a4d288 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x563b32a4d288
| `-ParmVarDecl 0x563b32a4d398 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x563b32a4d438 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x563b32a4d548 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x563b32a4e1a0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b329cc170 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563b329cc3c8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x563b32a4cf88 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563b32a4d5b8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x563b32a4d5b8
| `-ParmVarDecl 0x563b32a4d6c8 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x563b32a4d768 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b32a4d878 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x563b32a4e1b0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563b32a4e180 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x563b32a4e150 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x563b32a4e120 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x563b32a4d878 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x563b32a4e220 <col:19>
`-CXXDestructorDecl 0x563b32a4d918 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b32a4ee68 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563b32a4f268 prev 0x563b32a4ee68 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x563b32a4f460 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x563b32a4f368 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x563b32a503a8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x563b32a4f5e0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x563b32a50368 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x563b32a50328 <col:20> 'String *' lvalue ParmVar 0x563b32a4f368 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x563b32a4f640 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x563b32a50408 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x563b329ae7a0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x563b32a4f520 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x563b329882c0 Slot::store 'void ()' ]
| `-CompoundStmt 0x563b32a50ac8 <col:22, line:857:9>
|   `-CallExpr 0x563b32a50a80 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x563b32a50a68 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563b32a509e8 <col:13> 'void (String &, const String &)' lvalue Function 0x563b32a508c8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x563b3265cbf8 'assign_consume')
|     |-UnaryOperator 0x563b32a50598 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x563b32a50580 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x563b32a50550 <col:29> 'String *' lvalue ->_ptr 0x563b32a4f5e0
|     |     `-CXXThisExpr 0x563b32a50540 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x563b32a50ab0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x563b32a505c0 <col:35> 'String':'String' lvalue ->_slot 0x563b32a4f640
|         `-CXXThisExpr 0x563b32a505b0 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x563b32a4f5e0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x563b32a4f640 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x563b32a4f6b8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x563b32a4f6b8
| `-ParmVarDecl 0x563b32a4f7c8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x563b32a4f868 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x563b32a4f868
| `-ParmVarDecl 0x563b32a4f978 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x563b32a4fa18 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x563b32a4fa18
| `-ParmVarDecl 0x563b32a4fb28 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x563b32a4fb98 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x563b32a4fb98
| `-ParmVarDecl 0x563b32a4fca8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x563b32a4fd30 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x563b329881c0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x563b32a50470 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563b329c7830 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563b329c7948 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x563b329c79d8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x563b329c7c18 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x563b329c7a10 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x563b329c7a90 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x563b329c7b08 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563b329c7e30 <col:81> 'const ArgContext' lvalue Var 0x563b329ae978 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x563b329c7d70 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x563b329c7ce0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x563b329c7f88 <col:35, line:1261:5>
|   `-ReturnStmt 0x563b329c7f78 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x563b329c7f60 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x563b329c7f30 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x563b329c7f18 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x563b329c7ef0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x563b329c7ed0 <col:16, col:24> 'String' (CXXTemporary 0x563b329c7ed0)
|               `-CXXConstructExpr 0x563b329c7e98 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x563b329c7e80 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x563b329c7e60 <col:23> 'bool' lvalue ParmVar 0x563b329c7ce0 'x' 'bool'
|-CXXConstructorDecl 0x563b32a59438 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x563b32a59510 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563b32a59648 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x563b32a59648
| `-ParmVarDecl 0x563b32a59758 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x563b32a597f8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x563b32a59908 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x563b32a5a560 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563b329c7fc8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x563b329c8228 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x563b32a59348 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563b32a59978 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x563b32a59978
| `-ParmVarDecl 0x563b32a59a88 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x563b32a59b28 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563b32a59c38 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x563b32a5a570 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563b32a5a540 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x563b32a5a510 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x563b32a5a4e0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x563b32a59c38 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x563b32a5a5e0 <col:19>
`-CXXDestructorDecl 0x563b32a59cd8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
