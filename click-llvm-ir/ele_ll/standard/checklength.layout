
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5623798a2ab8 prev 0x56237989a258 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5623798a2bb0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5623798a2c40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5623798a2cb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5623798a2d78 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5623798a2e40 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5623798a2fb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5623798a2ef0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5623798a3060 <col:24>
| `-OptimizeNoneAttr 0x5623798a30b8 <col:34>
|-CXXMethodDecl 0x5623798a3100 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5623798a33b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5623798a31b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5623798a3228 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5623798a32a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5623798a3470 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5623798a34a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5623798a3510 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5623798a3598 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5623798a38b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5623798a3650 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5623798a36c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5623798a3740 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5623798a37c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5623798a39d0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5623798ab348 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5623798ab348
| `-ParmVarDecl 0x5623798ab458 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5623798ab4f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5623798ab4f8
| `-ParmVarDecl 0x5623798ab608 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x562379978340 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379895ad0 prev 0x562379895850 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562379895bc8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x562379895c58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x562379895cb8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x562379895da8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x562379895ea8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x562379896078 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x562379895f28 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x562379895fa0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x562379896208 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x562379896140 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5623798962b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5623798963e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x562379896320 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x562379896588 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5623798964c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x562379896728 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x562379896668 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5623798967d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5623798968d0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5623798969b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798968b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x562379896890 <col:26> 'int' 1
| `-EnumConstantDecl 0x562379896960 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5623798969c8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379896940 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x562379896920 <col:44> 'int' 2
|-CXXMethodDecl 0x562379896b10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5623798969f8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x562379896a78 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x562379896c68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x562379896bd8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x562379896ea8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x562379896d28 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x562379896da0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x562379896f58 <col:20>
| `-OptimizeNoneAttr 0x562379896fb0 <col:30>
|-CXXMethodDecl 0x5623798970b8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x562379896ff0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x562379897160 <col:20>
| `-OptimizeNoneAttr 0x5623798971b8 <col:30>
|-CXXMethodDecl 0x562379897208 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5623798972d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5623798973e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x562379897470 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5623798974f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x562379897580 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x562379897608 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x562379897698 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x562379897758 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5623798977e0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x562379897868 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5623798978f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x562379897978 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x562379897a00 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x562379897a90 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x562379897b50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x562379897be0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x562379897d30 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x562379897c98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x562379897ec0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x562379897df0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x562379898170 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x562379897f78 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x562379897ff8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x562379898078 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x562379898228 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x562379898330 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5623798985c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379898310 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5623798982f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5623798983c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5623798985d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798983a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x562379898380 <col:32> 'int' 20
| |-EnumConstantDecl 0x562379898450 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5623798985f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379898430 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x562379898410 <col:38> 'int' 90
| |-EnumConstantDecl 0x5623798984e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562379898608 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798984c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5623798984a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x562379898570 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x562379898620 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379898550 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x562379898530 <col:32> 'int' 2000
|-CXXMethodDecl 0x562379898660 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x562379898aa0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562379898910 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x562379898988 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562379898b70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x562379898cf0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x562379898c20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562379898ef8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562379898da8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x562379898e20 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562379898ff8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x562379899098 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x562379899160 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5623798991f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x562379899420 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798991d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5623798991b0 <col:36> 'int' EnumConstant 0x562379899160 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x562379899240 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562379899290 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5623798992e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562379899330 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562379899380 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5623798993d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x562379899508 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x562379899448 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5623798995d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x562379899690 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x562379899750 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x562379899810 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x562379899928 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5623798999f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x562379899b70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x562379899aa0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x562379899c98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x562379899e98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x562379899d48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x562379899dc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5623798a77e8 <col:54, line:127:5>
|   |-ParenExpr 0x5623798a7698 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5623798a7668 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5623798a7358 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5623798a7330 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5623798a7318 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5623798a7300 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5623798a72d0 <col:31> 'Router *' lvalue ->_router 0x5623798a51b0
|   |   |         `-CXXThisExpr 0x5623798a72c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5623798a73b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5623798a7398 <col:48> 'int' 0
|   |   `-CallExpr 0x5623798a75c8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5623798a75b0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5623798a7590 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5623798a7608 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5623798a7428 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5623798a7620 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5623798a7448 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5623798a7638 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5623798a7480 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5623798a7650 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5623798a7578 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5623798a7560 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5623798a7518 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5623798a7730 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5623798a76c8 <col:9> 'Router *' lvalue ->_router 0x5623798a51b0
|   | | `-CXXThisExpr 0x5623798a76b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5623798a7718 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5623798a76f8 <col:19> 'Router *' lvalue ParmVar 0x562379899d48 'r' 'Router *'
|   `-BinaryOperator 0x5623798a77c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5623798a7760 <col:9> 'int' lvalue ->_eindex 0x5623798a5218
|     | `-CXXThisExpr 0x5623798a7750 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5623798a77b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5623798a7790 <col:19> 'int' lvalue ParmVar 0x562379899dc8 'eindex' 'int'
|-CXXMethodDecl 0x56237989a020 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x562379899f58 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56237989a0f0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56237989a1b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56237989a258 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56237989a4a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56237989a320 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56237989a3a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56237989a558 <col:20>
| `-OptimizeNoneAttr 0x56237989a5b0 <col:30>
|-CXXMethodDecl 0x56237989a6b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56237989a5f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56237989a760 <col:20>
| `-OptimizeNoneAttr 0x56237989a7b8 <col:30>
|-CXXMethodDecl 0x56237989a888 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56237989a7f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56237989a930 <col:20>
| `-OptimizeNoneAttr 0x56237989a988 <col:30>
|-CXXMethodDecl 0x56237989ab18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56237989a9c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56237989aa40 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56237989aca8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56237989abe0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56237989adf8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56237989ad68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56237989af48 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56237989aeb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56237989b098 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56237989b008 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56237989b358 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56237989b150 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56237989b1d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56237989b278 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56237989b430 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56237989b4f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56237989b7c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56237989b670 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56237989b6e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56237989b8e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56237989bac0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56237989b9a0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56237989ba20 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56237989bca8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56237989bb88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56237989bc08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56237989c018 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56237989bd68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56237989bde0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56237989be60 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5623798a6dd0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5623798a6db0 <col:106> 'int' 0
| `-ParmVarDecl 0x56237989bed8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5623798a6e08 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5623798a6de8 <col:126> 'int' 0
|-CXXMethodDecl 0x56237989c3b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56237989c0e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56237989c180 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56237989c200 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56237989c278 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5623798a6e40 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5623798a6e20 <col:114> 'int' 0
|-CXXMethodDecl 0x56237989c748 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56237989c490 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56237989c508 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56237989c588 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5623798a6e58 <col:96> 'int' 0
| `-ParmVarDecl 0x56237989c600 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5623798a6e98 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5623798a6e78 <col:116> 'int' 0
|-CXXMethodDecl 0x56237989cac8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56237989c818 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56237989c890 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56237989c910 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5623798a6ed0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5623798a6eb0 <col:109> 'int' 0
| `-ParmVarDecl 0x56237989c988 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5623798a6f08 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5623798a6ee8 <col:129> 'int' 0
|-CXXMethodDecl 0x56237989ce48 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56237989cb98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56237989cc10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56237989cc90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56237989cd08 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5623798a6f40 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5623798a6f20 <col:117> 'int' 0
|-CXXMethodDecl 0x56237989d1d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56237989cf20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989cf98 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56237989d018 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5623798a6f58 <col:99> 'int' 0
| `-ParmVarDecl 0x56237989d090 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5623798a6f98 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5623798a6f78 <col:119> 'int' 0
|-CXXMethodDecl 0x56237989d5f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56237989d2a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56237989d328 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56237989d3a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56237989d420 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5623798a6fd0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5623798a6fb0 <col:108> 'int' 0
| `-ParmVarDecl 0x56237989d4a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5623798a7008 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5623798a6fe8 <col:141> 'int' 0
|-CXXMethodDecl 0x56237989da18 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56237989d6d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56237989d750 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56237989d7c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56237989d848 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56237989d8c8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5623798a7020 <col:121> 'int' 0
|-CXXMethodDecl 0x56237989de48 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56237989daf8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56237989db78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56237989dbf0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56237989dc70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5623798a7040 <col:98> 'int' 0
| `-ParmVarDecl 0x56237989dcf0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5623798a7060 <col:123> 'int' 0
|-CXXMethodDecl 0x56237989e110 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56237989df20 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56237989dfa0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56237989e020 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5623798a7080 <col:80> 'int' 0
|-EnumDecl 0x56237989e1c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56237989e2d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56237989e560 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237989e2b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56237989e290 <col:42> 'int' 1
| |-EnumConstantDecl 0x56237989e360 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56237989e578 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237989e340 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56237989e320 <col:40> 'int' 2
| |-EnumConstantDecl 0x56237989e3f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56237989e590 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237989e3d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56237989e3b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x56237989e480 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56237989e5a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237989e460 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56237989e440 <col:36> 'int' 7
| `-EnumConstantDecl 0x56237989e510 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56237989e5c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56237989e4f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56237989e4d0 <col:34> 'int' 6
|-CXXMethodDecl 0x56237989e878 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56237989e5e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56237989e688 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56237989e708 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56237989e780 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5623798a7138 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5623798a7120 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5623798a7108 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5623798a70e8 <col:98, col:105> 'String' (CXXTemporary 0x5623798a70e8)
|           `-CXXTemporaryObjectExpr 0x5623798a70b0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56237989eb18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56237989e948 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56237989e9c0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56237989ea38 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5623798a71e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5623798a71d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5623798a71b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5623798a7198 <col:94, col:101> 'String' (CXXTemporary 0x5623798a7198)
| |         `-CXXTemporaryObjectExpr 0x5623798a7160 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5623798a79d0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5623798a7948 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5623798a7918 <col:9> '<bound member function type>' ->add_task_handlers 0x56237989e878
|     | `-CXXThisExpr 0x5623798a7908 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5623798a7988 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5623798a7888 <col:27> 'Task *' lvalue ParmVar 0x56237989e948 'task' 'Task *'
|     |-ImplicitCastExpr 0x5623798a79a0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5623798a78a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56237989e9c0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5623798a79b8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5623798a78c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56237989e510 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5623798a78e8 <col:62> 'const String' lvalue ParmVar 0x56237989ea38 'prefix' 'const String &'
|-CXXMethodDecl 0x56237989ed28 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56237989ebe0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56237989ec58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5623798a7298 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5623798a7280 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5623798a7268 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5623798a7248 <col:70, col:77> 'String' (CXXTemporary 0x5623798a7248)
| |         `-CXXTemporaryObjectExpr 0x5623798a7210 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5623798a7ba8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5623798a7b20 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5623798a7af0 <col:9> '<bound member function type>' ->add_task_handlers 0x56237989e878
|     | `-CXXThisExpr 0x5623798a7ae0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5623798a7b60 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5623798a7a60 <col:27> 'Task *' lvalue ParmVar 0x56237989ebe0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5623798a7b78 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5623798a7a80 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5623798a7b90 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5623798a7aa0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56237989e510 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5623798a7ac0 <col:57> 'const String' lvalue ParmVar 0x56237989ec58 'prefix' 'const String &'
|-CXXMethodDecl 0x56237989f008 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56237989edf0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989ee70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989eee8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56237989f2b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56237989f0d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989f158 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989f1d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56237989f5a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56237989f388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989f408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989f480 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56237989f858 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56237989f678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989f6f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989f778 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56237989fb08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56237989f928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989f9a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989fa28 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56237989fdb8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56237989fbd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989fc58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989fcd0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5623798a0068 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56237989fe88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56237989ff08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56237989ff88 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5623798a0378 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5623798a0190 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a0210 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a0290 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5623798a0658 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5623798a0448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a04c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a0570 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5623798a0938 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5623798a0728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a07a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a0850 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5623798a0ba0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5623798a0a08 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5623798a0a88 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5623798a0b00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5623798a0e48 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5623798a0c70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5623798a0cf0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5623798a0d68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5623798a10f8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5623798a0f18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a0f98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a1018 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5623798a13a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5623798a11c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a1248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a12c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5623798a1658 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5623798a1478 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a14f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a1570 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5623798a1928 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5623798a1728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a17a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5623798a1848 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5623798a1c58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5623798a19f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5623798a1a78 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5623798a1af0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5623798a1b68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5623798a72b0 <col:93> 'bool' false
|-CXXMethodDecl 0x5623798a1e40 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5623798a1d28 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5623798a1da8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5623798a2018 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5623798a1f00 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5623798a1f80 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5623798a22f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5623798a20d8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5623798a2150 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5623798a21d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5623798a2248 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5623798a25e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5623798a23c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5623798a2440 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5623798a24c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5623798a2538 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5623798a2820 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5623798a26c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5623798a2740 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5623798a2a08 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5623798a28e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5623798a2968 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5623798a2ab8 prev 0x56237989a258 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5623798a2bb0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5623798a2c40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5623798a2cb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5623798a2d78 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5623798a2e40 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5623798a2fb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5623798a2ef0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5623798a3060 <col:24>
| | `-OptimizeNoneAttr 0x5623798a30b8 <col:34>
| |-CXXMethodDecl 0x5623798a3100 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5623798a33b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5623798a31b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5623798a3228 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5623798a32a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5623798a3470 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5623798a34a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5623798a3510 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5623798a3598 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5623798a38b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5623798a3650 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5623798a36c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5623798a3740 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5623798a37c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5623798a39d0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5623798ab348 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5623798ab348
| | `-ParmVarDecl 0x5623798ab458 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5623798ab4f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5623798ab4f8
| | `-ParmVarDecl 0x5623798ab608 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x562379978340 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5623798a3a48 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5623798a3ae8 <col:38> "" ""
|-CXXMethodDecl 0x5623798a3b78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5623798a3c18 <col:44> "" ""
|-AccessSpecDecl 0x5623798a3c88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5623798a3cb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5623798a3db0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5623798a3e00 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5623798a3d90 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5623798a3d70 <col:27> 'int' 4
|-FieldDecl 0x5623798a3eb8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5623798a4068 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5623798a4120 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5623798a51b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5623798a5218 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5623798a5368 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5623798a52a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5623798a5518 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5623798a5428 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5623798a56f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5623798a55d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5623798a5658 <col:25> col:28 'int'
|-CXXMethodDecl 0x5623798a59a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5623798a57c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5623798a5840 <col:28> col:31 'int'
| `-ParmVarDecl 0x5623798a58b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5623798a5a58 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5623798a5b20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5623798a5b70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5623798a5bc0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5623798a5da0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5623798a5c50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5623798a5cc8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5623798a6048 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5623798a5e68 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5623798a5ee8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5623798a5f60 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5623798a6268 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5623798a6118 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5623798a6198 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5623798a65a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5623798a6328 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5623798a63a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5623798a6420 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5623798a64a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5623798a6788 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5623798a6670 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5623798a66f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5623798a68d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5623798a6848 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5623798a6c58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5623798a6998 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5623798a6a18 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5623798a6a90 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5623798a6b10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5623798a6d70 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class CheckLength
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _max
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5623798ae4b8 <../elements/standard/checklength.hh:22:1, line:41:1> line:22:7 class CheckLength definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5623798ae618 <col:1, col:7> col:7 implicit referenced class CheckLength
|-AccessSpecDecl 0x5623798ae6a8 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x5623798ae730 <line:24:3, col:15> col:3 CheckLength 'void ()'
|-CXXMethodDecl 0x5623798ae830 <line:26:3, col:58> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x562379897208 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5623798af990 <col:34, col:58>
|   `-ReturnStmt 0x5623798af980 <col:36, col:43>
|     `-ImplicitCastExpr 0x5623798af968 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5623798af940 <col:43> 'const char [12]' lvalue "CheckLength"
|-CXXMethodDecl 0x5623798ae8f8 <line:27:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5623798972d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5623798af9f0 <col:34, col:56>
|   `-ReturnStmt 0x5623798af9e0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5623798af9c8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5623798af9a8 <col:43> 'const char []' lvalue Var 0x562379897608 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5623798ae9c0 <line:28:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x562379897698 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5623798afa50 <col:34, col:60>
|   `-ReturnStmt 0x5623798afa40 <col:36, col:43>
|     `-ImplicitCastExpr 0x5623798afa28 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5623798afa08 <col:43> 'const char []' lvalue Var 0x562379897a00 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x5623798aec90 <line:30:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x562379898aa0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5623798aeb40 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5623798aebb8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5623798aee68 <line:32:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x562379896078 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5623798aed58 <col:13> col:16 'int'
| `-ParmVarDecl 0x5623798aedd0 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x5623798aefc0 <line:33:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x562379896208 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5623798aef30 <col:16> col:19 'int'
|-CXXMethodDecl 0x5623798af088 <line:35:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x562379898b70 Element::add_handlers 'void ()' ]
|-AccessSpecDecl 0x5623798af128 <line:37:2, col:11> col:2 protected
|-FieldDecl 0x5623798af168 <line:39:3, col:12> col:12 _max 'unsigned int'
|-CXXConstructorDecl 0x5623798af1e8 <line:22:7> col:7 implicit CheckLength 'void (const CheckLength &)' inline default_delete noexcept-unevaluated 0x5623798af1e8
| `-ParmVarDecl 0x5623798af2f8 <col:7> col:7 'const CheckLength &'
|-CXXConstructorDecl 0x5623798af398 <col:7> col:7 implicit CheckLength 'void (CheckLength &&)' inline default_delete noexcept-unevaluated 0x5623798af398
| `-ParmVarDecl 0x5623798af4a8 <col:7> col:7 'CheckLength &&'
|-CXXMethodDecl 0x5623798af548 <col:7> col:7 implicit operator= 'CheckLength &(const CheckLength &)' inline default_delete noexcept-unevaluated 0x5623798af548
| `-ParmVarDecl 0x5623798af658 <col:7> col:7 'const CheckLength &'
|-CXXMethodDecl 0x5623798af6c8 <col:7> col:7 implicit operator= 'CheckLength &(CheckLength &&)' inline default_delete noexcept-unevaluated 0x5623798af6c8
| `-ParmVarDecl 0x5623798af7d8 <col:7> col:7 'CheckLength &&'
`-CXXDestructorDecl 0x5623798af860 <col:7> col:7 implicit ~CheckLength 'void ()' inline default noexcept-unevaluated 0x5623798af860
  `-Overrides: [ 0x562379895da8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.CheckLength = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.CheckLength = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379669970 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562379669a88 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x562379669b28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x562379669b88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x562379669be8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x562379669c98 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379669fa0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56237966a0b8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56237966a160 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56237966a1c8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56237966a258 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5623796702f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562379670728 <col:12>
|-CXXConstructorDecl 0x5623796703f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562379670508 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56237966a160 'data' 'const char *'
| | `-ImplicitCastExpr 0x562379672cb0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x562379672c80 <col:12> 'const char *const' lvalue .data 0x56237966a160
| |     `-DeclRefExpr 0x562379672c60 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379670508 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56237966a1c8 'length' 'int'
| | `-ImplicitCastExpr 0x562379672d40 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562379672d10 <col:12> 'const int' lvalue .length 0x56237966a1c8
| |     `-DeclRefExpr 0x562379672cf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379670508 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56237966a258 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x562379672dd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x562379672da0 <col:12> 'String::memo_t *const' lvalue .memo 0x56237966a258
| |     `-DeclRefExpr 0x562379672d80 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379670508 '' 'const String::rep_t &'
| `-CompoundStmt 0x562379672e28 <col:12>
|-CXXConstructorDecl 0x5623796705a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5623796705a8
| `-ParmVarDecl 0x5623796706b8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x562379675c10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562379681628 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562379681738 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x562379681c50 <col:12>
|   |-BinaryOperator 0x562379681a68 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562379681a20 <col:12> 'const char *' lvalue ->data 0x56237966a160
|   | | `-CXXThisExpr 0x562379681a10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562379681a50 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5623796819e0 <col:12> 'const char *const' lvalue .data 0x56237966a160
|   |     `-DeclRefExpr 0x5623796819c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379681738 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562379681b30 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x562379681ae8 <col:12> 'int' lvalue ->length 0x56237966a1c8
|   | | `-CXXThisExpr 0x562379681ad8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562379681b18 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x562379681aa8 <col:12> 'const int' lvalue .length 0x56237966a1c8
|   |     `-DeclRefExpr 0x562379681a88 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379681738 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562379681bf8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x562379681bb0 <col:12> 'String::memo_t *' lvalue ->memo 0x56237966a258
|   | | `-CXXThisExpr 0x562379681ba0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562379681be0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x562379681b70 <col:12> 'String::memo_t *const' lvalue .memo 0x56237966a258
|   |     `-DeclRefExpr 0x562379681b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379681738 '' 'const String::rep_t &'
|   `-ReturnStmt 0x562379681c40 <col:12>
|     `-UnaryOperator 0x562379681c28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562379681c18 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5623796817a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5623796817a8
  `-ParmVarDecl 0x5623796818b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379660ee0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562379660ff8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x562379661088 <col:16, col:22> col:16 public
|-TypedefDecl 0x5623796610c8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x562379334dc0 'const char *'
|   `-QualType 0x562379334311 'const char' const
|     `-BuiltinType 0x562379334310 'char'
|-TypedefDecl 0x562379661150 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x562379661120 'String::const_iterator' sugar
|   |-Typedef 0x5623796610c8 'const_iterator'
|   `-PointerType 0x562379334dc0 'const char *'
|     `-QualType 0x562379334311 'const char' const
|       `-BuiltinType 0x562379334310 'char'
|-TypedefDecl 0x5623796612c0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x562379661230 'int (String::*)() const'
|   |-RecordType 0x562379660f70 'String'
|   | `-CXXRecord 0x562379660ee0 'String'
|   `-ParenType 0x5623796611d0 'int () const' sugar
|     `-FunctionProtoType 0x562379634d60 'int () const' const cdecl
|       `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x562379661328 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x562379489740 'int64_t' sugar
|   |-Typedef 0x56237939d2d0 'int64_t'
|   `-TypedefType 0x5623793764d0 '__int64_t' sugar
|     |-Typedef 0x5623793760a8 '__int64_t'
|     `-BuiltinType 0x562379334390 'long'
|-TypedefDecl 0x562379661390 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x562379489660 'uint64_t' sugar
|   |-Typedef 0x56237939d470 'uint64_t'
|   `-TypedefType 0x562379376560 '__uint64_t' sugar
|     |-Typedef 0x562379376118 '__uint64_t'
|     `-BuiltinType 0x562379334430 'unsigned long'
|-TypedefDecl 0x562379661420 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5623796613f0 'String::intmax_t' sugar
|   |-Typedef 0x562379661328 'intmax_t'
|   `-TypedefType 0x562379489740 'int64_t' sugar
|     |-Typedef 0x56237939d2d0 'int64_t'
|     `-TypedefType 0x5623793764d0 '__int64_t' sugar
|       |-Typedef 0x5623793760a8 '__int64_t'
|       `-BuiltinType 0x562379334390 'long'
|-TypedefDecl 0x5623796614b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x562379661480 'String::uintmax_t' sugar
|   |-Typedef 0x562379661390 'uintmax_t'
|   `-TypedefType 0x562379489660 'uint64_t' sugar
|     |-Typedef 0x56237939d470 'uint64_t'
|     `-TypedefType 0x562379376560 '__uint64_t' sugar
|       |-Typedef 0x562379376118 '__uint64_t'
|       `-BuiltinType 0x562379334430 'unsigned long'
|-CXXConstructorDecl 0x562379661570 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x562379661718 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x562379661658 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5623796618c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x562379661808 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x562379661a20 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x562379661990 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x562379661c38 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x562379661ae8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x562379661b68 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x562379661e58 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x562379661d08 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x562379661d88 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x562379662078 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562379661f28 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x562379661fa8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x562379662298 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x562379662148 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5623796621c8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x562379662428 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x562379662360 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5623796625a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5623796624e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x562379662738 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x562379662670 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x562379662890 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x562379662800 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5623796629e8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x562379662958 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x562379662b40 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x562379662ab0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x562379662cc8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x562379662c08 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x562379662e58 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x562379662d90 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x562379662fe8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x562379662f20 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x562379663178 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5623796630b0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x562379663270 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x562379663398 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x562379663518 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x562379663450 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x562379663668 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5623796635d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x562379663720 <col:63> "" ""
|-CXXMethodDecl 0x562379663868 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5623796637a8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x562379663a78 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x562379663928 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5623796639a8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x562379663c98 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x562379663b40 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x562379663bc0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x562379663f78 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x562379663d58 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x562379663dd8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56237966fdc0 <col:55> 'int' 10
| `-ParmVarDecl 0x562379663e50 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56237966fde0 <col:76> 'bool' true
|-CXXMethodDecl 0x562379664258 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x562379664040 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5623796640c0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56237966fdf0 <col:56> 'int' 10
| `-ParmVarDecl 0x562379664138 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56237966fe10 <col:77> 'bool' true
|-CXXMethodDecl 0x562379664360 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x562379664428 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5623796644f0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x562379664590 <col:20>
| `-OptimizeNoneAttr 0x5623796645e8 <col:30>
|-CXXConversionDecl 0x5623796646d8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5623796647a8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x562379664868 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x562379664958 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562379664a18 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x562379664b98 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x562379664ad0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x562379664ce8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x562379664c58 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x562379664dd8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x562379664e98 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5623796650e8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x562379664f50 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x562379664fd0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x562379665348 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5623796651b0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x562379665230 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x562379665418 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x562379665628 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5623796654d0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x562379665550 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x562379665848 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5623796656f0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x562379665770 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5623796659d8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x562379665910 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x562379665ac8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x562379665c38 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x562379665b78 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562379665e48 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x562379665cf8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562379665d78 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562379666060 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x562379665f08 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x562379665f80 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5623796661f0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x562379666120 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562379666410 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5623796662b0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x562379666330 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562379666560 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5623796664d0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x562379666738 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x562379666620 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5623796666a0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x562379666888 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5623796667f8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x562379666aa0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x562379666940 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5623796669c0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56237966fe20 <col:39> 'int' 0
|-CXXMethodDecl 0x562379666cc0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x562379666b60 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x562379666be0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56237966fe40 <col:48> 'int' 0
|-CXXMethodDecl 0x562379666ea0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x562379666d80 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x562379666e00 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56237966fe60 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x562379666f70 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x562379667030 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5623796670f0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5623796671b0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x562379667270 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x562379667418 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x562379667320 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x562379667598 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5623796674d0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x562379667770 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x562379667658 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5623796678e8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x562379667828 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x562379667a30 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5623796679a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x562379667b80 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x562379667af0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x562379667d58 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x562379667c40 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x562379667cc0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x562379667f38 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562379667e20 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x562379667ea0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x562379668088 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x562379667ff8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x562379668298 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x562379668148 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5623796681c8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5623796683f8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x562379668360 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x562379668550 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5623796684b8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5623796685f8 <col:57> "" ""
|-CXXMethodDecl 0x562379668708 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x562379668678 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x562379668858 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5623796687c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5623796689d8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x562379668910 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x562379668aa0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x562379668b60 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x562379668c20 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x562379668cc0 <col:49> "" ""
|-CXXMethodDecl 0x562379668d50 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x562379668e10 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x562379668f00 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x562379668fc8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x562379669088 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x562379669148 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x562379669240 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x562379669308 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5623796693d0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5623796695a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x562379669488 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x562379669508 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5623796697d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x562379669670 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5623796696f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5623796698e0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x562379669948 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x562379669970 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x562379669a88 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x562379669b28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x562379669b88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x562379669be8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x562379669c98 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x562379669d00 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x562379669f38 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x562379669f88 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379669f18 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x562379669e28 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x562379669dd0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x562379669e10 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x562379669df0 <col:32> 'int' 8
|-CXXRecordDecl 0x562379669fa0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56237966a0b8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56237966a160 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56237966a1c8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56237966a258 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5623796702f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562379670728 <col:12>
| |-CXXConstructorDecl 0x5623796703f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562379670508 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56237966a160 'data' 'const char *'
| | | `-ImplicitCastExpr 0x562379672cb0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x562379672c80 <col:12> 'const char *const' lvalue .data 0x56237966a160
| | |     `-DeclRefExpr 0x562379672c60 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379670508 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56237966a1c8 'length' 'int'
| | | `-ImplicitCastExpr 0x562379672d40 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562379672d10 <col:12> 'const int' lvalue .length 0x56237966a1c8
| | |     `-DeclRefExpr 0x562379672cf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379670508 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56237966a258 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x562379672dd0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x562379672da0 <col:12> 'String::memo_t *const' lvalue .memo 0x56237966a258
| | |     `-DeclRefExpr 0x562379672d80 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379670508 '' 'const String::rep_t &'
| | `-CompoundStmt 0x562379672e28 <col:12>
| |-CXXConstructorDecl 0x5623796705a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5623796705a8
| | `-ParmVarDecl 0x5623796706b8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x562379675c10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x562379681628 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562379681738 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x562379681c50 <col:12>
| |   |-BinaryOperator 0x562379681a68 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x562379681a20 <col:12> 'const char *' lvalue ->data 0x56237966a160
| |   | | `-CXXThisExpr 0x562379681a10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562379681a50 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5623796819e0 <col:12> 'const char *const' lvalue .data 0x56237966a160
| |   |     `-DeclRefExpr 0x5623796819c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379681738 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562379681b30 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x562379681ae8 <col:12> 'int' lvalue ->length 0x56237966a1c8
| |   | | `-CXXThisExpr 0x562379681ad8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562379681b18 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x562379681aa8 <col:12> 'const int' lvalue .length 0x56237966a1c8
| |   |     `-DeclRefExpr 0x562379681a88 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379681738 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562379681bf8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x562379681bb0 <col:12> 'String::memo_t *' lvalue ->memo 0x56237966a258
| |   | | `-CXXThisExpr 0x562379681ba0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562379681be0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x562379681b70 <col:12> 'String::memo_t *const' lvalue .memo 0x56237966a258
| |   |     `-DeclRefExpr 0x562379681b50 <col:12> 'const String::rep_t' lvalue ParmVar 0x562379681738 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x562379681c40 <col:12>
| |     `-UnaryOperator 0x562379681c28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562379681c18 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5623796817a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5623796817a8
|   `-ParmVarDecl 0x5623796818b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56237966a2d0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56237966a518 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56237966a338 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56237966a3b8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56237966a430 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5623796702b0 <col:79, line:261:5>
|   |-BinaryOperator 0x56237966ff28 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56237966fec0 <col:2, col:5> 'const char *' lvalue .data 0x56237966a160
|   | | `-MemberExpr 0x56237966fe90 <col:2> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|   | |   `-CXXThisExpr 0x56237966fe80 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56237966ff10 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56237966fef0 <col:12> 'const char *' lvalue ParmVar 0x56237966a338 'data' 'const char *'
|   |-BinaryOperator 0x56237966fff0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56237966ff88 <col:2, col:5> 'int' lvalue .length 0x56237966a1c8
|   | | `-MemberExpr 0x56237966ff58 <col:2> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|   | |   `-CXXThisExpr 0x56237966ff48 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56237966ffd8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56237966ffb8 <col:14> 'int' lvalue ParmVar 0x56237966a3b8 'length' 'int'
|   `-IfStmt 0x562379670298 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x562379670110 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5623796700f8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5623796700d8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5623796700b8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x562379670050 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56237966a258
|     |       | `-MemberExpr 0x562379670020 <col:7> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|     |       |   `-CXXThisExpr 0x562379670010 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5623796700a0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x562379670080 <col:17> 'String::memo_t *' lvalue ParmVar 0x56237966a430 'memo' 'String::memo_t *'
|     `-CallExpr 0x562379670270 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x562379670258 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562379670160 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x562379658f48 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5623796701c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562379669b28
|         `-ImplicitCastExpr 0x5623796701b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x562379670190 <col:27> 'String::memo_t *' lvalue ParmVar 0x56237966a430 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56237966a7c8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56237966a5e8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56237966a668 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56237966a6e0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56237966a2d0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x562379670738 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5623796708c8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x562379670830 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5623796707a0 <col:2> '<bound member function type>' ->assign_memo 0x56237966a518
|     | `-ImplicitCastExpr 0x562379670868 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x562379670790 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x562379670880 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5623796707d0 <col:14> 'const char *' lvalue ParmVar 0x56237966a5e8 'data' 'const char *'
|     |-ImplicitCastExpr 0x562379670898 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5623796707f0 <col:20> 'int' lvalue ParmVar 0x56237966a668 'length' 'int'
|     `-ImplicitCastExpr 0x5623796708b0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x562379670810 <col:28> 'String::memo_t *' lvalue ParmVar 0x56237966a6e0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56237966a958 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56237966a898 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x562379670b20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x562379670aa0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5623796708f0 <col:2> '<bound member function type>' ->assign_memo 0x56237966a518
|     | `-CXXThisExpr 0x5623796708e0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x562379670ad8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x562379670970 <col:14, col:19> 'const char *' lvalue .data 0x56237966a160
|     |   `-MemberExpr 0x562379670940 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56237966a2d0
|     |     `-DeclRefExpr 0x562379670920 <col:14> 'const String' lvalue ParmVar 0x56237966a898 'x' 'const String &'
|     |-ImplicitCastExpr 0x562379670af0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5623796709f0 <col:25, col:30> 'int' lvalue .length 0x56237966a1c8
|     |   `-MemberExpr 0x5623796709c0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56237966a2d0
|     |     `-DeclRefExpr 0x5623796709a0 <col:25> 'const String' lvalue ParmVar 0x56237966a898 'x' 'const String &'
|     `-ImplicitCastExpr 0x562379670b08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x562379670a70 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56237966a258
|         `-MemberExpr 0x562379670a40 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56237966a2d0
|           `-DeclRefExpr 0x562379670a20 <col:38> 'const String' lvalue ParmVar 0x56237966a898 'x' 'const String &'
|-CXXMethodDecl 0x56237966aa20 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5623796714e0 <col:31, line:278:5>
|   `-IfStmt 0x5623796714c8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x562379670bc0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562379670ba8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x562379670b78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56237966a258
|     |     `-MemberExpr 0x562379670b48 <col:6> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|     |       `-CXXThisExpr 0x562379670b38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5623796714a0 <col:15, line:277:2>
|       |-ParenExpr 0x562379671070 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x562379671040 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x562379670cd0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x562379670cb8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x562379670ca0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x562379670c60 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562379669b28
|       |   |       `-ImplicitCastExpr 0x562379670c48 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x562379670c18 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56237966a258
|       |   |           `-MemberExpr 0x562379670be8 <col:27> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|       |   |             `-CXXThisExpr 0x562379670bd8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x562379670d30 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x562379670d10 <col:54> 'int' 0
|       |   `-CallExpr 0x562379670fa0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x562379670f88 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562379670f08 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x562379670fe0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562379670e18 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x562379670ff8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562379670e48 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x562379671010 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x562379670e80 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x562379671028 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x562379670ef0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x562379670ed8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x562379670ea0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5623796713c0 <line:274:6, line:275:22>
|       | |-CallExpr 0x562379671280 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x562379671268 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5623796711e0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56237965a390 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5623796711b0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x562379669b28
|       | |   `-ImplicitCastExpr 0x562379671198 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x562379671168 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56237966a258
|       | |       `-MemberExpr 0x562379671138 <col:40> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|       | |         `-CXXThisExpr 0x562379671128 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x562379671380 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x562379671368 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5623796712a8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56237966f200 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5623796713a8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x562379671308 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56237966a258
|       |       `-MemberExpr 0x5623796712d8 <col:15> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|       |         `-CXXThisExpr 0x5623796712c8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x562379671480 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x562379671418 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56237966a258
|         | `-MemberExpr 0x5623796713e8 <col:6> 'String::rep_t' lvalue ->_r 0x56237966a2d0
|         |   `-CXXThisExpr 0x5623796713d8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x562379671468 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x562379671448 <col:16> 'int' 0
|-CXXMethodDecl 0x56237966acb8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56237966aad8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56237966ab58 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56237966abd0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56237966ad90 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56237966afe0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56237966ae48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56237966aec8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56237966af40 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56237966b1c8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56237966b0b0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56237966b130 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56237966b2c8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5623796715b8 <col:41, line:286:5>
|   `-ReturnStmt 0x5623796715a8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x562379671578 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x562379671540 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x562379671528 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x562379671508 <col:46> 'int' 1
|-CXXMethodDecl 0x56237966b568 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56237966b380 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56237966b400 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56237966b480 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56237966f200 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56237966b630 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56237966f2d0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56237966f4a0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56237966f388 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56237966f408 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56237966f560 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56237966f628 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56237966f728 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56237966f7a0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56237966f818 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56237966f880 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56237966f980 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56237966f9d0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56237966f960 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56237966f940 <col:22> 'int' 14
|-CXXMethodDecl 0x56237966fbe8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56237966fa00 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56237966fa80 <col:38> col:41 'int'
| `-ParmVarDecl 0x56237966fb00 <col:43> col:46 'int'
|-FriendDecl 0x56237966fcf0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56237966fd80 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562379731d90 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x562379731f68 prev 0x562379731d90 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562379731ff8 <col:46, col:52> col:46 public
|-TypedefDecl 0x562379732020 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x562379733980 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x562379733930 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x562379733910 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x562379732238 'type'
|     `-SubstTemplateTypeParmType 0x562379732200 'String' sugar
|       |-TemplateTypeParmType 0x562379624780 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379624730 'T'
|       `-RecordType 0x562379660f70 'String'
|         `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x562379733a38 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x562379733a00 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5623797339e0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562379733980 'type'
|     `-ElaboratedType 0x562379733930 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x562379733910 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x562379732238 'type'
|         `-SubstTemplateTypeParmType 0x562379732200 'String' sugar
|           |-TemplateTypeParmType 0x562379624780 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x562379624730 'T'
|           `-RecordType 0x562379660f70 'String'
|             `-CXXRecord 0x562379660ee0 'String'
|-CXXMethodDecl 0x562379733bb8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x562379733ac8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x562379733ca8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562379733d88 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x562379733d88
|-CXXMethodDecl 0x562379734058 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562379733f60 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x562379734298 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562379734110 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562379734188 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798dea70 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5623798de960 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5623798de9d8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798debc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5623798dec98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5623798deee8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5623798ded58 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5623798dedd0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798df148 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5623798defb8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5623798df030 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798df308 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5623798df218 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798df4c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5623798df3d0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798df580 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5623798df630 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5623798df868 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5623798df6e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5623798df758 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5623798dfb08 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5623798dfa10 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5623798dfbd0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5623798dfc20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5623798dfc70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562379898710 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5623797307f8 prev 0x562379898710 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562379731d00 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x562379731cb0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x562379731c90 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562379731b40 'type'
|     `-SubstTemplateTypeParmType 0x5623797319d0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5623795fa310 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5623795fa2b8 'F'
|       `-RecordType 0x562379731630 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x562379731550 'typed_array_memory'
|-FieldDecl 0x5623798dfcc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5623798dfd10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5623798dfd48 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|   |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562379631a48 'T'
|   `-RecordType 0x562379660f70 'String'
|     `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798dfdd8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5623798dfda0 'String &'
|   `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|     |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562379631a48 'T'
|     `-RecordType 0x562379660f70 'String'
|       `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798dfe68 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5623798dfe30 'const String &'
|   `-QualType 0x562379730891 'const String' const
|     `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-RecordType 0x562379660f70 'String'
|         `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798dfef8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5623798dfec0 'String *'
|   `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|     |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562379631a48 'T'
|     `-RecordType 0x562379660f70 'String'
|       `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798dff88 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5623798dff50 'const String *'
|   `-QualType 0x562379730891 'const String' const
|     `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-RecordType 0x562379660f70 'String'
|         `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798e0be0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5623798e0b90 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5623798e0b70 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5623798e0aa8 'type'
|     `-LValueReferenceType 0x5623798e0a70 'const String &'
|       `-QualType 0x5623798e0811 'const String' const
|         `-SubstTemplateTypeParmType 0x5623798e0810 'String' sugar
|           |-TemplateTypeParmType 0x562379604260 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x562379604208 'T'
|           `-RecordType 0x562379660f70 'String'
|             `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798e0c48 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5623798dfe30 'const String &'
|   `-QualType 0x562379730891 'const String' const
|     `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-RecordType 0x562379660f70 'String'
|         `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798e0ca0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x5623798e0d08 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5623798dfec0 'String *'
|   `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|     |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562379631a48 'T'
|     `-RecordType 0x562379660f70 'String'
|       `-CXXRecord 0x562379660ee0 'String'
|-TypedefDecl 0x5623798e0d70 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5623798dff50 'const String *'
|   `-QualType 0x562379730891 'const String' const
|     `-SubstTemplateTypeParmType 0x562379730890 'String' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-RecordType 0x562379660f70 'String'
|         `-CXXRecord 0x562379660ee0 'String'
|-EnumDecl 0x5623798e0dc8 <line:134:5> col:5
| `-EnumConstantDecl 0x5623798e0ec0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5623798e0ea0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562379633128 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562379633100 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5623796330e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5623798e0f48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5623798e11d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5623798e1000 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5623798e10a0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5623798e1468 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5623798e1350 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5623798e1728 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5623798e1610 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5623798e1a40 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5623798e1920 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5623798e1d50 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5623798e1c30 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5623798e2040 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5623798e1e88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5623798e1f00 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5623798e2168 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5623798e2218 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623798e2270 <col:30> Inherited
|-CXXMethodDecl 0x5623798e22b8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5623798e2368 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623798e23c0 <col:30> Inherited
|-CXXMethodDecl 0x5623798e2488 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5623798e2538 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623798e2590 <col:30> Inherited
|-CXXMethodDecl 0x5623798e25d8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5623798e2688 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623798e26e0 <col:30> Inherited
|-CXXMethodDecl 0x5623798e2728 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5623798e27d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623798e2830 <col:30> Inherited
|-CXXMethodDecl 0x5623798e2878 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5623798e2928 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623798e2980 <col:30> Inherited
|-CXXMethodDecl 0x5623798e29a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5623798e2a58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5623798e2b08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5623798e2cc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5623798e2bb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5623798e2c30 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5623798e2e18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5623798e2d88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5623798e2fc8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5623798e2ed0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5623798e3080 <col:20>
| `-OptimizeNoneAttr 0x5623798e30d8 <col:30>
|-CXXMethodDecl 0x5623798e31f8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5623798e3100 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5623798e32b0 <col:20>
| `-OptimizeNoneAttr 0x5623798e3308 <col:30>
|-CXXMethodDecl 0x5623798e33c0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5623798e3330 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5623798e3508 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5623798e3478 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5623798e3638 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5623798e3738 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5623798e3808 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5623798e38d8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5623798e3a18 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5623798e3988 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5623798e3b60 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5623798e3ad0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5623798e3ca8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5623798e3c18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5623798e3d60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5623798e3e60 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5623798e3dd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5623798e3f18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5623798e3fd8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5623798e40d8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5623798e4258 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5623798e4198 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5623798e4a18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5623798e4310 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5623798e4978 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5623798e4878 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5623798e4af8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5623798e4c48 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5623798e4bb8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5623798e4d00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5623798e4f48 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5623798e4dc0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5623798e4e38 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5623798e50d8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5623798e5018 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5623798e52e8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5623798e51a0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5623798e5218 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5623798e53a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5623798e5608 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5623798e5510 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5623798e56d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5623798e56d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5623799668a8 prev 0x562379816588 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5623799669a0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x562379966a30 <col:22, col:28> col:22 public
|-EnumDecl 0x562379966a58 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x562379966b78 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966b58 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x562379966b40 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562379966b20 <col:14> 'int' 999
| |-EnumConstantDecl 0x562379966c20 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966c00 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x562379966be8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562379966bc8 <col:14> 'int' 1
| |-EnumConstantDecl 0x562379966cb0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966c90 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x562379966c70 <col:17> 'int' 0
| |-EnumConstantDecl 0x562379966d40 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966d20 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x562379966d00 <col:13> 'int' 1
| |-EnumConstantDecl 0x562379966dd0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966db0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x562379966d90 <col:16> 'int' 2
| |-EnumConstantDecl 0x562379966e60 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966e40 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x562379966e20 <col:13> 'int' 3
| |-EnumConstantDecl 0x562379966ef0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966ed0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x562379966eb0 <col:15> 'int' 4
| |-EnumConstantDecl 0x562379966f80 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966f60 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x562379966f40 <col:14> 'int' 5
| |-EnumConstantDecl 0x562379967010 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x562379966ff0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x562379966fd0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5623799670a0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x562379967080 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x562379967060 <col:13> 'int' 7
|-VarDecl 0x562379967110 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x562379967198 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x562379967220 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5623799672a8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x562379967330 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5623799673b8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x562379967440 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5623799674c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x562379967550 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5623799675d8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x562379967660 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x562379967760 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56237996cab8 '_nerrors' 'int'
| | `-IntegerLiteral 0x56237996d248 <line:128:13> 'int' 0
| `-CompoundStmt 0x56237996d2b8 <col:16, line:129:5>
|-CXXDestructorDecl 0x562379967850 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56237996d2c8 <col:29, line:132:5>
|-CXXMethodDecl 0x562379967a08 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x562379967940 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562379967ad0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562379967bb8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56237996d320 <col:44, line:161:5>
|   `-ReturnStmt 0x56237996d310 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56237996d2f8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56237996d2d8 <col:9> 'ErrorHandler *' lvalue Var 0x56237996cb18 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x562379967cf8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x562379967c68 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562379967dc0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56237996d380 <col:43, line:173:5>
|   `-ReturnStmt 0x56237996d370 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56237996d358 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56237996d338 <col:9> 'ErrorHandler *' lvalue Var 0x56237996cb90 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x562379967e78 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x562379967ef8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x562379968008 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x562379967f78 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562379968158 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5623799680c8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5623799682b0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x562379968218 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x562379968408 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x562379968370 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562379968560 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5623799684c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562379968770 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562379968618 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x562379968698 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x562379968948 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562379968830 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5623799688b0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x562379968b68 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562379968a08 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x562379968a88 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x562379968d48 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562379968c28 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562379968ca8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562379968f28 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562379968e08 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562379968e88 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5623799690b0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x562379968fe8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x562379969280 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x562379969168 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5623799691e0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56237996d5d8 <col:57, line:234:5>
|   `-ReturnStmt 0x56237996d5c8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56237996d5b0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56237996d558 <col:9, col:41> 'int'
|         |-MemberExpr 0x56237996d528 <col:9> '<bound member function type>' ->xmessage 0x5623799690b0
|         | `-CXXThisExpr 0x56237996d518 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56237996d598 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56237996d580 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56237996d4f8 <col:18, col:40> 'String' (CXXTemporary 0x56237996d4f8)
|               `-CallExpr 0x56237996d4c0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56237996d4a8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56237996d420 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56237996b278 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56237996d440 <col:31> 'const String' lvalue ParmVar 0x5623799691e0 'str' 'const String &'
|                 `-DeclRefExpr 0x56237996d460 <col:36> 'const String' lvalue ParmVar 0x562379969168 'anno' 'const String &'
|-CXXMethodDecl 0x562379969560 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562379969340 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5623799693c0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x562379969438 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56237996d868 <col:68, line:243:5>
|   `-ReturnStmt 0x56237996d858 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56237996d840 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56237996d7e0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56237996d7b0 <col:9> '<bound member function type>' ->xmessage 0x562379969280
|         | `-CXXThisExpr 0x56237996d7a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56237996d678 <col:18> 'const String' lvalue ParmVar 0x562379969340 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56237996d828 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56237996d810 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56237996d780 <col:24, col:40> 'String' (CXXTemporary 0x56237996d780)
|               `-CXXMemberCallExpr 0x56237996d718 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56237996d6a8 <col:24> '<bound member function type>' ->vformat 0x56237996a740
|                 | `-CXXThisExpr 0x56237996d698 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56237996d748 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56237996d6d8 <col:32> 'const char *' lvalue ParmVar 0x5623799693c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56237996d760 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56237996d6f8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562379969438 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562379969800 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x562379969628 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5623799696a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562379969718 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56237996dba8 <col:23, line:254:5>
|   `-ReturnStmt 0x56237996db98 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56237996db80 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56237996db20 <col:9, col:71> 'int'
|         |-MemberExpr 0x56237996daf0 <col:9> '<bound member function type>' ->xmessage 0x562379969280
|         | `-CXXThisExpr 0x56237996dae0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56237996db68 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56237996db50 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56237996daa0 <col:18, col:65> 'String' (CXXTemporary 0x56237996daa0)
|         |     `-CallExpr 0x56237996da38 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56237996da20 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56237996d908 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56237996b278 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56237996d928 <col:31> 'const String' lvalue ParmVar 0x5623799696a0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56237996da80 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56237996da68 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56237996da00 <col:37, col:64> 'String' (CXXTemporary 0x56237996da00)
|         |             `-CallExpr 0x56237996d9d0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56237996d9b8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56237996d948 <col:37> 'String (const String &)' lvalue CXXMethod 0x56237996b8c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56237996d968 <col:56> 'const String' lvalue ParmVar 0x562379969628 'landmark' 'const String &'
|         `-DeclRefExpr 0x56237996dac0 <col:68> 'const String' lvalue ParmVar 0x562379969718 'str' 'const String &'
|-CXXMethodDecl 0x562379969b80 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5623799698c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562379969940 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5623799699c0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x562379969a38 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56237996de60 <col:34, line:267:5>
|   `-ReturnStmt 0x56237996de50 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56237996de38 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56237996ddd0 <col:9, col:51> 'int'
|         |-MemberExpr 0x56237996dda0 <col:9> '<bound member function type>' ->xmessage 0x562379969800
|         | `-CXXThisExpr 0x56237996dd90 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56237996dc48 <col:18> 'const String' lvalue ParmVar 0x5623799698c8 'landmark' 'const String &'
|         |-DeclRefExpr 0x56237996dc68 <col:28> 'const String' lvalue ParmVar 0x562379969940 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56237996de20 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56237996de08 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56237996dd70 <col:34, col:50> 'String' (CXXTemporary 0x56237996dd70)
|               `-CXXMemberCallExpr 0x56237996dd08 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56237996dc98 <col:34> '<bound member function type>' ->vformat 0x56237996a740
|                 | `-CXXThisExpr 0x56237996dc88 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56237996dd38 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56237996dcc8 <col:42> 'const char *' lvalue ParmVar 0x5623799699c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56237996dd50 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56237996dce8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562379969a38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562379969c90 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56237996dee0 <col:25, line:288:5>
|   `-ReturnStmt 0x56237996ded0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56237996deb8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56237996de88 <col:9> 'const int' lvalue ->_nerrors 0x56237996cab8
|         `-CXXThisExpr 0x56237996de78 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x562379969ea0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x562379969d48 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x562379969dc8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56237996a188 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562379969f68 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x562379969fe8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56237996a060 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56237996a320 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56237996a258 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56237996a568 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56237996a3e0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56237996a458 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56237996e140 <col:58, line:357:5>
|   `-ReturnStmt 0x56237996e130 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56237996e118 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56237996e0e8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56237996e0d0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56237996e0b0 <col:9, col:29> 'String' (CXXTemporary 0x56237996e0b0)
|             `-CallExpr 0x56237996e040 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56237996e028 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56237996dfa8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56237996a188 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56237996df48 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56237996e078 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56237996df68 <col:21> 'const char *' lvalue ParmVar 0x56237996a3e0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56237996e090 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56237996df88 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56237996a458 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56237996a740 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56237996a630 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56237996a6a8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56237996a898 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56237996a808 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56237996a9e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56237996a950 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56237996ac80 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56237996aa98 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56237996ab18 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56237996ab90 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56237996ade0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56237996ad50 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56237996e258 <col:37, line:441:5>
|   `-IfStmt 0x56237996e240 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56237996e1c8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56237996e198 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56237996e158 <col:6> 'int' lvalue ParmVar 0x56237996ad50 'level' 'int'
|     | `-ImplicitCastExpr 0x56237996e1b0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56237996e178 <col:15> 'ErrorHandler::Level' EnumConstant 0x562379966e60 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56237996e228 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56237996e1f8 <col:8> 'int' lvalue ->_nerrors 0x56237996cab8
|         `-CXXThisExpr 0x56237996e1e8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56237996aea8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56237996e2f0 <col:26, line:448:5>
|   `-BinaryOperator 0x56237996e2d0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56237996e280 <col:2> 'int' lvalue ->_nerrors 0x56237996cab8
|     | `-CXXThisExpr 0x56237996e270 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56237996e2b0 <col:13> 'int' 0
|-CXXMethodDecl 0x56237996b070 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56237996af60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56237996afd8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56237996b278 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56237996b130 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56237996b1a8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56237996b528 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56237996b338 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56237996b3b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56237996b438 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56237996b5e0 <col:59> 0 0
|-CXXMethodDecl 0x56237996b778 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56237996b658 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56237996b6d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56237996e960 <col:70, line:534:5>
|   |-DeclStmt 0x56237996e460 <line:528:2, col:20>
|   | |-VarDecl 0x56237996e318 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56237996e380 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56237996e3b8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56237996e420 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56237996e530 <line:529:2, col:23>
|   | `-VarDecl 0x56237996e490 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56237996e518 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56237996e4f8 <col:18> 'const char *' lvalue ParmVar 0x56237996b658 'begin' 'const char *'
|   |-DoStmt 0x56237996e8f8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56237996e828 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56237996e810 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56237996e7f0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56237996e548 <col:6> 'const char *' lvalue Var 0x56237996e490 'x' 'const char *'
|   | |     `-CallExpr 0x56237996e740 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56237996e728 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56237996e6e0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56237996cf90 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56237996e7a8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56237996e790 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56237996e600 <col:20, col:27> 'String' (CXXTemporary 0x56237996e600)
|   | |       |     `-CXXTemporaryObjectExpr 0x56237996e5c8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56237996e7c0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56237996e620 <col:30> 'const char *' lvalue Var 0x56237996e490 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56237996e7d8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56237996e640 <col:33> 'const char *' lvalue ParmVar 0x56237996b6d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x56237996e680 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56237996e660 <col:39> 'String' lvalue Var 0x56237996e318 'name' 'String'
|   | |       |-UnaryOperator 0x56237996e6b8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56237996e698 <col:46> 'String' lvalue Var 0x56237996e3b8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56237996e6d0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56237996e8e0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56237996e8c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56237996e8a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56237996e878 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|   |         `-ImplicitCastExpr 0x56237996e860 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56237996e840 <col:11> 'String' lvalue Var 0x56237996e318 'name' 'String'
|   `-ReturnStmt 0x56237996e950 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56237996e938 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56237996e918 <col:9> 'const char *' lvalue Var 0x56237996e490 'x' 'const char *'
|-CXXMethodDecl 0x56237996b8c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56237996b838 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56237996ef68 <col:55, line:550:5>
|   `-IfStmt 0x56237996ef40 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56237996eba0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56237996eb88 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56237996eb70 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56237996eb50 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56237996eb20 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|     | |       `-DeclRefExpr 0x56237996e9c0 <col:6> 'const String' lvalue ParmVar 0x56237996b838 'x' 'const String &'
|     | `-BinaryOperator 0x56237996eb00 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56237996ead0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56237996ea80 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56237996ea68 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56237996ea20 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56237967df10 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56237996e9e0 <col:11> 'const String' lvalue ParmVar 0x56237996b838 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56237996ea00 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56237996eae8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56237996eab8 <col:19> 'char' 123
|     |-ReturnStmt 0x56237996ec10 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56237996ebe0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56237996ebc0 <col:13> 'const String' lvalue ParmVar 0x56237996b838 'x' 'const String &'
|     `-IfStmt 0x56237996ef18 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56237996eca8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56237996ec90 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56237996ec70 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56237996ec40 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |       `-DeclRefExpr 0x56237996ec20 <col:11> 'const String' lvalue ParmVar 0x56237996b838 'x' 'const String &'
|       |-ReturnStmt 0x56237996ee30 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56237996ee18 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56237996ede8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56237996edd0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56237996edb0 <col:13, col:29> 'String' (CXXTemporary 0x56237996edb0)
|       |         `-CallExpr 0x56237996ed60 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56237996ed48 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56237996ecc0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56237996b070 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56237996ed90 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56237996ece0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56237996ed00 <col:28> 'const String' lvalue ParmVar 0x56237996b838 'x' 'const String &'
|       `-ReturnStmt 0x56237996ef08 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56237996eef0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56237996eec0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56237996eea8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56237996ee88 <col:13, col:20> 'String' (CXXTemporary 0x56237996ee88)
|                 `-CXXTemporaryObjectExpr 0x56237996ee50 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56237996ba90 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56237996b980 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56237996b9f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56237996d238 <col:71> 'bool' false
|-CXXRecordDecl 0x56237996bb40 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56237996be38 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56237996bdd0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56237996bd70 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56237996bd30 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x562379660f70 'String'
|       | `-CXXRecord 0x562379660ee0 'String'
|       |-BuiltinType 0x562379334370 'int'
|       `-DecayedType 0x5623798175d0 '__va_list_tag *' sugar
|         |-TypedefType 0x5623798175a0 'va_list' sugar
|         | |-Typedef 0x562379551e30 'va_list'
|         | `-TypedefType 0x562379551de0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5623794899f8 '__gnuc_va_list'
|         |   `-TypedefType 0x562379489960 '__builtin_va_list' sugar
|         |     |-Typedef 0x562379375bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x562379375b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5623793350c0 '__va_list_tag'
|         |         `-CXXRecord 0x562379335028 '__va_list_tag'
|         `-PointerType 0x5623795576d0 '__va_list_tag *'
|           `-RecordType 0x5623793350c0 '__va_list_tag'
|             `-CXXRecord 0x562379335028 '__va_list_tag'
|-EnumDecl 0x56237996bf00 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56237996c000 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c560 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996bfe0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56237996bfc0 <col:16> 'int' 1
| |-EnumConstantDecl 0x56237996c090 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c578 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c070 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56237996c050 <col:21> 'int' 2
| |-EnumConstantDecl 0x56237996c120 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c590 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c100 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56237996c0e0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56237996c1b0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c5a8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c190 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56237996c170 <col:17> 'int' 8
| |-EnumConstantDecl 0x56237996c240 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c5c0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c220 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56237996c200 <col:22> 'int' 16
| |-EnumConstantDecl 0x56237996c2d0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c5d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c2b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56237996c290 <col:19> 'int' 32
| |-EnumConstantDecl 0x56237996c360 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c5f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c340 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56237996c320 <col:17> 'int' 64
| |-EnumConstantDecl 0x56237996c3f0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c608 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c3d0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56237996c3b0 <col:14> 'int' 128
| |-EnumConstantDecl 0x56237996c480 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56237996c620 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237996c460 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56237996c440 <col:16> 'int' 256
| `-EnumConstantDecl 0x56237996c510 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56237996c638 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56237996c4f0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56237996c4d0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56237996c848 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56237996c660 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56237996c700 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56237996c9d0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56237996c908 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56237996ca78 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56237996cab8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56237996cb18 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56237996cb90 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56237996cf90 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56237996cc08 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56237996cc88 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56237996cd08 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56237996cd80 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56237996cdf8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56237996ce70 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56237996d0b8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56237996d0b8
| `-ParmVarDecl 0x56237996d1c8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56237996f2c8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56237996f2c8
  `-ParmVarDecl 0x56237996f3d8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379816618 prev 0x56237985b1b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562379816710 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5623798167a0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5623798168d8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5623798167d8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562379817d00 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562379817ce0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562379817878 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562379817d90 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562379817d50 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5623798167d8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5623798178e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562379817e10 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562379817dd0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562379817940 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562379817e50 <col:54> 'bool' false
| `-CompoundStmt 0x562379817f58 <col:61, line:38:5>
|   `-BinaryOperator 0x562379817f38 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x562379817ed0 <col:9> 'const Element *' lvalue ->_context 0x562379817818
|     | `-CXXThisExpr 0x562379817ec0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x562379817f20 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x562379817f00 <col:20> 'int' 0
|-CXXConstructorDecl 0x562379816ae8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562379816998 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x562379816a10 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562379817d38 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562379817d18 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x562379817818 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x562379817fb0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x562379817f70 <col:20> 'const Element *' lvalue ParmVar 0x562379816998 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x562379817878 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562379818030 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562379817ff0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x562379816a10 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5623798178e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5623798180b0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562379818070 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x562379817940 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5623798180f0 <col:73> 'bool' false
| `-CompoundStmt 0x562379818168 <col:80, line:46:5>
|-CXXMethodDecl 0x562379816c18 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5623798181e0 <col:36, line:51:5>
|   `-ReturnStmt 0x5623798181d0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5623798181b8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x562379818188 <col:16> 'const Element *const' lvalue ->_context 0x562379817818
|         `-CXXThisExpr 0x562379818178 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562379816d08 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x562379818260 <col:32, line:57:5>
|   `-ReturnStmt 0x562379818250 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x562379818238 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x562379818208 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x562379817878
|         `-CXXThisExpr 0x5623798181f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562379816dc8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x562379816f50 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x562379816e80 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5623798170a0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x562379817010 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5623798171f0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x562379817160 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5623798173f8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5623798172a8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x562379817320 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x562379817728 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5623798174b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x562379817538 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x562379817600 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5623798177e0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x562379817818 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x562379817878 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5623798178e0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x562379817940 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x562379817990 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x562379817990
| `-ParmVarDecl 0x562379817aa8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x562379817b48 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x562379817b48
| `-ParmVarDecl 0x562379817c58 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x562379978ad8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5623799230f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5623799232c8 prev 0x5623799230f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562379923358 <col:46, col:52> col:46 public
|-TypedefDecl 0x562379923380 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x562379924f50 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x562379924f00 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x562379923830 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x562379923730 'type'
|     `-TemplateSpecializationType 0x5623799236c0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5623799235a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x562379923580 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x562379923560 <col:24> 'unsigned long' 4
|       `-RecordType 0x5623799236a0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5623799235c0 'char_array'
|-TypedefDecl 0x562379925008 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x562379924fd0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x562379924fb0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x562379924f50 'type'
|     `-ElaboratedType 0x562379924f00 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x562379923830 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x562379923730 'type'
|         `-TemplateSpecializationType 0x5623799236c0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5623799235a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x562379923580 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x562379923560 <col:24> 'unsigned long' 4
|           `-RecordType 0x5623799236a0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5623799235c0 'char_array'
|-CXXMethodDecl 0x562379925188 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x562379925098 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x562379925278 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562379925358 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x562379925628 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562379925530 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x562379925868 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5623799256e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562379925758 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562379925a38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562379925928 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5623799259a0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562379925b98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562379925c68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562379925eb8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562379925d28 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562379925da0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562379926118 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x562379925f88 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562379926000 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5623799262d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5623799261e8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56237992d818 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5623799263a0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56237992d8d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56237992d980 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56237992dbb8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56237992da30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56237992daa8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56237992de58 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56237992dd60 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56237992df20 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56237992df70 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56237992dfc0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562379921af8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x562379921d08 prev 0x562379921af8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562379923060 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x562379923010 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x562379922ff0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x562379922ea0 'type'
|     `-SubstTemplateTypeParmType 0x562379922cc0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5623795f9b90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5623795f9b38 'T'
|       `-RecordType 0x562379922810 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x562379922728 'sized_array_memory'
|-FieldDecl 0x56237992e010 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56237992e060 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56237992e098 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|   |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562379631a48 'T'
|   `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992e128 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56237992e0f0 'int &'
|   `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|     |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562379631a48 'T'
|     `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992e1e8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56237992e1b0 'const int &'
|   `-QualType 0x562379921da1 'const int' const
|     `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992e278 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56237992e240 'int *'
|   `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|     |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562379631a48 'T'
|     `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992e308 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56237992e2d0 'const int *'
|   `-QualType 0x562379921da1 'const int' const
|     `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992eef0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56237992eea0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56237992ee80 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56237992ee10 'type'
|     `-SubstTemplateTypeParmType 0x56237992ebd0 'int' sugar
|       |-TemplateTypeParmType 0x562379604990 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379604940 'T'
|       `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992ef58 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56237992e1b0 'const int &'
|   `-QualType 0x562379921da1 'const int' const
|     `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992efb0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992f018 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56237992e240 'int *'
|   `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|     |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562379631a48 'T'
|     `-BuiltinType 0x562379334370 'int'
|-TypedefDecl 0x56237992f080 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56237992e2d0 'const int *'
|   `-QualType 0x562379921da1 'const int' const
|     `-SubstTemplateTypeParmType 0x562379921da0 'int' sugar
|       |-TemplateTypeParmType 0x562379631aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562379631a48 'T'
|       `-BuiltinType 0x562379334370 'int'
|-EnumDecl 0x56237992f0d8 <line:134:5> col:5
| `-EnumConstantDecl 0x56237992f1d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56237992f1b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562379633128 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562379633100 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5623796330e0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56237992f258 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56237992f4a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56237992f310 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56237992f3b0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56237992f768 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56237992f650 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56237992fa28 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56237992f910 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56237992fd70 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56237992fc50 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x562379930080 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56237992ff60 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x562379930370 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5623799301b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562379930230 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562379930498 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562379930578 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623799305d0 <col:30> Inherited
|-CXXMethodDecl 0x562379930618 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5623799306c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562379930720 <col:30> Inherited
|-CXXMethodDecl 0x5623799307e8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562379930898 <col:20> Inherited
| `-OptimizeNoneAttr 0x5623799308f0 <col:30> Inherited
|-CXXMethodDecl 0x562379930938 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5623799309e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562379930a40 <col:30> Inherited
|-CXXMethodDecl 0x562379930a88 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562379930b38 <col:20> Inherited
| `-OptimizeNoneAttr 0x562379930b90 <col:30> Inherited
|-CXXMethodDecl 0x562379930bd8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562379930c88 <col:20> Inherited
| `-OptimizeNoneAttr 0x562379930ce0 <col:30> Inherited
|-CXXMethodDecl 0x562379930d08 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562379930db8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562379930e68 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562379931028 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562379930f18 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562379930f90 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562379931178 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5623799310e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562379931328 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x562379931230 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5623799313e0 <col:20>
| `-OptimizeNoneAttr 0x562379931438 <col:30>
|-CXXMethodDecl 0x562379931558 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x562379931460 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562379931610 <col:20>
| `-OptimizeNoneAttr 0x562379931668 <col:30>
|-CXXMethodDecl 0x562379931720 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562379931690 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562379931868 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5623799317d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562379931998 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x562379931ac8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x562379931b98 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x562379931c68 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x562379931da8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562379931d18 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562379931ef0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562379931e60 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562379932038 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x562379931fa8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5623799320f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5623799321f0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562379932160 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5623799322a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562379932368 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x562379932468 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5623799325e8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562379932528 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x562379932da8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5623799326a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x562379932d08 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x562379932c08 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x562379932e88 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562379932fd8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562379932f48 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562379933090 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5623799332d8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562379933150 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5623799331c8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562379933498 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5623799333a8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5623799336e8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x562379933560 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5623799335d8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5623799337a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562379933a08 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x562379933910 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x562379933ad8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56237991fc68 prev 0x5623799018a8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56237991fd60 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56237991fe50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x562379945850 <col:16, line:828:9>
|-CXXDestructorDecl 0x56237991ff40 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x562379945860 <col:25, line:830:9>
|-CXXMethodDecl 0x562379920040 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5623799200f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x562379920198 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562379920198
| `-ParmVarDecl 0x5623799202a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x562379920a68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562379920a68
  `-ParmVarDecl 0x562379920b78 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5623799016b8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x562379901818 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5623799018a8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x562379901960 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x562379901a68 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x562379901998 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562379935098 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562379935078 <col:31> 'int' 0
|-CXXConstructorDecl 0x562379901d88 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x562379901c00 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x562379901c78 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5623799350d0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5623799350b0 <col:59> 'int' 0
|-CXXConstructorDecl 0x562379901f60 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562379901e50 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x562379901ec8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562379935108 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5623799350e8 <col:55> 'int' 0
|-CXXConstructorDecl 0x562379902318 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562379902100 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x562379902178 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5623799021f0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562379935140 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562379935120 <col:31> 'int' 0
|-CXXConstructorDecl 0x5623799024d8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x562379902418 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5623799025d0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5623799027b8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5623799026c0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5623799028a8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5623799354f0 <col:24, line:291:5>
|   `-ReturnStmt 0x5623799354e0 <line:290:9, col:79>
|     `-BinaryOperator 0x5623799354c0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x562379935398 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5623799352f0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5623799352d0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5623799351c8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5623799351b0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x562379935198 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x562379935168 <col:18> 'Vector<String> *const' lvalue ->_conf 0x562379921a90
|       | |   |       `-CXXThisExpr 0x562379935158 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5623799352b8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5623799352a0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x562379935268 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x562379935238 <col:28, col:35> '<bound member function type>' ->size 0x5623798e29a8
|       | |           `-ImplicitCastExpr 0x562379935288 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x562379935220 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5623799351f0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x562379921a90
|       | |                 `-CXXThisExpr 0x5623799351e0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x562379935380 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x562379935368 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x562379935350 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x562379935320 <col:47> 'Args::Slot *const' lvalue ->_slots 0x562379933c20
|       |         `-CXXThisExpr 0x562379935310 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5623799354a0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x562379935488 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562379935470 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562379935430 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562379935418 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5623799353c8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562379933cd0
|         |     |   `-CXXThisExpr 0x5623799353b8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5623799353f8 <col:73> 'int' 0
|         `-IntegerLiteral 0x562379935450 <col:79> 'int' 0
|-CXXMethodDecl 0x562379902968 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5623799356c8 <col:32, line:296:5>
|   `-ReturnStmt 0x5623799356b8 <line:295:9, col:49>
|     `-BinaryOperator 0x562379935698 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x562379935578 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x562379935560 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x562379935548 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x562379935518 <col:17> 'Args::Slot *const' lvalue ->_slots 0x562379933c20
|       |       `-CXXThisExpr 0x562379935508 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x562379935678 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x562379935660 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562379935648 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562379935608 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5623799355f0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5623799355a0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562379933cd0
|         |     |   `-CXXThisExpr 0x562379935590 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5623799355d0 <col:43> 'int' 0
|         `-IntegerLiteral 0x562379935628 <col:49> 'int' 0
|-CXXMethodDecl 0x562379902a58 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x562379937250 <col:19, line:306:5>
|   |-IfStmt 0x562379937170 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x562379935738 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x562379935720 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5623799356f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x562379921a90
|   | |     `-CXXThisExpr 0x5623799356e0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x562379937150 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5623799357a8 <col:13, col:20> '<bound member function type>' ->clear 0x5623798e53a8
|   |     `-ImplicitCastExpr 0x562379935790 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x562379935760 <col:13> 'Vector<String> *' lvalue ->_conf 0x562379921a90
|   |         `-CXXThisExpr 0x562379935750 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5623799371f8 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5623799371c8 <col:9, col:16> '<bound member function type>' .clear 0x5623799337a8
|   |   `-MemberExpr 0x562379937198 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x562379933bc0
|   |     `-CXXThisExpr 0x562379937188 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x562379937240 <line:305:9, col:17>
|     `-UnaryOperator 0x562379937228 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562379937218 <col:17> 'Args *' this
|-CXXMethodDecl 0x562379902cd8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x562379902be0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x562379902e58 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x562379902d90 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5623799031d8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x562379902f00 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x562379903138 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x562379902fa8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x562379903020 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x562379937570 <col:67, line:327:5>
|     |-WhileStmt 0x562379937520 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x562379937338 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5623799372b8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562379853688 0x56237969cc68 0x56237969c940 0x56237968e120 0x56237968ddd0 0x56237968d6c0 0x562379660030 0x5623795ec2d0
|     | | |-DeclRefExpr 0x562379937278 <col:16> 'Iter' lvalue ParmVar 0x562379902fa8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x562379937298 <col:25> 'Iter' lvalue ParmVar 0x562379903020 'end' 'Iter'
|     | `-CompoundStmt 0x562379937500 <col:30, line:325:9>
|     |   |-CallExpr 0x5623799374a0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x562379937380 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x562379937470 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x562379937400 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|     |   |   `-DeclRefExpr 0x5623799373e0 <col:24> 'Iter' lvalue ParmVar 0x562379902fa8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5623799374e8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5623799374c8 <col:15> 'Iter' lvalue ParmVar 0x562379902fa8 'begin' 'Iter'
|     `-ReturnStmt 0x562379937560 <line:326:9, col:17>
|       `-UnaryOperator 0x562379937548 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379937538 <col:17> 'Args *' this
|-CXXMethodDecl 0x5623799032e0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x562379903250 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x562379903428 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x562379903398 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5623799034f0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x562379937650 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5623799375f0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5623799375a0 <col:9> '<bound member function type>' ->reset_from 0x562379934048
|   | | `-CXXThisExpr 0x562379937590 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5623799375d0 <col:20> 'int' 0
|   `-ReturnStmt 0x562379937640 <line:352:9, col:17>
|     `-UnaryOperator 0x562379937628 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562379937618 <col:17> 'Args *' this
|-VarDecl 0x5623799035a8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x562379903610 <col:38> 'int' 1
|-VarDecl 0x5623799036a0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x562379903708 <col:39> 'int' 2
|-VarDecl 0x562379903798 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x562379903800 <col:39> 'int' 4
|-VarDecl 0x562379903890 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5623799038f8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x562379903c78 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x562379903970 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379903bd8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562379903a20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379903ac8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5623799377a8 <col:43, line:371:5>
|     `-ReturnStmt 0x562379937798 <line:370:9, col:34>
|       `-CallExpr 0x562379937760 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379937680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379937700 <col:21> 'const char *' lvalue ParmVar 0x562379903a20 'keyword' 'const char *'
|         |-IntegerLiteral 0x562379937720 <col:30> 'int' 0
|         `-DeclRefExpr 0x562379937740 <col:33> 'T' lvalue ParmVar 0x562379903ac8 'x' 'T &'
|-FunctionTemplateDecl 0x562379903fa8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x562379903ce0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379903f08 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562379903d90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379903e38 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5623799378f8 <col:45, line:375:5>
|     `-ReturnStmt 0x5623799378e8 <line:374:9, col:42>
|       `-CallExpr 0x5623799378b0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799377d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379937850 <col:21> 'const char *' lvalue ParmVar 0x562379903d90 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379937870 <col:30> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x562379937890 <col:41> 'T' lvalue ParmVar 0x562379903e38 'x' 'T &'
|-FunctionTemplateDecl 0x5623799042d8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x562379904010 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379904238 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5623799040c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379904168 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x562379937a48 <col:45, line:379:5>
|     `-ReturnStmt 0x562379937a38 <line:378:9, col:43>
|       `-CallExpr 0x562379937a00 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379937920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5623799379a0 <col:21> 'const char *' lvalue ParmVar 0x5623799040c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5623799379c0 <col:30> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int'
|         `-DeclRefExpr 0x5623799379e0 <col:42> 'T' lvalue ParmVar 0x562379904168 'x' 'T &'
|-FunctionTemplateDecl 0x562379904608 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x562379904340 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x562379904568 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5623799043f0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562379904498 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x562379937c48 <col:46, line:383:5>
| |   `-ReturnStmt 0x562379937c38 <line:382:9, col:55>
| |     `-CallExpr 0x562379937c00 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562379937a70 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562379937af0 <col:21> 'const char *' lvalue ParmVar 0x5623799043f0 'keyword' 'const char *'
| |       |-BinaryOperator 0x562379937bc0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x562379937b70 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x562379937b50 <col:30> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x562379937ba8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x562379937b88 <col:42> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x562379937be0 <col:54> 'T' lvalue ParmVar 0x562379904498 'x' 'T &'
| `-CXXMethodDecl 0x562379978f68 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x562379978d88 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x562379978e58 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x562379904a08 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x562379904670 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379904968 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x562379904720 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799047a0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562379904848 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x562379937d88 <col:54, line:388:5>
|     |-CallExpr 0x562379937d10 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562379937c60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562379937ca0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562379937cb0 <col:30> 'const char *' lvalue ParmVar 0x562379904720 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562379937cd0 <col:39> 'int' lvalue ParmVar 0x5623799047a0 'flags' 'int'
|     | `-DeclRefExpr 0x562379937cf0 <col:46> 'T' lvalue ParmVar 0x562379904848 'x' 'T &'
|     `-ReturnStmt 0x562379937d78 <line:387:9, col:17>
|       `-UnaryOperator 0x562379937d60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379937d50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562379904eb8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x562379904a78 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562379904af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562379904e18 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562379904bb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379904c58 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x562379904cf8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x562379937ef8 <col:74, line:403:5>
|     `-ReturnStmt 0x562379937ee8 <line:402:9, col:56>
|       `-CallExpr 0x562379937ea8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379937db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379937e28 <col:28> 'const char *' lvalue ParmVar 0x562379904bb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562379937e48 <col:37> 'int' 0
|         |-DeclRefExpr 0x562379937e68 <col:40> 'T' lvalue ParmVar 0x562379904c58 'x' 'T &'
|         `-DeclRefExpr 0x562379937e88 <col:43> 'const V' lvalue ParmVar 0x562379904cf8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562379905328 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562379904f28 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562379904fa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562379905288 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562379905068 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379905108 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5623799051a8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x562379938060 <col:76, line:407:5>
|     `-ReturnStmt 0x562379938050 <line:406:9, col:65>
|       `-CallExpr 0x562379938010 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379937f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379937f90 <col:28> 'const char *' lvalue ParmVar 0x562379905068 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379937fb0 <col:37> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int'
|         |-DeclRefExpr 0x562379937fd0 <col:49> 'T' lvalue ParmVar 0x562379905108 'x' 'T &'
|         `-DeclRefExpr 0x562379937ff0 <col:52> 'const V' lvalue ParmVar 0x5623799051a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562379905878 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x562379905398 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562379905418 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5623799057d8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5623799054d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379905558 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5623799055f8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x562379905698 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5623799381c8 <col:85, line:412:5>
|     |-CallExpr 0x562379938148 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562379938078 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5623799380b8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5623799380c8 <col:37> 'const char *' lvalue ParmVar 0x5623799054d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5623799380e8 <col:46> 'int' lvalue ParmVar 0x562379905558 'flags' 'int'
|     | |-DeclRefExpr 0x562379938108 <col:53> 'T' lvalue ParmVar 0x5623799055f8 'x' 'T &'
|     | `-DeclRefExpr 0x562379938128 <col:56> 'const V' lvalue ParmVar 0x562379905698 'default_value' 'const V &'
|     `-ReturnStmt 0x5623799381b8 <line:411:9, col:17>
|       `-UnaryOperator 0x5623799381a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379938190 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562379905d08 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5623799058f0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379905968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379905c68 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379905a28 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379905aa0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562379905b48 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x562379938348 <col:53, line:425:5>
|     `-ReturnStmt 0x562379938338 <line:424:9, col:42>
|       `-CallExpr 0x5623799382f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799381f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379938278 <col:21> 'const char *' lvalue ParmVar 0x562379905a28 'keyword' 'const char *'
|         |-IntegerLiteral 0x562379938298 <col:30> 'int' 0
|         |-DeclRefExpr 0x5623799382b8 <col:33> 'P' lvalue ParmVar 0x562379905aa0 'parser' 'P'
|         `-DeclRefExpr 0x5623799382d8 <col:41> 'T' lvalue ParmVar 0x562379905b48 'x' 'T &'
|-FunctionTemplateDecl 0x562379906158 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x562379905d78 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379905df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5623799060b8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379905eb8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379905f30 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562379905fd8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5623799384c0 <col:55, line:429:5>
|     `-ReturnStmt 0x5623799384b0 <line:428:9, col:50>
|       `-CallExpr 0x562379938470 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379938370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5623799383f0 <col:21> 'const char *' lvalue ParmVar 0x562379905eb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379938410 <col:30> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x562379938430 <col:41> 'P' lvalue ParmVar 0x562379905f30 'parser' 'P'
|         `-DeclRefExpr 0x562379938450 <col:49> 'T' lvalue ParmVar 0x562379905fd8 'x' 'T &'
|-FunctionTemplateDecl 0x5623799065a8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5623799061c8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379906248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379906508 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379906308 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379906380 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562379906428 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x562379938638 <col:55, line:433:5>
|     `-ReturnStmt 0x562379938628 <line:432:9, col:51>
|       `-CallExpr 0x5623799385e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799384e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379938568 <col:21> 'const char *' lvalue ParmVar 0x562379906308 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379938588 <col:30> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int'
|         |-DeclRefExpr 0x5623799385a8 <col:42> 'P' lvalue ParmVar 0x562379906380 'parser' 'P'
|         `-DeclRefExpr 0x5623799385c8 <col:50> 'T' lvalue ParmVar 0x562379906428 'x' 'T &'
|-FunctionTemplateDecl 0x5623799069f8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x562379906618 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379906698 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379906958 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379906758 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799067d0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x562379906878 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x562379938860 <col:56, line:437:5>
|     `-ReturnStmt 0x562379938850 <line:436:9, col:63>
|       `-CallExpr 0x562379938810 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379938660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5623799386e0 <col:21> 'const char *' lvalue ParmVar 0x562379906758 'keyword' 'const char *'
|         |-BinaryOperator 0x5623799387b0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562379938760 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562379938740 <col:30> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562379938798 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562379938778 <col:42> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5623799387d0 <col:54> 'P' lvalue ParmVar 0x5623799067d0 'parser' 'P'
|         `-DeclRefExpr 0x5623799387f0 <col:62> 'T' lvalue ParmVar 0x562379906878 'x' 'T &'
|-FunctionTemplateDecl 0x562379906f28 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x562379906a68 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379906ae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379906e88 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562379906ba8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379906c28 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562379906ca0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562379906d48 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5623799389c8 <col:64, line:442:5>
|     |-CallExpr 0x562379938948 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562379938878 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5623799388b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5623799388c8 <col:30> 'const char *' lvalue ParmVar 0x562379906ba8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5623799388e8 <col:39> 'int' lvalue ParmVar 0x562379906c28 'flags' 'int'
|     | |-DeclRefExpr 0x562379938908 <col:46> 'P' lvalue ParmVar 0x562379906ca0 'parser' 'P'
|     | `-DeclRefExpr 0x562379938928 <col:54> 'T' lvalue ParmVar 0x562379906d48 'x' 'T &'
|     `-ReturnStmt 0x5623799389b8 <line:441:9, col:17>
|       `-UnaryOperator 0x5623799389a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379938990 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562379907528 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x562379906fa0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379907018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562379907098 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562379907488 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562379907160 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799071d8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562379907278 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x562379907348 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x562379938b60 <col:84, line:458:5>
|     `-ReturnStmt 0x562379938b50 <line:457:9, col:64>
|       `-CallExpr 0x562379938b08 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799389f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379938a68 <col:28> 'const char *' lvalue ParmVar 0x562379907160 'keyword' 'const char *'
|         |-IntegerLiteral 0x562379938a88 <col:37> 'int' 0
|         |-DeclRefExpr 0x562379938aa8 <col:40> 'P' lvalue ParmVar 0x5623799071d8 'parser' 'P'
|         |-DeclRefExpr 0x562379938ac8 <col:48> 'T' lvalue ParmVar 0x562379907278 'x' 'T &'
|         `-DeclRefExpr 0x562379938ae8 <col:51> 'const V' lvalue ParmVar 0x562379907348 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562379907aa8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5623799075a0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379907618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562379907698 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562379907a08 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562379907760 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799077d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562379907878 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x562379907918 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x562379938cf0 <col:86, line:462:5>
|     `-ReturnStmt 0x562379938ce0 <line:461:9, col:73>
|       `-CallExpr 0x562379938c98 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379938b88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379938bf8 <col:28> 'const char *' lvalue ParmVar 0x562379907760 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379938c18 <col:37> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int'
|         |-DeclRefExpr 0x562379938c38 <col:49> 'P' lvalue ParmVar 0x5623799077d8 'parser' 'P'
|         |-DeclRefExpr 0x562379938c58 <col:57> 'T' lvalue ParmVar 0x562379907878 'x' 'T &'
|         `-DeclRefExpr 0x562379938c78 <col:60> 'const V' lvalue ParmVar 0x562379907918 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562379908108 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x562379907b20 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379907b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562379907c18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562379908068 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562379907ce0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379907d60 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562379907dd8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x562379907e78 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x562379907f18 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x562379938e80 <col:95, line:467:5>
|     |-CallExpr 0x562379938df8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562379938d08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562379938d48 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562379938d58 <col:37> 'const char *' lvalue ParmVar 0x562379907ce0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562379938d78 <col:46> 'int' lvalue ParmVar 0x562379907d60 'flags' 'int'
|     | |-DeclRefExpr 0x562379938d98 <col:53> 'P' lvalue ParmVar 0x562379907dd8 'parser' 'P'
|     | |-DeclRefExpr 0x562379938db8 <col:61> 'T' lvalue ParmVar 0x562379907e78 'x' 'T &'
|     | `-DeclRefExpr 0x562379938dd8 <col:64> 'const V' lvalue ParmVar 0x562379907f18 'default_value' 'const V &'
|     `-ReturnStmt 0x562379938e70 <line:466:9, col:17>
|       `-UnaryOperator 0x562379938e58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379938e48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5623799086e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x562379908188 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379908208 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562379908288 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562379908648 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562379908350 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799083c8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562379908468 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562379908508 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x562379939028 <col:63, line:481:5>
|     `-ReturnStmt 0x562379939018 <line:480:9, col:47>
|       `-CallExpr 0x562379938fd0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379938eb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379938f30 <col:21> 'const char *' lvalue ParmVar 0x562379908350 'keyword' 'const char *'
|         |-IntegerLiteral 0x562379938f50 <col:30> 'int' 0
|         |-DeclRefExpr 0x562379938f70 <col:33> 'P' lvalue ParmVar 0x5623799083c8 'parser' 'P'
|         |-DeclRefExpr 0x562379938f90 <col:41> 'T1' lvalue ParmVar 0x562379908468 'x1' 'T1 &'
|         `-DeclRefExpr 0x562379938fb0 <col:45> 'T2' lvalue ParmVar 0x562379908508 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562379908c68 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x562379908760 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5623799087d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562379908858 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562379908bc8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562379908920 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379908998 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562379908a38 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562379908ad8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5623799391c8 <col:65, line:485:5>
|     `-ReturnStmt 0x5623799391b8 <line:484:9, col:55>
|       `-CallExpr 0x562379939170 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379939050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5623799390d0 <col:21> 'const char *' lvalue ParmVar 0x562379908920 'keyword' 'const char *'
|         |-DeclRefExpr 0x5623799390f0 <col:30> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x562379939110 <col:41> 'P' lvalue ParmVar 0x562379908998 'parser' 'P'
|         |-DeclRefExpr 0x562379939130 <col:49> 'T1' lvalue ParmVar 0x562379908a38 'x1' 'T1 &'
|         `-DeclRefExpr 0x562379939150 <col:53> 'T2' lvalue ParmVar 0x562379908ad8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5623799091e8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x562379908ce0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379908d58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562379908dd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562379909148 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562379908ea0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379908f18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562379908fb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562379909058 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562379939368 <col:65, line:489:5>
|     `-ReturnStmt 0x562379939358 <line:488:9, col:56>
|       `-CallExpr 0x562379939310 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799391f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379939270 <col:21> 'const char *' lvalue ParmVar 0x562379908ea0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379939290 <col:30> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int'
|         |-DeclRefExpr 0x5623799392b0 <col:42> 'P' lvalue ParmVar 0x562379908f18 'parser' 'P'
|         |-DeclRefExpr 0x5623799392d0 <col:50> 'T1' lvalue ParmVar 0x562379908fb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5623799392f0 <col:54> 'T2' lvalue ParmVar 0x562379909058 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56237990ec48 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x562379909260 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5623799092d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56237990e840 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56237990eba8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56237990e900 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237990e978 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56237990ea18 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56237990eab8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5623799395b8 <col:66, line:493:5>
|     `-ReturnStmt 0x5623799395a8 <line:492:9, col:68>
|       `-CallExpr 0x562379939560 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379939390 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379939410 <col:21> 'const char *' lvalue ParmVar 0x56237990e900 'keyword' 'const char *'
|         |-BinaryOperator 0x5623799394e0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562379939490 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562379939470 <col:30> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5623799394c8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5623799394a8 <col:42> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x562379939500 <col:54> 'P' lvalue ParmVar 0x56237990e978 'parser' 'P'
|         |-DeclRefExpr 0x562379939520 <col:62> 'T1' lvalue ParmVar 0x56237990ea18 'x1' 'T1 &'
|         `-DeclRefExpr 0x562379939540 <col:66> 'T2' lvalue ParmVar 0x56237990eab8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56237990f2a8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56237990ecc0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56237990ed38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56237990edb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56237990f208 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56237990ee80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237990ef00 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56237990ef78 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56237990f018 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56237990f0b8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x562379939748 <col:74, line:498:5>
|     |-CallExpr 0x5623799396c0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5623799395d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562379939610 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562379939620 <col:30> 'const char *' lvalue ParmVar 0x56237990ee80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562379939640 <col:39> 'int' lvalue ParmVar 0x56237990ef00 'flags' 'int'
|     | |-DeclRefExpr 0x562379939660 <col:46> 'P' lvalue ParmVar 0x56237990ef78 'parser' 'P'
|     | |-DeclRefExpr 0x562379939680 <col:54> 'T1' lvalue ParmVar 0x56237990f018 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5623799396a0 <col:58> 'T2' lvalue ParmVar 0x56237990f0b8 'x2' 'T2 &'
|     `-ReturnStmt 0x562379939738 <line:497:9, col:17>
|       `-UnaryOperator 0x562379939720 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379939710 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56237990f608 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56237990f328 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56237990f568 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56237990f3e0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237990f458 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x562379939890 <col:52, line:509:5>
|     `-ReturnStmt 0x562379939880 <line:508:9, col:44>
|       `-CallExpr 0x562379939848 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379939778 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5623799397e8 <col:26> 'const char *' lvalue ParmVar 0x56237990f3e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562379939808 <col:35> 'int' 0
|         `-DeclRefExpr 0x562379939828 <col:38> 'P' lvalue ParmVar 0x56237990f458 'parser' 'P'
|-FunctionTemplateDecl 0x56237990f908 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56237990f670 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56237990f868 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56237990f720 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237990f798 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5623799399d0 <col:54, line:513:5>
|     `-ReturnStmt 0x5623799399c0 <line:512:9, col:52>
|       `-CallExpr 0x562379939988 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799398b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379939928 <col:26> 'const char *' lvalue ParmVar 0x56237990f720 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379939948 <col:35> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x562379939968 <col:46> 'P' lvalue ParmVar 0x56237990f798 'parser' 'P'
|-FunctionTemplateDecl 0x56237990fc08 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56237990f970 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56237990fb68 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56237990fa20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237990fa98 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562379939b10 <col:54, line:517:5>
|     `-ReturnStmt 0x562379939b00 <line:516:9, col:53>
|       `-CallExpr 0x562379939ac8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5623799399f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379939a68 <col:26> 'const char *' lvalue ParmVar 0x56237990fa20 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379939a88 <col:35> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int'
|         `-DeclRefExpr 0x562379939aa8 <col:47> 'P' lvalue ParmVar 0x56237990fa98 'parser' 'P'
|-FunctionTemplateDecl 0x56237990ff08 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56237990fc70 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56237990fe68 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56237990fd20 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237990fd98 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x562379939d00 <col:55, line:521:5>
|     `-ReturnStmt 0x562379939cf0 <line:520:9, col:65>
|       `-CallExpr 0x562379939cb8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379939b38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379939ba8 <col:26> 'const char *' lvalue ParmVar 0x56237990fd20 'keyword' 'const char *'
|         |-BinaryOperator 0x562379939c78 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x562379939c28 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562379939c08 <col:35> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562379939c60 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562379939c40 <col:47> 'const int' lvalue Var 0x5623799036a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x562379939c98 <col:59> 'P' lvalue ParmVar 0x56237990fd98 'parser' 'P'
|-FunctionTemplateDecl 0x5623799102d8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56237990ff70 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562379910238 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562379910020 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799100a0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562379910118 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x562379939e40 <col:63, line:526:5>
|     |-CallExpr 0x562379939dc8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562379939d18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x562379939d58 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x562379939d68 <col:35> 'const char *' lvalue ParmVar 0x562379910020 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562379939d88 <col:44> 'int' lvalue ParmVar 0x5623799100a0 'flags' 'int'
|     | `-DeclRefExpr 0x562379939da8 <col:51> 'P' lvalue ParmVar 0x562379910118 'parser' 'P'
|     `-ReturnStmt 0x562379939e30 <line:525:9, col:17>
|       `-UnaryOperator 0x562379939e18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562379939e08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562379910728 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x562379910348 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5623799103c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379910688 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379910488 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379910500 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5623799105a8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x562379939f98 <col:58, line:541:5>
|     `-ReturnStmt 0x562379939f88 <line:540:9, col:39>
|       `-CallExpr 0x562379939f50 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379939e70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562379939ef0 <col:21> 'const char *' lvalue ParmVar 0x562379910488 'keyword' 'const char *'
|         |-DeclRefExpr 0x562379939f10 <col:30> 'P' lvalue ParmVar 0x562379910500 'parser' 'P'
|         `-DeclRefExpr 0x562379939f30 <col:38> 'T' lvalue ParmVar 0x5623799105a8 'x' 'T &'
|-FunctionTemplateDecl 0x562379910b78 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x562379910798 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379910818 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379910ad8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5623799108d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379910950 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5623799109f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56237993a0d0 <col:60, line:545:5>
|     `-ReturnStmt 0x56237993a0c0 <line:544:9, col:41>
|       `-CallExpr 0x56237993a088 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562379939fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993a028 <col:23> 'const char *' lvalue ParmVar 0x5623799108d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56237993a048 <col:32> 'P' lvalue ParmVar 0x562379910950 'parser' 'P'
|         `-DeclRefExpr 0x56237993a068 <col:40> 'T' lvalue ParmVar 0x5623799109f8 'x' 'T &'
|-FunctionTemplateDecl 0x562379910fc8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x562379910be8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379910c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379910f28 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379910d28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379910da0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562379910e48 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56237993a208 <col:60, line:549:5>
|     `-ReturnStmt 0x56237993a1f8 <line:548:9, col:41>
|       `-CallExpr 0x56237993a1c0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993a0f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993a160 <col:23> 'const char *' lvalue ParmVar 0x562379910d28 'keyword' 'const char *'
|         |-DeclRefExpr 0x56237993a180 <col:32> 'P' lvalue ParmVar 0x562379910da0 'parser' 'P'
|         `-DeclRefExpr 0x56237993a1a0 <col:40> 'T' lvalue ParmVar 0x562379910e48 'x' 'T &'
|-FunctionTemplateDecl 0x562379911418 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x562379911038 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5623799110b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379911378 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379911178 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799111f0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x562379911298 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56237993a340 <col:61, line:553:5>
|     `-ReturnStmt 0x56237993a330 <line:552:9, col:42>
|       `-CallExpr 0x56237993a2f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993a230 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993a298 <col:24> 'const char *' lvalue ParmVar 0x562379911178 'keyword' 'const char *'
|         |-DeclRefExpr 0x56237993a2b8 <col:33> 'P' lvalue ParmVar 0x5623799111f0 'parser' 'P'
|         `-DeclRefExpr 0x56237993a2d8 <col:41> 'T' lvalue ParmVar 0x562379911298 'x' 'T &'
|-FunctionTemplateDecl 0x5623799118f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x562379911488 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379911508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379911858 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5623799115c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379911648 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5623799116c0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x562379911768 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56237993a4b8 <col:69, line:557:5>
|     `-ReturnStmt 0x56237993a4a8 <line:556:9, col:46>
|       `-CallExpr 0x56237993a468 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993a368 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993a3e8 <col:21> 'const char *' lvalue ParmVar 0x5623799115c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56237993a408 <col:30> 'int' lvalue ParmVar 0x562379911648 'flags' 'int'
|         |-DeclRefExpr 0x56237993a428 <col:37> 'P' lvalue ParmVar 0x5623799116c0 'parser' 'P'
|         `-DeclRefExpr 0x56237993a448 <col:45> 'T' lvalue ParmVar 0x562379911768 'x' 'T &'
|-FunctionTemplateDecl 0x562379911c08 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x562379911970 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562379911b68 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562379911a20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379911a98 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56237993a5f8 <col:56, line:571:5>
|     `-ReturnStmt 0x56237993a5e8 <line:570:9, col:48>
|       `-CallExpr 0x56237993a5b0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993a4e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993a550 <col:30> 'const char *' lvalue ParmVar 0x562379911a20 'keyword' 'const char *'
|         |-IntegerLiteral 0x56237993a570 <col:39> 'int' 0
|         `-DeclRefExpr 0x56237993a590 <col:42> 'P' lvalue ParmVar 0x562379911a98 'parser' 'P'
|-FunctionTemplateDecl 0x562379911f98 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x562379911c70 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562379911ef8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562379911d20 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379911da0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562379911e18 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56237993a7c8 <col:67, line:576:5>
|     |-CallExpr 0x56237993a750 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56237993a610 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56237993a650 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56237993a660 <col:39> 'const char *' lvalue ParmVar 0x562379911d20 'keyword' 'const char *'
|     | |-BinaryOperator 0x56237993a710 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56237993a6c0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56237993a680 <col:48> 'int' lvalue ParmVar 0x562379911da0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56237993a6f8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56237993a6d8 <col:56> 'const int' lvalue Var 0x562379903890 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56237993a730 <col:68> 'P' lvalue ParmVar 0x562379911e18 'parser' 'P'
|     `-ReturnStmt 0x56237993a7b8 <line:575:9, col:17>
|       `-UnaryOperator 0x56237993a7a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56237993a790 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5623799123e8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x562379912008 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379912088 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379912348 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562379912148 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799121c0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562379912268 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56237993a938 <col:62, line:592:5>
|     `-ReturnStmt 0x56237993a928 <line:591:9, col:51>
|       `-CallExpr 0x56237993a8e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993a7f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993a868 <col:30> 'const char *' lvalue ParmVar 0x562379912148 'keyword' 'const char *'
|         |-IntegerLiteral 0x56237993a888 <col:39> 'int' 0
|         |-DeclRefExpr 0x56237993a8a8 <col:42> 'P' lvalue ParmVar 0x5623799121c0 'parser' 'P'
|         `-DeclRefExpr 0x56237993a8c8 <col:50> 'T' lvalue ParmVar 0x562379912268 'x' 'T &'
|-FunctionTemplateDecl 0x5623799128c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x562379912458 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5623799124d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379912828 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562379912598 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379912618 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562379912690 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x562379912738 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56237993ab30 <col:73, line:597:5>
|     |-CallExpr 0x56237993aab0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56237993a950 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56237993a990 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56237993a9a0 <col:39> 'const char *' lvalue ParmVar 0x562379912598 'keyword' 'const char *'
|     | |-BinaryOperator 0x56237993aa50 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56237993aa00 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56237993a9c0 <col:48> 'int' lvalue ParmVar 0x562379912618 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56237993aa38 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56237993aa18 <col:56> 'const int' lvalue Var 0x562379903890 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56237993aa70 <col:68> 'P' lvalue ParmVar 0x562379912690 'parser' 'P'
|     | `-DeclRefExpr 0x56237993aa90 <col:76> 'T' lvalue ParmVar 0x562379912738 'x' 'T &'
|     `-ReturnStmt 0x56237993ab20 <line:596:9, col:17>
|       `-UnaryOperator 0x56237993ab08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56237993aaf8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562379912e78 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x562379912940 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5623799129b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379912dd8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x562379912a78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379912af0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x562379912cb0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56237993aca0 <col:65, line:614:5>
|     `-ReturnStmt 0x56237993ac90 <line:613:9, col:46>
|       `-CallExpr 0x56237993ac50 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993ab60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993abd0 <col:25> 'const char *' lvalue ParmVar 0x562379912a78 'keyword' 'const char *'
|         |-IntegerLiteral 0x56237993abf0 <col:34> 'int' 0
|         |-DeclRefExpr 0x56237993ac10 <col:37> 'P' lvalue ParmVar 0x562379912af0 'parser' 'P'
|         `-DeclRefExpr 0x56237993ac30 <col:45> 'Vector<T>' lvalue ParmVar 0x562379912cb0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5623799132a8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x562379912ee8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379913208 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x562379912fa0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799130f0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56237993aec0 <col:55, line:618:5>
|     `-ReturnStmt 0x56237993aeb0 <line:617:9, col:55>
|       `-CallExpr 0x56237993ae70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993acc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993ad38 <col:25> 'const char *' lvalue ParmVar 0x562379912fa0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56237993ad58 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56237993ae30 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56237993ae50 <col:54> 'Vector<T>' lvalue ParmVar 0x5623799130f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562379913878 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x562379913310 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379913388 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5623799137d8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562379913448 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799134c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562379913540 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562379913690 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56237993b0b8 <col:76, line:623:5>
|     |-CallExpr 0x56237993b038 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56237993aed8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56237993af18 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56237993af28 <col:34> 'const char *' lvalue ParmVar 0x562379913448 'keyword' 'const char *'
|     | |-BinaryOperator 0x56237993afd8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56237993af88 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56237993af48 <col:43> 'int' lvalue ParmVar 0x5623799134c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56237993afc0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56237993afa0 <col:51> 'const int' lvalue Var 0x562379903890 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56237993aff8 <col:63> 'P' lvalue ParmVar 0x562379913540 'parser' 'P'
|     | `-DeclRefExpr 0x56237993b018 <col:71> 'Vector<T>' lvalue ParmVar 0x562379913690 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56237993b0a8 <line:622:9, col:17>
|       `-UnaryOperator 0x56237993b090 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56237993b080 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562379913db8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5623799138f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379913968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379913d18 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x562379913a28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379913aa8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562379913bf0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56237993b320 <col:66, line:627:5>
|     `-ReturnStmt 0x56237993b310 <line:626:9, col:59>
|       `-CallExpr 0x56237993b2d0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56237993b0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56237993b158 <col:25> 'const char *' lvalue ParmVar 0x562379913a28 'keyword' 'const char *'
|         |-DeclRefExpr 0x56237993b178 <col:34> 'int' lvalue ParmVar 0x562379913aa8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56237993b290 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56237993b2b0 <col:58> 'Vector<T>' lvalue ParmVar 0x562379913bf0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x562379913e48 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56237993b3a0 <col:25, line:633:5>
|   `-ReturnStmt 0x56237993b390 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56237993b378 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56237993b348 <col:16> 'const bool' lvalue ->_status 0x5623799218f8
|         `-CXXThisExpr 0x56237993b338 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562379913fc8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x562379913f00 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56237993b488 <col:27, line:639:5>
|   |-BinaryOperator 0x56237993b430 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56237993b3b8 <col:9> 'bool' lvalue ParmVar 0x562379913f00 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56237993b418 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56237993b3e8 <col:13> 'bool' lvalue ->_status 0x5623799218f8
|   |     `-CXXThisExpr 0x56237993b3d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56237993b478 <line:638:9, col:17>
|     `-UnaryOperator 0x56237993b460 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56237993b450 <col:17> 'Args *' this
|-CXXMethodDecl 0x562379914148 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562379914088 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56237993b578 <col:39, line:644:5>
|   |-BinaryOperator 0x56237993b520 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56237993b4a8 <col:9> 'bool' lvalue ParmVar 0x562379914088 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56237993b508 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56237993b4d8 <col:13> 'const bool' lvalue ->_status 0x5623799218f8
|   |     `-CXXThisExpr 0x56237993b4c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56237993b568 <line:643:9, col:17>
|     `-UnaryOperator 0x56237993b550 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56237993b540 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562379914210 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56237993b620 <col:30, line:651:5>
|   `-ReturnStmt 0x56237993b610 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56237993b5f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56237993b5c8 <col:16> 'bool' lvalue ->_read_status 0x562379817940
|         `-ImplicitCastExpr 0x56237993b5a8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56237993b598 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562379914358 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5623799142c8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56237993b728 <col:32, line:658:5>
|   |-BinaryOperator 0x56237993b6d0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56237993b638 <col:9> 'bool' lvalue ParmVar 0x5623799142c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56237993b6b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56237993b688 <col:13> 'bool' lvalue ->_read_status 0x562379817940
|   |     `-ImplicitCastExpr 0x56237993b668 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56237993b658 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56237993b718 <line:657:9, col:17>
|     `-UnaryOperator 0x56237993b700 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56237993b6f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5623799144a8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562379914418 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56237993b838 <col:44, line:663:5>
|   |-BinaryOperator 0x56237993b7e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56237993b748 <col:9> 'bool' lvalue ParmVar 0x562379914418 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56237993b7c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56237993b798 <col:13> 'bool' lvalue ->_read_status 0x562379817940
|   |     `-ImplicitCastExpr 0x56237993b778 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56237993b768 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56237993b828 <line:662:9, col:17>
|     `-UnaryOperator 0x56237993b810 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56237993b800 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562379914570 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x562379914638 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x562379914700 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5623799147c8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x562379914ad8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x562379914868 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379914a38 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x562379914948 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56237993bbf0 <col:19, line:706:5>
|     `-IfStmt 0x56237993bbc8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56237993b938 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56237993baf8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56237993bac8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56237993ba88 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56237993b990 <col:42> '<bound member function type>' ->simple_slot 0x562379934d00
|       |     | `-CXXThisExpr 0x56237993b980 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56237993ba28 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56237993b9e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5623796a1708
|       |     | `-DeclRefExpr 0x56237993b9c0 <col:55> 'T' lvalue ParmVar 0x562379914948 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56237993ba68 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56237993bbb8 <line:705:13, col:34>
|         `-CallExpr 0x56237993bb90 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56237993bb18 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56237993bb70 <col:33> 'T' lvalue ParmVar 0x562379914948 'x' 'T &'
|-FunctionTemplateDecl 0x562379914da8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x562379914b38 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379914d08 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x562379914c18 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56237993bfd0 <col:31, line:717:5>
|     |-DeclStmt 0x56237993bd30 <line:713:9, col:23>
|     | `-VarDecl 0x56237993bc18 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56237993bd08 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56237993bc90 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56237993bce8 <col:21> 'T' lvalue ParmVar 0x562379914c18 'x' 'T &'
|     |-IfStmt 0x56237993bf80 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56237993be28 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56237993bf60 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56237993bf00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56237993be90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|     |   | `-DeclRefExpr 0x56237993be70 <col:14> 'T *' lvalue Var 0x56237993bc18 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56237993bf40 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56237993bfb8 <line:716:9, col:16>
|       `-DeclRefExpr 0x56237993bf98 <col:16> 'T *' lvalue Var 0x56237993bc18 's' 'T *'
|-FunctionTemplateDecl 0x5623799151b8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x562379914e08 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562379914e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562379915118 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x562379914f68 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x562379915008 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56237993c2e0 <col:37, line:726:5>
|     |-IfStmt 0x56237993c270 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56237993c290 <line:723:13, col:26>
|     | | `-VarDecl 0x56237993c038 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56237993c128 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56237993c0b0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56237993c108 <col:25> 'T' lvalue ParmVar 0x562379914f68 'x' 'T &'
|     | |-DeclRefExpr 0x56237993c150 <col:16> 'T *' lvalue Var 0x56237993c038 's' 'T *'
|     | `-BinaryOperator 0x56237993c250 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56237993c200 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56237993c190 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|     |   | `-DeclRefExpr 0x56237993c170 <col:14> 'T *' lvalue Var 0x56237993c038 's' 'T *'
|     |   `-DeclRefExpr 0x56237993c230 <col:18> 'const V' lvalue ParmVar 0x562379915008 'value' 'const V &'
|     `-ReturnStmt 0x56237993c2d0 <line:725:9, col:17>
|       `-UnaryOperator 0x56237993c2b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56237993c2a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5623799155b8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x562379915220 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562379915518 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5623799152d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379915350 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5623799153f8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56237993d100 <col:65, line:737:5>
|     |-DeclStmt 0x56237993c378 <line:732:9, col:26>
|     | `-VarDecl 0x56237993c310 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56237993d0c8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56237993d0e8 <line:733:13, col:58>
|       | `-VarDecl 0x56237993c3a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56237993c580 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56237993c550 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56237993c538 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56237993c518 <col:26, col:58> 'String' (CXXTemporary 0x56237993c518)
|       |           `-CXXMemberCallExpr 0x56237993c4a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56237993c418 <col:26> '<bound member function type>' ->find 0x562379934318
|       |             | `-CXXThisExpr 0x56237993c408 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56237993c4e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56237993c448 <col:31> 'const char *' lvalue ParmVar 0x5623799152d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56237993c4f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56237993c468 <col:40> 'int' lvalue ParmVar 0x562379915350 'flags' 'int'
|       |             `-DeclRefExpr 0x56237993c488 <col:47> 'Args::Slot *' lvalue Var 0x56237993c310 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56237993c638 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56237993c620 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56237993c600 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56237993c5d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |       `-ImplicitCastExpr 0x56237993c5b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56237993c598 <col:20> 'String' lvalue Var 0x56237993c3a0 'str' 'String'
|       `-CompoundStmt 0x56237993d0a8 <col:61, line:736:9>
|         |-DeclStmt 0x56237993caf0 <line:734:13, col:76>
|         | `-VarDecl 0x56237993c688 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56237993cac0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56237993ca30 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56237993ca78 <col:60> 'T' lvalue ParmVar 0x5623799153f8 'variable' 'T &'
|         |     `-UnaryOperator 0x56237993caa8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56237993ca98 <col:71> 'Args *' this
|         `-CallExpr 0x56237993d078 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56237993cb18 <col:13> '<bound member function type>' ->postparse 0x562379934528
|           | `-CXXThisExpr 0x56237993cb08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56237993d038 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56237993cb48 <col:23> 'T *' lvalue Var 0x56237993c688 's' 'T *'
|           | `-CallExpr 0x56237993cff8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56237993cdd0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56237993ced0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56237993cef0 <col:86> 'String' lvalue Var 0x56237993c3a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56237993cfa0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56237993cf30 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|           |   | `-DeclRefExpr 0x56237993cf10 <col:92> 'T *' lvalue Var 0x56237993c688 's' 'T *'
|           |   `-UnaryOperator 0x56237993cfe0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56237993cfd0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56237993d058 <col:103> 'Args::Slot *' lvalue Var 0x56237993c310 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562379915b08 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562379915628 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5623799156a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562379915a68 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562379915768 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799157e8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562379915888 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x562379915928 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56237993dfa0 <col:88, line:745:5>
|     |-DeclStmt 0x56237993d198 <line:741:9, col:26>
|     | `-VarDecl 0x56237993d130 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56237993d3b8 <line:742:9, col:55>
|     | `-VarDecl 0x56237993d1c0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56237993d3a0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56237993d370 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56237993d358 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56237993d338 <col:22, col:54> 'String' (CXXTemporary 0x56237993d338)
|     |           `-CXXMemberCallExpr 0x56237993d2c8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56237993d238 <col:22> '<bound member function type>' ->find 0x562379934318
|     |             | `-CXXThisExpr 0x56237993d228 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56237993d300 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56237993d268 <col:27> 'const char *' lvalue ParmVar 0x562379915768 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56237993d318 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56237993d288 <col:36> 'int' lvalue ParmVar 0x5623799157e8 'flags' 'int'
|     |             `-DeclRefExpr 0x56237993d2a8 <col:43> 'Args::Slot *' lvalue Var 0x56237993d130 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56237993d790 <line:743:9, col:72>
|     | `-VarDecl 0x56237993d408 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56237993d760 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56237993d6d0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56237993d718 <col:56> 'T' lvalue ParmVar 0x562379915888 'variable' 'T &'
|     |     `-UnaryOperator 0x56237993d748 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56237993d738 <col:67> 'Args *' this
|     `-CallExpr 0x56237993df70 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56237993d7b8 <col:9> '<bound member function type>' ->postparse 0x562379934528
|       | `-CXXThisExpr 0x56237993d7a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56237993df30 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56237993d7e8 <col:19> 'T *' lvalue Var 0x56237993d408 's' 'T *'
|       | `-ParenExpr 0x56237993df10 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56237993dee0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56237993dec8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56237993deb0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56237993de90 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56237993de60 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |     |       `-ImplicitCastExpr 0x56237993de48 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56237993d808 <col:25> 'String' lvalue Var 0x56237993d1c0 'str' 'String'
|       |     |-CallExpr 0x56237993dcb8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56237993da90 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56237993db90 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56237993dbb0 <col:89> 'String' lvalue Var 0x56237993d1c0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56237993dc60 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56237993dbf0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|       |     | | `-DeclRefExpr 0x56237993dbd0 <col:95> 'T *' lvalue Var 0x56237993d408 's' 'T *'
|       |     | `-UnaryOperator 0x56237993dca0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56237993dc90 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56237993de28 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56237993de08 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56237993ddd8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56237993dd88 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56237993dd18 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|       |         | | `-DeclRefExpr 0x56237993dcf8 <col:109> 'T *' lvalue Var 0x56237993d408 's' 'T *'
|       |         | `-DeclRefExpr 0x56237993ddb8 <col:113> 'const V' lvalue ParmVar 0x562379915928 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56237993ddf8 <col:120> 'bool' true
|       `-DeclRefExpr 0x56237993df50 <col:128> 'Args::Slot *' lvalue Var 0x56237993d130 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562379916038 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x562379915b80 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379915bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562379915f98 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562379915cb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562379915d38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562379915db0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562379915e58 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56237993eb98 <col:75, line:754:5>
|     |-DeclStmt 0x56237993e048 <line:749:9, col:26>
|     | `-VarDecl 0x56237993dfe0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56237993eb60 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56237993eb80 <line:750:13, col:58>
|       | `-VarDecl 0x56237993e070 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56237993e250 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56237993e220 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56237993e208 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56237993e1e8 <col:26, col:58> 'String' (CXXTemporary 0x56237993e1e8)
|       |           `-CXXMemberCallExpr 0x56237993e178 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56237993e0e8 <col:26> '<bound member function type>' ->find 0x562379934318
|       |             | `-CXXThisExpr 0x56237993e0d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56237993e1b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56237993e118 <col:31> 'const char *' lvalue ParmVar 0x562379915cb8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56237993e1c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56237993e138 <col:40> 'int' lvalue ParmVar 0x562379915d38 'flags' 'int'
|       |             `-DeclRefExpr 0x56237993e158 <col:47> 'Args::Slot *' lvalue Var 0x56237993dfe0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56237993e308 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56237993e2f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56237993e2d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56237993e2a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |       `-ImplicitCastExpr 0x56237993e288 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56237993e268 <col:20> 'String' lvalue Var 0x56237993e070 'str' 'String'
|       `-CompoundStmt 0x56237993eb40 <col:61, line:753:9>
|         |-DeclStmt 0x56237993e6e0 <line:751:13, col:63>
|         | `-VarDecl 0x56237993e358 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56237993e6b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56237993e620 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56237993e668 <col:47> 'T' lvalue ParmVar 0x562379915e58 'variable' 'T &'
|         |     `-UnaryOperator 0x56237993e698 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56237993e688 <col:58> 'Args *' this
|         `-CallExpr 0x56237993eb10 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56237993e708 <col:13> '<bound member function type>' ->postparse 0x562379934528
|           | `-CXXThisExpr 0x56237993e6f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56237993ead0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56237993e738 <col:23> 'T *' lvalue Var 0x56237993e358 's' 'T *'
|           | `-CallExpr 0x56237993ea90 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56237993e920 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56237993e968 <col:56> 'P' lvalue ParmVar 0x562379915db0 'parser' 'P'
|           |   |-DeclRefExpr 0x56237993e988 <col:64> 'String' lvalue Var 0x56237993e070 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56237993ea38 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56237993e9c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|           |   | `-DeclRefExpr 0x56237993e9a8 <col:70> 'T *' lvalue Var 0x56237993e358 's' 'T *'
|           |   `-UnaryOperator 0x56237993ea78 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56237993ea68 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56237993eaf0 <col:81> 'Args::Slot *' lvalue Var 0x56237993dfe0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562379916698 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5623799160b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562379916128 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5623799161a8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5623799165f8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562379916270 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5623799162f0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562379916368 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x562379916408 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5623799164a8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x562379941c18 <col:98, line:762:5>
|     |-DeclStmt 0x56237993ec30 <line:758:9, col:26>
|     | `-VarDecl 0x56237993ebc8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56237993ee50 <line:759:9, col:55>
|     | `-VarDecl 0x56237993ec58 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56237993ee38 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56237993ee08 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56237993edf0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56237993edd0 <col:22, col:54> 'String' (CXXTemporary 0x56237993edd0)
|     |           `-CXXMemberCallExpr 0x56237993ed60 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56237993ecd0 <col:22> '<bound member function type>' ->find 0x562379934318
|     |             | `-CXXThisExpr 0x56237993ecc0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56237993ed98 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56237993ed00 <col:27> 'const char *' lvalue ParmVar 0x562379916270 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56237993edb0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56237993ed20 <col:36> 'int' lvalue ParmVar 0x5623799162f0 'flags' 'int'
|     |             `-DeclRefExpr 0x56237993ed40 <col:43> 'Args::Slot *' lvalue Var 0x56237993ebc8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562379941560 <line:760:9, col:59>
|     | `-VarDecl 0x56237993eea8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562379941530 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5623799414a0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5623799414e8 <col:43> 'T' lvalue ParmVar 0x562379916408 'variable' 'T &'
|     |     `-UnaryOperator 0x562379941518 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562379941508 <col:54> 'Args *' this
|     `-CallExpr 0x562379941be8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x562379941588 <col:9> '<bound member function type>' ->postparse 0x562379934528
|       | `-CXXThisExpr 0x562379941578 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562379941ba8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5623799415b8 <col:19> 'T *' lvalue Var 0x56237993eea8 's' 'T *'
|       | `-ParenExpr 0x562379941b88 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x562379941b58 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562379941b40 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562379941b28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562379941b08 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562379941ad8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |     |       `-ImplicitCastExpr 0x562379941ac0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5623799415d8 <col:25> 'String' lvalue Var 0x56237993ec58 'str' 'String'
|       |     |-CallExpr 0x562379941930 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5623799417c0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x562379941808 <col:59> 'P' lvalue ParmVar 0x562379916368 'parser' 'P'
|       |     | |-DeclRefExpr 0x562379941828 <col:67> 'String' lvalue Var 0x56237993ec58 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5623799418d8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562379941868 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|       |     | | `-DeclRefExpr 0x562379941848 <col:73> 'T *' lvalue Var 0x56237993eea8 's' 'T *'
|       |     | `-UnaryOperator 0x562379941918 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562379941908 <col:77> 'Args *' this
|       |     `-ParenExpr 0x562379941aa0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x562379941a80 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x562379941a50 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562379941a00 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562379941990 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|       |         | | `-DeclRefExpr 0x562379941970 <col:87> 'T *' lvalue Var 0x56237993eea8 's' 'T *'
|       |         | `-DeclRefExpr 0x562379941a30 <col:91> 'const V' lvalue ParmVar 0x5623799164a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562379941a70 <col:98> 'bool' true
|       `-DeclRefExpr 0x562379941bc8 <col:106> 'Args::Slot *' lvalue Var 0x56237993ebc8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56237991e978 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x562379916718 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562379916798 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56237991e490 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56237991e8d8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56237991e550 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237991e5d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56237991e648 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56237991e6e8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56237991e788 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x562379942bf8 <col:60, line:773:5>
|     |-DeclStmt 0x562379941cc0 <line:767:9, col:26>
|     | `-VarDecl 0x562379941c58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562379942bc0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x562379942be0 <line:768:13, col:58>
|       | `-VarDecl 0x562379941ce8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562379941ec8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562379941e98 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562379941e80 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562379941e60 <col:26, col:58> 'String' (CXXTemporary 0x562379941e60)
|       |           `-CXXMemberCallExpr 0x562379941df0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562379941d60 <col:26> '<bound member function type>' ->find 0x562379934318
|       |             | `-CXXThisExpr 0x562379941d50 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562379941e28 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562379941d90 <col:31> 'const char *' lvalue ParmVar 0x56237991e550 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562379941e40 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562379941db0 <col:40> 'int' lvalue ParmVar 0x56237991e5d0 'flags' 'int'
|       |             `-DeclRefExpr 0x562379941dd0 <col:47> 'Args::Slot *' lvalue Var 0x562379941c58 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562379941f80 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562379941f68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562379941f48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562379941f18 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |       `-ImplicitCastExpr 0x562379941f00 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562379941ee0 <col:20> 'String' lvalue Var 0x562379941ce8 'str' 'String'
|       `-CompoundStmt 0x562379942b98 <col:61, line:772:9>
|         |-DeclStmt 0x5623799422c0 <line:769:13, col:66>
|         | `-VarDecl 0x562379941fd8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x562379942290 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562379942200 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562379942248 <col:49> 'T1' lvalue ParmVar 0x56237991e6e8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x562379942278 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562379942268 <col:61> 'Args *' this
|         |-DeclStmt 0x562379942630 <line:770:13, col:66>
|         | `-VarDecl 0x562379942348 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x562379942600 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562379942570 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5623799425b8 <col:49> 'T2' lvalue ParmVar 0x56237991e788 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5623799425e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5623799425d8 <col:61> 'Args *' this
|         `-CallExpr 0x562379942b68 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x562379942658 <col:13> '<bound member function type>' ->postparse 0x562379934528
|           | `-CXXThisExpr 0x562379942648 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562379942b28 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5623799426c8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x562379942688 <col:23> 'T1 *' lvalue Var 0x562379941fd8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5623799426a8 <col:29> 'T2 *' lvalue Var 0x562379942348 's2' 'T2 *'
|           | `-CallExpr 0x562379942ae0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5623799428b0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5623799428f8 <col:63> 'P' lvalue ParmVar 0x56237991e648 'parser' 'P'
|           |   |-DeclRefExpr 0x562379942918 <col:71> 'String' lvalue Var 0x562379941ce8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5623799429c8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562379942958 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|           |   | `-DeclRefExpr 0x562379942938 <col:77> 'T1 *' lvalue Var 0x562379941fd8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x562379942a88 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562379942a18 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|           |   | `-DeclRefExpr 0x5623799429f8 <col:82> 'T2 *' lvalue Var 0x562379942348 's2' 'T2 *'
|           |   `-UnaryOperator 0x562379942ac8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562379942ab8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x562379942b48 <col:94> 'Args::Slot *' lvalue Var 0x562379941c58 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56237991ed68 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56237991e9f8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56237991ecc8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56237991eab0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237991eb30 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56237991eba8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562379943110 <col:67, line:780:5>
|     |-DeclStmt 0x562379942c90 <line:777:9, col:26>
|     | `-VarDecl 0x562379942c28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5623799430d8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5623799430f8 <line:778:13, col:58>
|       | `-VarDecl 0x562379942cb8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562379942e98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562379942e68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562379942e50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562379942e30 <col:26, col:58> 'String' (CXXTemporary 0x562379942e30)
|       |           `-CXXMemberCallExpr 0x562379942dc0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562379942d30 <col:26> '<bound member function type>' ->find 0x562379934318
|       |             | `-CXXThisExpr 0x562379942d20 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562379942df8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562379942d60 <col:31> 'const char *' lvalue ParmVar 0x56237991eab0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562379942e10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562379942d80 <col:40> 'int' lvalue ParmVar 0x56237991eb30 'flags' 'int'
|       |             `-DeclRefExpr 0x562379942da0 <col:47> 'Args::Slot *' lvalue Var 0x562379942c28 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562379942f50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562379942f38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562379942f18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562379942ee8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|       |       `-ImplicitCastExpr 0x562379942ed0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562379942eb0 <col:20> 'String' lvalue Var 0x562379942cb8 'str' 'String'
|       `-CallExpr 0x5623799430a8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x562379942f78 <col:13> '<bound member function type>' ->postparse 0x562379934528
|         | `-CXXThisExpr 0x562379942f68 <col:13> 'Args *' implicit this
|         |-CallExpr 0x562379943058 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x562379942fc8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x562379942fa8 <col:23> 'P' lvalue ParmVar 0x56237991eba8 'parser' 'P'
|         | |-DeclRefExpr 0x562379943010 <col:36> 'String' lvalue Var 0x562379942cb8 'str' 'String'
|         | `-UnaryOperator 0x562379943040 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x562379943030 <col:42> 'Args *' this
|         `-DeclRefExpr 0x562379943088 <col:49> 'Args::Slot *' lvalue Var 0x562379942c28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56237991f108 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56237991edd8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56237991f068 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56237991ee90 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237991ef10 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56237991ef88 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x562379943a80 <col:71, line:792:5>
|     |-DeclStmt 0x5623799431a8 <line:784:9, col:26>
|     | `-VarDecl 0x562379943140 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562379943278 <line:785:9, col:29>
|     | `-VarDecl 0x5623799431d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562379943260 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562379943240 <col:28> 'int' 1
|     |-WhileStmt 0x562379943930 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x562379943950 <line:786:16, col:61>
|     | | `-VarDecl 0x5623799432a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562379943480 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562379943450 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562379943438 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562379943418 <col:29, col:61> 'String' (CXXTemporary 0x562379943418)
|     | |           `-CXXMemberCallExpr 0x5623799433a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562379943318 <col:29> '<bound member function type>' ->find 0x562379934318
|     | |             | `-CXXThisExpr 0x562379943308 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5623799433e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562379943348 <col:34> 'const char *' lvalue ParmVar 0x56237991ee90 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5623799433f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562379943368 <col:43> 'int' lvalue ParmVar 0x56237991ef10 'flags' 'int'
|     | |             `-DeclRefExpr 0x562379943388 <col:50> 'Args::Slot *' lvalue Var 0x562379943140 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562379943538 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562379943520 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562379943500 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5623799434d0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|     | |       `-ImplicitCastExpr 0x5623799434b8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562379943498 <col:23> 'String' lvalue Var 0x5623799432a0 'str' 'String'
|     | `-CompoundStmt 0x562379943908 <col:64, line:790:9>
|     |   |-CallExpr 0x562379943690 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x562379943560 <col:13> '<bound member function type>' ->postparse 0x562379934528
|     |   | | `-CXXThisExpr 0x562379943550 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562379943640 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5623799435b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562379943590 <col:23> 'P' lvalue ParmVar 0x56237991ef88 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5623799435f8 <col:36> 'String' lvalue Var 0x5623799432a0 'str' 'String'
|     |   | | `-UnaryOperator 0x562379943628 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562379943618 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x562379943670 <col:49> 'Args::Slot *' lvalue Var 0x562379943140 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562379943828 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5623799436c0 <col:13> 'int' lvalue Var 0x5623799431d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562379943810 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5623799437f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562379943758 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562379943738 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562379943720 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5623799436e0 <col:28> 'int' lvalue Var 0x5623799431d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562379943700 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5623799437d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5623799437a8 <col:49> 'bool' lvalue ->_read_status 0x562379817940
|     |   |         `-ImplicitCastExpr 0x562379943788 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562379943778 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5623799438d8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562379943848 <col:13> 'int' lvalue ParmVar 0x56237991ef10 'flags' 'int'
|     |     `-UnaryOperator 0x5623799438c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5623799438a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562379943888 <col:23> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562379943a60 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562379943998 <col:9> 'bool' lvalue ->_read_status 0x562379817940
|       | `-ImplicitCastExpr 0x562379943978 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562379943968 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562379943a40 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562379943a20 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562379943a08 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5623799439c8 <col:25> 'int' lvalue Var 0x5623799431d8 'read_status' 'int'
|           `-IntegerLiteral 0x5623799439e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56237991f5e8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56237991f178 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56237991f1f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56237991f548 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56237991f2b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237991f338 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56237991f3b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56237991f458 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x562379944a10 <col:84, line:805:5>
|     |-DeclStmt 0x562379943b28 <line:796:9, col:26>
|     | `-VarDecl 0x562379943ac0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562379943bf8 <line:797:9, col:29>
|     | `-VarDecl 0x562379943b58 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562379943be0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562379943bc0 <col:28> 'int' 1
|     |-DeclStmt 0x562379943f30 <line:798:9, col:71>
|     | `-VarDecl 0x562379943c48 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562379943f00 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562379943e70 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x562379943eb8 <col:55> 'T' lvalue ParmVar 0x56237991f458 'variable' 'T &'
|     |     `-UnaryOperator 0x562379943ee8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562379943ed8 <col:66> 'Args *' this
|     |-WhileStmt 0x5623799448c0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5623799448e0 <line:799:16, col:61>
|     | | `-VarDecl 0x562379943f58 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562379944138 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562379944108 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5623799440f0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5623799440d0 <col:29, col:61> 'String' (CXXTemporary 0x5623799440d0)
|     | |           `-CXXMemberCallExpr 0x562379944060 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562379943fd0 <col:29> '<bound member function type>' ->find 0x562379934318
|     | |             | `-CXXThisExpr 0x562379943fc0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562379944098 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562379944000 <col:34> 'const char *' lvalue ParmVar 0x56237991f2b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5623799440b0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562379944020 <col:43> 'int' lvalue ParmVar 0x56237991f338 'flags' 'int'
|     | |             `-DeclRefExpr 0x562379944040 <col:50> 'Args::Slot *' lvalue Var 0x562379943ac0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5623799441f0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5623799441d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5623799441b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562379944188 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|     | |       `-ImplicitCastExpr 0x562379944170 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562379944150 <col:23> 'String' lvalue Var 0x562379943f58 'str' 'String'
|     | `-CompoundStmt 0x562379944898 <col:64, line:803:9>
|     |   |-CallExpr 0x562379944620 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x562379944218 <col:13> '<bound member function type>' ->postparse 0x562379934528
|     |   | | `-CXXThisExpr 0x562379944208 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5623799445e0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x562379944248 <col:23> 'T *' lvalue Var 0x562379943c48 's' 'T *'
|     |   | | `-CallExpr 0x5623799445a0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x562379944430 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x562379944478 <col:56> 'P' lvalue ParmVar 0x56237991f3b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x562379944498 <col:64> 'String' lvalue Var 0x562379943f58 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x562379944548 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5623799444d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|     |   | |   | `-DeclRefExpr 0x5623799444b8 <col:70> 'T *' lvalue Var 0x562379943c48 's' 'T *'
|     |   | |   `-UnaryOperator 0x562379944588 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x562379944578 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x562379944600 <col:81> 'Args::Slot *' lvalue Var 0x562379943ac0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5623799447b8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562379944650 <col:13> 'int' lvalue Var 0x562379943b58 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5623799447a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562379944780 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5623799446e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5623799446c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5623799446b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562379944670 <col:28> 'int' lvalue Var 0x562379943b58 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562379944690 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562379944768 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562379944738 <col:49> 'bool' lvalue ->_read_status 0x562379817940
|     |   |         `-ImplicitCastExpr 0x562379944718 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562379944708 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562379944868 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5623799447d8 <col:13> 'int' lvalue ParmVar 0x56237991f338 'flags' 'int'
|     |     `-UnaryOperator 0x562379944850 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562379944838 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562379944818 <col:23> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5623799449f0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562379944928 <col:9> 'bool' lvalue ->_read_status 0x562379817940
|       | `-ImplicitCastExpr 0x562379944908 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5623799448f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5623799449d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5623799449b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562379944998 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562379944958 <col:25> 'int' lvalue Var 0x562379943b58 'read_status' 'int'
|           `-IntegerLiteral 0x562379944978 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56237991fbc8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56237991f660 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56237991f6d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56237991fb28 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56237991f798 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56237991f818 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56237991f890 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56237991f9e0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x562379945818 <col:87, line:821:5>
|     |-DeclStmt 0x562379944ac0 <line:809:9, col:26>
|     | `-VarDecl 0x562379944a58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562379944b90 <line:810:9, col:29>
|     | `-VarDecl 0x562379944af0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562379944b78 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562379944b58 <col:28> 'int' 1
|     |-DeclStmt 0x562379944dd8 <line:811:9, col:38>
|     | `-VarDecl 0x562379944cc0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x562379944db0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562379944d38 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562379944d90 <col:29> 'Vector<T>' lvalue ParmVar 0x56237991f9e0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5623799456c8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5623799456e8 <line:812:16, col:61>
|     | | `-VarDecl 0x562379944e00 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562379944fe0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562379944fb0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562379944f98 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562379944f78 <col:29, col:61> 'String' (CXXTemporary 0x562379944f78)
|     | |           `-CXXMemberCallExpr 0x562379944f08 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562379944e78 <col:29> '<bound member function type>' ->find 0x562379934318
|     | |             | `-CXXThisExpr 0x562379944e68 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562379944f40 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562379944ea8 <col:34> 'const char *' lvalue ParmVar 0x56237991f798 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562379944f58 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562379944ec8 <col:43> 'int' lvalue ParmVar 0x56237991f818 'flags' 'int'
|     | |             `-DeclRefExpr 0x562379944ee8 <col:50> 'Args::Slot *' lvalue Var 0x562379944a58 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562379945098 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562379945080 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562379945060 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562379945030 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5623796646d8
|     | |       `-ImplicitCastExpr 0x562379945018 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562379944ff8 <col:23> 'String' lvalue Var 0x562379944e00 'str' 'String'
|     | `-CompoundStmt 0x562379945690 <col:64, line:819:9>
|     |   |-DeclStmt 0x562379945158 <line:813:13, col:23>
|     |   | `-VarDecl 0x5623799450c0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x562379945138 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5623799452d8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x562379945180 <col:13> '<bound member function type>' ->postparse 0x562379934528
|     |   | | `-CXXThisExpr 0x562379945170 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562379945280 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5623799451d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5623799451b0 <col:23> 'P' lvalue ParmVar 0x56237991f890 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562379945218 <col:36> 'String' lvalue Var 0x562379944e00 'str' 'String'
|     |   | | |-DeclRefExpr 0x562379945238 <col:41> 'T' lvalue Var 0x5623799450c0 'sx' 'T'
|     |   | | `-UnaryOperator 0x562379945268 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562379945258 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5623799452b8 <col:53> 'Args::Slot *' lvalue Var 0x562379944a58 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x562379945430 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x562379945368 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x562379945338 <col:17> 'bool' lvalue ->_read_status 0x562379817940
|     |   | |   `-ImplicitCastExpr 0x562379945318 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x562379945308 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x562379945408 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5623799453a0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x562379945380 <col:17> 'Vector<T> *' lvalue Var 0x562379944cc0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5623799453e8 <col:30> 'T' lvalue Var 0x5623799450c0 'sx' 'T'
|     |   |-BinaryOperator 0x5623799455b0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562379945448 <col:13> 'int' lvalue Var 0x562379944af0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562379945598 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562379945578 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5623799454e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5623799454c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5623799454a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562379945468 <col:28> 'int' lvalue Var 0x562379944af0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562379945488 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562379945560 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562379945530 <col:49> 'bool' lvalue ->_read_status 0x562379817940
|     |   |         `-ImplicitCastExpr 0x562379945510 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562379945500 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562379945660 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5623799455d0 <col:13> 'int' lvalue ParmVar 0x56237991f818 'flags' 'int'
|     |     `-UnaryOperator 0x562379945648 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562379945630 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562379945610 <col:23> 'const int' lvalue Var 0x5623799035a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5623799457f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562379945730 <col:9> 'bool' lvalue ->_read_status 0x562379817940
|       | `-ImplicitCastExpr 0x562379945710 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562379945700 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5623799457d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5623799457b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5623799457a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562379945760 <col:25> 'int' lvalue Var 0x562379944af0 'read_status' 'int'
|           `-IntegerLiteral 0x562379945780 <col:40> 'int' 1
|-AccessSpecDecl 0x56237991fc40 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56237991fc68 prev 0x5623799018a8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56237991fd60 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56237991fe50 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x562379945850 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56237991ff40 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x562379945860 <col:25, line:830:9>
| |-CXXMethodDecl 0x562379920040 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5623799200f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x562379920198 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562379920198
| | `-ParmVarDecl 0x5623799202a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x562379920a68 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562379920a68
|   `-ParmVarDecl 0x562379920b78 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x562379920318 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x562379920478 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x562379920670 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x562379920520 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x562379920598 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x562379945a40 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x562379920928 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5623799458b0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x562379945870 <col:20> 'void *' lvalue ParmVar 0x562379920520 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x562379920990 '_slot' 'char *'
| | | `-CXXNewExpr 0x562379945938 <col:32, col:45> 'char *' array Function 0x562379487148 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x562379945920 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5623799458f0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x562379920598 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5623799209f0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x562379945a00 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5623799459c0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x562379920598 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x562379945ac0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x562379920770 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56237991ff40 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x562379945b48 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x562379945b28 <line:840:13, col:22> 'void' array Function 0x5623794874a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x562379945b10 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x562379945ae0 <col:22> 'char *' lvalue ->_slot 0x562379920990
| |         `-CXXThisExpr 0x562379945ad0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x562379920870 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x562379920040 Slot::store 'void ()' ]
| | `-CompoundStmt 0x562379945d38 <col:22, line:844:9>
| |   `-CallExpr 0x562379945ca0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x562379945c88 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x562379945c68 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x562379592f08 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x562379945cd8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x562379945bb8 <col:20> 'void *' lvalue ->_ptr 0x562379920928
| |     |   `-CXXThisExpr 0x562379945ba8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x562379945d08 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x562379945cf0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x562379945bf8 <col:26> 'char *' lvalue ->_slot 0x562379920990
| |     |     `-CXXThisExpr 0x562379945be8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x562379945d20 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x562379945c38 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5623799209f0
| |         `-CXXThisExpr 0x562379945c28 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x562379920928 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x562379920990 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5623799209f0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x562379920be8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562379920be8
| | `-ParmVarDecl 0x562379920cf8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x562379920d98 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562379920d98
|   `-ParmVarDecl 0x562379920ea8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x562379921048 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x562379920f18 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x562379920fb8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5623799212e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5623799214d8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5623799213a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x562379921658 '_ptr' 'T *'
|   | | `-ParenListExpr 0x562379945d70 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x562379945d50 <col:20> 'T *' lvalue ParmVar 0x5623799213a8 'ptr' 'T *'
|   | `-CompoundStmt 0x562379945dc0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5623799215a8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x562379920040 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x562379945f70 <col:22, line:857:9>
|   |   `-CallExpr 0x562379945f40 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x562379945dd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56237964b858 0x5623795f5968
|   |     |-CXXOperatorCallExpr 0x562379945ed0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x562379945e60 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562379858808 0x562379858428 0x562379858058 0x562379857c78 0x562379857898 0x5623798574c8
|   |     | `-MemberExpr 0x562379945e30 <col:29> 'T *' lvalue ->_ptr 0x562379921658
|   |     |   `-CXXThisExpr 0x562379945e20 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x562379945f10 <col:35> 'T' lvalue ->_slot 0x5623799216b8
|   |       `-CXXThisExpr 0x562379945f00 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x562379921658 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5623799216b8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x562379921720 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x562379921820 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x562379921870 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379921800 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5623799217e0 <col:31> 'int' 48
|-FieldDecl 0x562379921898 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5623799218f8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x562379921958 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x562379921a90 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x562379933bc0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x562379933c20 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x562379933cd0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x562379933ef8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x562379933e00 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x562379934048 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x562379933fb8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x562379934318 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x562379934108 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x562379934188 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x562379934230 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x562379934528 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5623799343e0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x562379934458 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5623799345f8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x562379934748 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5623799346b0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x562379934ad8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x562379934808 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x562379934888 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x562379934930 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5623799349e8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x562379934d00 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x562379934bb0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x562379934c28 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x562379935018 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x562379934db0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x562379934f78 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x562379934e88 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379654580 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562379654698 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x562379654728 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5623796547f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5623796548e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x562379654af8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5623796549a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379654ca8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x562379654bb0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x562379654df0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x562379654d60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x562379654f38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562379654ea8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379655080 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x562379654ff0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379655148 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x562379655290 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x562379655200 <col:28> col:31 'int'
|-CXXMethodDecl 0x562379655358 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5623796554a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x562379655410 <col:28> col:31 'int'
|-CXXMethodDecl 0x562379655618 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x562379655558 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379655760 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5623796556d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379655828 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5623796559e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5623796558d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562379655950 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379655c38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562379655aa8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562379655b20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562379655ce8 <col:86> "" ""
|-CXXMethodDecl 0x562379655f58 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x562379655dc8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x562379655e40 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379656108 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x562379656018 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5623796562b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5623796561c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x562379656588 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x562379656370 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5623796563e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562379656460 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379656868 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x562379656650 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5623796566c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562379656740 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562379656920 <col:115> "" ""
|-AccessSpecDecl 0x562379656990 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5623796569c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379657ee0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562379657ee0
| `-ParmVarDecl 0x562379657fe8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x562379658088 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x562379658088
| `-ParmVarDecl 0x562379658198 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56237968d7c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56237987f5c0 <col:7>
|-CXXConstructorDecl 0x56237968d8a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56237968d8a0
| `-ParmVarDecl 0x56237968d9b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56237968da28 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56237968da28
| `-ParmVarDecl 0x56237968db38 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x562379881fc0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56237986e168 prev 0x562379863370 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56237986e260 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56237986e350 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56237986e478 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56237986e5f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56237986e778 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56237986e8f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56237987f728 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56237987ff98 <col:11>
|-CXXDestructorDecl 0x56237987f800 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56237987f938 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56237987f938
| `-ParmVarDecl 0x56237987fa48 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56237987fae8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56237987fae8
| `-ParmVarDecl 0x56237987fbf8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5623798829b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x562379882ac8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x562379882d48 <col:11>
|   `-ReturnStmt 0x562379882d38 <col:11>
|     `-UnaryOperator 0x562379882d20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562379882d10 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x562379882b38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562379882b38
  `-ParmVarDecl 0x562379882c48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56237986e960 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56237986ea78 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56237986eb18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56237986eb80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56237986ebe8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56237986ec50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56237986ecb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56237986ed70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56237986edd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56237986ee30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56237987f638 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56237986eb18 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56237987ffa8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x562379880000 <col:12>
|-CXXConstructorDecl 0x56237987fc68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56237987fc68
| `-ParmVarDecl 0x56237987fd78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56237987fe18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56237987fe18
| `-ParmVarDecl 0x56237987ff28 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5623798820a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56237985ca80 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56237985cb98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56237985cc28 <col:16, col:22> col:16 public
|-EnumDecl 0x56237985cc50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56237985cd50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56237985ce30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56237985cd30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56237985cd10 <col:21> 'int' 28
| `-EnumConstantDecl 0x56237985cde0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56237985ce48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56237985cdc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56237985cda0 <col:22> 'int' 64
|-CXXMethodDecl 0x56237985d188 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56237985ce70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56237985cef0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56237985cf68 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56237985cfe0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56237985d248 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56237985d448 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56237985d2c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56237985d338 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56237985d4f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56237985d658 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56237985d568 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56237985d700 <col:72> warn_unused_result ""
|-TypedefDecl 0x56237985da60 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56237985d9f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56237985d990 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56237985d950 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5623793342d0 'void'
|       |-PointerType 0x5623795dcc00 'unsigned char *'
|       | `-BuiltinType 0x5623793343d0 'unsigned char'
|       |-TypedefType 0x5623793d9190 'size_t' sugar
|       | |-Typedef 0x5623793a4b20 'size_t'
|       | `-BuiltinType 0x562379334430 'unsigned long'
|       `-PointerType 0x562379334ad0 'void *'
|         `-BuiltinType 0x5623793342d0 'void'
|-CXXMethodDecl 0x56237985ded8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56237985dad0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56237985db48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56237985dbe0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56237985dc60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5623798785d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5623798785b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x562379878580 <col:58> 'int' 0
| |-ParmVarDecl 0x56237985dce0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5623798785f8 <col:76> 'int' 0
| |-ParmVarDecl 0x56237985dd60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x562379878618 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56237985dfa8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56237985e028 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56237985e0e8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56237985e188 <col:20>
| `-OptimizeNoneAttr 0x56237985e1e0 <col:30>
|-CXXMethodDecl 0x56237985e258 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56237985e2f8 <col:20>
| `-OptimizeNoneAttr 0x56237985e350 <col:30>
|-CXXMethodDecl 0x56237985e3c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56237985e468 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56237985e518 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56237985e5b8 <col:20>
| |-OptimizeNoneAttr 0x56237985e610 <col:30>
| `-WarnUnusedResultAttr 0x56237985e638 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56237985e690 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56237985e730 <col:20>
| `-OptimizeNoneAttr 0x56237985e788 <col:30>
|-CXXMethodDecl 0x56237985e7d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56237985e878 <col:20>
| `-OptimizeNoneAttr 0x56237985e8d0 <col:30>
|-CXXMethodDecl 0x56237985e918 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x56237985e9b8 <col:20>
| `-OptimizeNoneAttr 0x56237985ea10 <col:30>
|-CXXMethodDecl 0x56237985ea58 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56237985eb18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56237985ebe0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56237985eca8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56237985ed68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56237985ee88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5623798786e0 <col:54, line:99:5>
|   `-ReturnStmt 0x5623798786d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5623798786b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x562379878688 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56237986f168
|         `-CXXThisExpr 0x562379878678 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56237985f028 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56237985ef38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x562379878790 <col:67, line:103:5>
|   `-BinaryOperator 0x562379878770 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562379878708 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56237986f168
|     | `-CXXThisExpr 0x5623798786f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562379878758 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x562379878738 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56237985ef38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56237985f120 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x562379878810 <col:33, line:107:5>
|   `-ReturnStmt 0x562379878800 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5623798787e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5623798787b8 <col:16> 'void *' lvalue ->_destructor_argument 0x56237986f1d0
|         `-CXXThisExpr 0x5623798787a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56237985f1e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x562379878e40 <col:25, line:113:5>
|   |-ParenExpr 0x562379878b88 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x562379878b58 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5623798788c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5623798788a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x562379878868 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x562379878838 <col:24> '<bound member function type>' ->shared 0x56237985e258
|   |   |       `-ImplicitCastExpr 0x562379878888 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x562379878828 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562379878928 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562379878908 <col:42> 'int' 0
|   |   `-CallExpr 0x562379878ab8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x562379878aa0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562379878a80 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562379878af8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562379878998 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x562379878b10 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5623798789c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562379878b28 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5623798789f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x562379878b40 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562379878a68 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562379878a50 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562379878a18 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x562379878d88 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x562379878bb8 <col:2> 'unsigned char *' lvalue ->_head 0x56237986ef70
|   | | `-CXXThisExpr 0x562379878ba8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x562379878d70 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x562379878d50 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x562379878bf8 <col:10> 'unsigned char *' lvalue ->_data 0x56237986efd8
|   |     | `-CXXThisExpr 0x562379878be8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x562379878d38 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x562379878d18 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x562379878c38 <col:18> 'unsigned char *' lvalue ->_tail 0x56237986f040
|   |         | `-CXXThisExpr 0x562379878c28 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x562379878d00 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x562379878ce0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x562379878c78 <col:26> 'unsigned char *' lvalue ->_end 0x56237986f0a8
|   |             | `-CXXThisExpr 0x562379878c68 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x562379878cc8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x562379878ca8 <col:33> 'int' 0
|   `-BinaryOperator 0x562379878e20 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562379878db8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56237986f168
|     | `-CXXThisExpr 0x562379878da8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562379878e08 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x562379878de8 <col:16> 'int' 0
|-CXXMethodDecl 0x56237985f320 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56237985f290 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56237985f3c8 <col:20>
| |-OptimizeNoneAttr 0x56237985f420 <col:30>
| `-WarnUnusedResultAttr 0x56237985f448 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56237985f518 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56237985f488 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56237985f5c0 <col:20>
| |-OptimizeNoneAttr 0x56237985f618 <col:30>
| `-WarnUnusedResultAttr 0x56237985f640 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56237985f778 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56237985f680 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56237985f820 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56237985f920 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56237985f890 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56237985f9c8 <col:20>
| `-OptimizeNoneAttr 0x56237985fa20 <col:30>
|-CXXMethodDecl 0x56237985fae8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56237985fa58 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56237985fb90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56237985fc90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56237985fc00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56237985fd38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56237985fe38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56237985fda8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56237985fee0 <col:20>
| `-OptimizeNoneAttr 0x56237985ff38 <col:30>
|-CXXMethodDecl 0x5623798600c8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56237985ff78 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56237985fff0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x562379878638 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x562379860178 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x562379860378 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5623798601f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x562379860268 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379860588 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562379860438 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5623798604b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379860798 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x562379860648 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5623798606c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x562379878648 <col:39> 'int' 0
|-CXXMethodDecl 0x562379860868 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x562379860930 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5623798609f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x562379860ab8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562379860b80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x562379860cc8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x562379860c38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x562379860e98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562379860d88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x562379860e00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379860f68 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x562379861028 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5623798610c8 <col:20>
| `-OptimizeNoneAttr 0x562379861120 <col:30>
|-CXXMethodDecl 0x562379861170 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562379861210 <col:20>
| `-OptimizeNoneAttr 0x562379861268 <col:30>
|-CXXMethodDecl 0x5623798612b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x562379861378 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562379861440 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5623798614e0 <col:20>
| `-OptimizeNoneAttr 0x562379861538 <col:30>
|-CXXMethodDecl 0x562379861688 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562379861578 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5623798615f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5623798617d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x562379861748 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5623798618b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x562379861970 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x562379861a10 <col:20>
| `-OptimizeNoneAttr 0x562379861a68 <col:30>
|-CXXMethodDecl 0x562379861ab8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562379861b58 <col:20>
| `-OptimizeNoneAttr 0x562379861bb0 <col:30>
|-CXXMethodDecl 0x562379861c00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x562379861cc8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x562379861d68 <col:20>
| `-OptimizeNoneAttr 0x562379861dc0 <col:30>
|-CXXMethodDecl 0x562379861e08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x562379861f28 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x562379862098 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x562379861fd8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x562379862188 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x562379862228 <col:20>
| `-OptimizeNoneAttr 0x562379862280 <col:30>
|-CXXMethodDecl 0x5623798622d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x562379862390 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5623798625c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x562379862440 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5623798624b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562379862678 <col:20>
| `-OptimizeNoneAttr 0x5623798626d0 <col:30>
|-CXXMethodDecl 0x562379862778 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x562379862818 <col:20>
| `-OptimizeNoneAttr 0x562379862870 <col:30>
|-CXXMethodDecl 0x5623798628c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x562379862960 <col:20>
| `-OptimizeNoneAttr 0x5623798629b8 <col:30>
|-CXXMethodDecl 0x562379862a00 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x562379862aa0 <col:20>
| `-OptimizeNoneAttr 0x562379862af8 <col:30>
|-CXXMethodDecl 0x562379862bf8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x562379862b30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x562379862ca0 <col:20>
| `-OptimizeNoneAttr 0x562379862cf8 <col:30>
|-CXXMethodDecl 0x562379862eb8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x562379862d30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x562379862da8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562379862f68 <col:20>
| `-OptimizeNoneAttr 0x562379862fc0 <col:30>
|-CXXMethodDecl 0x562379863068 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x562379863188 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5623798632a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x562379863348 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x562379863370 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x562379863498 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x562379863538 <col:20>
| `-OptimizeNoneAttr 0x562379863590 <col:30>
|-CXXMethodDecl 0x562379863638 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5623798636d8 <col:20>
| `-OptimizeNoneAttr 0x562379863730 <col:30>
|-AccessSpecDecl 0x562379863758 <line:344:3, col:9> col:3 public
|-EnumDecl 0x562379863780 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x562379863880 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5623798638d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379863860 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x562379863840 <col:14> 'int' 48
|-CXXMethodDecl 0x562379863938 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5623798639d8 <col:20>
| `-OptimizeNoneAttr 0x562379863a30 <col:30>
|-CXXMethodDecl 0x562379863aa8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x562379863b48 <col:20>
| `-OptimizeNoneAttr 0x562379863ba0 <col:30>
|-CXXMethodDecl 0x562379863c68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x562379863bd8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x562379863e08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x562379863fa8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x562379863eb8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x562379864050 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x562379864150 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562379864500 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379864130 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x562379864110 <col:9> 'int' 0
| |-EnumConstantDecl 0x5623798641e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562379864518 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798641c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5623798641a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x562379864270 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562379864530 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379864250 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x562379864230 <col:14> 'int' 2
| |-EnumConstantDecl 0x562379864300 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562379864548 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798642e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5623798642c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x562379864390 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562379864560 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379864370 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x562379864350 <col:13> 'int' 4
| |-EnumConstantDecl 0x562379864420 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562379864578 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379864400 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5623798643e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5623798644b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x562379864590 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379864490 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x562379864470 <col:14> 'int' 6
|-CXXMethodDecl 0x5623798645f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x562379864698 <col:20>
| `-OptimizeNoneAttr 0x5623798646f0 <col:30>
|-CXXMethodDecl 0x5623798647e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x562379864728 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x562379864890 <col:20>
| `-OptimizeNoneAttr 0x5623798648e8 <col:30>
|-CXXMethodDecl 0x562379864958 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x562379864a80 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x562379864bf8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x562379864b30 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x562379864cc0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x562379864d88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x562379864ec8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x562379864e38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x562379864f70 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x562379865070 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562379865270 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379865050 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x562379865030 <col:23> 'int' 0
| |-EnumConstantDecl 0x562379865100 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562379865288 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623798650e0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5623798650c0 <col:45> 'int' 4
| |-EnumConstantDecl 0x562379865190 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5623798652a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379865170 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x562379865150 <col:24> 'int' 0
| `-EnumConstantDecl 0x562379865220 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5623798652b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379865200 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5623798651e0 <col:47> 'int' 16
|-CXXMethodDecl 0x562379865318 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x562379865488 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5623798653c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x562379865530 <col:20>
| `-OptimizeNoneAttr 0x562379865588 <col:30>
|-CXXMethodDecl 0x5623798655d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x562379878f60 <col:18, col:36>
|   `-ReturnStmt 0x562379878f50 <col:20, col:33>
|     `-ImplicitCastExpr 0x562379878f38 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x562379878f18 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x562379878ee8 <col:27> '<bound member function type>' ->xanno 0x562379863638
|           `-CXXThisExpr 0x562379878ed8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5623798656d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x562379879070 <col:30, col:48>
|   `-ReturnStmt 0x562379879060 <col:32, col:45>
|     `-ImplicitCastExpr 0x562379879048 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x562379879028 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x562379878ff8 <col:39> '<bound member function type>' ->xanno 0x562379863498
|           `-CXXThisExpr 0x562379878fe8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5623798657b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x562379879208 <col:24, col:50>
|   `-ReturnStmt 0x5623798791f8 <col:26, col:47>
|     `-UnaryOperator 0x5623798791e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5623798791c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5623798791a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562379879158 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56237986e478
|         |   `-CXXMemberCallExpr 0x562379879138 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x562379879108 <col:34> '<bound member function type>' ->xanno 0x562379863638
|         |       `-CXXThisExpr 0x5623798790f8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x562379879188 <col:46> 'int' 0
|-CXXMethodDecl 0x5623798658c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5623798793d8 <col:36, col:62>
|   `-ReturnStmt 0x5623798793c8 <col:38, col:59>
|     `-UnaryOperator 0x5623798793b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562379879390 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562379879378 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5623798792f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56237986e478
|         |   `-CXXMemberCallExpr 0x5623798792d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5623798792a0 <col:46> '<bound member function type>' ->xanno 0x562379863498
|         |       `-CXXThisExpr 0x562379879290 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562379879320 <col:58> 'int' 0
|-CXXMethodDecl 0x5623798659d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x562379879570 <col:26, col:53>
|   `-ReturnStmt 0x562379879560 <col:28, col:50>
|     `-UnaryOperator 0x562379879548 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562379879528 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x562379879510 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5623798794c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56237986e778
|         |   `-CXXMemberCallExpr 0x5623798794a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x562379879470 <col:36> '<bound member function type>' ->xanno 0x562379863638
|         |       `-CXXThisExpr 0x562379879460 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5623798794f0 <col:49> 'int' 0
|-CXXMethodDecl 0x562379865af8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x562379879748 <col:38, col:65>
|   `-ReturnStmt 0x562379879738 <col:40, col:62>
|     `-UnaryOperator 0x562379879720 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562379879700 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5623798796e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562379879658 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56237986e778
|         |   `-CXXMemberCallExpr 0x562379879638 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562379879608 <col:48> '<bound member function type>' ->xanno 0x562379863498
|         |       `-CXXThisExpr 0x5623798795f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562379879688 <col:61> 'int' 0
|-CXXMethodDecl 0x562379865ca8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x562379865bb0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x562379879e18 <col:34, line:463:5>
|   |-ParenExpr 0x562379879c60 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x562379879c30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562379879898 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562379879868 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5623798797b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5623798797a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562379879760 <col:23> 'int' lvalue ParmVar 0x562379865bb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562379879780 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562379879848 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562379879818 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5623798797d8 <col:33> 'int' lvalue ParmVar 0x562379865bb0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562379879830 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5623798797f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5623798798f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5623798798d8 <col:56> 'int' 0
|   |   `-CallExpr 0x562379879b90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562379879b78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562379879b58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562379879bd0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5623798799e8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562379879be8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562379879a18 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562379879c00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562379879a50 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x562379879c18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562379879b40 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562379879b28 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562379879ae8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x562379879e08 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x562379879df0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x562379879dd0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562379879da0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562379879d50 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56237986e478
|         |   `-CXXMemberCallExpr 0x562379879d30 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562379879d00 <col:9> '<bound member function type>' ->xanno 0x562379863498
|         |       `-CXXThisExpr 0x562379879cf0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x562379879db8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x562379879d80 <col:21> 'int' lvalue ParmVar 0x562379865bb0 'i' 'int'
|-CXXMethodDecl 0x562379865ef8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x562379865d68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x562379865de0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56237987a4a8 <col:40, line:472:5>
|   |-ParenExpr 0x56237987a2c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56237987a290 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562379879f70 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562379879f40 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562379879e90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562379879e78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562379879e38 <col:23> 'int' lvalue ParmVar 0x562379865d68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562379879e58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562379879f20 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562379879ef0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562379879eb0 <col:33> 'int' lvalue ParmVar 0x562379865d68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562379879f08 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562379879ed0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562379879fd0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562379879fb0 <col:56> 'int' 0
|   |   `-CallExpr 0x56237987a1f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56237987a1d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987a1b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987a230 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987a040 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56237987a248 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987a070 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987a260 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987a0a8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56237987a278 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987a1a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987a188 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987a148 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56237987a488 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56237987a430 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56237987a400 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56237987a3b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56237986e478
|     | |   `-CXXMemberCallExpr 0x56237987a390 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56237987a360 <col:2> '<bound member function type>' ->xanno 0x562379863638
|     | |       `-CXXThisExpr 0x56237987a350 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56237987a418 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56237987a3e0 <col:14> 'int' lvalue ParmVar 0x562379865d68 'i' 'int'
|     `-ImplicitCastExpr 0x56237987a470 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56237987a450 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x562379865de0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5623798660b8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x562379865fc0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56237987ac28 <col:36, line:485:5>
|   |-ParenExpr 0x56237987a990 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987a960 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987a640 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987a610 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987a520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987a508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987a4c8 <col:23> 'int' lvalue ParmVar 0x562379865fc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987a4e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987a5f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987a5d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987a540 <col:33> 'int' lvalue ParmVar 0x562379865fc0 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987a5b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987a5a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987a560 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987a580 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56237987a6a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987a680 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987a8c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987a8a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987a888 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987a900 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987a710 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56237987a918 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987a748 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987a930 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987a780 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56237987a948 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987a870 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987a858 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987a818 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56237987ac18 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56237987ac00 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56237987abe8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56237987abb8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56237987ab58 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56237987ab28 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56237987aaa0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56237986e350
|             |   `-CXXMemberCallExpr 0x56237987aa80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56237987aa50 <col:61> '<bound member function type>' ->xanno 0x562379863498
|             |       `-CXXThisExpr 0x56237987aa40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56237987ab40 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56237987aad0 <col:74> 'int' lvalue ParmVar 0x562379865fc0 'i' 'int'
|-CXXMethodDecl 0x562379866308 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x562379866178 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5623798661f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56237987b378 <col:42, line:500:5>
|   |-ParenExpr 0x56237987b110 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987b0e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987adc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987ad90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987aca0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987ac88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987ac48 <col:23> 'int' lvalue ParmVar 0x562379866178 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987ac68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987ad70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987ad58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987acc0 <col:33> 'int' lvalue ParmVar 0x562379866178 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987ad38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987ad20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987ace0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987ad00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56237987ae20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987ae00 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987b040 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987b028 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987b008 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987b080 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987ae90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56237987b098 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987aec8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987b0b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987af00 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56237987b0c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987aff0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987afd8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987af98 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56237987b358 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56237987b308 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56237987b2d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56237987b280 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56237987b250 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56237987b200 <col:48, col:57> 'char [48]' lvalue ->c 0x56237986e350
|     |     |   `-CXXMemberCallExpr 0x56237987b1e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56237987b1b0 <col:48> '<bound member function type>' ->xanno 0x562379863638
|     |     |       `-CXXThisExpr 0x56237987b1a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56237987b268 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56237987b230 <col:61> 'int' lvalue ParmVar 0x562379866178 'i' 'int'
|     `-ImplicitCastExpr 0x56237987b340 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56237987b320 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5623798661f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5623798664c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5623798663d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56237987bad8 <col:35, line:513:5>
|   |-ParenExpr 0x56237987b7e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987b7b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987b510 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987b4e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987b3f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987b3d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987b398 <col:23> 'int' lvalue ParmVar 0x5623798663d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987b3b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987b4c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987b4a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987b410 <col:33> 'int' lvalue ParmVar 0x5623798663d0 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987b488 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987b470 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987b430 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987b450 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56237987b570 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987b550 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987b718 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987b700 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987b6e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987b758 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987b5e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56237987b770 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987b618 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987b788 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987b650 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56237987b7a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987b6c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987b6b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987b670 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56237987bac8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56237987bab0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56237987ba98 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56237987ba68 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56237987b9e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56237987b9b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56237987b960 <col:60, col:69> 'char const[48]' lvalue ->c 0x56237986e350
|             |   `-CXXMemberCallExpr 0x56237987b940 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56237987b910 <col:60> '<bound member function type>' ->xanno 0x562379863498
|             |       `-CXXThisExpr 0x56237987b900 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56237987b9c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56237987b990 <col:73> 'int' lvalue ParmVar 0x5623798663d0 'i' 'int'
|-CXXMethodDecl 0x562379866718 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x562379866588 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562379866600 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56237987c1f8 <col:41, line:528:5>
|   |-ParenExpr 0x56237987bf80 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987bf50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987bc70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987bc40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987bb50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987bb38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987baf8 <col:23> 'int' lvalue ParmVar 0x562379866588 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987bb18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987bc20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987bc08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987bb70 <col:33> 'int' lvalue ParmVar 0x562379866588 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987bbe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987bbd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987bb90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987bbb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56237987bcd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987bcb0 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987beb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987be98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987be78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987bef0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987bd40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56237987bf08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987bd78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987bf20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987bdb0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56237987bf38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987be60 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987be48 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987be08 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56237987c1d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56237987c188 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56237987c158 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56237987c100 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56237987c0c0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56237987c070 <col:47, col:56> 'char [48]' lvalue ->c 0x56237986e350
|     |     |   `-CXXMemberCallExpr 0x56237987c050 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56237987c020 <col:47> '<bound member function type>' ->xanno 0x562379863638
|     |     |       `-CXXThisExpr 0x56237987c010 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56237987c0d8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56237987c0a0 <col:60> 'int' lvalue ParmVar 0x562379866588 'i' 'int'
|     `-ImplicitCastExpr 0x56237987c1c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56237987c1a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x562379866600 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5623798668d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5623798667e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56237987c8c8 <col:36, line:541:5>
|   |-ParenExpr 0x56237987c668 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987c638 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987c390 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987c360 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987c270 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987c258 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987c218 <col:23> 'int' lvalue ParmVar 0x5623798667e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987c238 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987c340 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987c328 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987c290 <col:33> 'int' lvalue ParmVar 0x5623798667e0 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987c308 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987c2f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987c2b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987c2d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56237987c3f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987c3d0 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987c598 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987c580 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987c560 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987c5d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987c460 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56237987c5f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987c498 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987c608 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987c4d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56237987c620 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987c548 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987c530 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987c4f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56237987c8b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56237987c8a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56237987c888 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56237987c858 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56237987c800 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56237987c7d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56237987c780 <col:61, col:70> 'char const[48]' lvalue ->c 0x56237986e350
|             |   `-CXXMemberCallExpr 0x56237987c760 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56237987c730 <col:61> '<bound member function type>' ->xanno 0x562379863498
|             |       `-CXXThisExpr 0x56237987c720 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56237987c7e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56237987c7b0 <col:74> 'int' lvalue ParmVar 0x5623798667e0 'i' 'int'
|-CXXMethodDecl 0x562379866aa8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x562379866998 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x562379866a10 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562379866b58 <col:20>
| `-OptimizeNoneAttr 0x562379866bb0 <col:30>
|-CXXMethodDecl 0x562379866ce8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x562379866bf0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56237987cf98 <col:35, line:562:5>
|   |-ParenExpr 0x56237987cd38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987cd08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987ca60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987ca30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987c940 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987c928 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987c8e8 <col:23> 'int' lvalue ParmVar 0x562379866bf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987c908 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987ca10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987c9f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987c960 <col:33> 'int' lvalue ParmVar 0x562379866bf0 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987c9d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987c9c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987c980 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987c9a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56237987cac0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987caa0 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987cc68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987cc50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987cc30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987cca8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987cb30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56237987ccc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987cb68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987ccd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987cba0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56237987ccf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987cc18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987cc00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987cbc0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56237987cf88 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56237987cf70 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56237987cf58 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56237987cf28 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56237987ced0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56237987cea0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56237987ce50 <col:60, col:69> 'char const[48]' lvalue ->c 0x56237986e350
|             |   `-CXXMemberCallExpr 0x56237987ce30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56237987ce00 <col:60> '<bound member function type>' ->xanno 0x562379863498
|             |       `-CXXThisExpr 0x56237987cdf0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56237987ceb8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56237987ce80 <col:73> 'int' lvalue ParmVar 0x562379866bf0 'i' 'int'
|-CXXMethodDecl 0x562379866ef8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x562379866da8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562379866e20 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56237987d678 <col:41, line:577:5>
|   |-ParenExpr 0x56237987d408 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987d3d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987d130 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987d100 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987d010 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987cff8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987cfb8 <col:23> 'int' lvalue ParmVar 0x562379866da8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987cfd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987d0e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987d0c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987d030 <col:33> 'int' lvalue ParmVar 0x562379866da8 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987d0a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987d090 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987d050 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987d070 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56237987d190 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987d170 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987d338 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987d320 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987d300 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987d378 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987d200 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56237987d390 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987d238 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987d3a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987d270 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56237987d3c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987d2e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987d2d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987d290 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56237987d658 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56237987d608 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56237987d5d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56237987d578 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56237987d548 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56237987d4f8 <col:47, col:56> 'char [48]' lvalue ->c 0x56237986e350
|     |     |   `-CXXMemberCallExpr 0x56237987d4d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56237987d4a8 <col:47> '<bound member function type>' ->xanno 0x562379863638
|     |     |       `-CXXThisExpr 0x56237987d498 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56237987d560 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56237987d528 <col:60> 'int' lvalue ParmVar 0x562379866da8 'i' 'int'
|     `-ImplicitCastExpr 0x56237987d640 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56237987d620 <col:65> 'int32_t':'int' lvalue ParmVar 0x562379866e20 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5623798670b8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x562379866fc0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56237987dda8 <col:36, line:591:5>
|   |-ParenExpr 0x56237987dae8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987dab8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987d810 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987d7e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987d6f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987d6d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987d698 <col:23> 'int' lvalue ParmVar 0x562379866fc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987d6b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987d7c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987d7a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987d710 <col:33> 'int' lvalue ParmVar 0x562379866fc0 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987d788 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987d770 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987d730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987d750 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56237987d870 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987d850 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987da18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987da00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987d9e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987da58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987d8e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56237987da70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987d918 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987da88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987d950 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56237987daa0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987d9c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987d9b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987d970 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56237987dd98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56237987dd80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56237987dd68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56237987dd38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56237987dcb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56237987dc80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56237987dc30 <col:61, col:70> 'char const[48]' lvalue ->c 0x56237986e350
|             |   `-CXXMemberCallExpr 0x56237987dc10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56237987dbe0 <col:61> '<bound member function type>' ->xanno 0x562379863498
|             |       `-CXXThisExpr 0x56237987dbd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56237987dc98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56237987dc60 <col:74> 'int' lvalue ParmVar 0x562379866fc0 'i' 'int'
|-CXXMethodDecl 0x562379867308 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x562379867178 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5623798671f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56237987e488 <col:42, line:606:5>
|   |-ParenExpr 0x56237987e218 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56237987e1e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56237987df40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987df10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987de20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987de08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987ddc8 <col:23> 'int' lvalue ParmVar 0x562379867178 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987dde8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987def0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56237987ded8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987de40 <col:33> 'int' lvalue ParmVar 0x562379867178 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987deb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987dea0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987de60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56237987de80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56237987dfa0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987df80 <col:60> 'int' 0
|   |   `-CallExpr 0x56237987e148 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56237987e130 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987e110 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987e188 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987e010 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56237987e1a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987e048 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987e1b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987e080 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56237987e1d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987e0f8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987e0e0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987e0a0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56237987e468 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56237987e418 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56237987e3e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56237987e388 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56237987e358 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56237987e308 <col:48, col:57> 'char [48]' lvalue ->c 0x56237986e350
|     |     |   `-CXXMemberCallExpr 0x56237987e2e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56237987e2b8 <col:48> '<bound member function type>' ->xanno 0x562379863638
|     |     |       `-CXXThisExpr 0x56237987e2a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56237987e370 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56237987e338 <col:61> 'int' lvalue ParmVar 0x562379867178 'i' 'int'
|     `-ImplicitCastExpr 0x56237987e450 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56237987e430 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5623798671f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5623798674a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5623798673d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56237987ecf8 <col:33, line:620:5>
|   |-ParenExpr 0x56237987ea70 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56237987ea40 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56237987e690 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987e660 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987e500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987e4e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987e4a8 <col:23> 'int' lvalue ParmVar 0x5623798673d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987e4c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987e640 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56237987e628 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987e520 <col:33> 'int' lvalue ParmVar 0x5623798673d0 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987e608 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987e5f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987e540 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56237987e5c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56237987e5b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56237987e578 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56237987e6f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987e6d0 <col:79> 'int' 0
|   |   `-CallExpr 0x56237987e9a0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56237987e988 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987e968 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987e9e0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987e7d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56237987e9f8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987e820 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987ea10 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987e858 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56237987ea28 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987e950 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987e938 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987e8f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56237987ece8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56237987ecd0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56237987ecb8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56237987ec88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56237987ec00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56237987ebd0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56237987eb80 <col:67, col:76> 'char const[48]' lvalue ->c 0x56237986e350
|             |   `-CXXMemberCallExpr 0x56237987eb60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56237987eb30 <col:67> '<bound member function type>' ->xanno 0x562379863498
|             |       `-CXXThisExpr 0x56237987eb20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56237987ebe8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56237987ebb0 <col:80> 'int' lvalue ParmVar 0x5623798673d0 'i' 'int'
|-CXXMethodDecl 0x5623798676b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x562379867560 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5623798675e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56237987f520 <col:45, line:635:5>
|   |-ParenExpr 0x56237987f268 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56237987f238 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56237987ef00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56237987eed0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56237987ed70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56237987ed58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56237987ed18 <col:23> 'int' lvalue ParmVar 0x562379867560 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56237987ed38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56237987eeb0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56237987ee98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56237987ed90 <col:33> 'int' lvalue ParmVar 0x562379867560 'i' 'int'
|   |   |     `-BinaryOperator 0x56237987ee78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56237987ee60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56237987edb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562379863880 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56237987ee38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56237987ee20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56237987ede8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56237987ef60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56237987ef40 <col:79> 'int' 0
|   |   `-CallExpr 0x56237987f198 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56237987f180 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56237987f160 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5623793cffa0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56237987f1d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987efd0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56237987f1f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56237987f018 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56237987f208 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56237987f050 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56237987f220 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56237987f148 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56237987f130 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56237987f0e8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56237987f500 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56237987f468 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56237987f438 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56237987f3d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56237987f3a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56237987f358 <col:54, col:63> 'char [48]' lvalue ->c 0x56237986e350
|     |     |   `-CXXMemberCallExpr 0x56237987f338 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56237987f308 <col:54> '<bound member function type>' ->xanno 0x562379863638
|     |     |       `-CXXThisExpr 0x56237987f2f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56237987f3c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56237987f388 <col:67> 'int' lvalue ParmVar 0x562379867560 'i' 'int'
|     `-CXXConstCastExpr 0x56237987f4d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56237987f4b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56237987f480 <col:91> 'const void *' lvalue ParmVar 0x5623798675e0 'x' 'const void *'
|-CXXMethodDecl 0x562379867788 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56237987f5a8 <col:34, line:640:5>
|   `-ReturnStmt 0x56237987f598 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56237987f580 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56237987f550 <col:16> 'Packet *' lvalue ->_data_packet 0x56237986ef08
|         `-CXXThisExpr 0x56237987f540 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5623798678c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x562379867838 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562379878668 <col:46> 'bool' true
|-CXXMethodDecl 0x562379867a48 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x562379867980 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x562379867af0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5623798682a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x562379867bf0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562379868310 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867bd0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x562379867bb0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56237985cd50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562379867c80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562379868328 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867c60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x562379867c40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56237985cde0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562379867d10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562379868340 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867cf0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x562379867cd0 <col:21> 'int' 0
| |-EnumConstantDecl 0x562379867da0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562379868358 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867d80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x562379867d60 <col:19> 'int' 16
| |-EnumConstantDecl 0x562379867e30 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562379868370 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867e10 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x562379867df0 <col:21> 'int' 16
| |-EnumConstantDecl 0x562379867ec0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562379868388 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867ea0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562379867e80 <col:19> 'int' 32
| |-EnumConstantDecl 0x562379867f50 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5623798683a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867f30 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x562379867f10 <col:19> 'int' EnumConstant 0x562379867da0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562379867fe0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5623798683b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379867fc0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x562379867fa0 <col:19> 'int' EnumConstant 0x562379867ec0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5623798680b0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5623798683d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379868090 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x562379868070 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562379868030 <col:23> 'int' EnumConstant 0x562379867fe0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562379868050 <col:40> 'int' 2
| |-EnumConstantDecl 0x562379868180 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5623798683e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379868160 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x562379868140 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562379868100 <col:23> 'int' EnumConstant 0x562379867fe0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562379868120 <col:40> 'int' 4
| `-EnumConstantDecl 0x562379868250 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x562379868400 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562379868230 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x562379868210 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5623798681d0 <col:23> 'int' EnumConstant 0x562379867fe0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5623798681f0 <col:40> 'int' 8
|-CXXMethodDecl 0x562379868440 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5623798684e0 <col:68> "" ""
|-CXXMethodDecl 0x562379868578 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x562379868618 <col:45> "" ""
|-CXXMethodDecl 0x5623798686b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562379868750 <col:57> "" ""
|-CXXMethodDecl 0x5623798687e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x562379868888 <col:45> "" ""
|-CXXMethodDecl 0x562379868920 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5623798689c0 <col:57> "" ""
|-CXXMethodDecl 0x562379868a50 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x562379868af0 <col:51> "" ""
|-CXXMethodDecl 0x562379868b80 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562379868c20 <col:63> "" ""
|-CXXMethodDecl 0x562379868cb0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x562379868d50 <col:53> "" ""
|-CXXMethodDecl 0x562379868de0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562379868e80 <col:65> "" ""
|-CXXMethodDecl 0x562379868f98 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562379868f08 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x562379869040 <col:61> "" ""
|-CXXMethodDecl 0x5623798691d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5623798690c8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x562379869140 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562379869288 <col:67> "" ""
|-CXXMethodDecl 0x5623798693a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562379869310 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562379869448 <col:63> "" ""
|-CXXMethodDecl 0x5623798695e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5623798694d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562379869548 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562379869690 <col:69> "" ""
|-CXXMethodDecl 0x5623798697a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562379869718 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562379869850 <col:63> "" ""
|-CXXMethodDecl 0x56237986bf28 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56237986be18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56237986be90 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56237986bfd8 <col:69> "" ""
|-CXXMethodDecl 0x56237986c0f0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56237986c060 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56237986c198 <col:62> "" ""
|-CXXMethodDecl 0x56237986c330 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56237986c220 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56237986c298 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56237986c3e0 <col:68> "" ""
|-CXXMethodDecl 0x56237986c4f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56237986c468 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56237986c5a0 <col:63> "" ""
|-CXXMethodDecl 0x56237986c738 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56237986c628 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56237986c6a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56237986c7e8 <col:69> "" ""
|-CXXMethodDecl 0x56237986c878 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56237986c918 <col:64> "" ""
|-CXXMethodDecl 0x56237986c9a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56237986ca48 <col:52> "" ""
|-CXXMethodDecl 0x56237986cad8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56237986cb78 <col:67> "" ""
|-CXXMethodDecl 0x56237986cc08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56237986cca8 <col:55> "" ""
|-CXXMethodDecl 0x56237986cdc0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56237986cd30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56237986ce68 <col:58> "" ""
|-CXXMethodDecl 0x56237986d000 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56237986cef0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56237986cf68 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56237986d0b0 <col:62> "" ""
|-CXXMethodDecl 0x56237986d1c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56237986d138 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56237986d270 <col:58> "" ""
|-CXXMethodDecl 0x56237986d408 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56237986d2f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56237986d370 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56237986d4b8 <col:62> "" ""
|-CXXMethodDecl 0x56237986d5d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56237986d540 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56237986d678 <col:60> "" ""
|-CXXMethodDecl 0x56237986d810 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56237986d700 <col:34> col:37 'int'
| |-ParmVarDecl 0x56237986d778 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56237986d8c0 <col:64> "" ""
|-CXXMethodDecl 0x56237986d9d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56237986d948 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56237986da80 <col:58> "" ""
|-CXXMethodDecl 0x56237986dc18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56237986db08 <col:33> col:36 'int'
| |-ParmVarDecl 0x56237986db80 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56237986dcc8 <col:62> "" ""
|-CXXMethodDecl 0x56237986dde0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56237986dd50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56237986de88 <col:59> "" ""
|-CXXMethodDecl 0x56237986e020 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56237986df10 <col:33> col:36 'int'
| |-ParmVarDecl 0x56237986df88 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56237986e0d0 <col:63> "" ""
|-AccessSpecDecl 0x56237986e140 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56237986e168 prev 0x562379863370 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56237986e260 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56237986e350 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56237986e478 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56237986e5f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56237986e778 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56237986e8f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56237987f728 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56237987ff98 <col:11>
| |-CXXDestructorDecl 0x56237987f800 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56237987f938 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56237987f938
| | `-ParmVarDecl 0x56237987fa48 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56237987fae8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56237987fae8
| | `-ParmVarDecl 0x56237987fbf8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5623798829b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562379882ac8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x562379882d48 <col:11>
| |   `-ReturnStmt 0x562379882d38 <col:11>
| |     `-UnaryOperator 0x562379882d20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562379882d10 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x562379882b38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562379882b38
|   `-ParmVarDecl 0x562379882c48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56237986e960 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56237986ea78 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56237986eb18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56237986eb80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56237986ebe8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56237986ec50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56237986ecb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56237986ed70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56237986edd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56237986ee30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56237987f638 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56237986eb18 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56237987ffa8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x562379880000 <col:12>
| |-CXXConstructorDecl 0x56237987fc68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56237987fc68
| | `-ParmVarDecl 0x56237987fd78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56237987fe18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56237987fe18
| | `-ParmVarDecl 0x56237987ff28 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5623798820a0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56237986eea8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56237986ef08 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56237986ef70 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56237986efd8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56237986f040 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56237986f0a8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56237986f108 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56237986f168 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56237986f1d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56237986f258 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56237986eea8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56237987f5d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56237986f108 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x562379880010 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x562379880070 <col:21, line:755:5>
|-CXXConstructorDecl 0x56237986f3f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56237986f338 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56237986f4f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56237986f6d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56237986f5e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56237986f9a8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56237986f790 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56237986f808 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56237986f880 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56237986fbc8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56237986fa78 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56237986faf0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5623798781a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56237986fc88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56237986fd00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56237986fd78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x562379878300 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562379878270 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562379878448 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5623798783b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x562379878540 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562379951160 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562379951278 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x562379951308 <col:16, col:22> col:16 public
|-EnumDecl 0x562379951330 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x562379951430 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562379951680 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379951410 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5623799513f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5623799514c0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562379951698 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623799514a0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x562379951480 <col:24> 'int' 22
| |-EnumConstantDecl 0x562379951550 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5623799516b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562379951530 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x562379951510 <col:24> 'int' 34
| |-EnumConstantDecl 0x5623799515e0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5623799516c8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5623799515c0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5623799515a0 <col:25> 'int' 95
| `-EnumConstantDecl 0x562379951630 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x562379953040 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562379953478 <col:7>
|-CXXConstructorDecl 0x562379953148 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x562379953148
| `-ParmVarDecl 0x562379953258 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5623799532f8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562379953408 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5623799b1380 <col:7>
`-CXXDestructorDecl 0x562379955588 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5623799516f8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x562379951858 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5623799518e8 <col:32, col:38> col:32 public
|-TypedefDecl 0x562379951920 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5623794894a0 'uint32_t' sugar
|   |-Typedef 0x56237939d408 'uint32_t'
|   `-TypedefType 0x562379376440 '__uint32_t' sugar
|     |-Typedef 0x562379376038 '__uint32_t'
|     `-BuiltinType 0x562379334410 'unsigned int'
|-CXXConstructorDecl 0x562379951a68 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x562379951990 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x562379952f48 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x562379953488 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x562379952800 'base' 'int'
| | `-ImplicitCastExpr 0x562379952fe8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x562379952fa8 <col:16> 'int' lvalue ParmVar 0x562379951990 'b' 'int'
| `-CompoundStmt 0x5623799534f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x562379951f60 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x562379951b30 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x562379951bb0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x562379951c28 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x562379951ca8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x562379951d68 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x562379951de8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5623799523b8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x562379952030 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x562379952318 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5623799520d8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x562379952178 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5623799521f0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x562379952f68 <col:82> 'const ArgContext' lvalue Var 0x562379945f98 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x562379954438 <col:94, line:1067:5>
| |   |-DeclStmt 0x562379953688 <line:1054:9, col:64>
| |   | `-VarDecl 0x562379953518 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x562379953640 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5623799538a8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5623799536b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x562379953880 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x562379953860 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x562379953810 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5623799537f0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x562379953798 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x562379953748 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x562379953778 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5623799537d8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5623799537b8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x562379953840 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x562379953a08 <line:1056:9, col:27>
| |   | `-VarDecl 0x5623799539a0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x562379953e50 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x562379953d80 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x562379953d00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562379853688 0x56237969cc68 0x56237969c940 0x56237968e120 0x56237968ddd0 0x56237968d6c0 0x562379660030 0x5623795ec2d0
| |   | | |-CallExpr 0x562379953c40 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x562379953a30 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x562379953ae0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x562379953ab0 <col:19, col:23> '<bound member function type>' .begin 0x56237967d328
| |   | | | |   `-DeclRefExpr 0x562379953a90 <col:19> 'const String' lvalue ParmVar 0x5623799520d8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x562379953b50 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x562379953b20 <col:32, col:36> '<bound member function type>' .end 0x56237967d540
| |   | | | |   `-DeclRefExpr 0x562379953b00 <col:32> 'const String' lvalue ParmVar 0x5623799520d8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x562379953b70 <col:43> 'const bool' lvalue Var 0x562379953518 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x562379953bd8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x562379953bb8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x562379953c00 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5623799539a0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x562379953c20 <col:73> 'const int' lvalue Var 0x5623799536b8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x562379953ce0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x562379953cb0 <col:16, col:20> '<bound member function type>' .end 0x56237967d540
| |   | |     `-DeclRefExpr 0x562379953c90 <col:16> 'const String' lvalue ParmVar 0x5623799520d8 'str' 'const String &'
| |   | `-BinaryOperator 0x562379953e30 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x562379953dc8 <col:13> 'int' lvalue ->status 0x562379952868
| |   |   | `-CXXThisExpr 0x562379953db8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x562379953e18 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x562379953df8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5623799514c0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5623799540b8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x562379953fa0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x562379953f88 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x562379953f70 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x562379953e78 <col:13> 'int' lvalue ->status 0x562379952868
| |   | | |     `-CXXThisExpr 0x562379953e68 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x562379953f50 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x562379953f20 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x562379953ed0 <col:23> 'int' lvalue ->status 0x562379952868
| |   | |   |   `-CXXThisExpr 0x562379953ea8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x562379953f38 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x562379953f00 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562379951550 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x562379954098 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x562379954038 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x562379953fe0 <col:13, col:18> '<bound member function type>' .error 0x562379816f50
| |   |   | | `-DeclRefExpr 0x562379953fc0 <col:13> 'const ArgContext' lvalue ParmVar 0x5623799521f0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x562379954060 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x562379954010 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x562379954088 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x562379954078 <col:20> 'bool' false
| |   |-DeclStmt 0x562379954288 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x562379954230 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5623799541c0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5623799543e8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5623799542a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x562379620298
| |   | |-DeclRefExpr 0x5623799542e8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5623799539a0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5623799543b8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x562379954330 <col:64> 'V' lvalue ParmVar 0x562379952178 'result' 'V &'
| |   `-ReturnStmt 0x562379954428 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x562379954418 <col:16> 'bool' true
| `-CXXMethodDecl 0x5623799b7798 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5623799b7570 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5623799b7648 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5623799b76b0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5623799b9530 <col:94, line:1067:5>
|     |-DeclStmt 0x5623799b7fa8 <line:1054:9, col:64>
|     | `-VarDecl 0x5623799b7dc8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5623799b7f38 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5623799b7f08 <col:36, col:55> 'const bool' lvalue Var 0x56237960f4b0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5623799b8188 <line:1055:9, col:91>
|     | `-VarDecl 0x5623799b7fc0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5623799b8108 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5623799b80f0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5623799b80d0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5623799b80b0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5623799b8090 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5623799b8058 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5623799b8038 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x562379953778 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5623799b8078 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5623799537b8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x562379953840 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5623799b8320 <line:1056:9, col:27>
|     | `-VarDecl 0x5623799b82b8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5623799b87a8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5623799b8750 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5623799b8608 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5623799b85d8 <col:13> '<bound member function type>' ->parse 0x562379951f60
|     | | | | `-CXXThisExpr 0x5623799b85c8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5623799b8468 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5623799b8438 <col:19, col:23> '<bound member function type>' .begin 0x56237967d328
|     | | | |   `-DeclRefExpr 0x5623799b8418 <col:19> 'const String' lvalue ParmVar 0x5623799b7570 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5623799b84d8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5623799b84a8 <col:32, col:36> '<bound member function type>' .end 0x56237967d540
|     | | | |   `-DeclRefExpr 0x5623799b8488 <col:32> 'const String' lvalue ParmVar 0x5623799b7570 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5623799b8678 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5623799b8658 <col:43> 'const bool' lvalue Var 0x5623799b7dc8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5623799b8560 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5623799b8548 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5623799b8528 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5623799b8690 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5623799b8588 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5623799b82b8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5623799b86c8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5623799b86a8 <col:73> 'const int' lvalue Var 0x5623799b7fc0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5623799b8730 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5623799b8700 <col:16, col:20> '<bound member function type>' .end 0x56237967d540
|     | |     `-DeclRefExpr 0x5623799b86e0 <col:16> 'const String' lvalue ParmVar 0x5623799b7570 'str' 'const String &'
|     | `-BinaryOperator 0x5623799b8788 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x562379953dc8 <col:13> 'int' lvalue ->status 0x562379952868
|     |   | `-CXXThisExpr 0x562379953db8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5623799b8770 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x562379953df8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5623799514c0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5623799b8920 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5623799b8840 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5623799b8828 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5623799b8810 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x562379953e78 <col:13> 'int' lvalue ->status 0x562379952868
|     | | |     `-CXXThisExpr 0x562379953e68 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5623799b87f0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5623799b87c0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x562379953ed0 <col:23> 'int' lvalue ->status 0x562379952868
|     | |   |   `-CXXThisExpr 0x562379953ea8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5623799b87d8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x562379953f00 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562379951550 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5623799b8900 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5623799b88b0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5623799b8880 <col:13, col:18> '<bound member function type>' .error 0x562379816f50
|     |   | | `-DeclRefExpr 0x5623799b8860 <col:13> 'const ArgContext' lvalue ParmVar 0x5623799b76b0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5623799b88d8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x562379954010 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5623799b88f0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x562379954078 <col:20> 'bool' false
|     |-DeclStmt 0x5623799b8e68 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5623799b8e10 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5623799b8dc0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5623799b8da0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5623799b8d30 'type'
|     |       `-ElaboratedType 0x5623799b8ce0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5623799b8cc0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x56237960f608 'unsigned_type'
|     |           `-BuiltinType 0x562379334410 'unsigned int'
|     |-CallExpr 0x5623799b94c0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5623799b94a8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5623799b9428 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5623799b9308 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x562379620298 'extract_integer')
|     | |-ImplicitCastExpr 0x5623799b9508 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5623799b94f0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5623799b8ec8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5623799b82b8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5623799b8f98 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5623799b8f48 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5623799b7648 'result' 'unsigned int &'
|     `-ReturnStmt 0x5623799b9520 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x562379954418 <col:16> 'bool' true
|-FunctionTemplateDecl 0x562379952778 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x562379952428 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5623799526d8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5623799524d8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x562379952578 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5623799525f0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x562379952f88 <col:71> 'const ArgContext' lvalue Var 0x562379945f98 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x562379954ba8 <col:83, line:1083:5>
| |   |-DeclStmt 0x562379954500 <line:1071:9, col:12>
| |   | `-VarDecl 0x562379954498 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x562379954b80 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x562379954790 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x562379954618 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5623799545e0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x562379954528 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x562379954580 <col:31> 'const String' lvalue ParmVar 0x5623799524d8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5623799545a0 <col:36> 'V' lvalue Var 0x562379954498 'x' 'V'
| |     | |   `-DeclRefExpr 0x5623799545c0 <col:39> 'const ArgContext' lvalue ParmVar 0x5623799525f0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x562379954770 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x562379954750 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x562379954738 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x562379954720 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x562379954640 <col:17> 'int' lvalue ->status 0x562379952868
| |     |     |     `-CXXThisExpr 0x562379954630 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x562379954700 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5623799546d0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x562379954680 <col:27> 'int' lvalue ->status 0x562379952868
| |     |       |   `-CXXThisExpr 0x562379954670 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5623799546e8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5623799546b0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562379951550 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5623799547c0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5623799547b0 <col:20> 'bool' false
| |     `-IfStmt 0x562379954b58 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x562379954860 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x562379954830 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5623799547e0 <col:18> 'int' lvalue ->status 0x562379952868
| |       | |   `-CXXThisExpr 0x5623799547d0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x562379954848 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x562379954810 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562379951550 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x562379954a98 <col:42, line:1079:9>
| |       | |-CallExpr 0x562379954a40 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x562379954890 <line:1076:13> '<bound member function type>' ->range_error 0x562379952e78
| |       | | | `-CXXThisExpr 0x562379954880 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5623799548c0 <col:25> 'const ArgContext' lvalue ParmVar 0x5623799525f0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5623799549a0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x562379954a18 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5623799549f8 <col:43> 'V' lvalue Var 0x562379954498 'x' 'V'
| |       | `-ReturnStmt 0x562379954a88 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x562379954a78 <col:20> 'bool' false
| |       `-CompoundStmt 0x562379954b38 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x562379954af8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x562379954ab8 <col:13> 'V' lvalue ParmVar 0x562379952578 'result' 'V &'
| |         | `-DeclRefExpr 0x562379954ad8 <col:22> 'V' lvalue Var 0x562379954498 'x' 'V'
| |         `-ReturnStmt 0x562379954b28 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x562379954b18 <col:20> 'bool' true
| `-CXXMethodDecl 0x5623799b7158 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5623799b4680 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5623799b7010 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5623799b7078 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5623799b7da8 <col:83, line:1083:5>
|     |-DeclStmt 0x5623799b73e0 <line:1071:9, col:12>
|     | `-VarDecl 0x5623799b7378 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5623799b7d80 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5623799b7a10 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5623799b7938 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5623799b7900 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5623799b78b8 <col:14> '<bound member function type>' ->parse_saturating 0x5623799b7798
|       | |   | `-CXXThisExpr 0x5623799b78a8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5623799b7450 <col:31> 'const String' lvalue ParmVar 0x5623799b4680 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5623799b7470 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5623799b7378 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5623799b7490 <col:39> 'const ArgContext' lvalue ParmVar 0x5623799b7078 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5623799b79f0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5623799b79d0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5623799b79b8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5623799b79a0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x562379954640 <col:17> 'int' lvalue ->status 0x562379952868
|       |     |     `-CXXThisExpr 0x562379954630 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5623799b7980 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5623799b7950 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x562379954680 <col:27> 'int' lvalue ->status 0x562379952868
|       |       |   `-CXXThisExpr 0x562379954670 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5623799b7968 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5623799546b0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562379951550 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5623799b7a30 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5623799547b0 <col:20> 'bool' false
|       `-IfStmt 0x5623799b7d58 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5623799b7a70 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5623799b7a40 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5623799547e0 <col:18> 'int' lvalue ->status 0x562379952868
|         | |   `-CXXThisExpr 0x5623799547d0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5623799b7a58 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x562379954810 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562379951550 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5623799b7c90 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5623799b7c00 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x562379954890 <line:1076:13> '<bound member function type>' ->range_error 0x562379952e78
|         | | | `-CXXThisExpr 0x562379954880 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5623799b7a90 <col:25> 'const ArgContext' lvalue ParmVar 0x5623799b7078 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5623799b7c68 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5623799b7c38 <col:31, col:50> 'const bool' lvalue Var 0x56237960f4b0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5623799b7bd8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5623799b7bc0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5623799b7ba8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5623799b7b88 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5623799b7378 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5623799b7c80 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x562379954a78 <col:20> 'bool' false
|         `-CompoundStmt 0x5623799b7d38 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5623799b7d08 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5623799b7cb0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5623799b7010 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5623799b7cf0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5623799b7cd0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5623799b7378 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5623799b7d28 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x562379954b18 <col:20> 'bool' true
|-FieldDecl 0x562379952800 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x562379952868 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5623799528b8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x562379952b70 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5623799528f8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x562379952978 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5623799529f0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x562379952a70 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x562379952e78 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x562379952c40 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x562379952cb8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x562379952d50 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x562379955408 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x562379955408
| `-ParmVarDecl 0x562379955518 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x562379955698 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5623799557a8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5623799b1390 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5623799b1360 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5623799b1330 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5623799b1300 <col:7> 'IntArg' lvalue ParmVar 0x5623799557a8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x562379952800 'base' 'int'
| | `-ImplicitCastExpr 0x5623799b1488 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5623799b1458 <col:7> 'int' xvalue .base 0x562379952800
| |     `-CXXStaticCastExpr 0x5623799b1428 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5623799b13f8 <col:7> 'IntArg' lvalue ParmVar 0x5623799557a8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x562379952868 'status' 'int'
| | `-ImplicitCastExpr 0x5623799b1558 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5623799b1528 <col:7> 'int' xvalue .status 0x562379952868
| |     `-CXXStaticCastExpr 0x5623799b14f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5623799b14c8 <col:7> 'IntArg' lvalue ParmVar 0x5623799557a8 '' 'IntArg &&'
| `-CompoundStmt 0x5623799b15b0 <col:7>
`-CXXDestructorDecl 0x5623799b04f0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5623799599a0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x562379959bf8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5623799b0418 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5623799b0990 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5623799b0970 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5623799b0a00 <col:19>
|-CXXConstructorDecl 0x5623799b05f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5623799b05f8
| `-ParmVarDecl 0x5623799b0708 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5623799b07a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5623799b08b8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5623799b15c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5623799b12e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5623799b12b0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5623799b1280 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5623799b08b8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5623799b1630 <col:19>
`-CXXDestructorDecl 0x5623799b0a40 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
