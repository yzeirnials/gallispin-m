
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b8745188 prev 0x5624b873c928 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b8745280 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5624b8745310 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5624b8745388 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5624b8745448 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5624b8745510 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5624b8745688 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5624b87455c0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5624b8745730 <col:24>
| `-OptimizeNoneAttr 0x5624b8745788 <col:34>
|-CXXMethodDecl 0x5624b87457d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5624b8745a88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5624b8745880 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5624b87458f8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5624b8745978 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5624b8745b40 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5624b8745b78 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5624b8745be0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5624b8745c68 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5624b8745f88 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5624b8745d20 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5624b8745d98 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5624b8745e10 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5624b8745e90 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5624b87460a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5624b874da18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5624b874da18
| `-ParmVarDecl 0x5624b874db28 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5624b874dbc8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5624b874dbc8
| `-ParmVarDecl 0x5624b874dcd8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5624b885f3d0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87381a0 prev 0x5624b8737f20 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5624b8738298 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5624b8738328 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5624b8738388 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5624b8738478 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5624b8738578 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5624b8738748 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5624b87385f8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5624b8738670 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5624b87388d8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5624b8738810 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5624b8738980 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5624b8738ab8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5624b87389f0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5624b8738c58 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5624b8738b98 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5624b8738df8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5624b8738d38 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5624b8738ea0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5624b8738fa0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5624b8739080 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8738f80 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5624b8738f60 <col:26> 'int' 1
| `-EnumConstantDecl 0x5624b8739030 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5624b8739098 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b8739010 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5624b8738ff0 <col:44> 'int' 2
|-CXXMethodDecl 0x5624b87391e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5624b87390c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5624b8739148 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5624b8739338 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5624b87392a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5624b8739578 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5624b87393f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5624b8739470 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5624b8739628 <col:20>
| `-OptimizeNoneAttr 0x5624b8739680 <col:30>
|-CXXMethodDecl 0x5624b8739788 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5624b87396c0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5624b8739830 <col:20>
| `-OptimizeNoneAttr 0x5624b8739888 <col:30>
|-CXXMethodDecl 0x5624b87398d8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5624b87399a0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5624b8739ab8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5624b8739b40 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5624b8739bc8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5624b8739c50 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5624b8739cd8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5624b8739d68 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5624b8739e28 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5624b8739eb0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5624b8739f38 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5624b8739fc0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5624b873a048 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5624b873a0d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5624b873a160 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5624b873a220 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5624b873a2b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5624b873a400 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5624b873a368 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5624b873a590 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5624b873a4c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5624b873a840 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5624b873a648 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5624b873a6c8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5624b873a748 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5624b873a8f8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5624b873aa00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5624b873ac90 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b873a9e0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b873a9c0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5624b873aa90 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5624b873aca8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b873aa70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5624b873aa50 <col:32> 'int' 20
| |-EnumConstantDecl 0x5624b873ab20 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5624b873acc0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b873ab00 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5624b873aae0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5624b873abb0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5624b873acd8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b873ab90 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5624b873ab70 <col:35> 'int' 100
| `-EnumConstantDecl 0x5624b873ac40 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5624b873acf0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b873ac20 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5624b873ac00 <col:32> 'int' 2000
|-CXXMethodDecl 0x5624b873ad30 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5624b873b170 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5624b873afe0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5624b873b058 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5624b873b240 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5624b873b3c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5624b873b2f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5624b873b5c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5624b873b478 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5624b873b4f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5624b873b6c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5624b873b768 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5624b873b830 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5624b873b8c0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5624b873baf0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b873b8a0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5624b873b880 <col:36> 'int' EnumConstant 0x5624b873b830 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5624b873b910 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5624b873b960 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5624b873b9b0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5624b873ba00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5624b873ba50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5624b873baa0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5624b873bbd8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5624b873bb18 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5624b873bca0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5624b873bd60 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5624b873be20 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5624b873bee0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5624b873bff8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5624b873c0c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5624b873c240 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5624b873c170 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5624b873c368 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5624b873c568 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5624b873c418 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5624b873c498 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5624b8749eb8 <col:54, line:127:5>
|   |-ParenExpr 0x5624b8749d68 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5624b8749d38 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5624b8749a28 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5624b8749a00 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5624b87499e8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5624b87499d0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5624b87499a0 <col:31> 'Router *' lvalue ->_router 0x5624b8747880
|   |   |         `-CXXThisExpr 0x5624b8749990 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5624b8749a88 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b8749a68 <col:48> 'int' 0
|   |   `-CallExpr 0x5624b8749c98 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5624b8749c80 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b8749c60 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b8749cd8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b8749af8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5624b8749cf0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b8749b18 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5624b8749d08 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b8749b50 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5624b8749d20 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b8749c48 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b8749c30 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b8749be8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5624b8749e00 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5624b8749d98 <col:9> 'Router *' lvalue ->_router 0x5624b8747880
|   | | `-CXXThisExpr 0x5624b8749d88 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5624b8749de8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5624b8749dc8 <col:19> 'Router *' lvalue ParmVar 0x5624b873c418 'r' 'Router *'
|   `-BinaryOperator 0x5624b8749e98 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5624b8749e30 <col:9> 'int' lvalue ->_eindex 0x5624b87478e8
|     | `-CXXThisExpr 0x5624b8749e20 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5624b8749e80 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5624b8749e60 <col:19> 'int' lvalue ParmVar 0x5624b873c498 'eindex' 'int'
|-CXXMethodDecl 0x5624b873c6f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5624b873c628 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5624b873c7c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5624b873c888 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5624b873c928 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5624b873cb78 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5624b873c9f0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5624b873ca70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5624b873cc28 <col:20>
| `-OptimizeNoneAttr 0x5624b873cc80 <col:30>
|-CXXMethodDecl 0x5624b873cd88 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5624b873ccc0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5624b873ce30 <col:20>
| `-OptimizeNoneAttr 0x5624b873ce88 <col:30>
|-CXXMethodDecl 0x5624b873cf58 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5624b873cec8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5624b873d000 <col:20>
| `-OptimizeNoneAttr 0x5624b873d058 <col:30>
|-CXXMethodDecl 0x5624b873d1e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5624b873d090 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5624b873d110 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5624b873d378 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5624b873d2b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5624b873d4c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5624b873d438 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5624b873d618 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5624b873d588 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5624b873d768 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5624b873d6d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5624b873da28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5624b873d820 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5624b873d8a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5624b873d948 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5624b873db00 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5624b873dbc0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5624b873de90 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5624b873dd40 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5624b873ddb8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5624b873dfb8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5624b873e190 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5624b873e070 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5624b873e0f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5624b873e378 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5624b873e258 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5624b873e2d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5624b873e6e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5624b873e438 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5624b873e4b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5624b873e530 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5624b87494a0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b8749480 <col:106> 'int' 0
| `-ParmVarDecl 0x5624b873e5a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5624b87494d8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5624b87494b8 <col:126> 'int' 0
|-CXXMethodDecl 0x5624b873ea88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5624b873e7b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5624b873e850 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5624b873e8d0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5624b873e948 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5624b8749510 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5624b87494f0 <col:114> 'int' 0
|-CXXMethodDecl 0x5624b873ee18 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5624b873eb60 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5624b873ebd8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5624b873ec58 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5624b8749528 <col:96> 'int' 0
| `-ParmVarDecl 0x5624b873ecd0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5624b8749568 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5624b8749548 <col:116> 'int' 0
|-CXXMethodDecl 0x5624b873f198 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5624b873eee8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5624b873ef60 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b873efe0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5624b87495a0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b8749580 <col:109> 'int' 0
| `-ParmVarDecl 0x5624b873f058 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5624b87495d8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5624b87495b8 <col:129> 'int' 0
|-CXXMethodDecl 0x5624b873f518 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5624b873f268 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5624b873f2e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b873f360 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5624b873f3d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5624b8749610 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5624b87495f0 <col:117> 'int' 0
|-CXXMethodDecl 0x5624b873f8a8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5624b873f5f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b873f668 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b873f6e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5624b8749628 <col:99> 'int' 0
| `-ParmVarDecl 0x5624b873f760 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5624b8749668 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5624b8749648 <col:119> 'int' 0
|-CXXMethodDecl 0x5624b873fcc8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5624b873f978 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5624b873f9f8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5624b873fa70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b873faf0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5624b87496a0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b8749680 <col:108> 'int' 0
| `-ParmVarDecl 0x5624b873fb70 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5624b87496d8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5624b87496b8 <col:141> 'int' 0
|-CXXMethodDecl 0x5624b87400e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5624b873fda0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5624b873fe20 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5624b873fe98 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b873ff18 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5624b873ff98 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5624b87496f0 <col:121> 'int' 0
|-CXXMethodDecl 0x5624b8740518 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5624b87401c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5624b8740248 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5624b87402c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b8740340 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5624b8749710 <col:98> 'int' 0
| `-ParmVarDecl 0x5624b87403c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5624b8749730 <col:123> 'int' 0
|-CXXMethodDecl 0x5624b87407e0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5624b87405f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5624b8740670 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5624b87406f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5624b8749750 <col:80> 'int' 0
|-EnumDecl 0x5624b8740898 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5624b87409a0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5624b8740c30 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8740980 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5624b8740960 <col:42> 'int' 1
| |-EnumConstantDecl 0x5624b8740a30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5624b8740c48 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8740a10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5624b87409f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5624b8740ac0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5624b8740c60 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8740aa0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5624b8740a80 <col:44> 'int' 4
| |-EnumConstantDecl 0x5624b8740b50 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5624b8740c78 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8740b30 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5624b8740b10 <col:36> 'int' 7
| `-EnumConstantDecl 0x5624b8740be0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5624b8740c90 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b8740bc0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5624b8740ba0 <col:34> 'int' 6
|-CXXMethodDecl 0x5624b8740f48 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5624b8740cb8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5624b8740d58 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5624b8740dd8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5624b8740e50 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5624b8749808 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5624b87497f0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5624b87497d8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5624b87497b8 <col:98, col:105> 'String' (CXXTemporary 0x5624b87497b8)
|           `-CXXTemporaryObjectExpr 0x5624b8749780 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5624b87411e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5624b8741018 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5624b8741090 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5624b8741108 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5624b87498b8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5624b87498a0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5624b8749888 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5624b8749868 <col:94, col:101> 'String' (CXXTemporary 0x5624b8749868)
| |         `-CXXTemporaryObjectExpr 0x5624b8749830 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5624b874a0a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5624b874a018 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5624b8749fe8 <col:9> '<bound member function type>' ->add_task_handlers 0x5624b8740f48
|     | `-CXXThisExpr 0x5624b8749fd8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5624b874a058 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b8749f58 <col:27> 'Task *' lvalue ParmVar 0x5624b8741018 'task' 'Task *'
|     |-ImplicitCastExpr 0x5624b874a070 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b8749f78 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5624b8741090 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5624b874a088 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5624b8749f98 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5624b8740be0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5624b8749fb8 <col:62> 'const String' lvalue ParmVar 0x5624b8741108 'prefix' 'const String &'
|-CXXMethodDecl 0x5624b87413f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5624b87412b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5624b8741328 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5624b8749968 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5624b8749950 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5624b8749938 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5624b8749918 <col:70, col:77> 'String' (CXXTemporary 0x5624b8749918)
| |         `-CXXTemporaryObjectExpr 0x5624b87498e0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5624b874a278 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5624b874a1f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5624b874a1c0 <col:9> '<bound member function type>' ->add_task_handlers 0x5624b8740f48
|     | `-CXXThisExpr 0x5624b874a1b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5624b874a230 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b874a130 <col:27> 'Task *' lvalue ParmVar 0x5624b87412b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5624b874a248 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5624b874a150 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5624b874a260 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5624b874a170 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5624b8740be0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5624b874a190 <col:57> 'const String' lvalue ParmVar 0x5624b8741328 'prefix' 'const String &'
|-CXXMethodDecl 0x5624b87416d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5624b87414c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8741540 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b87415b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5624b8741988 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5624b87417a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8741828 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b87418a8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5624b8741c78 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5624b8741a58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8741ad8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8741b50 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5624b8741f28 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5624b8741d48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8741dc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8741e48 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5624b87421d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5624b8741ff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8742078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b87420f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5624b8742488 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5624b87422a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8742328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b87423a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5624b8742738 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5624b8742558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b87425d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8742658 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5624b8742a48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5624b8742860 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b87428e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8742960 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5624b8742d28 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5624b8742b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8742b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8742c40 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5624b8743008 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5624b8742df8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8742e78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8742f20 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5624b8743270 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5624b87430d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5624b8743158 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5624b87431d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5624b8743518 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5624b8743340 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5624b87433c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5624b8743438 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5624b87437c8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5624b87435e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8743668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b87436e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5624b8743a78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5624b8743898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8743918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8743990 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5624b8743d28 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5624b8743b48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8743bc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8743c40 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5624b8743ff8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5624b8743df8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8743e78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5624b8743f18 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5624b8744328 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5624b87440c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5624b8744148 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5624b87441c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5624b8744238 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5624b8749980 <col:93> 'bool' false
|-CXXMethodDecl 0x5624b8744510 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5624b87443f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5624b8744478 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5624b87446e8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5624b87445d0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5624b8744650 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5624b87449c8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5624b87447a8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5624b8744820 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5624b87448a0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5624b8744918 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5624b8744cb8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5624b8744a98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5624b8744b10 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5624b8744b90 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5624b8744c08 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5624b8744ef0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5624b8744d90 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5624b8744e10 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5624b87450d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5624b8744fb8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5624b8745038 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5624b8745188 prev 0x5624b873c928 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5624b8745280 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5624b8745310 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5624b8745388 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5624b8745448 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5624b8745510 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5624b8745688 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5624b87455c0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5624b8745730 <col:24>
| | `-OptimizeNoneAttr 0x5624b8745788 <col:34>
| |-CXXMethodDecl 0x5624b87457d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5624b8745a88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5624b8745880 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5624b87458f8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5624b8745978 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5624b8745b40 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5624b8745b78 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5624b8745be0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5624b8745c68 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5624b8745f88 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5624b8745d20 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5624b8745d98 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5624b8745e10 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5624b8745e90 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5624b87460a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5624b874da18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5624b874da18
| | `-ParmVarDecl 0x5624b874db28 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5624b874dbc8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5624b874dbc8
| | `-ParmVarDecl 0x5624b874dcd8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5624b885f3d0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5624b8746118 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5624b87461b8 <col:38> "" ""
|-CXXMethodDecl 0x5624b8746248 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5624b87462e8 <col:44> "" ""
|-AccessSpecDecl 0x5624b8746358 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5624b8746380 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5624b8746480 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5624b87464d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b8746460 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5624b8746440 <col:27> 'int' 4
|-FieldDecl 0x5624b8746588 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5624b8746738 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5624b87467f0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5624b8747880 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5624b87478e8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5624b8747a38 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5624b8747978 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5624b8747be8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5624b8747af8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5624b8747dc8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5624b8747ca8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5624b8747d28 <col:25> col:28 'int'
|-CXXMethodDecl 0x5624b8748070 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5624b8747e90 <col:23> col:26 'int'
| |-ParmVarDecl 0x5624b8747f10 <col:28> col:31 'int'
| `-ParmVarDecl 0x5624b8747f88 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5624b8748128 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5624b87481f0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5624b8748240 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5624b8748290 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5624b8748470 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5624b8748320 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5624b8748398 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5624b8748718 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5624b8748538 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5624b87485b8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5624b8748630 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5624b8748938 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5624b87487e8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5624b8748868 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5624b8748c70 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5624b87489f8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5624b8748a78 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5624b8748af0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5624b8748b70 <col:57> col:60 'int'
|-CXXMethodDecl 0x5624b8748e58 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5624b8748d40 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5624b8748dc0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5624b8748fa8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5624b8748f18 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5624b8749328 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5624b8749068 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5624b87490e8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5624b8749160 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5624b87491e0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5624b8749440 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class AverageCounter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class atomic_uint32_t _count
       108 |     uint32_t _val
       112 |   class atomic_uint32_t _byte_count
       112 |     uint32_t _val
       116 |   class atomic_uint32_t _first
       116 |     uint32_t _val
       120 |   class atomic_uint32_t _last
       120 |     uint32_t _val
       124 |   uint32_t _ignore
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b84f6c50 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b84f6d68 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5624b84f6df8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5624b84f6ec8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5624b84f6fb0 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b84f71c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5624b84f7070 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f7378 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5624b84f7280 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5624b84f74c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5624b84f7430 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5624b84f7608 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5624b84f7578 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f7750 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5624b84f76c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f7818 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5624b84f7960 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5624b84f78d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5624b84f7a28 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5624b84f7b70 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5624b84f7ae0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5624b84f7ce8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5624b84f7c28 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f7e30 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5624b84f7da0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f7ef8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5624b84f80b8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5624b84f7fa8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5624b84f8020 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f8308 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5624b84f8178 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5624b84f81f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b84f83b8 <col:86> "" ""
|-CXXMethodDecl 0x5624b84f8628 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5624b84f8498 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5624b84f8510 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f87d8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5624b84f86e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5624b84f8988 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5624b84f8890 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5624b84f8c58 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5624b84f8a40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5624b84f8ab8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5624b84f8b30 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84f8f38 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5624b84f8d20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5624b84f8d98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5624b84f8e10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b84f8ff0 <col:115> "" ""
|-AccessSpecDecl 0x5624b84f9060 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5624b84f9098 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b84fa5b0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5624b84fa5b0
| `-ParmVarDecl 0x5624b84fa6b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5624b84fa758 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5624b84fa758
| `-ParmVarDecl 0x5624b84fa868 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5624b852fe98 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5624b8721c90 <col:7>
|-CXXConstructorDecl 0x5624b852ff70 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5624b852ff70
| `-ParmVarDecl 0x5624b8530088 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5624b85300f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5624b85300f8
| `-ParmVarDecl 0x5624b8530208 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5624b8724690 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87c0018 <../elements/standard/averagecounter.hh:43:1, line:71:1> line:43:7 class AverageCounter definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5624b87c0178 <col:1, col:7> col:7 implicit referenced class AverageCounter
|-AccessSpecDecl 0x5624b87c0208 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x5624b87c0290 <line:45:5, col:20> col:5 AverageCounter 'void ()'
|-CXXMethodDecl 0x5624b87c0390 <line:47:5, col:63> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5624b87398d8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5624b87c1990 <col:36, col:63>
|   `-ReturnStmt 0x5624b87c1980 <col:38, col:45>
|     `-ImplicitCastExpr 0x5624b87c1968 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5624b87c1940 <col:45> 'const char [15]' lvalue "AverageCounter"
|-CXXMethodDecl 0x5624b87c0458 <line:48:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5624b87399a0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5624b87c19f0 <col:36, col:56>
|   `-ReturnStmt 0x5624b87c19e0 <col:38, col:45>
|     `-ImplicitCastExpr 0x5624b87c19c8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5624b87c19a8 <col:45> 'const char []' lvalue Var 0x5624b8739c50 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5624b87c0730 <line:49:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5624b873b170 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5624b87c05e0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5624b87c0658 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5624b87c0800 <line:51:5, col:45> col:14 count 'uint32_t () const'
| `-CompoundStmt 0x5624b87c1ac0 <col:28, col:45>
|   `-ReturnStmt 0x5624b87c1ab0 <col:30, col:37>
|     `-ImplicitCastExpr 0x5624b87c1a98 <col:37> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x5624b87c1a78 <col:37> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x5624b87c1a48 <col:37> '<bound member function type>' .operator unsigned int 0x5624b84f6fb0
|           `-MemberExpr 0x5624b87c1a18 <col:37> 'const atomic_uint32_t' lvalue ->_count 0x5624b87c0ff0
|             `-CXXThisExpr 0x5624b87c1a08 <col:37> 'const AverageCounter *' implicit this
|-CXXMethodDecl 0x5624b87c08c0 <line:52:5, col:55> col:14 byte_count 'uint32_t () const'
| `-CompoundStmt 0x5624b87c1b90 <col:33, col:55>
|   `-ReturnStmt 0x5624b87c1b80 <col:35, col:42>
|     `-ImplicitCastExpr 0x5624b87c1b68 <col:42> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x5624b87c1b48 <col:42> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x5624b87c1b18 <col:42> '<bound member function type>' .operator unsigned int 0x5624b84f6fb0
|           `-MemberExpr 0x5624b87c1ae8 <col:42> 'const atomic_uint32_t' lvalue ->_byte_count 0x5624b87c1050
|             `-CXXThisExpr 0x5624b87c1ad8 <col:42> 'const AverageCounter *' implicit this
|-CXXMethodDecl 0x5624b87c0980 <line:53:5, col:45> col:14 first 'uint32_t () const'
| `-CompoundStmt 0x5624b87c1c60 <col:28, col:45>
|   `-ReturnStmt 0x5624b87c1c50 <col:30, col:37>
|     `-ImplicitCastExpr 0x5624b87c1c38 <col:37> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x5624b87c1c18 <col:37> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x5624b87c1be8 <col:37> '<bound member function type>' .operator unsigned int 0x5624b84f6fb0
|           `-MemberExpr 0x5624b87c1bb8 <col:37> 'const atomic_uint32_t' lvalue ->_first 0x5624b87c10b0
|             `-CXXThisExpr 0x5624b87c1ba8 <col:37> 'const AverageCounter *' implicit this
|-CXXMethodDecl 0x5624b87c0a40 <line:54:5, col:43> col:14 last 'uint32_t () const'
| `-CompoundStmt 0x5624b87c1d30 <col:27, col:43>
|   `-ReturnStmt 0x5624b87c1d20 <col:29, col:36>
|     `-ImplicitCastExpr 0x5624b87c1d08 <col:36> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x5624b87c1ce8 <col:36> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x5624b87c1cb8 <col:36> '<bound member function type>' .operator unsigned int 0x5624b84f6fb0
|           `-MemberExpr 0x5624b87c1c88 <col:36> 'const atomic_uint32_t' lvalue ->_last 0x5624b87c1110
|             `-CXXThisExpr 0x5624b87c1c78 <col:36> 'const AverageCounter *' implicit this
|-CXXMethodDecl 0x5624b87c0b00 <line:55:5, col:47> col:14 ignore 'uint32_t () const'
| `-CompoundStmt 0x5624b87c1db0 <col:29, col:47>
|   `-ReturnStmt 0x5624b87c1da0 <col:31, col:38>
|     `-ImplicitCastExpr 0x5624b87c1d88 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5624b87c1d58 <col:38> 'const uint32_t':'const unsigned int' lvalue ->_ignore 0x5624b87c1170
|         `-CXXThisExpr 0x5624b87c1d48 <col:38> 'const AverageCounter *' implicit this
|-CXXMethodDecl 0x5624b87c0bc0 <line:56:5, col:16> col:10 reset 'void ()'
|-CXXMethodDecl 0x5624b87c0d08 <line:58:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5624b873b3c0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5624b87c0c70 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x5624b87c0dd0 <line:59:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5624b873b240 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5624b87c0f10 <line:61:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5624b8738ab8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5624b87c0e80 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5624b87c0fb8 <line:63:3, col:10> col:3 private
|-FieldDecl 0x5624b87c0ff0 <line:65:5, col:21> col:21 referenced _count 'atomic_uint32_t'
|-FieldDecl 0x5624b87c1050 <line:66:5, col:21> col:21 referenced _byte_count 'atomic_uint32_t'
|-FieldDecl 0x5624b87c10b0 <line:67:5, col:21> col:21 referenced _first 'atomic_uint32_t'
|-FieldDecl 0x5624b87c1110 <line:68:5, col:21> col:21 referenced _last 'atomic_uint32_t'
|-FieldDecl 0x5624b87c1170 <line:69:5, col:14> col:14 referenced _ignore 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5624b87c11e8 <line:43:7> col:7 implicit AverageCounter 'void (const AverageCounter &)' inline default_delete noexcept-unevaluated 0x5624b87c11e8
| `-ParmVarDecl 0x5624b87c12f8 <col:7> col:7 'const AverageCounter &'
|-CXXConstructorDecl 0x5624b87c1398 <col:7> col:7 implicit AverageCounter 'void (AverageCounter &&)' inline default_delete noexcept-unevaluated 0x5624b87c1398
| `-ParmVarDecl 0x5624b87c14a8 <col:7> col:7 'AverageCounter &&'
|-CXXMethodDecl 0x5624b87c1548 <col:7> col:7 implicit operator= 'AverageCounter &(const AverageCounter &)' inline default_delete noexcept-unevaluated 0x5624b87c1548
| `-ParmVarDecl 0x5624b87c1658 <col:7> col:7 'const AverageCounter &'
|-CXXMethodDecl 0x5624b87c16c8 <col:7> col:7 implicit operator= 'AverageCounter &(AverageCounter &&)' inline default_delete noexcept-unevaluated 0x5624b87c16c8
| `-ParmVarDecl 0x5624b87c17d8 <col:7> col:7 'AverageCounter &&'
`-CXXDestructorDecl 0x5624b87c1860 <col:7> col:7 implicit ~AverageCounter 'void ()' inline default noexcept-unevaluated 0x5624b87c1860
  `-Overrides: [ 0x5624b8738478 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.AverageCounter = type { %class.Element.base, %class.atomic_uint32_t, %class.atomic_uint32_t, %class.atomic_uint32_t, %class.atomic_uint32_t, i32 }
  NonVirtualBaseLLVMType:%class.AverageCounter = type { %class.Element.base, %class.atomic_uint32_t, %class.atomic_uint32_t, %class.atomic_uint32_t, %class.atomic_uint32_t, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b850c040 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5624b850c158 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5624b850c1f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5624b850c258 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5624b850c2b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5624b850c368 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b850c670 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b850c788 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5624b850c830 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5624b850c898 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5624b850c928 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5624b85129c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5624b8512df8 <col:12>
|-CXXConstructorDecl 0x5624b8512ac8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b8512bd8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5624b850c830 'data' 'const char *'
| | `-ImplicitCastExpr 0x5624b8515380 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5624b8515350 <col:12> 'const char *const' lvalue .data 0x5624b850c830
| |     `-DeclRefExpr 0x5624b8515330 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8512bd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5624b850c898 'length' 'int'
| | `-ImplicitCastExpr 0x5624b8515410 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5624b85153e0 <col:12> 'const int' lvalue .length 0x5624b850c898
| |     `-DeclRefExpr 0x5624b85153c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8512bd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5624b850c928 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5624b85154a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5624b8515470 <col:12> 'String::memo_t *const' lvalue .memo 0x5624b850c928
| |     `-DeclRefExpr 0x5624b8515450 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8512bd8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5624b85154f8 <col:12>
|-CXXConstructorDecl 0x5624b8512c78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5624b8512c78
| `-ParmVarDecl 0x5624b8512d88 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5624b85182e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5624b8523cf8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b8523e08 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5624b8524320 <col:12>
|   |-BinaryOperator 0x5624b8524138 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5624b85240f0 <col:12> 'const char *' lvalue ->data 0x5624b850c830
|   | | `-CXXThisExpr 0x5624b85240e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5624b8524120 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5624b85240b0 <col:12> 'const char *const' lvalue .data 0x5624b850c830
|   |     `-DeclRefExpr 0x5624b8524090 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8523e08 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5624b8524200 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5624b85241b8 <col:12> 'int' lvalue ->length 0x5624b850c898
|   | | `-CXXThisExpr 0x5624b85241a8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5624b85241e8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5624b8524178 <col:12> 'const int' lvalue .length 0x5624b850c898
|   |     `-DeclRefExpr 0x5624b8524158 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8523e08 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5624b85242c8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5624b8524280 <col:12> 'String::memo_t *' lvalue ->memo 0x5624b850c928
|   | | `-CXXThisExpr 0x5624b8524270 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5624b85242b0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5624b8524240 <col:12> 'String::memo_t *const' lvalue .memo 0x5624b850c928
|   |     `-DeclRefExpr 0x5624b8524220 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8523e08 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5624b8524310 <col:12>
|     `-UnaryOperator 0x5624b85242f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b85242e8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5624b8523e78 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5624b8523e78
  `-ParmVarDecl 0x5624b8523f88 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b85035b0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5624b85036c8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5624b8503758 <col:16, col:22> col:16 public
|-TypedefDecl 0x5624b8503798 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5624b81d5e00 'const char *'
|   `-QualType 0x5624b81d5351 'const char' const
|     `-BuiltinType 0x5624b81d5350 'char'
|-TypedefDecl 0x5624b8503820 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5624b85037f0 'String::const_iterator' sugar
|   |-Typedef 0x5624b8503798 'const_iterator'
|   `-PointerType 0x5624b81d5e00 'const char *'
|     `-QualType 0x5624b81d5351 'const char' const
|       `-BuiltinType 0x5624b81d5350 'char'
|-TypedefDecl 0x5624b8503990 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5624b8503900 'int (String::*)() const'
|   |-RecordType 0x5624b8503640 'String'
|   | `-CXXRecord 0x5624b85035b0 'String'
|   `-ParenType 0x5624b85038a0 'int () const' sugar
|     `-FunctionProtoType 0x5624b84d7430 'int () const' const cdecl
|       `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b85039f8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5624b832c010 'int64_t' sugar
|   |-Typedef 0x5624b823e2a0 'int64_t'
|   `-TypedefType 0x5624b8217510 '__int64_t' sugar
|     |-Typedef 0x5624b82170e8 '__int64_t'
|     `-BuiltinType 0x5624b81d53d0 'long'
|-TypedefDecl 0x5624b8503a60 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5624b832bf30 'uint64_t' sugar
|   |-Typedef 0x5624b823e440 'uint64_t'
|   `-TypedefType 0x5624b82175a0 '__uint64_t' sugar
|     |-Typedef 0x5624b8217158 '__uint64_t'
|     `-BuiltinType 0x5624b81d5470 'unsigned long'
|-TypedefDecl 0x5624b8503af0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5624b8503ac0 'String::intmax_t' sugar
|   |-Typedef 0x5624b85039f8 'intmax_t'
|   `-TypedefType 0x5624b832c010 'int64_t' sugar
|     |-Typedef 0x5624b823e2a0 'int64_t'
|     `-TypedefType 0x5624b8217510 '__int64_t' sugar
|       |-Typedef 0x5624b82170e8 '__int64_t'
|       `-BuiltinType 0x5624b81d53d0 'long'
|-TypedefDecl 0x5624b8503b80 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5624b8503b50 'String::uintmax_t' sugar
|   |-Typedef 0x5624b8503a60 'uintmax_t'
|   `-TypedefType 0x5624b832bf30 'uint64_t' sugar
|     |-Typedef 0x5624b823e440 'uint64_t'
|     `-TypedefType 0x5624b82175a0 '__uint64_t' sugar
|       |-Typedef 0x5624b8217158 '__uint64_t'
|       `-BuiltinType 0x5624b81d5470 'unsigned long'
|-CXXConstructorDecl 0x5624b8503c40 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5624b8503de8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5624b8503d28 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5624b8503f98 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5624b8503ed8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5624b85040f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5624b8504060 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5624b8504308 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5624b85041b8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5624b8504238 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5624b8504528 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5624b85043d8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5624b8504458 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5624b8504748 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5624b85045f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5624b8504678 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5624b8504968 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5624b8504818 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5624b8504898 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5624b8504af8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5624b8504a30 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5624b8504c78 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5624b8504bb8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5624b8504e08 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5624b8504d40 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5624b8504f60 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5624b8504ed0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5624b85050b8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5624b8505028 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5624b8505210 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5624b8505180 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5624b8505398 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5624b85052d8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5624b8505528 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5624b8505460 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5624b85056b8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5624b85055f0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5624b8505848 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5624b8505780 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5624b8505940 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5624b8505a68 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5624b8505be8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5624b8505b20 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5624b8505d38 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5624b8505ca8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5624b8505df0 <col:63> "" ""
|-CXXMethodDecl 0x5624b8505f38 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5624b8505e78 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5624b8506148 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5624b8505ff8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5624b8506078 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5624b8506368 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5624b8506210 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5624b8506290 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5624b8506648 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5624b8506428 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5624b85064a8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5624b8512490 <col:55> 'int' 10
| `-ParmVarDecl 0x5624b8506520 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5624b85124b0 <col:76> 'bool' true
|-CXXMethodDecl 0x5624b8506928 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5624b8506710 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5624b8506790 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5624b85124c0 <col:56> 'int' 10
| `-ParmVarDecl 0x5624b8506808 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5624b85124e0 <col:77> 'bool' true
|-CXXMethodDecl 0x5624b8506a30 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5624b8506af8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5624b8506bc0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5624b8506c60 <col:20>
| `-OptimizeNoneAttr 0x5624b8506cb8 <col:30>
|-CXXConversionDecl 0x5624b8506da8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5624b8506e78 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5624b8506f38 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5624b8507028 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5624b85070e8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5624b8507268 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5624b85071a0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5624b85073b8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5624b8507328 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5624b85074a8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5624b8507568 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5624b85077b8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5624b8507620 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5624b85076a0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5624b8507a18 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5624b8507880 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5624b8507900 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5624b8507ae8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b8507cf8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5624b8507ba0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5624b8507c20 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5624b8507f18 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5624b8507dc0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5624b8507e40 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5624b85080a8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5624b8507fe0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5624b8508198 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5624b8508308 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5624b8508248 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5624b8508518 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5624b85083c8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5624b8508448 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5624b8508730 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5624b85085d8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5624b8508650 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5624b85088c0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5624b85087f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5624b8508ae0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5624b8508980 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5624b8508a00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5624b8508c30 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5624b8508ba0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5624b8508e08 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5624b8508cf0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5624b8508d70 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5624b8508f58 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5624b8508ec8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5624b8509170 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5624b8509010 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5624b8509090 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5624b85124f0 <col:39> 'int' 0
|-CXXMethodDecl 0x5624b8509390 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5624b8509230 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5624b85092b0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5624b8512510 <col:48> 'int' 0
|-CXXMethodDecl 0x5624b8509570 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5624b8509450 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5624b85094d0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5624b8512530 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5624b8509640 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5624b8509700 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5624b85097c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5624b8509880 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5624b8509940 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5624b8509ae8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5624b85099f0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5624b8509c68 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5624b8509ba0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5624b8509e40 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5624b8509d28 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5624b8509fb8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5624b8509ef8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5624b850a100 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5624b850a070 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5624b850a250 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5624b850a1c0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5624b850a428 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5624b850a310 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5624b850a390 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5624b850a608 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5624b850a4f0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5624b850a570 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5624b850a758 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5624b850a6c8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5624b850a968 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5624b850a818 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5624b850a898 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5624b850aac8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5624b850aa30 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5624b850ac20 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5624b850ab88 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5624b850acc8 <col:57> "" ""
|-CXXMethodDecl 0x5624b850add8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5624b850ad48 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5624b850af28 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5624b850ae98 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5624b850b0a8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5624b850afe0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5624b850b170 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5624b850b230 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5624b850b2f0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5624b850b390 <col:49> "" ""
|-CXXMethodDecl 0x5624b850b420 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5624b850b4e0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5624b850b5d0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5624b850b698 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5624b850b758 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5624b850b818 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5624b850b910 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5624b850b9d8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5624b850baa0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5624b850bc78 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5624b850bb58 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5624b850bbd8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5624b850bea0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5624b850bd40 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5624b850bdc0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5624b850bfb0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5624b850c018 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5624b850c040 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5624b850c158 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5624b850c1f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5624b850c258 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5624b850c2b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5624b850c368 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5624b850c3d0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5624b850c608 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5624b850c658 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b850c5e8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5624b850c4f8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5624b850c4a0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5624b850c4e0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5624b850c4c0 <col:32> 'int' 8
|-CXXRecordDecl 0x5624b850c670 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5624b850c788 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5624b850c830 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5624b850c898 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5624b850c928 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5624b85129c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5624b8512df8 <col:12>
| |-CXXConstructorDecl 0x5624b8512ac8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5624b8512bd8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5624b850c830 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5624b8515380 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5624b8515350 <col:12> 'const char *const' lvalue .data 0x5624b850c830
| | |     `-DeclRefExpr 0x5624b8515330 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8512bd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5624b850c898 'length' 'int'
| | | `-ImplicitCastExpr 0x5624b8515410 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5624b85153e0 <col:12> 'const int' lvalue .length 0x5624b850c898
| | |     `-DeclRefExpr 0x5624b85153c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8512bd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5624b850c928 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5624b85154a0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5624b8515470 <col:12> 'String::memo_t *const' lvalue .memo 0x5624b850c928
| | |     `-DeclRefExpr 0x5624b8515450 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8512bd8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5624b85154f8 <col:12>
| |-CXXConstructorDecl 0x5624b8512c78 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5624b8512c78
| | `-ParmVarDecl 0x5624b8512d88 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5624b85182e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5624b8523cf8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5624b8523e08 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5624b8524320 <col:12>
| |   |-BinaryOperator 0x5624b8524138 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5624b85240f0 <col:12> 'const char *' lvalue ->data 0x5624b850c830
| |   | | `-CXXThisExpr 0x5624b85240e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5624b8524120 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5624b85240b0 <col:12> 'const char *const' lvalue .data 0x5624b850c830
| |   |     `-DeclRefExpr 0x5624b8524090 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8523e08 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5624b8524200 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5624b85241b8 <col:12> 'int' lvalue ->length 0x5624b850c898
| |   | | `-CXXThisExpr 0x5624b85241a8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5624b85241e8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5624b8524178 <col:12> 'const int' lvalue .length 0x5624b850c898
| |   |     `-DeclRefExpr 0x5624b8524158 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8523e08 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5624b85242c8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5624b8524280 <col:12> 'String::memo_t *' lvalue ->memo 0x5624b850c928
| |   | | `-CXXThisExpr 0x5624b8524270 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5624b85242b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5624b8524240 <col:12> 'String::memo_t *const' lvalue .memo 0x5624b850c928
| |   |     `-DeclRefExpr 0x5624b8524220 <col:12> 'const String::rep_t' lvalue ParmVar 0x5624b8523e08 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5624b8524310 <col:12>
| |     `-UnaryOperator 0x5624b85242f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5624b85242e8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5624b8523e78 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5624b8523e78
|   `-ParmVarDecl 0x5624b8523f88 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5624b850c9a0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5624b850cbe8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5624b850ca08 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5624b850ca88 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5624b850cb00 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5624b8512980 <col:79, line:261:5>
|   |-BinaryOperator 0x5624b85125f8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5624b8512590 <col:2, col:5> 'const char *' lvalue .data 0x5624b850c830
|   | | `-MemberExpr 0x5624b8512560 <col:2> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|   | |   `-CXXThisExpr 0x5624b8512550 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5624b85125e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5624b85125c0 <col:12> 'const char *' lvalue ParmVar 0x5624b850ca08 'data' 'const char *'
|   |-BinaryOperator 0x5624b85126c0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5624b8512658 <col:2, col:5> 'int' lvalue .length 0x5624b850c898
|   | | `-MemberExpr 0x5624b8512628 <col:2> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|   | |   `-CXXThisExpr 0x5624b8512618 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5624b85126a8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5624b8512688 <col:14> 'int' lvalue ParmVar 0x5624b850ca88 'length' 'int'
|   `-IfStmt 0x5624b8512968 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5624b85127e0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5624b85127c8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5624b85127a8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5624b8512788 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5624b8512720 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5624b850c928
|     |       | `-MemberExpr 0x5624b85126f0 <col:7> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|     |       |   `-CXXThisExpr 0x5624b85126e0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5624b8512770 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5624b8512750 <col:17> 'String::memo_t *' lvalue ParmVar 0x5624b850cb00 'memo' 'String::memo_t *'
|     `-CallExpr 0x5624b8512940 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5624b8512928 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b8512830 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5624b84fb618 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5624b8512898 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5624b850c1f8
|         `-ImplicitCastExpr 0x5624b8512880 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5624b8512860 <col:27> 'String::memo_t *' lvalue ParmVar 0x5624b850cb00 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5624b850ce98 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5624b850ccb8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5624b850cd38 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5624b850cdb0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5624b850c9a0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5624b8512e08 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b8512f98 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5624b8512f00 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5624b8512e70 <col:2> '<bound member function type>' ->assign_memo 0x5624b850cbe8
|     | `-ImplicitCastExpr 0x5624b8512f38 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5624b8512e60 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5624b8512f50 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b8512ea0 <col:14> 'const char *' lvalue ParmVar 0x5624b850ccb8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5624b8512f68 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b8512ec0 <col:20> 'int' lvalue ParmVar 0x5624b850cd38 'length' 'int'
|     `-ImplicitCastExpr 0x5624b8512f80 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5624b8512ee0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5624b850cdb0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5624b850d028 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5624b850cf68 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5624b85131f0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5624b8513170 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5624b8512fc0 <col:2> '<bound member function type>' ->assign_memo 0x5624b850cbe8
|     | `-CXXThisExpr 0x5624b8512fb0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5624b85131a8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5624b8513040 <col:14, col:19> 'const char *' lvalue .data 0x5624b850c830
|     |   `-MemberExpr 0x5624b8513010 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5624b850c9a0
|     |     `-DeclRefExpr 0x5624b8512ff0 <col:14> 'const String' lvalue ParmVar 0x5624b850cf68 'x' 'const String &'
|     |-ImplicitCastExpr 0x5624b85131c0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5624b85130c0 <col:25, col:30> 'int' lvalue .length 0x5624b850c898
|     |   `-MemberExpr 0x5624b8513090 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5624b850c9a0
|     |     `-DeclRefExpr 0x5624b8513070 <col:25> 'const String' lvalue ParmVar 0x5624b850cf68 'x' 'const String &'
|     `-ImplicitCastExpr 0x5624b85131d8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5624b8513140 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5624b850c928
|         `-MemberExpr 0x5624b8513110 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5624b850c9a0
|           `-DeclRefExpr 0x5624b85130f0 <col:38> 'const String' lvalue ParmVar 0x5624b850cf68 'x' 'const String &'
|-CXXMethodDecl 0x5624b850d0f0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5624b8513bb0 <col:31, line:278:5>
|   `-IfStmt 0x5624b8513b98 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5624b8513290 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5624b8513278 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5624b8513248 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5624b850c928
|     |     `-MemberExpr 0x5624b8513218 <col:6> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|     |       `-CXXThisExpr 0x5624b8513208 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5624b8513b70 <col:15, line:277:2>
|       |-ParenExpr 0x5624b8513740 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5624b8513710 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5624b85133a0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5624b8513388 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5624b8513370 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5624b8513330 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5624b850c1f8
|       |   |       `-ImplicitCastExpr 0x5624b8513318 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5624b85132e8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5624b850c928
|       |   |           `-MemberExpr 0x5624b85132b8 <col:27> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|       |   |             `-CXXThisExpr 0x5624b85132a8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5624b8513400 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5624b85133e0 <col:54> 'int' 0
|       |   `-CallExpr 0x5624b8513670 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5624b8513658 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5624b85135d8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5624b85136b0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5624b85134e8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5624b85136c8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5624b8513518 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5624b85136e0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5624b8513550 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5624b85136f8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5624b85135c0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5624b85135a8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5624b8513570 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5624b8513a90 <line:274:6, line:275:22>
|       | |-CallExpr 0x5624b8513950 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5624b8513938 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5624b85138b0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5624b84fca60 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5624b8513880 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5624b850c1f8
|       | |   `-ImplicitCastExpr 0x5624b8513868 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5624b8513838 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5624b850c928
|       | |       `-MemberExpr 0x5624b8513808 <col:40> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|       | |         `-CXXThisExpr 0x5624b85137f8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5624b8513a50 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5624b8513a38 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5624b8513978 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5624b85118d0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5624b8513a78 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5624b85139d8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5624b850c928
|       |       `-MemberExpr 0x5624b85139a8 <col:15> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|       |         `-CXXThisExpr 0x5624b8513998 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5624b8513b50 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5624b8513ae8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5624b850c928
|         | `-MemberExpr 0x5624b8513ab8 <col:6> 'String::rep_t' lvalue ->_r 0x5624b850c9a0
|         |   `-CXXThisExpr 0x5624b8513aa8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5624b8513b38 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5624b8513b18 <col:16> 'int' 0
|-CXXMethodDecl 0x5624b850d388 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5624b850d1a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5624b850d228 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5624b850d2a0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5624b850d460 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5624b850d6b0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5624b850d518 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5624b850d598 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5624b850d610 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5624b850d898 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5624b850d780 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5624b850d800 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5624b850d998 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5624b8513c88 <col:41, line:286:5>
|   `-ReturnStmt 0x5624b8513c78 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5624b8513c48 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5624b8513c10 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5624b8513bf8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5624b8513bd8 <col:46> 'int' 1
|-CXXMethodDecl 0x5624b850dc38 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5624b850da50 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5624b850dad0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5624b850db50 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5624b85118d0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5624b850dd00 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5624b85119a0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5624b8511b70 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5624b8511a58 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5624b8511ad8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5624b8511c30 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5624b8511cf8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5624b8511df8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5624b8511e70 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5624b8511ee8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5624b8511f50 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5624b8512050 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5624b85120a0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b8512030 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5624b8512010 <col:22> 'int' 14
|-CXXMethodDecl 0x5624b85122b8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5624b85120d0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5624b8512150 <col:38> col:41 'int'
| `-ParmVarDecl 0x5624b85121d0 <col:43> col:46 'int'
|-FriendDecl 0x5624b85123c0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5624b8512450 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5624b877dd10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5624b877dee8 prev 0x5624b877dd10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5624b877df78 <col:46, col:52> col:46 public
|-TypedefDecl 0x5624b877dfa0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b877f900 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5624b877f8b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5624b877f890 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5624b877e1b8 'type'
|     `-SubstTemplateTypeParmType 0x5624b877e180 'String' sugar
|       |-TemplateTypeParmType 0x5624b84c6e50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84c6e00 'T'
|       `-RecordType 0x5624b8503640 'String'
|         `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b877f9b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5624b877f980 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5624b877f960 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5624b877f900 'type'
|     `-ElaboratedType 0x5624b877f8b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5624b877f890 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5624b877e1b8 'type'
|         `-SubstTemplateTypeParmType 0x5624b877e180 'String' sugar
|           |-TemplateTypeParmType 0x5624b84c6e50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5624b84c6e00 'T'
|           `-RecordType 0x5624b8503640 'String'
|             `-CXXRecord 0x5624b85035b0 'String'
|-CXXMethodDecl 0x5624b877fb38 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5624b877fa48 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5624b877fc28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5624b877fd08 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5624b877fd08
|-CXXMethodDecl 0x5624b877ffd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5624b877fee0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5624b8780218 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5624b8780090 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5624b8780108 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b87803e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5624b87802d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5624b8780350 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b8780548 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5624b8780618 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5624b8780868 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5624b87806d8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5624b8780750 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b8780ac8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5624b8780938 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5624b87809b0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b8780c88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5624b8780b98 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b8780e48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5624b8780d50 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b8780f00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5624b8780fb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5624b87811e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5624b8781060 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5624b87810d8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5624b8781488 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5624b8781390 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5624b8781550 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5624b87815a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5624b87815f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5624b873ade0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5624b877c778 prev 0x5624b873ade0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5624b877dc80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5624b877dc30 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5624b877dc10 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5624b877dac0 'type'
|     `-SubstTemplateTypeParmType 0x5624b877d950 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5624b849cc00 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5624b849cba8 'F'
|       `-RecordType 0x5624b877d5b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5624b877d4d0 'typed_array_memory'
|-FieldDecl 0x5624b8781640 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5624b8781690 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5624b87816c8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|   |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5624b84d4118 'T'
|   `-RecordType 0x5624b8503640 'String'
|     `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b8781758 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5624b8781720 'String &'
|   `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|     |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5624b84d4118 'T'
|     `-RecordType 0x5624b8503640 'String'
|       `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b87817e8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5624b87817b0 'const String &'
|   `-QualType 0x5624b877c811 'const String' const
|     `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-RecordType 0x5624b8503640 'String'
|         `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b8781878 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5624b8781840 'String *'
|   `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|     |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5624b84d4118 'T'
|     `-RecordType 0x5624b8503640 'String'
|       `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b8781920 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5624b87818d0 'const String *'
|   `-QualType 0x5624b877c811 'const String' const
|     `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-RecordType 0x5624b8503640 'String'
|         `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b8782580 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5624b8782530 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5624b8782510 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5624b8782448 'type'
|     `-LValueReferenceType 0x5624b8782410 'const String &'
|       `-QualType 0x5624b87821b1 'const String' const
|         `-SubstTemplateTypeParmType 0x5624b87821b0 'String' sugar
|           |-TemplateTypeParmType 0x5624b84a6b50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5624b84a6af8 'T'
|           `-RecordType 0x5624b8503640 'String'
|             `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b87825e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5624b87817b0 'const String &'
|   `-QualType 0x5624b877c811 'const String' const
|     `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-RecordType 0x5624b8503640 'String'
|         `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b8782640 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87826a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5624b8781840 'String *'
|   `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|     |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5624b84d4118 'T'
|     `-RecordType 0x5624b8503640 'String'
|       `-CXXRecord 0x5624b85035b0 'String'
|-TypedefDecl 0x5624b8782710 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5624b87818d0 'const String *'
|   `-QualType 0x5624b877c811 'const String' const
|     `-SubstTemplateTypeParmType 0x5624b877c810 'String' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-RecordType 0x5624b8503640 'String'
|         `-CXXRecord 0x5624b85035b0 'String'
|-EnumDecl 0x5624b8782768 <line:134:5> col:5
| `-EnumConstantDecl 0x5624b8782860 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5624b8782840 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5624b84d57f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5624b84d57d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5624b84d57b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5624b87828e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5624b8782b78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b87829a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5624b8782a40 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5624b8782e08 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5624b8782cf0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5624b87830c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5624b8782fb0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5624b87833e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5624b87832c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5624b87836f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5624b87835d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5624b87839e0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b8783828 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5624b87838a0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5624b8783b08 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5624b8783bb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b8783c10 <col:30> Inherited
|-CXXMethodDecl 0x5624b8783c58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5624b8783d08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b8783d60 <col:30> Inherited
|-CXXMethodDecl 0x5624b8783e28 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5624b8783ed8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b8783f30 <col:30> Inherited
|-CXXMethodDecl 0x5624b8783f78 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5624b8784028 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b8784080 <col:30> Inherited
|-CXXMethodDecl 0x5624b87840c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5624b8784178 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87841d0 <col:30> Inherited
|-CXXMethodDecl 0x5624b8784218 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5624b87842c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b8784320 <col:30> Inherited
|-CXXMethodDecl 0x5624b8784348 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5624b87843f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5624b87844a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5624b8784668 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b8784558 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5624b87845d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5624b87847b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5624b8784728 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b8784968 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5624b8784870 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5624b8784a20 <col:20>
| `-OptimizeNoneAttr 0x5624b8784a78 <col:30>
|-CXXMethodDecl 0x5624b8784b98 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5624b8784aa0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5624b8784c50 <col:20>
| `-OptimizeNoneAttr 0x5624b8784ca8 <col:30>
|-CXXMethodDecl 0x5624b8784d60 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5624b8784cd0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b8784ea8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5624b8784e18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b8784fd8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5624b87850d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5624b87851a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5624b8785278 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5624b87853b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5624b8785328 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b8785500 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5624b8785470 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b8785648 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5624b87855b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5624b8785700 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5624b8785800 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5624b8785770 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5624b87858b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5624b8785978 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5624b8785a78 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5624b8785bf8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5624b8785b38 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5624b87863b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5624b8785cb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5624b8786318 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5624b8786218 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5624b8786498 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5624b87865e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5624b8786558 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5624b87866a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5624b87868e8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b8786760 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5624b87867d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5624b8786a78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5624b87869b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5624b8786c88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5624b8786b40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5624b8786bb8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5624b8786d48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5624b8786fa8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5624b8786eb0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5624b8787078 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5624b8787078

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b88447c8 prev 0x5624b87c1e58 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5624b88448c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5624b8844950 <col:22, col:28> col:22 public
|-EnumDecl 0x5624b8844978 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5624b8844a98 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844a78 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5624b8844a60 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5624b8844a40 <col:14> 'int' 999
| |-EnumConstantDecl 0x5624b8844b40 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844b20 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5624b8844b08 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5624b8844ae8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5624b8844bd0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844bb0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5624b8844b90 <col:17> 'int' 0
| |-EnumConstantDecl 0x5624b8844c60 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844c40 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5624b8844c20 <col:13> 'int' 1
| |-EnumConstantDecl 0x5624b8844cf0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844cd0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5624b8844cb0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5624b8844d80 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844d60 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5624b8844d40 <col:13> 'int' 3
| |-EnumConstantDecl 0x5624b8844e10 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844df0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5624b8844dd0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5624b8844ea0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844e80 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5624b8844e60 <col:14> 'int' 5
| |-EnumConstantDecl 0x5624b8844f30 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5624b8844f10 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5624b8844ef0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5624b8844fc0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5624b8844fa0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5624b8844f80 <col:13> 'int' 7
|-VarDecl 0x5624b8845030 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5624b88450b8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5624b8845140 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5624b88451c8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5624b8845250 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5624b88452d8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5624b8845360 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5624b88453e8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5624b8845470 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5624b88454f8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5624b8845580 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5624b8845680 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5624b88549a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5624b8855138 <line:128:13> 'int' 0
| `-CompoundStmt 0x5624b88551a8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5624b8845770 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5624b88551b8 <col:29, line:132:5>
|-CXXMethodDecl 0x5624b8845928 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5624b8845860 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5624b88459f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5624b8845ad8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5624b8855210 <col:44, line:161:5>
|   `-ReturnStmt 0x5624b8855200 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5624b88551e8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5624b88551c8 <col:9> 'ErrorHandler *' lvalue Var 0x5624b8854a08 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5624b8845c18 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5624b8845b88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5624b8845ce0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5624b8855270 <col:43, line:173:5>
|   `-ReturnStmt 0x5624b8855260 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5624b8855248 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5624b8855228 <col:9> 'ErrorHandler *' lvalue Var 0x5624b8854a80 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5624b8845d98 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5624b8845e18 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5624b8845f28 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5624b8845e98 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846078 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5624b8845fe8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5624b88461d0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5624b8846138 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846328 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5624b8846290 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846480 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5624b88463e8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846690 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5624b8846538 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5624b88465b8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846868 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5624b8846750 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5624b88467d0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846a88 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5624b8846928 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5624b88469a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846c68 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5624b8846b48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5624b8846bc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846e48 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5624b8846d28 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5624b8846da8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5624b8846fd0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5624b8846f08 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5624b88471a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5624b8847088 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5624b8847100 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5624b88554c8 <col:57, line:234:5>
|   `-ReturnStmt 0x5624b88554b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5624b88554a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5624b8855448 <col:9, col:41> 'int'
|         |-MemberExpr 0x5624b8855418 <col:9> '<bound member function type>' ->xmessage 0x5624b8846fd0
|         | `-CXXThisExpr 0x5624b8855408 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5624b8855488 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5624b8855470 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5624b88553e8 <col:18, col:40> 'String' (CXXTemporary 0x5624b88553e8)
|               `-CallExpr 0x5624b88553b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5624b8855398 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5624b8855310 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5624b88531d8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5624b8855330 <col:31> 'const String' lvalue ParmVar 0x5624b8847100 'str' 'const String &'
|                 `-DeclRefExpr 0x5624b8855350 <col:36> 'const String' lvalue ParmVar 0x5624b8847088 'anno' 'const String &'
|-CXXMethodDecl 0x5624b8847480 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5624b8847260 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5624b88472e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5624b8847358 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5624b8855758 <col:68, line:243:5>
|   `-ReturnStmt 0x5624b8855748 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5624b8855730 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5624b88556d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5624b88556a0 <col:9> '<bound member function type>' ->xmessage 0x5624b88471a0
|         | `-CXXThisExpr 0x5624b8855690 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5624b8855568 <col:18> 'const String' lvalue ParmVar 0x5624b8847260 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5624b8855718 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5624b8855700 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5624b8855670 <col:24, col:40> 'String' (CXXTemporary 0x5624b8855670)
|               `-CXXMemberCallExpr 0x5624b8855608 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5624b8855598 <col:24> '<bound member function type>' ->vformat 0x5624b88526a0
|                 | `-CXXThisExpr 0x5624b8855588 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5624b8855638 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5624b88555c8 <col:32> 'const char *' lvalue ParmVar 0x5624b88472e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5624b8855650 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5624b88555e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5624b8847358 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5624b8847720 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5624b8847548 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5624b88475c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5624b8847638 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5624b8855a98 <col:23, line:254:5>
|   `-ReturnStmt 0x5624b8855a88 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5624b8855a70 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5624b8855a10 <col:9, col:71> 'int'
|         |-MemberExpr 0x5624b88559e0 <col:9> '<bound member function type>' ->xmessage 0x5624b88471a0
|         | `-CXXThisExpr 0x5624b88559d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5624b8855a58 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5624b8855a40 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5624b8855990 <col:18, col:65> 'String' (CXXTemporary 0x5624b8855990)
|         |     `-CallExpr 0x5624b8855928 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5624b8855910 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5624b88557f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5624b88531d8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5624b8855818 <col:31> 'const String' lvalue ParmVar 0x5624b88475c0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5624b8855970 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5624b8855958 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5624b88558f0 <col:37, col:64> 'String' (CXXTemporary 0x5624b88558f0)
|         |             `-CallExpr 0x5624b88558c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5624b88558a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5624b8855838 <col:37> 'String (const String &)' lvalue CXXMethod 0x5624b8853828 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5624b8855858 <col:56> 'const String' lvalue ParmVar 0x5624b8847548 'landmark' 'const String &'
|         `-DeclRefExpr 0x5624b88559b0 <col:68> 'const String' lvalue ParmVar 0x5624b8847638 'str' 'const String &'
|-CXXMethodDecl 0x5624b8847aa0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5624b88477e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5624b8847860 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5624b88478e0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5624b8847958 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5624b8855d50 <col:34, line:267:5>
|   `-ReturnStmt 0x5624b8855d40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5624b8855d28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5624b8855cc0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5624b8855c90 <col:9> '<bound member function type>' ->xmessage 0x5624b8847720
|         | `-CXXThisExpr 0x5624b8855c80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5624b8855b38 <col:18> 'const String' lvalue ParmVar 0x5624b88477e8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5624b8855b58 <col:28> 'const String' lvalue ParmVar 0x5624b8847860 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5624b8855d10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5624b8855cf8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5624b8855c60 <col:34, col:50> 'String' (CXXTemporary 0x5624b8855c60)
|               `-CXXMemberCallExpr 0x5624b8855bf8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5624b8855b88 <col:34> '<bound member function type>' ->vformat 0x5624b88526a0
|                 | `-CXXThisExpr 0x5624b8855b78 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5624b8855c28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5624b8855bb8 <col:42> 'const char *' lvalue ParmVar 0x5624b88478e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5624b8855c40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5624b8855bd8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5624b8847958 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5624b8847bb0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5624b8855dd0 <col:25, line:288:5>
|   `-ReturnStmt 0x5624b8855dc0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5624b8855da8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5624b8855d78 <col:9> 'const int' lvalue ->_nerrors 0x5624b88549a8
|         `-CXXThisExpr 0x5624b8855d68 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5624b8847dc0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5624b8847c68 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5624b8847ce8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5624b88520e0 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5624b8847e88 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5624b8847f08 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5624b8847f80 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5624b8852280 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5624b88521b0 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5624b88524c8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5624b8852340 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5624b88523b8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5624b8856030 <col:58, line:357:5>
|   `-ReturnStmt 0x5624b8856020 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5624b8856008 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5624b8855fd8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5624b8855fc0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5624b8855fa0 <col:9, col:29> 'String' (CXXTemporary 0x5624b8855fa0)
|             `-CallExpr 0x5624b8855f30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5624b8855f18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5624b8855e98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5624b88520e0 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5624b8855e38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5624b8855f68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5624b8855e58 <col:21> 'const char *' lvalue ParmVar 0x5624b8852340 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5624b8855f80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5624b8855e78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5624b88523b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5624b88526a0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5624b8852590 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5624b8852608 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5624b88527f8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5624b8852768 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5624b8852940 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5624b88528b0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5624b8852be0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5624b88529f8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5624b8852a78 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5624b8852af0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5624b8852d40 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5624b8852cb0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5624b8856148 <col:37, line:441:5>
|   `-IfStmt 0x5624b8856130 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5624b88560b8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5624b8856088 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5624b8856048 <col:6> 'int' lvalue ParmVar 0x5624b8852cb0 'level' 'int'
|     | `-ImplicitCastExpr 0x5624b88560a0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5624b8856068 <col:15> 'ErrorHandler::Level' EnumConstant 0x5624b8844d80 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5624b8856118 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5624b88560e8 <col:8> 'int' lvalue ->_nerrors 0x5624b88549a8
|         `-CXXThisExpr 0x5624b88560d8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5624b8852e08 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5624b88561e0 <col:26, line:448:5>
|   `-BinaryOperator 0x5624b88561c0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5624b8856170 <col:2> 'int' lvalue ->_nerrors 0x5624b88549a8
|     | `-CXXThisExpr 0x5624b8856160 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5624b88561a0 <col:13> 'int' 0
|-CXXMethodDecl 0x5624b8852fd0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5624b8852ec0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5624b8852f38 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5624b88531d8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5624b8853090 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5624b8853108 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5624b8853488 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5624b8853298 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5624b8853318 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5624b8853398 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5624b8853540 <col:59> 0 0
|-CXXMethodDecl 0x5624b88536d8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5624b88535b8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5624b8853638 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5624b8856850 <col:70, line:534:5>
|   |-DeclStmt 0x5624b8856350 <line:528:2, col:20>
|   | |-VarDecl 0x5624b8856208 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5624b8856270 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5624b88562a8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5624b8856310 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5624b8856420 <line:529:2, col:23>
|   | `-VarDecl 0x5624b8856380 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5624b8856408 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5624b88563e8 <col:18> 'const char *' lvalue ParmVar 0x5624b88535b8 'begin' 'const char *'
|   |-DoStmt 0x5624b88567e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5624b8856718 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5624b8856700 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5624b88566e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5624b8856438 <col:6> 'const char *' lvalue Var 0x5624b8856380 'x' 'const char *'
|   | |     `-CallExpr 0x5624b8856630 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5624b8856618 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5624b88565d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5624b8854e80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5624b8856698 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5624b8856680 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5624b88564f0 <col:20, col:27> 'String' (CXXTemporary 0x5624b88564f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5624b88564b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5624b88566b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5624b8856510 <col:30> 'const char *' lvalue Var 0x5624b8856380 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5624b88566c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5624b8856530 <col:33> 'const char *' lvalue ParmVar 0x5624b8853638 'end' 'const char *'
|   | |       |-UnaryOperator 0x5624b8856570 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5624b8856550 <col:39> 'String' lvalue Var 0x5624b8856208 'name' 'String'
|   | |       |-UnaryOperator 0x5624b88565a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5624b8856588 <col:46> 'String' lvalue Var 0x5624b88562a8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5624b88565c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5624b88567d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5624b88567b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5624b8856798 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5624b8856768 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|   |         `-ImplicitCastExpr 0x5624b8856750 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5624b8856730 <col:11> 'String' lvalue Var 0x5624b8856208 'name' 'String'
|   `-ReturnStmt 0x5624b8856840 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5624b8856828 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5624b8856808 <col:9> 'const char *' lvalue Var 0x5624b8856380 'x' 'const char *'
|-CXXMethodDecl 0x5624b8853828 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5624b8853798 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5624b8856e58 <col:55, line:550:5>
|   `-IfStmt 0x5624b8856e30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5624b8856a90 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5624b8856a78 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5624b8856a60 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5624b8856a40 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5624b8856a10 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|     | |       `-DeclRefExpr 0x5624b88568b0 <col:6> 'const String' lvalue ParmVar 0x5624b8853798 'x' 'const String &'
|     | `-BinaryOperator 0x5624b88569f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5624b88569c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5624b8856970 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5624b8856958 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5624b8856910 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5624b85205e0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5624b88568d0 <col:11> 'const String' lvalue ParmVar 0x5624b8853798 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5624b88568f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5624b88569d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5624b88569a8 <col:19> 'char' 123
|     |-ReturnStmt 0x5624b8856b00 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5624b8856ad0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5624b8856ab0 <col:13> 'const String' lvalue ParmVar 0x5624b8853798 'x' 'const String &'
|     `-IfStmt 0x5624b8856e08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5624b8856b98 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5624b8856b80 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5624b8856b60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5624b8856b30 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |       `-DeclRefExpr 0x5624b8856b10 <col:11> 'const String' lvalue ParmVar 0x5624b8853798 'x' 'const String &'
|       |-ReturnStmt 0x5624b8856d20 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5624b8856d08 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5624b8856cd8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5624b8856cc0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5624b8856ca0 <col:13, col:29> 'String' (CXXTemporary 0x5624b8856ca0)
|       |         `-CallExpr 0x5624b8856c50 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5624b8856c38 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5624b8856bb0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5624b8852fd0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5624b8856c80 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5624b8856bd0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5624b8856bf0 <col:28> 'const String' lvalue ParmVar 0x5624b8853798 'x' 'const String &'
|       `-ReturnStmt 0x5624b8856df8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5624b8856de0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5624b8856db0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5624b8856d98 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5624b8856d78 <col:13, col:20> 'String' (CXXTemporary 0x5624b8856d78)
|                 `-CXXTemporaryObjectExpr 0x5624b8856d40 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5624b88539f0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5624b88538e0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5624b8853958 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5624b8855128 <col:71> 'bool' false
|-CXXRecordDecl 0x5624b8853aa0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5624b8853d98 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5624b8853d30 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5624b8853cd0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5624b8853c90 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5624b8503640 'String'
|       | `-CXXRecord 0x5624b85035b0 'String'
|       |-BuiltinType 0x5624b81d53b0 'int'
|       `-DecayedType 0x5624b87c2ea0 '__va_list_tag *' sugar
|         |-TypedefType 0x5624b87c2e70 'va_list' sugar
|         | |-Typedef 0x5624b83f46f0 'va_list'
|         | `-TypedefType 0x5624b83f46a0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5624b832c2c8 '__gnuc_va_list'
|         |   `-TypedefType 0x5624b832c230 '__builtin_va_list' sugar
|         |     |-Typedef 0x5624b8216c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5624b8216bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5624b81d6100 '__va_list_tag'
|         |         `-CXXRecord 0x5624b81d6068 '__va_list_tag'
|         `-PointerType 0x5624b83f9f90 '__va_list_tag *'
|           `-RecordType 0x5624b81d6100 '__va_list_tag'
|             `-CXXRecord 0x5624b81d6068 '__va_list_tag'
|-EnumDecl 0x5624b8853df0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5624b8853ef0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b8854450 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8853ed0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5624b8853eb0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5624b8853f80 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b8854468 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8853f60 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5624b8853f40 <col:21> 'int' 2
| |-EnumConstantDecl 0x5624b8854010 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b8854480 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8853ff0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5624b8853fd0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5624b88540a0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b8854498 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8854080 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5624b8854060 <col:17> 'int' 8
| |-EnumConstantDecl 0x5624b8854130 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b88544b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8854110 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5624b88540f0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5624b88541c0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b88544c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b88541a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5624b8854180 <col:19> 'int' 32
| |-EnumConstantDecl 0x5624b8854250 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b88544e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8854230 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5624b8854210 <col:17> 'int' 64
| |-EnumConstantDecl 0x5624b88542e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b88544f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b88542c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5624b88542a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5624b8854370 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5624b8854510 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8854350 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5624b8854330 <col:16> 'int' 256
| `-EnumConstantDecl 0x5624b8854400 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5624b8854528 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b88543e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5624b88543c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5624b8854738 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5624b8854550 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5624b88545f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5624b88548c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5624b88547f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5624b8854968 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5624b88549a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5624b8854a08 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5624b8854a80 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5624b8854e80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5624b8854af8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5624b8854b78 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5624b8854bf8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5624b8854c70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5624b8854ce8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5624b8854d60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5624b8854fa8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5624b8854fa8
| `-ParmVarDecl 0x5624b88550b8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5624b88571b8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5624b88571b8
  `-ParmVarDecl 0x5624b88572c8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87c1ee8 prev 0x5624b86fd888 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b87c1fe0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5624b87c2070 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5624b87c21a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5624b87c20a8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5624b87c35d0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b87c35b0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5624b87c3148 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5624b87c3660 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5624b87c3620 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5624b87c20a8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5624b87c31b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5624b87c36e0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b87c36a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5624b87c3210 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5624b87c3720 <col:54> 'bool' false
| `-CompoundStmt 0x5624b87c3828 <col:61, line:38:5>
|   `-BinaryOperator 0x5624b87c3808 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5624b87c37a0 <col:9> 'const Element *' lvalue ->_context 0x5624b87c30e8
|     | `-CXXThisExpr 0x5624b87c3790 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5624b87c37f0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5624b87c37d0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5624b87c23b8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b87c2268 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5624b87c22e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5624b87c3608 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b87c35e8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5624b87c30e8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5624b87c3880 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5624b87c3840 <col:20> 'const Element *' lvalue ParmVar 0x5624b87c2268 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5624b87c3148 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5624b87c3900 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5624b87c38c0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5624b87c22e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5624b87c31b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5624b87c3980 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5624b87c3940 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5624b87c3210 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5624b87c39c0 <col:73> 'bool' false
| `-CompoundStmt 0x5624b87c3a38 <col:80, line:46:5>
|-CXXMethodDecl 0x5624b87c24e8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5624b87c3ab0 <col:36, line:51:5>
|   `-ReturnStmt 0x5624b87c3aa0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5624b87c3a88 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5624b87c3a58 <col:16> 'const Element *const' lvalue ->_context 0x5624b87c30e8
|         `-CXXThisExpr 0x5624b87c3a48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5624b87c25d8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5624b87c3b30 <col:32, line:57:5>
|   `-ReturnStmt 0x5624b87c3b20 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5624b87c3b08 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5624b87c3ad8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5624b87c3148
|         `-CXXThisExpr 0x5624b87c3ac8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5624b87c2698 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5624b87c2820 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5624b87c2750 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5624b87c2970 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5624b87c28e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5624b87c2ac0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5624b87c2a30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5624b87c2cc8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5624b87c2b78 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5624b87c2bf0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5624b87c2ff8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5624b87c2d88 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5624b87c2e08 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5624b87c2ed0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5624b87c30b0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5624b87c30e8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5624b87c3148 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5624b87c31b0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5624b87c3210 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5624b87c3260 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5624b87c3260
| `-ParmVarDecl 0x5624b87c3378 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5624b87c3418 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5624b87c3418
| `-ParmVarDecl 0x5624b87c3528 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5624b8860230 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5624b87e5100 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5624b87e52d8 prev 0x5624b87e5100 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5624b87e5368 <col:46, col:52> col:46 public
|-TypedefDecl 0x5624b87e5390 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87e6f60 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5624b87e6f10 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5624b87e5840 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5624b87e5740 'type'
|     `-TemplateSpecializationType 0x5624b87e56d0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5624b87e55b0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5624b87e5590 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5624b87e5570 <col:24> 'unsigned long' 4
|       `-RecordType 0x5624b87e56b0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5624b87e55d0 'char_array'
|-TypedefDecl 0x5624b87e7018 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5624b87e6fe0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5624b87e6fc0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5624b87e6f60 'type'
|     `-ElaboratedType 0x5624b87e6f10 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5624b87e5840 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5624b87e5740 'type'
|         `-TemplateSpecializationType 0x5624b87e56d0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5624b87e55b0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5624b87e5590 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5624b87e5570 <col:24> 'unsigned long' 4
|           `-RecordType 0x5624b87e56b0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5624b87e55d0 'char_array'
|-CXXMethodDecl 0x5624b87e7198 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5624b87e70a8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5624b87e7288 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5624b87e7368 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5624b87f1a38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5624b87f1940 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5624b87f1c78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5624b87f1af0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5624b87f1b68 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f1e48 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5624b87f1d38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5624b87f1db0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f1fa8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5624b87f2078 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5624b87f22c8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5624b87f2138 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5624b87f21b0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f2528 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5624b87f2398 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5624b87f2410 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f26e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5624b87f25f8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f28a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5624b87f27b0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f2960 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5624b87f2a10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5624b87f2c48 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5624b87f2ac0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5624b87f2b38 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5624b87f2ee8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5624b87f2df0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5624b87f2fb0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5624b87f3000 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5624b87f3050 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5624b87e3b08 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5624b87e3d18 prev 0x5624b87e3b08 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5624b87e5070 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5624b87e5020 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5624b87e5000 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5624b87e4eb0 'type'
|     `-SubstTemplateTypeParmType 0x5624b87e4cd0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5624b849c480 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b849c428 'T'
|       `-RecordType 0x5624b87e4820 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5624b87e4738 'sized_array_memory'
|-FieldDecl 0x5624b87f30a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5624b87f30f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5624b87f3128 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|   |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5624b84d4118 'T'
|   `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f31b8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5624b87f3180 'int &'
|   `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|     |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5624b84d4118 'T'
|     `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f3278 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5624b87f3240 'const int &'
|   `-QualType 0x5624b87e3db1 'const int' const
|     `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f3308 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5624b87f32d0 'int *'
|   `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|     |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5624b84d4118 'T'
|     `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f3398 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5624b87f3360 'const int *'
|   `-QualType 0x5624b87e3db1 'const int' const
|     `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f3f80 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5624b87f3f30 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5624b87f3f10 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5624b87f3ea0 'type'
|     `-SubstTemplateTypeParmType 0x5624b87f3c60 'int' sugar
|       |-TemplateTypeParmType 0x5624b84a7280 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84a7230 'T'
|       `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f3fe8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5624b87f3240 'const int &'
|   `-QualType 0x5624b87e3db1 'const int' const
|     `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f4040 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f40a8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5624b87f32d0 'int *'
|   `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|     |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5624b84d4118 'T'
|     `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b87f4110 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5624b87f3360 'const int *'
|   `-QualType 0x5624b87e3db1 'const int' const
|     `-SubstTemplateTypeParmType 0x5624b87e3db0 'int' sugar
|       |-TemplateTypeParmType 0x5624b84d4170 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5624b84d4118 'T'
|       `-BuiltinType 0x5624b81d53b0 'int'
|-EnumDecl 0x5624b87f4168 <line:134:5> col:5
| `-EnumConstantDecl 0x5624b87f4260 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5624b87f4240 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5624b84d57f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5624b84d57d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5624b84d57b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5624b87f42e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5624b87f4538 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b87f43a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5624b87f4440 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5624b87f47f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5624b87f46e0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5624b87f4ab8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5624b87f49a0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5624b87f4e00 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5624b87f4ce0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5624b87f5110 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5624b87f4ff0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5624b87f5400 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b87f5248 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5624b87f52c0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5624b87f5528 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5624b87f5608 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87f5660 <col:30> Inherited
|-CXXMethodDecl 0x5624b87f56a8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5624b87f5758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87f57b0 <col:30> Inherited
|-CXXMethodDecl 0x5624b87f5878 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5624b87f5928 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87f5980 <col:30> Inherited
|-CXXMethodDecl 0x5624b87f59c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5624b87f5a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87f5ad0 <col:30> Inherited
|-CXXMethodDecl 0x5624b87f5b18 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5624b87f5bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87f5c20 <col:30> Inherited
|-CXXMethodDecl 0x5624b87f5c68 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5624b87f5d18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5624b87f5d70 <col:30> Inherited
|-CXXMethodDecl 0x5624b87f5d98 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5624b87f5e48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5624b87f5ef8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5624b87f60b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b87f5fa8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5624b87f6020 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5624b87f6208 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5624b87f6178 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b87f63b8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5624b87f62c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5624b87f6470 <col:20>
| `-OptimizeNoneAttr 0x5624b87f64c8 <col:30>
|-CXXMethodDecl 0x5624b87f65e8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5624b87f64f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5624b87f66a0 <col:20>
| `-OptimizeNoneAttr 0x5624b87f66f8 <col:30>
|-CXXMethodDecl 0x5624b87f67b0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5624b87f6720 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b87f68f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5624b87f6868 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b87f6a28 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5624b87f6b58 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5624b87f6c28 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5624b87f6cf8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5624b87f6e38 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5624b87f6da8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b87f6f80 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5624b87f6ef0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5624b87f70c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5624b87f7038 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5624b87f7180 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5624b87f7280 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5624b87f71f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5624b87f7338 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5624b87f73f8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5624b87f74f8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5624b87f7678 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5624b87f75b8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5624b87f7e38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5624b87f7730 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5624b87f7d98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5624b87f7c98 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5624b87f7f18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5624b87f8068 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5624b87f7fd8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5624b87f8120 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5624b87f8368 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5624b87f81e0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5624b87f8258 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5624b87f8528 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5624b87f8438 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5624b87f8778 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5624b87f85f0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5624b87f8668 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5624b87f8838 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5624b87f8a98 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5624b87f89a0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5624b87f8b68 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87e1c78 prev 0x5624b87c8a58 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5624b87e1d70 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5624b87e1e60 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5624b880b770 <col:16, line:828:9>
|-CXXDestructorDecl 0x5624b87e1f50 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5624b880b780 <col:25, line:830:9>
|-CXXMethodDecl 0x5624b87e2050 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5624b87e2100 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5624b87e21a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5624b87e21a8
| `-ParmVarDecl 0x5624b87e22b8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5624b87e2a78 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5624b87e2a78
  `-ParmVarDecl 0x5624b87e2b88 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87c8868 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5624b87c89c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5624b87c8a58 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5624b87c8b10 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5624b87c8c18 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5624b87c8b48 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5624b87fca58 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5624b87fca38 <col:31> 'int' 0
|-CXXConstructorDecl 0x5624b87c8f38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5624b87c8db0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5624b87c8e28 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5624b87fca90 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5624b87fca70 <col:59> 'int' 0
|-CXXConstructorDecl 0x5624b87c9110 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b87c9000 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5624b87c9078 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5624b87fcac8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5624b87fcaa8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5624b87c94c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5624b87c92b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5624b87c9328 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5624b87c93a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5624b87fcb00 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5624b87fcae0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5624b87c9688 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5624b87c95c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5624b87c9780 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5624b87c9968 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5624b87c9870 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5624b87c9a58 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5624b87fceb0 <col:24, line:291:5>
|   `-ReturnStmt 0x5624b87fcea0 <line:290:9, col:79>
|     `-BinaryOperator 0x5624b87fce80 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5624b87fcd58 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5624b87fccb0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5624b87fcc90 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5624b87fcb88 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5624b87fcb70 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5624b87fcb58 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5624b87fcb28 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5624b87e3aa0
|       | |   |       `-CXXThisExpr 0x5624b87fcb18 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5624b87fcc78 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5624b87fcc60 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5624b87fcc28 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5624b87fcbf8 <col:28, col:35> '<bound member function type>' ->size 0x5624b8784348
|       | |           `-ImplicitCastExpr 0x5624b87fcc48 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5624b87fcbe0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5624b87fcbb0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5624b87e3aa0
|       | |                 `-CXXThisExpr 0x5624b87fcba0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5624b87fcd40 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5624b87fcd28 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5624b87fcd10 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5624b87fcce0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5624b87f8cb0
|       |         `-CXXThisExpr 0x5624b87fccd0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5624b87fce60 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5624b87fce48 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5624b87fce30 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5624b87fcdf0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5624b87fcdd8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5624b87fcd88 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5624b87f8d60
|         |     |   `-CXXThisExpr 0x5624b87fcd78 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5624b87fcdb8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5624b87fce10 <col:79> 'int' 0
|-CXXMethodDecl 0x5624b87c9b18 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5624b87fd088 <col:32, line:296:5>
|   `-ReturnStmt 0x5624b87fd078 <line:295:9, col:49>
|     `-BinaryOperator 0x5624b87fd058 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5624b87fcf38 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5624b87fcf20 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5624b87fcf08 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5624b87fced8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5624b87f8cb0
|       |       `-CXXThisExpr 0x5624b87fcec8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5624b87fd038 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5624b87fd020 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5624b87fd008 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5624b87fcfc8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5624b87fcfb0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5624b87fcf60 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5624b87f8d60
|         |     |   `-CXXThisExpr 0x5624b87fcf50 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5624b87fcf90 <col:43> 'int' 0
|         `-IntegerLiteral 0x5624b87fcfe8 <col:49> 'int' 0
|-CXXMethodDecl 0x5624b87c9c08 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5624b87fd298 <col:19, line:306:5>
|   |-IfStmt 0x5624b87fd1b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5624b87fd0f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5624b87fd0e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5624b87fd0b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5624b87e3aa0
|   | |     `-CXXThisExpr 0x5624b87fd0a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5624b87fd198 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5624b87fd168 <col:13, col:20> '<bound member function type>' ->clear 0x5624b8786d48
|   |     `-ImplicitCastExpr 0x5624b87fd150 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5624b87fd120 <col:13> 'Vector<String> *' lvalue ->_conf 0x5624b87e3aa0
|   |         `-CXXThisExpr 0x5624b87fd110 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5624b87fd240 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5624b87fd210 <col:9, col:16> '<bound member function type>' .clear 0x5624b87f8838
|   |   `-MemberExpr 0x5624b87fd1e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5624b87f8c50
|   |     `-CXXThisExpr 0x5624b87fd1d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5624b87fd288 <line:305:9, col:17>
|     `-UnaryOperator 0x5624b87fd270 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b87fd260 <col:17> 'Args *' this
|-CXXMethodDecl 0x5624b87c9e88 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5624b87c9d90 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5624b87ca008 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5624b87c9f40 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5624b87ca388 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5624b87ca0b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5624b87ca2e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5624b87ca158 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5624b87ca1d0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5624b87fd5b8 <col:67, line:327:5>
|     |-WhileStmt 0x5624b87fd568 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5624b87fd380 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5624b87fd300 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5624b86f5d58 0x5624b853f338 0x5624b853f010 0x5624b85307f0 0x5624b85304a0 0x5624b852fd90 0x5624b8502700 0x5624b848ebc0
|     | | |-DeclRefExpr 0x5624b87fd2c0 <col:16> 'Iter' lvalue ParmVar 0x5624b87ca158 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5624b87fd2e0 <col:25> 'Iter' lvalue ParmVar 0x5624b87ca1d0 'end' 'Iter'
|     | `-CompoundStmt 0x5624b87fd548 <col:30, line:325:9>
|     |   |-CallExpr 0x5624b87fd4e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5624b87fd3c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5624b87fd4b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5624b87fd448 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|     |   |   `-DeclRefExpr 0x5624b87fd428 <col:24> 'Iter' lvalue ParmVar 0x5624b87ca158 'begin' 'Iter'
|     |   `-UnaryOperator 0x5624b87fd530 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5624b87fd510 <col:15> 'Iter' lvalue ParmVar 0x5624b87ca158 'begin' 'Iter'
|     `-ReturnStmt 0x5624b87fd5a8 <line:326:9, col:17>
|       `-UnaryOperator 0x5624b87fd590 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87fd580 <col:17> 'Args *' this
|-CXXMethodDecl 0x5624b87ca490 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5624b87ca400 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5624b87ca5d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5624b87ca548 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5624b87ca6a0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5624b87fd698 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5624b87fd638 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5624b87fd5e8 <col:9> '<bound member function type>' ->reset_from 0x5624b87f90d8
|   | | `-CXXThisExpr 0x5624b87fd5d8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5624b87fd618 <col:20> 'int' 0
|   `-ReturnStmt 0x5624b87fd688 <line:352:9, col:17>
|     `-UnaryOperator 0x5624b87fd670 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b87fd660 <col:17> 'Args *' this
|-VarDecl 0x5624b87ca758 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5624b87ca7c0 <col:38> 'int' 1
|-VarDecl 0x5624b87ca850 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5624b87ca8b8 <col:39> 'int' 2
|-VarDecl 0x5624b87ca948 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5624b87ca9b0 <col:39> 'int' 4
|-VarDecl 0x5624b87caa40 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5624b87caaa8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5624b87cae28 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5624b87cab20 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87cad88 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5624b87cabd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cac78 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fd7f0 <col:43, line:371:5>
|     `-ReturnStmt 0x5624b87fd7e0 <line:370:9, col:34>
|       `-CallExpr 0x5624b87fd7a8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fd6c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fd748 <col:21> 'const char *' lvalue ParmVar 0x5624b87cabd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b87fd768 <col:30> 'int' 0
|         `-DeclRefExpr 0x5624b87fd788 <col:33> 'T' lvalue ParmVar 0x5624b87cac78 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87cb158 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5624b87cae90 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87cb0b8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5624b87caf40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cafe8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fd940 <col:45, line:375:5>
|     `-ReturnStmt 0x5624b87fd930 <line:374:9, col:42>
|       `-CallExpr 0x5624b87fd8f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fd818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fd898 <col:21> 'const char *' lvalue ParmVar 0x5624b87caf40 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87fd8b8 <col:30> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int'
|         `-DeclRefExpr 0x5624b87fd8d8 <col:41> 'T' lvalue ParmVar 0x5624b87cafe8 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87cb488 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5624b87cb1c0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5624b87cb3e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5624b87cb270 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5624b87cb318 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5624b87fda90 <col:45, line:379:5>
| |   `-ReturnStmt 0x5624b87fda80 <line:378:9, col:43>
| |     `-CallExpr 0x5624b87fda48 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5624b87fd968 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5624b87fd9e8 <col:21> 'const char *' lvalue ParmVar 0x5624b87cb270 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5624b87fda08 <col:30> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int'
| |       `-DeclRefExpr 0x5624b87fda28 <col:42> 'T' lvalue ParmVar 0x5624b87cb318 'x' 'T &'
| `-CXXMethodDecl 0x5624b88606b8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5624b88604d8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5624b88605a8 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x5624b87cb7b8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5624b87cb4f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87cb718 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5624b87cb5a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cb648 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fdc90 <col:46, line:383:5>
|     `-ReturnStmt 0x5624b87fdc80 <line:382:9, col:55>
|       `-CallExpr 0x5624b87fdc48 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fdab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fdb38 <col:21> 'const char *' lvalue ParmVar 0x5624b87cb5a0 'keyword' 'const char *'
|         |-BinaryOperator 0x5624b87fdc08 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5624b87fdbb8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5624b87fdb98 <col:30> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5624b87fdbf0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5624b87fdbd0 <col:42> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5624b87fdc28 <col:54> 'T' lvalue ParmVar 0x5624b87cb648 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87cbbb8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5624b87cb820 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87cbb18 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5624b87cb8d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cb950 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87cb9f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fddd0 <col:54, line:388:5>
|     |-CallExpr 0x5624b87fdd58 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b87fdca8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5624b87fdce8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5624b87fdcf8 <col:30> 'const char *' lvalue ParmVar 0x5624b87cb8d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5624b87fdd18 <col:39> 'int' lvalue ParmVar 0x5624b87cb950 'flags' 'int'
|     | `-DeclRefExpr 0x5624b87fdd38 <col:46> 'T' lvalue ParmVar 0x5624b87cb9f8 'x' 'T &'
|     `-ReturnStmt 0x5624b87fddc0 <line:387:9, col:17>
|       `-UnaryOperator 0x5624b87fdda8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87fdd98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87cc068 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5624b87cbc28 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5624b87cbca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5624b87cbfc8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5624b87cbd68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cbe08 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87cbea8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5624b87fdf40 <col:74, line:403:5>
|     `-ReturnStmt 0x5624b87fdf30 <line:402:9, col:56>
|       `-CallExpr 0x5624b87fdef0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fde00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fde70 <col:28> 'const char *' lvalue ParmVar 0x5624b87cbd68 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b87fde90 <col:37> 'int' 0
|         |-DeclRefExpr 0x5624b87fdeb0 <col:40> 'T' lvalue ParmVar 0x5624b87cbe08 'x' 'T &'
|         `-DeclRefExpr 0x5624b87fded0 <col:43> 'const V' lvalue ParmVar 0x5624b87cbea8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5624b87cc4d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5624b87cc0d8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5624b87cc158 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5624b87cc438 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5624b87cc218 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cc2b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87cc358 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5624b87fe0a8 <col:76, line:407:5>
|     `-ReturnStmt 0x5624b87fe098 <line:406:9, col:65>
|       `-CallExpr 0x5624b87fe058 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fdf68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fdfd8 <col:28> 'const char *' lvalue ParmVar 0x5624b87cc218 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87fdff8 <col:37> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int'
|         |-DeclRefExpr 0x5624b87fe018 <col:49> 'T' lvalue ParmVar 0x5624b87cc2b8 'x' 'T &'
|         `-DeclRefExpr 0x5624b87fe038 <col:52> 'const V' lvalue ParmVar 0x5624b87cc358 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5624b87cca28 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5624b87cc548 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5624b87cc5c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5624b87cc988 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5624b87cc688 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cc708 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87cc7a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87cc848 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5624b87fe210 <col:85, line:412:5>
|     |-CallExpr 0x5624b87fe190 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b87fe0c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5624b87fe100 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5624b87fe110 <col:37> 'const char *' lvalue ParmVar 0x5624b87cc688 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5624b87fe130 <col:46> 'int' lvalue ParmVar 0x5624b87cc708 'flags' 'int'
|     | |-DeclRefExpr 0x5624b87fe150 <col:53> 'T' lvalue ParmVar 0x5624b87cc7a8 'x' 'T &'
|     | `-DeclRefExpr 0x5624b87fe170 <col:56> 'const V' lvalue ParmVar 0x5624b87cc848 'default_value' 'const V &'
|     `-ReturnStmt 0x5624b87fe200 <line:411:9, col:17>
|       `-UnaryOperator 0x5624b87fe1e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87fe1d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87cceb8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5624b87ccaa0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87ccb18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87cce18 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87ccbd8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87ccc50 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cccf8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fe390 <col:53, line:425:5>
|     `-ReturnStmt 0x5624b87fe380 <line:424:9, col:42>
|       `-CallExpr 0x5624b87fe340 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fe240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fe2c0 <col:21> 'const char *' lvalue ParmVar 0x5624b87ccbd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b87fe2e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5624b87fe300 <col:33> 'P' lvalue ParmVar 0x5624b87ccc50 'parser' 'P'
|         `-DeclRefExpr 0x5624b87fe320 <col:41> 'T' lvalue ParmVar 0x5624b87cccf8 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87cd308 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5624b87ccf28 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87ccfa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87cd268 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87cd068 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cd0e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cd188 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fe508 <col:55, line:429:5>
|     `-ReturnStmt 0x5624b87fe4f8 <line:428:9, col:50>
|       `-CallExpr 0x5624b87fe4b8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fe3b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fe438 <col:21> 'const char *' lvalue ParmVar 0x5624b87cd068 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87fe458 <col:30> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int'
|         |-DeclRefExpr 0x5624b87fe478 <col:41> 'P' lvalue ParmVar 0x5624b87cd0e0 'parser' 'P'
|         `-DeclRefExpr 0x5624b87fe498 <col:49> 'T' lvalue ParmVar 0x5624b87cd188 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87cd758 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5624b87cd378 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87cd3f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87cd6b8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87cd4b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cd530 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cd5d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fe680 <col:55, line:433:5>
|     `-ReturnStmt 0x5624b87fe670 <line:432:9, col:51>
|       `-CallExpr 0x5624b87fe630 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fe530 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fe5b0 <col:21> 'const char *' lvalue ParmVar 0x5624b87cd4b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87fe5d0 <col:30> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int'
|         |-DeclRefExpr 0x5624b87fe5f0 <col:42> 'P' lvalue ParmVar 0x5624b87cd530 'parser' 'P'
|         `-DeclRefExpr 0x5624b87fe610 <col:50> 'T' lvalue ParmVar 0x5624b87cd5d8 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87cdba8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5624b87cd7c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87cd848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87cdb08 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87cd908 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cd980 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cda28 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fe8a8 <col:56, line:437:5>
|     `-ReturnStmt 0x5624b87fe898 <line:436:9, col:63>
|       `-CallExpr 0x5624b87fe858 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fe6a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fe728 <col:21> 'const char *' lvalue ParmVar 0x5624b87cd908 'keyword' 'const char *'
|         |-BinaryOperator 0x5624b87fe7f8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5624b87fe7a8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5624b87fe788 <col:30> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5624b87fe7e0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5624b87fe7c0 <col:42> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5624b87fe818 <col:54> 'P' lvalue ParmVar 0x5624b87cd980 'parser' 'P'
|         `-DeclRefExpr 0x5624b87fe838 <col:62> 'T' lvalue ParmVar 0x5624b87cda28 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87ce0d8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5624b87cdc18 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87cdc98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87ce038 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5624b87cdd58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cddd8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87cde50 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cdef8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fea10 <col:64, line:442:5>
|     |-CallExpr 0x5624b87fe990 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b87fe8c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5624b87fe900 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5624b87fe910 <col:30> 'const char *' lvalue ParmVar 0x5624b87cdd58 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5624b87fe930 <col:39> 'int' lvalue ParmVar 0x5624b87cddd8 'flags' 'int'
|     | |-DeclRefExpr 0x5624b87fe950 <col:46> 'P' lvalue ParmVar 0x5624b87cde50 'parser' 'P'
|     | `-DeclRefExpr 0x5624b87fe970 <col:54> 'T' lvalue ParmVar 0x5624b87cdef8 'x' 'T &'
|     `-ReturnStmt 0x5624b87fea00 <line:441:9, col:17>
|       `-UnaryOperator 0x5624b87fe9e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87fe9d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87ce6d8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5624b87ce150 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87ce1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5624b87ce248 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5624b87ce638 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5624b87ce310 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87ce388 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87ce428 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87ce4f8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5624b87feba8 <col:84, line:458:5>
|     `-ReturnStmt 0x5624b87feb98 <line:457:9, col:64>
|       `-CallExpr 0x5624b87feb50 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87fea40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87feab0 <col:28> 'const char *' lvalue ParmVar 0x5624b87ce310 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b87fead0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5624b87feaf0 <col:40> 'P' lvalue ParmVar 0x5624b87ce388 'parser' 'P'
|         |-DeclRefExpr 0x5624b87feb10 <col:48> 'T' lvalue ParmVar 0x5624b87ce428 'x' 'T &'
|         `-DeclRefExpr 0x5624b87feb30 <col:51> 'const V' lvalue ParmVar 0x5624b87ce4f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5624b87cec58 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5624b87ce750 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87ce7c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5624b87ce848 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5624b87cebb8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5624b87ce910 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87ce988 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cea28 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87ceac8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5624b87fed38 <col:86, line:462:5>
|     `-ReturnStmt 0x5624b87fed28 <line:461:9, col:73>
|       `-CallExpr 0x5624b87fece0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87febd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fec40 <col:28> 'const char *' lvalue ParmVar 0x5624b87ce910 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87fec60 <col:37> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int'
|         |-DeclRefExpr 0x5624b87fec80 <col:49> 'P' lvalue ParmVar 0x5624b87ce988 'parser' 'P'
|         |-DeclRefExpr 0x5624b87feca0 <col:57> 'T' lvalue ParmVar 0x5624b87cea28 'x' 'T &'
|         `-DeclRefExpr 0x5624b87fecc0 <col:60> 'const V' lvalue ParmVar 0x5624b87ceac8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5624b87cf2b8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5624b87cecd0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87ced48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5624b87cedc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5624b87cf218 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5624b87cee90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cef10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87cef88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87cf028 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87cf0c8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5624b87feec8 <col:95, line:467:5>
|     |-CallExpr 0x5624b87fee40 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b87fed50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5624b87fed90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5624b87feda0 <col:37> 'const char *' lvalue ParmVar 0x5624b87cee90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5624b87fedc0 <col:46> 'int' lvalue ParmVar 0x5624b87cef10 'flags' 'int'
|     | |-DeclRefExpr 0x5624b87fede0 <col:53> 'P' lvalue ParmVar 0x5624b87cef88 'parser' 'P'
|     | |-DeclRefExpr 0x5624b87fee00 <col:61> 'T' lvalue ParmVar 0x5624b87cf028 'x' 'T &'
|     | `-DeclRefExpr 0x5624b87fee20 <col:64> 'const V' lvalue ParmVar 0x5624b87cf0c8 'default_value' 'const V &'
|     `-ReturnStmt 0x5624b87feeb8 <line:466:9, col:17>
|       `-UnaryOperator 0x5624b87feea0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87fee90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d15d8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5624b87cf338 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87cf3b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5624b87cf438 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5624b87d1538 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5624b87cf500 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87cf578 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d1350 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5624b87d13f8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5624b87ff070 <col:63, line:481:5>
|     `-ReturnStmt 0x5624b87ff060 <line:480:9, col:47>
|       `-CallExpr 0x5624b87ff018 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87feef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fef78 <col:21> 'const char *' lvalue ParmVar 0x5624b87cf500 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b87fef98 <col:30> 'int' 0
|         |-DeclRefExpr 0x5624b87fefb8 <col:33> 'P' lvalue ParmVar 0x5624b87cf578 'parser' 'P'
|         |-DeclRefExpr 0x5624b87fefd8 <col:41> 'T1' lvalue ParmVar 0x5624b87d1350 'x1' 'T1 &'
|         `-DeclRefExpr 0x5624b87feff8 <col:45> 'T2' lvalue ParmVar 0x5624b87d13f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5624b87d1b58 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5624b87d1650 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d16c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5624b87d1748 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5624b87d1ab8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5624b87d1810 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d1888 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d1928 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5624b87d19c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5624b87ff210 <col:65, line:485:5>
|     `-ReturnStmt 0x5624b87ff200 <line:484:9, col:55>
|       `-CallExpr 0x5624b87ff1b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ff098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ff118 <col:21> 'const char *' lvalue ParmVar 0x5624b87d1810 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87ff138 <col:30> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int'
|         |-DeclRefExpr 0x5624b87ff158 <col:41> 'P' lvalue ParmVar 0x5624b87d1888 'parser' 'P'
|         |-DeclRefExpr 0x5624b87ff178 <col:49> 'T1' lvalue ParmVar 0x5624b87d1928 'x1' 'T1 &'
|         `-DeclRefExpr 0x5624b87ff198 <col:53> 'T2' lvalue ParmVar 0x5624b87d19c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5624b87d20d8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5624b87d1bd0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d1c48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5624b87d1cc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5624b87d2038 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5624b87d1d90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d1e08 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d1ea8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5624b87d1f48 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5624b87ff3b0 <col:65, line:489:5>
|     `-ReturnStmt 0x5624b87ff3a0 <line:488:9, col:56>
|       `-CallExpr 0x5624b87ff358 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ff238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ff2b8 <col:21> 'const char *' lvalue ParmVar 0x5624b87d1d90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87ff2d8 <col:30> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int'
|         |-DeclRefExpr 0x5624b87ff2f8 <col:42> 'P' lvalue ParmVar 0x5624b87d1e08 'parser' 'P'
|         |-DeclRefExpr 0x5624b87ff318 <col:50> 'T1' lvalue ParmVar 0x5624b87d1ea8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5624b87ff338 <col:54> 'T2' lvalue ParmVar 0x5624b87d1f48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5624b87d2658 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5624b87d2150 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d21c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5624b87d2248 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5624b87d25b8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5624b87d2310 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d2388 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d2428 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5624b87d24c8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5624b87ff600 <col:66, line:493:5>
|     `-ReturnStmt 0x5624b87ff5f0 <line:492:9, col:68>
|       `-CallExpr 0x5624b87ff5a8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ff3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ff458 <col:21> 'const char *' lvalue ParmVar 0x5624b87d2310 'keyword' 'const char *'
|         |-BinaryOperator 0x5624b87ff528 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5624b87ff4d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5624b87ff4b8 <col:30> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5624b87ff510 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5624b87ff4f0 <col:42> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5624b87ff548 <col:54> 'P' lvalue ParmVar 0x5624b87d2388 'parser' 'P'
|         |-DeclRefExpr 0x5624b87ff568 <col:62> 'T1' lvalue ParmVar 0x5624b87d2428 'x1' 'T1 &'
|         `-DeclRefExpr 0x5624b87ff588 <col:66> 'T2' lvalue ParmVar 0x5624b87d24c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5624b87d2cb8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5624b87d26d0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d2748 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5624b87d27c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5624b87d2c18 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5624b87d2890 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d2910 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d2988 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d2a28 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5624b87d2ac8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5624b87ff790 <col:74, line:498:5>
|     |-CallExpr 0x5624b87ff708 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b87ff618 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5624b87ff658 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5624b87ff668 <col:30> 'const char *' lvalue ParmVar 0x5624b87d2890 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5624b87ff688 <col:39> 'int' lvalue ParmVar 0x5624b87d2910 'flags' 'int'
|     | |-DeclRefExpr 0x5624b87ff6a8 <col:46> 'P' lvalue ParmVar 0x5624b87d2988 'parser' 'P'
|     | |-DeclRefExpr 0x5624b87ff6c8 <col:54> 'T1' lvalue ParmVar 0x5624b87d2a28 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5624b87ff6e8 <col:58> 'T2' lvalue ParmVar 0x5624b87d2ac8 'x2' 'T2 &'
|     `-ReturnStmt 0x5624b87ff780 <line:497:9, col:17>
|       `-UnaryOperator 0x5624b87ff768 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87ff758 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d3018 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5624b87d2d38 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d2f78 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5624b87d2df0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d2e68 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5624b87ff8d8 <col:52, line:509:5>
|     `-ReturnStmt 0x5624b87ff8c8 <line:508:9, col:44>
|       `-CallExpr 0x5624b87ff890 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ff7c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ff830 <col:26> 'const char *' lvalue ParmVar 0x5624b87d2df0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b87ff850 <col:35> 'int' 0
|         `-DeclRefExpr 0x5624b87ff870 <col:38> 'P' lvalue ParmVar 0x5624b87d2e68 'parser' 'P'
|-FunctionTemplateDecl 0x5624b87d3318 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5624b87d3080 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d3278 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5624b87d3130 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d31a8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5624b87ffa18 <col:54, line:513:5>
|     `-ReturnStmt 0x5624b87ffa08 <line:512:9, col:52>
|       `-CallExpr 0x5624b87ff9d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ff900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ff970 <col:26> 'const char *' lvalue ParmVar 0x5624b87d3130 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87ff990 <col:35> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int'
|         `-DeclRefExpr 0x5624b87ff9b0 <col:46> 'P' lvalue ParmVar 0x5624b87d31a8 'parser' 'P'
|-FunctionTemplateDecl 0x5624b87d3618 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5624b87d3380 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d3578 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5624b87d3430 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d34a8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5624b87ffb58 <col:54, line:517:5>
|     `-ReturnStmt 0x5624b87ffb48 <line:516:9, col:53>
|       `-CallExpr 0x5624b87ffb10 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ffa40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ffab0 <col:26> 'const char *' lvalue ParmVar 0x5624b87d3430 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87ffad0 <col:35> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int'
|         `-DeclRefExpr 0x5624b87ffaf0 <col:47> 'P' lvalue ParmVar 0x5624b87d34a8 'parser' 'P'
|-FunctionTemplateDecl 0x5624b87d3918 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5624b87d3680 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d3878 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5624b87d3730 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d37a8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5624b87ffd48 <col:55, line:521:5>
|     `-ReturnStmt 0x5624b87ffd38 <line:520:9, col:65>
|       `-CallExpr 0x5624b87ffd00 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ffb80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87ffbf0 <col:26> 'const char *' lvalue ParmVar 0x5624b87d3730 'keyword' 'const char *'
|         |-BinaryOperator 0x5624b87ffcc0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5624b87ffc70 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5624b87ffc50 <col:35> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5624b87ffca8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5624b87ffc88 <col:47> 'const int' lvalue Var 0x5624b87ca850 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5624b87ffce0 <col:59> 'P' lvalue ParmVar 0x5624b87d37a8 'parser' 'P'
|-FunctionTemplateDecl 0x5624b87d3ce8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5624b87d3980 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d3c48 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5624b87d3a30 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d3ab0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d3b28 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5624b87ffe88 <col:63, line:526:5>
|     |-CallExpr 0x5624b87ffe10 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b87ffd60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5624b87ffda0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5624b87ffdb0 <col:35> 'const char *' lvalue ParmVar 0x5624b87d3a30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5624b87ffdd0 <col:44> 'int' lvalue ParmVar 0x5624b87d3ab0 'flags' 'int'
|     | `-DeclRefExpr 0x5624b87ffdf0 <col:51> 'P' lvalue ParmVar 0x5624b87d3b28 'parser' 'P'
|     `-ReturnStmt 0x5624b87ffe78 <line:525:9, col:17>
|       `-UnaryOperator 0x5624b87ffe60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87ffe50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d4138 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5624b87d3d58 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d3dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d4098 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87d3e98 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d3f10 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d3fb8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5624b87fffe0 <col:58, line:541:5>
|     `-ReturnStmt 0x5624b87fffd0 <line:540:9, col:39>
|       `-CallExpr 0x5624b87fff98 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b87ffeb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b87fff38 <col:21> 'const char *' lvalue ParmVar 0x5624b87d3e98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b87fff58 <col:30> 'P' lvalue ParmVar 0x5624b87d3f10 'parser' 'P'
|         `-DeclRefExpr 0x5624b87fff78 <col:38> 'T' lvalue ParmVar 0x5624b87d3fb8 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d4588 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5624b87d41a8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d4228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d44e8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87d42e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d4360 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d4408 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5624b8800118 <col:60, line:545:5>
|     `-ReturnStmt 0x5624b8800108 <line:544:9, col:41>
|       `-CallExpr 0x5624b88000d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800008 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b8800070 <col:23> 'const char *' lvalue ParmVar 0x5624b87d42e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b8800090 <col:32> 'P' lvalue ParmVar 0x5624b87d4360 'parser' 'P'
|         `-DeclRefExpr 0x5624b88000b0 <col:40> 'T' lvalue ParmVar 0x5624b87d4408 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d49d8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5624b87d45f8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d4678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d4938 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87d4738 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d47b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d4858 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5624b8800250 <col:60, line:549:5>
|     `-ReturnStmt 0x5624b8800240 <line:548:9, col:41>
|       `-CallExpr 0x5624b8800208 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b88001a8 <col:23> 'const char *' lvalue ParmVar 0x5624b87d4738 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b88001c8 <col:32> 'P' lvalue ParmVar 0x5624b87d47b0 'parser' 'P'
|         `-DeclRefExpr 0x5624b88001e8 <col:40> 'T' lvalue ParmVar 0x5624b87d4858 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d4e28 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5624b87d4a48 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d4ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d4d88 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87d4b88 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d4c00 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d4ca8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5624b8800388 <col:61, line:553:5>
|     `-ReturnStmt 0x5624b8800378 <line:552:9, col:42>
|       `-CallExpr 0x5624b8800340 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b88002e0 <col:24> 'const char *' lvalue ParmVar 0x5624b87d4b88 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b8800300 <col:33> 'P' lvalue ParmVar 0x5624b87d4c00 'parser' 'P'
|         `-DeclRefExpr 0x5624b8800320 <col:41> 'T' lvalue ParmVar 0x5624b87d4ca8 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d5308 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5624b87d4e98 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d4f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d5268 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5624b87d4fd8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d5058 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d50d0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d5178 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5624b8800500 <col:69, line:557:5>
|     `-ReturnStmt 0x5624b88004f0 <line:556:9, col:46>
|       `-CallExpr 0x5624b88004b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b88003b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b8800430 <col:21> 'const char *' lvalue ParmVar 0x5624b87d4fd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b8800450 <col:30> 'int' lvalue ParmVar 0x5624b87d5058 'flags' 'int'
|         |-DeclRefExpr 0x5624b8800470 <col:37> 'P' lvalue ParmVar 0x5624b87d50d0 'parser' 'P'
|         `-DeclRefExpr 0x5624b8800490 <col:45> 'T' lvalue ParmVar 0x5624b87d5178 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d5618 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5624b87d5380 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d5578 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5624b87d5430 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d54a8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5624b8800640 <col:56, line:571:5>
|     `-ReturnStmt 0x5624b8800630 <line:570:9, col:48>
|       `-CallExpr 0x5624b88005f8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b8800598 <col:30> 'const char *' lvalue ParmVar 0x5624b87d5430 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b88005b8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5624b88005d8 <col:42> 'P' lvalue ParmVar 0x5624b87d54a8 'parser' 'P'
|-FunctionTemplateDecl 0x5624b87d59a8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5624b87d5680 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87d5908 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5624b87d5730 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d57b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d5828 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5624b8800810 <col:67, line:576:5>
|     |-CallExpr 0x5624b8800798 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b8800658 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5624b8800698 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5624b88006a8 <col:39> 'const char *' lvalue ParmVar 0x5624b87d5730 'keyword' 'const char *'
|     | |-BinaryOperator 0x5624b8800758 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5624b8800708 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5624b88006c8 <col:48> 'int' lvalue ParmVar 0x5624b87d57b0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5624b8800740 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5624b8800720 <col:56> 'const int' lvalue Var 0x5624b87caa40 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5624b8800778 <col:68> 'P' lvalue ParmVar 0x5624b87d5828 'parser' 'P'
|     `-ReturnStmt 0x5624b8800800 <line:575:9, col:17>
|       `-UnaryOperator 0x5624b88007e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b88007d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d5df8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5624b87d5a18 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d5a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d5d58 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5624b87d5b58 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d5bd0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d5c78 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5624b8800980 <col:62, line:592:5>
|     `-ReturnStmt 0x5624b8800970 <line:591:9, col:51>
|       `-CallExpr 0x5624b8800930 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800840 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b88008b0 <col:30> 'const char *' lvalue ParmVar 0x5624b87d5b58 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b88008d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5624b88008f0 <col:42> 'P' lvalue ParmVar 0x5624b87d5bd0 'parser' 'P'
|         `-DeclRefExpr 0x5624b8800910 <col:50> 'T' lvalue ParmVar 0x5624b87d5c78 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d62d8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5624b87d5e68 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d5ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d6238 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5624b87d5fa8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d6028 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d60a0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d6148 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5624b8800b78 <col:73, line:597:5>
|     |-CallExpr 0x5624b8800af8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b8800998 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5624b88009d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5624b88009e8 <col:39> 'const char *' lvalue ParmVar 0x5624b87d5fa8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5624b8800a98 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5624b8800a48 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5624b8800a08 <col:48> 'int' lvalue ParmVar 0x5624b87d6028 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5624b8800a80 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5624b8800a60 <col:56> 'const int' lvalue Var 0x5624b87caa40 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5624b8800ab8 <col:68> 'P' lvalue ParmVar 0x5624b87d60a0 'parser' 'P'
|     | `-DeclRefExpr 0x5624b8800ad8 <col:76> 'T' lvalue ParmVar 0x5624b87d6148 'x' 'T &'
|     `-ReturnStmt 0x5624b8800b68 <line:596:9, col:17>
|       `-UnaryOperator 0x5624b8800b50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b8800b40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d6888 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5624b87d6350 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d63c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d67e8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5624b87d6488 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d6500 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d66c0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5624b8800ce8 <col:65, line:614:5>
|     `-ReturnStmt 0x5624b8800cd8 <line:613:9, col:46>
|       `-CallExpr 0x5624b8800c98 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800ba8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b8800c18 <col:25> 'const char *' lvalue ParmVar 0x5624b87d6488 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b8800c38 <col:34> 'int' 0
|         |-DeclRefExpr 0x5624b8800c58 <col:37> 'P' lvalue ParmVar 0x5624b87d6500 'parser' 'P'
|         `-DeclRefExpr 0x5624b8800c78 <col:45> 'Vector<T>' lvalue ParmVar 0x5624b87d66c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5624b87d6cb8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5624b87d68f8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87d6c18 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5624b87d69b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d6b00 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5624b8800f00 <col:55, line:618:5>
|     `-ReturnStmt 0x5624b8800ef0 <line:617:9, col:55>
|       `-CallExpr 0x5624b8800eb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8800d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b8800d80 <col:25> 'const char *' lvalue ParmVar 0x5624b87d69b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5624b8800da0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5624b8800e70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5624b8800e90 <col:54> 'Vector<T>' lvalue ParmVar 0x5624b87d6b00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5624b87d7288 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5624b87d6d20 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d6d98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d71e8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5624b87d6e58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d6ed8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d6f50 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87d70a0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5624b88010f8 <col:76, line:623:5>
|     |-CallExpr 0x5624b8801078 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5624b8800f18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5624b8800f58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5624b8800f68 <col:34> 'const char *' lvalue ParmVar 0x5624b87d6e58 'keyword' 'const char *'
|     | |-BinaryOperator 0x5624b8801018 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5624b8800fc8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5624b8800f88 <col:43> 'int' lvalue ParmVar 0x5624b87d6ed8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5624b8801000 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5624b8800fe0 <col:51> 'const int' lvalue Var 0x5624b87caa40 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5624b8801038 <col:63> 'P' lvalue ParmVar 0x5624b87d6f50 'parser' 'P'
|     | `-DeclRefExpr 0x5624b8801058 <col:71> 'Vector<T>' lvalue ParmVar 0x5624b87d70a0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5624b88010e8 <line:622:9, col:17>
|       `-UnaryOperator 0x5624b88010d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b88010c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d77c8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5624b87d7300 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87d7378 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87d7728 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5624b87d7438 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d74b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d7600 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5624b8801360 <col:66, line:627:5>
|     `-ReturnStmt 0x5624b8801350 <line:626:9, col:59>
|       `-CallExpr 0x5624b8801310 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5624b8801128 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5624b8801198 <col:25> 'const char *' lvalue ParmVar 0x5624b87d7438 'keyword' 'const char *'
|         |-DeclRefExpr 0x5624b88011b8 <col:34> 'int' lvalue ParmVar 0x5624b87d74b8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5624b88012d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5624b88012f0 <col:58> 'Vector<T>' lvalue ParmVar 0x5624b87d7600 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5624b87d7858 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5624b88013e0 <col:25, line:633:5>
|   `-ReturnStmt 0x5624b88013d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5624b88013b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5624b8801388 <col:16> 'const bool' lvalue ->_status 0x5624b87e3908
|         `-CXXThisExpr 0x5624b8801378 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5624b87d79d8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5624b87d7910 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5624b88014c8 <col:27, line:639:5>
|   |-BinaryOperator 0x5624b8801470 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5624b88013f8 <col:9> 'bool' lvalue ParmVar 0x5624b87d7910 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5624b8801458 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5624b8801428 <col:13> 'bool' lvalue ->_status 0x5624b87e3908
|   |     `-CXXThisExpr 0x5624b8801418 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5624b88014b8 <line:638:9, col:17>
|     `-UnaryOperator 0x5624b88014a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b8801490 <col:17> 'Args *' this
|-CXXMethodDecl 0x5624b87d7b58 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5624b87d7a98 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5624b88015b8 <col:39, line:644:5>
|   |-BinaryOperator 0x5624b8801560 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5624b88014e8 <col:9> 'bool' lvalue ParmVar 0x5624b87d7a98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5624b8801548 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5624b8801518 <col:13> 'const bool' lvalue ->_status 0x5624b87e3908
|   |     `-CXXThisExpr 0x5624b8801508 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5624b88015a8 <line:643:9, col:17>
|     `-UnaryOperator 0x5624b8801590 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b8801580 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5624b87d7c20 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5624b8801660 <col:30, line:651:5>
|   `-ReturnStmt 0x5624b8801650 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5624b8801638 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5624b8801608 <col:16> 'bool' lvalue ->_read_status 0x5624b87c3210
|         `-ImplicitCastExpr 0x5624b88015e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5624b88015d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5624b87d7d68 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5624b87d7cd8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5624b8801768 <col:32, line:658:5>
|   |-BinaryOperator 0x5624b8801710 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5624b8801678 <col:9> 'bool' lvalue ParmVar 0x5624b87d7cd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5624b88016f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5624b88016c8 <col:13> 'bool' lvalue ->_read_status 0x5624b87c3210
|   |     `-ImplicitCastExpr 0x5624b88016a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5624b8801698 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5624b8801758 <line:657:9, col:17>
|     `-UnaryOperator 0x5624b8801740 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b8801730 <col:17> 'Args *' this
|-CXXMethodDecl 0x5624b87d7eb8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5624b87d7e28 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5624b8801878 <col:44, line:663:5>
|   |-BinaryOperator 0x5624b8801820 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5624b8801788 <col:9> 'bool' lvalue ParmVar 0x5624b87d7e28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5624b8801808 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5624b88017d8 <col:13> 'bool' lvalue ->_read_status 0x5624b87c3210
|   |     `-ImplicitCastExpr 0x5624b88017b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5624b88017a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5624b8801868 <line:662:9, col:17>
|     `-UnaryOperator 0x5624b8801850 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b8801840 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5624b87d7f80 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5624b87d8048 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5624b87d8110 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5624b87d81d8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5624b87d84e8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5624b87d8278 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87d8448 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5624b87d8358 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5624b8801c30 <col:19, line:706:5>
|     `-IfStmt 0x5624b8801c08 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5624b8801978 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5624b8801b38 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5624b8801b08 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5624b8801ac8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5624b88019d0 <col:42> '<bound member function type>' ->simple_slot 0x5624b87fc6c0
|       |     | `-CXXThisExpr 0x5624b88019c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5624b8801a68 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5624b8801a20 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5624b8543dd8
|       |     | `-DeclRefExpr 0x5624b8801a00 <col:55> 'T' lvalue ParmVar 0x5624b87d8358 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5624b8801aa8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5624b8801bf8 <line:705:13, col:34>
|         `-CallExpr 0x5624b8801bd0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5624b8801b58 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5624b8801bb0 <col:33> 'T' lvalue ParmVar 0x5624b87d8358 'x' 'T &'
|-FunctionTemplateDecl 0x5624b87d87b8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5624b87d8548 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87d8718 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5624b87d8628 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5624b8802010 <col:31, line:717:5>
|     |-DeclStmt 0x5624b8801d70 <line:713:9, col:23>
|     | `-VarDecl 0x5624b8801c58 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5624b8801d48 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5624b8801cd0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5624b8801d28 <col:21> 'T' lvalue ParmVar 0x5624b87d8628 'x' 'T &'
|     |-IfStmt 0x5624b8801fc0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5624b8801e68 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5624b8801fa0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5624b8801f40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5624b8801ed0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|     |   | `-DeclRefExpr 0x5624b8801eb0 <col:14> 'T *' lvalue Var 0x5624b8801c58 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5624b8801f80 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5624b8801ff8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5624b8801fd8 <col:16> 'T *' lvalue Var 0x5624b8801c58 's' 'T *'
|-FunctionTemplateDecl 0x5624b87d8bc8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5624b87d8818 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5624b87d8898 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5624b87d8b28 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5624b87d8978 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5624b87d8a18 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5624b8802320 <col:37, line:726:5>
|     |-IfStmt 0x5624b88022b0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5624b88022d0 <line:723:13, col:26>
|     | | `-VarDecl 0x5624b8802078 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5624b8802168 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5624b88020f0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5624b8802148 <col:25> 'T' lvalue ParmVar 0x5624b87d8978 'x' 'T &'
|     | |-DeclRefExpr 0x5624b8802190 <col:16> 'T *' lvalue Var 0x5624b8802078 's' 'T *'
|     | `-BinaryOperator 0x5624b8802290 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5624b8802240 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5624b88021d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|     |   | `-DeclRefExpr 0x5624b88021b0 <col:14> 'T *' lvalue Var 0x5624b8802078 's' 'T *'
|     |   `-DeclRefExpr 0x5624b8802270 <col:18> 'const V' lvalue ParmVar 0x5624b87d8a18 'value' 'const V &'
|     `-ReturnStmt 0x5624b8802310 <line:725:9, col:17>
|       `-UnaryOperator 0x5624b88022f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b88022e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5624b87d8fc8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5624b87d8c30 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5624b87d8f28 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5624b87d8ce0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d8d60 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d8e08 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5624b8803140 <col:65, line:737:5>
|     |-DeclStmt 0x5624b88023b8 <line:732:9, col:26>
|     | `-VarDecl 0x5624b8802350 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5624b8803108 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5624b8803128 <line:733:13, col:58>
|       | `-VarDecl 0x5624b88023e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5624b88025c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5624b8802590 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5624b8802578 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5624b8802558 <col:26, col:58> 'String' (CXXTemporary 0x5624b8802558)
|       |           `-CXXMemberCallExpr 0x5624b88024e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5624b8802458 <col:26> '<bound member function type>' ->find 0x5624b87f93a8
|       |             | `-CXXThisExpr 0x5624b8802448 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5624b8802520 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8802488 <col:31> 'const char *' lvalue ParmVar 0x5624b87d8ce0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5624b8802538 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b88024a8 <col:40> 'int' lvalue ParmVar 0x5624b87d8d60 'flags' 'int'
|       |             `-DeclRefExpr 0x5624b88024c8 <col:47> 'Args::Slot *' lvalue Var 0x5624b8802350 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5624b8802678 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5624b8802660 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5624b8802640 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5624b8802610 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |       `-ImplicitCastExpr 0x5624b88025f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5624b88025d8 <col:20> 'String' lvalue Var 0x5624b88023e0 'str' 'String'
|       `-CompoundStmt 0x5624b88030e8 <col:61, line:736:9>
|         |-DeclStmt 0x5624b8802b30 <line:734:13, col:76>
|         | `-VarDecl 0x5624b88026c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5624b8802b00 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5624b8802a70 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5624b8802ab8 <col:60> 'T' lvalue ParmVar 0x5624b87d8e08 'variable' 'T &'
|         |     `-UnaryOperator 0x5624b8802ae8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5624b8802ad8 <col:71> 'Args *' this
|         `-CallExpr 0x5624b88030b8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5624b8802b58 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|           | `-CXXThisExpr 0x5624b8802b48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5624b8803078 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5624b8802b88 <col:23> 'T *' lvalue Var 0x5624b88026c8 's' 'T *'
|           | `-CallExpr 0x5624b8803038 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5624b8802e10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5624b8802f10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5624b8802f30 <col:86> 'String' lvalue Var 0x5624b88023e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5624b8802fe0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5624b8802f70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|           |   | `-DeclRefExpr 0x5624b8802f50 <col:92> 'T *' lvalue Var 0x5624b88026c8 's' 'T *'
|           |   `-UnaryOperator 0x5624b8803020 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5624b8803010 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5624b8803098 <col:103> 'Args::Slot *' lvalue Var 0x5624b8802350 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5624b87df788 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5624b87d9038 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5624b87d90b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5624b87df6e8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5624b87d9178 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87d91f8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87d9298 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5624b87df5a0 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5624b8803fe0 <col:88, line:745:5>
|     |-DeclStmt 0x5624b88031d8 <line:741:9, col:26>
|     | `-VarDecl 0x5624b8803170 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5624b88033f8 <line:742:9, col:55>
|     | `-VarDecl 0x5624b8803200 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5624b88033e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5624b88033b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5624b8803398 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5624b8803378 <col:22, col:54> 'String' (CXXTemporary 0x5624b8803378)
|     |           `-CXXMemberCallExpr 0x5624b8803308 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5624b8803278 <col:22> '<bound member function type>' ->find 0x5624b87f93a8
|     |             | `-CXXThisExpr 0x5624b8803268 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5624b8803340 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5624b88032a8 <col:27> 'const char *' lvalue ParmVar 0x5624b87d9178 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5624b8803358 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5624b88032c8 <col:36> 'int' lvalue ParmVar 0x5624b87d91f8 'flags' 'int'
|     |             `-DeclRefExpr 0x5624b88032e8 <col:43> 'Args::Slot *' lvalue Var 0x5624b8803170 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5624b88037d0 <line:743:9, col:72>
|     | `-VarDecl 0x5624b8803448 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5624b88037a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5624b8803710 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5624b8803758 <col:56> 'T' lvalue ParmVar 0x5624b87d9298 'variable' 'T &'
|     |     `-UnaryOperator 0x5624b8803788 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5624b8803778 <col:67> 'Args *' this
|     `-CallExpr 0x5624b8803fb0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5624b88037f8 <col:9> '<bound member function type>' ->postparse 0x5624b87f95b8
|       | `-CXXThisExpr 0x5624b88037e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5624b8803f70 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5624b8803828 <col:19> 'T *' lvalue Var 0x5624b8803448 's' 'T *'
|       | `-ParenExpr 0x5624b8803f50 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5624b8803f20 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5624b8803f08 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5624b8803ef0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5624b8803ed0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5624b8803ea0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |     |       `-ImplicitCastExpr 0x5624b8803e88 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5624b8803848 <col:25> 'String' lvalue Var 0x5624b8803200 'str' 'String'
|       |     |-CallExpr 0x5624b8803cf8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5624b8803ad0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5624b8803bd0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5624b8803bf0 <col:89> 'String' lvalue Var 0x5624b8803200 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5624b8803ca0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5624b8803c30 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|       |     | | `-DeclRefExpr 0x5624b8803c10 <col:95> 'T *' lvalue Var 0x5624b8803448 's' 'T *'
|       |     | `-UnaryOperator 0x5624b8803ce0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5624b8803cd0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5624b8803e68 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5624b8803e48 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5624b8803e18 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5624b8803dc8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5624b8803d58 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|       |         | | `-DeclRefExpr 0x5624b8803d38 <col:109> 'T *' lvalue Var 0x5624b8803448 's' 'T *'
|       |         | `-DeclRefExpr 0x5624b8803df8 <col:113> 'const V' lvalue ParmVar 0x5624b87df5a0 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5624b8803e38 <col:120> 'bool' true
|       `-DeclRefExpr 0x5624b8803f90 <col:128> 'Args::Slot *' lvalue Var 0x5624b8803170 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5624b87dfcb8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5624b87df800 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87df878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87dfc18 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5624b87df938 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87df9b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87dfa30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87dfad8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5624b8806da8 <col:75, line:754:5>
|     |-DeclStmt 0x5624b8804088 <line:749:9, col:26>
|     | `-VarDecl 0x5624b8804020 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5624b8806d70 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5624b8806d90 <line:750:13, col:58>
|       | `-VarDecl 0x5624b88040b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5624b8806458 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5624b8806428 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5624b8806410 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5624b88063f0 <col:26, col:58> 'String' (CXXTemporary 0x5624b88063f0)
|       |           `-CXXMemberCallExpr 0x5624b88041b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5624b8804128 <col:26> '<bound member function type>' ->find 0x5624b87f93a8
|       |             | `-CXXThisExpr 0x5624b8804118 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5624b88041f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8804158 <col:31> 'const char *' lvalue ParmVar 0x5624b87df938 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5624b8804208 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8804178 <col:40> 'int' lvalue ParmVar 0x5624b87df9b8 'flags' 'int'
|       |             `-DeclRefExpr 0x5624b8804198 <col:47> 'Args::Slot *' lvalue Var 0x5624b8804020 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5624b8806510 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5624b88064f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5624b88064d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5624b88064a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |       `-ImplicitCastExpr 0x5624b8806490 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5624b8806470 <col:20> 'String' lvalue Var 0x5624b88040b0 'str' 'String'
|       `-CompoundStmt 0x5624b8806d50 <col:61, line:753:9>
|         |-DeclStmt 0x5624b88068f0 <line:751:13, col:63>
|         | `-VarDecl 0x5624b8806568 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5624b88068c0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5624b8806830 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5624b8806878 <col:47> 'T' lvalue ParmVar 0x5624b87dfad8 'variable' 'T &'
|         |     `-UnaryOperator 0x5624b88068a8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5624b8806898 <col:58> 'Args *' this
|         `-CallExpr 0x5624b8806d20 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5624b8806918 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|           | `-CXXThisExpr 0x5624b8806908 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5624b8806ce0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5624b8806948 <col:23> 'T *' lvalue Var 0x5624b8806568 's' 'T *'
|           | `-CallExpr 0x5624b8806ca0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5624b8806b30 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5624b8806b78 <col:56> 'P' lvalue ParmVar 0x5624b87dfa30 'parser' 'P'
|           |   |-DeclRefExpr 0x5624b8806b98 <col:64> 'String' lvalue Var 0x5624b88040b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5624b8806c48 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5624b8806bd8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|           |   | `-DeclRefExpr 0x5624b8806bb8 <col:70> 'T *' lvalue Var 0x5624b8806568 's' 'T *'
|           |   `-UnaryOperator 0x5624b8806c88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5624b8806c78 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5624b8806d00 <col:81> 'Args::Slot *' lvalue Var 0x5624b8804020 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5624b87e0318 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5624b87dfd30 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5624b87dfda8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5624b87dfe28 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5624b87e0278 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5624b87dfef0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87dff70 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87dffe8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87e0088 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5624b87e0128 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5624b8807b38 <col:98, line:762:5>
|     |-DeclStmt 0x5624b8806e40 <line:758:9, col:26>
|     | `-VarDecl 0x5624b8806dd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5624b8807060 <line:759:9, col:55>
|     | `-VarDecl 0x5624b8806e68 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5624b8807048 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5624b8807018 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5624b8807000 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5624b8806fe0 <col:22, col:54> 'String' (CXXTemporary 0x5624b8806fe0)
|     |           `-CXXMemberCallExpr 0x5624b8806f70 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5624b8806ee0 <col:22> '<bound member function type>' ->find 0x5624b87f93a8
|     |             | `-CXXThisExpr 0x5624b8806ed0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5624b8806fa8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5624b8806f10 <col:27> 'const char *' lvalue ParmVar 0x5624b87dfef0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5624b8806fc0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5624b8806f30 <col:36> 'int' lvalue ParmVar 0x5624b87dff70 'flags' 'int'
|     |             `-DeclRefExpr 0x5624b8806f50 <col:43> 'Args::Slot *' lvalue Var 0x5624b8806dd8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5624b8807480 <line:760:9, col:59>
|     | `-VarDecl 0x5624b88070b8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5624b8807450 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5624b88073c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5624b8807408 <col:43> 'T' lvalue ParmVar 0x5624b87e0088 'variable' 'T &'
|     |     `-UnaryOperator 0x5624b8807438 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5624b8807428 <col:54> 'Args *' this
|     `-CallExpr 0x5624b8807b08 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5624b88074a8 <col:9> '<bound member function type>' ->postparse 0x5624b87f95b8
|       | `-CXXThisExpr 0x5624b8807498 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5624b8807ac8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5624b88074d8 <col:19> 'T *' lvalue Var 0x5624b88070b8 's' 'T *'
|       | `-ParenExpr 0x5624b8807aa8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5624b8807a78 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5624b8807a60 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5624b8807a48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5624b8807a28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5624b88079f8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |     |       `-ImplicitCastExpr 0x5624b88079e0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5624b88074f8 <col:25> 'String' lvalue Var 0x5624b8806e68 'str' 'String'
|       |     |-CallExpr 0x5624b8807850 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5624b88076e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5624b8807728 <col:59> 'P' lvalue ParmVar 0x5624b87dffe8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5624b8807748 <col:67> 'String' lvalue Var 0x5624b8806e68 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5624b88077f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5624b8807788 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|       |     | | `-DeclRefExpr 0x5624b8807768 <col:73> 'T *' lvalue Var 0x5624b88070b8 's' 'T *'
|       |     | `-UnaryOperator 0x5624b8807838 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5624b8807828 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5624b88079c0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5624b88079a0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5624b8807970 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5624b8807920 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5624b88078b0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|       |         | | `-DeclRefExpr 0x5624b8807890 <col:87> 'T *' lvalue Var 0x5624b88070b8 's' 'T *'
|       |         | `-DeclRefExpr 0x5624b8807950 <col:91> 'const V' lvalue ParmVar 0x5624b87e0128 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5624b8807990 <col:98> 'bool' true
|       `-DeclRefExpr 0x5624b8807ae8 <col:106> 'Args::Slot *' lvalue Var 0x5624b8806dd8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5624b87e0988 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5624b87e0398 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87e0418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5624b87e0498 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5624b87e08e8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5624b87e0560 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87e05e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87e0658 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87e06f8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5624b87e0798 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5624b8808b18 <col:60, line:773:5>
|     |-DeclStmt 0x5624b8807be0 <line:767:9, col:26>
|     | `-VarDecl 0x5624b8807b78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5624b8808ae0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5624b8808b00 <line:768:13, col:58>
|       | `-VarDecl 0x5624b8807c08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5624b8807de8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5624b8807db8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5624b8807da0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5624b8807d80 <col:26, col:58> 'String' (CXXTemporary 0x5624b8807d80)
|       |           `-CXXMemberCallExpr 0x5624b8807d10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5624b8807c80 <col:26> '<bound member function type>' ->find 0x5624b87f93a8
|       |             | `-CXXThisExpr 0x5624b8807c70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5624b8807d48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8807cb0 <col:31> 'const char *' lvalue ParmVar 0x5624b87e0560 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5624b8807d60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8807cd0 <col:40> 'int' lvalue ParmVar 0x5624b87e05e0 'flags' 'int'
|       |             `-DeclRefExpr 0x5624b8807cf0 <col:47> 'Args::Slot *' lvalue Var 0x5624b8807b78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5624b8807ea0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5624b8807e88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5624b8807e68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5624b8807e38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |       `-ImplicitCastExpr 0x5624b8807e20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5624b8807e00 <col:20> 'String' lvalue Var 0x5624b8807c08 'str' 'String'
|       `-CompoundStmt 0x5624b8808ab8 <col:61, line:772:9>
|         |-DeclStmt 0x5624b88081e0 <line:769:13, col:66>
|         | `-VarDecl 0x5624b8807ef8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5624b88081b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5624b8808120 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5624b8808168 <col:49> 'T1' lvalue ParmVar 0x5624b87e06f8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5624b8808198 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5624b8808188 <col:61> 'Args *' this
|         |-DeclStmt 0x5624b8808550 <line:770:13, col:66>
|         | `-VarDecl 0x5624b8808268 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5624b8808520 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5624b8808490 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5624b88084d8 <col:49> 'T2' lvalue ParmVar 0x5624b87e0798 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5624b8808508 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5624b88084f8 <col:61> 'Args *' this
|         `-CallExpr 0x5624b8808a88 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5624b8808578 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|           | `-CXXThisExpr 0x5624b8808568 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5624b8808a48 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5624b88085e8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5624b88085a8 <col:23> 'T1 *' lvalue Var 0x5624b8807ef8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5624b88085c8 <col:29> 'T2 *' lvalue Var 0x5624b8808268 's2' 'T2 *'
|           | `-CallExpr 0x5624b8808a00 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5624b88087d0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5624b8808818 <col:63> 'P' lvalue ParmVar 0x5624b87e0658 'parser' 'P'
|           |   |-DeclRefExpr 0x5624b8808838 <col:71> 'String' lvalue Var 0x5624b8807c08 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5624b88088e8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5624b8808878 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|           |   | `-DeclRefExpr 0x5624b8808858 <col:77> 'T1 *' lvalue Var 0x5624b8807ef8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5624b88089a8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5624b8808938 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|           |   | `-DeclRefExpr 0x5624b8808918 <col:82> 'T2 *' lvalue Var 0x5624b8808268 's2' 'T2 *'
|           |   `-UnaryOperator 0x5624b88089e8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5624b88089d8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5624b8808a68 <col:94> 'Args::Slot *' lvalue Var 0x5624b8807b78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5624b87e0d78 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5624b87e0a08 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87e0cd8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5624b87e0ac0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87e0b40 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87e0bb8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5624b8809030 <col:67, line:780:5>
|     |-DeclStmt 0x5624b8808bb0 <line:777:9, col:26>
|     | `-VarDecl 0x5624b8808b48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5624b8808ff8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5624b8809018 <line:778:13, col:58>
|       | `-VarDecl 0x5624b8808bd8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5624b8808db8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5624b8808d88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5624b8808d70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5624b8808d50 <col:26, col:58> 'String' (CXXTemporary 0x5624b8808d50)
|       |           `-CXXMemberCallExpr 0x5624b8808ce0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5624b8808c50 <col:26> '<bound member function type>' ->find 0x5624b87f93a8
|       |             | `-CXXThisExpr 0x5624b8808c40 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5624b8808d18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8808c80 <col:31> 'const char *' lvalue ParmVar 0x5624b87e0ac0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5624b8808d30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5624b8808ca0 <col:40> 'int' lvalue ParmVar 0x5624b87e0b40 'flags' 'int'
|       |             `-DeclRefExpr 0x5624b8808cc0 <col:47> 'Args::Slot *' lvalue Var 0x5624b8808b48 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5624b8808e70 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5624b8808e58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5624b8808e38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5624b8808e08 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|       |       `-ImplicitCastExpr 0x5624b8808df0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5624b8808dd0 <col:20> 'String' lvalue Var 0x5624b8808bd8 'str' 'String'
|       `-CallExpr 0x5624b8808fc8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5624b8808e98 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|         | `-CXXThisExpr 0x5624b8808e88 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5624b8808f78 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5624b8808ee8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5624b8808ec8 <col:23> 'P' lvalue ParmVar 0x5624b87e0bb8 'parser' 'P'
|         | |-DeclRefExpr 0x5624b8808f30 <col:36> 'String' lvalue Var 0x5624b8808bd8 'str' 'String'
|         | `-UnaryOperator 0x5624b8808f60 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5624b8808f50 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5624b8808fa8 <col:49> 'Args::Slot *' lvalue Var 0x5624b8808b48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5624b87e1118 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5624b87e0de8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5624b87e1078 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5624b87e0ea0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87e0f20 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87e0f98 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5624b88099a0 <col:71, line:792:5>
|     |-DeclStmt 0x5624b88090c8 <line:784:9, col:26>
|     | `-VarDecl 0x5624b8809060 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5624b8809198 <line:785:9, col:29>
|     | `-VarDecl 0x5624b88090f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5624b8809180 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5624b8809160 <col:28> 'int' 1
|     |-WhileStmt 0x5624b8809850 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5624b8809870 <line:786:16, col:61>
|     | | `-VarDecl 0x5624b88091c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5624b88093a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5624b8809370 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5624b8809358 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5624b8809338 <col:29, col:61> 'String' (CXXTemporary 0x5624b8809338)
|     | |           `-CXXMemberCallExpr 0x5624b88092c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5624b8809238 <col:29> '<bound member function type>' ->find 0x5624b87f93a8
|     | |             | `-CXXThisExpr 0x5624b8809228 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5624b8809300 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5624b8809268 <col:34> 'const char *' lvalue ParmVar 0x5624b87e0ea0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5624b8809318 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5624b8809288 <col:43> 'int' lvalue ParmVar 0x5624b87e0f20 'flags' 'int'
|     | |             `-DeclRefExpr 0x5624b88092a8 <col:50> 'Args::Slot *' lvalue Var 0x5624b8809060 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5624b8809458 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5624b8809440 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5624b8809420 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5624b88093f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|     | |       `-ImplicitCastExpr 0x5624b88093d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5624b88093b8 <col:23> 'String' lvalue Var 0x5624b88091c0 'str' 'String'
|     | `-CompoundStmt 0x5624b8809828 <col:64, line:790:9>
|     |   |-CallExpr 0x5624b88095b0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5624b8809480 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|     |   | | `-CXXThisExpr 0x5624b8809470 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5624b8809560 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5624b88094d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5624b88094b0 <col:23> 'P' lvalue ParmVar 0x5624b87e0f98 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5624b8809518 <col:36> 'String' lvalue Var 0x5624b88091c0 'str' 'String'
|     |   | | `-UnaryOperator 0x5624b8809548 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5624b8809538 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5624b8809590 <col:49> 'Args::Slot *' lvalue Var 0x5624b8809060 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5624b8809748 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5624b88095e0 <col:13> 'int' lvalue Var 0x5624b88090f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5624b8809730 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5624b8809710 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5624b8809678 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5624b8809658 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5624b8809640 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5624b8809600 <col:28> 'int' lvalue Var 0x5624b88090f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5624b8809620 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5624b88096f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5624b88096c8 <col:49> 'bool' lvalue ->_read_status 0x5624b87c3210
|     |   |         `-ImplicitCastExpr 0x5624b88096a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5624b8809698 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5624b88097f8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5624b8809768 <col:13> 'int' lvalue ParmVar 0x5624b87e0f20 'flags' 'int'
|     |     `-UnaryOperator 0x5624b88097e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5624b88097c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5624b88097a8 <col:23> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5624b8809980 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5624b88098b8 <col:9> 'bool' lvalue ->_read_status 0x5624b87c3210
|       | `-ImplicitCastExpr 0x5624b8809898 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5624b8809888 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5624b8809960 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5624b8809940 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5624b8809928 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5624b88098e8 <col:25> 'int' lvalue Var 0x5624b88090f8 'read_status' 'int'
|           `-IntegerLiteral 0x5624b8809908 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5624b87e15f8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5624b87e1188 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87e1208 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87e1558 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5624b87e12c8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87e1348 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87e13c0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87e1468 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5624b880a930 <col:84, line:805:5>
|     |-DeclStmt 0x5624b8809a48 <line:796:9, col:26>
|     | `-VarDecl 0x5624b88099e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5624b8809b18 <line:797:9, col:29>
|     | `-VarDecl 0x5624b8809a78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5624b8809b00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5624b8809ae0 <col:28> 'int' 1
|     |-DeclStmt 0x5624b8809e50 <line:798:9, col:71>
|     | `-VarDecl 0x5624b8809b68 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5624b8809e20 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5624b8809d90 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5624b8809dd8 <col:55> 'T' lvalue ParmVar 0x5624b87e1468 'variable' 'T &'
|     |     `-UnaryOperator 0x5624b8809e08 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5624b8809df8 <col:66> 'Args *' this
|     |-WhileStmt 0x5624b880a7e0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5624b880a800 <line:799:16, col:61>
|     | | `-VarDecl 0x5624b8809e78 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5624b880a058 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5624b880a028 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5624b880a010 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5624b8809ff0 <col:29, col:61> 'String' (CXXTemporary 0x5624b8809ff0)
|     | |           `-CXXMemberCallExpr 0x5624b8809f80 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5624b8809ef0 <col:29> '<bound member function type>' ->find 0x5624b87f93a8
|     | |             | `-CXXThisExpr 0x5624b8809ee0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5624b8809fb8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5624b8809f20 <col:34> 'const char *' lvalue ParmVar 0x5624b87e12c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5624b8809fd0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5624b8809f40 <col:43> 'int' lvalue ParmVar 0x5624b87e1348 'flags' 'int'
|     | |             `-DeclRefExpr 0x5624b8809f60 <col:50> 'Args::Slot *' lvalue Var 0x5624b88099e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5624b880a110 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5624b880a0f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5624b880a0d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5624b880a0a8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|     | |       `-ImplicitCastExpr 0x5624b880a090 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5624b880a070 <col:23> 'String' lvalue Var 0x5624b8809e78 'str' 'String'
|     | `-CompoundStmt 0x5624b880a7b8 <col:64, line:803:9>
|     |   |-CallExpr 0x5624b880a540 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5624b880a138 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|     |   | | `-CXXThisExpr 0x5624b880a128 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5624b880a500 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5624b880a168 <col:23> 'T *' lvalue Var 0x5624b8809b68 's' 'T *'
|     |   | | `-CallExpr 0x5624b880a4c0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5624b880a350 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5624b880a398 <col:56> 'P' lvalue ParmVar 0x5624b87e13c0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5624b880a3b8 <col:64> 'String' lvalue Var 0x5624b8809e78 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5624b880a468 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5624b880a3f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|     |   | |   | `-DeclRefExpr 0x5624b880a3d8 <col:70> 'T *' lvalue Var 0x5624b8809b68 's' 'T *'
|     |   | |   `-UnaryOperator 0x5624b880a4a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5624b880a498 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5624b880a520 <col:81> 'Args::Slot *' lvalue Var 0x5624b88099e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5624b880a6d8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5624b880a570 <col:13> 'int' lvalue Var 0x5624b8809a78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5624b880a6c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5624b880a6a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5624b880a608 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5624b880a5e8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5624b880a5d0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5624b880a590 <col:28> 'int' lvalue Var 0x5624b8809a78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5624b880a5b0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5624b880a688 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5624b880a658 <col:49> 'bool' lvalue ->_read_status 0x5624b87c3210
|     |   |         `-ImplicitCastExpr 0x5624b880a638 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5624b880a628 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5624b880a788 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5624b880a6f8 <col:13> 'int' lvalue ParmVar 0x5624b87e1348 'flags' 'int'
|     |     `-UnaryOperator 0x5624b880a770 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5624b880a758 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5624b880a738 <col:23> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5624b880a910 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5624b880a848 <col:9> 'bool' lvalue ->_read_status 0x5624b87c3210
|       | `-ImplicitCastExpr 0x5624b880a828 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5624b880a818 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5624b880a8f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5624b880a8d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5624b880a8b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5624b880a878 <col:25> 'int' lvalue Var 0x5624b8809a78 'read_status' 'int'
|           `-IntegerLiteral 0x5624b880a898 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5624b87e1bd8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5624b87e1670 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5624b87e16e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5624b87e1b38 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5624b87e17a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5624b87e1828 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5624b87e18a0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5624b87e19f0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5624b880b738 <col:87, line:821:5>
|     |-DeclStmt 0x5624b880a9e0 <line:809:9, col:26>
|     | `-VarDecl 0x5624b880a978 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5624b880aab0 <line:810:9, col:29>
|     | `-VarDecl 0x5624b880aa10 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5624b880aa98 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5624b880aa78 <col:28> 'int' 1
|     |-DeclStmt 0x5624b880acf8 <line:811:9, col:38>
|     | `-VarDecl 0x5624b880abe0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5624b880acd0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5624b880ac58 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5624b880acb0 <col:29> 'Vector<T>' lvalue ParmVar 0x5624b87e19f0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5624b880b5e8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5624b880b608 <line:812:16, col:61>
|     | | `-VarDecl 0x5624b880ad20 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5624b880af00 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5624b880aed0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5624b880aeb8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5624b880ae98 <col:29, col:61> 'String' (CXXTemporary 0x5624b880ae98)
|     | |           `-CXXMemberCallExpr 0x5624b880ae28 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5624b880ad98 <col:29> '<bound member function type>' ->find 0x5624b87f93a8
|     | |             | `-CXXThisExpr 0x5624b880ad88 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5624b880ae60 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5624b880adc8 <col:34> 'const char *' lvalue ParmVar 0x5624b87e17a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5624b880ae78 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5624b880ade8 <col:43> 'int' lvalue ParmVar 0x5624b87e1828 'flags' 'int'
|     | |             `-DeclRefExpr 0x5624b880ae08 <col:50> 'Args::Slot *' lvalue Var 0x5624b880a978 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5624b880afb8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5624b880afa0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5624b880af80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5624b880af50 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5624b8506da8
|     | |       `-ImplicitCastExpr 0x5624b880af38 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5624b880af18 <col:23> 'String' lvalue Var 0x5624b880ad20 'str' 'String'
|     | `-CompoundStmt 0x5624b880b5b0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5624b880b078 <line:813:13, col:23>
|     |   | `-VarDecl 0x5624b880afe0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5624b880b058 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5624b880b1f8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5624b880b0a0 <col:13> '<bound member function type>' ->postparse 0x5624b87f95b8
|     |   | | `-CXXThisExpr 0x5624b880b090 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5624b880b1a0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5624b880b0f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5624b880b0d0 <col:23> 'P' lvalue ParmVar 0x5624b87e18a0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5624b880b138 <col:36> 'String' lvalue Var 0x5624b880ad20 'str' 'String'
|     |   | | |-DeclRefExpr 0x5624b880b158 <col:41> 'T' lvalue Var 0x5624b880afe0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5624b880b188 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5624b880b178 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5624b880b1d8 <col:53> 'Args::Slot *' lvalue Var 0x5624b880a978 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5624b880b350 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5624b880b288 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5624b880b258 <col:17> 'bool' lvalue ->_read_status 0x5624b87c3210
|     |   | |   `-ImplicitCastExpr 0x5624b880b238 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5624b880b228 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5624b880b328 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5624b880b2c0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5624b880b2a0 <col:17> 'Vector<T> *' lvalue Var 0x5624b880abe0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5624b880b308 <col:30> 'T' lvalue Var 0x5624b880afe0 'sx' 'T'
|     |   |-BinaryOperator 0x5624b880b4d0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5624b880b368 <col:13> 'int' lvalue Var 0x5624b880aa10 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5624b880b4b8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5624b880b498 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5624b880b400 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5624b880b3e0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5624b880b3c8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5624b880b388 <col:28> 'int' lvalue Var 0x5624b880aa10 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5624b880b3a8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5624b880b480 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5624b880b450 <col:49> 'bool' lvalue ->_read_status 0x5624b87c3210
|     |   |         `-ImplicitCastExpr 0x5624b880b430 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5624b880b420 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5624b880b580 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5624b880b4f0 <col:13> 'int' lvalue ParmVar 0x5624b87e1828 'flags' 'int'
|     |     `-UnaryOperator 0x5624b880b568 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5624b880b550 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5624b880b530 <col:23> 'const int' lvalue Var 0x5624b87ca758 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5624b880b718 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5624b880b650 <col:9> 'bool' lvalue ->_read_status 0x5624b87c3210
|       | `-ImplicitCastExpr 0x5624b880b630 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5624b880b620 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5624b880b6f8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5624b880b6d8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5624b880b6c0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5624b880b680 <col:25> 'int' lvalue Var 0x5624b880aa10 'read_status' 'int'
|           `-IntegerLiteral 0x5624b880b6a0 <col:40> 'int' 1
|-AccessSpecDecl 0x5624b87e1c50 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5624b87e1c78 prev 0x5624b87c8a58 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5624b87e1d70 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5624b87e1e60 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5624b880b770 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5624b87e1f50 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5624b880b780 <col:25, line:830:9>
| |-CXXMethodDecl 0x5624b87e2050 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5624b87e2100 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5624b87e21a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5624b87e21a8
| | `-ParmVarDecl 0x5624b87e22b8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5624b87e2a78 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5624b87e2a78
|   `-ParmVarDecl 0x5624b87e2b88 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5624b87e2328 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5624b87e2488 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5624b87e2680 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5624b87e2530 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5624b87e25a8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5624b880b960 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5624b87e2938 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5624b880b7d0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5624b880b790 <col:20> 'void *' lvalue ParmVar 0x5624b87e2530 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5624b87e29a0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5624b880b858 <col:32, col:45> 'char *' array Function 0x5624b8329a18 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5624b880b840 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5624b880b810 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5624b87e25a8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5624b87e2a00 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5624b880b920 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5624b880b8e0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5624b87e25a8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5624b880b9e0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5624b87e2780 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5624b87e1f50 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5624b880ba68 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5624b880ba48 <line:840:13, col:22> 'void' array Function 0x5624b8329d78 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5624b880ba30 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5624b880ba00 <col:22> 'char *' lvalue ->_slot 0x5624b87e29a0
| |         `-CXXThisExpr 0x5624b880b9f0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5624b87e2880 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5624b87e2050 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5624b880bc58 <col:22, line:844:9>
| |   `-CallExpr 0x5624b880bbc0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5624b880bba8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5624b880bb88 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5624b84357f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5624b880bbf8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5624b880bad8 <col:20> 'void *' lvalue ->_ptr 0x5624b87e2938
| |     |   `-CXXThisExpr 0x5624b880bac8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5624b880bc28 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5624b880bc10 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5624b880bb18 <col:26> 'char *' lvalue ->_slot 0x5624b87e29a0
| |     |     `-CXXThisExpr 0x5624b880bb08 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5624b880bc40 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5624b880bb58 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5624b87e2a00
| |         `-CXXThisExpr 0x5624b880bb48 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5624b87e2938 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5624b87e29a0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5624b87e2a00 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5624b87e2bf8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5624b87e2bf8
| | `-ParmVarDecl 0x5624b87e2d08 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5624b87e2da8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5624b87e2da8
|   `-ParmVarDecl 0x5624b87e2eb8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5624b87e3058 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5624b87e2f28 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5624b87e2fc8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5624b87e32f0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5624b87e34e8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5624b87e33b8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5624b87e3668 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5624b880bc90 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5624b880bc70 <col:20> 'T *' lvalue ParmVar 0x5624b87e33b8 'ptr' 'T *'
|   | `-CompoundStmt 0x5624b880bce0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5624b87e35b8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5624b87e2050 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5624b880be90 <col:22, line:857:9>
|   |   `-CallExpr 0x5624b880be60 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5624b880bcf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5624b84edf28 0x5624b8498258
|   |     |-CXXOperatorCallExpr 0x5624b880bdf0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5624b880bd80 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5624b86faed8 0x5624b86faaf8 0x5624b86fa728 0x5624b86fa348 0x5624b86f9f68 0x5624b86f9b98
|   |     | `-MemberExpr 0x5624b880bd50 <col:29> 'T *' lvalue ->_ptr 0x5624b87e3668
|   |     |   `-CXXThisExpr 0x5624b880bd40 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5624b880be30 <col:35> 'T' lvalue ->_slot 0x5624b87e36c8
|   |       `-CXXThisExpr 0x5624b880be20 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5624b87e3668 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5624b87e36c8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5624b87e3730 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5624b87e3830 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5624b87e3880 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b87e3810 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5624b87e37f0 <col:31> 'int' 48
|-FieldDecl 0x5624b87e38a8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5624b87e3908 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5624b87e3968 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5624b87e3aa0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5624b87f8c50 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5624b87f8cb0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5624b87f8d60 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5624b87f8f88 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5624b87f8e90 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5624b87f90d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5624b87f9048 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5624b87f93a8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5624b87f9198 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5624b87f9218 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5624b87f92c0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5624b87f95b8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5624b87f9470 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5624b87f94e8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5624b87f9688 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5624b87f97d8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5624b87f9740 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5624b87fc498 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5624b87f9898 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5624b87fc240 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5624b87fc2f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5624b87fc3a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5624b87fc6c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5624b87fc570 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5624b87fc5e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5624b87fc9d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5624b87fc770 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5624b87fc938 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5624b87fc848 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b8710838 prev 0x5624b8705a40 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b8710930 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5624b8710a20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5624b8710b48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5624b8710cc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5624b8710e48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5624b8710fc8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5624b8721df8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5624b8722668 <col:11>
|-CXXDestructorDecl 0x5624b8721ed0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5624b8722008 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5624b8722008
| `-ParmVarDecl 0x5624b8722118 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5624b87221b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5624b87221b8
| `-ParmVarDecl 0x5624b87222c8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5624b8725088 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b8725198 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5624b8725418 <col:11>
|   `-ReturnStmt 0x5624b8725408 <col:11>
|     `-UnaryOperator 0x5624b87253f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b87253e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5624b8725208 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5624b8725208
  `-ParmVarDecl 0x5624b8725318 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b8711030 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b8711148 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5624b87111e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5624b8711250 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5624b87112b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5624b8711320 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5624b8711380 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5624b8711440 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5624b87114a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5624b8711500 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5624b8721d08 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5624b87111e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5624b8722678 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5624b87226d0 <col:12>
|-CXXConstructorDecl 0x5624b8722338 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5624b8722338
| `-ParmVarDecl 0x5624b8722448 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5624b87224e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5624b87224e8
| `-ParmVarDecl 0x5624b87225f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5624b8724770 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b86ff150 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5624b86ff268 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5624b86ff2f8 <col:16, col:22> col:16 public
|-EnumDecl 0x5624b86ff320 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5624b86ff420 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5624b86ff500 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86ff400 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5624b86ff3e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5624b86ff4b0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5624b86ff518 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b86ff490 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5624b86ff470 <col:22> 'int' 64
|-CXXMethodDecl 0x5624b86ff858 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5624b86ff540 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5624b86ff5c0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5624b86ff638 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5624b86ff6b0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5624b86ff918 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5624b86ffb18 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5624b86ff990 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5624b86ffa08 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5624b86ffbc8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5624b86ffd28 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5624b86ffc38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5624b86ffdd0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5624b8700130 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5624b87000c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5624b8700060 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5624b8700020 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5624b81d5310 'void'
|       |-PointerType 0x5624b847f4f0 'unsigned char *'
|       | `-BuiltinType 0x5624b81d5410 'unsigned char'
|       |-TypedefType 0x5624b827bac0 'size_t' sugar
|       | |-Typedef 0x5624b8245af0 'size_t'
|       | `-BuiltinType 0x5624b81d5470 'unsigned long'
|       `-PointerType 0x5624b81d5b10 'void *'
|         `-BuiltinType 0x5624b81d5310 'void'
|-CXXMethodDecl 0x5624b87005a8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5624b87001a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5624b8700218 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5624b87002b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5624b8700330 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5624b871aca0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5624b871ac88 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5624b871ac50 <col:58> 'int' 0
| |-ParmVarDecl 0x5624b87003b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5624b871acc8 <col:76> 'int' 0
| |-ParmVarDecl 0x5624b8700430 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5624b871ace8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5624b8700678 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5624b87006f8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5624b87007b8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5624b8700858 <col:20>
| `-OptimizeNoneAttr 0x5624b87008b0 <col:30>
|-CXXMethodDecl 0x5624b8700928 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5624b87009c8 <col:20>
| `-OptimizeNoneAttr 0x5624b8700a20 <col:30>
|-CXXMethodDecl 0x5624b8700a98 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5624b8700b38 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5624b8700be8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5624b8700c88 <col:20>
| |-OptimizeNoneAttr 0x5624b8700ce0 <col:30>
| `-WarnUnusedResultAttr 0x5624b8700d08 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5624b8700d60 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5624b8700e00 <col:20>
| `-OptimizeNoneAttr 0x5624b8700e58 <col:30>
|-CXXMethodDecl 0x5624b8700ea8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5624b8700f48 <col:20>
| `-OptimizeNoneAttr 0x5624b8700fa0 <col:30>
|-CXXMethodDecl 0x5624b8700fe8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5624b8701088 <col:20>
| `-OptimizeNoneAttr 0x5624b87010e0 <col:30>
|-CXXMethodDecl 0x5624b8701128 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b87011e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b87012b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5624b8701378 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5624b8701438 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b8701558 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5624b871adb0 <col:54, line:99:5>
|   `-ReturnStmt 0x5624b871ada0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5624b871ad88 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5624b871ad58 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5624b8711838
|         `-CXXThisExpr 0x5624b871ad48 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5624b87016f8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5624b8701608 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5624b871ae60 <col:67, line:103:5>
|   `-BinaryOperator 0x5624b871ae40 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5624b871add8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5624b8711838
|     | `-CXXThisExpr 0x5624b871adc8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5624b871ae28 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5624b871ae08 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5624b8701608 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5624b87017f0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5624b871aee0 <col:33, line:107:5>
|   `-ReturnStmt 0x5624b871aed0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5624b871aeb8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5624b871ae88 <col:16> 'void *' lvalue ->_destructor_argument 0x5624b87118a0
|         `-CXXThisExpr 0x5624b871ae78 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5624b87018b0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5624b871b510 <col:25, line:113:5>
|   |-ParenExpr 0x5624b871b258 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5624b871b228 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871af98 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5624b871af70 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5624b871af38 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5624b871af08 <col:24> '<bound member function type>' ->shared 0x5624b8700928
|   |   |       `-ImplicitCastExpr 0x5624b871af58 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5624b871aef8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5624b871aff8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871afd8 <col:42> 'int' 0
|   |   `-CallExpr 0x5624b871b188 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5624b871b170 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871b150 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871b1c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871b068 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5624b871b1e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871b090 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871b1f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871b0c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5624b871b210 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871b138 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871b120 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871b0e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5624b871b458 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5624b871b288 <col:2> 'unsigned char *' lvalue ->_head 0x5624b8711640
|   | | `-CXXThisExpr 0x5624b871b278 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5624b871b440 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5624b871b420 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5624b871b2c8 <col:10> 'unsigned char *' lvalue ->_data 0x5624b87116a8
|   |     | `-CXXThisExpr 0x5624b871b2b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5624b871b408 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5624b871b3e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5624b871b308 <col:18> 'unsigned char *' lvalue ->_tail 0x5624b8711710
|   |         | `-CXXThisExpr 0x5624b871b2f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5624b871b3d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5624b871b3b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5624b871b348 <col:26> 'unsigned char *' lvalue ->_end 0x5624b8711778
|   |             | `-CXXThisExpr 0x5624b871b338 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5624b871b398 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5624b871b378 <col:33> 'int' 0
|   `-BinaryOperator 0x5624b871b4f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5624b871b488 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5624b8711838
|     | `-CXXThisExpr 0x5624b871b478 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5624b871b4d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5624b871b4b8 <col:16> 'int' 0
|-CXXMethodDecl 0x5624b87019f0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5624b8701960 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b8701a98 <col:20>
| |-OptimizeNoneAttr 0x5624b8701af0 <col:30>
| `-WarnUnusedResultAttr 0x5624b8701b18 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5624b8701be8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5624b8701b58 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b8701c90 <col:20>
| |-OptimizeNoneAttr 0x5624b8701ce8 <col:30>
| `-WarnUnusedResultAttr 0x5624b8701d10 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5624b8701e48 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5624b8701d50 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5624b8701ef0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5624b8701ff0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5624b8701f60 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b8702098 <col:20>
| `-OptimizeNoneAttr 0x5624b87020f0 <col:30>
|-CXXMethodDecl 0x5624b87021b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5624b8702128 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5624b8702260 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5624b8702360 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5624b87022d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5624b8702408 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5624b8702508 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5624b8702478 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b87025b0 <col:20>
| `-OptimizeNoneAttr 0x5624b8702608 <col:30>
|-CXXMethodDecl 0x5624b8702798 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5624b8702648 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5624b87026c0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5624b871ad08 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5624b8702848 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5624b8702a48 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5624b87028c0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5624b8702938 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b8702c58 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5624b8702b08 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5624b8702b80 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b8702e68 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5624b8702d18 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5624b8702d98 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5624b871ad18 <col:39> 'int' 0
|-CXXMethodDecl 0x5624b8702f38 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5624b8703000 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5624b87030c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5624b8703188 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b8703250 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5624b8703398 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5624b8703308 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5624b8703568 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5624b8703458 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5624b87034d0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b8703638 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5624b87036f8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5624b8703798 <col:20>
| `-OptimizeNoneAttr 0x5624b87037f0 <col:30>
|-CXXMethodDecl 0x5624b8703840 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5624b87038e0 <col:20>
| `-OptimizeNoneAttr 0x5624b8703938 <col:30>
|-CXXMethodDecl 0x5624b8703988 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5624b8703a48 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b8703b10 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5624b8703bb0 <col:20>
| `-OptimizeNoneAttr 0x5624b8703c08 <col:30>
|-CXXMethodDecl 0x5624b8703d58 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5624b8703c48 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5624b8703cc0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b8703ea8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5624b8703e18 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b8703f80 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5624b8704040 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5624b87040e0 <col:20>
| `-OptimizeNoneAttr 0x5624b8704138 <col:30>
|-CXXMethodDecl 0x5624b8704188 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5624b8704228 <col:20>
| `-OptimizeNoneAttr 0x5624b8704280 <col:30>
|-CXXMethodDecl 0x5624b87042d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5624b8704398 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5624b8704438 <col:20>
| `-OptimizeNoneAttr 0x5624b8704490 <col:30>
|-CXXMethodDecl 0x5624b87044d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5624b87045f8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5624b8704768 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5624b87046a8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5624b8704858 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5624b87048f8 <col:20>
| `-OptimizeNoneAttr 0x5624b8704950 <col:30>
|-CXXMethodDecl 0x5624b87049a0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5624b8704a60 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b8704c98 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5624b8704b10 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5624b8704b88 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b8704d48 <col:20>
| `-OptimizeNoneAttr 0x5624b8704da0 <col:30>
|-CXXMethodDecl 0x5624b8704e48 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5624b8704ee8 <col:20>
| `-OptimizeNoneAttr 0x5624b8704f40 <col:30>
|-CXXMethodDecl 0x5624b8704f90 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5624b8705030 <col:20>
| `-OptimizeNoneAttr 0x5624b8705088 <col:30>
|-CXXMethodDecl 0x5624b87050d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5624b8705170 <col:20>
| `-OptimizeNoneAttr 0x5624b87051c8 <col:30>
|-CXXMethodDecl 0x5624b87052c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5624b8705200 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5624b8705370 <col:20>
| `-OptimizeNoneAttr 0x5624b87053c8 <col:30>
|-CXXMethodDecl 0x5624b8705588 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5624b8705400 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5624b8705478 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b8705638 <col:20>
| `-OptimizeNoneAttr 0x5624b8705690 <col:30>
|-CXXMethodDecl 0x5624b8705738 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5624b8705858 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5624b8705978 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5624b8705a18 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5624b8705a40 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5624b8705b68 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5624b8705c08 <col:20>
| `-OptimizeNoneAttr 0x5624b8705c60 <col:30>
|-CXXMethodDecl 0x5624b8705d08 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5624b8705da8 <col:20>
| `-OptimizeNoneAttr 0x5624b8705e00 <col:30>
|-AccessSpecDecl 0x5624b8705e28 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5624b8705e50 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5624b8705f50 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5624b8705fa0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b8705f30 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5624b8705f10 <col:14> 'int' 48
|-CXXMethodDecl 0x5624b8706008 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5624b87060a8 <col:20>
| `-OptimizeNoneAttr 0x5624b8706100 <col:30>
|-CXXMethodDecl 0x5624b8706178 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5624b8706218 <col:20>
| `-OptimizeNoneAttr 0x5624b8706270 <col:30>
|-CXXMethodDecl 0x5624b8706338 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5624b87062a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5624b87064d8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5624b8706678 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5624b8706588 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5624b8706720 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5624b8706820 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5624b8706bd0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8706800 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b87067e0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5624b87068b0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5624b8706be8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8706890 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5624b8706870 <col:14> 'int' 1
| |-EnumConstantDecl 0x5624b8706940 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5624b8706c00 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8706920 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5624b8706900 <col:14> 'int' 2
| |-EnumConstantDecl 0x5624b87069d0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5624b8706c18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b87069b0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5624b8706990 <col:14> 'int' 3
| |-EnumConstantDecl 0x5624b8706a60 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5624b8706c30 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8706a40 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5624b8706a20 <col:13> 'int' 4
| |-EnumConstantDecl 0x5624b8706af0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5624b8706c48 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8706ad0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5624b8706ab0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5624b8706b80 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5624b8706c60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b8706b60 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5624b8706b40 <col:14> 'int' 6
|-CXXMethodDecl 0x5624b8706cc8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5624b8706d68 <col:20>
| `-OptimizeNoneAttr 0x5624b8706dc0 <col:30>
|-CXXMethodDecl 0x5624b8706eb8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5624b8706df8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5624b8706f60 <col:20>
| `-OptimizeNoneAttr 0x5624b8706fb8 <col:30>
|-CXXMethodDecl 0x5624b8707028 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5624b8707150 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5624b87072c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5624b8707200 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5624b8707390 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5624b8707458 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5624b8707598 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5624b8707508 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5624b8707640 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5624b8707740 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5624b8707940 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8707720 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b8707700 <col:23> 'int' 0
| |-EnumConstantDecl 0x5624b87077d0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5624b8707958 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b87077b0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5624b8707790 <col:45> 'int' 4
| |-EnumConstantDecl 0x5624b8707860 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5624b8707970 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8707840 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b8707820 <col:24> 'int' 0
| `-EnumConstantDecl 0x5624b87078f0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5624b8707988 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b87078d0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5624b87078b0 <col:47> 'int' 16
|-CXXMethodDecl 0x5624b87079e8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5624b8707b58 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5624b8707a98 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5624b8707c00 <col:20>
| `-OptimizeNoneAttr 0x5624b8707c58 <col:30>
|-CXXMethodDecl 0x5624b8707ca8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5624b871b630 <col:18, col:36>
|   `-ReturnStmt 0x5624b871b620 <col:20, col:33>
|     `-ImplicitCastExpr 0x5624b871b608 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5624b871b5e8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5624b871b5b8 <col:27> '<bound member function type>' ->xanno 0x5624b8705d08
|           `-CXXThisExpr 0x5624b871b5a8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5624b8707da0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5624b871b740 <col:30, col:48>
|   `-ReturnStmt 0x5624b871b730 <col:32, col:45>
|     `-ImplicitCastExpr 0x5624b871b718 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5624b871b6f8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5624b871b6c8 <col:39> '<bound member function type>' ->xanno 0x5624b8705b68
|           `-CXXThisExpr 0x5624b871b6b8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5624b8707e88 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5624b871b8d8 <col:24, col:50>
|   `-ReturnStmt 0x5624b871b8c8 <col:26, col:47>
|     `-UnaryOperator 0x5624b871b8b0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5624b871b890 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5624b871b878 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5624b871b828 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5624b8710b48
|         |   `-CXXMemberCallExpr 0x5624b871b808 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5624b871b7d8 <col:34> '<bound member function type>' ->xanno 0x5624b8705d08
|         |       `-CXXThisExpr 0x5624b871b7c8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5624b871b858 <col:46> 'int' 0
|-CXXMethodDecl 0x5624b8707f90 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5624b871baa8 <col:36, col:62>
|   `-ReturnStmt 0x5624b871ba98 <col:38, col:59>
|     `-UnaryOperator 0x5624b871ba80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5624b871ba60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5624b871ba48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5624b871b9c0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5624b8710b48
|         |   `-CXXMemberCallExpr 0x5624b871b9a0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5624b871b970 <col:46> '<bound member function type>' ->xanno 0x5624b8705b68
|         |       `-CXXThisExpr 0x5624b871b960 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5624b871b9f0 <col:58> 'int' 0
|-CXXMethodDecl 0x5624b87080a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5624b871bc40 <col:26, col:53>
|   `-ReturnStmt 0x5624b871bc30 <col:28, col:50>
|     `-UnaryOperator 0x5624b871bc18 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5624b871bbf8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5624b871bbe0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5624b871bb90 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5624b8710e48
|         |   `-CXXMemberCallExpr 0x5624b871bb70 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5624b871bb40 <col:36> '<bound member function type>' ->xanno 0x5624b8705d08
|         |       `-CXXThisExpr 0x5624b871bb30 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5624b871bbc0 <col:49> 'int' 0
|-CXXMethodDecl 0x5624b87081c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5624b871be18 <col:38, col:65>
|   `-ReturnStmt 0x5624b871be08 <col:40, col:62>
|     `-UnaryOperator 0x5624b871bdf0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5624b871bdd0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5624b871bdb8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5624b871bd28 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5624b8710e48
|         |   `-CXXMemberCallExpr 0x5624b871bd08 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5624b871bcd8 <col:48> '<bound member function type>' ->xanno 0x5624b8705b68
|         |       `-CXXThisExpr 0x5624b871bcc8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5624b871bd58 <col:61> 'int' 0
|-CXXMethodDecl 0x5624b8708378 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5624b8708280 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5624b871c4e8 <col:34, line:463:5>
|   |-ParenExpr 0x5624b871c330 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5624b871c300 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871bf68 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871bf38 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871be88 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871be70 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871be30 <col:23> 'int' lvalue ParmVar 0x5624b8708280 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871be50 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871bf18 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871bee8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871bea8 <col:33> 'int' lvalue ParmVar 0x5624b8708280 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5624b871bf00 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5624b871bec8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5624b871bfc8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871bfa8 <col:56> 'int' 0
|   |   `-CallExpr 0x5624b871c260 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5624b871c248 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871c228 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871c2a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871c0b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5624b871c2b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871c0e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871c2d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871c120 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5624b871c2e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871c210 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871c1f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871c1b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5624b871c4d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5624b871c4c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5624b871c4a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5624b871c470 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5624b871c420 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5624b8710b48
|         |   `-CXXMemberCallExpr 0x5624b871c400 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5624b871c3d0 <col:9> '<bound member function type>' ->xanno 0x5624b8705b68
|         |       `-CXXThisExpr 0x5624b871c3c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5624b871c488 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5624b871c450 <col:21> 'int' lvalue ParmVar 0x5624b8708280 'i' 'int'
|-CXXMethodDecl 0x5624b87085c8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5624b8708438 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5624b87084b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5624b871cb78 <col:40, line:472:5>
|   |-ParenExpr 0x5624b871c990 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5624b871c960 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871c640 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871c610 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871c560 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871c548 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871c508 <col:23> 'int' lvalue ParmVar 0x5624b8708438 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871c528 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871c5f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871c5c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871c580 <col:33> 'int' lvalue ParmVar 0x5624b8708438 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5624b871c5d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5624b871c5a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5624b871c6a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871c680 <col:56> 'int' 0
|   |   `-CallExpr 0x5624b871c8c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5624b871c8a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871c888 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871c900 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871c710 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5624b871c918 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871c740 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871c930 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871c778 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5624b871c948 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871c870 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871c858 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871c818 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5624b871cb58 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5624b871cb00 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5624b871cad0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5624b871ca80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5624b8710b48
|     | |   `-CXXMemberCallExpr 0x5624b871ca60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5624b871ca30 <col:2> '<bound member function type>' ->xanno 0x5624b8705d08
|     | |       `-CXXThisExpr 0x5624b871ca20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5624b871cae8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5624b871cab0 <col:14> 'int' lvalue ParmVar 0x5624b8708438 'i' 'int'
|     `-ImplicitCastExpr 0x5624b871cb40 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5624b871cb20 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5624b87084b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5624b8708788 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5624b8708690 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5624b871d2f8 <col:36, line:485:5>
|   |-ParenExpr 0x5624b871d060 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871d030 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871cd10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871cce0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871cbf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871cbd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871cb98 <col:23> 'int' lvalue ParmVar 0x5624b8708690 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871cbb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871ccc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871cca8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871cc10 <col:33> 'int' lvalue ParmVar 0x5624b8708690 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871cc88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871cc70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871cc30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871cc50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5624b871cd70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871cd50 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871cf90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871cf78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871cf58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871cfd0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871cde0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5624b871cfe8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871ce18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871d000 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871ce50 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5624b871d018 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871cf40 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871cf28 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871cee8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5624b871d2e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5624b871d2d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5624b871d2b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5624b871d288 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5624b871d228 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5624b871d1f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5624b871d170 <col:61, col:70> 'char const[48]' lvalue ->c 0x5624b8710a20
|             |   `-CXXMemberCallExpr 0x5624b871d150 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5624b871d120 <col:61> '<bound member function type>' ->xanno 0x5624b8705b68
|             |       `-CXXThisExpr 0x5624b871d110 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5624b871d210 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5624b871d1a0 <col:74> 'int' lvalue ParmVar 0x5624b8708690 'i' 'int'
|-CXXMethodDecl 0x5624b87089d8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5624b8708848 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5624b87088c0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5624b871da48 <col:42, line:500:5>
|   |-ParenExpr 0x5624b871d7e0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871d7b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871d490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871d460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871d370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871d358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871d318 <col:23> 'int' lvalue ParmVar 0x5624b8708848 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871d338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871d440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871d428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871d390 <col:33> 'int' lvalue ParmVar 0x5624b8708848 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871d408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871d3f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871d3b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871d3d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5624b871d4f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871d4d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871d710 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871d6f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871d6d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871d750 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871d560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5624b871d768 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871d598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871d780 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871d5d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5624b871d798 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871d6c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871d6a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871d668 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5624b871da28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5624b871d9d8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5624b871d9a8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5624b871d950 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5624b871d920 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5624b871d8d0 <col:48, col:57> 'char [48]' lvalue ->c 0x5624b8710a20
|     |     |   `-CXXMemberCallExpr 0x5624b871d8b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5624b871d880 <col:48> '<bound member function type>' ->xanno 0x5624b8705d08
|     |     |       `-CXXThisExpr 0x5624b871d870 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5624b871d938 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5624b871d900 <col:61> 'int' lvalue ParmVar 0x5624b8708848 'i' 'int'
|     `-ImplicitCastExpr 0x5624b871da10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5624b871d9f0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5624b87088c0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5624b8708b98 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5624b8708aa0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5624b871e1a8 <col:35, line:513:5>
|   |-ParenExpr 0x5624b871deb8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871de88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871dbe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871dbb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871dac0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871daa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871da68 <col:23> 'int' lvalue ParmVar 0x5624b8708aa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871da88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871db90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871db78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871dae0 <col:33> 'int' lvalue ParmVar 0x5624b8708aa0 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871db58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871db40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871db00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871db20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5624b871dc40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871dc20 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871dde8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871ddd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871ddb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871de28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871dcb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5624b871de40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871dce8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871de58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871dd20 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5624b871de70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871dd98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871dd80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871dd40 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5624b871e198 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5624b871e180 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5624b871e168 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5624b871e138 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5624b871e0b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5624b871e080 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5624b871e030 <col:60, col:69> 'char const[48]' lvalue ->c 0x5624b8710a20
|             |   `-CXXMemberCallExpr 0x5624b871e010 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5624b871dfe0 <col:60> '<bound member function type>' ->xanno 0x5624b8705b68
|             |       `-CXXThisExpr 0x5624b871dfd0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5624b871e098 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5624b871e060 <col:73> 'int' lvalue ParmVar 0x5624b8708aa0 'i' 'int'
|-CXXMethodDecl 0x5624b8708de8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5624b8708c58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5624b8708cd0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5624b871e8c8 <col:41, line:528:5>
|   |-ParenExpr 0x5624b871e650 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871e620 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871e340 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871e310 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871e220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871e208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871e1c8 <col:23> 'int' lvalue ParmVar 0x5624b8708c58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871e1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871e2f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871e2d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871e240 <col:33> 'int' lvalue ParmVar 0x5624b8708c58 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871e2b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871e2a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871e260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871e280 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5624b871e3a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871e380 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871e580 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871e568 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871e548 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871e5c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871e410 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5624b871e5d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871e448 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871e5f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871e480 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5624b871e608 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871e530 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871e518 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871e4d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5624b871e8a8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5624b871e858 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5624b871e828 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5624b871e7d0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5624b871e790 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5624b871e740 <col:47, col:56> 'char [48]' lvalue ->c 0x5624b8710a20
|     |     |   `-CXXMemberCallExpr 0x5624b871e720 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5624b871e6f0 <col:47> '<bound member function type>' ->xanno 0x5624b8705d08
|     |     |       `-CXXThisExpr 0x5624b871e6e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5624b871e7a8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5624b871e770 <col:60> 'int' lvalue ParmVar 0x5624b8708c58 'i' 'int'
|     `-ImplicitCastExpr 0x5624b871e890 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5624b871e870 <col:65> 'int16_t':'short' lvalue ParmVar 0x5624b8708cd0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5624b8708fa8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5624b8708eb0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5624b871ef98 <col:36, line:541:5>
|   |-ParenExpr 0x5624b871ed38 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871ed08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871ea60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871ea30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871e940 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871e928 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871e8e8 <col:23> 'int' lvalue ParmVar 0x5624b8708eb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871e908 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871ea10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871e9f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871e960 <col:33> 'int' lvalue ParmVar 0x5624b8708eb0 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871e9d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871e9c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871e980 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871e9a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5624b871eac0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871eaa0 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871ec68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871ec50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871ec30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871eca8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871eb30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5624b871ecc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871eb68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871ecd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871eba0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5624b871ecf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871ec18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871ec00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871ebc0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5624b871ef88 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5624b871ef70 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5624b871ef58 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5624b871ef28 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5624b871eed0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5624b871eea0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5624b871ee50 <col:61, col:70> 'char const[48]' lvalue ->c 0x5624b8710a20
|             |   `-CXXMemberCallExpr 0x5624b871ee30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5624b871ee00 <col:61> '<bound member function type>' ->xanno 0x5624b8705b68
|             |       `-CXXThisExpr 0x5624b871edf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5624b871eeb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5624b871ee80 <col:74> 'int' lvalue ParmVar 0x5624b8708eb0 'i' 'int'
|-CXXMethodDecl 0x5624b8709178 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5624b8709068 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5624b87090e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5624b8709228 <col:20>
| `-OptimizeNoneAttr 0x5624b8709280 <col:30>
|-CXXMethodDecl 0x5624b87093b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5624b87092c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5624b871f668 <col:35, line:562:5>
|   |-ParenExpr 0x5624b871f408 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871f3d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871f130 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871f100 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871f010 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871eff8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871efb8 <col:23> 'int' lvalue ParmVar 0x5624b87092c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871efd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871f0e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871f0c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871f030 <col:33> 'int' lvalue ParmVar 0x5624b87092c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871f0a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871f090 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871f050 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871f070 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5624b871f190 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871f170 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871f338 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871f320 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871f300 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871f378 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871f200 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5624b871f390 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871f238 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871f3a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871f270 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5624b871f3c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871f2e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871f2d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871f290 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5624b871f658 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5624b871f640 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5624b871f628 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5624b871f5f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5624b871f5a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5624b871f570 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5624b871f520 <col:60, col:69> 'char const[48]' lvalue ->c 0x5624b8710a20
|             |   `-CXXMemberCallExpr 0x5624b871f500 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5624b871f4d0 <col:60> '<bound member function type>' ->xanno 0x5624b8705b68
|             |       `-CXXThisExpr 0x5624b871f4c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5624b871f588 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5624b871f550 <col:73> 'int' lvalue ParmVar 0x5624b87092c0 'i' 'int'
|-CXXMethodDecl 0x5624b87095c8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5624b8709478 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5624b87094f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5624b871fd48 <col:41, line:577:5>
|   |-ParenExpr 0x5624b871fad8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b871faa8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871f800 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871f7d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871f6e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871f6c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871f688 <col:23> 'int' lvalue ParmVar 0x5624b8709478 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871f6a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871f7b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871f798 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871f700 <col:33> 'int' lvalue ParmVar 0x5624b8709478 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871f778 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871f760 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871f720 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871f740 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5624b871f860 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871f840 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b871fa08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b871f9f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b871f9d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b871fa48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871f8d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5624b871fa60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871f908 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b871fa78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b871f940 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5624b871fa90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b871f9b8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b871f9a0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b871f960 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5624b871fd28 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5624b871fcd8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5624b871fca8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5624b871fc48 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5624b871fc18 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5624b871fbc8 <col:47, col:56> 'char [48]' lvalue ->c 0x5624b8710a20
|     |     |   `-CXXMemberCallExpr 0x5624b871fba8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5624b871fb78 <col:47> '<bound member function type>' ->xanno 0x5624b8705d08
|     |     |       `-CXXThisExpr 0x5624b871fb68 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5624b871fc30 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5624b871fbf8 <col:60> 'int' lvalue ParmVar 0x5624b8709478 'i' 'int'
|     `-ImplicitCastExpr 0x5624b871fd10 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5624b871fcf0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5624b87094f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5624b8709788 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5624b8709690 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5624b8720478 <col:36, line:591:5>
|   |-ParenExpr 0x5624b87201b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b8720188 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b871fee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b871feb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b871fdc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b871fda8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b871fd68 <col:23> 'int' lvalue ParmVar 0x5624b8709690 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b871fd88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b871fe90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b871fe78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b871fde0 <col:33> 'int' lvalue ParmVar 0x5624b8709690 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b871fe58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b871fe40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b871fe00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b871fe20 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5624b871ff40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b871ff20 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b87200e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b87200d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b87200b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b8720128 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871ffb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5624b8720140 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b871ffe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b8720158 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b8720020 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5624b8720170 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b8720098 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b8720080 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b8720040 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5624b8720468 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5624b8720450 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5624b8720438 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5624b8720408 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5624b8720380 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5624b8720350 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5624b8720300 <col:61, col:70> 'char const[48]' lvalue ->c 0x5624b8710a20
|             |   `-CXXMemberCallExpr 0x5624b87202e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5624b87202b0 <col:61> '<bound member function type>' ->xanno 0x5624b8705b68
|             |       `-CXXThisExpr 0x5624b87202a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5624b8720368 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5624b8720330 <col:74> 'int' lvalue ParmVar 0x5624b8709690 'i' 'int'
|-CXXMethodDecl 0x5624b87099d8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5624b8709848 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5624b87098c0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5624b8720b58 <col:42, line:606:5>
|   |-ParenExpr 0x5624b87208e8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5624b87208b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5624b8720610 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b87205e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b87204f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b87204d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b8720498 <col:23> 'int' lvalue ParmVar 0x5624b8709848 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b87204b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b87205c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5624b87205a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b8720510 <col:33> 'int' lvalue ParmVar 0x5624b8709848 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b8720588 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b8720570 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b8720530 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5624b8720550 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5624b8720670 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b8720650 <col:60> 'int' 0
|   |   `-CallExpr 0x5624b8720818 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5624b8720800 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b87207e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b8720858 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b87206e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5624b8720870 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b8720718 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b8720888 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b8720750 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5624b87208a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b87207c8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b87207b0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b8720770 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5624b8720b38 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5624b8720ae8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5624b8720ab8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5624b8720a58 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5624b8720a28 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5624b87209d8 <col:48, col:57> 'char [48]' lvalue ->c 0x5624b8710a20
|     |     |   `-CXXMemberCallExpr 0x5624b87209b8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5624b8720988 <col:48> '<bound member function type>' ->xanno 0x5624b8705d08
|     |     |       `-CXXThisExpr 0x5624b8720978 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5624b8720a40 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5624b8720a08 <col:61> 'int' lvalue ParmVar 0x5624b8709848 'i' 'int'
|     `-ImplicitCastExpr 0x5624b8720b20 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5624b8720b00 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5624b87098c0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5624b8709b70 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5624b8709aa0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5624b87213c8 <col:33, line:620:5>
|   |-ParenExpr 0x5624b8721140 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5624b8721110 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5624b8720d60 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b8720d30 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b8720bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b8720bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b8720b78 <col:23> 'int' lvalue ParmVar 0x5624b8709aa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b8720b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b8720d10 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5624b8720cf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b8720bf0 <col:33> 'int' lvalue ParmVar 0x5624b8709aa0 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b8720cd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b8720cc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b8720c10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5624b8720c98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5624b8720c80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5624b8720c48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5624b8720dc0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b8720da0 <col:79> 'int' 0
|   |   `-CallExpr 0x5624b8721070 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5624b8721058 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b8721038 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b87210b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b8720ea8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5624b87210c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b8720ef0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b87210e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b8720f28 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5624b87210f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b8721020 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b8721008 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b8720fc8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5624b87213b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5624b87213a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5624b8721388 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5624b8721358 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5624b87212d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5624b87212a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5624b8721250 <col:67, col:76> 'char const[48]' lvalue ->c 0x5624b8710a20
|             |   `-CXXMemberCallExpr 0x5624b8721230 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5624b8721200 <col:67> '<bound member function type>' ->xanno 0x5624b8705b68
|             |       `-CXXThisExpr 0x5624b87211f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5624b87212b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5624b8721280 <col:80> 'int' lvalue ParmVar 0x5624b8709aa0 'i' 'int'
|-CXXMethodDecl 0x5624b8709d88 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5624b8709c30 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5624b8709cb0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5624b8721bf0 <col:45, line:635:5>
|   |-ParenExpr 0x5624b8721938 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5624b8721908 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5624b87215d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5624b87215a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5624b8721440 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5624b8721428 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5624b87213e8 <col:23> 'int' lvalue ParmVar 0x5624b8709c30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5624b8721408 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5624b8721580 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5624b8721568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5624b8721460 <col:33> 'int' lvalue ParmVar 0x5624b8709c30 'i' 'int'
|   |   |     `-BinaryOperator 0x5624b8721548 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5624b8721530 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5624b8721480 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5624b8705f50 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5624b8721508 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5624b87214f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5624b87214b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5624b8721630 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5624b8721610 <col:79> 'int' 0
|   |   `-CallExpr 0x5624b8721868 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5624b8721850 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b8721830 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5624b8272880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5624b87218a8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b87216a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5624b87218c0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5624b87216e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5624b87218d8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5624b8721720 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5624b87218f0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5624b8721818 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5624b8721800 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5624b87217b8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5624b8721bd0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5624b8721b38 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5624b8721b08 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5624b8721aa8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5624b8721a78 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5624b8721a28 <col:54, col:63> 'char [48]' lvalue ->c 0x5624b8710a20
|     |     |   `-CXXMemberCallExpr 0x5624b8721a08 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5624b87219d8 <col:54> '<bound member function type>' ->xanno 0x5624b8705d08
|     |     |       `-CXXThisExpr 0x5624b87219c8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5624b8721a90 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5624b8721a58 <col:67> 'int' lvalue ParmVar 0x5624b8709c30 'i' 'int'
|     `-CXXConstCastExpr 0x5624b8721ba0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5624b8721b88 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5624b8721b50 <col:91> 'const void *' lvalue ParmVar 0x5624b8709cb0 'x' 'const void *'
|-CXXMethodDecl 0x5624b8709e58 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5624b8721c78 <col:34, line:640:5>
|   `-ReturnStmt 0x5624b8721c68 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5624b8721c50 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5624b8721c20 <col:16> 'Packet *' lvalue ->_data_packet 0x5624b87115d8
|         `-CXXThisExpr 0x5624b8721c10 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5624b8709f98 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5624b8709f08 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5624b871ad38 <col:46> 'bool' true
|-CXXMethodDecl 0x5624b870a118 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5624b870a050 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5624b870a1c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5624b870a970 <line:660:22> "" ""
| |-EnumConstantDecl 0x5624b870a2c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870a9e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a2a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5624b870a280 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5624b86ff420 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5624b870a350 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870a9f8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a330 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5624b870a310 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5624b86ff4b0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5624b870a3e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aa10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a3c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b870a3a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5624b870a470 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aa28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a450 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5624b870a430 <col:19> 'int' 16
| |-EnumConstantDecl 0x5624b870a500 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aa40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a4e0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5624b870a4c0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5624b870a590 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aa58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a570 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5624b870a550 <col:19> 'int' 32
| |-EnumConstantDecl 0x5624b870a620 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aa70 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a600 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5624b870a5e0 <col:19> 'int' EnumConstant 0x5624b870a470 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5624b870a6b0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aa88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a690 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5624b870a670 <col:19> 'int' EnumConstant 0x5624b870a590 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5624b870a780 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aaa0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a760 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5624b870a740 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5624b870a700 <col:23> 'int' EnumConstant 0x5624b870a6b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5624b870a720 <col:40> 'int' 2
| |-EnumConstantDecl 0x5624b870a850 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5624b870aab8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b870a830 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5624b870a810 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5624b870a7d0 <col:23> 'int' EnumConstant 0x5624b870a6b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5624b870a7f0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5624b870a920 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5624b870aad0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b870a900 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5624b870a8e0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5624b870a8a0 <col:23> 'int' EnumConstant 0x5624b870a6b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5624b870a8c0 <col:40> 'int' 8
|-CXXMethodDecl 0x5624b870ab10 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5624b870abb0 <col:68> "" ""
|-CXXMethodDecl 0x5624b870ac48 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5624b870ace8 <col:45> "" ""
|-CXXMethodDecl 0x5624b870ad80 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5624b870ae20 <col:57> "" ""
|-CXXMethodDecl 0x5624b870aeb8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5624b870af58 <col:45> "" ""
|-CXXMethodDecl 0x5624b870aff0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5624b870b090 <col:57> "" ""
|-CXXMethodDecl 0x5624b870b120 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5624b870b1c0 <col:51> "" ""
|-CXXMethodDecl 0x5624b870b250 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5624b870b2f0 <col:63> "" ""
|-CXXMethodDecl 0x5624b870b380 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5624b870b420 <col:53> "" ""
|-CXXMethodDecl 0x5624b870b4b0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5624b870b550 <col:65> "" ""
|-CXXMethodDecl 0x5624b870b668 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5624b870b5d8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5624b870b710 <col:61> "" ""
|-CXXMethodDecl 0x5624b870b8a8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5624b870b798 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5624b870b810 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5624b870b958 <col:67> "" ""
|-CXXMethodDecl 0x5624b870ba70 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5624b870b9e0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5624b870bb18 <col:63> "" ""
|-CXXMethodDecl 0x5624b870bcb0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5624b870bba0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5624b870bc18 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5624b870bd60 <col:69> "" ""
|-CXXMethodDecl 0x5624b870be78 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5624b870bde8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5624b870bf20 <col:63> "" ""
|-CXXMethodDecl 0x5624b870e5f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5624b870e4e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5624b870e560 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b870e6a8 <col:69> "" ""
|-CXXMethodDecl 0x5624b870e7c0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5624b870e730 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5624b870e868 <col:62> "" ""
|-CXXMethodDecl 0x5624b870ea00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5624b870e8f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5624b870e968 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5624b870eab0 <col:68> "" ""
|-CXXMethodDecl 0x5624b870ebc8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5624b870eb38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5624b870ec70 <col:63> "" ""
|-CXXMethodDecl 0x5624b870ee08 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5624b870ecf8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5624b870ed70 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5624b870eeb8 <col:69> "" ""
|-CXXMethodDecl 0x5624b870ef48 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5624b870efe8 <col:64> "" ""
|-CXXMethodDecl 0x5624b870f078 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5624b870f118 <col:52> "" ""
|-CXXMethodDecl 0x5624b870f1a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5624b870f248 <col:67> "" ""
|-CXXMethodDecl 0x5624b870f2d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5624b870f378 <col:55> "" ""
|-CXXMethodDecl 0x5624b870f490 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5624b870f400 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5624b870f538 <col:58> "" ""
|-CXXMethodDecl 0x5624b870f6d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5624b870f5c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5624b870f638 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5624b870f780 <col:62> "" ""
|-CXXMethodDecl 0x5624b870f898 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5624b870f808 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5624b870f940 <col:58> "" ""
|-CXXMethodDecl 0x5624b870fad8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5624b870f9c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5624b870fa40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5624b870fb88 <col:62> "" ""
|-CXXMethodDecl 0x5624b870fca0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5624b870fc10 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5624b870fd48 <col:60> "" ""
|-CXXMethodDecl 0x5624b870fee0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5624b870fdd0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5624b870fe48 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5624b870ff90 <col:64> "" ""
|-CXXMethodDecl 0x5624b87100a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5624b8710018 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5624b8710150 <col:58> "" ""
|-CXXMethodDecl 0x5624b87102e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5624b87101d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5624b8710250 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5624b8710398 <col:62> "" ""
|-CXXMethodDecl 0x5624b87104b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5624b8710420 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5624b8710558 <col:59> "" ""
|-CXXMethodDecl 0x5624b87106f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5624b87105e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5624b8710658 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b87107a0 <col:63> "" ""
|-AccessSpecDecl 0x5624b8710810 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5624b8710838 prev 0x5624b8705a40 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5624b8710930 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5624b8710a20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5624b8710b48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5624b8710cc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5624b8710e48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5624b8710fc8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5624b8721df8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5624b8722668 <col:11>
| |-CXXDestructorDecl 0x5624b8721ed0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5624b8722008 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5624b8722008
| | `-ParmVarDecl 0x5624b8722118 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5624b87221b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5624b87221b8
| | `-ParmVarDecl 0x5624b87222c8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5624b8725088 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5624b8725198 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5624b8725418 <col:11>
| |   `-ReturnStmt 0x5624b8725408 <col:11>
| |     `-UnaryOperator 0x5624b87253f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5624b87253e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5624b8725208 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5624b8725208
|   `-ParmVarDecl 0x5624b8725318 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5624b8711030 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5624b8711148 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5624b87111e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5624b8711250 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5624b87112b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5624b8711320 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5624b8711380 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5624b8711440 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5624b87114a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5624b8711500 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5624b8721d08 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5624b87111e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5624b8722678 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5624b87226d0 <col:12>
| |-CXXConstructorDecl 0x5624b8722338 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5624b8722338
| | `-ParmVarDecl 0x5624b8722448 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5624b87224e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5624b87224e8
| | `-ParmVarDecl 0x5624b87225f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5624b8724770 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5624b8711578 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5624b87115d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5624b8711640 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5624b87116a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5624b8711710 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5624b8711778 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5624b87117d8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5624b8711838 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5624b87118a0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5624b8711928 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5624b8711578 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5624b8721ca0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5624b87117d8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5624b87226e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5624b8722740 <col:21, line:755:5>
|-CXXConstructorDecl 0x5624b8711ac8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5624b8711a08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5624b8711bc0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5624b8711da8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5624b8711cb0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5624b8712078 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5624b8711e60 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5624b8711ed8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5624b8711f50 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b8712298 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5624b8712148 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5624b87121c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5624b871a878 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5624b8712358 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5624b87123d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5624b8712448 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5624b871a9d0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5624b871a940 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b871ab18 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5624b871aa88 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5624b871ac10 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b86d0ad0 prev 0x5624b86c7910 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b86d0bc8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5624b86d0c68 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5624b86d7a30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5624b86d7e18 <col:11>
|-CXXConstructorDecl 0x5624b86d7b10 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b86d7bf8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5624b86d8560 <col:11>
|-CXXConstructorDecl 0x5624b86d7c98 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b86d7da8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5624b86d9db8 <col:11>
|-CXXDestructorDecl 0x5624b86d90c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5624b83dfc78 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b83dfd88 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5624b83e0650 <col:11>
|   `-ReturnStmt 0x5624b83e0640 <col:11>
|     `-UnaryOperator 0x5624b83e0628 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b83e0618 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5624b83dfdf8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5624b83dff08 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5624b87b73a0 <col:11>
    `-ReturnStmt 0x5624b87b7390 <col:11>
      `-UnaryOperator 0x5624b87b7378 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5624b87b7368 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b86c6ac8 prev 0x5624b86c67d8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b86c6bc0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5624b86c6c50 <col:19, col:25> col:19 public
|-TypedefDecl 0x5624b86c6c88 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5624b832be50 'int32_t' sugar
|   |-Typedef 0x5624b823e238 'int32_t'
|   `-TypedefType 0x5624b82173f0 '__int32_t' sugar
|     |-Typedef 0x5624b8217008 '__int32_t'
|     `-BuiltinType 0x5624b81d53b0 'int'
|-TypedefDecl 0x5624b86c6cf0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5624b832c010 'int64_t' sugar
|   |-Typedef 0x5624b823e2a0 'int64_t'
|   `-TypedefType 0x5624b8217510 '__int64_t' sugar
|     |-Typedef 0x5624b82170e8 '__int64_t'
|     `-BuiltinType 0x5624b81d53d0 'long'
|-EnumDecl 0x5624b86c6d48 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5624b86c6ec0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5624b86c6ea0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5624b86c6e78 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5624b86c6e60 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5624b86c6e30 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5624b86c6fb8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5624b86c6f98 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5624b86c6f70 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5624b86c6f58 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5624b86c6f30 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5624b86c6f10 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5624b86c7008 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5624b86c7110 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c7660 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c70f0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5624b86c70d0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5624b86c71a0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c7678 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c7180 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5624b86c7160 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5624b86c7230 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c7690 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c7210 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5624b86c71f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5624b86c72c0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c76a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c72a0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5624b86c7280 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5624b86c7350 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c76c0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c7330 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5624b86c7310 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5624b86c73e0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c76d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c73c0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5624b86c73a0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5624b86c7470 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c76f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c7450 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5624b86c7430 <col:26> 'int' EnumConstant 0x5624b86c7110 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5624b86c7540 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5624b86c7708 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86c7520 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5624b86c7500 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5624b86c74c0 <col:27> 'int' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5624b86c74e0 <col:44> 'int' EnumConstant 0x5624b86c73e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5624b86c7610 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5624b86c7720 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b86c75f0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5624b86c75d0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5624b86c7590 <col:27> 'int' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5624b86c75b0 <col:44> 'int' EnumConstant 0x5624b86c72c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5624b86c7738 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5624b86c7840 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5624b86c7890 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b86c7820 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5624b86c7800 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5624b86c78b8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5624b832ba80 'uninitialized_type'
|   `-CXXRecord 0x5624b832b9e8 'uninitialized_type'
|-CXXRecordDecl 0x5624b86c7910 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5624b86c7a20 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d7e28 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b86d7f48 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5624b86d7f00 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5624b86d7e90 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86d7e80 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5624b86d7ec0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5624b86d7f30 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5624b86d7ee0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5624b86c7c68 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5624b86c7ae0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5624b86c7b58 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5624b86d3760 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5624b86d3740 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d7f60 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b86d80b0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5624b86d8038 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5624b86d7fc8 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86d7fb8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5624b86d8080 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5624b86d8068 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5624b86d7ff8 <col:16> 'long' lvalue ParmVar 0x5624b86c7ae0 'sec' 'long'
|     `-ImplicitCastExpr 0x5624b86d8098 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5624b86d8018 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86c7b58 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5624b86c7ec8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5624b86c7d38 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5624b86c7db0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5624b86d3798 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5624b86d3778 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d80c8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b86d8200 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5624b86d81a0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5624b86d8130 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86d8120 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5624b86d81d0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b86d8160 <col:16> 'int' lvalue ParmVar 0x5624b86c7d38 'sec' 'int'
|     `-ImplicitCastExpr 0x5624b86d81e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5624b86d8180 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86c7db0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5624b86c8128 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5624b86c7f98 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5624b86c8010 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5624b86d37d0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5624b86d37b0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d8218 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b86d8368 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5624b86d82f0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5624b86d8280 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86d8270 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5624b86d8338 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5624b86d8320 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5624b86d82b0 <col:16> 'unsigned long' lvalue ParmVar 0x5624b86c7f98 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5624b86d8350 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5624b86d82d0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86c8010 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5624b86c92c0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5624b86c81f8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5624b86c8270 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5624b86d3808 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5624b86d37e8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d8380 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b86d84d0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5624b86d8458 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5624b86d83e8 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86d83d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5624b86d84a0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5624b86d8488 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5624b86d8418 <col:16> 'unsigned int' lvalue ParmVar 0x5624b86c81f8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5624b86d84b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5624b86d8438 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86c8270 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5624b86c9420 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5624b86c9390 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5624b86c95b8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5624b86c94f8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5624b86c97e8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5624b86c96f0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5624b86c9998 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5624b86c98d8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d8570 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5624b86d84e8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5624b86c98d8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5624b86d85d0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5624b86c9b68 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5624b86c9aa8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d85e0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5624b86d8690 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5624b86d8668 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5624b86d8638 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5624b86c9aa8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5624b86c9d58 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5624b86c9cd0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5624b86c6870 'Timestamp'
|   | `-CXXRecord 0x5624b86c6ac8 'Timestamp'
|   `-ParenType 0x5624b86c9c70 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5624b86c9c40 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5624b86c6e10 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5624b86c6c88 'seconds_type'
|         `-TypedefType 0x5624b832be50 'int32_t' sugar
|           |-Typedef 0x5624b823e238 'int32_t'
|           `-TypedefType 0x5624b82173f0 '__int32_t' sugar
|             |-Typedef 0x5624b8217008 '__int32_t'
|             `-BuiltinType 0x5624b81d53b0 'int'
|-CXXConversionDecl 0x5624b86c9e98 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5624b86c9f68 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5624b86d8798 <col:37, line:231:5>
|   `-ReturnStmt 0x5624b86d8788 <line:227:9, col:23>
|     `-BinaryOperator 0x5624b86d8768 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5624b86d8738 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5624b86d86e8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5624b86d0c68
|       |   `-MemberExpr 0x5624b86d86b8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
|       |     `-CXXThisExpr 0x5624b86d86a8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5624b86d8750 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5624b86d8718 <col:23> 'int' 0
|-CXXMethodDecl 0x5624b86ca028 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5624b86ca0e8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b86ca1a8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b86ca268 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b86ca328 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5624b86ca498 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5624b86ca3d8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5624b86ca5e0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5624b86ca550 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86ca6a8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5624b86ca748 <col:54> "" ""
|-CXXMethodDecl 0x5624b86ca7d8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5624b86ca878 <col:54> "" ""
|-CXXMethodDecl 0x5624b86ca908 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5624b86ca9a8 <col:54> "" ""
|-CXXMethodDecl 0x5624b86caaa8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5624b86cab78 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5624b86caca8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5624b86cada0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5624b86caed8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5624b86d89b0 <col:39, line:271:5>
|   `-ReturnStmt 0x5624b86d89a0 <line:267:9, col:61>
|     `-CallExpr 0x5624b86d8940 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5624b86d8928 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b86d87b0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5624b86d1f48 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5624b86d8970 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5624b86d8810 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5624b86d0c68
|       |   `-MemberExpr 0x5624b86d87e0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
|       |     `-CXXThisExpr 0x5624b86d87d0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5624b86d8988 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5624b86d88b0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5624b86d8880 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5624b86d8840 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5624b86d8898 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5624b86d8860 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c73e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86caf98 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5624b86d8b70 <col:39, line:279:5>
|   `-ReturnStmt 0x5624b86d8b60 <line:275:9, col:61>
|     `-CallExpr 0x5624b86d8b00 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5624b86d8ae8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b86d89c8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5624b86d1f48 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5624b86d8b30 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5624b86d8a28 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5624b86d0c68
|       |   `-MemberExpr 0x5624b86d89f8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
|       |     `-CXXThisExpr 0x5624b86d89e8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5624b86d8b48 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5624b86d8ac8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5624b86d8a98 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5624b86d8a58 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5624b86d8ab0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5624b86d8a78 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c72c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86cb058 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5624b86d8d08 <col:39, line:287:5>
|   `-ReturnStmt 0x5624b86d8cf8 <line:283:9, col:53>
|     `-BinaryOperator 0x5624b86d8cd8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5624b86d8ca8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5624b86d8bc8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5624b86d0c68
|       |   `-MemberExpr 0x5624b86d8b98 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
|       |     `-CXXThisExpr 0x5624b86d8b88 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5624b86d8cc0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5624b86d8c88 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5624b86d8c68 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86d8c38 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86d8bf8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7110 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86d8c50 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86d8c18 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86cb148 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5624b86d9fa0 <col:40, line:293:5>
|   |-DeclStmt 0x5624b86d8e50 <line:291:9, col:48>
|   | `-VarDecl 0x5624b86d8d30 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5624b86d8e30 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5624b86d8dd8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5624b86d8da8 <col:22> '<bound member function type>' ->subsec 0x5624b86ca0e8
|   |     |   `-CXXThisExpr 0x5624b86d8d98 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5624b86d8e18 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5624b86d8df8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7540 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5624b86d9f90 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5624b86d9f78 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86d9f48 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86d9f30 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5624b86d9f10 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5624b86d9ee0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5624b86d9c78 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5624b86d9c60 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5624b86d8e68 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5624b86d8d30 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5624b86d9e80 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5624b86d9e68 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5624b86d9e38 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5624b86d9c90 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5624b86d9c00 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5624b86d9be8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5624b86d9b98 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5624b86c6a18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5624b86d9b38 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5624b86d8e98 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5624b86d8e88 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5624b86d9b80 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5624b86d9b68 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5624b86d9358 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5624b86d8ec0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5624b86d8f50 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5624b86d8f20 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5624b86d8ee0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7540 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5624b86d8f38 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5624b86d8f00 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5624b86d8d30 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5624b86d9eb0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5624b86d9c48 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5624b86d9c38 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5624b86cb208 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5624b86da4f8 <col:40, line:302:5>
|   |-DeclStmt 0x5624b86da0f0 <line:297:9, col:48>
|   | `-VarDecl 0x5624b86d9fd0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5624b86da0d0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5624b86da078 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5624b86da048 <col:22> '<bound member function type>' ->subsec 0x5624b86ca0e8
|   |     |   `-CXXThisExpr 0x5624b86da038 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5624b86da0b8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5624b86da098 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7610 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5624b86da4e8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5624b86da4d0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86da4a0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86da488 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5624b86da468 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5624b86da438 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5624b86da360 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5624b86da348 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5624b86da108 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5624b86d9fd0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5624b86da3d8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5624b86da3c0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5624b86da390 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5624b86da378 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5624b86da2e8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5624b86da2d0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5624b86da2b0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5624b86c6a18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5624b86da250 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5624b86da138 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5624b86da128 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5624b86da298 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5624b86da280 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5624b86da210 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5624b86da160 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5624b86da1f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5624b86da1c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5624b86da180 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7610 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5624b86da1d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5624b86da1a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5624b86d9fd0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5624b86da408 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5624b86da330 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5624b86da320 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5624b86cb2c8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5624b86da580 <col:40, line:306:5>
|   `-ReturnStmt 0x5624b86da570 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5624b86da540 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5624b86da528 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b86da518 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5624b86cb468 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5624b86cb378 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5624b86cb638 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5624b86cb540 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5624b86cb728 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5624b86cb898 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5624b86cb7d8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5624b86da6c8 <col:56, line:320:5>
|   `-ReturnStmt 0x5624b86da6b8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5624b86da6a0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86da670 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86da658 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5624b86da618 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5624b86da5e8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5624b86da5a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cb7d8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5624b86da600 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5624b86da5c8 <col:31> 'int' 0
|-CXXMethodDecl 0x5624b86cbad8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5624b86cb950 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86cb9c8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86da898 <col:72, line:326:5>
|   `-ReturnStmt 0x5624b86da888 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5624b86da870 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86da840 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86da828 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5624b86da7e8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5624b86da7d0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5624b86da6f0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cb950 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5624b86da790 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5624b86da778 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5624b86da710 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5624b86d03c0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5624b86da7b8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5624b86da730 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86cb9c8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86cbc88 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5624b86cbb98 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5624b86daf60 <col:56, line:337:5>
|   |-DeclStmt 0x5624b86dab98 <line:329:9, col:51>
|   | `-VarDecl 0x5624b86da8c0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5624b86dab80 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5624b86dab50 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5624b86dab38 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5624b86dab20 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5624b86daaf0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5624b86daad8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5624b86daac0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5624b86da9b0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5624b86dad50 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5624b86dac00 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5624b86d0c68
|   | | `-MemberExpr 0x5624b86dabd0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5624b86d1c18
|   | |   `-DeclRefExpr 0x5624b86dabb0 <col:9> 'Timestamp' lvalue Var 0x5624b86da8c0 't' 'Timestamp'
|   | `-BinaryOperator 0x5624b86dad30 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5624b86dad00 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5624b86dac30 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5624b86cbb98 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5624b86dad18 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5624b86dace0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5624b86dacc0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5624b86dac90 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5624b86dac50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5624b86daca8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5624b86dac70 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c73e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5624b86daf48 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5624b86daf18 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5624b86daf00 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5624b86daee0 <col:16> 'Timestamp' lvalue Var 0x5624b86da8c0 't' 'Timestamp'
|-CXXMethodDecl 0x5624b86cbe50 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5624b86cbd40 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86cbdb8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86db118 <col:72, line:343:5>
|   `-ReturnStmt 0x5624b86db108 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5624b86db0f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86db0c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86db0a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5624b86db068 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5624b86db050 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5624b86daf98 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cbd40 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5624b86db010 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5624b86daff8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5624b86dafb8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5624b86d0508 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5624b86db038 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5624b86dafd8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86cbdb8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86cbfa0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5624b86cbf10 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5624b86db560 <col:56, line:354:5>
|   |-DeclStmt 0x5624b86db308 <line:346:9, col:51>
|   | `-VarDecl 0x5624b86db140 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5624b86db2f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5624b86db2c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5624b86db2a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5624b86db290 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5624b86db260 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5624b86db248 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5624b86db230 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5624b86db200 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5624b86db4c0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5624b86db370 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5624b86d0c68
|   | | `-MemberExpr 0x5624b86db340 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5624b86d1c18
|   | |   `-DeclRefExpr 0x5624b86db320 <col:9> 'Timestamp' lvalue Var 0x5624b86db140 't' 'Timestamp'
|   | `-BinaryOperator 0x5624b86db4a0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5624b86db470 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5624b86db3a0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5624b86cbf10 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5624b86db488 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5624b86db450 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5624b86db430 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5624b86db400 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5624b86db3c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5624b86db418 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5624b86db3e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c72c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5624b86db548 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5624b86db518 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5624b86db500 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5624b86db4e0 <col:16> 'Timestamp' lvalue Var 0x5624b86db140 't' 'Timestamp'
|-CXXMethodDecl 0x5624b86cc168 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5624b86cc058 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86cc0d0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86db718 <col:72, line:360:5>
|   `-ReturnStmt 0x5624b86db708 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5624b86db6f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86db6c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86db6a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5624b86db668 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5624b86db650 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5624b86db598 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cc058 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5624b86db610 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5624b86db5f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5624b86db5b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5624b86d0650 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5624b86db638 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5624b86db5d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86cc0d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86cc2b8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5624b86cc228 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5624b86e8088 <col:56, line:371:5>
|   |-DeclStmt 0x5624b86db908 <line:363:9, col:51>
|   | `-VarDecl 0x5624b86db740 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5624b86db8f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5624b86db8c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5624b86db8a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5624b86db890 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5624b86db860 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5624b86db848 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5624b86db830 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5624b86db800 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5624b86e7fe8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5624b86db970 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5624b86d0c68
|   | | `-MemberExpr 0x5624b86db940 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5624b86d1c18
|   | |   `-DeclRefExpr 0x5624b86db920 <col:9> 'Timestamp' lvalue Var 0x5624b86db740 't' 'Timestamp'
|   | `-CallExpr 0x5624b86e7f88 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5624b86e7f70 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5624b86db9a0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5624b86d1f48 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5624b86e7fb8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5624b86db9c0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5624b86cc228 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5624b86e7fd0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5624b86e7f50 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5624b86e7f20 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5624b86db9e0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7110 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5624b86e7f38 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5624b86dba00 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5624b86e8070 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5624b86e8040 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5624b86e8028 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5624b86e8008 <col:16> 'Timestamp' lvalue Var 0x5624b86db740 't' 'Timestamp'
|-CXXMethodDecl 0x5624b86cc3a8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5624b86e81c8 <col:39, line:377:5>
|   `-ReturnStmt 0x5624b86e81b8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5624b86e81a0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5624b86e8170 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b86e8158 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5624b86e8118 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5624b86e80c0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5624b86e8100 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5624b86e80e0 <col:29> 'int' 1
|-CXXMethodDecl 0x5624b86cc468 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5624b86e82a8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5624b86e8260 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5624b86e81f0 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86e81e0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5624b86e8220 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5624b86e8290 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5624b86e8240 <col:19> 'int' 0
|-CXXMethodDecl 0x5624b86cc668 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5624b86cc518 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86cc590 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5624b86d3840 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5624b86d3820 <col:60> 'int' 0
| `-CompoundStmt 0x5624b86e84a0 <col:63, line:395:5>
|   `-BinaryOperator 0x5624b86e8480 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5624b86e8300 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5624b86d0c68
|     | `-MemberExpr 0x5624b86e82d0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
|     |   `-CXXThisExpr 0x5624b86e82c0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5624b86e8460 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5624b86e83f0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5624b86e8390 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5624b86e8378 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5624b86e8360 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5624b86e8330 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cc518 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5624b86e83d8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5624b86e83b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5624b86e8448 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5624b86e8430 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5624b86e8410 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86cc590 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86cc838 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5624b86cc728 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86cc7a0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e85f8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5624b86e85b0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5624b86e84c8 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86e84b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5624b86e85e0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b86e84f8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cc728 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5624b86e8570 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5624b86e8558 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b86e8518 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5624b86d0508 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5624b86e8598 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5624b86e8538 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86cc7a0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86cca08 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5624b86cc8f8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86cc970 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e8750 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5624b86e8708 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5624b86e8620 <col:9> '<bound member function type>' ->assign 0x5624b86cc668
|     | `-CXXThisExpr 0x5624b86e8610 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5624b86e8738 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5624b86e8650 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5624b86cc8f8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5624b86e86c8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5624b86e86b0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b86e8670 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5624b86d0650 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5624b86e86f0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5624b86e8690 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86cc970 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86ccbd8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5624b86ccac8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86ccb40 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5624b86d3878 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5624b86d3858 <col:57> 'int' 0
| `-DeprecatedAttr 0x5624b86ccc88 <col:75> "" ""
|-CXXMethodDecl 0x5624b86cce18 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5624b86ccd08 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86ccd80 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b86ccec8 <col:74> "" ""
|-CXXMethodDecl 0x5624b86cd058 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5624b86ccf48 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5624b86ccfc0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b86cd108 <col:74> "" ""
|-CXXMethodDecl 0x5624b86cd198 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5624b86cd238 <col:42> "" ""
|-CXXMethodDecl 0x5624b86cfa70 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5624b86cf950 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5624b86cf9d0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5624b86cfb40 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5624b86cfc00 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5624b86cfca0 <col:20>
| `-OptimizeNoneAttr 0x5624b86cfcf8 <col:30>
|-CXXMethodDecl 0x5624b86cfd40 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5624b86cfe00 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5624b86cfec0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5624b86cff80 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5624b86d0040 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5624b86d0100 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5624b86d01c0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5624b86d0280 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5624b86d03c0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d0330 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e8898 <col:58, line:512:5>
|   `-ReturnStmt 0x5624b86e8888 <line:511:9, col:53>
|     `-BinaryOperator 0x5624b86e8868 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5624b86e8838 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e8768 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d0330 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5624b86e8850 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5624b86e8818 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5624b86e87f8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86e87c8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86e8788 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86e87e0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86e87a8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c73e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86d0508 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d0478 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e89e0 <col:58, line:516:5>
|   `-ReturnStmt 0x5624b86e89d0 <line:515:9, col:53>
|     `-BinaryOperator 0x5624b86e89b0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5624b86e8980 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e88b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d0478 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5624b86e8998 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5624b86e8960 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5624b86e8940 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86e8910 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86e88d0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86e8928 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86e88f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c72c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86d0650 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d05c0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e8b28 <col:58, line:520:5>
|   `-ReturnStmt 0x5624b86e8b18 <line:519:9, col:53>
|     `-BinaryOperator 0x5624b86e8af8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5624b86e8ac8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e89f8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d05c0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5624b86e8ae0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5624b86e8aa8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5624b86e8a88 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86e8a58 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86e8a18 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7110 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86e8a70 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86e8a38 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86d0798 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d0708 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e8c70 <col:60, line:524:5>
|   `-ReturnStmt 0x5624b86e8c60 <line:523:9, col:55>
|     `-BinaryOperator 0x5624b86e8c40 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5624b86e8c10 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e8b40 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d0708 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5624b86e8c28 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5624b86e8bf0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5624b86e8bd0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86e8ba0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86e8b60 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86e8bb8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86e8b80 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c73e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86d08e0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d0850 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e8db8 <col:60, line:528:5>
|   `-ReturnStmt 0x5624b86e8da8 <line:527:9, col:55>
|     `-BinaryOperator 0x5624b86e8d88 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5624b86e8d58 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e8c88 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d0850 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5624b86e8d70 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5624b86e8d38 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5624b86e8d18 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86e8ce8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86e8ca8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86e8d00 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86e8cc8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c72c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5624b86d0a28 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d0998 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e8f00 <col:60, line:532:5>
|   `-ReturnStmt 0x5624b86e8ef0 <line:531:9, col:55>
|     `-BinaryOperator 0x5624b86e8ed0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5624b86e8ea0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e8dd0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d0998 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5624b86e8eb8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5624b86e8e80 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5624b86e8e60 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5624b86e8e30 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5624b86e8df0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7110 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5624b86e8e48 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5624b86e8e10 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5624b86c7470 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5624b86d0ad0 prev 0x5624b86c7910 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5624b86d0bc8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5624b86d0c68 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5624b86d7a30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5624b86d7e18 <col:11>
| |-CXXConstructorDecl 0x5624b86d7b10 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5624b86d7bf8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5624b86d8560 <col:11>
| |-CXXConstructorDecl 0x5624b86d7c98 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5624b86d7da8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5624b86d9db8 <col:11>
| |-CXXDestructorDecl 0x5624b86d90c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5624b83dfc78 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5624b83dfd88 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5624b83e0650 <col:11>
| |   `-ReturnStmt 0x5624b83e0640 <col:11>
| |     `-UnaryOperator 0x5624b83e0628 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5624b83e0618 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5624b83dfdf8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5624b83dff08 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5624b87b73a0 <col:11>
|     `-ReturnStmt 0x5624b87b7390 <col:11>
|       `-UnaryOperator 0x5624b87b7378 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5624b87b7368 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5624b86d0cd0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5624b86d0dd0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5624b86d0fd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86d0db0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b86d0d90 <col:21> 'int' 0
| |-EnumConstantDecl 0x5624b86d0e60 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5624b86d0fe8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86d0e40 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5624b86d0e20 <col:23> 'int' 1
| |-EnumConstantDecl 0x5624b86d0ef0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5624b86d1000 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b86d0ed0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5624b86d0eb0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5624b86d0f80 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5624b86d1018 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b86d0f60 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5624b86d0f40 <col:27> 'int' 3
|-CXXMethodDecl 0x5624b86d1058 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5624b86d1120 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5624b86d1328 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5624b86d11d0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5624b86d1250 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5624b86d3890 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5624b86d1538 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5624b86d13e8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5624b86d1460 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5624b86d1608 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5624b86d16c8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5624b86d1838 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5624b86d1778 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5624b86d1900 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5624b86d19c0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5624b86d1a80 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5624b86d1b40 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5624b86d1be0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5624b86d1c18 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5624b86d1c88 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5624b86e8f18 <col:27, line:684:5>
|-CXXMethodDecl 0x5624b86d1d48 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5624b86e8f28 <col:27, line:696:5>
|-CXXMethodDecl 0x5624b86d1f48 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d1df8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5624b86d1e70 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e90b0 <col:66, line:700:5>
|   `-ReturnStmt 0x5624b86e90a0 <line:699:9, col:31>
|     `-CallExpr 0x5624b86e9040 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5624b86e9028 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b86e8fd8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5624b85542f8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5624b86e9070 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5624b86e8f98 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5624b86d1df8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5624b86e9088 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5624b86e8fb8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d1e70 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b86d22b8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5624b86d2008 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5624b86d2080 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5624b86d20f8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5624b86d2170 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b86e9400 <col:64, line:707:5>
|   |-DeclStmt 0x5624b86e9140 <line:704:9, col:24>
|   | `-VarDecl 0x5624b86e90d8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5624b86e9350 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5624b86e9158 <col:9> 'int32_t':'int' lvalue ParmVar 0x5624b86d2080 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5624b86e9338 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5624b86e92d0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5624b86e92b8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5624b86e9238 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5624b85595c8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5624b86e9308 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5624b86e91d8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5624b86d20f8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5624b86e9320 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5624b86e91f8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b86d2170 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5624b86e9218 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5624b86e90d8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5624b86e93e0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5624b86e9370 <col:9> 'int32_t':'int' lvalue ParmVar 0x5624b86d2008 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5624b86e93c8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5624b86e93b0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5624b86e9390 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5624b86e90d8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5624b86d2558 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5624b86d2388 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5624b86d2400 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5624b86d2478 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5624b86d27f8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5624b86d2620 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5624b86d2698 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5624b86d2710 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5624b86d2988 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5624b86d28c0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5624b86d2b88 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5624b86d2a40 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5624b86d2ab8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5624b86d2e58 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5624b86d2d98 parent 0x5624b81d52b8 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5624b86d2c48 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5624b86d2cc0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5624b86d3078 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5624b86d2fb8 parent 0x5624b81d52b8 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5624b86d2ea8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5624b86d2f20 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5624b86d3240 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5624b86d3188 parent 0x5624b81d52b8 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5624b86d30c8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5624b86d34c8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5624b86d3408 parent 0x5624b81d52b8 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5624b86d32b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5624b86d3330 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5624b86d36e8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5624b86d3628 parent 0x5624b81d52b8 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5624b86d3518 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5624b86d3590 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5624b86d8f70 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b86d9058 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d9ac8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5624b86d9a80 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5624b86d1c18
| |     `-DeclRefExpr 0x5624b86d9a60 <col:7> 'const Timestamp' lvalue ParmVar 0x5624b86d9058 '' 'const Timestamp &'
| `-CompoundStmt 0x5624b86d9b28 <col:7>
|-CXXConstructorDecl 0x5624b86d91d8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b86d92e8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5624b86d1c18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5624b86d9dc8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5624b86d9d70 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5624b86d1c18
| |     `-CXXStaticCastExpr 0x5624b86d9d40 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5624b86d9d10 <col:7> 'Timestamp' lvalue ParmVar 0x5624b86d92e8 '' 'Timestamp &&'
| `-CompoundStmt 0x5624b86d9e28 <col:7>
|-CXXDestructorDecl 0x5624b86d9398 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5624b83dfac8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b83dfbd8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5624b83e06c8 <col:7>
|   |-CXXMemberCallExpr 0x5624b83e0668 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5624b83e05a8 <col:7> '<bound member function type>' .operator= 0x5624b83dfc78
|   | | `-MemberExpr 0x5624b83e04b8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
|   | |   `-CXXThisExpr 0x5624b83e04a8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5624b83e0578 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5624b86d1c18
|   |   `-DeclRefExpr 0x5624b83e0558 <col:7> 'const Timestamp' lvalue ParmVar 0x5624b83dfbd8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5624b83e06b8 <col:7>
|     `-UnaryOperator 0x5624b83e06a0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5624b83e0690 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5624b83dff78 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5624b83e0088 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5624b87b7418 <col:7>
    |-CXXMemberCallExpr 0x5624b87b73b8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5624b87b7320 <col:7> '<bound member function type>' .operator= 0x5624b83dfdf8
    | | `-MemberExpr 0x5624b87b71f0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5624b86d1c18
    | |   `-CXXThisExpr 0x5624b87b71e0 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5624b87b72f0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5624b86d1c18
    |   `-CXXStaticCastExpr 0x5624b87b72c0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5624b87b7290 <col:7> 'Timestamp' lvalue ParmVar 0x5624b83e0088 '' 'Timestamp &&'
    `-ReturnStmt 0x5624b87b7408 <col:7>
      `-UnaryOperator 0x5624b87b73f0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5624b87b73e0 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87b43f8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5624b87b4528 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5624b87b5018 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b87b0c98 prev 0x5624b8737dc0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5624b87b0d90 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5624b87b0e20 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5624b87b0e80 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5624b87b0f28 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5624b87b1048 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5624b87b11e8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5624b87b1128 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5624b87b1438 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5624b87b12a8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5624b87b1328 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5624b87b15c8 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5624b87b1500 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5624b87b1748 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5624b87b1688 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5624b87b18f8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5624b87b1838 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5624b87b19f0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5624b87b51f0 <col:21, line:58:5>
|   `-IfStmt 0x5624b87b51d8 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5624b87b5140 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5624b87b5110 <col:6> '<bound member function type>' ->scheduled 0x5624b87b2248
|     |   `-ImplicitCastExpr 0x5624b87b5160 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5624b87b5100 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5624b87b51b8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5624b87b5188 <col:6> '<bound member function type>' ->unschedule 0x5624b87b38a0
|         `-CXXThisExpr 0x5624b87b5178 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5624b87b1af0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5624b87b5390 <col:26, line:65:5>
|   |-BinaryOperator 0x5624b87b52b0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5624b87b5248 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5624b87b4528
|   | | `-MemberExpr 0x5624b87b5218 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5624b87b45e8
|   | |   `-CXXThisExpr 0x5624b87b5208 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5624b87b5298 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5624b87b5278 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5624b87b4a48 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5624b87b5370 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5624b87b52e0 <col:2> 'void *' lvalue ->_thunk 0x5624b87b4668
|     | `-CXXThisExpr 0x5624b87b52d0 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5624b87b5348 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5624b87b5310 <col:20> 'int' 1
|-CXXMethodDecl 0x5624b87b1c30 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5624b87b1ba0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5624b87b54f0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5624b87b53e0 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5624b87b53b0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5624b87b1ba0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5624b87b54d0 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5624b87b54a0 <col:2> '<bound member function type>' ->assign 0x5624b87b1af0
|       `-CXXThisExpr 0x5624b87b5490 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5624b87b1e00 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5624b87b1ce8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5624b87b1d68 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5624b87b5670 <col:58, line:79:5>
|   |-BinaryOperator 0x5624b87b55b8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5624b87b5550 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5624b87b4528
|   | | `-MemberExpr 0x5624b87b5520 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5624b87b45e8
|   | |   `-CXXThisExpr 0x5624b87b5510 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5624b87b55a0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5624b87b5580 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5624b87b1ce8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5624b87b5650 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5624b87b55e8 <col:2> 'void *' lvalue ->_thunk 0x5624b87b4668
|     | `-CXXThisExpr 0x5624b87b55d8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5624b87b5638 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5624b87b5618 <col:11> 'void *' lvalue ParmVar 0x5624b87b1d68 'user_data' 'void *'
|-CXXMethodDecl 0x5624b87b1f50 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5624b87b1ec0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5624b87b5808 <col:35, line:87:5>
|   |-BinaryOperator 0x5624b87b5738 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5624b87b56d0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5624b87b4528
|   | | `-MemberExpr 0x5624b87b56a0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5624b87b45e8
|   | |   `-CXXThisExpr 0x5624b87b5690 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5624b87b5720 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5624b87b5700 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5624b87b4c20 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5624b87b57e8 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5624b87b5768 <col:2> 'void *' lvalue ->_thunk 0x5624b87b4668
|     | `-CXXThisExpr 0x5624b87b5758 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5624b87b57d0 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5624b87b57b8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5624b87b5798 <col:11> 'Element *' lvalue ParmVar 0x5624b87b1ec0 'element' 'Element *'
|-CXXMethodDecl 0x5624b87b2098 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5624b87b2008 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5624b87b59a0 <col:29, line:94:5>
|   |-BinaryOperator 0x5624b87b58d0 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5624b87b5868 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5624b87b4528
|   | | `-MemberExpr 0x5624b87b5838 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5624b87b45e8
|   | |   `-CXXThisExpr 0x5624b87b5828 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5624b87b58b8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5624b87b5898 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5624b87b4df8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5624b87b5980 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5624b87b5900 <col:2> 'void *' lvalue ->_thunk 0x5624b87b4668
|     | `-CXXThisExpr 0x5624b87b58f0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5624b87b5968 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5624b87b5950 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5624b87b5930 <col:11> 'Task *' lvalue ParmVar 0x5624b87b2008 'task' 'Task *'
|-CXXMethodDecl 0x5624b87b2188 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5624b87b5a80 <col:37, line:100:5>
|   `-ReturnStmt 0x5624b87b5a70 <line:99:2, col:19>
|     `-BinaryOperator 0x5624b87b5a50 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5624b87b5a20 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5624b87b59d0 <col:9> 'Element *const' lvalue ->_owner 0x5624b87b46c8
|       |   `-CXXThisExpr 0x5624b87b59c0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5624b87b5a38 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5624b87b5a00 <col:19> 'int' 0
|-CXXMethodDecl 0x5624b87b2248 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5624b87b5b40 <col:35, line:105:5>
|   `-ReturnStmt 0x5624b87b5b30 <line:104:2, col:23>
|     `-BinaryOperator 0x5624b87b5b10 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5624b87b5af8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5624b87b5aa8 <col:9> 'const int' lvalue ->_schedpos1 0x5624b87b4348
|       |   `-CXXThisExpr 0x5624b87b5a98 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5624b87b5ad8 <col:23> 'int' 0
|-CXXMethodDecl 0x5624b87b2308 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5624b87b5ba8 <col:51, line:118:5>
|   `-ReturnStmt 0x5624b87b5b98 <line:117:2, col:9>
|     `-MemberExpr 0x5624b87b5b68 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|       `-CXXThisExpr 0x5624b87b5b58 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5624b87b23c8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5624b87b6100 <col:37, line:136:5>
|   `-IfStmt 0x5624b87b60d8 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5624b87b5c68 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5624b87b5c50 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5624b87b5c30 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5624b87b5c00 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5624b86c9e98
|     |       `-MemberExpr 0x5624b87b5bd0 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|     |         `-CXXThisExpr 0x5624b87b5bc0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5624b87b6048 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5624b87b6030 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5624b87b6000 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5624b87b5fe8 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5624b87b5fb0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5624b87b5f98 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5624b87b5f78 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5624b86f8670 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5624b87b5f18 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5624b87b5f00 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5624b87b5e28 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5624b87b5e10 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5624b87b5df0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5624b86f8330 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5624b87b5d90 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5624b87b5c90 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|     |         |     |   `-CXXThisExpr 0x5624b87b5c80 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5624b87b5dd8 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5624b87b5dc0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5624b87b5d70 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5624b87b5d58 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5624b87b5cf8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5624b86eb990 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5624b87b5f60 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5624b87b5f48 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5624b87b5ee0 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5624b87b5ec8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5624b87b5e98 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5624b8546ee0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5624b87b60c8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5624b87b6098 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5624b87b6068 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|           `-CXXThisExpr 0x5624b87b6058 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5624b87b2488 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5624b87b61e8 <col:35, line:141:5>
|   `-ReturnStmt 0x5624b87b61d8 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5624b87b61a0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5624b87b6170 <col:9, col:17> '<bound member function type>' ->router 0x5624b874a520
|         `-ImplicitCastExpr 0x5624b87b61c0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5624b87b6158 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5624b87b6128 <col:9> 'Element *const' lvalue ->_owner 0x5624b87b46c8
|               `-CXXThisExpr 0x5624b87b6118 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5624b87b2548 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5624b87b6268 <col:37, line:146:5>
|   `-ReturnStmt 0x5624b87b6258 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5624b87b6240 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5624b87b6210 <col:9> 'Element *const' lvalue ->_owner 0x5624b87b46c8
|         `-CXXThisExpr 0x5624b87b6200 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5624b87b2608 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5624b87b62e8 <col:41, line:151:5>
|   `-ReturnStmt 0x5624b87b62d8 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5624b87b62c0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5624b87b6290 <col:9> 'RouterThread *const' lvalue ->_thread 0x5624b87b4728
|         `-CXXThisExpr 0x5624b87b6280 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5624b87b26d0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5624b87b28c8 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5624b87b2780 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5624b87b27f8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5624b87b5008 <col:50> 'bool' false
|-CXXMethodDecl 0x5624b87b2a48 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5624b87b2988 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5624b87b2b90 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5624b87b2b00 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5624b87b2cd8 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5624b87b2c48 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5624b87b2e20 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5624b87b2d90 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5624b87b2f68 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5624b87b2ed8 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5624b87b3030 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5624b87b6450 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5624b87b6438 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5624b87b63e0 <col:2, col:47> 'void'
|       |-MemberExpr 0x5624b87b6310 <col:2> '<bound member function type>' ->schedule_at_steady 0x5624b87b2b90
|       | `-CXXThisExpr 0x5624b87b6300 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b6420 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5624b87b6408 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5624b87b63c0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5624b87b63a8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5624b87b6378 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5624b8546ee0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5624b87b3170 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5624b87b30e0 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5624b87b32b8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3228 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b87b65d8 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5624b87b65c0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5624b87b6568 <col:2, col:40> 'void'
|       |-MemberExpr 0x5624b87b6478 <col:2> '<bound member function type>' ->schedule_after 0x5624b87b3170
|       | `-CXXThisExpr 0x5624b87b6468 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b65a8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5624b87b6590 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5624b87b6528 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5624b87b64f8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5624b87b64b8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b87b3228 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5624b87b6510 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5624b87b64d8 <col:38> 'int' 0
|-CXXMethodDecl 0x5624b87b3400 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3370 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b87b6848 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5624b87b6830 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5624b87b67d8 <col:2, col:49> 'void'
|       |-MemberExpr 0x5624b87b6600 <col:2> '<bound member function type>' ->schedule_after 0x5624b87b3170
|       | `-CXXThisExpr 0x5624b87b65f0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b6818 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5624b87b6800 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5624b87b6780 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5624b87b6768 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5624b87b66d8 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5624b86cbc88 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5624b87b67c0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5624b87b67a8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5624b87b66b8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b87b3370 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b87b3548 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5624b87b34b8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5624b87b6a28 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5624b87b6a10 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5624b87b69b8 <col:2, col:38> 'void'
|       |-MemberExpr 0x5624b87b6870 <col:2> '<bound member function type>' ->schedule_at_steady 0x5624b87b2b90
|       | `-CXXThisExpr 0x5624b87b6860 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b69f8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5624b87b69e0 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5624b87b6980 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5624b87b6968 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5624b87b6948 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5624b86f8330 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5624b87b6918 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5624b87b6900 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5624b87b68b0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|             |     `-CXXThisExpr 0x5624b87b68a0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5624b87b68e0 <col:33> 'const Timestamp' lvalue ParmVar 0x5624b87b34b8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5624b87b3690 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3600 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b87b6d00 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5624b87b6ce8 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5624b87b6c90 <col:2, col:79> 'void'
|       |-MemberExpr 0x5624b87b6a50 <col:2> '<bound member function type>' ->schedule_at_steady 0x5624b87b2b90
|       | `-CXXThisExpr 0x5624b87b6a40 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b6cd0 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5624b87b6cb8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5624b87b6c50 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5624b87b6b88 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5624b87b6b70 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5624b87b6b00 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5624b87b6ad0 <col:31, col:41> '<bound member function type>' .sec 0x5624b85489d8
|             | |     `-ImplicitCastExpr 0x5624b87b6b20 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5624b87b6aa0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|             | |         `-CXXThisExpr 0x5624b87b6a90 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5624b87b6b58 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5624b87b6b38 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b87b3600 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5624b87b6c18 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5624b87b6be8 <col:60, col:70> '<bound member function type>' .subsec 0x5624b85490d0
|                 `-ImplicitCastExpr 0x5624b87b6c38 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5624b87b6bb8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|                     `-CXXThisExpr 0x5624b87b6ba8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5624b87b37d8 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3748 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5624b87b7038 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5624b87b7020 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5624b87b6fc8 <col:2, col:65> 'void'
|       |-MemberExpr 0x5624b87b6d28 <col:2> '<bound member function type>' ->schedule_at_steady 0x5624b87b2b90
|       | `-CXXThisExpr 0x5624b87b6d18 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b7008 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5624b87b6ff0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5624b87b6f90 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5624b87b6f78 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5624b87b6f58 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5624b86f8330 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5624b87b6ef8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5624b87b6ee0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5624b87b6d68 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|             |     `-CXXThisExpr 0x5624b87b6d58 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5624b87b6f40 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5624b87b6f28 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5624b87b6e88 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5624b87b6e70 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5624b87b6e40 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5624b86cbc88 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5624b87b6ec8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5624b87b6eb0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5624b87b6e20 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5624b87b3748 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5624b87b38a0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5624b87b3960 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5624b87b7500 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5624b87b7090 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5624b87b7060 <col:2> '<bound member function type>' ->unschedule 0x5624b87b38a0
|   |   `-CXXThisExpr 0x5624b87b7050 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5624b87b74e8 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5624b87b74b0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5624b87b7498 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5624b87b7148 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5624b83dff78 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5624b87b70c0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5624b87b43a8
|       | `-CXXThisExpr 0x5624b87b70b0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5624b87b7130 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5624b87b7100 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5624b87b3a20 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5624b87b7858 <col:42, line:310:5>
|   |-IfStmt 0x5624b87b76a0 <line:306:2, line:307:23>
|   | |-CallExpr 0x5624b87b75d0 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5624b87b75b8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5624b87b7558 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5624b86e9e00 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5624b87b7690 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5624b87b7678 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5624b87b7648 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5624b87b7630 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5624b87b7600 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5624b87b7848 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5624b87b7830 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5624b87b7800 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5624b87b77e8 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5624b87b77a8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5624b87b7790 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5624b87b7760 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5624b86cbfa0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5624b87b77d0 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5624b87b7740 <col:30> 'int' 500
|-CXXMethodDecl 0x5624b87b3b60 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3ad0 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b87b3c08 <col:69> "" ""
|-CXXMethodDecl 0x5624b87b3d18 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3c88 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b87b3dc0 <col:70> "" ""
|-CXXMethodDecl 0x5624b87b3ed0 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3e40 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b87b3f78 <col:71> "" ""
|-CXXMethodDecl 0x5624b87b4088 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5624b87b3ff8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5624b87b4130 <col:72> "" ""
|-EnumDecl 0x5624b87b41a0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5624b87b42a0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5624b87b42f0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5624b87b4280 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5624b87b4260 <col:25> 'int' 1
|-AccessSpecDecl 0x5624b87b4308 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5624b87b4348 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5624b87b43a8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5624b87b43f8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5624b87b4528 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5624b87b5018 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5624b87b45e8 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5624b87b4668 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5624b87b46c8 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5624b87b4728 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5624b87b4878 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5624b87b4788 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5624b87b4a48 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5624b87b4930 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5624b87b49b0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5624b87b4c20 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5624b87b4b08 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5624b87b4b88 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5624b87b4df8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5624b87b4ce0 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5624b87b4d60 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5624b87b4fc8 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b8816240 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5624b8816358 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5624b88163e8 <col:16, col:22> col:16 public
|-EnumDecl 0x5624b8816410 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5624b8816510 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5624b8816760 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b88164f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5624b88164d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5624b88165a0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5624b8816778 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8816580 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5624b8816560 <col:24> 'int' 22
| |-EnumConstantDecl 0x5624b8816630 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5624b8816790 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b8816610 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5624b88165f0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5624b88166c0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5624b88167a8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5624b88166a0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5624b8816680 <col:25> 'int' 95
| `-EnumConstantDecl 0x5624b8816710 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5624b8818148 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5624b8818578 <col:7>
|-CXXConstructorDecl 0x5624b8818248 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5624b8818248
| `-ParmVarDecl 0x5624b8818358 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5624b88183f8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b8818508 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5624b88a7400 <col:7>
`-CXXDestructorDecl 0x5624b881a678 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5624b88167d8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5624b8816938 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5624b88169c8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5624b8816a00 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5624b832bd70 'uint32_t' sugar
|   |-Typedef 0x5624b823e3d8 'uint32_t'
|   `-TypedefType 0x5624b8217480 '__uint32_t' sugar
|     |-Typedef 0x5624b8217078 '__uint32_t'
|     `-BuiltinType 0x5624b81d5450 'unsigned int'
|-CXXConstructorDecl 0x5624b8816b48 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5624b8816a70 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5624b8818028 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5624b8818588 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5624b88178e0 'base' 'int'
| | `-ImplicitCastExpr 0x5624b88180f0 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5624b88180b0 <col:16> 'int' lvalue ParmVar 0x5624b8816a70 'b' 'int'
| `-CompoundStmt 0x5624b88185f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5624b8817040 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5624b8816c10 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5624b8816c90 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5624b8816d08 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5624b8816d88 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5624b8816e48 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5624b8816ec8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5624b8817498 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5624b8817110 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5624b88173f8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5624b88171b8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5624b8817258 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5624b88172d0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5624b8818070 <col:82> 'const ArgContext' lvalue Var 0x5624b880beb8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5624b8819528 <col:94, line:1067:5>
| |   |-DeclStmt 0x5624b8818788 <line:1054:9, col:64>
| |   | `-VarDecl 0x5624b8818618 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5624b8818740 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5624b88189a8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5624b88187b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5624b8818980 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5624b8818960 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5624b8818910 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5624b88188f0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5624b8818898 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5624b8818848 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5624b8818878 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5624b88188d8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5624b88188b8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5624b8818940 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5624b8818b08 <line:1056:9, col:27>
| |   | `-VarDecl 0x5624b8818aa0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5624b8818f50 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5624b8818e80 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5624b8818e00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5624b86f5d58 0x5624b853f338 0x5624b853f010 0x5624b85307f0 0x5624b85304a0 0x5624b852fd90 0x5624b8502700 0x5624b848ebc0
| |   | | |-CallExpr 0x5624b8818d40 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5624b8818b30 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5624b8818be0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5624b8818bb0 <col:19, col:23> '<bound member function type>' .begin 0x5624b851f9f8
| |   | | | |   `-DeclRefExpr 0x5624b8818b90 <col:19> 'const String' lvalue ParmVar 0x5624b88171b8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5624b8818c50 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5624b8818c20 <col:32, col:36> '<bound member function type>' .end 0x5624b851fc10
| |   | | | |   `-DeclRefExpr 0x5624b8818c00 <col:32> 'const String' lvalue ParmVar 0x5624b88171b8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5624b8818c70 <col:43> 'const bool' lvalue Var 0x5624b8818618 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5624b8818cd8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5624b8818cb8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5624b8818d00 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5624b8818aa0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5624b8818d20 <col:73> 'const int' lvalue Var 0x5624b88187b8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5624b8818de0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5624b8818db0 <col:16, col:20> '<bound member function type>' .end 0x5624b851fc10
| |   | |     `-DeclRefExpr 0x5624b8818d90 <col:16> 'const String' lvalue ParmVar 0x5624b88171b8 'str' 'const String &'
| |   | `-BinaryOperator 0x5624b8818f30 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5624b8818ec8 <col:13> 'int' lvalue ->status 0x5624b8817948
| |   |   | `-CXXThisExpr 0x5624b8818eb8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5624b8818f18 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5624b8818ef8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b88165a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5624b88191a0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5624b8819088 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5624b8819070 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5624b8819058 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5624b8818f78 <col:13> 'int' lvalue ->status 0x5624b8817948
| |   | | |     `-CXXThisExpr 0x5624b8818f68 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5624b8819038 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5624b8819008 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5624b8818fb8 <col:23> 'int' lvalue ->status 0x5624b8817948
| |   | |   |   `-CXXThisExpr 0x5624b8818fa8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5624b8819020 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5624b8818fe8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b8816630 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5624b8819180 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5624b8819120 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5624b88190c8 <col:13, col:18> '<bound member function type>' .error 0x5624b87c2820
| |   |   | | `-DeclRefExpr 0x5624b88190a8 <col:13> 'const ArgContext' lvalue ParmVar 0x5624b88172d0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5624b8819148 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5624b88190f8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5624b8819170 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5624b8819160 <col:20> 'bool' false
| |   |-DeclStmt 0x5624b8819378 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5624b8819320 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5624b88192b0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5624b88194d8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5624b8819390 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5624b84c2b88
| |   | |-DeclRefExpr 0x5624b88193d8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5624b8818aa0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5624b88194a8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5624b8819420 <col:64> 'V' lvalue ParmVar 0x5624b8817258 'result' 'V &'
| |   `-ReturnStmt 0x5624b8819518 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5624b8819508 <col:16> 'bool' true
| `-CXXMethodDecl 0x5624b88aaf68 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5624b88aad40 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5624b88aae18 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5624b88aae80 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5624b88acd00 <col:94, line:1067:5>
|     |-DeclStmt 0x5624b88ab778 <line:1054:9, col:64>
|     | `-VarDecl 0x5624b88ab598 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5624b88ab708 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5624b88ab6d8 <col:36, col:55> 'const bool' lvalue Var 0x5624b84b1da0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5624b88ab958 <line:1055:9, col:91>
|     | `-VarDecl 0x5624b88ab790 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5624b88ab8d8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5624b88ab8c0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5624b88ab8a0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5624b88ab880 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5624b88ab860 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5624b88ab828 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5624b88ab808 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5624b8818878 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5624b88ab848 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5624b88188b8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5624b8818940 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5624b88abaf0 <line:1056:9, col:27>
|     | `-VarDecl 0x5624b88aba88 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5624b88abf78 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5624b88abf20 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5624b88abdd8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5624b88abda8 <col:13> '<bound member function type>' ->parse 0x5624b8817040
|     | | | | `-CXXThisExpr 0x5624b88abd98 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5624b88abc38 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5624b88abc08 <col:19, col:23> '<bound member function type>' .begin 0x5624b851f9f8
|     | | | |   `-DeclRefExpr 0x5624b88abbe8 <col:19> 'const String' lvalue ParmVar 0x5624b88aad40 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5624b88abca8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5624b88abc78 <col:32, col:36> '<bound member function type>' .end 0x5624b851fc10
|     | | | |   `-DeclRefExpr 0x5624b88abc58 <col:32> 'const String' lvalue ParmVar 0x5624b88aad40 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5624b88abe48 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5624b88abe28 <col:43> 'const bool' lvalue Var 0x5624b88ab598 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5624b88abd30 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5624b88abd18 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5624b88abcf8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5624b88abe60 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5624b88abd58 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5624b88aba88 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5624b88abe98 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5624b88abe78 <col:73> 'const int' lvalue Var 0x5624b88ab790 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5624b88abf00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5624b88abed0 <col:16, col:20> '<bound member function type>' .end 0x5624b851fc10
|     | |     `-DeclRefExpr 0x5624b88abeb0 <col:16> 'const String' lvalue ParmVar 0x5624b88aad40 'str' 'const String &'
|     | `-BinaryOperator 0x5624b88abf58 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5624b8818ec8 <col:13> 'int' lvalue ->status 0x5624b8817948
|     |   | `-CXXThisExpr 0x5624b8818eb8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5624b88abf40 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5624b8818ef8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b88165a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5624b88ac0f0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5624b88ac010 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5624b88abff8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5624b88abfe0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5624b8818f78 <col:13> 'int' lvalue ->status 0x5624b8817948
|     | | |     `-CXXThisExpr 0x5624b8818f68 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5624b88abfc0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5624b88abf90 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5624b8818fb8 <col:23> 'int' lvalue ->status 0x5624b8817948
|     | |   |   `-CXXThisExpr 0x5624b8818fa8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5624b88abfa8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5624b8818fe8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b8816630 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5624b88ac0d0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5624b88ac080 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5624b88ac050 <col:13, col:18> '<bound member function type>' .error 0x5624b87c2820
|     |   | | `-DeclRefExpr 0x5624b88ac030 <col:13> 'const ArgContext' lvalue ParmVar 0x5624b88aae80 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5624b88ac0a8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5624b88190f8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5624b88ac0c0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5624b8819160 <col:20> 'bool' false
|     |-DeclStmt 0x5624b88ac638 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5624b88ac5e0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5624b88ac590 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5624b88ac570 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5624b88ac500 'type'
|     |       `-ElaboratedType 0x5624b88ac4b0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5624b88ac490 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x5624b84b1ef8 'unsigned_type'
|     |           `-BuiltinType 0x5624b81d5450 'unsigned int'
|     |-CallExpr 0x5624b88acc90 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5624b88acc78 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5624b88acbf8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5624b88acad8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5624b84c2b88 'extract_integer')
|     | |-ImplicitCastExpr 0x5624b88accd8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5624b88accc0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5624b88ac698 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5624b88aba88 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5624b88ac768 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5624b88ac718 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5624b88aae18 'result' 'unsigned int &'
|     `-ReturnStmt 0x5624b88accf0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5624b8819508 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5624b8817858 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5624b8817508 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5624b88177b8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5624b88175b8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5624b8817658 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5624b88176d0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5624b8818090 <col:71> 'const ArgContext' lvalue Var 0x5624b880beb8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5624b8819c98 <col:83, line:1083:5>
| |   |-DeclStmt 0x5624b88195f0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5624b8819588 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5624b8819c70 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5624b8819880 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5624b8819708 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5624b88196d0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5624b8819618 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5624b8819670 <col:31> 'const String' lvalue ParmVar 0x5624b88175b8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5624b8819690 <col:36> 'V' lvalue Var 0x5624b8819588 'x' 'V'
| |     | |   `-DeclRefExpr 0x5624b88196b0 <col:39> 'const ArgContext' lvalue ParmVar 0x5624b88176d0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5624b8819860 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5624b8819840 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5624b8819828 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5624b8819810 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5624b8819730 <col:17> 'int' lvalue ->status 0x5624b8817948
| |     |     |     `-CXXThisExpr 0x5624b8819720 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5624b88197f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5624b88197c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5624b8819770 <col:27> 'int' lvalue ->status 0x5624b8817948
| |     |       |   `-CXXThisExpr 0x5624b8819760 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5624b88197d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5624b88197a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b8816630 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5624b88198b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5624b88198a0 <col:20> 'bool' false
| |     `-IfStmt 0x5624b8819c48 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5624b8819950 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5624b8819920 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5624b88198d0 <col:18> 'int' lvalue ->status 0x5624b8817948
| |       | |   `-CXXThisExpr 0x5624b88198c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5624b8819938 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5624b8819900 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b8816630 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5624b8819b88 <col:42, line:1079:9>
| |       | |-CallExpr 0x5624b8819b30 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5624b8819980 <line:1076:13> '<bound member function type>' ->range_error 0x5624b8817f58
| |       | | | `-CXXThisExpr 0x5624b8819970 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5624b88199b0 <col:25> 'const ArgContext' lvalue ParmVar 0x5624b88176d0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5624b8819a90 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5624b8819b08 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5624b8819ae8 <col:43> 'V' lvalue Var 0x5624b8819588 'x' 'V'
| |       | `-ReturnStmt 0x5624b8819b78 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5624b8819b68 <col:20> 'bool' false
| |       `-CompoundStmt 0x5624b8819c28 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5624b8819be8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5624b8819ba8 <col:13> 'V' lvalue ParmVar 0x5624b8817658 'result' 'V &'
| |         | `-DeclRefExpr 0x5624b8819bc8 <col:22> 'V' lvalue Var 0x5624b8819588 'x' 'V'
| |         `-ReturnStmt 0x5624b8819c18 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5624b8819c08 <col:20> 'bool' true
| `-CXXMethodDecl 0x5624b88aa928 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5624b88aa700 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5624b88aa7d8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5624b88aa840 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5624b88ab578 <col:83, line:1083:5>
|     |-DeclStmt 0x5624b88aabb0 <line:1071:9, col:12>
|     | `-VarDecl 0x5624b88aab48 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5624b88ab550 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5624b88ab1e0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5624b88ab108 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5624b88ab0d0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5624b88ab088 <col:14> '<bound member function type>' ->parse_saturating 0x5624b88aaf68
|       | |   | `-CXXThisExpr 0x5624b88ab078 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5624b88aac20 <col:31> 'const String' lvalue ParmVar 0x5624b88aa700 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5624b88aac40 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5624b88aab48 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5624b88aac60 <col:39> 'const ArgContext' lvalue ParmVar 0x5624b88aa840 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5624b88ab1c0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5624b88ab1a0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5624b88ab188 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5624b88ab170 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5624b8819730 <col:17> 'int' lvalue ->status 0x5624b8817948
|       |     |     `-CXXThisExpr 0x5624b8819720 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5624b88ab150 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5624b88ab120 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5624b8819770 <col:27> 'int' lvalue ->status 0x5624b8817948
|       |       |   `-CXXThisExpr 0x5624b8819760 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5624b88ab138 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5624b88197a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b8816630 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5624b88ab200 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5624b88198a0 <col:20> 'bool' false
|       `-IfStmt 0x5624b88ab528 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5624b88ab240 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5624b88ab210 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5624b88198d0 <col:18> 'int' lvalue ->status 0x5624b8817948
|         | |   `-CXXThisExpr 0x5624b88198c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5624b88ab228 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5624b8819900 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5624b8816630 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5624b88ab460 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5624b88ab3d0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5624b8819980 <line:1076:13> '<bound member function type>' ->range_error 0x5624b8817f58
|         | | | `-CXXThisExpr 0x5624b8819970 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5624b88ab260 <col:25> 'const ArgContext' lvalue ParmVar 0x5624b88aa840 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5624b88ab438 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5624b88ab408 <col:31, col:50> 'const bool' lvalue Var 0x5624b84b1da0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5624b88ab3a8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5624b88ab390 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5624b88ab378 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5624b88ab358 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5624b88aab48 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5624b88ab450 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5624b8819b68 <col:20> 'bool' false
|         `-CompoundStmt 0x5624b88ab508 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5624b88ab4d8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5624b88ab480 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5624b88aa7d8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5624b88ab4c0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5624b88ab4a0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5624b88aab48 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5624b88ab4f8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5624b8819c08 <col:20> 'bool' true
|-FieldDecl 0x5624b88178e0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5624b8817948 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5624b8817998 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5624b8817c50 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5624b88179d8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5624b8817a58 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5624b8817ad0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5624b8817b50 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5624b8817f58 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5624b8817d20 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5624b8817d98 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5624b8817e30 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5624b881a4f8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5624b881a4f8
| `-ParmVarDecl 0x5624b881a608 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5624b881a788 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b881a898 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5624b88a7410 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5624b88a73e0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5624b88a73b0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5624b88a7380 <col:7> 'IntArg' lvalue ParmVar 0x5624b881a898 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5624b88178e0 'base' 'int'
| | `-ImplicitCastExpr 0x5624b88a7508 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5624b88a74d8 <col:7> 'int' xvalue .base 0x5624b88178e0
| |     `-CXXStaticCastExpr 0x5624b88a74a8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5624b88a7478 <col:7> 'IntArg' lvalue ParmVar 0x5624b881a898 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5624b8817948 'status' 'int'
| | `-ImplicitCastExpr 0x5624b88a75d8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5624b88a75a8 <col:7> 'int' xvalue .status 0x5624b8817948
| |     `-CXXStaticCastExpr 0x5624b88a7578 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5624b88a7548 <col:7> 'IntArg' lvalue ParmVar 0x5624b881a898 '' 'IntArg &&'
| `-CompoundStmt 0x5624b88a7630 <col:7>
`-CXXDestructorDecl 0x5624b88a6570 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5624b881ea90 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5624b881ece8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5624b88a6498 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5624b88a6a10 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5624b88a69f0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5624b88a6a80 <col:19>
|-CXXConstructorDecl 0x5624b88a6678 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5624b88a6678
| `-ParmVarDecl 0x5624b88a6788 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5624b88a6828 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5624b88a6938 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5624b88a7640 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5624b88a7360 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5624b88a7330 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5624b88a7300 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5624b88a6938 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5624b88a76b0 <col:19>
`-CXXDestructorDecl 0x5624b88a6ac0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
