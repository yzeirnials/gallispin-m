
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc79303a8 prev 0x556bc7927b48 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc79304a0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x556bc7930530 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x556bc79305a8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x556bc7930668 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x556bc7930730 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x556bc79308a8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x556bc79307e0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x556bc7930950 <col:24>
| `-OptimizeNoneAttr 0x556bc79309a8 <col:34>
|-CXXMethodDecl 0x556bc79309f0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x556bc7930ca8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x556bc7930aa0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x556bc7930b18 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x556bc7930b98 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x556bc7930d60 <line:229:7, col:14> col:7 private
|-FieldDecl 0x556bc7930d98 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x556bc7930e00 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x556bc7930e88 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x556bc79311a8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x556bc7930f40 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x556bc7930fb8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x556bc7931030 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x556bc79310b0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x556bc79312c0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x556bc7938c38 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x556bc7938c38
| `-ParmVarDecl 0x556bc7938d48 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x556bc7938de8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x556bc7938de8
| `-ParmVarDecl 0x556bc7938ef8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x556bc79f3ff0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc79233c0 prev 0x556bc7923140 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556bc79234b8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x556bc7923548 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x556bc79235a8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x556bc7923698 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x556bc7923798 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x556bc7923968 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x556bc7923818 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x556bc7923890 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x556bc7923af8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x556bc7923a30 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x556bc7923ba0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x556bc7923cd8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x556bc7923c10 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x556bc7923e78 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x556bc7923db8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x556bc7924018 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x556bc7923f58 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x556bc79240c0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x556bc79241c0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x556bc79242a0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc79241a0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x556bc7924180 <col:26> 'int' 1
| `-EnumConstantDecl 0x556bc7924250 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x556bc79242b8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc7924230 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x556bc7924210 <col:44> 'int' 2
|-CXXMethodDecl 0x556bc7924400 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x556bc79242e8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x556bc7924368 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x556bc7924558 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x556bc79244c8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x556bc7924798 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x556bc7924618 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x556bc7924690 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x556bc7924848 <col:20>
| `-OptimizeNoneAttr 0x556bc79248a0 <col:30>
|-CXXMethodDecl 0x556bc79249a8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x556bc79248e0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x556bc7924a50 <col:20>
| `-OptimizeNoneAttr 0x556bc7924aa8 <col:30>
|-CXXMethodDecl 0x556bc7924af8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x556bc7924bc0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x556bc7924cd8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x556bc7924d60 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x556bc7924de8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x556bc7924e70 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x556bc7924ef8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x556bc7924f88 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x556bc7925048 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x556bc79250d0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x556bc7925158 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x556bc79251e0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x556bc7925268 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x556bc79252f0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x556bc7925380 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x556bc7925440 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x556bc79254d0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x556bc7925620 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x556bc7925588 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x556bc79257b0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x556bc79256e0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x556bc7925a60 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x556bc7925868 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x556bc79258e8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x556bc7925968 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x556bc7925b18 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x556bc7925c20 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556bc7925eb0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc7925c00 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x556bc7925be0 <col:33> 'int' 0
| |-EnumConstantDecl 0x556bc7925cb0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556bc7925ec8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc7925c90 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x556bc7925c70 <col:32> 'int' 20
| |-EnumConstantDecl 0x556bc7925d40 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556bc7925ee0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc7925d20 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x556bc7925d00 <col:38> 'int' 90
| |-EnumConstantDecl 0x556bc7925dd0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556bc7925ef8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc7925db0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x556bc7925d90 <col:35> 'int' 100
| `-EnumConstantDecl 0x556bc7925e60 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x556bc7925f10 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc7925e40 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x556bc7925e20 <col:32> 'int' 2000
|-CXXMethodDecl 0x556bc7925f50 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x556bc7926390 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556bc7926200 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x556bc7926278 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556bc7926460 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x556bc79265e0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x556bc7926510 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556bc79267e8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556bc7926698 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x556bc7926710 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556bc79268e8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x556bc7926988 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x556bc7926a50 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x556bc7926ae0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x556bc7926d10 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc7926ac0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x556bc7926aa0 <col:36> 'int' EnumConstant 0x556bc7926a50 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x556bc7926b30 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556bc7926b80 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556bc7926bd0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556bc7926c20 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556bc7926c70 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x556bc7926cc0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x556bc7926df8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x556bc7926d38 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x556bc7926ec0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x556bc7926f80 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x556bc7927040 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x556bc7927100 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x556bc7927218 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x556bc79272e0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x556bc7927460 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x556bc7927390 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x556bc7927588 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x556bc7927788 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x556bc7927638 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x556bc79276b8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x556bc79350d8 <col:54, line:127:5>
|   |-ParenExpr 0x556bc7934f88 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x556bc7934f58 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7934c48 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x556bc7934c20 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x556bc7934c08 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x556bc7934bf0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x556bc7934bc0 <col:31> 'Router *' lvalue ->_router 0x556bc7932aa0
|   |   |         `-CXXThisExpr 0x556bc7934bb0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x556bc7934ca8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc7934c88 <col:48> 'int' 0
|   |   `-CallExpr 0x556bc7934eb8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x556bc7934ea0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7934e80 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc7934ef8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7934d18 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x556bc7934f10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7934d38 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x556bc7934f28 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc7934d70 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x556bc7934f40 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7934e68 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7934e50 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7934e08 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x556bc7935020 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x556bc7934fb8 <col:9> 'Router *' lvalue ->_router 0x556bc7932aa0
|   | | `-CXXThisExpr 0x556bc7934fa8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x556bc7935008 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556bc7934fe8 <col:19> 'Router *' lvalue ParmVar 0x556bc7927638 'r' 'Router *'
|   `-BinaryOperator 0x556bc79350b8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x556bc7935050 <col:9> 'int' lvalue ->_eindex 0x556bc7932b08
|     | `-CXXThisExpr 0x556bc7935040 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x556bc79350a0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x556bc7935080 <col:19> 'int' lvalue ParmVar 0x556bc79276b8 'eindex' 'int'
|-CXXMethodDecl 0x556bc7927910 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x556bc7927848 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x556bc79279e0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x556bc7927aa8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x556bc7927b48 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x556bc7927d98 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x556bc7927c10 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x556bc7927c90 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x556bc7927e48 <col:20>
| `-OptimizeNoneAttr 0x556bc7927ea0 <col:30>
|-CXXMethodDecl 0x556bc7927fa8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x556bc7927ee0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x556bc7928050 <col:20>
| `-OptimizeNoneAttr 0x556bc79280a8 <col:30>
|-CXXMethodDecl 0x556bc7928178 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x556bc79280e8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x556bc7928220 <col:20>
| `-OptimizeNoneAttr 0x556bc7928278 <col:30>
|-CXXMethodDecl 0x556bc7928408 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x556bc79282b0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x556bc7928330 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x556bc7928598 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x556bc79284d0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x556bc79286e8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x556bc7928658 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x556bc7928838 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x556bc79287a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x556bc7928988 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x556bc79288f8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x556bc7928c48 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x556bc7928a40 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x556bc7928ac0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x556bc7928b68 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x556bc7928d20 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x556bc7928de0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x556bc79290b0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556bc7928f60 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x556bc7928fd8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x556bc79291d8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x556bc79293b0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x556bc7929290 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x556bc7929310 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x556bc7929598 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x556bc7929478 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x556bc79294f8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x556bc7929908 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x556bc7929658 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556bc79296d0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556bc7929750 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556bc79346c0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc79346a0 <col:106> 'int' 0
| `-ParmVarDecl 0x556bc79297c8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556bc79346f8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556bc79346d8 <col:126> 'int' 0
|-CXXMethodDecl 0x556bc7929ca8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556bc79299d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556bc7929a70 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556bc7929af0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x556bc7929b68 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556bc7934730 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556bc7934710 <col:114> 'int' 0
|-CXXMethodDecl 0x556bc792a038 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556bc7929d80 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x556bc7929df8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556bc7929e78 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x556bc7934748 <col:96> 'int' 0
| `-ParmVarDecl 0x556bc7929ef0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556bc7934788 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556bc7934768 <col:116> 'int' 0
|-CXXMethodDecl 0x556bc792a3b8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x556bc792a108 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x556bc792a180 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc792a200 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556bc79347c0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc79347a0 <col:109> 'int' 0
| `-ParmVarDecl 0x556bc792a278 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556bc79347f8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556bc79347d8 <col:129> 'int' 0
|-CXXMethodDecl 0x556bc792a738 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556bc792a488 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x556bc792a500 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc792a580 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x556bc792a5f8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556bc7934830 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556bc7934810 <col:117> 'int' 0
|-CXXMethodDecl 0x556bc792aac8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556bc792a810 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792a888 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc792a908 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x556bc7934848 <col:99> 'int' 0
| `-ParmVarDecl 0x556bc792a980 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556bc7934888 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556bc7934868 <col:119> 'int' 0
|-CXXMethodDecl 0x556bc792aee8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x556bc792ab98 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x556bc792ac18 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x556bc792ac90 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc792ad10 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556bc79348c0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc79348a0 <col:108> 'int' 0
| `-ParmVarDecl 0x556bc792ad90 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x556bc79348f8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x556bc79348d8 <col:141> 'int' 0
|-CXXMethodDecl 0x556bc792b308 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x556bc792afc0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x556bc792b040 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x556bc792b0b8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc792b138 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x556bc792b1b8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x556bc7934910 <col:121> 'int' 0
|-CXXMethodDecl 0x556bc792b738 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x556bc792b3e8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x556bc792b468 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x556bc792b4e0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc792b560 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x556bc7934930 <col:98> 'int' 0
| `-ParmVarDecl 0x556bc792b5e0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x556bc7934950 <col:123> 'int' 0
|-CXXMethodDecl 0x556bc792ba00 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x556bc792b810 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556bc792b890 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x556bc792b910 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x556bc7934970 <col:80> 'int' 0
|-EnumDecl 0x556bc792bab8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x556bc792bbc0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556bc792be50 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc792bba0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x556bc792bb80 <col:42> 'int' 1
| |-EnumConstantDecl 0x556bc792bc50 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556bc792be68 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc792bc30 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x556bc792bc10 <col:40> 'int' 2
| |-EnumConstantDecl 0x556bc792bce0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556bc792be80 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc792bcc0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x556bc792bca0 <col:44> 'int' 4
| |-EnumConstantDecl 0x556bc792bd70 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556bc792be98 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc792bd50 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x556bc792bd30 <col:36> 'int' 7
| `-EnumConstantDecl 0x556bc792be00 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x556bc792beb0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc792bde0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x556bc792bdc0 <col:34> 'int' 6
|-CXXMethodDecl 0x556bc792c168 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x556bc792bed8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x556bc792bf78 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x556bc792bff8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x556bc792c070 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x556bc7934a28 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x556bc7934a10 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x556bc79349f8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x556bc79349d8 <col:98, col:105> 'String' (CXXTemporary 0x556bc79349d8)
|           `-CXXTemporaryObjectExpr 0x556bc79349a0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x556bc792c408 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x556bc792c238 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x556bc792c2b0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x556bc792c328 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x556bc7934ad8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x556bc7934ac0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x556bc7934aa8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x556bc7934a88 <col:94, col:101> 'String' (CXXTemporary 0x556bc7934a88)
| |         `-CXXTemporaryObjectExpr 0x556bc7934a50 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x556bc79352c0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x556bc7935238 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x556bc7935208 <col:9> '<bound member function type>' ->add_task_handlers 0x556bc792c168
|     | `-CXXThisExpr 0x556bc79351f8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x556bc7935278 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x556bc7935178 <col:27> 'Task *' lvalue ParmVar 0x556bc792c238 'task' 'Task *'
|     |-ImplicitCastExpr 0x556bc7935290 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x556bc7935198 <col:33> 'NotifierSignal *' lvalue ParmVar 0x556bc792c2b0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x556bc79352a8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x556bc79351b8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x556bc792be00 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x556bc79351d8 <col:62> 'const String' lvalue ParmVar 0x556bc792c328 'prefix' 'const String &'
|-CXXMethodDecl 0x556bc792c618 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x556bc792c4d0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x556bc792c548 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x556bc7934b88 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x556bc7934b70 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x556bc7934b58 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x556bc7934b38 <col:70, col:77> 'String' (CXXTemporary 0x556bc7934b38)
| |         `-CXXTemporaryObjectExpr 0x556bc7934b00 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x556bc7935498 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x556bc7935410 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x556bc79353e0 <col:9> '<bound member function type>' ->add_task_handlers 0x556bc792c168
|     | `-CXXThisExpr 0x556bc79353d0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x556bc7935450 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x556bc7935350 <col:27> 'Task *' lvalue ParmVar 0x556bc792c4d0 'task' 'Task *'
|     |-ImplicitCastExpr 0x556bc7935468 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x556bc7935370 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x556bc7935480 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x556bc7935390 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x556bc792be00 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x556bc79353b0 <col:57> 'const String' lvalue ParmVar 0x556bc792c548 'prefix' 'const String &'
|-CXXMethodDecl 0x556bc792c8f8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x556bc792c6e0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792c760 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792c7d8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x556bc792cba8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x556bc792c9c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792ca48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792cac8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x556bc792ce98 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x556bc792cc78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792ccf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792cd70 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x556bc792d148 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x556bc792cf68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792cfe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792d068 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x556bc792d3f8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x556bc792d218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792d298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792d318 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x556bc792d6a8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x556bc792d4c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792d548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792d5c0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x556bc792d958 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x556bc792d778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792d7f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792d878 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x556bc792dc68 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x556bc792da80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792db00 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792db80 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x556bc792df48 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x556bc792dd38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792ddb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792de60 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x556bc792e228 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x556bc792e018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792e098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792e140 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x556bc792e490 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x556bc792e2f8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x556bc792e378 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x556bc792e3f0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x556bc792e738 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x556bc792e560 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x556bc792e5e0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x556bc792e658 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x556bc792e9e8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x556bc792e808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792e888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792e908 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x556bc792ec98 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x556bc792eab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792eb38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792ebb0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x556bc792ef48 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x556bc792ed68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792ede8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792ee60 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x556bc792f218 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x556bc792f018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792f098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556bc792f138 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x556bc792f548 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x556bc792f2e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556bc792f368 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x556bc792f3e0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x556bc792f458 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556bc7934ba0 <col:93> 'bool' false
|-CXXMethodDecl 0x556bc792f730 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556bc792f618 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x556bc792f698 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x556bc792f908 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556bc792f7f0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x556bc792f870 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x556bc792fbe8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x556bc792f9c8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x556bc792fa40 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x556bc792fac0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x556bc792fb38 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x556bc792fed8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x556bc792fcb8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x556bc792fd30 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x556bc792fdb0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x556bc792fe28 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x556bc7930110 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x556bc792ffb0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x556bc7930030 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x556bc79302f8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x556bc79301d8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x556bc7930258 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x556bc79303a8 prev 0x556bc7927b48 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556bc79304a0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x556bc7930530 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x556bc79305a8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x556bc7930668 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x556bc7930730 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x556bc79308a8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x556bc79307e0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x556bc7930950 <col:24>
| | `-OptimizeNoneAttr 0x556bc79309a8 <col:34>
| |-CXXMethodDecl 0x556bc79309f0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x556bc7930ca8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x556bc7930aa0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x556bc7930b18 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x556bc7930b98 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x556bc7930d60 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x556bc7930d98 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x556bc7930e00 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x556bc7930e88 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x556bc79311a8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x556bc7930f40 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x556bc7930fb8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x556bc7931030 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x556bc79310b0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x556bc79312c0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x556bc7938c38 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x556bc7938c38
| | `-ParmVarDecl 0x556bc7938d48 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x556bc7938de8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x556bc7938de8
| | `-ParmVarDecl 0x556bc7938ef8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x556bc79f3ff0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556bc7931338 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x556bc79313d8 <col:38> "" ""
|-CXXMethodDecl 0x556bc7931468 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x556bc7931508 <col:44> "" ""
|-AccessSpecDecl 0x556bc7931578 <line:260:3, col:10> col:3 private
|-EnumDecl 0x556bc79315a0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x556bc79316a0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x556bc79316f0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc7931680 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x556bc7931660 <col:27> 'int' 4
|-FieldDecl 0x556bc79317a8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x556bc7931958 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x556bc7931a10 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x556bc7932aa0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x556bc7932b08 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x556bc7932c58 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x556bc7932b98 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x556bc7932e08 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x556bc7932d18 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x556bc7932fe8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x556bc7932ec8 <col:20> col:23 'int'
| `-ParmVarDecl 0x556bc7932f48 <col:25> col:28 'int'
|-CXXMethodDecl 0x556bc7933290 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x556bc79330b0 <col:23> col:26 'int'
| |-ParmVarDecl 0x556bc7933130 <col:28> col:31 'int'
| `-ParmVarDecl 0x556bc79331a8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x556bc7933348 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x556bc7933410 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x556bc7933460 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x556bc79334b0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x556bc7933690 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x556bc7933540 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x556bc79335b8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556bc7933938 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x556bc7933758 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x556bc79337d8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x556bc7933850 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x556bc7933b58 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x556bc7933a08 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x556bc7933a88 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x556bc7933e90 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x556bc7933c18 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x556bc7933c98 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x556bc7933d10 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x556bc7933d90 <col:57> col:60 'int'
|-CXXMethodDecl 0x556bc7934078 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556bc7933f60 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x556bc7933fe0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x556bc79341c8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x556bc7934138 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x556bc7934548 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x556bc7934288 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x556bc7934308 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x556bc7934380 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x556bc7934400 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x556bc7934660 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Pad
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _nbytes
       112 |   _Bool _zero
           | [sizeof=120, dsize=113, align=8,
           |  nvsize=113, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc793bda8 <../elements/standard/pad.hh:39:1, line:56:1> line:39:7 class Pad definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x556bc793bf08 <col:1, col:7> col:7 implicit referenced class Pad
|-AccessSpecDecl 0x556bc793bf98 <col:30, col:36> col:30 public
|-CXXConstructorDecl 0x556bc793c020 <line:41:5, col:9> col:5 Pad 'void ()'
|-CXXMethodDecl 0x556bc793c120 <line:43:5, col:52> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x556bc7924af8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x556bc793d038 <col:36, col:52>
|   `-ReturnStmt 0x556bc793d028 <col:38, col:45>
|     `-ImplicitCastExpr 0x556bc793d010 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x556bc793cff0 <col:45> 'const char [4]' lvalue "Pad"
|-CXXMethodDecl 0x556bc793c1e8 <line:44:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x556bc7924bc0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x556bc793d098 <col:36, col:56>
|   `-ReturnStmt 0x556bc793d088 <col:38, col:45>
|     `-ImplicitCastExpr 0x556bc793d070 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x556bc793d050 <col:45> 'const char []' lvalue Var 0x556bc7924e70 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x556bc793c4c0 <line:46:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x556bc7926390 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x556bc793c370 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x556bc793c3e8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x556bc793c590 <line:47:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x556bc7928de0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x556bc793d0d0 <col:39, col:54>
|   `-ReturnStmt 0x556bc793d0c0 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x556bc793d0b0 <col:48> 'bool' true
|-CXXMethodDecl 0x556bc793c6d0 <line:49:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x556bc7923cd8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x556bc793c640 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x556bc793c778 <line:51:3, col:10> col:3 private
|-FieldDecl 0x556bc793c7b8 <line:53:5, col:14> col:14 _nbytes 'unsigned int'
|-FieldDecl 0x556bc793c818 <line:54:5, col:10> col:10 _zero 'bool'
|-CXXConstructorDecl 0x556bc793c898 <line:39:7> col:7 implicit Pad 'void (const Pad &)' inline default_delete noexcept-unevaluated 0x556bc793c898
| `-ParmVarDecl 0x556bc793c9a8 <col:7> col:7 'const Pad &'
|-CXXConstructorDecl 0x556bc793ca48 <col:7> col:7 implicit Pad 'void (Pad &&)' inline default_delete noexcept-unevaluated 0x556bc793ca48
| `-ParmVarDecl 0x556bc793cb58 <col:7> col:7 'Pad &&'
|-CXXMethodDecl 0x556bc793cbf8 <col:7> col:7 implicit operator= 'Pad &(const Pad &)' inline default_delete noexcept-unevaluated 0x556bc793cbf8
| `-ParmVarDecl 0x556bc793cd08 <col:7> col:7 'const Pad &'
|-CXXMethodDecl 0x556bc793cd78 <col:7> col:7 implicit operator= 'Pad &(Pad &&)' inline default_delete noexcept-unevaluated 0x556bc793cd78
| `-ParmVarDecl 0x556bc793ce88 <col:7> col:7 'Pad &&'
`-CXXDestructorDecl 0x556bc793cf10 <col:7> col:7 implicit ~Pad 'void ()' inline default noexcept-unevaluated 0x556bc793cf10
  `-Overrides: [ 0x556bc7923698 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Pad = type <{ %class.Element.base, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.Pad.base = type <{ %class.Element.base, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc76f6250 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556bc76f6368 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x556bc76f6408 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x556bc76f6468 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x556bc76f64c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x556bc76f6578 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc76f6880 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc76f6998 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x556bc76f6a40 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x556bc76f6aa8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x556bc76f6b38 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x556bc76fcbd0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556bc76fd008 <col:12>
|-CXXConstructorDecl 0x556bc76fccd8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc76fcde8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x556bc76f6a40 'data' 'const char *'
| | `-ImplicitCastExpr 0x556bc76ff590 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x556bc76ff560 <col:12> 'const char *const' lvalue .data 0x556bc76f6a40
| |     `-DeclRefExpr 0x556bc76ff540 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc76fcde8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x556bc76f6aa8 'length' 'int'
| | `-ImplicitCastExpr 0x556bc76ff620 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x556bc76ff5f0 <col:12> 'const int' lvalue .length 0x556bc76f6aa8
| |     `-DeclRefExpr 0x556bc76ff5d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc76fcde8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x556bc76f6b38 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x556bc76ff6b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x556bc76ff680 <col:12> 'String::memo_t *const' lvalue .memo 0x556bc76f6b38
| |     `-DeclRefExpr 0x556bc76ff660 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc76fcde8 '' 'const String::rep_t &'
| `-CompoundStmt 0x556bc76ff708 <col:12>
|-CXXConstructorDecl 0x556bc76fce88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556bc76fce88
| `-ParmVarDecl 0x556bc76fcf98 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x556bc77024f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556bc770df08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc770e018 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x556bc770e530 <col:12>
|   |-BinaryOperator 0x556bc770e348 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x556bc770e300 <col:12> 'const char *' lvalue ->data 0x556bc76f6a40
|   | | `-CXXThisExpr 0x556bc770e2f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x556bc770e330 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x556bc770e2c0 <col:12> 'const char *const' lvalue .data 0x556bc76f6a40
|   |     `-DeclRefExpr 0x556bc770e2a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc770e018 '' 'const String::rep_t &'
|   |-BinaryOperator 0x556bc770e410 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x556bc770e3c8 <col:12> 'int' lvalue ->length 0x556bc76f6aa8
|   | | `-CXXThisExpr 0x556bc770e3b8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x556bc770e3f8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x556bc770e388 <col:12> 'const int' lvalue .length 0x556bc76f6aa8
|   |     `-DeclRefExpr 0x556bc770e368 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc770e018 '' 'const String::rep_t &'
|   |-BinaryOperator 0x556bc770e4d8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x556bc770e490 <col:12> 'String::memo_t *' lvalue ->memo 0x556bc76f6b38
|   | | `-CXXThisExpr 0x556bc770e480 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x556bc770e4c0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x556bc770e450 <col:12> 'String::memo_t *const' lvalue .memo 0x556bc76f6b38
|   |     `-DeclRefExpr 0x556bc770e430 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc770e018 '' 'const String::rep_t &'
|   `-ReturnStmt 0x556bc770e520 <col:12>
|     `-UnaryOperator 0x556bc770e508 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc770e4f8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x556bc770e088 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556bc770e088
  `-ParmVarDecl 0x556bc770e198 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc76ed7c0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556bc76ed8d8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x556bc76ed968 <col:16, col:22> col:16 public
|-TypedefDecl 0x556bc76ed9a8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x556bc73c2fd0 'const char *'
|   `-QualType 0x556bc73c2521 'const char' const
|     `-BuiltinType 0x556bc73c2520 'char'
|-TypedefDecl 0x556bc76eda30 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x556bc76eda00 'String::const_iterator' sugar
|   |-Typedef 0x556bc76ed9a8 'const_iterator'
|   `-PointerType 0x556bc73c2fd0 'const char *'
|     `-QualType 0x556bc73c2521 'const char' const
|       `-BuiltinType 0x556bc73c2520 'char'
|-TypedefDecl 0x556bc76edba0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x556bc76edb10 'int (String::*)() const'
|   |-RecordType 0x556bc76ed850 'String'
|   | `-CXXRecord 0x556bc76ed7c0 'String'
|   `-ParenType 0x556bc76edab0 'int () const' sugar
|     `-FunctionProtoType 0x556bc76c2650 'int () const' const cdecl
|       `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc76edc08 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x556bc7517230 'int64_t' sugar
|   |-Typedef 0x556bc742b390 'int64_t'
|   `-TypedefType 0x556bc7404630 '__int64_t' sugar
|     |-Typedef 0x556bc7404208 '__int64_t'
|     `-BuiltinType 0x556bc73c25a0 'long'
|-TypedefDecl 0x556bc76edc70 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x556bc7517150 'uint64_t' sugar
|   |-Typedef 0x556bc742b530 'uint64_t'
|   `-TypedefType 0x556bc74046c0 '__uint64_t' sugar
|     |-Typedef 0x556bc7404278 '__uint64_t'
|     `-BuiltinType 0x556bc73c2640 'unsigned long'
|-TypedefDecl 0x556bc76edd00 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x556bc76edcd0 'String::intmax_t' sugar
|   |-Typedef 0x556bc76edc08 'intmax_t'
|   `-TypedefType 0x556bc7517230 'int64_t' sugar
|     |-Typedef 0x556bc742b390 'int64_t'
|     `-TypedefType 0x556bc7404630 '__int64_t' sugar
|       |-Typedef 0x556bc7404208 '__int64_t'
|       `-BuiltinType 0x556bc73c25a0 'long'
|-TypedefDecl 0x556bc76edd90 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x556bc76edd60 'String::uintmax_t' sugar
|   |-Typedef 0x556bc76edc70 'uintmax_t'
|   `-TypedefType 0x556bc7517150 'uint64_t' sugar
|     |-Typedef 0x556bc742b530 'uint64_t'
|     `-TypedefType 0x556bc74046c0 '__uint64_t' sugar
|       |-Typedef 0x556bc7404278 '__uint64_t'
|       `-BuiltinType 0x556bc73c2640 'unsigned long'
|-CXXConstructorDecl 0x556bc76ede50 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x556bc76edff8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x556bc76edf38 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x556bc76ee1a8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x556bc76ee0e8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x556bc76ee300 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x556bc76ee270 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x556bc76ee518 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x556bc76ee3c8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x556bc76ee448 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x556bc76ee738 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x556bc76ee5e8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x556bc76ee668 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x556bc76ee958 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x556bc76ee808 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x556bc76ee888 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x556bc76eeb78 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x556bc76eea28 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x556bc76eeaa8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x556bc76eed08 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x556bc76eec40 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x556bc76eee88 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x556bc76eedc8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x556bc76ef018 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x556bc76eef50 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x556bc76ef170 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x556bc76ef0e0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x556bc76ef2c8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x556bc76ef238 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x556bc76ef420 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x556bc76ef390 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x556bc76ef5a8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x556bc76ef4e8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x556bc76ef738 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x556bc76ef670 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x556bc76ef8c8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x556bc76ef800 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x556bc76efa58 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x556bc76ef990 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x556bc76efb50 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x556bc76efc78 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x556bc76efdf8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x556bc76efd30 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x556bc76eff48 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x556bc76efeb8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x556bc76f0000 <col:63> "" ""
|-CXXMethodDecl 0x556bc76f0148 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x556bc76f0088 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x556bc76f0358 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x556bc76f0208 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x556bc76f0288 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x556bc76f0578 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x556bc76f0420 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x556bc76f04a0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x556bc76f0858 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x556bc76f0638 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x556bc76f06b8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x556bc76fc6a0 <col:55> 'int' 10
| `-ParmVarDecl 0x556bc76f0730 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556bc76fc6c0 <col:76> 'bool' true
|-CXXMethodDecl 0x556bc76f0b38 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x556bc76f0920 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x556bc76f09a0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x556bc76fc6d0 <col:56> 'int' 10
| `-ParmVarDecl 0x556bc76f0a18 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556bc76fc6f0 <col:77> 'bool' true
|-CXXMethodDecl 0x556bc76f0c40 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x556bc76f0d08 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x556bc76f0dd0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x556bc76f0e70 <col:20>
| `-OptimizeNoneAttr 0x556bc76f0ec8 <col:30>
|-CXXConversionDecl 0x556bc76f0fb8 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x556bc76f1088 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x556bc76f1148 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x556bc76f1238 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x556bc76f12f8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x556bc76f1478 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x556bc76f13b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x556bc76f15c8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x556bc76f1538 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x556bc76f16b8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x556bc76f1778 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x556bc76f19c8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x556bc76f1830 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x556bc76f18b0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x556bc76f1c28 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x556bc76f1a90 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x556bc76f1b10 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x556bc76f1cf8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc76f1f08 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x556bc76f1db0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x556bc76f1e30 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x556bc76f2128 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x556bc76f1fd0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x556bc76f2050 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x556bc76f22b8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x556bc76f21f0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x556bc76f23a8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x556bc76f2518 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x556bc76f2458 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x556bc76f2728 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x556bc76f25d8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x556bc76f2658 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x556bc76f2940 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x556bc76f27e8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x556bc76f2860 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x556bc76f2ad0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x556bc76f2a00 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x556bc76f2cf0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x556bc76f2b90 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x556bc76f2c10 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x556bc76f2e40 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x556bc76f2db0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x556bc76f3018 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x556bc76f2f00 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x556bc76f2f80 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x556bc76f3168 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x556bc76f30d8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x556bc76f3380 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x556bc76f3220 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x556bc76f32a0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x556bc76fc700 <col:39> 'int' 0
|-CXXMethodDecl 0x556bc76f35a0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x556bc76f3440 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x556bc76f34c0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x556bc76fc720 <col:48> 'int' 0
|-CXXMethodDecl 0x556bc76f3780 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x556bc76f3660 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x556bc76f36e0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x556bc76fc740 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x556bc76f3850 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x556bc76f3910 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x556bc76f39d0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x556bc76f3a90 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x556bc76f3b50 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x556bc76f3cf8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x556bc76f3c00 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x556bc76f3e78 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x556bc76f3db0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x556bc76f4050 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x556bc76f3f38 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x556bc76f41c8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x556bc76f4108 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x556bc76f4310 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x556bc76f4280 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x556bc76f4460 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x556bc76f43d0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x556bc76f4638 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x556bc76f4520 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x556bc76f45a0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x556bc76f4818 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x556bc76f4700 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x556bc76f4780 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x556bc76f4968 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x556bc76f48d8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x556bc76f4b78 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x556bc76f4a28 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x556bc76f4aa8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x556bc76f4cd8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x556bc76f4c40 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x556bc76f4e30 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x556bc76f4d98 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x556bc76f4ed8 <col:57> "" ""
|-CXXMethodDecl 0x556bc76f4fe8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x556bc76f4f58 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x556bc76f5138 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x556bc76f50a8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x556bc76f52b8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x556bc76f51f0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x556bc76f5380 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x556bc76f5440 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x556bc76f5500 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x556bc76f55a0 <col:49> "" ""
|-CXXMethodDecl 0x556bc76f5630 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x556bc76f56f0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x556bc76f57e0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x556bc76f58a8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x556bc76f5968 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x556bc76f5a28 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x556bc76f5b20 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x556bc76f5be8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x556bc76f5cb0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x556bc76f5e88 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x556bc76f5d68 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x556bc76f5de8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x556bc76f60b0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x556bc76f5f50 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x556bc76f5fd0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x556bc76f61c0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x556bc76f6228 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x556bc76f6250 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556bc76f6368 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x556bc76f6408 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x556bc76f6468 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x556bc76f64c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x556bc76f6578 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x556bc76f65e0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x556bc76f6818 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x556bc76f6868 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc76f67f8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x556bc76f6708 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x556bc76f66b0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x556bc76f66f0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x556bc76f66d0 <col:32> 'int' 8
|-CXXRecordDecl 0x556bc76f6880 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556bc76f6998 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x556bc76f6a40 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x556bc76f6aa8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x556bc76f6b38 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x556bc76fcbd0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556bc76fd008 <col:12>
| |-CXXConstructorDecl 0x556bc76fccd8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556bc76fcde8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x556bc76f6a40 'data' 'const char *'
| | | `-ImplicitCastExpr 0x556bc76ff590 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x556bc76ff560 <col:12> 'const char *const' lvalue .data 0x556bc76f6a40
| | |     `-DeclRefExpr 0x556bc76ff540 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc76fcde8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x556bc76f6aa8 'length' 'int'
| | | `-ImplicitCastExpr 0x556bc76ff620 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x556bc76ff5f0 <col:12> 'const int' lvalue .length 0x556bc76f6aa8
| | |     `-DeclRefExpr 0x556bc76ff5d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc76fcde8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x556bc76f6b38 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x556bc76ff6b0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x556bc76ff680 <col:12> 'String::memo_t *const' lvalue .memo 0x556bc76f6b38
| | |     `-DeclRefExpr 0x556bc76ff660 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc76fcde8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x556bc76ff708 <col:12>
| |-CXXConstructorDecl 0x556bc76fce88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556bc76fce88
| | `-ParmVarDecl 0x556bc76fcf98 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x556bc77024f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x556bc770df08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556bc770e018 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x556bc770e530 <col:12>
| |   |-BinaryOperator 0x556bc770e348 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x556bc770e300 <col:12> 'const char *' lvalue ->data 0x556bc76f6a40
| |   | | `-CXXThisExpr 0x556bc770e2f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x556bc770e330 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x556bc770e2c0 <col:12> 'const char *const' lvalue .data 0x556bc76f6a40
| |   |     `-DeclRefExpr 0x556bc770e2a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc770e018 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x556bc770e410 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x556bc770e3c8 <col:12> 'int' lvalue ->length 0x556bc76f6aa8
| |   | | `-CXXThisExpr 0x556bc770e3b8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x556bc770e3f8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x556bc770e388 <col:12> 'const int' lvalue .length 0x556bc76f6aa8
| |   |     `-DeclRefExpr 0x556bc770e368 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc770e018 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x556bc770e4d8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x556bc770e490 <col:12> 'String::memo_t *' lvalue ->memo 0x556bc76f6b38
| |   | | `-CXXThisExpr 0x556bc770e480 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x556bc770e4c0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x556bc770e450 <col:12> 'String::memo_t *const' lvalue .memo 0x556bc76f6b38
| |   |     `-DeclRefExpr 0x556bc770e430 <col:12> 'const String::rep_t' lvalue ParmVar 0x556bc770e018 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x556bc770e520 <col:12>
| |     `-UnaryOperator 0x556bc770e508 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x556bc770e4f8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x556bc770e088 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556bc770e088
|   `-ParmVarDecl 0x556bc770e198 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x556bc76f6bb0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x556bc76f6df8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x556bc76f6c18 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x556bc76f6c98 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x556bc76f6d10 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x556bc76fcb90 <col:79, line:261:5>
|   |-BinaryOperator 0x556bc76fc808 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x556bc76fc7a0 <col:2, col:5> 'const char *' lvalue .data 0x556bc76f6a40
|   | | `-MemberExpr 0x556bc76fc770 <col:2> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|   | |   `-CXXThisExpr 0x556bc76fc760 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x556bc76fc7f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556bc76fc7d0 <col:12> 'const char *' lvalue ParmVar 0x556bc76f6c18 'data' 'const char *'
|   |-BinaryOperator 0x556bc76fc8d0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x556bc76fc868 <col:2, col:5> 'int' lvalue .length 0x556bc76f6aa8
|   | | `-MemberExpr 0x556bc76fc838 <col:2> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|   | |   `-CXXThisExpr 0x556bc76fc828 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x556bc76fc8b8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556bc76fc898 <col:14> 'int' lvalue ParmVar 0x556bc76f6c98 'length' 'int'
|   `-IfStmt 0x556bc76fcb78 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x556bc76fc9f0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x556bc76fc9d8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x556bc76fc9b8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x556bc76fc998 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x556bc76fc930 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|     |       | `-MemberExpr 0x556bc76fc900 <col:7> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|     |       |   `-CXXThisExpr 0x556bc76fc8f0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x556bc76fc980 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x556bc76fc960 <col:17> 'String::memo_t *' lvalue ParmVar 0x556bc76f6d10 'memo' 'String::memo_t *'
|     `-CallExpr 0x556bc76fcb50 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x556bc76fcb38 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556bc76fca40 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x556bc76e5828 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x556bc76fcaa8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x556bc76f6408
|         `-ImplicitCastExpr 0x556bc76fca90 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556bc76fca70 <col:27> 'String::memo_t *' lvalue ParmVar 0x556bc76f6d10 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x556bc76f70a8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x556bc76f6ec8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x556bc76f6f48 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x556bc76f6fc0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x556bc76f6bb0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x556bc76fd018 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556bc76fd1a8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x556bc76fd110 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x556bc76fd080 <col:2> '<bound member function type>' ->assign_memo 0x556bc76f6df8
|     | `-ImplicitCastExpr 0x556bc76fd148 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x556bc76fd070 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x556bc76fd160 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x556bc76fd0b0 <col:14> 'const char *' lvalue ParmVar 0x556bc76f6ec8 'data' 'const char *'
|     |-ImplicitCastExpr 0x556bc76fd178 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x556bc76fd0d0 <col:20> 'int' lvalue ParmVar 0x556bc76f6f48 'length' 'int'
|     `-ImplicitCastExpr 0x556bc76fd190 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556bc76fd0f0 <col:28> 'String::memo_t *' lvalue ParmVar 0x556bc76f6fc0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x556bc76f7238 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x556bc76f7178 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x556bc76fd400 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x556bc76fd380 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x556bc76fd1d0 <col:2> '<bound member function type>' ->assign_memo 0x556bc76f6df8
|     | `-CXXThisExpr 0x556bc76fd1c0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x556bc76fd3b8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x556bc76fd250 <col:14, col:19> 'const char *' lvalue .data 0x556bc76f6a40
|     |   `-MemberExpr 0x556bc76fd220 <col:14, col:16> 'String::rep_t' lvalue ._r 0x556bc76f6bb0
|     |     `-DeclRefExpr 0x556bc76fd200 <col:14> 'const String' lvalue ParmVar 0x556bc76f7178 'x' 'const String &'
|     |-ImplicitCastExpr 0x556bc76fd3d0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x556bc76fd2d0 <col:25, col:30> 'int' lvalue .length 0x556bc76f6aa8
|     |   `-MemberExpr 0x556bc76fd2a0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x556bc76f6bb0
|     |     `-DeclRefExpr 0x556bc76fd280 <col:25> 'const String' lvalue ParmVar 0x556bc76f7178 'x' 'const String &'
|     `-ImplicitCastExpr 0x556bc76fd3e8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x556bc76fd350 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|         `-MemberExpr 0x556bc76fd320 <col:38, col:40> 'String::rep_t' lvalue ._r 0x556bc76f6bb0
|           `-DeclRefExpr 0x556bc76fd300 <col:38> 'const String' lvalue ParmVar 0x556bc76f7178 'x' 'const String &'
|-CXXMethodDecl 0x556bc76f7300 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x556bc76fddc0 <col:31, line:278:5>
|   `-IfStmt 0x556bc76fdda8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x556bc76fd4a0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x556bc76fd488 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x556bc76fd458 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|     |     `-MemberExpr 0x556bc76fd428 <col:6> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|     |       `-CXXThisExpr 0x556bc76fd418 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x556bc76fdd80 <col:15, line:277:2>
|       |-ParenExpr 0x556bc76fd950 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x556bc76fd920 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x556bc76fd5b0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x556bc76fd598 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x556bc76fd580 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x556bc76fd540 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x556bc76f6408
|       |   |       `-ImplicitCastExpr 0x556bc76fd528 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x556bc76fd4f8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|       |   |           `-MemberExpr 0x556bc76fd4c8 <col:27> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|       |   |             `-CXXThisExpr 0x556bc76fd4b8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x556bc76fd610 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x556bc76fd5f0 <col:54> 'int' 0
|       |   `-CallExpr 0x556bc76fd880 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x556bc76fd868 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x556bc76fd7e8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x556bc76fd8c0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x556bc76fd6f8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x556bc76fd8d8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x556bc76fd728 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x556bc76fd8f0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x556bc76fd760 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x556bc76fd908 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x556bc76fd7d0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x556bc76fd7b8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x556bc76fd780 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x556bc76fdca0 <line:274:6, line:275:22>
|       | |-CallExpr 0x556bc76fdb60 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x556bc76fdb48 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x556bc76fdac0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x556bc76e6c70 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x556bc76fda90 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x556bc76f6408
|       | |   `-ImplicitCastExpr 0x556bc76fda78 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x556bc76fda48 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|       | |       `-MemberExpr 0x556bc76fda18 <col:40> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|       | |         `-CXXThisExpr 0x556bc76fda08 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x556bc76fdc60 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x556bc76fdc48 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556bc76fdb88 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x556bc76fbae0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x556bc76fdc88 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x556bc76fdbe8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|       |       `-MemberExpr 0x556bc76fdbb8 <col:15> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|       |         `-CXXThisExpr 0x556bc76fdba8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x556bc76fdd60 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x556bc76fdcf8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x556bc76f6b38
|         | `-MemberExpr 0x556bc76fdcc8 <col:6> 'String::rep_t' lvalue ->_r 0x556bc76f6bb0
|         |   `-CXXThisExpr 0x556bc76fdcb8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x556bc76fdd48 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x556bc76fdd28 <col:16> 'int' 0
|-CXXMethodDecl 0x556bc76f7598 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x556bc76f73b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x556bc76f7438 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x556bc76f74b0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x556bc76f7670 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x556bc76f78c0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x556bc76f7728 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x556bc76f77a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x556bc76f7820 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x556bc76f7aa8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x556bc76f7990 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x556bc76f7a10 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x556bc76f7ba8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x556bc76fde98 <col:41, line:286:5>
|   `-ReturnStmt 0x556bc76fde88 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x556bc76fde58 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x556bc76fde20 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x556bc76fde08 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x556bc76fdde8 <col:46> 'int' 1
|-CXXMethodDecl 0x556bc76f7e48 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x556bc76f7c60 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x556bc76f7ce0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x556bc76f7d60 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x556bc76fbae0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x556bc76f7f10 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x556bc76fbbb0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x556bc76fbd80 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x556bc76fbc68 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x556bc76fbce8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x556bc76fbe40 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x556bc76fbf08 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x556bc76fc008 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x556bc76fc080 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x556bc76fc0f8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x556bc76fc160 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x556bc76fc260 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x556bc76fc2b0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc76fc240 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x556bc76fc220 <col:22> 'int' 14
|-CXXMethodDecl 0x556bc76fc4c8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x556bc76fc2e0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x556bc76fc360 <col:38> col:41 'int'
| `-ParmVarDecl 0x556bc76fc3e0 <col:43> col:46 'int'
|-FriendDecl 0x556bc76fc5d0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x556bc76fc660 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556bc77bf3f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x556bc77bf5c8 prev 0x556bc77bf3f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556bc77bf658 <col:46, col:52> col:46 public
|-TypedefDecl 0x556bc77bf680 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc77c0fe0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x556bc77c0f90 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x556bc77c0f70 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x556bc77bf898 'type'
|     `-SubstTemplateTypeParmType 0x556bc77bf860 'String' sugar
|       |-TemplateTypeParmType 0x556bc76b2070 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76b2020 'T'
|       `-RecordType 0x556bc76ed850 'String'
|         `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc77c1098 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x556bc77c1060 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x556bc77c1040 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x556bc77c0fe0 'type'
|     `-ElaboratedType 0x556bc77c0f90 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x556bc77c0f70 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x556bc77bf898 'type'
|         `-SubstTemplateTypeParmType 0x556bc77bf860 'String' sugar
|           |-TemplateTypeParmType 0x556bc76b2070 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x556bc76b2020 'T'
|           `-RecordType 0x556bc76ed850 'String'
|             `-CXXRecord 0x556bc76ed7c0 'String'
|-CXXMethodDecl 0x556bc77c1218 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x556bc77c1128 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x556bc77c1308 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x556bc77c13e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x556bc77c13e8
|-CXXMethodDecl 0x556bc77c16b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x556bc77c15c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x556bc77c18f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x556bc77c1770 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556bc77c17e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc77c1ac8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x556bc77c19b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556bc77c1a30 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc796bc40 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x556bc796bd10 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x556bc796bf58 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x556bc796bdd0 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x556bc796be48 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc796c1b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x556bc796c028 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x556bc796c0a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc796c378 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x556bc796c288 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc796c538 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x556bc796c440 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc796c5f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556bc796c6a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x556bc796c8d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x556bc796c750 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556bc796c7c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x556bc796cb78 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x556bc796ca80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x556bc796cc40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x556bc796cc90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x556bc796cce0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556bc7926000 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x556bc77bde58 prev 0x556bc7926000 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x556bc77bf360 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x556bc77bf310 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x556bc77bf2f0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x556bc77bf1a0 'type'
|     `-SubstTemplateTypeParmType 0x556bc77bf030 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x556bc7687e20 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x556bc7687dc8 'F'
|       `-RecordType 0x556bc77bec90 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x556bc77bebb0 'typed_array_memory'
|-FieldDecl 0x556bc796cd30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x556bc796cd80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x556bc796cdb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|   |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556bc76bf338 'T'
|   `-RecordType 0x556bc76ed850 'String'
|     `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796ce48 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x556bc796ce10 'String &'
|   `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|     |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556bc76bf338 'T'
|     `-RecordType 0x556bc76ed850 'String'
|       `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796ced8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x556bc796cea0 'const String &'
|   `-QualType 0x556bc77bdef1 'const String' const
|     `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-RecordType 0x556bc76ed850 'String'
|         `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796cf68 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x556bc796cf30 'String *'
|   `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|     |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556bc76bf338 'T'
|     `-RecordType 0x556bc76ed850 'String'
|       `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796cff8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x556bc796cfc0 'const String *'
|   `-QualType 0x556bc77bdef1 'const String' const
|     `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-RecordType 0x556bc76ed850 'String'
|         `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796dc50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x556bc796dc00 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x556bc796dbe0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x556bc796db18 'type'
|     `-LValueReferenceType 0x556bc796dae0 'const String &'
|       `-QualType 0x556bc796d881 'const String' const
|         `-SubstTemplateTypeParmType 0x556bc796d880 'String' sugar
|           |-TemplateTypeParmType 0x556bc7691d70 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x556bc7691d18 'T'
|           `-RecordType 0x556bc76ed850 'String'
|             `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796dcb8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x556bc796cea0 'const String &'
|   `-QualType 0x556bc77bdef1 'const String' const
|     `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-RecordType 0x556bc76ed850 'String'
|         `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796dd10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc796dd78 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x556bc796cf30 'String *'
|   `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|     |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556bc76bf338 'T'
|     `-RecordType 0x556bc76ed850 'String'
|       `-CXXRecord 0x556bc76ed7c0 'String'
|-TypedefDecl 0x556bc796dde0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x556bc796cfc0 'const String *'
|   `-QualType 0x556bc77bdef1 'const String' const
|     `-SubstTemplateTypeParmType 0x556bc77bdef0 'String' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-RecordType 0x556bc76ed850 'String'
|         `-CXXRecord 0x556bc76ed7c0 'String'
|-EnumDecl 0x556bc796de38 <line:134:5> col:5
| `-EnumConstantDecl 0x556bc796df30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x556bc796df10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x556bc76c0a18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x556bc76c09f0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x556bc76c09d0 <col:40> 'int' 1
|-CXXConstructorDecl 0x556bc796dfb8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x556bc796e248 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc796e070 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556bc796e110 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x556bc796e4d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x556bc796e3c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x556bc796e798 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x556bc796e680 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x556bc796eab0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x556bc796e990 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x556bc796edc0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x556bc796eca0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x556bc796f0b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc796eef8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556bc796ef70 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x556bc796f1d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x556bc796f288 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc796f2e0 <col:30> Inherited
|-CXXMethodDecl 0x556bc796f328 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x556bc796f3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc796f430 <col:30> Inherited
|-CXXMethodDecl 0x556bc796f4f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x556bc796f5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc796f600 <col:30> Inherited
|-CXXMethodDecl 0x556bc796f648 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x556bc796f6f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc796f750 <col:30> Inherited
|-CXXMethodDecl 0x556bc796f798 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x556bc796f848 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc796f8a0 <col:30> Inherited
|-CXXMethodDecl 0x556bc796f8e8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x556bc796f998 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc796f9f0 <col:30> Inherited
|-CXXMethodDecl 0x556bc796fa18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556bc796fac8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556bc796fb78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x556bc796fd38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc796fc28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556bc796fca0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x556bc796fe88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x556bc796fdf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc7970038 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x556bc796ff40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556bc79700f0 <col:20>
| `-OptimizeNoneAttr 0x556bc7970148 <col:30>
|-CXXMethodDecl 0x556bc7970268 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x556bc7970170 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556bc7970320 <col:20>
| `-OptimizeNoneAttr 0x556bc7970378 <col:30>
|-CXXMethodDecl 0x556bc7970430 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x556bc79703a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc7970578 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556bc79704e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc79706a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x556bc79707a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x556bc7970878 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x556bc7970948 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x556bc7970a88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x556bc79709f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc7970bd0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556bc7970b40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc7970d18 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x556bc7970c88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556bc7970dd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x556bc7970ed0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x556bc7970e40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556bc7970f88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x556bc7971048 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x556bc7971148 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x556bc79712c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x556bc7971208 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x556bc7971a88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x556bc7971380 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x556bc79719e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x556bc79718e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x556bc7971b68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556bc7971cb8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x556bc7971c28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x556bc7971d70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556bc7971fb8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc7971e30 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x556bc7971ea8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x556bc7972148 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x556bc7972088 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x556bc7972358 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x556bc7972210 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x556bc7972288 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x556bc7972418 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x556bc7972678 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x556bc7972580 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x556bc7972748 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x556bc7972748

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc78a3c68 prev 0x556bc78e8aa8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc78a3d60 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x556bc78a3df0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x556bc78a3f28 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x556bc78a3e28 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x556bc78a5350 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc78a5330 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x556bc78a4ec8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x556bc78a53e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x556bc78a53a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x556bc78a3e28 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x556bc78a4f30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x556bc78a5460 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc78a5420 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x556bc78a4f90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x556bc78a54a0 <col:54> 'bool' false
| `-CompoundStmt 0x556bc78a55a8 <col:61, line:38:5>
|   `-BinaryOperator 0x556bc78a5588 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x556bc78a5520 <col:9> 'const Element *' lvalue ->_context 0x556bc78a4e68
|     | `-CXXThisExpr 0x556bc78a5510 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x556bc78a5570 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x556bc78a5550 <col:20> 'int' 0
|-CXXConstructorDecl 0x556bc78a4138 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc78a3fe8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x556bc78a4060 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x556bc78a5388 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc78a5368 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x556bc78a4e68 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x556bc78a5600 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x556bc78a55c0 <col:20> 'const Element *' lvalue ParmVar 0x556bc78a3fe8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x556bc78a4ec8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x556bc78a5680 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x556bc78a5640 <col:36> 'ErrorHandler *' lvalue ParmVar 0x556bc78a4060 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x556bc78a4f30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x556bc78a5700 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x556bc78a56c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x556bc78a4f90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x556bc78a5740 <col:73> 'bool' false
| `-CompoundStmt 0x556bc78a57b8 <col:80, line:46:5>
|-CXXMethodDecl 0x556bc78a4268 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x556bc78a5830 <col:36, line:51:5>
|   `-ReturnStmt 0x556bc78a5820 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x556bc78a5808 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x556bc78a57d8 <col:16> 'const Element *const' lvalue ->_context 0x556bc78a4e68
|         `-CXXThisExpr 0x556bc78a57c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x556bc78a4358 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x556bc78a58b0 <col:32, line:57:5>
|   `-ReturnStmt 0x556bc78a58a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x556bc78a5888 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x556bc78a5858 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x556bc78a4ec8
|         `-CXXThisExpr 0x556bc78a5848 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x556bc78a4418 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x556bc78a45a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x556bc78a44d0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x556bc78a46f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x556bc78a4660 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x556bc78a4840 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x556bc78a47b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x556bc78a4a48 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x556bc78a48f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x556bc78a4970 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x556bc78a4d78 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x556bc78a4b08 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x556bc78a4b88 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x556bc78a4c50 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x556bc78a4e30 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x556bc78a4e68 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x556bc78a4ec8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x556bc78a4f30 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x556bc78a4f90 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x556bc78a4fe0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x556bc78a4fe0
| `-ParmVarDecl 0x556bc78a50f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x556bc78a5198 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x556bc78a5198
| `-ParmVarDecl 0x556bc78a52a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x556bc79f4890 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556bc79b06d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x556bc79b08a8 prev 0x556bc79b06d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556bc79b0938 <col:46, col:52> col:46 public
|-TypedefDecl 0x556bc79b0960 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79b2530 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x556bc79b24e0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x556bc79b0e10 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x556bc79b0d10 'type'
|     `-TemplateSpecializationType 0x556bc79b0ca0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x556bc79b0b80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x556bc79b0b60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x556bc79b0b40 <col:24> 'unsigned long' 4
|       `-RecordType 0x556bc79b0c80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x556bc79b0ba0 'char_array'
|-TypedefDecl 0x556bc79b25e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x556bc79b25b0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x556bc79b2590 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x556bc79b2530 'type'
|     `-ElaboratedType 0x556bc79b24e0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x556bc79b0e10 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x556bc79b0d10 'type'
|         `-TemplateSpecializationType 0x556bc79b0ca0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x556bc79b0b80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x556bc79b0b60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x556bc79b0b40 <col:24> 'unsigned long' 4
|           `-RecordType 0x556bc79b0c80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x556bc79b0ba0 'char_array'
|-CXXMethodDecl 0x556bc79b2768 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x556bc79b2678 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x556bc79b2858 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x556bc79b2938 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x556bc79b2c08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x556bc79b2b10 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x556bc79b2e48 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x556bc79b2cc0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556bc79b2d38 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79b3018 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x556bc79b2f08 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556bc79b2f80 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79b3178 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x556bc79b3248 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x556bc79b3498 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x556bc79b3308 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x556bc79b3380 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79b36f8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x556bc79b3568 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x556bc79b35e0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79b38b8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x556bc79b37c8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79b3a78 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x556bc79b3980 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79b3b30 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556bc79b3be0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x556bc79bb1d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x556bc79b3c90 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556bc79bb0c0 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556bc79bb478 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x556bc79bb380 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x556bc79bb540 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x556bc79bb590 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x556bc79bb5e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556bc79af0d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x556bc79af2e8 prev 0x556bc79af0d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x556bc79b0640 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x556bc79b05f0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x556bc79b05d0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x556bc79b0480 'type'
|     `-SubstTemplateTypeParmType 0x556bc79b02a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x556bc76876a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc7687648 'T'
|       `-RecordType 0x556bc79afdf0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x556bc79afd08 'sized_array_memory'
|-FieldDecl 0x556bc79bb630 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x556bc79bb680 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x556bc79bb6b8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|   |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556bc76bf338 'T'
|   `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bb748 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x556bc79bb710 'int &'
|   `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|     |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556bc76bf338 'T'
|     `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bb808 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x556bc79bb7d0 'const int &'
|   `-QualType 0x556bc79af381 'const int' const
|     `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bb898 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x556bc79bb860 'int *'
|   `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|     |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556bc76bf338 'T'
|     `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bb928 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x556bc79bb8f0 'const int *'
|   `-QualType 0x556bc79af381 'const int' const
|     `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bc510 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x556bc79bc4c0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x556bc79bc4a0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x556bc79bc430 'type'
|     `-SubstTemplateTypeParmType 0x556bc79bc1f0 'int' sugar
|       |-TemplateTypeParmType 0x556bc76924a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc7692450 'T'
|       `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bc578 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x556bc79bb7d0 'const int &'
|   `-QualType 0x556bc79af381 'const int' const
|     `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bc5d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bc638 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x556bc79bb860 'int *'
|   `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|     |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556bc76bf338 'T'
|     `-BuiltinType 0x556bc73c2580 'int'
|-TypedefDecl 0x556bc79bc6a0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x556bc79bb8f0 'const int *'
|   `-QualType 0x556bc79af381 'const int' const
|     `-SubstTemplateTypeParmType 0x556bc79af380 'int' sugar
|       |-TemplateTypeParmType 0x556bc76bf390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556bc76bf338 'T'
|       `-BuiltinType 0x556bc73c2580 'int'
|-EnumDecl 0x556bc79bc6f8 <line:134:5> col:5
| `-EnumConstantDecl 0x556bc79bc7f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x556bc79bc7d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x556bc76c0a18 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x556bc76c09f0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x556bc76c09d0 <col:40> 'int' 1
|-CXXConstructorDecl 0x556bc79bc878 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x556bc79bcac8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc79bc930 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556bc79bc9d0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x556bc79bcd88 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x556bc79bcc70 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x556bc79bd048 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x556bc79bcf30 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x556bc79bd390 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x556bc79bd270 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x556bc79bd6a0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x556bc79bd580 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x556bc79bd990 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc79bd7d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556bc79bd850 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556bc79bdab8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x556bc79bdb98 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc79bdbf0 <col:30> Inherited
|-CXXMethodDecl 0x556bc79bdc38 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x556bc79bdce8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc79bdd40 <col:30> Inherited
|-CXXMethodDecl 0x556bc79bde08 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556bc79bdeb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc79bdf10 <col:30> Inherited
|-CXXMethodDecl 0x556bc79bdf58 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556bc79be008 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc79be060 <col:30> Inherited
|-CXXMethodDecl 0x556bc79be0a8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556bc79be158 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc79be1b0 <col:30> Inherited
|-CXXMethodDecl 0x556bc79be1f8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556bc79be2a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556bc79be300 <col:30> Inherited
|-CXXMethodDecl 0x556bc79be328 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556bc79be3d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556bc79be488 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x556bc79be648 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc79be538 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556bc79be5b0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556bc79be798 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x556bc79be708 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc79be948 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x556bc79be850 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556bc79bea00 <col:20>
| `-OptimizeNoneAttr 0x556bc79bea58 <col:30>
|-CXXMethodDecl 0x556bc79beb78 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x556bc79bea80 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556bc79bec30 <col:20>
| `-OptimizeNoneAttr 0x556bc79bec88 <col:30>
|-CXXMethodDecl 0x556bc79bed40 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x556bc79becb0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc79bee88 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556bc79bedf8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc79befb8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x556bc79bf0e8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x556bc79bf1b8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x556bc79bf288 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x556bc79bf3c8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x556bc79bf338 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc79bf510 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556bc79bf480 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556bc79bf658 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x556bc79bf5c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556bc79bf710 <col:48> Inherited "" ""
|-CXXMethodDecl 0x556bc79bf810 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x556bc79bf780 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556bc79bf8c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x556bc79bf988 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x556bc79bfa88 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x556bc79bfc08 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x556bc79bfb48 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x556bc79c03c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x556bc79bfcc0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x556bc79c0328 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x556bc79c0228 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x556bc79c04a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556bc79c05f8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x556bc79c0568 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556bc79c06b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556bc79c08f8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x556bc79c0770 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x556bc79c07e8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556bc79c0ab8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x556bc79c09c8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x556bc79c0d08 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x556bc79c0b80 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x556bc79c0bf8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x556bc79c0dc8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x556bc79c1028 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x556bc79c0f30 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x556bc79c10f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc79ad248 prev 0x556bc798eec8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556bc79ad340 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x556bc79ad430 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x556bc79d2ed0 <col:16, line:828:9>
|-CXXDestructorDecl 0x556bc79ad520 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x556bc79d2ee0 <col:25, line:830:9>
|-CXXMethodDecl 0x556bc79ad620 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x556bc79ad6d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x556bc79ad778 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x556bc79ad778
| `-ParmVarDecl 0x556bc79ad888 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x556bc79ae048 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x556bc79ae048
  `-ParmVarDecl 0x556bc79ae158 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc798ecd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x556bc798ee38 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x556bc798eec8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x556bc798ef80 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x556bc798f088 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x556bc798efb8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x556bc79c26b8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556bc79c2698 <col:31> 'int' 0
|-CXXConstructorDecl 0x556bc798f3a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x556bc798f220 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x556bc798f298 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x556bc79c26f0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556bc79c26d0 <col:59> 'int' 0
|-CXXConstructorDecl 0x556bc798f580 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc798f470 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x556bc798f4e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x556bc79c2728 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556bc79c2708 <col:55> 'int' 0
|-CXXConstructorDecl 0x556bc798f938 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x556bc798f720 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x556bc798f798 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x556bc798f810 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x556bc79c2760 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556bc79c2740 <col:31> 'int' 0
|-CXXConstructorDecl 0x556bc798faf8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x556bc798fa38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x556bc798fbf0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x556bc798fdd8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x556bc798fce0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x556bc798fec8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x556bc79c2b10 <col:24, line:291:5>
|   `-ReturnStmt 0x556bc79c2b00 <line:290:9, col:79>
|     `-BinaryOperator 0x556bc79c2ae0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x556bc79c29b8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x556bc79c2910 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x556bc79c28f0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x556bc79c27e8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x556bc79c27d0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x556bc79c27b8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x556bc79c2788 <col:18> 'Vector<String> *const' lvalue ->_conf 0x556bc79af070
|       | |   |       `-CXXThisExpr 0x556bc79c2778 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x556bc79c28d8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x556bc79c28c0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x556bc79c2888 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x556bc79c2858 <col:28, col:35> '<bound member function type>' ->size 0x556bc796fa18
|       | |           `-ImplicitCastExpr 0x556bc79c28a8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x556bc79c2840 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x556bc79c2810 <col:28> 'Vector<String> *const' lvalue ->_conf 0x556bc79af070
|       | |                 `-CXXThisExpr 0x556bc79c2800 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x556bc79c29a0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x556bc79c2988 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x556bc79c2970 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x556bc79c2940 <col:47> 'Args::Slot *const' lvalue ->_slots 0x556bc79c1240
|       |         `-CXXThisExpr 0x556bc79c2930 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x556bc79c2ac0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x556bc79c2aa8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x556bc79c2a90 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x556bc79c2a50 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x556bc79c2a38 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x556bc79c29e8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x556bc79c12f0
|         |     |   `-CXXThisExpr 0x556bc79c29d8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x556bc79c2a18 <col:73> 'int' 0
|         `-IntegerLiteral 0x556bc79c2a70 <col:79> 'int' 0
|-CXXMethodDecl 0x556bc798ff88 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x556bc79c2ce8 <col:32, line:296:5>
|   `-ReturnStmt 0x556bc79c2cd8 <line:295:9, col:49>
|     `-BinaryOperator 0x556bc79c2cb8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x556bc79c2b98 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x556bc79c2b80 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x556bc79c2b68 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x556bc79c2b38 <col:17> 'Args::Slot *const' lvalue ->_slots 0x556bc79c1240
|       |       `-CXXThisExpr 0x556bc79c2b28 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x556bc79c2c98 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x556bc79c2c80 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x556bc79c2c68 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x556bc79c2c28 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x556bc79c2c10 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x556bc79c2bc0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x556bc79c12f0
|         |     |   `-CXXThisExpr 0x556bc79c2bb0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x556bc79c2bf0 <col:43> 'int' 0
|         `-IntegerLiteral 0x556bc79c2c48 <col:49> 'int' 0
|-CXXMethodDecl 0x556bc7990078 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x556bc79c2ef8 <col:19, line:306:5>
|   |-IfStmt 0x556bc79c2e18 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x556bc79c2d58 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x556bc79c2d40 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x556bc79c2d10 <col:13> 'Vector<String> *' lvalue ->_conf 0x556bc79af070
|   | |     `-CXXThisExpr 0x556bc79c2d00 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x556bc79c2df8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x556bc79c2dc8 <col:13, col:20> '<bound member function type>' ->clear 0x556bc7972418
|   |     `-ImplicitCastExpr 0x556bc79c2db0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x556bc79c2d80 <col:13> 'Vector<String> *' lvalue ->_conf 0x556bc79af070
|   |         `-CXXThisExpr 0x556bc79c2d70 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x556bc79c2ea0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x556bc79c2e70 <col:9, col:16> '<bound member function type>' .clear 0x556bc79c0dc8
|   |   `-MemberExpr 0x556bc79c2e40 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x556bc79c11e0
|   |     `-CXXThisExpr 0x556bc79c2e30 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x556bc79c2ee8 <line:305:9, col:17>
|     `-UnaryOperator 0x556bc79c2ed0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc79c2ec0 <col:17> 'Args *' this
|-CXXMethodDecl 0x556bc79902f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x556bc7990200 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x556bc7990478 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x556bc79903b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x556bc79907f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x556bc7990520 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x556bc7990758 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x556bc79905c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x556bc7990640 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x556bc79c4b90 <col:67, line:327:5>
|     |-WhileStmt 0x556bc79c4b40 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x556bc79c2fe0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x556bc79c2f60 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x556bc78e0f78 0x556bc772a558 0x556bc772a230 0x556bc771aa00 0x556bc771a6b0 0x556bc7719fa0 0x556bc76ec910 0x556bc7679de0
|     | | |-DeclRefExpr 0x556bc79c2f20 <col:16> 'Iter' lvalue ParmVar 0x556bc79905c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x556bc79c2f40 <col:25> 'Iter' lvalue ParmVar 0x556bc7990640 'end' 'Iter'
|     | `-CompoundStmt 0x556bc79c4b20 <col:30, line:325:9>
|     |   |-CallExpr 0x556bc79c4ac0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x556bc79c3028 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x556bc79c4a90 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x556bc79c4a20 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|     |   |   `-DeclRefExpr 0x556bc79c3088 <col:24> 'Iter' lvalue ParmVar 0x556bc79905c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x556bc79c4b08 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x556bc79c4ae8 <col:15> 'Iter' lvalue ParmVar 0x556bc79905c8 'begin' 'Iter'
|     `-ReturnStmt 0x556bc79c4b80 <line:326:9, col:17>
|       `-UnaryOperator 0x556bc79c4b68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c4b58 <col:17> 'Args *' this
|-CXXMethodDecl 0x556bc7990900 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x556bc7990870 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x556bc7990a48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x556bc79909b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x556bc7990b10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x556bc79c4c70 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x556bc79c4c10 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x556bc79c4bc0 <col:9> '<bound member function type>' ->reset_from 0x556bc79c1668
|   | | `-CXXThisExpr 0x556bc79c4bb0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x556bc79c4bf0 <col:20> 'int' 0
|   `-ReturnStmt 0x556bc79c4c60 <line:352:9, col:17>
|     `-UnaryOperator 0x556bc79c4c48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc79c4c38 <col:17> 'Args *' this
|-VarDecl 0x556bc7990bc8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x556bc7990c30 <col:38> 'int' 1
|-VarDecl 0x556bc7990cc0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x556bc7990d28 <col:39> 'int' 2
|-VarDecl 0x556bc7990db8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x556bc7990e20 <col:39> 'int' 4
|-VarDecl 0x556bc7990eb0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x556bc7990f18 <col:39> 'int' 8
|-FunctionTemplateDecl 0x556bc7991298 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x556bc7990f90 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x556bc79911f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x556bc7991040 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x556bc79910e8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x556bc79c4dc8 <col:43, line:371:5>
| |   `-ReturnStmt 0x556bc79c4db8 <line:370:9, col:34>
| |     `-CallExpr 0x556bc79c4d80 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x556bc79c4ca0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x556bc79c4d20 <col:21> 'const char *' lvalue ParmVar 0x556bc7991040 'keyword' 'const char *'
| |       |-IntegerLiteral 0x556bc79c4d40 <col:30> 'int' 0
| |       `-DeclRefExpr 0x556bc79c4d60 <col:33> 'T' lvalue ParmVar 0x556bc79910e8 'x' 'T &'
| `-CXXMethodDecl 0x556bc79f52a8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x556bc79f50c0 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x556bc79f5198 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x556bc79915c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x556bc7991300 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc7991528 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x556bc79913b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7991458 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c4f18 <col:45, line:375:5>
|     `-ReturnStmt 0x556bc79c4f08 <line:374:9, col:42>
|       `-CallExpr 0x556bc79c4ed0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c4df0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c4e70 <col:21> 'const char *' lvalue ParmVar 0x556bc79913b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c4e90 <col:30> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x556bc79c4eb0 <col:41> 'T' lvalue ParmVar 0x556bc7991458 'x' 'T &'
|-FunctionTemplateDecl 0x556bc79918f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x556bc7991630 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x556bc7991858 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x556bc79916e0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x556bc7991788 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x556bc79c5068 <col:45, line:379:5>
| |   `-ReturnStmt 0x556bc79c5058 <line:378:9, col:43>
| |     `-CallExpr 0x556bc79c5020 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x556bc79c4f40 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x556bc79c4fc0 <col:21> 'const char *' lvalue ParmVar 0x556bc79916e0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x556bc79c4fe0 <col:30> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int'
| |       `-DeclRefExpr 0x556bc79c5000 <col:42> 'T' lvalue ParmVar 0x556bc7991788 'x' 'T &'
| `-CXXMethodDecl 0x556bc79f4d18 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x556bc79f4b38 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x556bc79f4c08 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x556bc7991c28 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x556bc7991960 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc7991b88 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x556bc7991a10 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7991ab8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c5268 <col:46, line:383:5>
|     `-ReturnStmt 0x556bc79c5258 <line:382:9, col:55>
|       `-CallExpr 0x556bc79c5220 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c5090 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c5110 <col:21> 'const char *' lvalue ParmVar 0x556bc7991a10 'keyword' 'const char *'
|         |-BinaryOperator 0x556bc79c51e0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x556bc79c5190 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x556bc79c5170 <col:30> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x556bc79c51c8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x556bc79c51a8 <col:42> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x556bc79c5200 <col:54> 'T' lvalue ParmVar 0x556bc7991ab8 'x' 'T &'
|-FunctionTemplateDecl 0x556bc7992028 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x556bc7991c90 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc7991f88 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x556bc7991d40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7991dc0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x556bc7991e68 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c53a8 <col:54, line:388:5>
|     |-CallExpr 0x556bc79c5330 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c5280 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x556bc79c52c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c52d0 <col:30> 'const char *' lvalue ParmVar 0x556bc7991d40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556bc79c52f0 <col:39> 'int' lvalue ParmVar 0x556bc7991dc0 'flags' 'int'
|     | `-DeclRefExpr 0x556bc79c5310 <col:46> 'T' lvalue ParmVar 0x556bc7991e68 'x' 'T &'
|     `-ReturnStmt 0x556bc79c5398 <line:387:9, col:17>
|       `-UnaryOperator 0x556bc79c5380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c5370 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc79924d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x556bc7992098 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556bc7992118 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556bc7992438 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x556bc79921d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7992278 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x556bc7992318 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x556bc79c5518 <col:74, line:403:5>
|     `-ReturnStmt 0x556bc79c5508 <line:402:9, col:56>
|       `-CallExpr 0x556bc79c54c8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c53d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c5448 <col:28> 'const char *' lvalue ParmVar 0x556bc79921d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c5468 <col:37> 'int' 0
|         |-DeclRefExpr 0x556bc79c5488 <col:40> 'T' lvalue ParmVar 0x556bc7992278 'x' 'T &'
|         `-DeclRefExpr 0x556bc79c54a8 <col:43> 'const V' lvalue ParmVar 0x556bc7992318 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556bc7992948 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x556bc7992548 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556bc79925c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556bc79928a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x556bc7992688 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7992728 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x556bc79927c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x556bc79c5680 <col:76, line:407:5>
|     `-ReturnStmt 0x556bc79c5670 <line:406:9, col:65>
|       `-CallExpr 0x556bc79c5630 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c5540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c55b0 <col:28> 'const char *' lvalue ParmVar 0x556bc7992688 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c55d0 <col:37> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int'
|         |-DeclRefExpr 0x556bc79c55f0 <col:49> 'T' lvalue ParmVar 0x556bc7992728 'x' 'T &'
|         `-DeclRefExpr 0x556bc79c5610 <col:52> 'const V' lvalue ParmVar 0x556bc79927c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556bc7992e98 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x556bc79929b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556bc7992a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556bc7992df8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x556bc7992af8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7992b78 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x556bc7992c18 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x556bc7992cb8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x556bc79c57e8 <col:85, line:412:5>
|     |-CallExpr 0x556bc79c5768 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c5698 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x556bc79c56d8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c56e8 <col:37> 'const char *' lvalue ParmVar 0x556bc7992af8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556bc79c5708 <col:46> 'int' lvalue ParmVar 0x556bc7992b78 'flags' 'int'
|     | |-DeclRefExpr 0x556bc79c5728 <col:53> 'T' lvalue ParmVar 0x556bc7992c18 'x' 'T &'
|     | `-DeclRefExpr 0x556bc79c5748 <col:56> 'const V' lvalue ParmVar 0x556bc7992cb8 'default_value' 'const V &'
|     `-ReturnStmt 0x556bc79c57d8 <line:411:9, col:17>
|       `-UnaryOperator 0x556bc79c57c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c57b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc7993328 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x556bc7992f10 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7992f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc7993288 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc7993048 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79930c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7993168 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c5968 <col:53, line:425:5>
|     `-ReturnStmt 0x556bc79c5958 <line:424:9, col:42>
|       `-CallExpr 0x556bc79c5918 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c5818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c5898 <col:21> 'const char *' lvalue ParmVar 0x556bc7993048 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c58b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x556bc79c58d8 <col:33> 'P' lvalue ParmVar 0x556bc79930c0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c58f8 <col:41> 'T' lvalue ParmVar 0x556bc7993168 'x' 'T &'
|-FunctionTemplateDecl 0x556bc7993778 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x556bc7993398 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7993418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79936d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc79934d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7993550 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79935f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c5ae0 <col:55, line:429:5>
|     `-ReturnStmt 0x556bc79c5ad0 <line:428:9, col:50>
|       `-CallExpr 0x556bc79c5a90 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c5990 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c5a10 <col:21> 'const char *' lvalue ParmVar 0x556bc79934d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c5a30 <col:30> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x556bc79c5a50 <col:41> 'P' lvalue ParmVar 0x556bc7993550 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c5a70 <col:49> 'T' lvalue ParmVar 0x556bc79935f8 'x' 'T &'
|-FunctionTemplateDecl 0x556bc7993bc8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x556bc79937e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7993868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc7993b28 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc7993928 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79939a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7993a48 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c5c58 <col:55, line:433:5>
|     `-ReturnStmt 0x556bc79c5c48 <line:432:9, col:51>
|       `-CallExpr 0x556bc79c5c08 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c5b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c5b88 <col:21> 'const char *' lvalue ParmVar 0x556bc7993928 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c5ba8 <col:30> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int'
|         |-DeclRefExpr 0x556bc79c5bc8 <col:42> 'P' lvalue ParmVar 0x556bc79939a0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c5be8 <col:50> 'T' lvalue ParmVar 0x556bc7993a48 'x' 'T &'
|-FunctionTemplateDecl 0x556bc7994018 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x556bc7993c38 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7993cb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc7993f78 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc7993d78 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7993df0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7993e98 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c5e80 <col:56, line:437:5>
|     `-ReturnStmt 0x556bc79c5e70 <line:436:9, col:63>
|       `-CallExpr 0x556bc79c5e30 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c5c80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c5d00 <col:21> 'const char *' lvalue ParmVar 0x556bc7993d78 'keyword' 'const char *'
|         |-BinaryOperator 0x556bc79c5dd0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x556bc79c5d80 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x556bc79c5d60 <col:30> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x556bc79c5db8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x556bc79c5d98 <col:42> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x556bc79c5df0 <col:54> 'P' lvalue ParmVar 0x556bc7993df0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c5e10 <col:62> 'T' lvalue ParmVar 0x556bc7993e98 'x' 'T &'
|-FunctionTemplateDecl 0x556bc7994548 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x556bc7994088 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7994108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79944a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x556bc79941c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7994248 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79942c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7994368 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c5fe8 <col:64, line:442:5>
|     |-CallExpr 0x556bc79c5f68 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c5e98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x556bc79c5ed8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c5ee8 <col:30> 'const char *' lvalue ParmVar 0x556bc79941c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556bc79c5f08 <col:39> 'int' lvalue ParmVar 0x556bc7994248 'flags' 'int'
|     | |-DeclRefExpr 0x556bc79c5f28 <col:46> 'P' lvalue ParmVar 0x556bc79942c0 'parser' 'P'
|     | `-DeclRefExpr 0x556bc79c5f48 <col:54> 'T' lvalue ParmVar 0x556bc7994368 'x' 'T &'
|     `-ReturnStmt 0x556bc79c5fd8 <line:441:9, col:17>
|       `-UnaryOperator 0x556bc79c5fc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c5fb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc7994b48 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x556bc79945c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7994638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x556bc79946b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556bc7994aa8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x556bc7994780 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79947f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7994898 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x556bc7994968 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x556bc79c6180 <col:84, line:458:5>
|     `-ReturnStmt 0x556bc79c6170 <line:457:9, col:64>
|       `-CallExpr 0x556bc79c6128 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c6018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6088 <col:28> 'const char *' lvalue ParmVar 0x556bc7994780 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c60a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x556bc79c60c8 <col:40> 'P' lvalue ParmVar 0x556bc79947f8 'parser' 'P'
|         |-DeclRefExpr 0x556bc79c60e8 <col:48> 'T' lvalue ParmVar 0x556bc7994898 'x' 'T &'
|         `-DeclRefExpr 0x556bc79c6108 <col:51> 'const V' lvalue ParmVar 0x556bc7994968 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556bc79950c8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x556bc7994bc0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7994c38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x556bc7994cb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556bc7995028 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x556bc7994d80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7994df8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7994e98 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x556bc7994f38 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x556bc79c6310 <col:86, line:462:5>
|     `-ReturnStmt 0x556bc79c6300 <line:461:9, col:73>
|       `-CallExpr 0x556bc79c62b8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c61a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6218 <col:28> 'const char *' lvalue ParmVar 0x556bc7994d80 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c6238 <col:37> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int'
|         |-DeclRefExpr 0x556bc79c6258 <col:49> 'P' lvalue ParmVar 0x556bc7994df8 'parser' 'P'
|         |-DeclRefExpr 0x556bc79c6278 <col:57> 'T' lvalue ParmVar 0x556bc7994e98 'x' 'T &'
|         `-DeclRefExpr 0x556bc79c6298 <col:60> 'const V' lvalue ParmVar 0x556bc7994f38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x556bc7995728 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x556bc7995140 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79951b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x556bc7995238 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556bc7995688 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x556bc7995300 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7995380 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79953f8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7995498 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x556bc7995538 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x556bc79c64a0 <col:95, line:467:5>
|     |-CallExpr 0x556bc79c6418 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c6328 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x556bc79c6368 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c6378 <col:37> 'const char *' lvalue ParmVar 0x556bc7995300 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556bc79c6398 <col:46> 'int' lvalue ParmVar 0x556bc7995380 'flags' 'int'
|     | |-DeclRefExpr 0x556bc79c63b8 <col:53> 'P' lvalue ParmVar 0x556bc79953f8 'parser' 'P'
|     | |-DeclRefExpr 0x556bc79c63d8 <col:61> 'T' lvalue ParmVar 0x556bc7995498 'x' 'T &'
|     | `-DeclRefExpr 0x556bc79c63f8 <col:64> 'const V' lvalue ParmVar 0x556bc7995538 'default_value' 'const V &'
|     `-ReturnStmt 0x556bc79c6490 <line:466:9, col:17>
|       `-UnaryOperator 0x556bc79c6478 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c6468 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc7995d08 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x556bc79957a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7995828 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556bc79958a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556bc7995c68 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556bc7995970 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79959e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7995a88 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556bc7995b28 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x556bc79c6648 <col:63, line:481:5>
|     `-ReturnStmt 0x556bc79c6638 <line:480:9, col:47>
|       `-CallExpr 0x556bc79c65f0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c64d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6550 <col:21> 'const char *' lvalue ParmVar 0x556bc7995970 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c6570 <col:30> 'int' 0
|         |-DeclRefExpr 0x556bc79c6590 <col:33> 'P' lvalue ParmVar 0x556bc79959e8 'parser' 'P'
|         |-DeclRefExpr 0x556bc79c65b0 <col:41> 'T1' lvalue ParmVar 0x556bc7995a88 'x1' 'T1 &'
|         `-DeclRefExpr 0x556bc79c65d0 <col:45> 'T2' lvalue ParmVar 0x556bc7995b28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556bc7996288 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x556bc7995d80 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7995df8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556bc7995e78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556bc79961e8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556bc7995f40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7995fb8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7996058 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556bc79960f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x556bc79c67e8 <col:65, line:485:5>
|     `-ReturnStmt 0x556bc79c67d8 <line:484:9, col:55>
|       `-CallExpr 0x556bc79c6790 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c6670 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c66f0 <col:21> 'const char *' lvalue ParmVar 0x556bc7995f40 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c6710 <col:30> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x556bc79c6730 <col:41> 'P' lvalue ParmVar 0x556bc7995fb8 'parser' 'P'
|         |-DeclRefExpr 0x556bc79c6750 <col:49> 'T1' lvalue ParmVar 0x556bc7996058 'x1' 'T1 &'
|         `-DeclRefExpr 0x556bc79c6770 <col:53> 'T2' lvalue ParmVar 0x556bc79960f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556bc7996808 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x556bc7996300 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc7996378 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556bc79963f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556bc7996768 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556bc79964c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7996538 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79965d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556bc7996678 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x556bc79c6988 <col:65, line:489:5>
|     `-ReturnStmt 0x556bc79c6978 <line:488:9, col:56>
|       `-CallExpr 0x556bc79c6930 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c6810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6890 <col:21> 'const char *' lvalue ParmVar 0x556bc79964c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c68b0 <col:30> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int'
|         |-DeclRefExpr 0x556bc79c68d0 <col:42> 'P' lvalue ParmVar 0x556bc7996538 'parser' 'P'
|         |-DeclRefExpr 0x556bc79c68f0 <col:50> 'T1' lvalue ParmVar 0x556bc79965d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x556bc79c6910 <col:54> 'T2' lvalue ParmVar 0x556bc7996678 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556bc799c238 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x556bc7996880 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79968f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556bc7996978 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556bc799c198 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556bc7996a40 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc7996ab8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x556bc7996b58 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556bc7996bf8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x556bc79c6bd8 <col:66, line:493:5>
|     `-ReturnStmt 0x556bc79c6bc8 <line:492:9, col:68>
|       `-CallExpr 0x556bc79c6b80 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c69b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6a30 <col:21> 'const char *' lvalue ParmVar 0x556bc7996a40 'keyword' 'const char *'
|         |-BinaryOperator 0x556bc79c6b00 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x556bc79c6ab0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x556bc79c6a90 <col:30> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x556bc79c6ae8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x556bc79c6ac8 <col:42> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x556bc79c6b20 <col:54> 'P' lvalue ParmVar 0x556bc7996ab8 'parser' 'P'
|         |-DeclRefExpr 0x556bc79c6b40 <col:62> 'T1' lvalue ParmVar 0x556bc7996b58 'x1' 'T1 &'
|         `-DeclRefExpr 0x556bc79c6b60 <col:66> 'T2' lvalue ParmVar 0x556bc7996bf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556bc799c898 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x556bc799c2b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799c328 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556bc799c3a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556bc799c7f8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556bc799c470 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799c4f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x556bc799c568 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799c608 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556bc799c6a8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x556bc79c6d68 <col:74, line:498:5>
|     |-CallExpr 0x556bc79c6ce0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c6bf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x556bc79c6c30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c6c40 <col:30> 'const char *' lvalue ParmVar 0x556bc799c470 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556bc79c6c60 <col:39> 'int' lvalue ParmVar 0x556bc799c4f0 'flags' 'int'
|     | |-DeclRefExpr 0x556bc79c6c80 <col:46> 'P' lvalue ParmVar 0x556bc799c568 'parser' 'P'
|     | |-DeclRefExpr 0x556bc79c6ca0 <col:54> 'T1' lvalue ParmVar 0x556bc799c608 'x1' 'T1 &'
|     | `-DeclRefExpr 0x556bc79c6cc0 <col:58> 'T2' lvalue ParmVar 0x556bc799c6a8 'x2' 'T2 &'
|     `-ReturnStmt 0x556bc79c6d58 <line:497:9, col:17>
|       `-UnaryOperator 0x556bc79c6d40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c6d30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc799cbf8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x556bc799c918 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799cb58 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556bc799c9d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799ca48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c6eb0 <col:52, line:509:5>
|     `-ReturnStmt 0x556bc79c6ea0 <line:508:9, col:44>
|       `-CallExpr 0x556bc79c6e68 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c6d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6e08 <col:26> 'const char *' lvalue ParmVar 0x556bc799c9d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c6e28 <col:35> 'int' 0
|         `-DeclRefExpr 0x556bc79c6e48 <col:38> 'P' lvalue ParmVar 0x556bc799ca48 'parser' 'P'
|-FunctionTemplateDecl 0x556bc799cef8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x556bc799cc60 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799ce58 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556bc799cd10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799cd88 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c6ff0 <col:54, line:513:5>
|     `-ReturnStmt 0x556bc79c6fe0 <line:512:9, col:52>
|       `-CallExpr 0x556bc79c6fa8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c6ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c6f48 <col:26> 'const char *' lvalue ParmVar 0x556bc799cd10 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c6f68 <col:35> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x556bc79c6f88 <col:46> 'P' lvalue ParmVar 0x556bc799cd88 'parser' 'P'
|-FunctionTemplateDecl 0x556bc799d1f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x556bc799cf60 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799d158 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556bc799d010 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799d088 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c7130 <col:54, line:517:5>
|     `-ReturnStmt 0x556bc79c7120 <line:516:9, col:53>
|       `-CallExpr 0x556bc79c70e8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7088 <col:26> 'const char *' lvalue ParmVar 0x556bc799d010 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c70a8 <col:35> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int'
|         `-DeclRefExpr 0x556bc79c70c8 <col:47> 'P' lvalue ParmVar 0x556bc799d088 'parser' 'P'
|-FunctionTemplateDecl 0x556bc799d4f8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x556bc799d260 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799d458 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556bc799d310 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799d388 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c7320 <col:55, line:521:5>
|     `-ReturnStmt 0x556bc79c7310 <line:520:9, col:65>
|       `-CallExpr 0x556bc79c72d8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c71c8 <col:26> 'const char *' lvalue ParmVar 0x556bc799d310 'keyword' 'const char *'
|         |-BinaryOperator 0x556bc79c7298 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x556bc79c7248 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x556bc79c7228 <col:35> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x556bc79c7280 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x556bc79c7260 <col:47> 'const int' lvalue Var 0x556bc7990cc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x556bc79c72b8 <col:59> 'P' lvalue ParmVar 0x556bc799d388 'parser' 'P'
|-FunctionTemplateDecl 0x556bc799d8c8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x556bc799d560 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799d828 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x556bc799d610 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799d690 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x556bc799d708 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c7460 <col:63, line:526:5>
|     |-CallExpr 0x556bc79c73e8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c7338 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x556bc79c7378 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c7388 <col:35> 'const char *' lvalue ParmVar 0x556bc799d610 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556bc79c73a8 <col:44> 'int' lvalue ParmVar 0x556bc799d690 'flags' 'int'
|     | `-DeclRefExpr 0x556bc79c73c8 <col:51> 'P' lvalue ParmVar 0x556bc799d708 'parser' 'P'
|     `-ReturnStmt 0x556bc79c7450 <line:525:9, col:17>
|       `-UnaryOperator 0x556bc79c7438 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c7428 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc799dd18 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x556bc799d938 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799d9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799dc78 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc799da78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799daf0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799db98 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c75b8 <col:58, line:541:5>
|     `-ReturnStmt 0x556bc79c75a8 <line:540:9, col:39>
|       `-CallExpr 0x556bc79c7570 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7510 <col:21> 'const char *' lvalue ParmVar 0x556bc799da78 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c7530 <col:30> 'P' lvalue ParmVar 0x556bc799daf0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c7550 <col:38> 'T' lvalue ParmVar 0x556bc799db98 'x' 'T &'
|-FunctionTemplateDecl 0x556bc799e168 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x556bc799dd88 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799de08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799e0c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc799dec8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799df40 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799dfe8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c76f0 <col:60, line:545:5>
|     `-ReturnStmt 0x556bc79c76e0 <line:544:9, col:41>
|       `-CallExpr 0x556bc79c76a8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c75e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7648 <col:23> 'const char *' lvalue ParmVar 0x556bc799dec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c7668 <col:32> 'P' lvalue ParmVar 0x556bc799df40 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c7688 <col:40> 'T' lvalue ParmVar 0x556bc799dfe8 'x' 'T &'
|-FunctionTemplateDecl 0x556bc799e5b8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x556bc799e1d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799e258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799e518 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc799e318 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799e390 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799e438 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c7828 <col:60, line:549:5>
|     `-ReturnStmt 0x556bc79c7818 <line:548:9, col:41>
|       `-CallExpr 0x556bc79c77e0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7780 <col:23> 'const char *' lvalue ParmVar 0x556bc799e318 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c77a0 <col:32> 'P' lvalue ParmVar 0x556bc799e390 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c77c0 <col:40> 'T' lvalue ParmVar 0x556bc799e438 'x' 'T &'
|-FunctionTemplateDecl 0x556bc799ea08 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x556bc799e628 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799e6a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799e968 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc799e768 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799e7e0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799e888 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c7960 <col:61, line:553:5>
|     `-ReturnStmt 0x556bc79c7950 <line:552:9, col:42>
|       `-CallExpr 0x556bc79c7918 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c78b8 <col:24> 'const char *' lvalue ParmVar 0x556bc799e768 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c78d8 <col:33> 'P' lvalue ParmVar 0x556bc799e7e0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c78f8 <col:41> 'T' lvalue ParmVar 0x556bc799e888 'x' 'T &'
|-FunctionTemplateDecl 0x556bc799eee8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x556bc799ea78 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799eaf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799ee48 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x556bc799ebb8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799ec38 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x556bc799ecb0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799ed58 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c7ad8 <col:69, line:557:5>
|     `-ReturnStmt 0x556bc79c7ac8 <line:556:9, col:46>
|       `-CallExpr 0x556bc79c7a88 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7a08 <col:21> 'const char *' lvalue ParmVar 0x556bc799ebb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c7a28 <col:30> 'int' lvalue ParmVar 0x556bc799ec38 'flags' 'int'
|         |-DeclRefExpr 0x556bc79c7a48 <col:37> 'P' lvalue ParmVar 0x556bc799ecb0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c7a68 <col:45> 'T' lvalue ParmVar 0x556bc799ed58 'x' 'T &'
|-FunctionTemplateDecl 0x556bc799f1f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x556bc799ef60 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799f158 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556bc799f010 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799f088 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c7c18 <col:56, line:571:5>
|     `-ReturnStmt 0x556bc79c7c08 <line:570:9, col:48>
|       `-CallExpr 0x556bc79c7bd0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7b00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7b70 <col:30> 'const char *' lvalue ParmVar 0x556bc799f010 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c7b90 <col:39> 'int' 0
|         `-DeclRefExpr 0x556bc79c7bb0 <col:42> 'P' lvalue ParmVar 0x556bc799f088 'parser' 'P'
|-FunctionTemplateDecl 0x556bc799f588 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x556bc799f260 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc799f4e8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x556bc799f310 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799f390 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x556bc799f408 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x556bc79c7de8 <col:67, line:576:5>
|     |-CallExpr 0x556bc79c7d70 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c7c30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x556bc79c7c70 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c7c80 <col:39> 'const char *' lvalue ParmVar 0x556bc799f310 'keyword' 'const char *'
|     | |-BinaryOperator 0x556bc79c7d30 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x556bc79c7ce0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x556bc79c7ca0 <col:48> 'int' lvalue ParmVar 0x556bc799f390 'flags' 'int'
|     | | `-ImplicitCastExpr 0x556bc79c7d18 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556bc79c7cf8 <col:56> 'const int' lvalue Var 0x556bc7990eb0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x556bc79c7d50 <col:68> 'P' lvalue ParmVar 0x556bc799f408 'parser' 'P'
|     `-ReturnStmt 0x556bc79c7dd8 <line:575:9, col:17>
|       `-UnaryOperator 0x556bc79c7dc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c7db0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc799f9d8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x556bc799f5f8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799f678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799f938 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556bc799f738 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799f7b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799f858 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c7f58 <col:62, line:592:5>
|     `-ReturnStmt 0x556bc79c7f48 <line:591:9, col:51>
|       `-CallExpr 0x556bc79c7f08 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c7e18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c7e88 <col:30> 'const char *' lvalue ParmVar 0x556bc799f738 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c7ea8 <col:39> 'int' 0
|         |-DeclRefExpr 0x556bc79c7ec8 <col:42> 'P' lvalue ParmVar 0x556bc799f7b0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c7ee8 <col:50> 'T' lvalue ParmVar 0x556bc799f858 'x' 'T &'
|-FunctionTemplateDecl 0x556bc799feb8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x556bc799fa48 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799fac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc799fe18 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x556bc799fb88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc799fc08 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x556bc799fc80 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x556bc799fd28 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c8150 <col:73, line:597:5>
|     |-CallExpr 0x556bc79c80d0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c7f70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x556bc79c7fb0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c7fc0 <col:39> 'const char *' lvalue ParmVar 0x556bc799fb88 'keyword' 'const char *'
|     | |-BinaryOperator 0x556bc79c8070 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x556bc79c8020 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x556bc79c7fe0 <col:48> 'int' lvalue ParmVar 0x556bc799fc08 'flags' 'int'
|     | | `-ImplicitCastExpr 0x556bc79c8058 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556bc79c8038 <col:56> 'const int' lvalue Var 0x556bc7990eb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x556bc79c8090 <col:68> 'P' lvalue ParmVar 0x556bc799fc80 'parser' 'P'
|     | `-DeclRefExpr 0x556bc79c80b0 <col:76> 'T' lvalue ParmVar 0x556bc799fd28 'x' 'T &'
|     `-ReturnStmt 0x556bc79c8140 <line:596:9, col:17>
|       `-UnaryOperator 0x556bc79c8128 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c8118 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc79a0468 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x556bc799ff30 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc799ffa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79a03c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x556bc79a0068 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a00e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79a02a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x556bc79c82c0 <col:65, line:614:5>
|     `-ReturnStmt 0x556bc79c82b0 <line:613:9, col:46>
|       `-CallExpr 0x556bc79c8270 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c8180 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c81f0 <col:25> 'const char *' lvalue ParmVar 0x556bc79a0068 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c8210 <col:34> 'int' 0
|         |-DeclRefExpr 0x556bc79c8230 <col:37> 'P' lvalue ParmVar 0x556bc79a00e0 'parser' 'P'
|         `-DeclRefExpr 0x556bc79c8250 <col:45> 'Vector<T>' lvalue ParmVar 0x556bc79a02a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x556bc79a0898 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x556bc79a04d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc79a07f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x556bc79a0590 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a06e0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x556bc79c84e0 <col:55, line:618:5>
|     `-ReturnStmt 0x556bc79c84d0 <line:617:9, col:55>
|       `-CallExpr 0x556bc79c8490 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c82e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c8358 <col:25> 'const char *' lvalue ParmVar 0x556bc79a0590 'keyword' 'const char *'
|         |-IntegerLiteral 0x556bc79c8378 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x556bc79c8450 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x556bc79c8470 <col:54> 'Vector<T>' lvalue ParmVar 0x556bc79a06e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x556bc79a0e68 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x556bc79a0900 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79a0978 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79a0dc8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x556bc79a0a38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a0ab8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a0b30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79a0c80 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x556bc79c86d8 <col:76, line:623:5>
|     |-CallExpr 0x556bc79c8658 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556bc79c84f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x556bc79c8538 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x556bc79c8548 <col:34> 'const char *' lvalue ParmVar 0x556bc79a0a38 'keyword' 'const char *'
|     | |-BinaryOperator 0x556bc79c85f8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x556bc79c85a8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x556bc79c8568 <col:43> 'int' lvalue ParmVar 0x556bc79a0ab8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x556bc79c85e0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x556bc79c85c0 <col:51> 'const int' lvalue Var 0x556bc7990eb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x556bc79c8618 <col:63> 'P' lvalue ParmVar 0x556bc79a0b30 'parser' 'P'
|     | `-DeclRefExpr 0x556bc79c8638 <col:71> 'Vector<T>' lvalue ParmVar 0x556bc79a0c80 'x' 'Vector<T> &'
|     `-ReturnStmt 0x556bc79c86c8 <line:622:9, col:17>
|       `-UnaryOperator 0x556bc79c86b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c86a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc79a13a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x556bc79a0ee0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79a0f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79a1308 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x556bc79a1018 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a1098 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a11e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x556bc79c8940 <col:66, line:627:5>
|     `-ReturnStmt 0x556bc79c8930 <line:626:9, col:59>
|       `-CallExpr 0x556bc79c88f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556bc79c8708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556bc79c8778 <col:25> 'const char *' lvalue ParmVar 0x556bc79a1018 'keyword' 'const char *'
|         |-DeclRefExpr 0x556bc79c8798 <col:34> 'int' lvalue ParmVar 0x556bc79a1098 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x556bc79c88b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x556bc79c88d0 <col:58> 'Vector<T>' lvalue ParmVar 0x556bc79a11e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x556bc79a1438 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x556bc79c89c0 <col:25, line:633:5>
|   `-ReturnStmt 0x556bc79c89b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x556bc79c8998 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x556bc79c8968 <col:16> 'const bool' lvalue ->_status 0x556bc79aeed8
|         `-CXXThisExpr 0x556bc79c8958 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x556bc79a15b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x556bc79a14f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x556bc79c8aa8 <col:27, line:639:5>
|   |-BinaryOperator 0x556bc79c8a50 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x556bc79c89d8 <col:9> 'bool' lvalue ParmVar 0x556bc79a14f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x556bc79c8a38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x556bc79c8a08 <col:13> 'bool' lvalue ->_status 0x556bc79aeed8
|   |     `-CXXThisExpr 0x556bc79c89f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x556bc79c8a98 <line:638:9, col:17>
|     `-UnaryOperator 0x556bc79c8a80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc79c8a70 <col:17> 'Args *' this
|-CXXMethodDecl 0x556bc79a1738 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x556bc79a1678 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x556bc79c8b98 <col:39, line:644:5>
|   |-BinaryOperator 0x556bc79c8b40 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x556bc79c8ac8 <col:9> 'bool' lvalue ParmVar 0x556bc79a1678 'x' 'bool &'
|   | `-ImplicitCastExpr 0x556bc79c8b28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x556bc79c8af8 <col:13> 'const bool' lvalue ->_status 0x556bc79aeed8
|   |     `-CXXThisExpr 0x556bc79c8ae8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x556bc79c8b88 <line:643:9, col:17>
|     `-UnaryOperator 0x556bc79c8b70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc79c8b60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x556bc79a1800 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x556bc79c8c40 <col:30, line:651:5>
|   `-ReturnStmt 0x556bc79c8c30 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x556bc79c8c18 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x556bc79c8be8 <col:16> 'bool' lvalue ->_read_status 0x556bc78a4f90
|         `-ImplicitCastExpr 0x556bc79c8bc8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x556bc79c8bb8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x556bc79a1948 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x556bc79a18b8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x556bc79c8d48 <col:32, line:658:5>
|   |-BinaryOperator 0x556bc79c8cf0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x556bc79c8c58 <col:9> 'bool' lvalue ParmVar 0x556bc79a18b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x556bc79c8cd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x556bc79c8ca8 <col:13> 'bool' lvalue ->_read_status 0x556bc78a4f90
|   |     `-ImplicitCastExpr 0x556bc79c8c88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x556bc79c8c78 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x556bc79c8d38 <line:657:9, col:17>
|     `-UnaryOperator 0x556bc79c8d20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc79c8d10 <col:17> 'Args *' this
|-CXXMethodDecl 0x556bc79a1a98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x556bc79a1a08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x556bc79c8e58 <col:44, line:663:5>
|   |-BinaryOperator 0x556bc79c8e00 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x556bc79c8d68 <col:9> 'bool' lvalue ParmVar 0x556bc79a1a08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x556bc79c8de8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x556bc79c8db8 <col:13> 'bool' lvalue ->_read_status 0x556bc78a4f90
|   |     `-ImplicitCastExpr 0x556bc79c8d98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x556bc79c8d88 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x556bc79c8e48 <line:662:9, col:17>
|     `-UnaryOperator 0x556bc79c8e30 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc79c8e20 <col:17> 'const Args *' this
|-CXXMethodDecl 0x556bc79a1b60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x556bc79a1c28 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x556bc79a1cf0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x556bc79a1db8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x556bc79a20c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x556bc79a1e58 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc79a2028 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x556bc79a1f38 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c9210 <col:19, line:706:5>
|     `-IfStmt 0x556bc79c91e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x556bc79c8f58 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x556bc79c9118 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x556bc79c90e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x556bc79c90a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x556bc79c8fb0 <col:42> '<bound member function type>' ->simple_slot 0x556bc79c2320
|       |     | `-CXXThisExpr 0x556bc79c8fa0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x556bc79c9048 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x556bc79c9000 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x556bc772eff8
|       |     | `-DeclRefExpr 0x556bc79c8fe0 <col:55> 'T' lvalue ParmVar 0x556bc79a1f38 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x556bc79c9088 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x556bc79c91d8 <line:705:13, col:34>
|         `-CallExpr 0x556bc79c91b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x556bc79c9138 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x556bc79c9190 <col:33> 'T' lvalue ParmVar 0x556bc79a1f38 'x' 'T &'
|-FunctionTemplateDecl 0x556bc79a2398 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x556bc79a2128 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc79a22f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x556bc79a2208 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x556bc79c95f0 <col:31, line:717:5>
|     |-DeclStmt 0x556bc79c9350 <line:713:9, col:23>
|     | `-VarDecl 0x556bc79c9238 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x556bc79c9328 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x556bc79c92b0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x556bc79c9308 <col:21> 'T' lvalue ParmVar 0x556bc79a2208 'x' 'T &'
|     |-IfStmt 0x556bc79c95a0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x556bc79c9448 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x556bc79c9580 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x556bc79c9520 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x556bc79c94b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|     |   | `-DeclRefExpr 0x556bc79c9490 <col:14> 'T *' lvalue Var 0x556bc79c9238 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x556bc79c9560 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x556bc79c95d8 <line:716:9, col:16>
|       `-DeclRefExpr 0x556bc79c95b8 <col:16> 'T *' lvalue Var 0x556bc79c9238 's' 'T *'
|-FunctionTemplateDecl 0x556bc79a27a8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x556bc79a23f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556bc79a2478 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556bc79a2708 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x556bc79a2558 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x556bc79a25f8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x556bc79c9900 <col:37, line:726:5>
|     |-IfStmt 0x556bc79c9890 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x556bc79c98b0 <line:723:13, col:26>
|     | | `-VarDecl 0x556bc79c9658 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x556bc79c9748 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x556bc79c96d0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x556bc79c9728 <col:25> 'T' lvalue ParmVar 0x556bc79a2558 'x' 'T &'
|     | |-DeclRefExpr 0x556bc79c9770 <col:16> 'T *' lvalue Var 0x556bc79c9658 's' 'T *'
|     | `-BinaryOperator 0x556bc79c9870 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x556bc79c9820 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x556bc79c97b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|     |   | `-DeclRefExpr 0x556bc79c9790 <col:14> 'T *' lvalue Var 0x556bc79c9658 's' 'T *'
|     |   `-DeclRefExpr 0x556bc79c9850 <col:18> 'const V' lvalue ParmVar 0x556bc79a25f8 'value' 'const V &'
|     `-ReturnStmt 0x556bc79c98f0 <line:725:9, col:17>
|       `-UnaryOperator 0x556bc79c98d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556bc79c98c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556bc79a2ba8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x556bc79a2810 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556bc79a2b08 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x556bc79a28c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a2940 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a29e8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x556bc79ca720 <col:65, line:737:5>
|     |-DeclStmt 0x556bc79c9998 <line:732:9, col:26>
|     | `-VarDecl 0x556bc79c9930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x556bc79ca6e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x556bc79ca708 <line:733:13, col:58>
|       | `-VarDecl 0x556bc79c99c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x556bc79c9ba0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x556bc79c9b70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x556bc79c9b58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x556bc79c9b38 <col:26, col:58> 'String' (CXXTemporary 0x556bc79c9b38)
|       |           `-CXXMemberCallExpr 0x556bc79c9ac8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x556bc79c9a38 <col:26> '<bound member function type>' ->find 0x556bc79c1938
|       |             | `-CXXThisExpr 0x556bc79c9a28 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x556bc79c9b00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79c9a68 <col:31> 'const char *' lvalue ParmVar 0x556bc79a28c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x556bc79c9b18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79c9a88 <col:40> 'int' lvalue ParmVar 0x556bc79a2940 'flags' 'int'
|       |             `-DeclRefExpr 0x556bc79c9aa8 <col:47> 'Args::Slot *' lvalue Var 0x556bc79c9930 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x556bc79c9c58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x556bc79c9c40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x556bc79c9c20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556bc79c9bf0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|       |       `-ImplicitCastExpr 0x556bc79c9bd8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x556bc79c9bb8 <col:20> 'String' lvalue Var 0x556bc79c99c0 'str' 'String'
|       `-CompoundStmt 0x556bc79ca6c8 <col:61, line:736:9>
|         |-DeclStmt 0x556bc79ca110 <line:734:13, col:76>
|         | `-VarDecl 0x556bc79c9ca8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x556bc79ca0e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x556bc79ca050 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x556bc79ca098 <col:60> 'T' lvalue ParmVar 0x556bc79a29e8 'variable' 'T &'
|         |     `-UnaryOperator 0x556bc79ca0c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x556bc79ca0b8 <col:71> 'Args *' this
|         `-CallExpr 0x556bc79ca698 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x556bc79ca138 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|           | `-CXXThisExpr 0x556bc79ca128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x556bc79ca658 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x556bc79ca168 <col:23> 'T *' lvalue Var 0x556bc79c9ca8 's' 'T *'
|           | `-CallExpr 0x556bc79ca618 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x556bc79ca3f0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x556bc79ca4f0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x556bc79ca510 <col:86> 'String' lvalue Var 0x556bc79c99c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x556bc79ca5c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556bc79ca550 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|           |   | `-DeclRefExpr 0x556bc79ca530 <col:92> 'T *' lvalue Var 0x556bc79c9ca8 's' 'T *'
|           |   `-UnaryOperator 0x556bc79ca600 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x556bc79ca5f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x556bc79ca678 <col:103> 'Args::Slot *' lvalue Var 0x556bc79c9930 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x556bc79a30f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x556bc79a2c18 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556bc79a2c98 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556bc79a3058 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x556bc79a2d58 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a2dd8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a2e78 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x556bc79a2f18 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x556bc79cb5c0 <col:88, line:745:5>
|     |-DeclStmt 0x556bc79ca7b8 <line:741:9, col:26>
|     | `-VarDecl 0x556bc79ca750 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556bc79ca9d8 <line:742:9, col:55>
|     | `-VarDecl 0x556bc79ca7e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x556bc79ca9c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x556bc79ca990 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x556bc79ca978 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x556bc79ca958 <col:22, col:54> 'String' (CXXTemporary 0x556bc79ca958)
|     |           `-CXXMemberCallExpr 0x556bc79ca8e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x556bc79ca858 <col:22> '<bound member function type>' ->find 0x556bc79c1938
|     |             | `-CXXThisExpr 0x556bc79ca848 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x556bc79ca920 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x556bc79ca888 <col:27> 'const char *' lvalue ParmVar 0x556bc79a2d58 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x556bc79ca938 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x556bc79ca8a8 <col:36> 'int' lvalue ParmVar 0x556bc79a2dd8 'flags' 'int'
|     |             `-DeclRefExpr 0x556bc79ca8c8 <col:43> 'Args::Slot *' lvalue Var 0x556bc79ca750 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x556bc79cadb0 <line:743:9, col:72>
|     | `-VarDecl 0x556bc79caa28 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x556bc79cad80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x556bc79cacf0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x556bc79cad38 <col:56> 'T' lvalue ParmVar 0x556bc79a2e78 'variable' 'T &'
|     |     `-UnaryOperator 0x556bc79cad68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x556bc79cad58 <col:67> 'Args *' this
|     `-CallExpr 0x556bc79cb590 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x556bc79cadd8 <col:9> '<bound member function type>' ->postparse 0x556bc79c1b48
|       | `-CXXThisExpr 0x556bc79cadc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x556bc79cb550 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x556bc79cae08 <col:19> 'T *' lvalue Var 0x556bc79caa28 's' 'T *'
|       | `-ParenExpr 0x556bc79cb530 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x556bc79cb500 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x556bc79cb4e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x556bc79cb4d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x556bc79cb4b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x556bc79cb480 <col:25> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|       |     |       `-ImplicitCastExpr 0x556bc79cb468 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x556bc79cae28 <col:25> 'String' lvalue Var 0x556bc79ca7e0 'str' 'String'
|       |     |-CallExpr 0x556bc79cb2d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x556bc79cb0b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x556bc79cb1b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x556bc79cb1d0 <col:89> 'String' lvalue Var 0x556bc79ca7e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x556bc79cb280 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x556bc79cb210 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|       |     | | `-DeclRefExpr 0x556bc79cb1f0 <col:95> 'T *' lvalue Var 0x556bc79caa28 's' 'T *'
|       |     | `-UnaryOperator 0x556bc79cb2c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x556bc79cb2b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x556bc79cb448 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x556bc79cb428 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x556bc79cb3f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x556bc79cb3a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x556bc79cb338 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|       |         | | `-DeclRefExpr 0x556bc79cb318 <col:109> 'T *' lvalue Var 0x556bc79caa28 's' 'T *'
|       |         | `-DeclRefExpr 0x556bc79cb3d8 <col:113> 'const V' lvalue ParmVar 0x556bc79a2f18 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x556bc79cb418 <col:120> 'bool' true
|       `-DeclRefExpr 0x556bc79cb570 <col:128> 'Args::Slot *' lvalue Var 0x556bc79ca750 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x556bc79a3628 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x556bc79a3170 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79a31e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79a3588 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x556bc79a32a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a3328 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a33a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79a3448 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x556bc79cc1b8 <col:75, line:754:5>
|     |-DeclStmt 0x556bc79cb668 <line:749:9, col:26>
|     | `-VarDecl 0x556bc79cb600 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x556bc79cc180 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x556bc79cc1a0 <line:750:13, col:58>
|       | `-VarDecl 0x556bc79cb690 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x556bc79cb870 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x556bc79cb840 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x556bc79cb828 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x556bc79cb808 <col:26, col:58> 'String' (CXXTemporary 0x556bc79cb808)
|       |           `-CXXMemberCallExpr 0x556bc79cb798 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x556bc79cb708 <col:26> '<bound member function type>' ->find 0x556bc79c1938
|       |             | `-CXXThisExpr 0x556bc79cb6f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x556bc79cb7d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79cb738 <col:31> 'const char *' lvalue ParmVar 0x556bc79a32a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x556bc79cb7e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79cb758 <col:40> 'int' lvalue ParmVar 0x556bc79a3328 'flags' 'int'
|       |             `-DeclRefExpr 0x556bc79cb778 <col:47> 'Args::Slot *' lvalue Var 0x556bc79cb600 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x556bc79cb928 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x556bc79cb910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x556bc79cb8f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556bc79cb8c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|       |       `-ImplicitCastExpr 0x556bc79cb8a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x556bc79cb888 <col:20> 'String' lvalue Var 0x556bc79cb690 'str' 'String'
|       `-CompoundStmt 0x556bc79cc160 <col:61, line:753:9>
|         |-DeclStmt 0x556bc79cbd00 <line:751:13, col:63>
|         | `-VarDecl 0x556bc79cb978 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x556bc79cbcd0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x556bc79cbc40 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x556bc79cbc88 <col:47> 'T' lvalue ParmVar 0x556bc79a3448 'variable' 'T &'
|         |     `-UnaryOperator 0x556bc79cbcb8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x556bc79cbca8 <col:58> 'Args *' this
|         `-CallExpr 0x556bc79cc130 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x556bc79cbd28 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|           | `-CXXThisExpr 0x556bc79cbd18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x556bc79cc0f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x556bc79cbd58 <col:23> 'T *' lvalue Var 0x556bc79cb978 's' 'T *'
|           | `-CallExpr 0x556bc79cc0b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x556bc79cbf40 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x556bc79cbf88 <col:56> 'P' lvalue ParmVar 0x556bc79a33a0 'parser' 'P'
|           |   |-DeclRefExpr 0x556bc79cbfa8 <col:64> 'String' lvalue Var 0x556bc79cb690 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x556bc79cc058 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556bc79cbfe8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|           |   | `-DeclRefExpr 0x556bc79cbfc8 <col:70> 'T *' lvalue Var 0x556bc79cb978 's' 'T *'
|           |   `-UnaryOperator 0x556bc79cc098 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x556bc79cc088 <col:74> 'Args *' this
|           `-DeclRefExpr 0x556bc79cc110 <col:81> 'Args::Slot *' lvalue Var 0x556bc79cb600 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x556bc79a3c88 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x556bc79a36a0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556bc79a3718 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x556bc79a3798 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x556bc79a3be8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x556bc79a3860 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a38e0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a3958 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79a39f8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x556bc79a3a98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x556bc79cf298 <col:98, line:762:5>
|     |-DeclStmt 0x556bc79cc250 <line:758:9, col:26>
|     | `-VarDecl 0x556bc79cc1e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556bc79cc470 <line:759:9, col:55>
|     | `-VarDecl 0x556bc79cc278 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x556bc79cc458 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x556bc79cc428 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x556bc79cc410 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x556bc79cc3f0 <col:22, col:54> 'String' (CXXTemporary 0x556bc79cc3f0)
|     |           `-CXXMemberCallExpr 0x556bc79cc380 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x556bc79cc2f0 <col:22> '<bound member function type>' ->find 0x556bc79c1938
|     |             | `-CXXThisExpr 0x556bc79cc2e0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x556bc79cc3b8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x556bc79cc320 <col:27> 'const char *' lvalue ParmVar 0x556bc79a3860 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x556bc79cc3d0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x556bc79cc340 <col:36> 'int' lvalue ParmVar 0x556bc79a38e0 'flags' 'int'
|     |             `-DeclRefExpr 0x556bc79cc360 <col:43> 'Args::Slot *' lvalue Var 0x556bc79cc1e8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x556bc79cc890 <line:760:9, col:59>
|     | `-VarDecl 0x556bc79cc4c8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x556bc79cc860 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x556bc79cc7d0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x556bc79cc818 <col:43> 'T' lvalue ParmVar 0x556bc79a39f8 'variable' 'T &'
|     |     `-UnaryOperator 0x556bc79cc848 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x556bc79cc838 <col:54> 'Args *' this
|     `-CallExpr 0x556bc79cf268 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x556bc79cc8b8 <col:9> '<bound member function type>' ->postparse 0x556bc79c1b48
|       | `-CXXThisExpr 0x556bc79cc8a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x556bc79cf228 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x556bc79cc8e8 <col:19> 'T *' lvalue Var 0x556bc79cc4c8 's' 'T *'
|       | `-ParenExpr 0x556bc79cf208 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x556bc79cf1d8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x556bc79cf1c0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x556bc79cf1a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x556bc79cf188 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x556bc79cf158 <col:25> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|       |     |       `-ImplicitCastExpr 0x556bc79cf140 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x556bc79cc908 <col:25> 'String' lvalue Var 0x556bc79cc278 'str' 'String'
|       |     |-CallExpr 0x556bc79cefb0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x556bc79cee40 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x556bc79cee88 <col:59> 'P' lvalue ParmVar 0x556bc79a3958 'parser' 'P'
|       |     | |-DeclRefExpr 0x556bc79ceea8 <col:67> 'String' lvalue Var 0x556bc79cc278 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x556bc79cef58 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x556bc79ceee8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|       |     | | `-DeclRefExpr 0x556bc79ceec8 <col:73> 'T *' lvalue Var 0x556bc79cc4c8 's' 'T *'
|       |     | `-UnaryOperator 0x556bc79cef98 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x556bc79cef88 <col:77> 'Args *' this
|       |     `-ParenExpr 0x556bc79cf120 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x556bc79cf100 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x556bc79cf0d0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x556bc79cf080 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x556bc79cf010 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|       |         | | `-DeclRefExpr 0x556bc79ceff0 <col:87> 'T *' lvalue Var 0x556bc79cc4c8 's' 'T *'
|       |         | `-DeclRefExpr 0x556bc79cf0b0 <col:91> 'const V' lvalue ParmVar 0x556bc79a3a98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x556bc79cf0f0 <col:98> 'bool' true
|       `-DeclRefExpr 0x556bc79cf248 <col:106> 'Args::Slot *' lvalue Var 0x556bc79cc1e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x556bc79abf58 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x556bc79a3d08 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79a3d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556bc79a3e08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556bc79abeb8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556bc79a3ed0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79a3f50 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79a3fc8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79a4068 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x556bc79abd60 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x556bc79d0278 <col:60, line:773:5>
|     |-DeclStmt 0x556bc79cf340 <line:767:9, col:26>
|     | `-VarDecl 0x556bc79cf2d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x556bc79d0240 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x556bc79d0260 <line:768:13, col:58>
|       | `-VarDecl 0x556bc79cf368 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x556bc79cf548 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x556bc79cf518 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x556bc79cf500 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x556bc79cf4e0 <col:26, col:58> 'String' (CXXTemporary 0x556bc79cf4e0)
|       |           `-CXXMemberCallExpr 0x556bc79cf470 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x556bc79cf3e0 <col:26> '<bound member function type>' ->find 0x556bc79c1938
|       |             | `-CXXThisExpr 0x556bc79cf3d0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x556bc79cf4a8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79cf410 <col:31> 'const char *' lvalue ParmVar 0x556bc79a3ed0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x556bc79cf4c0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79cf430 <col:40> 'int' lvalue ParmVar 0x556bc79a3f50 'flags' 'int'
|       |             `-DeclRefExpr 0x556bc79cf450 <col:47> 'Args::Slot *' lvalue Var 0x556bc79cf2d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x556bc79cf600 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x556bc79cf5e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x556bc79cf5c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556bc79cf598 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|       |       `-ImplicitCastExpr 0x556bc79cf580 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x556bc79cf560 <col:20> 'String' lvalue Var 0x556bc79cf368 'str' 'String'
|       `-CompoundStmt 0x556bc79d0218 <col:61, line:772:9>
|         |-DeclStmt 0x556bc79cf940 <line:769:13, col:66>
|         | `-VarDecl 0x556bc79cf658 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x556bc79cf910 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x556bc79cf880 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x556bc79cf8c8 <col:49> 'T1' lvalue ParmVar 0x556bc79a4068 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x556bc79cf8f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x556bc79cf8e8 <col:61> 'Args *' this
|         |-DeclStmt 0x556bc79cfcb0 <line:770:13, col:66>
|         | `-VarDecl 0x556bc79cf9c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x556bc79cfc80 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x556bc79cfbf0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x556bc79cfc38 <col:49> 'T2' lvalue ParmVar 0x556bc79abd60 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x556bc79cfc68 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x556bc79cfc58 <col:61> 'Args *' this
|         `-CallExpr 0x556bc79d01e8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x556bc79cfcd8 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|           | `-CXXThisExpr 0x556bc79cfcc8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x556bc79d01a8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x556bc79cfd48 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x556bc79cfd08 <col:23> 'T1 *' lvalue Var 0x556bc79cf658 's1' 'T1 *'
|           | | `-DeclRefExpr 0x556bc79cfd28 <col:29> 'T2 *' lvalue Var 0x556bc79cf9c8 's2' 'T2 *'
|           | `-CallExpr 0x556bc79d0160 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x556bc79cff30 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x556bc79cff78 <col:63> 'P' lvalue ParmVar 0x556bc79a3fc8 'parser' 'P'
|           |   |-DeclRefExpr 0x556bc79cff98 <col:71> 'String' lvalue Var 0x556bc79cf368 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x556bc79d0048 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556bc79cffd8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|           |   | `-DeclRefExpr 0x556bc79cffb8 <col:77> 'T1 *' lvalue Var 0x556bc79cf658 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x556bc79d0108 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556bc79d0098 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|           |   | `-DeclRefExpr 0x556bc79d0078 <col:82> 'T2 *' lvalue Var 0x556bc79cf9c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x556bc79d0148 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x556bc79d0138 <col:87> 'Args *' this
|           `-DeclRefExpr 0x556bc79d01c8 <col:94> 'Args::Slot *' lvalue Var 0x556bc79cf2d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x556bc79ac348 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x556bc79abfd8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc79ac2a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x556bc79ac090 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79ac110 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79ac188 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x556bc79d0790 <col:67, line:780:5>
|     |-DeclStmt 0x556bc79d0310 <line:777:9, col:26>
|     | `-VarDecl 0x556bc79d02a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x556bc79d0758 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x556bc79d0778 <line:778:13, col:58>
|       | `-VarDecl 0x556bc79d0338 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x556bc79d0518 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x556bc79d04e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x556bc79d04d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x556bc79d04b0 <col:26, col:58> 'String' (CXXTemporary 0x556bc79d04b0)
|       |           `-CXXMemberCallExpr 0x556bc79d0440 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x556bc79d03b0 <col:26> '<bound member function type>' ->find 0x556bc79c1938
|       |             | `-CXXThisExpr 0x556bc79d03a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x556bc79d0478 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79d03e0 <col:31> 'const char *' lvalue ParmVar 0x556bc79ac090 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x556bc79d0490 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556bc79d0400 <col:40> 'int' lvalue ParmVar 0x556bc79ac110 'flags' 'int'
|       |             `-DeclRefExpr 0x556bc79d0420 <col:47> 'Args::Slot *' lvalue Var 0x556bc79d02a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x556bc79d05d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x556bc79d05b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x556bc79d0598 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556bc79d0568 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|       |       `-ImplicitCastExpr 0x556bc79d0550 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x556bc79d0530 <col:20> 'String' lvalue Var 0x556bc79d0338 'str' 'String'
|       `-CallExpr 0x556bc79d0728 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x556bc79d05f8 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|         | `-CXXThisExpr 0x556bc79d05e8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x556bc79d06d8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x556bc79d0648 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x556bc79d0628 <col:23> 'P' lvalue ParmVar 0x556bc79ac188 'parser' 'P'
|         | |-DeclRefExpr 0x556bc79d0690 <col:36> 'String' lvalue Var 0x556bc79d0338 'str' 'String'
|         | `-UnaryOperator 0x556bc79d06c0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x556bc79d06b0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x556bc79d0708 <col:49> 'Args::Slot *' lvalue Var 0x556bc79d02a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x556bc79ac6e8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x556bc79ac3b8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556bc79ac648 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x556bc79ac470 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79ac4f0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79ac568 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x556bc79d1100 <col:71, line:792:5>
|     |-DeclStmt 0x556bc79d0828 <line:784:9, col:26>
|     | `-VarDecl 0x556bc79d07c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556bc79d08f8 <line:785:9, col:29>
|     | `-VarDecl 0x556bc79d0858 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x556bc79d08e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x556bc79d08c0 <col:28> 'int' 1
|     |-WhileStmt 0x556bc79d0fb0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x556bc79d0fd0 <line:786:16, col:61>
|     | | `-VarDecl 0x556bc79d0920 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x556bc79d0b00 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x556bc79d0ad0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x556bc79d0ab8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x556bc79d0a98 <col:29, col:61> 'String' (CXXTemporary 0x556bc79d0a98)
|     | |           `-CXXMemberCallExpr 0x556bc79d0a28 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x556bc79d0998 <col:29> '<bound member function type>' ->find 0x556bc79c1938
|     | |             | `-CXXThisExpr 0x556bc79d0988 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x556bc79d0a60 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556bc79d09c8 <col:34> 'const char *' lvalue ParmVar 0x556bc79ac470 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x556bc79d0a78 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556bc79d09e8 <col:43> 'int' lvalue ParmVar 0x556bc79ac4f0 'flags' 'int'
|     | |             `-DeclRefExpr 0x556bc79d0a08 <col:50> 'Args::Slot *' lvalue Var 0x556bc79d07c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x556bc79d0bb8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x556bc79d0ba0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x556bc79d0b80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x556bc79d0b50 <col:23> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|     | |       `-ImplicitCastExpr 0x556bc79d0b38 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x556bc79d0b18 <col:23> 'String' lvalue Var 0x556bc79d0920 'str' 'String'
|     | `-CompoundStmt 0x556bc79d0f88 <col:64, line:790:9>
|     |   |-CallExpr 0x556bc79d0d10 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x556bc79d0be0 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|     |   | | `-CXXThisExpr 0x556bc79d0bd0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x556bc79d0cc0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x556bc79d0c30 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x556bc79d0c10 <col:23> 'P' lvalue ParmVar 0x556bc79ac568 'parser' 'P'
|     |   | | |-DeclRefExpr 0x556bc79d0c78 <col:36> 'String' lvalue Var 0x556bc79d0920 'str' 'String'
|     |   | | `-UnaryOperator 0x556bc79d0ca8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x556bc79d0c98 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x556bc79d0cf0 <col:49> 'Args::Slot *' lvalue Var 0x556bc79d07c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x556bc79d0ea8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x556bc79d0d40 <col:13> 'int' lvalue Var 0x556bc79d0858 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x556bc79d0e90 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x556bc79d0e70 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x556bc79d0dd8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x556bc79d0db8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x556bc79d0da0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x556bc79d0d60 <col:28> 'int' lvalue Var 0x556bc79d0858 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x556bc79d0d80 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x556bc79d0e58 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x556bc79d0e28 <col:49> 'bool' lvalue ->_read_status 0x556bc78a4f90
|     |   |         `-ImplicitCastExpr 0x556bc79d0e08 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x556bc79d0df8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x556bc79d0f58 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x556bc79d0ec8 <col:13> 'int' lvalue ParmVar 0x556bc79ac4f0 'flags' 'int'
|     |     `-UnaryOperator 0x556bc79d0f40 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x556bc79d0f28 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x556bc79d0f08 <col:23> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x556bc79d10e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x556bc79d1018 <col:9> 'bool' lvalue ->_read_status 0x556bc78a4f90
|       | `-ImplicitCastExpr 0x556bc79d0ff8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x556bc79d0fe8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x556bc79d10c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x556bc79d10a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x556bc79d1088 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x556bc79d1048 <col:25> 'int' lvalue Var 0x556bc79d0858 'read_status' 'int'
|           `-IntegerLiteral 0x556bc79d1068 <col:40> 'int' 1
|-FunctionTemplateDecl 0x556bc79acbc8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x556bc79ac758 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79ac7d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79acb28 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x556bc79ac898 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79ac918 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79ac990 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79aca38 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x556bc79d2090 <col:84, line:805:5>
|     |-DeclStmt 0x556bc79d11a8 <line:796:9, col:26>
|     | `-VarDecl 0x556bc79d1140 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556bc79d1278 <line:797:9, col:29>
|     | `-VarDecl 0x556bc79d11d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x556bc79d1260 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x556bc79d1240 <col:28> 'int' 1
|     |-DeclStmt 0x556bc79d15b0 <line:798:9, col:71>
|     | `-VarDecl 0x556bc79d12c8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x556bc79d1580 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x556bc79d14f0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x556bc79d1538 <col:55> 'T' lvalue ParmVar 0x556bc79aca38 'variable' 'T &'
|     |     `-UnaryOperator 0x556bc79d1568 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x556bc79d1558 <col:66> 'Args *' this
|     |-WhileStmt 0x556bc79d1f40 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x556bc79d1f60 <line:799:16, col:61>
|     | | `-VarDecl 0x556bc79d15d8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x556bc79d17b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x556bc79d1788 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x556bc79d1770 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x556bc79d1750 <col:29, col:61> 'String' (CXXTemporary 0x556bc79d1750)
|     | |           `-CXXMemberCallExpr 0x556bc79d16e0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x556bc79d1650 <col:29> '<bound member function type>' ->find 0x556bc79c1938
|     | |             | `-CXXThisExpr 0x556bc79d1640 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x556bc79d1718 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556bc79d1680 <col:34> 'const char *' lvalue ParmVar 0x556bc79ac898 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x556bc79d1730 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556bc79d16a0 <col:43> 'int' lvalue ParmVar 0x556bc79ac918 'flags' 'int'
|     | |             `-DeclRefExpr 0x556bc79d16c0 <col:50> 'Args::Slot *' lvalue Var 0x556bc79d1140 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x556bc79d1870 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x556bc79d1858 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x556bc79d1838 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x556bc79d1808 <col:23> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|     | |       `-ImplicitCastExpr 0x556bc79d17f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x556bc79d17d0 <col:23> 'String' lvalue Var 0x556bc79d15d8 'str' 'String'
|     | `-CompoundStmt 0x556bc79d1f18 <col:64, line:803:9>
|     |   |-CallExpr 0x556bc79d1ca0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x556bc79d1898 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|     |   | | `-CXXThisExpr 0x556bc79d1888 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x556bc79d1c60 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x556bc79d18c8 <col:23> 'T *' lvalue Var 0x556bc79d12c8 's' 'T *'
|     |   | | `-CallExpr 0x556bc79d1c20 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x556bc79d1ab0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x556bc79d1af8 <col:56> 'P' lvalue ParmVar 0x556bc79ac990 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x556bc79d1b18 <col:64> 'String' lvalue Var 0x556bc79d15d8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x556bc79d1bc8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x556bc79d1b58 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|     |   | |   | `-DeclRefExpr 0x556bc79d1b38 <col:70> 'T *' lvalue Var 0x556bc79d12c8 's' 'T *'
|     |   | |   `-UnaryOperator 0x556bc79d1c08 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x556bc79d1bf8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x556bc79d1c80 <col:81> 'Args::Slot *' lvalue Var 0x556bc79d1140 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x556bc79d1e38 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x556bc79d1cd0 <col:13> 'int' lvalue Var 0x556bc79d11d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x556bc79d1e20 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x556bc79d1e00 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x556bc79d1d68 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x556bc79d1d48 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x556bc79d1d30 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x556bc79d1cf0 <col:28> 'int' lvalue Var 0x556bc79d11d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x556bc79d1d10 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x556bc79d1de8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x556bc79d1db8 <col:49> 'bool' lvalue ->_read_status 0x556bc78a4f90
|     |   |         `-ImplicitCastExpr 0x556bc79d1d98 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x556bc79d1d88 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x556bc79d1ee8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x556bc79d1e58 <col:13> 'int' lvalue ParmVar 0x556bc79ac918 'flags' 'int'
|     |     `-UnaryOperator 0x556bc79d1ed0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x556bc79d1eb8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x556bc79d1e98 <col:23> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x556bc79d2070 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x556bc79d1fa8 <col:9> 'bool' lvalue ->_read_status 0x556bc78a4f90
|       | `-ImplicitCastExpr 0x556bc79d1f88 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x556bc79d1f78 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x556bc79d2050 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x556bc79d2030 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x556bc79d2018 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x556bc79d1fd8 <col:25> 'int' lvalue Var 0x556bc79d11d8 'read_status' 'int'
|           `-IntegerLiteral 0x556bc79d1ff8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x556bc79ad1a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x556bc79acc40 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556bc79accb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556bc79ad108 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x556bc79acd78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556bc79acdf8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x556bc79ace70 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x556bc79acfc0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x556bc79d2e98 <col:87, line:821:5>
|     |-DeclStmt 0x556bc79d2140 <line:809:9, col:26>
|     | `-VarDecl 0x556bc79d20d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556bc79d2210 <line:810:9, col:29>
|     | `-VarDecl 0x556bc79d2170 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x556bc79d21f8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x556bc79d21d8 <col:28> 'int' 1
|     |-DeclStmt 0x556bc79d2458 <line:811:9, col:38>
|     | `-VarDecl 0x556bc79d2340 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x556bc79d2430 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x556bc79d23b8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x556bc79d2410 <col:29> 'Vector<T>' lvalue ParmVar 0x556bc79acfc0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x556bc79d2d48 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x556bc79d2d68 <line:812:16, col:61>
|     | | `-VarDecl 0x556bc79d2480 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x556bc79d2660 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x556bc79d2630 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x556bc79d2618 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x556bc79d25f8 <col:29, col:61> 'String' (CXXTemporary 0x556bc79d25f8)
|     | |           `-CXXMemberCallExpr 0x556bc79d2588 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x556bc79d24f8 <col:29> '<bound member function type>' ->find 0x556bc79c1938
|     | |             | `-CXXThisExpr 0x556bc79d24e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x556bc79d25c0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556bc79d2528 <col:34> 'const char *' lvalue ParmVar 0x556bc79acd78 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x556bc79d25d8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556bc79d2548 <col:43> 'int' lvalue ParmVar 0x556bc79acdf8 'flags' 'int'
|     | |             `-DeclRefExpr 0x556bc79d2568 <col:50> 'Args::Slot *' lvalue Var 0x556bc79d20d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x556bc79d2718 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x556bc79d2700 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x556bc79d26e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x556bc79d26b0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x556bc76f0fb8
|     | |       `-ImplicitCastExpr 0x556bc79d2698 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x556bc79d2678 <col:23> 'String' lvalue Var 0x556bc79d2480 'str' 'String'
|     | `-CompoundStmt 0x556bc79d2d10 <col:64, line:819:9>
|     |   |-DeclStmt 0x556bc79d27d8 <line:813:13, col:23>
|     |   | `-VarDecl 0x556bc79d2740 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x556bc79d27b8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x556bc79d2958 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x556bc79d2800 <col:13> '<bound member function type>' ->postparse 0x556bc79c1b48
|     |   | | `-CXXThisExpr 0x556bc79d27f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x556bc79d2900 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x556bc79d2850 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x556bc79d2830 <col:23> 'P' lvalue ParmVar 0x556bc79ace70 'parser' 'P'
|     |   | | |-DeclRefExpr 0x556bc79d2898 <col:36> 'String' lvalue Var 0x556bc79d2480 'str' 'String'
|     |   | | |-DeclRefExpr 0x556bc79d28b8 <col:41> 'T' lvalue Var 0x556bc79d2740 'sx' 'T'
|     |   | | `-UnaryOperator 0x556bc79d28e8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x556bc79d28d8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x556bc79d2938 <col:53> 'Args::Slot *' lvalue Var 0x556bc79d20d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x556bc79d2ab0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x556bc79d29e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x556bc79d29b8 <col:17> 'bool' lvalue ->_read_status 0x556bc78a4f90
|     |   | |   `-ImplicitCastExpr 0x556bc79d2998 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x556bc79d2988 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x556bc79d2a88 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x556bc79d2a20 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x556bc79d2a00 <col:17> 'Vector<T> *' lvalue Var 0x556bc79d2340 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x556bc79d2a68 <col:30> 'T' lvalue Var 0x556bc79d2740 'sx' 'T'
|     |   |-BinaryOperator 0x556bc79d2c30 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x556bc79d2ac8 <col:13> 'int' lvalue Var 0x556bc79d2170 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x556bc79d2c18 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x556bc79d2bf8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x556bc79d2b60 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x556bc79d2b40 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x556bc79d2b28 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x556bc79d2ae8 <col:28> 'int' lvalue Var 0x556bc79d2170 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x556bc79d2b08 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x556bc79d2be0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x556bc79d2bb0 <col:49> 'bool' lvalue ->_read_status 0x556bc78a4f90
|     |   |         `-ImplicitCastExpr 0x556bc79d2b90 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x556bc79d2b80 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x556bc79d2ce0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x556bc79d2c50 <col:13> 'int' lvalue ParmVar 0x556bc79acdf8 'flags' 'int'
|     |     `-UnaryOperator 0x556bc79d2cc8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x556bc79d2cb0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x556bc79d2c90 <col:23> 'const int' lvalue Var 0x556bc7990bc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x556bc79d2e78 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x556bc79d2db0 <col:9> 'bool' lvalue ->_read_status 0x556bc78a4f90
|       | `-ImplicitCastExpr 0x556bc79d2d90 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x556bc79d2d80 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x556bc79d2e58 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x556bc79d2e38 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x556bc79d2e20 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x556bc79d2de0 <col:25> 'int' lvalue Var 0x556bc79d2170 'read_status' 'int'
|           `-IntegerLiteral 0x556bc79d2e00 <col:40> 'int' 1
|-AccessSpecDecl 0x556bc79ad220 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x556bc79ad248 prev 0x556bc798eec8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x556bc79ad340 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x556bc79ad430 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x556bc79d2ed0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x556bc79ad520 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x556bc79d2ee0 <col:25, line:830:9>
| |-CXXMethodDecl 0x556bc79ad620 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x556bc79ad6d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x556bc79ad778 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x556bc79ad778
| | `-ParmVarDecl 0x556bc79ad888 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x556bc79ae048 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x556bc79ae048
|   `-ParmVarDecl 0x556bc79ae158 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x556bc79ad8f8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x556bc79ada58 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x556bc79adc50 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x556bc79adb00 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x556bc79adb78 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x556bc79d30c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x556bc79adf08 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x556bc79d2f30 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556bc79d2ef0 <col:20> 'void *' lvalue ParmVar 0x556bc79adb00 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x556bc79adf70 '_slot' 'char *'
| | | `-CXXNewExpr 0x556bc79d2fb8 <col:32, col:45> 'char *' array Function 0x556bc7514c38 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x556bc79d2fa0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x556bc79d2f70 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x556bc79adb78 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x556bc79adfd0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x556bc79d3080 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x556bc79d3040 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x556bc79adb78 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x556bc79d3140 <col:61, line:838:9>
| |-CXXDestructorDecl 0x556bc79add50 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x556bc79ad520 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x556bc79d31c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x556bc79d31a8 <line:840:13, col:22> 'void' array Function 0x556bc7514f98 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x556bc79d3190 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x556bc79d3160 <col:22> 'char *' lvalue ->_slot 0x556bc79adf70
| |         `-CXXThisExpr 0x556bc79d3150 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x556bc79ade50 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x556bc79ad620 Slot::store 'void ()' ]
| | `-CompoundStmt 0x556bc79d33b8 <col:22, line:844:9>
| |   `-CallExpr 0x556bc79d3320 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x556bc79d3308 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556bc79d32e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x556bc7620a18 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x556bc79d3358 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x556bc79d3238 <col:20> 'void *' lvalue ->_ptr 0x556bc79adf08
| |     |   `-CXXThisExpr 0x556bc79d3228 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x556bc79d3388 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x556bc79d3370 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x556bc79d3278 <col:26> 'char *' lvalue ->_slot 0x556bc79adf70
| |     |     `-CXXThisExpr 0x556bc79d3268 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x556bc79d33a0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x556bc79d32b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x556bc79adfd0
| |         `-CXXThisExpr 0x556bc79d32a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x556bc79adf08 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x556bc79adf70 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x556bc79adfd0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x556bc79ae1c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x556bc79ae1c8
| | `-ParmVarDecl 0x556bc79ae2d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x556bc79ae378 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x556bc79ae378
|   `-ParmVarDecl 0x556bc79ae488 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x556bc79ae628 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x556bc79ae4f8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x556bc79ae598 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x556bc79ae8c0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x556bc79aeab8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x556bc79ae988 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x556bc79aec38 '_ptr' 'T *'
|   | | `-ParenListExpr 0x556bc79d33f0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x556bc79d33d0 <col:20> 'T *' lvalue ParmVar 0x556bc79ae988 'ptr' 'T *'
|   | `-CompoundStmt 0x556bc79d3440 <col:25, line:854:9>
|   |-CXXMethodDecl 0x556bc79aeb88 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x556bc79ad620 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x556bc79d35f0 <col:22, line:857:9>
|   |   `-CallExpr 0x556bc79d35c0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x556bc79d3450 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x556bc76d9148 0x556bc7683478
|   |     |-CXXOperatorCallExpr 0x556bc79d3550 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x556bc79d34e0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556bc78e60f8 0x556bc78e5d18 0x556bc78e5948 0x556bc78e5568 0x556bc78e5188 0x556bc78e4db8
|   |     | `-MemberExpr 0x556bc79d34b0 <col:29> 'T *' lvalue ->_ptr 0x556bc79aec38
|   |     |   `-CXXThisExpr 0x556bc79d34a0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x556bc79d3590 <col:35> 'T' lvalue ->_slot 0x556bc79aec98
|   |       `-CXXThisExpr 0x556bc79d3580 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x556bc79aec38 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x556bc79aec98 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x556bc79aed00 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x556bc79aee00 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x556bc79aee50 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc79aede0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x556bc79aedc0 <col:31> 'int' 48
|-FieldDecl 0x556bc79aee78 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x556bc79aeed8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x556bc79aef38 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x556bc79af070 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x556bc79c11e0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x556bc79c1240 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x556bc79c12f0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x556bc79c1518 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x556bc79c1420 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x556bc79c1668 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x556bc79c15d8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x556bc79c1938 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x556bc79c1728 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x556bc79c17a8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x556bc79c1850 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x556bc79c1b48 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x556bc79c1a00 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x556bc79c1a78 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x556bc79c1c18 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x556bc79c1d68 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x556bc79c1cd0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x556bc79c20f8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x556bc79c1e28 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x556bc79c1ea8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x556bc79c1f50 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x556bc79c2008 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x556bc79c2320 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x556bc79c21d0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x556bc79c2248 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x556bc79c2638 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x556bc79c23d0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x556bc79c2598 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x556bc79c24a8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc76e1e70 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc76e1f88 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x556bc76e2018 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x556bc76e20e8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x556bc76e21d0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc76e23e8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x556bc76e2290 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e2598 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x556bc76e24a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x556bc76e26e0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x556bc76e2650 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x556bc76e2828 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x556bc76e2798 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e2970 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x556bc76e28e0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e2a38 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x556bc76e2b80 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x556bc76e2af0 <col:28> col:31 'int'
|-CXXMethodDecl 0x556bc76e2c48 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x556bc76e2d90 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x556bc76e2d00 <col:28> col:31 'int'
|-CXXMethodDecl 0x556bc76e2f08 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x556bc76e2e48 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e3050 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x556bc76e2fc0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e3118 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x556bc76e32d8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x556bc76e31c8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556bc76e3240 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e3528 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x556bc76e3398 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc76e3410 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556bc76e35d8 <col:86> "" ""
|-CXXMethodDecl 0x556bc76e3848 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x556bc76e36b8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x556bc76e3730 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e39f8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x556bc76e3908 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x556bc76e3ba8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x556bc76e3ab0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x556bc76e3e78 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x556bc76e3c60 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x556bc76e3cd8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556bc76e3d50 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e4158 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x556bc76e3f40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x556bc76e3fb8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc76e4030 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556bc76e4210 <col:115> "" ""
|-AccessSpecDecl 0x556bc76e4280 <line:84:3, col:10> col:3 private
|-FieldDecl 0x556bc76e42b8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc76e47c0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x556bc76e47c0
| `-ParmVarDecl 0x556bc76e48c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x556bc76e4968 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x556bc76e4968
| `-ParmVarDecl 0x556bc76e4a78 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x556bc771a0a8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556bc790ceb0 <col:7>
|-CXXConstructorDecl 0x556bc771a180 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x556bc771a180
| `-ParmVarDecl 0x556bc771a298 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x556bc771a308 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x556bc771a308
| `-ParmVarDecl 0x556bc771a418 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x556bc790f8b0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc78fba58 prev 0x556bc78f0c60 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc78fbb50 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x556bc78fbc40 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x556bc78fbd68 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x556bc78fbee8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x556bc78fc068 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x556bc78fc1e8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x556bc790d018 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556bc790d888 <col:11>
|-CXXDestructorDecl 0x556bc790d0f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556bc790d228 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x556bc790d228
| `-ParmVarDecl 0x556bc790d338 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x556bc790d3d8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556bc790d3d8
| `-ParmVarDecl 0x556bc790d4e8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x556bc79102a8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc79103b8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x556bc7910638 <col:11>
|   `-ReturnStmt 0x556bc7910628 <col:11>
|     `-UnaryOperator 0x556bc7910610 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556bc7910600 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x556bc7910428 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556bc7910428
  `-ParmVarDecl 0x556bc7910538 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc78fc250 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc78fc368 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x556bc78fc408 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x556bc78fc470 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x556bc78fc4d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x556bc78fc540 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x556bc78fc5a0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x556bc78fc660 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x556bc78fc6c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x556bc78fc720 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x556bc790cf28 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x556bc78fc408 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x556bc790d898 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x556bc790d8f0 <col:12>
|-CXXConstructorDecl 0x556bc790d558 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x556bc790d558
| `-ParmVarDecl 0x556bc790d668 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x556bc790d708 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x556bc790d708
| `-ParmVarDecl 0x556bc790d818 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x556bc790f990 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc78ea370 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556bc78ea488 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x556bc78ea518 <col:16, col:22> col:16 public
|-EnumDecl 0x556bc78ea540 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x556bc78ea640 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x556bc78ea720 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78ea620 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x556bc78ea600 <col:21> 'int' 28
| `-EnumConstantDecl 0x556bc78ea6d0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x556bc78ea738 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc78ea6b0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x556bc78ea690 <col:22> 'int' 64
|-CXXMethodDecl 0x556bc78eaa78 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x556bc78ea760 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc78ea7e0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x556bc78ea858 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc78ea8d0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556bc78eab38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ead38 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x556bc78eabb0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x556bc78eac28 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556bc78eade8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x556bc78eaf48 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x556bc78eae58 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556bc78eaff0 <col:72> warn_unused_result ""
|-TypedefDecl 0x556bc78eb350 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x556bc78eb2e0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x556bc78eb280 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x556bc78eb240 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x556bc73c24e0 'void'
|       |-PointerType 0x556bc766a710 'unsigned char *'
|       | `-BuiltinType 0x556bc73c25e0 'unsigned char'
|       |-TypedefType 0x556bc7466ce0 'size_t' sugar
|       | |-Typedef 0x556bc7432be0 'size_t'
|       | `-BuiltinType 0x556bc73c2640 'unsigned long'
|       `-PointerType 0x556bc73c2ce0 'void *'
|         `-BuiltinType 0x556bc73c24e0 'void'
|-CXXMethodDecl 0x556bc78eb7c8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x556bc78eb3c0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x556bc78eb438 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc78eb4d0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x556bc78eb550 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x556bc7905ec0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x556bc7905ea8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x556bc7905e70 <col:58> 'int' 0
| |-ParmVarDecl 0x556bc78eb5d0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x556bc7905ee8 <col:76> 'int' 0
| |-ParmVarDecl 0x556bc78eb650 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x556bc7905f08 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x556bc78eb898 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x556bc78eb918 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x556bc78eb9d8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x556bc78eba78 <col:20>
| `-OptimizeNoneAttr 0x556bc78ebad0 <col:30>
|-CXXMethodDecl 0x556bc78ebb48 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x556bc78ebbe8 <col:20>
| `-OptimizeNoneAttr 0x556bc78ebc40 <col:30>
|-CXXMethodDecl 0x556bc78ebcb8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x556bc78ebd58 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ebe08 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x556bc78ebea8 <col:20>
| |-OptimizeNoneAttr 0x556bc78ebf00 <col:30>
| `-WarnUnusedResultAttr 0x556bc78ebf28 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ebf80 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x556bc78ec020 <col:20>
| `-OptimizeNoneAttr 0x556bc78ec078 <col:30>
|-CXXMethodDecl 0x556bc78ec0c8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x556bc78ec168 <col:20>
| `-OptimizeNoneAttr 0x556bc78ec1c0 <col:30>
|-CXXMethodDecl 0x556bc78ec208 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x556bc78ec2a8 <col:20>
| `-OptimizeNoneAttr 0x556bc78ec300 <col:30>
|-CXXMethodDecl 0x556bc78ec348 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc78ec408 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc78ec4d0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556bc78ec598 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556bc78ec658 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc78ec778 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x556bc7905fd0 <col:54, line:99:5>
|   `-ReturnStmt 0x556bc7905fc0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x556bc7905fa8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x556bc7905f78 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x556bc78fca58
|         `-CXXThisExpr 0x556bc7905f68 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x556bc78ec918 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x556bc78ec828 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x556bc7906080 <col:67, line:103:5>
|   `-BinaryOperator 0x556bc7906060 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x556bc7905ff8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x556bc78fca58
|     | `-CXXThisExpr 0x556bc7905fe8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x556bc7906048 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x556bc7906028 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x556bc78ec828 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x556bc78eca10 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x556bc7906100 <col:33, line:107:5>
|   `-ReturnStmt 0x556bc79060f0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x556bc79060d8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x556bc79060a8 <col:16> 'void *' lvalue ->_destructor_argument 0x556bc78fcac0
|         `-CXXThisExpr 0x556bc7906098 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x556bc78ecad0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x556bc7906730 <col:25, line:113:5>
|   |-ParenExpr 0x556bc7906478 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x556bc7906448 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x556bc79061b8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x556bc7906190 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x556bc7906158 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x556bc7906128 <col:24> '<bound member function type>' ->shared 0x556bc78ebb48
|   |   |       `-ImplicitCastExpr 0x556bc7906178 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x556bc7906118 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x556bc7906218 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc79061f8 <col:42> 'int' 0
|   |   `-CallExpr 0x556bc79063a8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x556bc7906390 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7906370 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc79063e8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7906288 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x556bc7906400 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc79062b0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc7906418 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc79062e8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x556bc7906430 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7906358 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7906340 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7906308 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x556bc7906678 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x556bc79064a8 <col:2> 'unsigned char *' lvalue ->_head 0x556bc78fc860
|   | | `-CXXThisExpr 0x556bc7906498 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x556bc7906660 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x556bc7906640 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x556bc79064e8 <col:10> 'unsigned char *' lvalue ->_data 0x556bc78fc8c8
|   |     | `-CXXThisExpr 0x556bc79064d8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x556bc7906628 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x556bc7906608 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x556bc7906528 <col:18> 'unsigned char *' lvalue ->_tail 0x556bc78fc930
|   |         | `-CXXThisExpr 0x556bc7906518 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x556bc79065f0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x556bc79065d0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x556bc7906568 <col:26> 'unsigned char *' lvalue ->_end 0x556bc78fc998
|   |             | `-CXXThisExpr 0x556bc7906558 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x556bc79065b8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x556bc7906598 <col:33> 'int' 0
|   `-BinaryOperator 0x556bc7906710 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x556bc79066a8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x556bc78fca58
|     | `-CXXThisExpr 0x556bc7906698 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x556bc79066f8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x556bc79066d8 <col:16> 'int' 0
|-CXXMethodDecl 0x556bc78ecc10 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x556bc78ecb80 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78eccb8 <col:20>
| |-OptimizeNoneAttr 0x556bc78ecd10 <col:30>
| `-WarnUnusedResultAttr 0x556bc78ecd38 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ece08 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x556bc78ecd78 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78eceb0 <col:20>
| |-OptimizeNoneAttr 0x556bc78ecf08 <col:30>
| `-WarnUnusedResultAttr 0x556bc78ecf30 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ed068 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x556bc78ecf70 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556bc78ed110 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ed210 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x556bc78ed180 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78ed2b8 <col:20>
| `-OptimizeNoneAttr 0x556bc78ed310 <col:30>
|-CXXMethodDecl 0x556bc78ed3d8 <line:213:5, col:73> col:21 used put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x556bc78ed348 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556bc78ed480 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ed580 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x556bc78ed4f0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556bc78ed628 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x556bc78ed728 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x556bc78ed698 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78ed7d0 <col:20>
| `-OptimizeNoneAttr 0x556bc78ed828 <col:30>
|-CXXMethodDecl 0x556bc78ed9b8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x556bc78ed868 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x556bc78ed8e0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x556bc7905f28 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x556bc78eda68 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x556bc78edc68 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x556bc78edae0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x556bc78edb58 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc78ede78 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x556bc78edd28 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556bc78edda0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc78ee088 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x556bc78edf38 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x556bc78edfb8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x556bc7905f38 <col:39> 'int' 0
|-CXXMethodDecl 0x556bc78ee158 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x556bc78ee220 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556bc78ee2e8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x556bc78ee3a8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc78ee470 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x556bc78ee5b8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x556bc78ee528 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x556bc78ee788 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x556bc78ee678 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x556bc78ee6f0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc78ee858 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x556bc78ee918 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x556bc78ee9b8 <col:20>
| `-OptimizeNoneAttr 0x556bc78eea10 <col:30>
|-CXXMethodDecl 0x556bc78eea60 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x556bc78eeb00 <col:20>
| `-OptimizeNoneAttr 0x556bc78eeb58 <col:30>
|-CXXMethodDecl 0x556bc78eeba8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x556bc78eec68 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc78eed30 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x556bc78eedd0 <col:20>
| `-OptimizeNoneAttr 0x556bc78eee28 <col:30>
|-CXXMethodDecl 0x556bc78eef78 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x556bc78eee68 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x556bc78eeee0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc78ef0c8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x556bc78ef038 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc78ef1a0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x556bc78ef260 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x556bc78ef300 <col:20>
| `-OptimizeNoneAttr 0x556bc78ef358 <col:30>
|-CXXMethodDecl 0x556bc78ef3a8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x556bc78ef448 <col:20>
| `-OptimizeNoneAttr 0x556bc78ef4a0 <col:30>
|-CXXMethodDecl 0x556bc78ef4f0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x556bc78ef5b8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x556bc78ef658 <col:20>
| `-OptimizeNoneAttr 0x556bc78ef6b0 <col:30>
|-CXXMethodDecl 0x556bc78ef6f8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x556bc78ef818 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x556bc78ef988 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x556bc78ef8c8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x556bc78efa78 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x556bc78efb18 <col:20>
| `-OptimizeNoneAttr 0x556bc78efb70 <col:30>
|-CXXMethodDecl 0x556bc78efbc0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x556bc78efc80 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556bc78efeb8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x556bc78efd30 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x556bc78efda8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78eff68 <col:20>
| `-OptimizeNoneAttr 0x556bc78effc0 <col:30>
|-CXXMethodDecl 0x556bc78f0068 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x556bc78f0108 <col:20>
| `-OptimizeNoneAttr 0x556bc78f0160 <col:30>
|-CXXMethodDecl 0x556bc78f01b0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x556bc78f0250 <col:20>
| `-OptimizeNoneAttr 0x556bc78f02a8 <col:30>
|-CXXMethodDecl 0x556bc78f02f0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x556bc78f0390 <col:20>
| `-OptimizeNoneAttr 0x556bc78f03e8 <col:30>
|-CXXMethodDecl 0x556bc78f04e8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x556bc78f0420 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x556bc78f0590 <col:20>
| `-OptimizeNoneAttr 0x556bc78f05e8 <col:30>
|-CXXMethodDecl 0x556bc78f07a8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x556bc78f0620 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x556bc78f0698 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78f0858 <col:20>
| `-OptimizeNoneAttr 0x556bc78f08b0 <col:30>
|-CXXMethodDecl 0x556bc78f0958 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x556bc78f0a78 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x556bc78f0b98 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x556bc78f0c38 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x556bc78f0c60 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x556bc78f0d88 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x556bc78f0e28 <col:20>
| `-OptimizeNoneAttr 0x556bc78f0e80 <col:30>
|-CXXMethodDecl 0x556bc78f0f28 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x556bc78f0fc8 <col:20>
| `-OptimizeNoneAttr 0x556bc78f1020 <col:30>
|-AccessSpecDecl 0x556bc78f1048 <line:344:3, col:9> col:3 public
|-EnumDecl 0x556bc78f1070 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x556bc78f1170 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x556bc78f11c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc78f1150 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x556bc78f1130 <col:14> 'int' 48
|-CXXMethodDecl 0x556bc78f1228 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x556bc78f12c8 <col:20>
| `-OptimizeNoneAttr 0x556bc78f1320 <col:30>
|-CXXMethodDecl 0x556bc78f1398 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x556bc78f1438 <col:20>
| `-OptimizeNoneAttr 0x556bc78f1490 <col:30>
|-CXXMethodDecl 0x556bc78f1558 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x556bc78f14c8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x556bc78f16f8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x556bc78f1898 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x556bc78f17a8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x556bc78f1940 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x556bc78f1a40 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556bc78f1df0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f1a20 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x556bc78f1a00 <col:9> 'int' 0
| |-EnumConstantDecl 0x556bc78f1ad0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556bc78f1e08 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f1ab0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x556bc78f1a90 <col:14> 'int' 1
| |-EnumConstantDecl 0x556bc78f1b60 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556bc78f1e20 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f1b40 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x556bc78f1b20 <col:14> 'int' 2
| |-EnumConstantDecl 0x556bc78f1bf0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556bc78f1e38 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f1bd0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x556bc78f1bb0 <col:14> 'int' 3
| |-EnumConstantDecl 0x556bc78f1c80 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556bc78f1e50 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f1c60 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x556bc78f1c40 <col:13> 'int' 4
| |-EnumConstantDecl 0x556bc78f1d10 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556bc78f1e68 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f1cf0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x556bc78f1cd0 <col:13> 'int' 5
| `-EnumConstantDecl 0x556bc78f1da0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x556bc78f1e80 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc78f1d80 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x556bc78f1d60 <col:14> 'int' 6
|-CXXMethodDecl 0x556bc78f1ee8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x556bc78f1f88 <col:20>
| `-OptimizeNoneAttr 0x556bc78f1fe0 <col:30>
|-CXXMethodDecl 0x556bc78f20d8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x556bc78f2018 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x556bc78f2180 <col:20>
| `-OptimizeNoneAttr 0x556bc78f21d8 <col:30>
|-CXXMethodDecl 0x556bc78f2248 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x556bc78f2370 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x556bc78f24e8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x556bc78f2420 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x556bc78f25b0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x556bc78f2678 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x556bc78f27b8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x556bc78f2728 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x556bc78f2860 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x556bc78f2960 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x556bc78f2b60 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f2940 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x556bc78f2920 <col:23> 'int' 0
| |-EnumConstantDecl 0x556bc78f29f0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x556bc78f2b78 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f29d0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x556bc78f29b0 <col:45> 'int' 4
| |-EnumConstantDecl 0x556bc78f2a80 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x556bc78f2b90 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f2a60 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x556bc78f2a40 <col:24> 'int' 0
| `-EnumConstantDecl 0x556bc78f2b10 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x556bc78f2ba8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc78f2af0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x556bc78f2ad0 <col:47> 'int' 16
|-CXXMethodDecl 0x556bc78f2c08 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x556bc78f2d78 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x556bc78f2cb8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x556bc78f2e20 <col:20>
| `-OptimizeNoneAttr 0x556bc78f2e78 <col:30>
|-CXXMethodDecl 0x556bc78f2ec8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x556bc7906850 <col:18, col:36>
|   `-ReturnStmt 0x556bc7906840 <col:20, col:33>
|     `-ImplicitCastExpr 0x556bc7906828 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x556bc7906808 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x556bc79067d8 <col:27> '<bound member function type>' ->xanno 0x556bc78f0f28
|           `-CXXThisExpr 0x556bc79067c8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x556bc78f2fc0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x556bc7906960 <col:30, col:48>
|   `-ReturnStmt 0x556bc7906950 <col:32, col:45>
|     `-ImplicitCastExpr 0x556bc7906938 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x556bc7906918 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x556bc79068e8 <col:39> '<bound member function type>' ->xanno 0x556bc78f0d88
|           `-CXXThisExpr 0x556bc79068d8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x556bc78f30a8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x556bc7906af8 <col:24, col:50>
|   `-ReturnStmt 0x556bc7906ae8 <col:26, col:47>
|     `-UnaryOperator 0x556bc7906ad0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556bc7906ab0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x556bc7906a98 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556bc7906a48 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x556bc78fbd68
|         |   `-CXXMemberCallExpr 0x556bc7906a28 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x556bc79069f8 <col:34> '<bound member function type>' ->xanno 0x556bc78f0f28
|         |       `-CXXThisExpr 0x556bc79069e8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x556bc7906a78 <col:46> 'int' 0
|-CXXMethodDecl 0x556bc78f31b0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x556bc7906cc8 <col:36, col:62>
|   `-ReturnStmt 0x556bc7906cb8 <col:38, col:59>
|     `-UnaryOperator 0x556bc7906ca0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556bc7906c80 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x556bc7906c68 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556bc7906be0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x556bc78fbd68
|         |   `-CXXMemberCallExpr 0x556bc7906bc0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556bc7906b90 <col:46> '<bound member function type>' ->xanno 0x556bc78f0d88
|         |       `-CXXThisExpr 0x556bc7906b80 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x556bc7906c10 <col:58> 'int' 0
|-CXXMethodDecl 0x556bc78f32c8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x556bc7906e60 <col:26, col:53>
|   `-ReturnStmt 0x556bc7906e50 <col:28, col:50>
|     `-UnaryOperator 0x556bc7906e38 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556bc7906e18 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x556bc7906e00 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556bc7906db0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x556bc78fc068
|         |   `-CXXMemberCallExpr 0x556bc7906d90 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x556bc7906d60 <col:36> '<bound member function type>' ->xanno 0x556bc78f0f28
|         |       `-CXXThisExpr 0x556bc7906d50 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x556bc7906de0 <col:49> 'int' 0
|-CXXMethodDecl 0x556bc78f33e8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x556bc7907038 <col:38, col:65>
|   `-ReturnStmt 0x556bc7907028 <col:40, col:62>
|     `-UnaryOperator 0x556bc7907010 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556bc7906ff0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x556bc7906fd8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556bc7906f48 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x556bc78fc068
|         |   `-CXXMemberCallExpr 0x556bc7906f28 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556bc7906ef8 <col:48> '<bound member function type>' ->xanno 0x556bc78f0d88
|         |       `-CXXThisExpr 0x556bc7906ee8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x556bc7906f78 <col:61> 'int' 0
|-CXXMethodDecl 0x556bc78f3598 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x556bc78f34a0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x556bc7907708 <col:34, line:463:5>
|   |-ParenExpr 0x556bc7907550 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x556bc7907520 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7907188 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7907158 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc79070a8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7907090 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc7907050 <col:23> 'int' lvalue ParmVar 0x556bc78f34a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7907070 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7907138 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc7907108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc79070c8 <col:33> 'int' lvalue ParmVar 0x556bc78f34a0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x556bc7907120 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x556bc79070e8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x556bc79071e8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc79071c8 <col:56> 'int' 0
|   |   `-CallExpr 0x556bc7907480 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x556bc7907468 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7907448 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc79074c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc79072d8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x556bc79074d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7907308 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc79074f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc7907340 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x556bc7907508 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7907430 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7907418 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc79073d8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x556bc79076f8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x556bc79076e0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x556bc79076c0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x556bc7907690 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556bc7907640 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x556bc78fbd68
|         |   `-CXXMemberCallExpr 0x556bc7907620 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556bc79075f0 <col:9> '<bound member function type>' ->xanno 0x556bc78f0d88
|         |       `-CXXThisExpr 0x556bc79075e0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x556bc79076a8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x556bc7907670 <col:21> 'int' lvalue ParmVar 0x556bc78f34a0 'i' 'int'
|-CXXMethodDecl 0x556bc78f37e8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x556bc78f3658 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x556bc78f36d0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x556bc7907d98 <col:40, line:472:5>
|   |-ParenExpr 0x556bc7907bb0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x556bc7907b80 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7907860 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7907830 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc7907780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7907768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc7907728 <col:23> 'int' lvalue ParmVar 0x556bc78f3658 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7907748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7907810 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc79077e0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc79077a0 <col:33> 'int' lvalue ParmVar 0x556bc78f3658 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x556bc79077f8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x556bc79077c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x556bc79078c0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc79078a0 <col:56> 'int' 0
|   |   `-CallExpr 0x556bc7907ae0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x556bc7907ac8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7907aa8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc7907b20 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7907930 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x556bc7907b38 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7907960 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc7907b50 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc7907998 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x556bc7907b68 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7907a90 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7907a78 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7907a38 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x556bc7907d78 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x556bc7907d20 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x556bc7907cf0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x556bc7907ca0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x556bc78fbd68
|     | |   `-CXXMemberCallExpr 0x556bc7907c80 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x556bc7907c50 <col:2> '<bound member function type>' ->xanno 0x556bc78f0f28
|     | |       `-CXXThisExpr 0x556bc7907c40 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x556bc7907d08 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x556bc7907cd0 <col:14> 'int' lvalue ParmVar 0x556bc78f3658 'i' 'int'
|     `-ImplicitCastExpr 0x556bc7907d60 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x556bc7907d40 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x556bc78f36d0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x556bc78f39a8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x556bc78f38b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556bc7908518 <col:36, line:485:5>
|   |-ParenExpr 0x556bc7908280 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc7908250 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7907f30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7907f00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc7907e10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7907df8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc7907db8 <col:23> 'int' lvalue ParmVar 0x556bc78f38b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7907dd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7907ee0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc7907ec8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc7907e30 <col:33> 'int' lvalue ParmVar 0x556bc78f38b0 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc7907ea8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc7907e90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc7907e50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc7907e70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556bc7907f90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc7907f70 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc79081b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc7908198 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7908178 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc79081f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7908000 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556bc7908208 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7908038 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc7908220 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc7908070 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x556bc7908238 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7908160 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7908148 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7908108 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x556bc7908508 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x556bc79084f0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x556bc79084d8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556bc79084a8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x556bc7908448 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556bc7908418 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556bc7908390 <col:61, col:70> 'char const[48]' lvalue ->c 0x556bc78fbc40
|             |   `-CXXMemberCallExpr 0x556bc7908370 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556bc7908340 <col:61> '<bound member function type>' ->xanno 0x556bc78f0d88
|             |       `-CXXThisExpr 0x556bc7908330 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556bc7908430 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556bc79083c0 <col:74> 'int' lvalue ParmVar 0x556bc78f38b0 'i' 'int'
|-CXXMethodDecl 0x556bc78f3bf8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x556bc78f3a68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556bc78f3ae0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556bc7908c68 <col:42, line:500:5>
|   |-ParenExpr 0x556bc7908a00 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc79089d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc79086b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7908680 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc7908590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7908578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc7908538 <col:23> 'int' lvalue ParmVar 0x556bc78f3a68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7908558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7908660 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc7908648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc79085b0 <col:33> 'int' lvalue ParmVar 0x556bc78f3a68 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc7908628 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc7908610 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc79085d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc79085f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556bc7908710 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc79086f0 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc7908930 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc7908918 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc79088f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc7908970 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7908780 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556bc7908988 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc79087b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc79089a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc79087f0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x556bc79089b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc79088e0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc79088c8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7908888 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x556bc7908c48 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x556bc7908bf8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556bc7908bc8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x556bc7908b70 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556bc7908b40 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556bc7908af0 <col:48, col:57> 'char [48]' lvalue ->c 0x556bc78fbc40
|     |     |   `-CXXMemberCallExpr 0x556bc7908ad0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556bc7908aa0 <col:48> '<bound member function type>' ->xanno 0x556bc78f0f28
|     |     |       `-CXXThisExpr 0x556bc7908a90 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556bc7908b58 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556bc7908b20 <col:61> 'int' lvalue ParmVar 0x556bc78f3a68 'i' 'int'
|     `-ImplicitCastExpr 0x556bc7908c30 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x556bc7908c10 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x556bc78f3ae0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556bc78f3db8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x556bc78f3cc0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x556bc79093c8 <col:35, line:513:5>
|   |-ParenExpr 0x556bc79090d8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc79090a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7908e00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7908dd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc7908ce0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7908cc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc7908c88 <col:23> 'int' lvalue ParmVar 0x556bc78f3cc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7908ca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7908db0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc7908d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc7908d00 <col:33> 'int' lvalue ParmVar 0x556bc78f3cc0 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc7908d78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc7908d60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc7908d20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc7908d40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556bc7908e60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc7908e40 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc7909008 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc7908ff0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7908fd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc7909048 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7908ed0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556bc7909060 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7908f08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc7909078 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc7908f40 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x556bc7909090 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7908fb8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7908fa0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7908f60 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x556bc79093b8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x556bc79093a0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x556bc7909388 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556bc7909358 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x556bc79092d0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x556bc79092a0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556bc7909250 <col:60, col:69> 'char const[48]' lvalue ->c 0x556bc78fbc40
|             |   `-CXXMemberCallExpr 0x556bc7909230 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556bc7909200 <col:60> '<bound member function type>' ->xanno 0x556bc78f0d88
|             |       `-CXXThisExpr 0x556bc79091f0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556bc79092b8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556bc7909280 <col:73> 'int' lvalue ParmVar 0x556bc78f3cc0 'i' 'int'
|-CXXMethodDecl 0x556bc78f4008 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x556bc78f3e78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556bc78f3ef0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x556bc7909ae8 <col:41, line:528:5>
|   |-ParenExpr 0x556bc7909870 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc7909840 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7909560 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7909530 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc7909440 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7909428 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc79093e8 <col:23> 'int' lvalue ParmVar 0x556bc78f3e78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7909408 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7909510 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc79094f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc7909460 <col:33> 'int' lvalue ParmVar 0x556bc78f3e78 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc79094d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc79094c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc7909480 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc79094a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556bc79095c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc79095a0 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc79097a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc7909788 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7909768 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc79097e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7909630 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556bc79097f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7909668 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc7909810 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc79096a0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x556bc7909828 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7909750 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7909738 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc79096f8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x556bc7909ac8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x556bc7909a78 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556bc7909a48 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x556bc79099f0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556bc79099b0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556bc7909960 <col:47, col:56> 'char [48]' lvalue ->c 0x556bc78fbc40
|     |     |   `-CXXMemberCallExpr 0x556bc7909940 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556bc7909910 <col:47> '<bound member function type>' ->xanno 0x556bc78f0f28
|     |     |       `-CXXThisExpr 0x556bc7909900 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556bc79099c8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556bc7909990 <col:60> 'int' lvalue ParmVar 0x556bc78f3e78 'i' 'int'
|     `-ImplicitCastExpr 0x556bc7909ab0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x556bc7909a90 <col:65> 'int16_t':'short' lvalue ParmVar 0x556bc78f3ef0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x556bc78f41c8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x556bc78f40d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556bc790a1b8 <col:36, line:541:5>
|   |-ParenExpr 0x556bc7909f58 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc7909f28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc7909c80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc7909c50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc7909b60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc7909b48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc7909b08 <col:23> 'int' lvalue ParmVar 0x556bc78f40d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc7909b28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc7909c30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc7909c18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc7909b80 <col:33> 'int' lvalue ParmVar 0x556bc78f40d0 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc7909bf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc7909be0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc7909ba0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc7909bc0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556bc7909ce0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc7909cc0 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc7909e88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc7909e70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc7909e50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc7909ec8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7909d50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556bc7909ee0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc7909d88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc7909ef8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc7909dc0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x556bc7909f10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc7909e38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc7909e20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc7909de0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x556bc790a1a8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x556bc790a190 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x556bc790a178 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556bc790a148 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x556bc790a0f0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556bc790a0c0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556bc790a070 <col:61, col:70> 'char const[48]' lvalue ->c 0x556bc78fbc40
|             |   `-CXXMemberCallExpr 0x556bc790a050 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556bc790a020 <col:61> '<bound member function type>' ->xanno 0x556bc78f0d88
|             |       `-CXXThisExpr 0x556bc790a010 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556bc790a0d8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556bc790a0a0 <col:74> 'int' lvalue ParmVar 0x556bc78f40d0 'i' 'int'
|-CXXMethodDecl 0x556bc78f4398 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x556bc78f4288 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x556bc78f4300 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556bc78f4448 <col:20>
| `-OptimizeNoneAttr 0x556bc78f44a0 <col:30>
|-CXXMethodDecl 0x556bc78f45d8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x556bc78f44e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x556bc790a888 <col:35, line:562:5>
|   |-ParenExpr 0x556bc790a628 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc790a5f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc790a350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc790a320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc790a230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc790a218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc790a1d8 <col:23> 'int' lvalue ParmVar 0x556bc78f44e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc790a1f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc790a300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc790a2e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc790a250 <col:33> 'int' lvalue ParmVar 0x556bc78f44e0 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc790a2c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc790a2b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc790a270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc790a290 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556bc790a3b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc790a390 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc790a558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc790a540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc790a520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc790a598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790a420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556bc790a5b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790a458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc790a5c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc790a490 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x556bc790a5e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc790a508 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc790a4f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc790a4b0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x556bc790a878 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x556bc790a860 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x556bc790a848 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556bc790a818 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x556bc790a7c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x556bc790a790 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556bc790a740 <col:60, col:69> 'char const[48]' lvalue ->c 0x556bc78fbc40
|             |   `-CXXMemberCallExpr 0x556bc790a720 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556bc790a6f0 <col:60> '<bound member function type>' ->xanno 0x556bc78f0d88
|             |       `-CXXThisExpr 0x556bc790a6e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556bc790a7a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556bc790a770 <col:73> 'int' lvalue ParmVar 0x556bc78f44e0 'i' 'int'
|-CXXMethodDecl 0x556bc78f47e8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x556bc78f4698 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556bc78f4710 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x556bc790af68 <col:41, line:577:5>
|   |-ParenExpr 0x556bc790acf8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc790acc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc790aa20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc790a9f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc790a900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc790a8e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc790a8a8 <col:23> 'int' lvalue ParmVar 0x556bc78f4698 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc790a8c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc790a9d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc790a9b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc790a920 <col:33> 'int' lvalue ParmVar 0x556bc78f4698 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc790a998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc790a980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc790a940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc790a960 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556bc790aa80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc790aa60 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc790ac28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc790ac10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc790abf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc790ac68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790aaf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556bc790ac80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790ab28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc790ac98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc790ab60 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x556bc790acb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc790abd8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc790abc0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc790ab80 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x556bc790af48 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x556bc790aef8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556bc790aec8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x556bc790ae68 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556bc790ae38 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556bc790ade8 <col:47, col:56> 'char [48]' lvalue ->c 0x556bc78fbc40
|     |     |   `-CXXMemberCallExpr 0x556bc790adc8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556bc790ad98 <col:47> '<bound member function type>' ->xanno 0x556bc78f0f28
|     |     |       `-CXXThisExpr 0x556bc790ad88 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556bc790ae50 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556bc790ae18 <col:60> 'int' lvalue ParmVar 0x556bc78f4698 'i' 'int'
|     `-ImplicitCastExpr 0x556bc790af30 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x556bc790af10 <col:65> 'int32_t':'int' lvalue ParmVar 0x556bc78f4710 'x' 'int32_t':'int'
|-CXXMethodDecl 0x556bc78f49a8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x556bc78f48b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556bc790b698 <col:36, line:591:5>
|   |-ParenExpr 0x556bc790b3d8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc790b3a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc790b100 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc790b0d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc790afe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc790afc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc790af88 <col:23> 'int' lvalue ParmVar 0x556bc78f48b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc790afa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc790b0b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc790b098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc790b000 <col:33> 'int' lvalue ParmVar 0x556bc78f48b0 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc790b078 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc790b060 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc790b020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc790b040 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x556bc790b160 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc790b140 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc790b308 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc790b2f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc790b2d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc790b348 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790b1d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x556bc790b360 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790b208 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc790b378 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc790b240 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x556bc790b390 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc790b2b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc790b2a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc790b260 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x556bc790b688 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x556bc790b670 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x556bc790b658 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556bc790b628 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x556bc790b5a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556bc790b570 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556bc790b520 <col:61, col:70> 'char const[48]' lvalue ->c 0x556bc78fbc40
|             |   `-CXXMemberCallExpr 0x556bc790b500 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556bc790b4d0 <col:61> '<bound member function type>' ->xanno 0x556bc78f0d88
|             |       `-CXXThisExpr 0x556bc790b4c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556bc790b588 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556bc790b550 <col:74> 'int' lvalue ParmVar 0x556bc78f48b0 'i' 'int'
|-CXXMethodDecl 0x556bc78f4bf8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x556bc78f4a68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556bc78f4ae0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x556bc790bd78 <col:42, line:606:5>
|   |-ParenExpr 0x556bc790bb08 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x556bc790bad8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556bc790b830 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc790b800 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc790b710 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc790b6f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc790b6b8 <col:23> 'int' lvalue ParmVar 0x556bc78f4a68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc790b6d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc790b7e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556bc790b7c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc790b730 <col:33> 'int' lvalue ParmVar 0x556bc78f4a68 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc790b7a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc790b790 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc790b750 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556bc790b770 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x556bc790b890 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc790b870 <col:60> 'int' 0
|   |   `-CallExpr 0x556bc790ba38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556bc790ba20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc790ba00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc790ba78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790b900 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x556bc790ba90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790b938 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc790baa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc790b970 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x556bc790bac0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc790b9e8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc790b9d0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc790b990 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x556bc790bd58 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x556bc790bd08 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556bc790bcd8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x556bc790bc78 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556bc790bc48 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556bc790bbf8 <col:48, col:57> 'char [48]' lvalue ->c 0x556bc78fbc40
|     |     |   `-CXXMemberCallExpr 0x556bc790bbd8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556bc790bba8 <col:48> '<bound member function type>' ->xanno 0x556bc78f0f28
|     |     |       `-CXXThisExpr 0x556bc790bb98 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556bc790bc60 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556bc790bc28 <col:61> 'int' lvalue ParmVar 0x556bc78f4a68 'i' 'int'
|     `-ImplicitCastExpr 0x556bc790bd40 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x556bc790bd20 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x556bc78f4ae0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x556bc78f4d90 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x556bc78f4cc0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x556bc790c5e8 <col:33, line:620:5>
|   |-ParenExpr 0x556bc790c360 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x556bc790c330 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x556bc790bf80 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc790bf50 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc790bdf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc790bdd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc790bd98 <col:23> 'int' lvalue ParmVar 0x556bc78f4cc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc790bdb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc790bf30 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x556bc790bf18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc790be10 <col:33> 'int' lvalue ParmVar 0x556bc78f4cc0 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc790bef8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc790bee0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc790be30 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x556bc790beb8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x556bc790bea0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x556bc790be68 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x556bc790bfe0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc790bfc0 <col:79> 'int' 0
|   |   `-CallExpr 0x556bc790c290 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x556bc790c278 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc790c258 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc790c2d0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790c0c8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x556bc790c2e8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790c110 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc790c300 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc790c148 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x556bc790c318 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc790c240 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc790c228 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc790c1e8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x556bc790c5d8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x556bc790c5c0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x556bc790c5a8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556bc790c578 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x556bc790c4f0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x556bc790c4c0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556bc790c470 <col:67, col:76> 'char const[48]' lvalue ->c 0x556bc78fbc40
|             |   `-CXXMemberCallExpr 0x556bc790c450 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556bc790c420 <col:67> '<bound member function type>' ->xanno 0x556bc78f0d88
|             |       `-CXXThisExpr 0x556bc790c410 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556bc790c4d8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556bc790c4a0 <col:80> 'int' lvalue ParmVar 0x556bc78f4cc0 'i' 'int'
|-CXXMethodDecl 0x556bc78f4fa8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x556bc78f4e50 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556bc78f4ed0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x556bc790ce10 <col:45, line:635:5>
|   |-ParenExpr 0x556bc790cb58 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x556bc790cb28 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x556bc790c7f0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556bc790c7c0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556bc790c660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556bc790c648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556bc790c608 <col:23> 'int' lvalue ParmVar 0x556bc78f4e50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556bc790c628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556bc790c7a0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x556bc790c788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556bc790c680 <col:33> 'int' lvalue ParmVar 0x556bc78f4e50 'i' 'int'
|   |   |     `-BinaryOperator 0x556bc790c768 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556bc790c750 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556bc790c6a0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556bc78f1170 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x556bc790c728 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x556bc790c710 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x556bc790c6d8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x556bc790c850 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556bc790c830 <col:79> 'int' 0
|   |   `-CallExpr 0x556bc790ca88 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x556bc790ca70 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556bc790ca50 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556bc745da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556bc790cac8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790c8c0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x556bc790cae0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556bc790c908 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556bc790caf8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556bc790c940 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x556bc790cb10 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556bc790ca38 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556bc790ca20 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556bc790c9d8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x556bc790cdf0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x556bc790cd58 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556bc790cd28 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x556bc790ccc8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556bc790cc98 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556bc790cc48 <col:54, col:63> 'char [48]' lvalue ->c 0x556bc78fbc40
|     |     |   `-CXXMemberCallExpr 0x556bc790cc28 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556bc790cbf8 <col:54> '<bound member function type>' ->xanno 0x556bc78f0f28
|     |     |       `-CXXThisExpr 0x556bc790cbe8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556bc790ccb0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556bc790cc78 <col:67> 'int' lvalue ParmVar 0x556bc78f4e50 'i' 'int'
|     `-CXXConstCastExpr 0x556bc790cdc0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x556bc790cda8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x556bc790cd70 <col:91> 'const void *' lvalue ParmVar 0x556bc78f4ed0 'x' 'const void *'
|-CXXMethodDecl 0x556bc78f5078 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x556bc790ce98 <col:34, line:640:5>
|   `-ReturnStmt 0x556bc790ce88 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x556bc790ce70 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x556bc790ce40 <col:16> 'Packet *' lvalue ->_data_packet 0x556bc78fc7f8
|         `-CXXThisExpr 0x556bc790ce30 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x556bc78f51b8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x556bc78f5128 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556bc7905f58 <col:46> 'bool' true
|-CXXMethodDecl 0x556bc78f5338 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x556bc78f5270 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x556bc78f53e0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x556bc78f5b90 <line:660:22> "" ""
| |-EnumConstantDecl 0x556bc78f54e0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f54c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x556bc78f54a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x556bc78ea640 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x556bc78f5570 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c18 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5550 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x556bc78f5530 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x556bc78ea6d0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x556bc78f5600 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f55e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x556bc78f55c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x556bc78f5690 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5670 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x556bc78f5650 <col:19> 'int' 16
| |-EnumConstantDecl 0x556bc78f5720 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5700 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x556bc78f56e0 <col:21> 'int' 16
| |-EnumConstantDecl 0x556bc78f57b0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c78 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5790 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x556bc78f5770 <col:19> 'int' 32
| |-EnumConstantDecl 0x556bc78f5840 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5c90 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5820 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x556bc78f5800 <col:19> 'int' EnumConstant 0x556bc78f5690 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x556bc78f58d0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5ca8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f58b0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x556bc78f5890 <col:19> 'int' EnumConstant 0x556bc78f57b0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x556bc78f59a0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5cc0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5980 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x556bc78f5960 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x556bc78f5920 <col:23> 'int' EnumConstant 0x556bc78f58d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x556bc78f5940 <col:40> 'int' 2
| |-EnumConstantDecl 0x556bc78f5a70 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556bc78f5cd8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc78f5a50 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x556bc78f5a30 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x556bc78f59f0 <col:23> 'int' EnumConstant 0x556bc78f58d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x556bc78f5a10 <col:40> 'int' 4
| `-EnumConstantDecl 0x556bc78f5b40 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x556bc78f5cf0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556bc78f5b20 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x556bc78f5b00 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x556bc78f5ac0 <col:23> 'int' EnumConstant 0x556bc78f58d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x556bc78f5ae0 <col:40> 'int' 8
|-CXXMethodDecl 0x556bc78f5d30 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x556bc78f5dd0 <col:68> "" ""
|-CXXMethodDecl 0x556bc78f5e68 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x556bc78f5f08 <col:45> "" ""
|-CXXMethodDecl 0x556bc78f5fa0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x556bc78f6040 <col:57> "" ""
|-CXXMethodDecl 0x556bc78f60d8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x556bc78f6178 <col:45> "" ""
|-CXXMethodDecl 0x556bc78f6210 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x556bc78f62b0 <col:57> "" ""
|-CXXMethodDecl 0x556bc78f6340 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x556bc78f63e0 <col:51> "" ""
|-CXXMethodDecl 0x556bc78f6470 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x556bc78f6510 <col:63> "" ""
|-CXXMethodDecl 0x556bc78f65a0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x556bc78f6640 <col:53> "" ""
|-CXXMethodDecl 0x556bc78f66d0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x556bc78f6770 <col:65> "" ""
|-CXXMethodDecl 0x556bc78f6888 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x556bc78f67f8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x556bc78f6930 <col:61> "" ""
|-CXXMethodDecl 0x556bc78f6ac8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x556bc78f69b8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x556bc78f6a30 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x556bc78f6b78 <col:67> "" ""
|-CXXMethodDecl 0x556bc78f6c90 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x556bc78f6c00 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x556bc78f6d38 <col:63> "" ""
|-CXXMethodDecl 0x556bc78f6ed0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x556bc78f6dc0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556bc78f6e38 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x556bc78f6f80 <col:69> "" ""
|-CXXMethodDecl 0x556bc78f7098 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x556bc78f7008 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x556bc78f7140 <col:63> "" ""
|-CXXMethodDecl 0x556bc78f9818 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x556bc78f9708 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556bc78f9780 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556bc78f98c8 <col:69> "" ""
|-CXXMethodDecl 0x556bc78f99e0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x556bc78f9950 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x556bc78f9a88 <col:62> "" ""
|-CXXMethodDecl 0x556bc78f9c20 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x556bc78f9b10 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556bc78f9b88 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x556bc78f9cd0 <col:68> "" ""
|-CXXMethodDecl 0x556bc78f9de8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x556bc78f9d58 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x556bc78f9e90 <col:63> "" ""
|-CXXMethodDecl 0x556bc78fa028 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x556bc78f9f18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556bc78f9f90 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x556bc78fa0d8 <col:69> "" ""
|-CXXMethodDecl 0x556bc78fa168 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x556bc78fa208 <col:64> "" ""
|-CXXMethodDecl 0x556bc78fa298 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x556bc78fa338 <col:52> "" ""
|-CXXMethodDecl 0x556bc78fa3c8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x556bc78fa468 <col:67> "" ""
|-CXXMethodDecl 0x556bc78fa4f8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x556bc78fa598 <col:55> "" ""
|-CXXMethodDecl 0x556bc78fa6b0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x556bc78fa620 <col:32> col:35 'int'
| `-DeprecatedAttr 0x556bc78fa758 <col:58> "" ""
|-CXXMethodDecl 0x556bc78fa8f0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x556bc78fa7e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x556bc78fa858 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x556bc78fa9a0 <col:62> "" ""
|-CXXMethodDecl 0x556bc78faab8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x556bc78faa28 <col:32> col:35 'int'
| `-DeprecatedAttr 0x556bc78fab60 <col:58> "" ""
|-CXXMethodDecl 0x556bc78facf8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x556bc78fabe8 <col:33> col:36 'int'
| |-ParmVarDecl 0x556bc78fac60 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x556bc78fada8 <col:62> "" ""
|-CXXMethodDecl 0x556bc78faec0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x556bc78fae30 <col:34> col:37 'int'
| `-DeprecatedAttr 0x556bc78faf68 <col:60> "" ""
|-CXXMethodDecl 0x556bc78fb100 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x556bc78faff0 <col:34> col:37 'int'
| |-ParmVarDecl 0x556bc78fb068 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x556bc78fb1b0 <col:64> "" ""
|-CXXMethodDecl 0x556bc78fb2c8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x556bc78fb238 <col:32> col:35 'int'
| `-DeprecatedAttr 0x556bc78fb370 <col:58> "" ""
|-CXXMethodDecl 0x556bc78fb508 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x556bc78fb3f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x556bc78fb470 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x556bc78fb5b8 <col:62> "" ""
|-CXXMethodDecl 0x556bc78fb6d0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x556bc78fb640 <col:33> col:36 'int'
| `-DeprecatedAttr 0x556bc78fb778 <col:59> "" ""
|-CXXMethodDecl 0x556bc78fb910 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x556bc78fb800 <col:33> col:36 'int'
| |-ParmVarDecl 0x556bc78fb878 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556bc78fb9c0 <col:63> "" ""
|-AccessSpecDecl 0x556bc78fba30 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x556bc78fba58 prev 0x556bc78f0c60 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556bc78fbb50 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x556bc78fbc40 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x556bc78fbd68 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x556bc78fbee8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x556bc78fc068 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x556bc78fc1e8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x556bc790d018 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556bc790d888 <col:11>
| |-CXXDestructorDecl 0x556bc790d0f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x556bc790d228 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x556bc790d228
| | `-ParmVarDecl 0x556bc790d338 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x556bc790d3d8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556bc790d3d8
| | `-ParmVarDecl 0x556bc790d4e8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x556bc79102a8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556bc79103b8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x556bc7910638 <col:11>
| |   `-ReturnStmt 0x556bc7910628 <col:11>
| |     `-UnaryOperator 0x556bc7910610 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x556bc7910600 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x556bc7910428 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556bc7910428
|   `-ParmVarDecl 0x556bc7910538 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x556bc78fc250 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556bc78fc368 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x556bc78fc408 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x556bc78fc470 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x556bc78fc4d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x556bc78fc540 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x556bc78fc5a0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x556bc78fc660 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x556bc78fc6c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x556bc78fc720 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x556bc790cf28 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x556bc78fc408 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x556bc790d898 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x556bc790d8f0 <col:12>
| |-CXXConstructorDecl 0x556bc790d558 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x556bc790d558
| | `-ParmVarDecl 0x556bc790d668 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x556bc790d708 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x556bc790d708
| | `-ParmVarDecl 0x556bc790d818 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x556bc790f990 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x556bc78fc798 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x556bc78fc7f8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x556bc78fc860 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x556bc78fc8c8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x556bc78fc930 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x556bc78fc998 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x556bc78fc9f8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x556bc78fca58 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x556bc78fcac0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x556bc78fcb48 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x556bc78fc798 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x556bc790cec0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x556bc78fc9f8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x556bc790d900 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x556bc790d960 <col:21, line:755:5>
|-CXXConstructorDecl 0x556bc78fcce8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x556bc78fcc28 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x556bc78fcde0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x556bc78fcfc8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x556bc78fced0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x556bc78fd298 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x556bc78fd080 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc78fd0f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556bc78fd170 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc78fd4b8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x556bc78fd368 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x556bc78fd3e0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x556bc7905a98 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x556bc78fd578 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x556bc78fd5f0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x556bc78fd668 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x556bc7905bf0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x556bc7905b60 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc7905d38 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x556bc7905ca8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x556bc7905e30 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc790da00 prev 0x556bc78ea2c0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x556bc790db38 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x556bc790dbc8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x556bc790dc70 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x556bc790dd10 <col:20>
| `-OptimizeNoneAttr 0x556bc790dd68 <col:30>
|-CXXMethodDecl 0x556bc790ddb8 <line:781:5, col:66> col:55 used end_data 'unsigned char *() const'
| |-NoInlineAttr 0x556bc790de58 <col:20>
| `-OptimizeNoneAttr 0x556bc790deb0 <col:30>
|-CXXMethodDecl 0x556bc790df00 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x556bc790dfc8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x556bc790e090 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x556bc790e1a8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x556bc790e270 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x556bc790e310 <col:20>
| `-OptimizeNoneAttr 0x556bc790e368 <col:30>
|-CXXMethodDecl 0x556bc790e3d8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x556bc790e478 <col:20>
| `-OptimizeNoneAttr 0x556bc790e4d0 <col:30>
|-CXXMethodDecl 0x556bc790e578 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x556bc790e618 <col:20>
| `-OptimizeNoneAttr 0x556bc790e670 <col:30>
|-CXXMethodDecl 0x556bc790e6c0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x556bc790e7d8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x556bc790e8f8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x556bc790ea18 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x556bc790eae0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x556bc790eb80 <col:62> "" ""
|-AccessSpecDecl 0x556bc790ebf0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x556bc790ec50 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x556bc790f848 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x556bc790fa70 <col:29, col:31>
|-CXXMethodDecl 0x556bc790ed18 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x556bc790ee58 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x556bc790edc8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x556bc790ef50 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x556bc790fa80 <col:23, col:25>
|-CXXMethodDecl 0x556bc790f108 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x556bc790f040 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x556bc790f3d8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x556bc790f1c0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556bc790f238 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556bc790f2b0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556bc790f568 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x556bc790f4a0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x556bc790f660 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x556bc790f6c8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x556bc790f6c8
  `-ParmVarDecl 0x556bc790f7d8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc79de770 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc79de888 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x556bc79de918 <col:16, col:22> col:16 public
|-EnumDecl 0x556bc79de940 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x556bc79dea40 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x556bc79dec90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc79dea20 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x556bc79dea00 <col:21> 'int' 0
| |-EnumConstantDecl 0x556bc79dead0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x556bc79deca8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc79deab0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x556bc79dea90 <col:24> 'int' 22
| |-EnumConstantDecl 0x556bc79deb60 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x556bc79decc0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc79deb40 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x556bc79deb20 <col:24> 'int' 34
| |-EnumConstantDecl 0x556bc79debf0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x556bc79decd8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556bc79debd0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x556bc79debb0 <col:25> 'int' 95
| `-EnumConstantDecl 0x556bc79dec40 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x556bc79e0650 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556bc79e0a88 <col:7>
|-CXXConstructorDecl 0x556bc79e0758 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x556bc79e0758
| `-ParmVarDecl 0x556bc79e0868 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x556bc79e0908 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc79e0a18 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x556bc7a28a10 <col:7>
`-CXXDestructorDecl 0x556bc79e2b98 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc79ded08 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x556bc79dee68 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x556bc79deef8 <col:32, col:38> col:32 public
|-TypedefDecl 0x556bc79def30 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x556bc7516f90 'uint32_t' sugar
|   |-Typedef 0x556bc742b4c8 'uint32_t'
|   `-TypedefType 0x556bc74045a0 '__uint32_t' sugar
|     |-Typedef 0x556bc7404198 '__uint32_t'
|     `-BuiltinType 0x556bc73c2620 'unsigned int'
|-CXXConstructorDecl 0x556bc79df078 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x556bc79defa0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x556bc79e0558 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x556bc79e0a98 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x556bc79dfe10 'base' 'int'
| | `-ImplicitCastExpr 0x556bc79e05f8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x556bc79e05b8 <col:16> 'int' lvalue ParmVar 0x556bc79defa0 'b' 'int'
| `-CompoundStmt 0x556bc79e0b08 <col:19, line:1046:5>
|-CXXMethodDecl 0x556bc79df570 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x556bc79df140 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x556bc79df1c0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x556bc79df238 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x556bc79df2b8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x556bc79df378 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x556bc79df3f8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x556bc79df9c8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x556bc79df640 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x556bc79df928 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x556bc79df6e8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x556bc79df788 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x556bc79df800 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x556bc79e0578 <col:82> 'const ArgContext' lvalue Var 0x556bc79d3618 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x556bc79e1a48 <col:94, line:1067:5>
| |   |-DeclStmt 0x556bc79e0c98 <line:1054:9, col:64>
| |   | `-VarDecl 0x556bc79e0b28 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x556bc79e0c50 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x556bc79e0eb8 <line:1055:9, col:91>
| |   | `-VarDecl 0x556bc79e0cc8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x556bc79e0e90 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x556bc79e0e70 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x556bc79e0e20 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x556bc79e0e00 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x556bc79e0da8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x556bc79e0d58 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x556bc79e0d88 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x556bc79e0de8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x556bc79e0dc8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x556bc79e0e50 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x556bc79e1018 <line:1056:9, col:27>
| |   | `-VarDecl 0x556bc79e0fb0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x556bc79e1460 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x556bc79e1390 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x556bc79e1310 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x556bc78e0f78 0x556bc772a558 0x556bc772a230 0x556bc771aa00 0x556bc771a6b0 0x556bc7719fa0 0x556bc76ec910 0x556bc7679de0
| |   | | |-CallExpr 0x556bc79e1250 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x556bc79e1040 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x556bc79e10f0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x556bc79e10c0 <col:19, col:23> '<bound member function type>' .begin 0x556bc7709c08
| |   | | | |   `-DeclRefExpr 0x556bc79e10a0 <col:19> 'const String' lvalue ParmVar 0x556bc79df6e8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x556bc79e1160 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x556bc79e1130 <col:32, col:36> '<bound member function type>' .end 0x556bc7709e20
| |   | | | |   `-DeclRefExpr 0x556bc79e1110 <col:32> 'const String' lvalue ParmVar 0x556bc79df6e8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x556bc79e1180 <col:43> 'const bool' lvalue Var 0x556bc79e0b28 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x556bc79e11e8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x556bc79e11c8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x556bc79e1210 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x556bc79e0fb0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x556bc79e1230 <col:73> 'const int' lvalue Var 0x556bc79e0cc8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x556bc79e12f0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x556bc79e12c0 <col:16, col:20> '<bound member function type>' .end 0x556bc7709e20
| |   | |     `-DeclRefExpr 0x556bc79e12a0 <col:16> 'const String' lvalue ParmVar 0x556bc79df6e8 'str' 'const String &'
| |   | `-BinaryOperator 0x556bc79e1440 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x556bc79e13d8 <col:13> 'int' lvalue ->status 0x556bc79dfe78
| |   |   | `-CXXThisExpr 0x556bc79e13c8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x556bc79e1428 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x556bc79e1408 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79dead0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x556bc79e16b0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x556bc79e1598 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x556bc79e1580 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x556bc79e1568 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x556bc79e1488 <col:13> 'int' lvalue ->status 0x556bc79dfe78
| |   | | |     `-CXXThisExpr 0x556bc79e1478 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x556bc79e1548 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x556bc79e1518 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x556bc79e14c8 <col:23> 'int' lvalue ->status 0x556bc79dfe78
| |   | |   |   `-CXXThisExpr 0x556bc79e14b8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x556bc79e1530 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x556bc79e14f8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79deb60 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x556bc79e1690 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x556bc79e1630 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x556bc79e15d8 <col:13, col:18> '<bound member function type>' .error 0x556bc78a45a0
| |   |   | | `-DeclRefExpr 0x556bc79e15b8 <col:13> 'const ArgContext' lvalue ParmVar 0x556bc79df800 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x556bc79e1658 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x556bc79e1608 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x556bc79e1680 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x556bc79e1670 <col:20> 'bool' false
| |   |-DeclStmt 0x556bc79e1898 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x556bc79e1840 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x556bc79e17d0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x556bc79e19f8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x556bc79e18b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x556bc76adda8
| |   | |-DeclRefExpr 0x556bc79e18f8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x556bc79e0fb0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x556bc79e19c8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x556bc79e1940 <col:64> 'V' lvalue ParmVar 0x556bc79df788 'result' 'V &'
| |   `-ReturnStmt 0x556bc79e1a38 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x556bc79e1a28 <col:16> 'bool' true
| `-CXXMethodDecl 0x556bc7a312b8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x556bc7a2c350 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x556bc7a2c428 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x556bc7a2c490 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x556bc7a33050 <col:94, line:1067:5>
|     |-DeclStmt 0x556bc7a31ac8 <line:1054:9, col:64>
|     | `-VarDecl 0x556bc7a318e8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x556bc7a31a58 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x556bc7a31a28 <col:36, col:55> 'const bool' lvalue Var 0x556bc769cfc0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x556bc7a31ca8 <line:1055:9, col:91>
|     | `-VarDecl 0x556bc7a31ae0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x556bc7a31c28 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x556bc7a31c10 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x556bc7a31bf0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x556bc7a31bd0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x556bc7a31bb0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x556bc7a31b78 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x556bc7a31b58 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x556bc79e0d88 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x556bc7a31b98 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x556bc79e0dc8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x556bc79e0e50 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x556bc7a31e40 <line:1056:9, col:27>
|     | `-VarDecl 0x556bc7a31dd8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x556bc7a322c8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x556bc7a32270 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x556bc7a32128 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x556bc7a320f8 <col:13> '<bound member function type>' ->parse 0x556bc79df570
|     | | | | `-CXXThisExpr 0x556bc7a320e8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x556bc7a31f88 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x556bc7a31f58 <col:19, col:23> '<bound member function type>' .begin 0x556bc7709c08
|     | | | |   `-DeclRefExpr 0x556bc7a31f38 <col:19> 'const String' lvalue ParmVar 0x556bc7a2c350 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x556bc7a31ff8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x556bc7a31fc8 <col:32, col:36> '<bound member function type>' .end 0x556bc7709e20
|     | | | |   `-DeclRefExpr 0x556bc7a31fa8 <col:32> 'const String' lvalue ParmVar 0x556bc7a2c350 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x556bc7a32198 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x556bc7a32178 <col:43> 'const bool' lvalue Var 0x556bc7a318e8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x556bc7a32080 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x556bc7a32068 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x556bc7a32048 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x556bc7a321b0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x556bc7a320a8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x556bc7a31dd8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x556bc7a321e8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x556bc7a321c8 <col:73> 'const int' lvalue Var 0x556bc7a31ae0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x556bc7a32250 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x556bc7a32220 <col:16, col:20> '<bound member function type>' .end 0x556bc7709e20
|     | |     `-DeclRefExpr 0x556bc7a32200 <col:16> 'const String' lvalue ParmVar 0x556bc7a2c350 'str' 'const String &'
|     | `-BinaryOperator 0x556bc7a322a8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x556bc79e13d8 <col:13> 'int' lvalue ->status 0x556bc79dfe78
|     |   | `-CXXThisExpr 0x556bc79e13c8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x556bc7a32290 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x556bc79e1408 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79dead0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x556bc7a32440 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x556bc7a32360 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x556bc7a32348 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x556bc7a32330 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x556bc79e1488 <col:13> 'int' lvalue ->status 0x556bc79dfe78
|     | | |     `-CXXThisExpr 0x556bc79e1478 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x556bc7a32310 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x556bc7a322e0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x556bc79e14c8 <col:23> 'int' lvalue ->status 0x556bc79dfe78
|     | |   |   `-CXXThisExpr 0x556bc79e14b8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x556bc7a322f8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x556bc79e14f8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79deb60 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x556bc7a32420 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x556bc7a323d0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x556bc7a323a0 <col:13, col:18> '<bound member function type>' .error 0x556bc78a45a0
|     |   | | `-DeclRefExpr 0x556bc7a32380 <col:13> 'const ArgContext' lvalue ParmVar 0x556bc7a2c490 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x556bc7a323f8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x556bc79e1608 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x556bc7a32410 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x556bc79e1670 <col:20> 'bool' false
|     |-DeclStmt 0x556bc7a32988 <line:1064:9, col:64>
|     | `-TypedefDecl 0x556bc7a32930 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x556bc7a328e0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x556bc7a328c0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x556bc7a32850 'type'
|     |       `-ElaboratedType 0x556bc7a32800 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x556bc7a327e0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x556bc769d118 'unsigned_type'
|     |           `-BuiltinType 0x556bc73c2620 'unsigned int'
|     |-CallExpr 0x556bc7a32fe0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x556bc7a32fc8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x556bc7a32f48 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x556bc7a32e28 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x556bc76adda8 'extract_integer')
|     | |-ImplicitCastExpr 0x556bc7a33028 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x556bc7a33010 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x556bc7a329e8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x556bc7a31dd8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x556bc7a32ab8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x556bc7a32a68 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x556bc7a2c428 'result' 'unsigned int &'
|     `-ReturnStmt 0x556bc7a33040 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x556bc79e1a28 <col:16> 'bool' true
|-FunctionTemplateDecl 0x556bc79dfd88 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x556bc79dfa38 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x556bc79dfce8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x556bc79dfae8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x556bc79dfb88 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x556bc79dfc00 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x556bc79e0598 <col:71> 'const ArgContext' lvalue Var 0x556bc79d3618 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x556bc79e21b8 <col:83, line:1083:5>
| |   |-DeclStmt 0x556bc79e1b10 <line:1071:9, col:12>
| |   | `-VarDecl 0x556bc79e1aa8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x556bc79e2190 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x556bc79e1da0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x556bc79e1c28 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x556bc79e1bf0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x556bc79e1b38 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x556bc79e1b90 <col:31> 'const String' lvalue ParmVar 0x556bc79dfae8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x556bc79e1bb0 <col:36> 'V' lvalue Var 0x556bc79e1aa8 'x' 'V'
| |     | |   `-DeclRefExpr 0x556bc79e1bd0 <col:39> 'const ArgContext' lvalue ParmVar 0x556bc79dfc00 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x556bc79e1d80 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x556bc79e1d60 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x556bc79e1d48 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x556bc79e1d30 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x556bc79e1c50 <col:17> 'int' lvalue ->status 0x556bc79dfe78
| |     |     |     `-CXXThisExpr 0x556bc79e1c40 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x556bc79e1d10 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x556bc79e1ce0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x556bc79e1c90 <col:27> 'int' lvalue ->status 0x556bc79dfe78
| |     |       |   `-CXXThisExpr 0x556bc79e1c80 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x556bc79e1cf8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x556bc79e1cc0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79deb60 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x556bc79e1dd0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x556bc79e1dc0 <col:20> 'bool' false
| |     `-IfStmt 0x556bc79e2168 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x556bc79e1e70 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x556bc79e1e40 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x556bc79e1df0 <col:18> 'int' lvalue ->status 0x556bc79dfe78
| |       | |   `-CXXThisExpr 0x556bc79e1de0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x556bc79e1e58 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x556bc79e1e20 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79deb60 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x556bc79e20a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x556bc79e2050 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x556bc79e1ea0 <line:1076:13> '<bound member function type>' ->range_error 0x556bc79e0488
| |       | | | `-CXXThisExpr 0x556bc79e1e90 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x556bc79e1ed0 <col:25> 'const ArgContext' lvalue ParmVar 0x556bc79dfc00 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x556bc79e1fb0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x556bc79e2028 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x556bc79e2008 <col:43> 'V' lvalue Var 0x556bc79e1aa8 'x' 'V'
| |       | `-ReturnStmt 0x556bc79e2098 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x556bc79e2088 <col:20> 'bool' false
| |       `-CompoundStmt 0x556bc79e2148 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x556bc79e2108 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x556bc79e20c8 <col:13> 'V' lvalue ParmVar 0x556bc79dfb88 'result' 'V &'
| |         | `-DeclRefExpr 0x556bc79e20e8 <col:22> 'V' lvalue Var 0x556bc79e1aa8 'x' 'V'
| |         `-ReturnStmt 0x556bc79e2138 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x556bc79e2128 <col:20> 'bool' true
| `-CXXMethodDecl 0x556bc7a2bf38 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x556bc7a2bd10 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x556bc7a2bde8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x556bc7a2be50 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x556bc7a318c8 <col:83, line:1083:5>
|     |-DeclStmt 0x556bc7a2c1c0 <line:1071:9, col:12>
|     | `-VarDecl 0x556bc7a2c158 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x556bc7a318a0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x556bc7a31530 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x556bc7a31458 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x556bc7a31420 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x556bc7a313d8 <col:14> '<bound member function type>' ->parse_saturating 0x556bc7a312b8
|       | |   | `-CXXThisExpr 0x556bc7a313c8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x556bc7a2c230 <col:31> 'const String' lvalue ParmVar 0x556bc7a2bd10 'str' 'const String &'
|       | |   |-DeclRefExpr 0x556bc7a2c250 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x556bc7a2c158 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x556bc7a2c270 <col:39> 'const ArgContext' lvalue ParmVar 0x556bc7a2be50 'args' 'const ArgContext &'
|       | `-ParenExpr 0x556bc7a31510 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x556bc7a314f0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x556bc7a314d8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x556bc7a314c0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x556bc79e1c50 <col:17> 'int' lvalue ->status 0x556bc79dfe78
|       |     |     `-CXXThisExpr 0x556bc79e1c40 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x556bc7a314a0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x556bc7a31470 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x556bc79e1c90 <col:27> 'int' lvalue ->status 0x556bc79dfe78
|       |       |   `-CXXThisExpr 0x556bc79e1c80 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x556bc7a31488 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x556bc79e1cc0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79deb60 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x556bc7a31550 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x556bc79e1dc0 <col:20> 'bool' false
|       `-IfStmt 0x556bc7a31878 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x556bc7a31590 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x556bc7a31560 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x556bc79e1df0 <col:18> 'int' lvalue ->status 0x556bc79dfe78
|         | |   `-CXXThisExpr 0x556bc79e1de0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x556bc7a31578 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x556bc79e1e20 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x556bc79deb60 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x556bc7a317b0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x556bc7a31720 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x556bc79e1ea0 <line:1076:13> '<bound member function type>' ->range_error 0x556bc79e0488
|         | | | `-CXXThisExpr 0x556bc79e1e90 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x556bc7a315b0 <col:25> 'const ArgContext' lvalue ParmVar 0x556bc7a2be50 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x556bc7a31788 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x556bc7a31758 <col:31, col:50> 'const bool' lvalue Var 0x556bc769cfc0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x556bc7a316f8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x556bc7a316e0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x556bc7a316c8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x556bc7a316a8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x556bc7a2c158 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x556bc7a317a0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x556bc79e2088 <col:20> 'bool' false
|         `-CompoundStmt 0x556bc7a31858 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x556bc7a31828 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x556bc7a317d0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x556bc7a2bde8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x556bc7a31810 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x556bc7a317f0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x556bc7a2c158 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x556bc7a31848 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x556bc79e2128 <col:20> 'bool' true
|-FieldDecl 0x556bc79dfe10 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x556bc79dfe78 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x556bc79dfec8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x556bc79e0180 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x556bc79dff08 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x556bc79dff88 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x556bc79e0000 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x556bc79e0080 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x556bc79e0488 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x556bc79e0250 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x556bc79e02c8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x556bc79e0360 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x556bc79e2a18 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x556bc79e2a18
| `-ParmVarDecl 0x556bc79e2b28 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x556bc79e2ca8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc79e2db8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x556bc7a28a20 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x556bc7a289f0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x556bc7a289c0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x556bc7a28990 <col:7> 'IntArg' lvalue ParmVar 0x556bc79e2db8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x556bc79dfe10 'base' 'int'
| | `-ImplicitCastExpr 0x556bc7a28b18 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x556bc7a28ae8 <col:7> 'int' xvalue .base 0x556bc79dfe10
| |     `-CXXStaticCastExpr 0x556bc7a28ab8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x556bc7a28a88 <col:7> 'IntArg' lvalue ParmVar 0x556bc79e2db8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x556bc79dfe78 'status' 'int'
| | `-ImplicitCastExpr 0x556bc7a28be8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x556bc7a28bb8 <col:7> 'int' xvalue .status 0x556bc79dfe78
| |     `-CXXStaticCastExpr 0x556bc7a28b88 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x556bc7a28b58 <col:7> 'IntArg' lvalue ParmVar 0x556bc79e2db8 '' 'IntArg &&'
| `-CompoundStmt 0x556bc7a28c40 <col:7>
`-CXXDestructorDecl 0x556bc7a27b80 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556bc79e6fb0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x556bc79e7208 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x556bc7a27aa8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x556bc7a28020 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x556bc7a28000 <<invalid sloc>> 'int'
| `-CompoundStmt 0x556bc7a28090 <col:19>
|-CXXConstructorDecl 0x556bc7a27c88 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x556bc7a27c88
| `-ParmVarDecl 0x556bc7a27d98 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x556bc7a27e38 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc7a27f48 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x556bc7a28c50 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x556bc7a28970 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x556bc7a28940 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x556bc7a28910 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x556bc7a27f48 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x556bc7a28cc0 <col:19>
`-CXXDestructorDecl 0x556bc7a280d0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556bc79ec380 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556bc79ec498 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x556bc79ec528 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x556bc79ec768 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x556bc79ec560 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x556bc79ec5e0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x556bc79ec658 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x556bc79ec980 <col:81> 'const ArgContext' lvalue Var 0x556bc79d3618 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x556bc79ec8c0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x556bc79ec830 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x556bc79ecad8 <col:35, line:1261:5>
|   `-ReturnStmt 0x556bc79ecac8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x556bc79ecab0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x556bc79eca80 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x556bc79eca68 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x556bc79eca40 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x556bc79eca20 <col:16, col:24> 'String' (CXXTemporary 0x556bc79eca20)
|               `-CXXConstructExpr 0x556bc79ec9e8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x556bc79ec9d0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x556bc79ec9b0 <col:23> 'bool' lvalue ParmVar 0x556bc79ec830 'x' 'bool'
|-CXXConstructorDecl 0x556bc7a38588 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x556bc7a38660 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556bc7a38798 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x556bc7a38798
| `-ParmVarDecl 0x556bc7a388a8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x556bc7a38948 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x556bc7a38a58 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x556bc7a3ecd0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556bc79ecb18 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x556bc79ecd78 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x556bc7a38498 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556bc7a38ac8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x556bc7a38ac8
| `-ParmVarDecl 0x556bc7a38bd8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x556bc7a38c78 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556bc7a38d88 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x556bc7a3ece0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x556bc7a3ecb0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x556bc7a3ec80 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x556bc7a3ec50 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x556bc7a38d88 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x556bc7a3ed50 <col:19>
`-CXXDestructorDecl 0x556bc7a38e28 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
