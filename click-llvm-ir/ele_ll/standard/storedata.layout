
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568ff1208 prev 0x55a568fe89a8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a568ff1300 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55a568ff1390 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55a568ff1408 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55a568ff14c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55a568ff1590 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55a568ff1708 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55a568ff1640 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55a568ff17b0 <col:24>
| `-OptimizeNoneAttr 0x55a568ff1808 <col:34>
|-CXXMethodDecl 0x55a568ff1850 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55a568ff1b08 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55a568ff1900 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a568ff1978 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55a568ff19f8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55a568ff1bc0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55a568ff1bf8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55a568ff1c60 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55a568ff1ce8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55a568ff2008 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55a568ff1da0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a568ff1e18 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55a568ff1e90 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55a568ff1f10 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55a568ff2120 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55a568ff9a98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a568ff9a98
| `-ParmVarDecl 0x55a568ff9ba8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55a568ff9c48 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a568ff9c48
| `-ParmVarDecl 0x55a568ff9d58 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55a5690b4d38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568fe4220 prev 0x55a568fe3fa0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a568fe4318 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55a568fe43a8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55a568fe4408 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55a568fe44f8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55a568fe45f8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55a568fe47c8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55a568fe4678 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55a568fe46f0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55a568fe4958 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55a568fe4890 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55a568fe4a00 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55a568fe4b38 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55a568fe4a70 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55a568fe4cd8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55a568fe4c18 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55a568fe4e78 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55a568fe4db8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55a568fe4f20 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55a568fe5020 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55a568fe5100 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fe5000 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55a568fe4fe0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55a568fe50b0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55a568fe5118 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fe5090 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55a568fe5070 <col:44> 'int' 2
|-CXXMethodDecl 0x55a568fe5260 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55a568fe5148 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55a568fe51c8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55a568fe53b8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55a568fe5328 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55a568fe55f8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55a568fe5478 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55a568fe54f0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55a568fe56a8 <col:20>
| `-OptimizeNoneAttr 0x55a568fe5700 <col:30>
|-CXXMethodDecl 0x55a568fe5808 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55a568fe5740 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55a568fe58b0 <col:20>
| `-OptimizeNoneAttr 0x55a568fe5908 <col:30>
|-CXXMethodDecl 0x55a568fe5958 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55a568fe5a20 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55a568fe5b38 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55a568fe5bc0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55a568fe5c48 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55a568fe5cd0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55a568fe5d58 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55a568fe5de8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55a568fe5ea8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55a568fe5f30 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55a568fe5fb8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55a568fe6040 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55a568fe60c8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55a568fe6150 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55a568fe61e0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55a568fe62a0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55a568fe6330 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55a568fe6480 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55a568fe63e8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55a568fe6610 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55a568fe6540 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55a568fe68c0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55a568fe66c8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55a568fe6748 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55a568fe67c8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55a568fe6978 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55a568fe6a80 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a568fe6d10 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fe6a60 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55a568fe6a40 <col:33> 'int' 0
| |-EnumConstantDecl 0x55a568fe6b10 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a568fe6d28 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fe6af0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55a568fe6ad0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55a568fe6ba0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a568fe6d40 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fe6b80 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55a568fe6b60 <col:38> 'int' 90
| |-EnumConstantDecl 0x55a568fe6c30 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a568fe6d58 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fe6c10 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55a568fe6bf0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55a568fe6cc0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55a568fe6d70 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fe6ca0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55a568fe6c80 <col:32> 'int' 2000
|-CXXMethodDecl 0x55a568fe6db0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55a568fe71f0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a568fe7060 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55a568fe70d8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a568fe72c0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55a568fe7440 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55a568fe7370 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a568fe7648 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a568fe74f8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55a568fe7570 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a568fe7748 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55a568fe77e8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55a568fe78b0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a568fe7940 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55a568fe7b70 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fe7920 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55a568fe7900 <col:36> 'int' EnumConstant 0x55a568fe78b0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a568fe7990 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a568fe79e0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a568fe7a30 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a568fe7a80 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a568fe7ad0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55a568fe7b20 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55a568fe7c58 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55a568fe7b98 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55a568fe7d20 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55a568fe7de0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55a568fe7ea0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55a568fe7f60 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55a568fe8078 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55a568fe8140 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55a568fe82c0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55a568fe81f0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55a568fe83e8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55a568fe85e8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55a568fe8498 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55a568fe8518 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55a568ff5f38 <col:54, line:127:5>
|   |-ParenExpr 0x55a568ff5de8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55a568ff5db8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55a568ff5aa8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a568ff5a80 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55a568ff5a68 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55a568ff5a50 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55a568ff5a20 <col:31> 'Router *' lvalue ->_router 0x55a568ff3900
|   |   |         `-CXXThisExpr 0x55a568ff5a10 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a568ff5b08 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568ff5ae8 <col:48> 'int' 0
|   |   `-CallExpr 0x55a568ff5d18 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55a568ff5d00 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568ff5ce0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568ff5d58 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568ff5b78 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55a568ff5d70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568ff5b98 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55a568ff5d88 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568ff5bd0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55a568ff5da0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568ff5cc8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568ff5cb0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568ff5c68 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55a568ff5e80 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55a568ff5e18 <col:9> 'Router *' lvalue ->_router 0x55a568ff3900
|   | | `-CXXThisExpr 0x55a568ff5e08 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55a568ff5e68 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a568ff5e48 <col:19> 'Router *' lvalue ParmVar 0x55a568fe8498 'r' 'Router *'
|   `-BinaryOperator 0x55a568ff5f18 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55a568ff5eb0 <col:9> 'int' lvalue ->_eindex 0x55a568ff3968
|     | `-CXXThisExpr 0x55a568ff5ea0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55a568ff5f00 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a568ff5ee0 <col:19> 'int' lvalue ParmVar 0x55a568fe8518 'eindex' 'int'
|-CXXMethodDecl 0x55a568fe8770 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55a568fe86a8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55a568fe8840 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55a568fe8908 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55a568fe89a8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55a568fe8bf8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55a568fe8a70 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55a568fe8af0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55a568fe8ca8 <col:20>
| `-OptimizeNoneAttr 0x55a568fe8d00 <col:30>
|-CXXMethodDecl 0x55a568fe8e08 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a568fe8d40 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55a568fe8eb0 <col:20>
| `-OptimizeNoneAttr 0x55a568fe8f08 <col:30>
|-CXXMethodDecl 0x55a568fe8fd8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a568fe8f48 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55a568fe9080 <col:20>
| `-OptimizeNoneAttr 0x55a568fe90d8 <col:30>
|-CXXMethodDecl 0x55a568fe9268 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55a568fe9110 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55a568fe9190 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55a568fe93f8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a568fe9330 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a568fe9548 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a568fe94b8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a568fe9698 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a568fe9608 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a568fe97e8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a568fe9758 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a568fe9aa8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55a568fe98a0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55a568fe9920 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55a568fe99c8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55a568fe9b80 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55a568fe9c40 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55a568fe9f10 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a568fe9dc0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55a568fe9e38 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55a568fea038 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55a568fea210 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55a568fea0f0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55a568fea170 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55a568fea3f8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55a568fea2d8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55a568fea358 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55a568fea768 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a568fea4b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a568fea530 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a568fea5b0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a568ff5520 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568ff5500 <col:106> 'int' 0
| `-ParmVarDecl 0x55a568fea628 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a568ff5558 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a568ff5538 <col:126> 'int' 0
|-CXXMethodDecl 0x55a568feab08 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a568fea838 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a568fea8d0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a568fea950 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55a568fea9c8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a568ff5590 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a568ff5570 <col:114> 'int' 0
|-CXXMethodDecl 0x55a568feae98 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a568feabe0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55a568feac58 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a568feacd8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55a568ff55a8 <col:96> 'int' 0
| `-ParmVarDecl 0x55a568fead50 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a568ff55e8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a568ff55c8 <col:116> 'int' 0
|-CXXMethodDecl 0x55a568feb218 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a568feaf68 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a568feafe0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568feb060 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a568ff5620 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568ff5600 <col:109> 'int' 0
| `-ParmVarDecl 0x55a568feb0d8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a568ff5658 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a568ff5638 <col:129> 'int' 0
|-CXXMethodDecl 0x55a568feb598 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a568feb2e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a568feb360 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568feb3e0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55a568feb458 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a568ff5690 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a568ff5670 <col:117> 'int' 0
|-CXXMethodDecl 0x55a568feb928 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a568feb670 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568feb6e8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568feb768 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55a568ff56a8 <col:99> 'int' 0
| `-ParmVarDecl 0x55a568feb7e0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a568ff56e8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a568ff56c8 <col:119> 'int' 0
|-CXXMethodDecl 0x55a568febd48 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55a568feb9f8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a568feba78 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a568febaf0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568febb70 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a568ff5720 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568ff5700 <col:108> 'int' 0
| `-ParmVarDecl 0x55a568febbf0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55a568ff5758 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55a568ff5738 <col:141> 'int' 0
|-CXXMethodDecl 0x55a568fec168 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a568febe20 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a568febea0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a568febf18 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568febf98 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55a568fec018 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a568ff5770 <col:121> 'int' 0
|-CXXMethodDecl 0x55a568fec598 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a568fec248 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55a568fec2c8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55a568fec340 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568fec3c0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55a568ff5790 <col:98> 'int' 0
| `-ParmVarDecl 0x55a568fec440 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a568ff57b0 <col:123> 'int' 0
|-CXXMethodDecl 0x55a568fec860 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55a568fec670 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a568fec6f0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55a568fec770 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55a568ff57d0 <col:80> 'int' 0
|-EnumDecl 0x55a568fec918 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55a568feca20 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a568feccb0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568feca00 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55a568fec9e0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55a568fecab0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a568feccc8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568feca90 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55a568feca70 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a568fecb40 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a568fecce0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fecb20 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55a568fecb00 <col:44> 'int' 4
| |-EnumConstantDecl 0x55a568fecbd0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a568feccf8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fecbb0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55a568fecb90 <col:36> 'int' 7
| `-EnumConstantDecl 0x55a568fecc60 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55a568fecd10 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fecc40 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55a568fecc20 <col:34> 'int' 6
|-CXXMethodDecl 0x55a568fecfc8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55a568fecd38 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55a568fecdd8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a568fece58 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55a568feced0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55a568ff5888 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55a568ff5870 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55a568ff5858 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55a568ff5838 <col:98, col:105> 'String' (CXXTemporary 0x55a568ff5838)
|           `-CXXTemporaryObjectExpr 0x55a568ff5800 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55a568fed268 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55a568fed098 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a568fed110 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a568fed188 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a568ff5938 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a568ff5920 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a568ff5908 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a568ff58e8 <col:94, col:101> 'String' (CXXTemporary 0x55a568ff58e8)
| |         `-CXXTemporaryObjectExpr 0x55a568ff58b0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55a568ff6120 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55a568ff6098 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55a568ff6068 <col:9> '<bound member function type>' ->add_task_handlers 0x55a568fecfc8
|     | `-CXXThisExpr 0x55a568ff6058 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a568ff60d8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a568ff5fd8 <col:27> 'Task *' lvalue ParmVar 0x55a568fed098 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a568ff60f0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a568ff5ff8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55a568fed110 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55a568ff6108 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a568ff6018 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a568fecc60 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a568ff6038 <col:62> 'const String' lvalue ParmVar 0x55a568fed188 'prefix' 'const String &'
|-CXXMethodDecl 0x55a568fed478 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55a568fed330 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a568fed3a8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a568ff59e8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a568ff59d0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a568ff59b8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a568ff5998 <col:70, col:77> 'String' (CXXTemporary 0x55a568ff5998)
| |         `-CXXTemporaryObjectExpr 0x55a568ff5960 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55a568ff62f8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55a568ff6270 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55a568ff6240 <col:9> '<bound member function type>' ->add_task_handlers 0x55a568fecfc8
|     | `-CXXThisExpr 0x55a568ff6230 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a568ff62b0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a568ff61b0 <col:27> 'Task *' lvalue ParmVar 0x55a568fed330 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a568ff62c8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55a568ff61d0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55a568ff62e0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a568ff61f0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a568fecc60 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a568ff6210 <col:57> 'const String' lvalue ParmVar 0x55a568fed3a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55a568fed758 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55a568fed540 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fed5c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fed638 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55a568feda08 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55a568fed828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fed8a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fed928 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55a568fedcf8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a568fedad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fedb58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fedbd0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55a568fedfa8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55a568feddc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fede48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fedec8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55a568fee258 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55a568fee078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fee0f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fee178 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55a568fee508 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55a568fee328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fee3a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fee420 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55a568fee7b8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55a568fee5d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fee658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fee6d8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55a568feeac8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55a568fee8e0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fee960 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fee9e0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55a568feeda8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55a568feeb98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568feec18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568feecc0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55a568fef088 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55a568feee78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568feeef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568feefa0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55a568fef2f0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a568fef158 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a568fef1d8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a568fef250 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55a568fef598 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55a568fef3c0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a568fef440 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a568fef4b8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55a568fef848 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55a568fef668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fef6e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fef768 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55a568fefaf8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55a568fef918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fef998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fefa10 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55a568fefda8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55a568fefbc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fefc48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568fefcc0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55a568ff0078 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55a568fefe78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568fefef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a568feff98 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55a568ff03a8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55a568ff0148 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a568ff01c8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55a568ff0240 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55a568ff02b8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a568ff5a00 <col:93> 'bool' false
|-CXXMethodDecl 0x55a568ff0590 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a568ff0478 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55a568ff04f8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55a568ff0768 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a568ff0650 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55a568ff06d0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55a568ff0a48 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a568ff0828 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55a568ff08a0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55a568ff0920 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55a568ff0998 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55a568ff0d38 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a568ff0b18 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55a568ff0b90 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55a568ff0c10 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55a568ff0c88 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55a568ff0f70 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55a568ff0e10 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55a568ff0e90 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55a568ff1158 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55a568ff1038 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55a568ff10b8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55a568ff1208 prev 0x55a568fe89a8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a568ff1300 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55a568ff1390 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55a568ff1408 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55a568ff14c8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55a568ff1590 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55a568ff1708 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55a568ff1640 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55a568ff17b0 <col:24>
| | `-OptimizeNoneAttr 0x55a568ff1808 <col:34>
| |-CXXMethodDecl 0x55a568ff1850 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55a568ff1b08 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55a568ff1900 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a568ff1978 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55a568ff19f8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55a568ff1bc0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55a568ff1bf8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55a568ff1c60 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55a568ff1ce8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55a568ff2008 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55a568ff1da0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a568ff1e18 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55a568ff1e90 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55a568ff1f10 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55a568ff2120 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55a568ff9a98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a568ff9a98
| | `-ParmVarDecl 0x55a568ff9ba8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55a568ff9c48 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a568ff9c48
| | `-ParmVarDecl 0x55a568ff9d58 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55a5690b4d38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a568ff2198 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55a568ff2238 <col:38> "" ""
|-CXXMethodDecl 0x55a568ff22c8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55a568ff2368 <col:44> "" ""
|-AccessSpecDecl 0x55a568ff23d8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55a568ff2400 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55a568ff2500 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55a568ff2550 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568ff24e0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55a568ff24c0 <col:27> 'int' 4
|-FieldDecl 0x55a568ff2608 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55a568ff27b8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55a568ff2870 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55a568ff3900 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55a568ff3968 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55a568ff3ab8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55a568ff39f8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55a568ff3c68 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55a568ff3b78 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55a568ff3e48 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55a568ff3d28 <col:20> col:23 'int'
| `-ParmVarDecl 0x55a568ff3da8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55a568ff40f0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55a568ff3f10 <col:23> col:26 'int'
| |-ParmVarDecl 0x55a568ff3f90 <col:28> col:31 'int'
| `-ParmVarDecl 0x55a568ff4008 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55a568ff41a8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55a568ff4270 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55a568ff42c0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55a568ff4310 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55a568ff44f0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55a568ff43a0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55a568ff4418 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a568ff4798 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55a568ff45b8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55a568ff4638 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55a568ff46b0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55a568ff49b8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55a568ff4868 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55a568ff48e8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55a568ff4cf0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55a568ff4a78 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55a568ff4af8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55a568ff4b70 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55a568ff4bf0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55a568ff4ed8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a568ff4dc0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55a568ff4e40 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55a568ff5028 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55a568ff4f98 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55a568ff53a8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55a568ff50e8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55a568ff5168 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55a568ff51e0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55a568ff5260 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55a568ff54c0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StoreData
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _offset
       112 |   class String _data
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568db80c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a568db81d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55a568db8278 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55a568db82d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55a568db8338 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55a568db83e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568db86f0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a568db8808 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55a568db88b0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55a568db8918 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55a568db89a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55a568dbea40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a568dbee78 <col:12>
|-CXXConstructorDecl 0x55a568dbeb48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a568dbec58 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a568db88b0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55a568dc1400 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55a568dc13d0 <col:12> 'const char *const' lvalue .data 0x55a568db88b0
| |     `-DeclRefExpr 0x55a568dc13b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dbec58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a568db8918 'length' 'int'
| | `-ImplicitCastExpr 0x55a568dc1490 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a568dc1460 <col:12> 'const int' lvalue .length 0x55a568db8918
| |     `-DeclRefExpr 0x55a568dc1440 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dbec58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a568db89a8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55a568dc1520 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55a568dc14f0 <col:12> 'String::memo_t *const' lvalue .memo 0x55a568db89a8
| |     `-DeclRefExpr 0x55a568dc14d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dbec58 '' 'const String::rep_t &'
| `-CompoundStmt 0x55a568dc1578 <col:12>
|-CXXConstructorDecl 0x55a568dbecf8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a568dbecf8
| `-ParmVarDecl 0x55a568dbee08 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55a568dc4360 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a568dcfd78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a568dcfe88 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55a568dd03a0 <col:12>
|   |-BinaryOperator 0x55a568dd01b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a568dd0170 <col:12> 'const char *' lvalue ->data 0x55a568db88b0
|   | | `-CXXThisExpr 0x55a568dd0160 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a568dd01a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55a568dd0130 <col:12> 'const char *const' lvalue .data 0x55a568db88b0
|   |     `-DeclRefExpr 0x55a568dd0110 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dcfe88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a568dd0280 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55a568dd0238 <col:12> 'int' lvalue ->length 0x55a568db8918
|   | | `-CXXThisExpr 0x55a568dd0228 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a568dd0268 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55a568dd01f8 <col:12> 'const int' lvalue .length 0x55a568db8918
|   |     `-DeclRefExpr 0x55a568dd01d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dcfe88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a568dd0348 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55a568dd0300 <col:12> 'String::memo_t *' lvalue ->memo 0x55a568db89a8
|   | | `-CXXThisExpr 0x55a568dd02f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a568dd0330 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55a568dd02c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55a568db89a8
|   |     `-DeclRefExpr 0x55a568dd02a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dcfe88 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55a568dd0390 <col:12>
|     `-UnaryOperator 0x55a568dd0378 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a568dd0368 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55a568dcfef8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a568dcfef8
  `-ParmVarDecl 0x55a568dd0008 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568daf630 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a568daf748 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55a568daf7d8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55a568daf818 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55a568a83dc0 'const char *'
|   `-QualType 0x55a568a83311 'const char' const
|     `-BuiltinType 0x55a568a83310 'char'
|-TypedefDecl 0x55a568daf8a0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55a568daf870 'String::const_iterator' sugar
|   |-Typedef 0x55a568daf818 'const_iterator'
|   `-PointerType 0x55a568a83dc0 'const char *'
|     `-QualType 0x55a568a83311 'const char' const
|       `-BuiltinType 0x55a568a83310 'char'
|-TypedefDecl 0x55a568dafa10 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55a568daf980 'int (String::*)() const'
|   |-RecordType 0x55a568daf6c0 'String'
|   | `-CXXRecord 0x55a568daf630 'String'
|   `-ParenType 0x55a568daf920 'int () const' sugar
|     `-FunctionProtoType 0x55a568d834b0 'int () const' const cdecl
|       `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a568dafa78 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55a568bd8090 'int64_t' sugar
|   |-Typedef 0x55a568aec2d0 'int64_t'
|   `-TypedefType 0x55a568ac54d0 '__int64_t' sugar
|     |-Typedef 0x55a568ac50a8 '__int64_t'
|     `-BuiltinType 0x55a568a83390 'long'
|-TypedefDecl 0x55a568dafae0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55a568bd7fb0 'uint64_t' sugar
|   |-Typedef 0x55a568aec470 'uint64_t'
|   `-TypedefType 0x55a568ac5560 '__uint64_t' sugar
|     |-Typedef 0x55a568ac5118 '__uint64_t'
|     `-BuiltinType 0x55a568a83430 'unsigned long'
|-TypedefDecl 0x55a568dafb70 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55a568dafb40 'String::intmax_t' sugar
|   |-Typedef 0x55a568dafa78 'intmax_t'
|   `-TypedefType 0x55a568bd8090 'int64_t' sugar
|     |-Typedef 0x55a568aec2d0 'int64_t'
|     `-TypedefType 0x55a568ac54d0 '__int64_t' sugar
|       |-Typedef 0x55a568ac50a8 '__int64_t'
|       `-BuiltinType 0x55a568a83390 'long'
|-TypedefDecl 0x55a568dafc00 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55a568dafbd0 'String::uintmax_t' sugar
|   |-Typedef 0x55a568dafae0 'uintmax_t'
|   `-TypedefType 0x55a568bd7fb0 'uint64_t' sugar
|     |-Typedef 0x55a568aec470 'uint64_t'
|     `-TypedefType 0x55a568ac5560 '__uint64_t' sugar
|       |-Typedef 0x55a568ac5118 '__uint64_t'
|       `-BuiltinType 0x55a568a83430 'unsigned long'
|-CXXConstructorDecl 0x55a568dafcc0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55a568dafe68 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55a568dafda8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55a568db0018 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55a568daff58 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55a568db0170 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55a568db00e0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55a568db0388 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a568db0238 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55a568db02b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55a568db05a8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55a568db0458 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55a568db04d8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55a568db07c8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a568db0678 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55a568db06f8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55a568db09e8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55a568db0898 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55a568db0918 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55a568db0b78 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55a568db0ab0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55a568db0cf8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55a568db0c38 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55a568db0e88 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55a568db0dc0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55a568db0fe0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55a568db0f50 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55a568db1138 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55a568db10a8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55a568db1290 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55a568db1200 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55a568db1418 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55a568db1358 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55a568db15a8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55a568db14e0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55a568db1738 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55a568db1670 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55a568db18c8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55a568db1800 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55a568db19c0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55a568db1ae8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55a568db1c68 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55a568db1ba0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55a568db1db8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55a568db1d28 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55a568db1e70 <col:63> "" ""
|-CXXMethodDecl 0x55a568db1fb8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55a568db1ef8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55a568db21c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55a568db2078 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55a568db20f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55a568db23e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55a568db2290 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55a568db2310 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55a568db26c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55a568db24a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55a568db2528 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55a568dbe510 <col:55> 'int' 10
| `-ParmVarDecl 0x55a568db25a0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a568dbe530 <col:76> 'bool' true
|-CXXMethodDecl 0x55a568db29a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55a568db2790 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55a568db2810 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55a568dbe540 <col:56> 'int' 10
| `-ParmVarDecl 0x55a568db2888 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a568dbe560 <col:77> 'bool' true
|-CXXMethodDecl 0x55a568db2ab0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55a568db2b78 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55a568db2c40 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55a568db2ce0 <col:20>
| `-OptimizeNoneAttr 0x55a568db2d38 <col:30>
|-CXXConversionDecl 0x55a568db2e28 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a568db2ef8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55a568db2fb8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55a568db30a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a568db3168 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a568db32e8 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55a568db3220 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55a568db3438 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55a568db33a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55a568db3528 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55a568db35e8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55a568db3838 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55a568db36a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55a568db3720 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55a568db3a98 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55a568db3900 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55a568db3980 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55a568db3b68 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568db3d78 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55a568db3c20 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55a568db3ca0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55a568db3f98 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55a568db3e40 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55a568db3ec0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55a568db4128 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55a568db4060 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55a568db4218 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55a568db4388 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a568db42c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a568db4598 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55a568db4448 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a568db44c8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a568db47b0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55a568db4658 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55a568db46d0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55a568db4940 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55a568db4870 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a568db4b60 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55a568db4a00 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55a568db4a80 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a568db4cb0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a568db4c20 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55a568db4e88 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a568db4d70 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a568db4df0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55a568db4fd8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55a568db4f48 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55a568db51f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55a568db5090 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55a568db5110 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55a568dbe570 <col:39> 'int' 0
|-CXXMethodDecl 0x55a568db5410 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55a568db52b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55a568db5330 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55a568dbe590 <col:48> 'int' 0
|-CXXMethodDecl 0x55a568db55f0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55a568db54d0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55a568db5550 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55a568dbe5b0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55a568db56c0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55a568db5780 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55a568db5840 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55a568db5900 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55a568db59c0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55a568db5b68 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a568db5a70 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55a568db5ce8 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55a568db5c20 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55a568db5ec0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a568db5da8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55a568db6038 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55a568db5f78 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55a568db6180 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55a568db60f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a568db62d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55a568db6240 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55a568db64a8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a568db6390 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a568db6410 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a568db6688 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a568db6570 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55a568db65f0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55a568db67d8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55a568db6748 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55a568db69e8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55a568db6898 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55a568db6918 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55a568db6b48 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55a568db6ab0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a568db6ca0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55a568db6c08 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55a568db6d48 <col:57> "" ""
|-CXXMethodDecl 0x55a568db6e58 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a568db6dc8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55a568db6fa8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a568db6f18 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55a568db7128 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55a568db7060 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55a568db71f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55a568db72b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55a568db7370 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55a568db7410 <col:49> "" ""
|-CXXMethodDecl 0x55a568db74a0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55a568db7560 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55a568db7650 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55a568db7718 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55a568db77d8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55a568db7898 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55a568db7990 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55a568db7a58 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55a568db7b20 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55a568db7cf8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55a568db7bd8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55a568db7c58 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55a568db7f20 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55a568db7dc0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55a568db7e40 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55a568db8030 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55a568db8098 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55a568db80c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55a568db81d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55a568db8278 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55a568db82d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55a568db8338 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55a568db83e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55a568db8450 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55a568db8688 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55a568db86d8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568db8668 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55a568db8578 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55a568db8520 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55a568db8560 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55a568db8540 <col:32> 'int' 8
|-CXXRecordDecl 0x55a568db86f0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a568db8808 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55a568db88b0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55a568db8918 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55a568db89a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55a568dbea40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a568dbee78 <col:12>
| |-CXXConstructorDecl 0x55a568dbeb48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a568dbec58 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a568db88b0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55a568dc1400 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55a568dc13d0 <col:12> 'const char *const' lvalue .data 0x55a568db88b0
| | |     `-DeclRefExpr 0x55a568dc13b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dbec58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a568db8918 'length' 'int'
| | | `-ImplicitCastExpr 0x55a568dc1490 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55a568dc1460 <col:12> 'const int' lvalue .length 0x55a568db8918
| | |     `-DeclRefExpr 0x55a568dc1440 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dbec58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a568db89a8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55a568dc1520 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55a568dc14f0 <col:12> 'String::memo_t *const' lvalue .memo 0x55a568db89a8
| | |     `-DeclRefExpr 0x55a568dc14d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dbec58 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55a568dc1578 <col:12>
| |-CXXConstructorDecl 0x55a568dbecf8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a568dbecf8
| | `-ParmVarDecl 0x55a568dbee08 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55a568dc4360 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55a568dcfd78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a568dcfe88 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55a568dd03a0 <col:12>
| |   |-BinaryOperator 0x55a568dd01b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55a568dd0170 <col:12> 'const char *' lvalue ->data 0x55a568db88b0
| |   | | `-CXXThisExpr 0x55a568dd0160 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a568dd01a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a568dd0130 <col:12> 'const char *const' lvalue .data 0x55a568db88b0
| |   |     `-DeclRefExpr 0x55a568dd0110 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dcfe88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a568dd0280 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55a568dd0238 <col:12> 'int' lvalue ->length 0x55a568db8918
| |   | | `-CXXThisExpr 0x55a568dd0228 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a568dd0268 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55a568dd01f8 <col:12> 'const int' lvalue .length 0x55a568db8918
| |   |     `-DeclRefExpr 0x55a568dd01d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dcfe88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a568dd0348 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55a568dd0300 <col:12> 'String::memo_t *' lvalue ->memo 0x55a568db89a8
| |   | | `-CXXThisExpr 0x55a568dd02f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a568dd0330 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a568dd02c0 <col:12> 'String::memo_t *const' lvalue .memo 0x55a568db89a8
| |   |     `-DeclRefExpr 0x55a568dd02a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a568dcfe88 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55a568dd0390 <col:12>
| |     `-UnaryOperator 0x55a568dd0378 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a568dd0368 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55a568dcfef8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a568dcfef8
|   `-ParmVarDecl 0x55a568dd0008 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55a568db8a20 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55a568db8c68 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55a568db8a88 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55a568db8b08 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55a568db8b80 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55a568dbea00 <col:79, line:261:5>
|   |-BinaryOperator 0x55a568dbe678 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a568dbe610 <col:2, col:5> 'const char *' lvalue .data 0x55a568db88b0
|   | | `-MemberExpr 0x55a568dbe5e0 <col:2> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|   | |   `-CXXThisExpr 0x55a568dbe5d0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a568dbe660 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a568dbe640 <col:12> 'const char *' lvalue ParmVar 0x55a568db8a88 'data' 'const char *'
|   |-BinaryOperator 0x55a568dbe740 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55a568dbe6d8 <col:2, col:5> 'int' lvalue .length 0x55a568db8918
|   | | `-MemberExpr 0x55a568dbe6a8 <col:2> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|   | |   `-CXXThisExpr 0x55a568dbe698 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a568dbe728 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a568dbe708 <col:14> 'int' lvalue ParmVar 0x55a568db8b08 'length' 'int'
|   `-IfStmt 0x55a568dbe9e8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55a568dbe860 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a568dbe848 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55a568dbe828 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55a568dbe808 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55a568dbe7a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|     |       | `-MemberExpr 0x55a568dbe770 <col:7> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|     |       |   `-CXXThisExpr 0x55a568dbe760 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55a568dbe7f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a568dbe7d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55a568db8b80 'memo' 'String::memo_t *'
|     `-CallExpr 0x55a568dbe9c0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55a568dbe9a8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a568dbe8b0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55a568da7698 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55a568dbe918 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a568db8278
|         `-ImplicitCastExpr 0x55a568dbe900 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55a568dbe8e0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55a568db8b80 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55a568db8f18 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55a568db8d38 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55a568db8db8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55a568db8e30 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55a568db8a20 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55a568dbee88 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a568dbf018 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55a568dbef80 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55a568dbeef0 <col:2> '<bound member function type>' ->assign_memo 0x55a568db8c68
|     | `-ImplicitCastExpr 0x55a568dbefb8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55a568dbeee0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55a568dbefd0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a568dbef20 <col:14> 'const char *' lvalue ParmVar 0x55a568db8d38 'data' 'const char *'
|     |-ImplicitCastExpr 0x55a568dbefe8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a568dbef40 <col:20> 'int' lvalue ParmVar 0x55a568db8db8 'length' 'int'
|     `-ImplicitCastExpr 0x55a568dbf000 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55a568dbef60 <col:28> 'String::memo_t *' lvalue ParmVar 0x55a568db8e30 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55a568db90a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55a568db8fe8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55a568dbf270 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55a568dbf1f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55a568dbf040 <col:2> '<bound member function type>' ->assign_memo 0x55a568db8c68
|     | `-CXXThisExpr 0x55a568dbf030 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55a568dbf228 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55a568dbf0c0 <col:14, col:19> 'const char *' lvalue .data 0x55a568db88b0
|     |   `-MemberExpr 0x55a568dbf090 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55a568db8a20
|     |     `-DeclRefExpr 0x55a568dbf070 <col:14> 'const String' lvalue ParmVar 0x55a568db8fe8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55a568dbf240 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55a568dbf140 <col:25, col:30> 'int' lvalue .length 0x55a568db8918
|     |   `-MemberExpr 0x55a568dbf110 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55a568db8a20
|     |     `-DeclRefExpr 0x55a568dbf0f0 <col:25> 'const String' lvalue ParmVar 0x55a568db8fe8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55a568dbf258 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55a568dbf1c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|         `-MemberExpr 0x55a568dbf190 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55a568db8a20
|           `-DeclRefExpr 0x55a568dbf170 <col:38> 'const String' lvalue ParmVar 0x55a568db8fe8 'x' 'const String &'
|-CXXMethodDecl 0x55a568db9170 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55a568dbfc30 <col:31, line:278:5>
|   `-IfStmt 0x55a568dbfc18 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55a568dbf310 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a568dbf2f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55a568dbf2c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|     |     `-MemberExpr 0x55a568dbf298 <col:6> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|     |       `-CXXThisExpr 0x55a568dbf288 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55a568dbfbf0 <col:15, line:277:2>
|       |-ParenExpr 0x55a568dbf7c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55a568dbf790 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55a568dbf420 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55a568dbf408 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55a568dbf3f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55a568dbf3b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a568db8278
|       |   |       `-ImplicitCastExpr 0x55a568dbf398 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55a568dbf368 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|       |   |           `-MemberExpr 0x55a568dbf338 <col:27> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|       |   |             `-CXXThisExpr 0x55a568dbf328 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55a568dbf480 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55a568dbf460 <col:54> 'int' 0
|       |   `-CallExpr 0x55a568dbf6f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55a568dbf6d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55a568dbf658 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55a568dbf730 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a568dbf568 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55a568dbf748 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a568dbf598 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55a568dbf760 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55a568dbf5d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55a568dbf778 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55a568dbf640 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55a568dbf628 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55a568dbf5f0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55a568dbfb10 <line:274:6, line:275:22>
|       | |-CallExpr 0x55a568dbf9d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55a568dbf9b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55a568dbf930 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55a568da8ae0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55a568dbf900 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a568db8278
|       | |   `-ImplicitCastExpr 0x55a568dbf8e8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55a568dbf8b8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|       | |       `-MemberExpr 0x55a568dbf888 <col:40> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|       | |         `-CXXThisExpr 0x55a568dbf878 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55a568dbfad0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55a568dbfab8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55a568dbf9f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55a568dbd950 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55a568dbfaf8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55a568dbfa58 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|       |       `-MemberExpr 0x55a568dbfa28 <col:15> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|       |         `-CXXThisExpr 0x55a568dbfa18 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55a568dbfbd0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55a568dbfb68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a568db89a8
|         | `-MemberExpr 0x55a568dbfb38 <col:6> 'String::rep_t' lvalue ->_r 0x55a568db8a20
|         |   `-CXXThisExpr 0x55a568dbfb28 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55a568dbfbb8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55a568dbfb98 <col:16> 'int' 0
|-CXXMethodDecl 0x55a568db9408 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55a568db9228 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a568db92a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a568db9320 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55a568db94e0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55a568db9730 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55a568db9598 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a568db9618 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a568db9690 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a568db9918 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55a568db9800 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55a568db9880 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55a568db9a18 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55a568dbfd08 <col:41, line:286:5>
|   `-ReturnStmt 0x55a568dbfcf8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55a568dbfcc8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55a568dbfc90 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55a568dbfc78 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55a568dbfc58 <col:46> 'int' 1
|-CXXMethodDecl 0x55a568db9cb8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55a568db9ad0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55a568db9b50 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55a568db9bd0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55a568dbd950 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55a568db9d80 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a568dbda20 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55a568dbdbf0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a568dbdad8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a568dbdb58 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55a568dbdcb0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55a568dbdd78 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55a568dbde78 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55a568dbdef0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55a568dbdf68 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55a568dbdfd0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55a568dbe0d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55a568dbe120 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568dbe0b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55a568dbe090 <col:22> 'int' 14
|-CXXMethodDecl 0x55a568dbe338 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55a568dbe150 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55a568dbe1d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55a568dbe250 <col:43> col:46 'int'
|-FriendDecl 0x55a568dbe440 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55a568dbe4d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568ffcc08 <../elements/standard/storedata.hh:17:1, line:32:1> line:17:7 class StoreData definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55a568ffcd68 <col:1, col:7> col:7 implicit referenced class StoreData
|-AccessSpecDecl 0x55a568ffcdf8 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x55a568ffce80 <line:19:5, col:15> col:5 StoreData 'void ()'
|-CXXMethodDecl 0x55a568ffcf80 <line:21:5, col:58> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55a568fe5958 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55a568ffdde0 <col:36, col:58>
|   `-ReturnStmt 0x55a568ffddd0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55a568ffddb8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55a568ffdd90 <col:45> 'const char [10]' lvalue "StoreData"
|-CXXMethodDecl 0x55a568ffd048 <line:22:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55a568fe5a20 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55a568ffde40 <col:36, col:56>
|   `-ReturnStmt 0x55a568ffde30 <col:38, col:45>
|     `-ImplicitCastExpr 0x55a568ffde18 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55a568ffddf8 <col:45> 'const char []' lvalue Var 0x55a568fe5cd0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55a568ffd320 <line:23:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55a568fe71f0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55a568ffd1d0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55a568ffd248 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55a568ffd470 <line:25:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55a568fe4b38 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55a568ffd3e0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55a568ffd518 <line:27:3, col:10> col:3 private
|-FieldDecl 0x55a568ffd558 <line:29:5, col:14> col:14 _offset 'unsigned int'
|-FieldDecl 0x55a568ffd5b8 <line:30:5, col:12> col:12 _data 'String'
|-CXXConstructorDecl 0x55a568ffd638 <line:17:7> col:7 implicit StoreData 'void (const StoreData &)' inline default_delete noexcept-unevaluated 0x55a568ffd638
| `-ParmVarDecl 0x55a568ffd748 <col:7> col:7 'const StoreData &'
|-CXXConstructorDecl 0x55a568ffd7e8 <col:7> col:7 implicit StoreData 'void (StoreData &&)' inline default_delete noexcept-unevaluated 0x55a568ffd7e8
| `-ParmVarDecl 0x55a568ffd8f8 <col:7> col:7 'StoreData &&'
|-CXXMethodDecl 0x55a568ffd998 <col:7> col:7 implicit operator= 'StoreData &(const StoreData &)' inline default_delete noexcept-unevaluated 0x55a568ffd998
| `-ParmVarDecl 0x55a568ffdaa8 <col:7> col:7 'const StoreData &'
|-CXXMethodDecl 0x55a568ffdb18 <col:7> col:7 implicit operator= 'StoreData &(StoreData &&)' inline default_delete noexcept-unevaluated 0x55a568ffdb18
| `-ParmVarDecl 0x55a568ffdc28 <col:7> col:7 'StoreData &&'
`-CXXDestructorDecl 0x55a568ffdcb0 <col:7> col:7 implicit ~StoreData 'void ()' inline default noexcept-unevaluated 0x55a568ffdcb0
  `-Overrides: [ 0x55a568fe44f8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.StoreData = type { %class.Element.base, i32, %class.String }
  NonVirtualBaseLLVMType:%class.StoreData = type { %class.Element.base, i32, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a568e801c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55a568e80398 prev 0x55a568e801c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a568e80428 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a568e80450 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a568e81db0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55a568e81d60 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55a568e81d40 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55a568e80668 'type'
|     `-SubstTemplateTypeParmType 0x55a568e80630 'String' sugar
|       |-TemplateTypeParmType 0x55a568d72ed0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d72e80 'T'
|       `-RecordType 0x55a568daf6c0 'String'
|         `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a568e81e68 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55a568e81e30 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55a568e81e10 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a568e81db0 'type'
|     `-ElaboratedType 0x55a568e81d60 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55a568e81d40 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55a568e80668 'type'
|         `-SubstTemplateTypeParmType 0x55a568e80630 'String' sugar
|           |-TemplateTypeParmType 0x55a568d72ed0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a568d72e80 'T'
|           `-RecordType 0x55a568daf6c0 'String'
|             `-CXXRecord 0x55a568daf630 'String'
|-CXXMethodDecl 0x55a568e81fe8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55a568e81ef8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55a568e820d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a568e821b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55a568e821b8
|-CXXMethodDecl 0x55a568e82488 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a568e82390 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55a568e826c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a568e82540 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a568e825b8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a568e82898 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a568e82788 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a568e82800 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a568e829f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a56902caa0 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a56902cce8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a56902cb60 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a56902cbd8 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a56902cf48 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55a56902cdb8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a56902ce30 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a56902d108 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a56902d018 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a56902d2c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a56902d1d0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a56902d380 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a56902d430 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a56902d668 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a56902d4e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a56902d558 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a56902d908 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a56902d810 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55a56902d9d0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55a56902da20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a56902da70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a568fe6e60 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a568e7ec28 prev 0x55a568fe6e60 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a568e80130 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55a568e800e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55a568e800c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a568e7ff70 'type'
|     `-SubstTemplateTypeParmType 0x55a568e7fe00 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55a568d48c80 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55a568d48c28 'F'
|       `-RecordType 0x55a568e7fa60 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55a568e7f980 'typed_array_memory'
|-FieldDecl 0x55a56902dac0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55a56902db10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a56902db48 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|   |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a568d80198 'T'
|   `-RecordType 0x55a568daf6c0 'String'
|     `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902dbd8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55a56902dba0 'String &'
|   `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|     |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a568d80198 'T'
|     `-RecordType 0x55a568daf6c0 'String'
|       `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902dc68 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55a56902dc30 'const String &'
|   `-QualType 0x55a568e7ecc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-RecordType 0x55a568daf6c0 'String'
|         `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902dcf8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55a56902dcc0 'String *'
|   `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|     |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a568d80198 'T'
|     `-RecordType 0x55a568daf6c0 'String'
|       `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902dd88 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55a56902dd50 'const String *'
|   `-QualType 0x55a568e7ecc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-RecordType 0x55a568daf6c0 'String'
|         `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902e9e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55a56902e990 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55a56902e970 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55a56902e8a8 'type'
|     `-LValueReferenceType 0x55a56902e870 'const String &'
|       `-QualType 0x55a56902e611 'const String' const
|         `-SubstTemplateTypeParmType 0x55a56902e610 'String' sugar
|           |-TemplateTypeParmType 0x55a568d52bd0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a568d52b78 'T'
|           `-RecordType 0x55a568daf6c0 'String'
|             `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902ea48 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55a56902dc30 'const String &'
|   `-QualType 0x55a568e7ecc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-RecordType 0x55a568daf6c0 'String'
|         `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902eaa0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56902eb08 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55a56902dcc0 'String *'
|   `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|     |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a568d80198 'T'
|     `-RecordType 0x55a568daf6c0 'String'
|       `-CXXRecord 0x55a568daf630 'String'
|-TypedefDecl 0x55a56902eb70 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55a56902dd50 'const String *'
|   `-QualType 0x55a568e7ecc1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a568e7ecc0 'String' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-RecordType 0x55a568daf6c0 'String'
|         `-CXXRecord 0x55a568daf630 'String'
|-EnumDecl 0x55a56902ebc8 <line:134:5> col:5
| `-EnumConstantDecl 0x55a56902ecc0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a56902eca0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a568d81878 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a568d81850 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a568d81830 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a56902ed48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a56902efd8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a56902ee00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a56902eea0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55a56902f268 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55a56902f150 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55a56902f528 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55a56902f410 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a56902f840 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55a56902f720 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55a56902fb50 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55a56902fa30 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a56902fe40 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a56902fc88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a56902fd00 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a56902ff68 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a569030018 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a569030070 <col:30> Inherited
|-CXXMethodDecl 0x55a5690300b8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a569030168 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5690301c0 <col:30> Inherited
|-CXXMethodDecl 0x55a569030288 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a569030338 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a569030390 <col:30> Inherited
|-CXXMethodDecl 0x55a5690303d8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a569030488 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5690304e0 <col:30> Inherited
|-CXXMethodDecl 0x55a569030528 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a5690305d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a569030630 <col:30> Inherited
|-CXXMethodDecl 0x55a569030678 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a569030728 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a569030780 <col:30> Inherited
|-CXXMethodDecl 0x55a5690307a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a569030858 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a569030908 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a569030ac8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5690309b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a569030a30 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a569030c18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a569030b88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569030dc8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55a569030cd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a569030e80 <col:20>
| `-OptimizeNoneAttr 0x55a569030ed8 <col:30>
|-CXXMethodDecl 0x55a569030ff8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55a569030f00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a5690310b0 <col:20>
| `-OptimizeNoneAttr 0x55a569031108 <col:30>
|-CXXMethodDecl 0x55a5690311c0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a569031130 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569031308 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a569031278 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569031438 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55a569031538 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55a569031608 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55a5690316d8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55a569031818 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a569031788 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569031960 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a5690318d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569031aa8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a569031a18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a569031b60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a569031c60 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a569031bd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a569031d18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a569031dd8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55a569031ed8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55a569032058 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a569031f98 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55a569032818 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a569032110 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55a569032778 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55a569032678 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55a5690328f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a569032a48 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a5690329b8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a569032b00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a569032d48 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a569032bc0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a569032c38 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a569032ed8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55a569032e18 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a5690330e8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55a569032fa0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a569033018 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a5690331a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a569033408 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55a569033310 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55a5690334d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55a5690334d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568f64a98 prev 0x55a568fa9908 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a568f64b90 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55a568f64c20 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55a568f64d58 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55a568f64c58 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a568f66180 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568f66160 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a568f65cf8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a568f66210 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a568f661d0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55a568f64c58 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a568f65d60 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a568f66290 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568f66250 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a568f65dc0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a568f662d0 <col:54> 'bool' false
| `-CompoundStmt 0x55a568f663d8 <col:61, line:38:5>
|   `-BinaryOperator 0x55a568f663b8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55a568f66350 <col:9> 'const Element *' lvalue ->_context 0x55a568f65c98
|     | `-CXXThisExpr 0x55a568f66340 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55a568f663a0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55a568f66380 <col:20> 'int' 0
|-CXXConstructorDecl 0x55a568f64f68 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a568f64e18 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55a568f64e90 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a568f661b8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568f66198 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55a568f65c98 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55a568f66430 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a568f663f0 <col:20> 'const Element *' lvalue ParmVar 0x55a568f64e18 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55a568f65cf8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a568f664b0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a568f66470 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55a568f64e90 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a568f65d60 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a568f66530 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a568f664f0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55a568f65dc0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a568f66570 <col:73> 'bool' false
| `-CompoundStmt 0x55a568f665e8 <col:80, line:46:5>
|-CXXMethodDecl 0x55a568f65098 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55a568f66660 <col:36, line:51:5>
|   `-ReturnStmt 0x55a568f66650 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55a568f66638 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55a568f66608 <col:16> 'const Element *const' lvalue ->_context 0x55a568f65c98
|         `-CXXThisExpr 0x55a568f665f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a568f65188 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55a568f666e0 <col:32, line:57:5>
|   `-ReturnStmt 0x55a568f666d0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55a568f666b8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55a568f66688 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55a568f65cf8
|         `-CXXThisExpr 0x55a568f66678 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a568f65248 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55a568f653d0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a568f65300 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a568f65520 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a568f65490 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a568f65670 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a568f655e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a568f65878 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55a568f65728 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55a568f657a0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55a568f65ba8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55a568f65938 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55a568f659b8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55a568f65a80 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55a568f65c60 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55a568f65c98 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55a568f65cf8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55a568f65d60 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55a568f65dc0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55a568f65e10 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a568f65e10
| `-ParmVarDecl 0x55a568f65f28 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55a568f65fc8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a568f65fc8
| `-ParmVarDecl 0x55a568f660d8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55a5690b54d8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5690713c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55a569071598 prev 0x55a5690713c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a569071628 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a569071650 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a569073220 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55a5690731d0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55a569071b00 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55a569071a00 'type'
|     `-TemplateSpecializationType 0x55a569071990 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55a569071870 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55a569071850 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55a569071830 <col:24> 'unsigned long' 4
|       `-RecordType 0x55a569071970 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55a569071890 'char_array'
|-TypedefDecl 0x55a5690732d8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55a5690732a0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55a569073280 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55a569073220 'type'
|     `-ElaboratedType 0x55a5690731d0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55a569071b00 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55a569071a00 'type'
|         `-TemplateSpecializationType 0x55a569071990 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55a569071870 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55a569071850 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55a569071830 <col:24> 'unsigned long' 4
|           `-RecordType 0x55a569071970 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55a569071890 'char_array'
|-CXXMethodDecl 0x55a569073458 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55a569073368 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55a569073548 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a569073628 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55a5690738f8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a569073800 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55a569073b38 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a5690739b0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a569073a28 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a569073d08 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a569073bf8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a569073c70 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a569073e68 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a569073f38 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a569074188 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a569073ff8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a569074070 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5690743e8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55a569074258 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a5690742d0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5690745a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a5690744b8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a569074768 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a569074670 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a569074820 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a5690748d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a56907bec8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a569074980 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a56907bdb0 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a56907c168 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a56907c070 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55a56907c230 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55a56907c280 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a56907c2d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a56906fdc8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55a56906ffd8 prev 0x55a56906fdc8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a569071330 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55a5690712e0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55a5690712c0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55a569071170 'type'
|     `-SubstTemplateTypeParmType 0x55a569070f90 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55a568d48500 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d484a8 'T'
|       `-RecordType 0x55a569070ae0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55a5690709f8 'sized_array_memory'
|-FieldDecl 0x55a56907c320 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55a56907c370 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a56907c3a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|   |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a568d80198 'T'
|   `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907c438 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55a56907c400 'int &'
|   `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|     |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a568d80198 'T'
|     `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907c4f8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55a56907c4c0 'const int &'
|   `-QualType 0x55a569070071 'const int' const
|     `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907c588 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55a56907c550 'int *'
|   `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|     |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a568d80198 'T'
|     `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907c618 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55a56907c5e0 'const int *'
|   `-QualType 0x55a569070071 'const int' const
|     `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907d200 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55a56907d1b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55a56907d190 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55a56907d120 'type'
|     `-SubstTemplateTypeParmType 0x55a56907cee0 'int' sugar
|       |-TemplateTypeParmType 0x55a568d53300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d532b0 'T'
|       `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907d268 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55a56907c4c0 'const int &'
|   `-QualType 0x55a569070071 'const int' const
|     `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907d2c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907d328 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55a56907c550 'int *'
|   `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|     |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a568d80198 'T'
|     `-BuiltinType 0x55a568a83370 'int'
|-TypedefDecl 0x55a56907d390 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55a56907c5e0 'const int *'
|   `-QualType 0x55a569070071 'const int' const
|     `-SubstTemplateTypeParmType 0x55a569070070 'int' sugar
|       |-TemplateTypeParmType 0x55a568d801f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a568d80198 'T'
|       `-BuiltinType 0x55a568a83370 'int'
|-EnumDecl 0x55a56907d3e8 <line:134:5> col:5
| `-EnumConstantDecl 0x55a56907d4e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a56907d4c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a568d81878 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a568d81850 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a568d81830 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a56907d568 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a56907d7b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a56907d620 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a56907d6c0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55a56907da78 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55a56907d960 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55a56907dd38 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55a56907dc20 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a56907e080 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55a56907df60 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55a56907e390 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55a56907e270 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a56907e680 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a56907e4c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a56907e540 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a56907e7a8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a56907e888 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a56907e8e0 <col:30> Inherited
|-CXXMethodDecl 0x55a56907e928 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a56907e9d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a56907ea30 <col:30> Inherited
|-CXXMethodDecl 0x55a56907eaf8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a56907eba8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a56907ec00 <col:30> Inherited
|-CXXMethodDecl 0x55a56907ec48 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a56907ecf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a56907ed50 <col:30> Inherited
|-CXXMethodDecl 0x55a56907ed98 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a56907ee48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a56907eea0 <col:30> Inherited
|-CXXMethodDecl 0x55a56907eee8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a56907ef98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a56907eff0 <col:30> Inherited
|-CXXMethodDecl 0x55a56907f018 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a56907f0c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a56907f178 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a56907f338 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a56907f228 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a56907f2a0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a56907f488 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a56907f3f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a56907f638 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55a56907f540 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a56907f6f0 <col:20>
| `-OptimizeNoneAttr 0x55a56907f748 <col:30>
|-CXXMethodDecl 0x55a56907f868 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55a56907f770 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a56907f920 <col:20>
| `-OptimizeNoneAttr 0x55a56907f978 <col:30>
|-CXXMethodDecl 0x55a56907fa30 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a56907f9a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a56907fb78 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a56907fae8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a56907fca8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55a56907fdd8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55a56907fea8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55a56907ff78 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55a5690800b8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a569080028 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569080200 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a569080170 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a569080348 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a5690802b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a569080400 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a569080500 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a569080470 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a5690805b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a569080678 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55a569080778 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55a5690808f8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a569080838 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55a5690810b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a5690809b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55a569081018 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55a569080f18 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55a569081198 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a5690812e8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a569081258 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a5690813a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a5690815e8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a569081460 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a5690814d8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a5690817a8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55a5690816b8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a5690819f8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55a569081870 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a5690818e8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a569081ab8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a569081d18 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55a569081c20 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55a569081de8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a56906df38 prev 0x55a56904f908 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a56906e030 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55a56906e120 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55a569093bc0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55a56906e210 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55a569093bd0 <col:25, line:830:9>
|-CXXMethodDecl 0x55a56906e310 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55a56906e3c0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55a56906e468 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a56906e468
| `-ParmVarDecl 0x55a56906e578 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55a56906ed38 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a56906ed38
  `-ParmVarDecl 0x55a56906ee48 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a56904f718 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55a56904f878 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55a56904f908 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55a56904f9c0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55a56904fac8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55a56904f9f8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a5690833a8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a569083388 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a56904fde8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55a56904fc60 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55a56904fcd8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a5690833e0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a5690833c0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55a56904ffc0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a56904feb0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55a56904ff28 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a569083418 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a5690833f8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55a569050378 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a569050160 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55a5690501d8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55a569050250 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a569083450 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a569083430 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a569050538 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55a569050478 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55a569050630 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55a569050818 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55a569050720 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55a569050908 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55a569083800 <col:24, line:291:5>
|   `-ReturnStmt 0x55a5690837f0 <line:290:9, col:79>
|     `-BinaryOperator 0x55a5690837d0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55a5690836a8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55a569083600 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55a5690835e0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55a5690834d8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55a5690834c0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55a5690834a8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55a569083478 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55a56906fd60
|       | |   |       `-CXXThisExpr 0x55a569083468 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55a5690835c8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55a5690835b0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55a569083578 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55a569083548 <col:28, col:35> '<bound member function type>' ->size 0x55a5690307a8
|       | |           `-ImplicitCastExpr 0x55a569083598 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55a569083530 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55a569083500 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55a56906fd60
|       | |                 `-CXXThisExpr 0x55a5690834f0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55a569083690 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55a569083678 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55a569083660 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55a569083630 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55a569081f30
|       |         `-CXXThisExpr 0x55a569083620 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55a5690837b0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55a569083798 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a569083780 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a569083740 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a569083728 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a5690836d8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a569081fe0
|         |     |   `-CXXThisExpr 0x55a5690836c8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a569083708 <col:73> 'int' 0
|         `-IntegerLiteral 0x55a569083760 <col:79> 'int' 0
|-CXXMethodDecl 0x55a5690509c8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55a5690839d8 <col:32, line:296:5>
|   `-ReturnStmt 0x55a5690839c8 <line:295:9, col:49>
|     `-BinaryOperator 0x55a5690839a8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55a569083888 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55a569083870 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55a569083858 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55a569083828 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55a569081f30
|       |       `-CXXThisExpr 0x55a569083818 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55a569083988 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55a569083970 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a569083958 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a569083918 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a569083900 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a5690838b0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a569081fe0
|         |     |   `-CXXThisExpr 0x55a5690838a0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a5690838e0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55a569083938 <col:49> 'int' 0
|-CXXMethodDecl 0x55a569050ab8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55a569083be8 <col:19, line:306:5>
|   |-IfStmt 0x55a569083b08 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55a569083a48 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55a569083a30 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55a569083a00 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a56906fd60
|   | |     `-CXXThisExpr 0x55a5690839f0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55a569083ae8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55a569083ab8 <col:13, col:20> '<bound member function type>' ->clear 0x55a5690331a8
|   |     `-ImplicitCastExpr 0x55a569083aa0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55a569083a70 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a56906fd60
|   |         `-CXXThisExpr 0x55a569083a60 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55a569083b90 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55a569083b60 <col:9, col:16> '<bound member function type>' .clear 0x55a569081ab8
|   |   `-MemberExpr 0x55a569083b30 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55a569081ed0
|   |     `-CXXThisExpr 0x55a569083b20 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55a569083bd8 <line:305:9, col:17>
|     `-UnaryOperator 0x55a569083bc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a569083bb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a569050d38 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55a569050c40 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55a569050eb8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55a569050df0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55a569051238 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55a569050f60 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55a569051198 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55a569051008 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55a569051080 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55a569085880 <col:67, line:327:5>
|     |-WhileStmt 0x55a569085830 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55a569083cd0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55a569083c50 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a568fa1dd8 0x55a568deb3b8 0x55a568deb090 0x55a568ddc870 0x55a568ddc520 0x55a568ddbe10 0x55a568dae780 0x55a568d3ac40
|     | | |-DeclRefExpr 0x55a569083c10 <col:16> 'Iter' lvalue ParmVar 0x55a569051008 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55a569083c30 <col:25> 'Iter' lvalue ParmVar 0x55a569051080 'end' 'Iter'
|     | `-CompoundStmt 0x55a569085810 <col:30, line:325:9>
|     |   |-CallExpr 0x55a5690857b0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55a569083d18 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55a569085780 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55a569085710 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|     |   |   `-DeclRefExpr 0x55a569083d78 <col:24> 'Iter' lvalue ParmVar 0x55a569051008 'begin' 'Iter'
|     |   `-UnaryOperator 0x55a5690857f8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55a5690857d8 <col:15> 'Iter' lvalue ParmVar 0x55a569051008 'begin' 'Iter'
|     `-ReturnStmt 0x55a569085870 <line:326:9, col:17>
|       `-UnaryOperator 0x55a569085858 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569085848 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a569051340 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55a5690512b0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55a569051488 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55a5690513f8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55a569051550 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55a569085960 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55a569085900 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55a5690858b0 <col:9> '<bound member function type>' ->reset_from 0x55a569082358
|   | | `-CXXThisExpr 0x55a5690858a0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55a5690858e0 <col:20> 'int' 0
|   `-ReturnStmt 0x55a569085950 <line:352:9, col:17>
|     `-UnaryOperator 0x55a569085938 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a569085928 <col:17> 'Args *' this
|-VarDecl 0x55a569051608 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a569051670 <col:38> 'int' 1
|-VarDecl 0x55a569051700 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a569051768 <col:39> 'int' 2
|-VarDecl 0x55a5690517f8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a569051860 <col:39> 'int' 4
|-VarDecl 0x55a5690518f0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a569051958 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55a569051cd8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55a5690519d0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a569051c38 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a569051a80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569051b28 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55a569085ab8 <col:43, line:371:5>
|     `-ReturnStmt 0x55a569085aa8 <line:370:9, col:34>
|       `-CallExpr 0x55a569085a70 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569085990 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569085a10 <col:21> 'const char *' lvalue ParmVar 0x55a569051a80 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569085a30 <col:30> 'int' 0
|         `-DeclRefExpr 0x55a569085a50 <col:33> 'T' lvalue ParmVar 0x55a569051b28 'x' 'T &'
|-FunctionTemplateDecl 0x55a569052008 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55a569051d40 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a569051f68 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a569051df0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569051e98 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55a569085c08 <col:45, line:375:5>
|     `-ReturnStmt 0x55a569085bf8 <line:374:9, col:42>
|       `-CallExpr 0x55a569085bc0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569085ae0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569085b60 <col:21> 'const char *' lvalue ParmVar 0x55a569051df0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569085b80 <col:30> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a569085ba0 <col:41> 'T' lvalue ParmVar 0x55a569051e98 'x' 'T &'
|-FunctionTemplateDecl 0x55a569052338 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55a569052070 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a569052298 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a569052120 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690521c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55a569085d58 <col:45, line:379:5>
|     `-ReturnStmt 0x55a569085d48 <line:378:9, col:43>
|       `-CallExpr 0x55a569085d10 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569085c30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569085cb0 <col:21> 'const char *' lvalue ParmVar 0x55a569052120 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569085cd0 <col:30> 'const int' lvalue Var 0x55a569051700 'positional' 'const int'
|         `-DeclRefExpr 0x55a569085cf0 <col:42> 'T' lvalue ParmVar 0x55a5690521c8 'x' 'T &'
|-FunctionTemplateDecl 0x55a569052668 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55a5690523a0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a5690525c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a569052450 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a5690524f8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55a569085f58 <col:46, line:383:5>
| |   `-ReturnStmt 0x55a569085f48 <line:382:9, col:55>
| |     `-CallExpr 0x55a569085f10 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a569085d80 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a569085e00 <col:21> 'const char *' lvalue ParmVar 0x55a569052450 'keyword' 'const char *'
| |       |-BinaryOperator 0x55a569085ed0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55a569085e80 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55a569085e60 <col:30> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55a569085eb8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55a569085e98 <col:42> 'const int' lvalue Var 0x55a569051700 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55a569085ef0 <col:54> 'T' lvalue ParmVar 0x55a5690524f8 'x' 'T &'
| |-CXXMethodDecl 0x55a5690b5968 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x55a5690b5788 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55a5690b5858 <col:40, col:43> col:43 x 'unsigned int &'
| `-CXXMethodDecl 0x55a5690b5e68 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55a5690b5c80 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55a5690b5d58 <col:40, col:43> col:43 x 'String &'
|-FunctionTemplateDecl 0x55a569052a68 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55a5690526d0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5690529c8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55a569052780 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569052800 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a5690528a8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55a569086098 <col:54, line:388:5>
|     |-CallExpr 0x55a569086020 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569085f70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a569085fb0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a569085fc0 <col:30> 'const char *' lvalue ParmVar 0x55a569052780 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a569085fe0 <col:39> 'int' lvalue ParmVar 0x55a569052800 'flags' 'int'
|     | `-DeclRefExpr 0x55a569086000 <col:46> 'T' lvalue ParmVar 0x55a5690528a8 'x' 'T &'
|     `-ReturnStmt 0x55a569086088 <line:387:9, col:17>
|       `-UnaryOperator 0x55a569086070 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569086060 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569052f18 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55a569052ad8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a569052b58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a569052e78 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a569052c18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569052cb8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55a569052d58 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a569086208 <col:74, line:403:5>
|     `-ReturnStmt 0x55a5690861f8 <line:402:9, col:56>
|       `-CallExpr 0x55a5690861b8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690860c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569086138 <col:28> 'const char *' lvalue ParmVar 0x55a569052c18 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569086158 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a569086178 <col:40> 'T' lvalue ParmVar 0x55a569052cb8 'x' 'T &'
|         `-DeclRefExpr 0x55a569086198 <col:43> 'const V' lvalue ParmVar 0x55a569052d58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a569053388 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a569052f88 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a569053008 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5690532e8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a5690530c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569053168 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55a569053208 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a569086370 <col:76, line:407:5>
|     `-ReturnStmt 0x55a569086360 <line:406:9, col:65>
|       `-CallExpr 0x55a569086320 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569086230 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5690862a0 <col:28> 'const char *' lvalue ParmVar 0x55a5690530c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5690862c0 <col:37> 'const int' lvalue Var 0x55a569051700 'positional' 'const int'
|         |-DeclRefExpr 0x55a5690862e0 <col:49> 'T' lvalue ParmVar 0x55a569053168 'x' 'T &'
|         `-DeclRefExpr 0x55a569086300 <col:52> 'const V' lvalue ParmVar 0x55a569053208 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a5690538d8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55a5690533f8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a569053478 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a569053838 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a569053538 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690535b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a569053658 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55a5690536f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5690864d8 <col:85, line:412:5>
|     |-CallExpr 0x55a569086458 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569086388 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a5690863c8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a5690863d8 <col:37> 'const char *' lvalue ParmVar 0x55a569053538 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5690863f8 <col:46> 'int' lvalue ParmVar 0x55a5690535b8 'flags' 'int'
|     | |-DeclRefExpr 0x55a569086418 <col:53> 'T' lvalue ParmVar 0x55a569053658 'x' 'T &'
|     | `-DeclRefExpr 0x55a569086438 <col:56> 'const V' lvalue ParmVar 0x55a5690536f8 'default_value' 'const V &'
|     `-ReturnStmt 0x55a5690864c8 <line:411:9, col:17>
|       `-UnaryOperator 0x55a5690864b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5690864a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569053d68 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55a569053950 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5690539c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569053cc8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a569053a88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569053b00 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a569053ba8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55a569086658 <col:53, line:425:5>
|     `-ReturnStmt 0x55a569086648 <line:424:9, col:42>
|       `-CallExpr 0x55a569086608 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569086508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569086588 <col:21> 'const char *' lvalue ParmVar 0x55a569053a88 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5690865a8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a5690865c8 <col:33> 'P' lvalue ParmVar 0x55a569053b00 'parser' 'P'
|         `-DeclRefExpr 0x55a5690865e8 <col:41> 'T' lvalue ParmVar 0x55a569053ba8 'x' 'T &'
|-FunctionTemplateDecl 0x55a5690541b8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55a569053dd8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569053e58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569054118 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a569053f18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569053f90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a569054038 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a5690867d0 <col:55, line:429:5>
|     `-ReturnStmt 0x55a5690867c0 <line:428:9, col:50>
|       `-CallExpr 0x55a569086780 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569086680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569086700 <col:21> 'const char *' lvalue ParmVar 0x55a569053f18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569086720 <col:30> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a569086740 <col:41> 'P' lvalue ParmVar 0x55a569053f90 'parser' 'P'
|         `-DeclRefExpr 0x55a569086760 <col:49> 'T' lvalue ParmVar 0x55a569054038 'x' 'T &'
|-FunctionTemplateDecl 0x55a569054608 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55a569054228 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5690542a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569054568 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a569054368 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690543e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a569054488 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a569086948 <col:55, line:433:5>
|     `-ReturnStmt 0x55a569086938 <line:432:9, col:51>
|       `-CallExpr 0x55a5690868f8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690867f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569086878 <col:21> 'const char *' lvalue ParmVar 0x55a569054368 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569086898 <col:30> 'const int' lvalue Var 0x55a569051700 'positional' 'const int'
|         |-DeclRefExpr 0x55a5690868b8 <col:42> 'P' lvalue ParmVar 0x55a5690543e0 'parser' 'P'
|         `-DeclRefExpr 0x55a5690868d8 <col:50> 'T' lvalue ParmVar 0x55a569054488 'x' 'T &'
|-FunctionTemplateDecl 0x55a569054a58 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55a569054678 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5690546f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5690549b8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5690547b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569054830 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a5690548d8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55a569086b70 <col:56, line:437:5>
|     `-ReturnStmt 0x55a569086b60 <line:436:9, col:63>
|       `-CallExpr 0x55a569086b20 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569086970 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5690869f0 <col:21> 'const char *' lvalue ParmVar 0x55a5690547b8 'keyword' 'const char *'
|         |-BinaryOperator 0x55a569086ac0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a569086a70 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a569086a50 <col:30> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a569086aa8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a569086a88 <col:42> 'const int' lvalue Var 0x55a569051700 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a569086ae0 <col:54> 'P' lvalue ParmVar 0x55a569054830 'parser' 'P'
|         `-DeclRefExpr 0x55a569086b00 <col:62> 'T' lvalue ParmVar 0x55a5690548d8 'x' 'T &'
|-FunctionTemplateDecl 0x55a569054f88 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55a569054ac8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569054b48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569054ee8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a569054c08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569054c88 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a569054d00 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a569054da8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55a569086cd8 <col:64, line:442:5>
|     |-CallExpr 0x55a569086c58 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569086b88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a569086bc8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a569086bd8 <col:30> 'const char *' lvalue ParmVar 0x55a569054c08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a569086bf8 <col:39> 'int' lvalue ParmVar 0x55a569054c88 'flags' 'int'
|     | |-DeclRefExpr 0x55a569086c18 <col:46> 'P' lvalue ParmVar 0x55a569054d00 'parser' 'P'
|     | `-DeclRefExpr 0x55a569086c38 <col:54> 'T' lvalue ParmVar 0x55a569054da8 'x' 'T &'
|     `-ReturnStmt 0x55a569086cc8 <line:441:9, col:17>
|       `-UnaryOperator 0x55a569086cb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569086ca0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569055588 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55a569055000 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569055078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a5690550f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5690554e8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a5690551c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569055238 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a5690552d8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55a5690553a8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a569086e70 <col:84, line:458:5>
|     `-ReturnStmt 0x55a569086e60 <line:457:9, col:64>
|       `-CallExpr 0x55a569086e18 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569086d08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569086d78 <col:28> 'const char *' lvalue ParmVar 0x55a5690551c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569086d98 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a569086db8 <col:40> 'P' lvalue ParmVar 0x55a569055238 'parser' 'P'
|         |-DeclRefExpr 0x55a569086dd8 <col:48> 'T' lvalue ParmVar 0x55a5690552d8 'x' 'T &'
|         `-DeclRefExpr 0x55a569086df8 <col:51> 'const V' lvalue ParmVar 0x55a5690553a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a569055b08 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a569055600 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569055678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a5690556f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a569055a68 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a5690557c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569055838 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a5690558d8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55a569055978 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a569087000 <col:86, line:462:5>
|     `-ReturnStmt 0x55a569086ff0 <line:461:9, col:73>
|       `-CallExpr 0x55a569086fa8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569086e98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569086f08 <col:28> 'const char *' lvalue ParmVar 0x55a5690557c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569086f28 <col:37> 'const int' lvalue Var 0x55a569051700 'positional' 'const int'
|         |-DeclRefExpr 0x55a569086f48 <col:49> 'P' lvalue ParmVar 0x55a569055838 'parser' 'P'
|         |-DeclRefExpr 0x55a569086f68 <col:57> 'T' lvalue ParmVar 0x55a5690558d8 'x' 'T &'
|         `-DeclRefExpr 0x55a569086f88 <col:60> 'const V' lvalue ParmVar 0x55a569055978 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a569056168 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55a569055b80 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569055bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a569055c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5690560c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a569055d40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569055dc0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a569055e38 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55a569055ed8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55a569055f78 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a569087190 <col:95, line:467:5>
|     |-CallExpr 0x55a569087108 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569087018 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a569087058 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a569087068 <col:37> 'const char *' lvalue ParmVar 0x55a569055d40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a569087088 <col:46> 'int' lvalue ParmVar 0x55a569055dc0 'flags' 'int'
|     | |-DeclRefExpr 0x55a5690870a8 <col:53> 'P' lvalue ParmVar 0x55a569055e38 'parser' 'P'
|     | |-DeclRefExpr 0x55a5690870c8 <col:61> 'T' lvalue ParmVar 0x55a569055ed8 'x' 'T &'
|     | `-DeclRefExpr 0x55a5690870e8 <col:64> 'const V' lvalue ParmVar 0x55a569055f78 'default_value' 'const V &'
|     `-ReturnStmt 0x55a569087180 <line:466:9, col:17>
|       `-UnaryOperator 0x55a569087168 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569087158 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569056748 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55a5690561e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569056268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5690562e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5690566a8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5690563b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569056428 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a5690564c8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a569056568 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a569087338 <col:63, line:481:5>
|     `-ReturnStmt 0x55a569087328 <line:480:9, col:47>
|       `-CallExpr 0x55a5690872e0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690871c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087240 <col:21> 'const char *' lvalue ParmVar 0x55a5690563b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569087260 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a569087280 <col:33> 'P' lvalue ParmVar 0x55a569056428 'parser' 'P'
|         |-DeclRefExpr 0x55a5690872a0 <col:41> 'T1' lvalue ParmVar 0x55a5690564c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a5690872c0 <col:45> 'T2' lvalue ParmVar 0x55a569056568 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a569056cc8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55a5690567c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569056838 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5690568b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a569056c28 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a569056980 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690569f8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a569056a98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a569056b38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5690874d8 <col:65, line:485:5>
|     `-ReturnStmt 0x55a5690874c8 <line:484:9, col:55>
|       `-CallExpr 0x55a569087480 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569087360 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5690873e0 <col:21> 'const char *' lvalue ParmVar 0x55a569056980 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569087400 <col:30> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a569087420 <col:41> 'P' lvalue ParmVar 0x55a5690569f8 'parser' 'P'
|         |-DeclRefExpr 0x55a569087440 <col:49> 'T1' lvalue ParmVar 0x55a569056a98 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a569087460 <col:53> 'T2' lvalue ParmVar 0x55a569056b38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a569057248 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55a569056d40 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569056db8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a569056e38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5690571a8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a569056f00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569056f78 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a569057018 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a5690570b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a569087678 <col:65, line:489:5>
|     `-ReturnStmt 0x55a569087668 <line:488:9, col:56>
|       `-CallExpr 0x55a569087620 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569087500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087580 <col:21> 'const char *' lvalue ParmVar 0x55a569056f00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5690875a0 <col:30> 'const int' lvalue Var 0x55a569051700 'positional' 'const int'
|         |-DeclRefExpr 0x55a5690875c0 <col:42> 'P' lvalue ParmVar 0x55a569056f78 'parser' 'P'
|         |-DeclRefExpr 0x55a5690875e0 <col:50> 'T1' lvalue ParmVar 0x55a569057018 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a569087600 <col:54> 'T2' lvalue ParmVar 0x55a5690570b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a56905cf28 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55a5690572c0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569057338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5690573b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a56905ce88 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a569057480 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690574f8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a569057598 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a569057638 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5690878c8 <col:66, line:493:5>
|     `-ReturnStmt 0x55a5690878b8 <line:492:9, col:68>
|       `-CallExpr 0x55a569087870 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690876a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087720 <col:21> 'const char *' lvalue ParmVar 0x55a569057480 'keyword' 'const char *'
|         |-BinaryOperator 0x55a5690877f0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a5690877a0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a569087780 <col:30> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a5690877d8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a5690877b8 <col:42> 'const int' lvalue Var 0x55a569051700 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a569087810 <col:54> 'P' lvalue ParmVar 0x55a5690574f8 'parser' 'P'
|         |-DeclRefExpr 0x55a569087830 <col:62> 'T1' lvalue ParmVar 0x55a569057598 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a569087850 <col:66> 'T2' lvalue ParmVar 0x55a569057638 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a56905d588 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55a56905cfa0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56905d018 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a56905d098 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a56905d4e8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a56905d160 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905d1e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a56905d258 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a56905d2f8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a56905d398 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a569087a58 <col:74, line:498:5>
|     |-CallExpr 0x55a5690879d0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5690878e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a569087920 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a569087930 <col:30> 'const char *' lvalue ParmVar 0x55a56905d160 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a569087950 <col:39> 'int' lvalue ParmVar 0x55a56905d1e0 'flags' 'int'
|     | |-DeclRefExpr 0x55a569087970 <col:46> 'P' lvalue ParmVar 0x55a56905d258 'parser' 'P'
|     | |-DeclRefExpr 0x55a569087990 <col:54> 'T1' lvalue ParmVar 0x55a56905d2f8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55a5690879b0 <col:58> 'T2' lvalue ParmVar 0x55a56905d398 'x2' 'T2 &'
|     `-ReturnStmt 0x55a569087a48 <line:497:9, col:17>
|       `-UnaryOperator 0x55a569087a30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569087a20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a56905d8e8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55a56905d608 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56905d848 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a56905d6c0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905d738 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55a569087ba0 <col:52, line:509:5>
|     `-ReturnStmt 0x55a569087b90 <line:508:9, col:44>
|       `-CallExpr 0x55a569087b58 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569087a88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087af8 <col:26> 'const char *' lvalue ParmVar 0x55a56905d6c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569087b18 <col:35> 'int' 0
|         `-DeclRefExpr 0x55a569087b38 <col:38> 'P' lvalue ParmVar 0x55a56905d738 'parser' 'P'
|-FunctionTemplateDecl 0x55a56905dbe8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55a56905d950 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56905db48 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a56905da00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905da78 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a569087ce0 <col:54, line:513:5>
|     `-ReturnStmt 0x55a569087cd0 <line:512:9, col:52>
|       `-CallExpr 0x55a569087c98 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569087bc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087c38 <col:26> 'const char *' lvalue ParmVar 0x55a56905da00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569087c58 <col:35> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a569087c78 <col:46> 'P' lvalue ParmVar 0x55a56905da78 'parser' 'P'
|-FunctionTemplateDecl 0x55a56905dee8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55a56905dc50 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56905de48 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a56905dd00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905dd78 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a569087e20 <col:54, line:517:5>
|     `-ReturnStmt 0x55a569087e10 <line:516:9, col:53>
|       `-CallExpr 0x55a569087dd8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569087d08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087d78 <col:26> 'const char *' lvalue ParmVar 0x55a56905dd00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569087d98 <col:35> 'const int' lvalue Var 0x55a569051700 'positional' 'const int'
|         `-DeclRefExpr 0x55a569087db8 <col:47> 'P' lvalue ParmVar 0x55a56905dd78 'parser' 'P'
|-FunctionTemplateDecl 0x55a56905e1e8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a56905df50 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56905e148 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a56905e000 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905e078 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55a569088010 <col:55, line:521:5>
|     `-ReturnStmt 0x55a569088000 <line:520:9, col:65>
|       `-CallExpr 0x55a569087fc8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569087e48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569087eb8 <col:26> 'const char *' lvalue ParmVar 0x55a56905e000 'keyword' 'const char *'
|         |-BinaryOperator 0x55a569087f88 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55a569087f38 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a569087f18 <col:35> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a569087f70 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a569087f50 <col:47> 'const int' lvalue Var 0x55a569051700 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55a569087fa8 <col:59> 'P' lvalue ParmVar 0x55a56905e078 'parser' 'P'
|-FunctionTemplateDecl 0x55a56905e5b8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55a56905e250 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56905e518 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a56905e300 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905e380 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a56905e3f8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55a569088150 <col:63, line:526:5>
|     |-CallExpr 0x55a5690880d8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569088028 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55a569088068 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55a569088078 <col:35> 'const char *' lvalue ParmVar 0x55a56905e300 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a569088098 <col:44> 'int' lvalue ParmVar 0x55a56905e380 'flags' 'int'
|     | `-DeclRefExpr 0x55a5690880b8 <col:51> 'P' lvalue ParmVar 0x55a56905e3f8 'parser' 'P'
|     `-ReturnStmt 0x55a569088140 <line:525:9, col:17>
|       `-UnaryOperator 0x55a569088128 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569088118 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a56905ea08 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55a56905e628 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56905e6a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56905e968 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a56905e768 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905e7e0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55a56905e888 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55a5690882a8 <col:58, line:541:5>
|     `-ReturnStmt 0x55a569088298 <line:540:9, col:39>
|       `-CallExpr 0x55a569088260 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088180 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569088200 <col:21> 'const char *' lvalue ParmVar 0x55a56905e768 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569088220 <col:30> 'P' lvalue ParmVar 0x55a56905e7e0 'parser' 'P'
|         `-DeclRefExpr 0x55a569088240 <col:38> 'T' lvalue ParmVar 0x55a56905e888 'x' 'T &'
|-FunctionTemplateDecl 0x55a56905ee58 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55a56905ea78 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56905eaf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56905edb8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a56905ebb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905ec30 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a56905ecd8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a5690883e0 <col:60, line:545:5>
|     `-ReturnStmt 0x55a5690883d0 <line:544:9, col:41>
|       `-CallExpr 0x55a569088398 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690882d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569088338 <col:23> 'const char *' lvalue ParmVar 0x55a56905ebb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569088358 <col:32> 'P' lvalue ParmVar 0x55a56905ec30 'parser' 'P'
|         `-DeclRefExpr 0x55a569088378 <col:40> 'T' lvalue ParmVar 0x55a56905ecd8 'x' 'T &'
|-FunctionTemplateDecl 0x55a56905f2a8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55a56905eec8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56905ef48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56905f208 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a56905f008 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905f080 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a56905f128 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a569088518 <col:60, line:549:5>
|     `-ReturnStmt 0x55a569088508 <line:548:9, col:41>
|       `-CallExpr 0x55a5690884d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088408 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569088470 <col:23> 'const char *' lvalue ParmVar 0x55a56905f008 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569088490 <col:32> 'P' lvalue ParmVar 0x55a56905f080 'parser' 'P'
|         `-DeclRefExpr 0x55a5690884b0 <col:40> 'T' lvalue ParmVar 0x55a56905f128 'x' 'T &'
|-FunctionTemplateDecl 0x55a56905f6f8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a56905f318 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56905f398 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56905f658 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a56905f458 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905f4d0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55a56905f578 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55a569088650 <col:61, line:553:5>
|     `-ReturnStmt 0x55a569088640 <line:552:9, col:42>
|       `-CallExpr 0x55a569088608 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5690885a8 <col:24> 'const char *' lvalue ParmVar 0x55a56905f458 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5690885c8 <col:33> 'P' lvalue ParmVar 0x55a56905f4d0 'parser' 'P'
|         `-DeclRefExpr 0x55a5690885e8 <col:41> 'T' lvalue ParmVar 0x55a56905f578 'x' 'T &'
|-FunctionTemplateDecl 0x55a56905fbd8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55a56905f768 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56905f7e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56905fb38 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a56905f8a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905f928 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a56905f9a0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55a56905fa48 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55a5690887c8 <col:69, line:557:5>
|     `-ReturnStmt 0x55a5690887b8 <line:556:9, col:46>
|       `-CallExpr 0x55a569088778 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5690886f8 <col:21> 'const char *' lvalue ParmVar 0x55a56905f8a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569088718 <col:30> 'int' lvalue ParmVar 0x55a56905f928 'flags' 'int'
|         |-DeclRefExpr 0x55a569088738 <col:37> 'P' lvalue ParmVar 0x55a56905f9a0 'parser' 'P'
|         `-DeclRefExpr 0x55a569088758 <col:45> 'T' lvalue ParmVar 0x55a56905fa48 'x' 'T &'
|-FunctionTemplateDecl 0x55a56905fee8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55a56905fc50 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56905fe48 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a56905fd00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56905fd78 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55a569088908 <col:56, line:571:5>
|     `-ReturnStmt 0x55a5690888f8 <line:570:9, col:48>
|       `-CallExpr 0x55a5690888c0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690887f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569088860 <col:30> 'const char *' lvalue ParmVar 0x55a56905fd00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569088880 <col:39> 'int' 0
|         `-DeclRefExpr 0x55a5690888a0 <col:42> 'P' lvalue ParmVar 0x55a56905fd78 'parser' 'P'
|-FunctionTemplateDecl 0x55a569060278 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55a56905ff50 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5690601d8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a569060000 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569060080 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a5690600f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a569088ad8 <col:67, line:576:5>
|     |-CallExpr 0x55a569088a60 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569088920 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a569088960 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a569088970 <col:39> 'const char *' lvalue ParmVar 0x55a569060000 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a569088a20 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a5690889d0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a569088990 <col:48> 'int' lvalue ParmVar 0x55a569060080 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a569088a08 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a5690889e8 <col:56> 'const int' lvalue Var 0x55a5690518f0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55a569088a40 <col:68> 'P' lvalue ParmVar 0x55a5690600f8 'parser' 'P'
|     `-ReturnStmt 0x55a569088ac8 <line:575:9, col:17>
|       `-UnaryOperator 0x55a569088ab0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569088aa0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5690606c8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55a5690602e8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569060368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569060628 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a569060428 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690604a0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a569060548 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55a569088c48 <col:62, line:592:5>
|     `-ReturnStmt 0x55a569088c38 <line:591:9, col:51>
|       `-CallExpr 0x55a569088bf8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569088b78 <col:30> 'const char *' lvalue ParmVar 0x55a569060428 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569088b98 <col:39> 'int' 0
|         |-DeclRefExpr 0x55a569088bb8 <col:42> 'P' lvalue ParmVar 0x55a5690604a0 'parser' 'P'
|         `-DeclRefExpr 0x55a569088bd8 <col:50> 'T' lvalue ParmVar 0x55a569060548 'x' 'T &'
|-FunctionTemplateDecl 0x55a569060ba8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55a569060738 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5690607b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569060b08 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a569060878 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690608f8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a569060970 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55a569060a18 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55a569088e40 <col:73, line:597:5>
|     |-CallExpr 0x55a569088dc0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a569088c60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a569088ca0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a569088cb0 <col:39> 'const char *' lvalue ParmVar 0x55a569060878 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a569088d60 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a569088d10 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a569088cd0 <col:48> 'int' lvalue ParmVar 0x55a5690608f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a569088d48 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a569088d28 <col:56> 'const int' lvalue Var 0x55a5690518f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a569088d80 <col:68> 'P' lvalue ParmVar 0x55a569060970 'parser' 'P'
|     | `-DeclRefExpr 0x55a569088da0 <col:76> 'T' lvalue ParmVar 0x55a569060a18 'x' 'T &'
|     `-ReturnStmt 0x55a569088e30 <line:596:9, col:17>
|       `-UnaryOperator 0x55a569088e18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569088e08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569061158 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55a569060c20 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569060c98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5690610b8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a569060d58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569060dd0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55a569060f90 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a569088fb0 <col:65, line:614:5>
|     `-ReturnStmt 0x55a569088fa0 <line:613:9, col:46>
|       `-CallExpr 0x55a569088f60 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088e70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569088ee0 <col:25> 'const char *' lvalue ParmVar 0x55a569060d58 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569088f00 <col:34> 'int' 0
|         |-DeclRefExpr 0x55a569088f20 <col:37> 'P' lvalue ParmVar 0x55a569060dd0 'parser' 'P'
|         `-DeclRefExpr 0x55a569088f40 <col:45> 'Vector<T>' lvalue ParmVar 0x55a569060f90 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a569061588 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55a5690611c8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5690614e8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55a569061280 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690613d0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a5690891d0 <col:55, line:618:5>
|     `-ReturnStmt 0x55a5690891c0 <line:617:9, col:55>
|       `-CallExpr 0x55a569089180 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a569088fd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569089048 <col:25> 'const char *' lvalue ParmVar 0x55a569061280 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a569089068 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55a569089140 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a569089160 <col:54> 'Vector<T>' lvalue ParmVar 0x55a5690613d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a569061b58 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55a5690615f0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569061668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569061ab8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a569061728 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690617a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a569061820 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a569061970 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a5690893c8 <col:76, line:623:5>
|     |-CallExpr 0x55a569089348 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5690891e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55a569089228 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55a569089238 <col:34> 'const char *' lvalue ParmVar 0x55a569061728 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a5690892e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a569089298 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a569089258 <col:43> 'int' lvalue ParmVar 0x55a5690617a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a5690892d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a5690892b0 <col:51> 'const int' lvalue Var 0x55a5690518f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a569089308 <col:63> 'P' lvalue ParmVar 0x55a569061820 'parser' 'P'
|     | `-DeclRefExpr 0x55a569089328 <col:71> 'Vector<T>' lvalue ParmVar 0x55a569061970 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55a5690893b8 <line:622:9, col:17>
|       `-UnaryOperator 0x55a5690893a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a569089390 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569062098 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55a569061bd0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569061c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569061ff8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55a569061d08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569061d88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a569061ed0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a569089630 <col:66, line:627:5>
|     `-ReturnStmt 0x55a569089620 <line:626:9, col:59>
|       `-CallExpr 0x55a5690895e0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5690893f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a569089468 <col:25> 'const char *' lvalue ParmVar 0x55a569061d08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a569089488 <col:34> 'int' lvalue ParmVar 0x55a569061d88 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55a5690895a0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a5690895c0 <col:58> 'Vector<T>' lvalue ParmVar 0x55a569061ed0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55a569062128 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55a5690896b0 <col:25, line:633:5>
|   `-ReturnStmt 0x55a5690896a0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55a569089688 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a569089658 <col:16> 'const bool' lvalue ->_status 0x55a56906fbc8
|         `-CXXThisExpr 0x55a569089648 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a5690622a8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55a5690621e0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55a569089798 <col:27, line:639:5>
|   |-BinaryOperator 0x55a569089740 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a5690896c8 <col:9> 'bool' lvalue ParmVar 0x55a5690621e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a569089728 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a5690896f8 <col:13> 'bool' lvalue ->_status 0x55a56906fbc8
|   |     `-CXXThisExpr 0x55a5690896e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a569089788 <line:638:9, col:17>
|     `-UnaryOperator 0x55a569089770 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a569089760 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a569062428 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a569062368 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55a569089888 <col:39, line:644:5>
|   |-BinaryOperator 0x55a569089830 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a5690897b8 <col:9> 'bool' lvalue ParmVar 0x55a569062368 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a569089818 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a5690897e8 <col:13> 'const bool' lvalue ->_status 0x55a56906fbc8
|   |     `-CXXThisExpr 0x55a5690897d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a569089878 <line:643:9, col:17>
|     `-UnaryOperator 0x55a569089860 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a569089850 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a5690624f0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55a569089930 <col:30, line:651:5>
|   `-ReturnStmt 0x55a569089920 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55a569089908 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a5690898d8 <col:16> 'bool' lvalue ->_read_status 0x55a568f65dc0
|         `-ImplicitCastExpr 0x55a5690898b8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55a5690898a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a569062638 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55a5690625a8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55a569089a38 <col:32, line:658:5>
|   |-BinaryOperator 0x55a5690899e0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a569089948 <col:9> 'bool' lvalue ParmVar 0x55a5690625a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a5690899c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a569089998 <col:13> 'bool' lvalue ->_read_status 0x55a568f65dc0
|   |     `-ImplicitCastExpr 0x55a569089978 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a569089968 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a569089a28 <line:657:9, col:17>
|     `-UnaryOperator 0x55a569089a10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a569089a00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a569062788 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a5690626f8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55a569089b48 <col:44, line:663:5>
|   |-BinaryOperator 0x55a569089af0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a569089a58 <col:9> 'bool' lvalue ParmVar 0x55a5690626f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a569089ad8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a569089aa8 <col:13> 'bool' lvalue ->_read_status 0x55a568f65dc0
|   |     `-ImplicitCastExpr 0x55a569089a88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a569089a78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a569089b38 <line:662:9, col:17>
|     `-UnaryOperator 0x55a569089b20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a569089b10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a569062850 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55a569062918 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55a5690629e0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55a569062aa8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55a569062db8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55a569062b48 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a569062d18 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55a569062c28 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55a569089f00 <col:19, line:706:5>
|     `-IfStmt 0x55a569089ed8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55a569089c48 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55a569089e08 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55a569089dd8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55a569089d98 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55a569089ca0 <col:42> '<bound member function type>' ->simple_slot 0x55a569083010
|       |     | `-CXXThisExpr 0x55a569089c90 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55a569089d38 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55a569089cf0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55a568defe58
|       |     | `-DeclRefExpr 0x55a569089cd0 <col:55> 'T' lvalue ParmVar 0x55a569062c28 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55a569089d78 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55a569089ec8 <line:705:13, col:34>
|         `-CallExpr 0x55a569089ea0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55a569089e28 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55a569089e80 <col:33> 'T' lvalue ParmVar 0x55a569062c28 'x' 'T &'
|-FunctionTemplateDecl 0x55a569063088 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55a569062e18 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a569062fe8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55a569062ef8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55a56908a2e0 <col:31, line:717:5>
|     |-DeclStmt 0x55a56908a040 <line:713:9, col:23>
|     | `-VarDecl 0x55a569089f28 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55a56908a018 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a569089fa0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a569089ff8 <col:21> 'T' lvalue ParmVar 0x55a569062ef8 'x' 'T &'
|     |-IfStmt 0x55a56908a290 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55a56908a138 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55a56908a270 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a56908a210 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a56908a1a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|     |   | `-DeclRefExpr 0x55a56908a180 <col:14> 'T *' lvalue Var 0x55a569089f28 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55a56908a250 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55a56908a2c8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55a56908a2a8 <col:16> 'T *' lvalue Var 0x55a569089f28 's' 'T *'
|-FunctionTemplateDecl 0x55a569063498 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55a5690630e8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a569063168 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5690633f8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55a569063248 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55a5690632e8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55a56908a5f0 <col:37, line:726:5>
|     |-IfStmt 0x55a56908a580 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55a56908a5a0 <line:723:13, col:26>
|     | | `-VarDecl 0x55a56908a348 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55a56908a438 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55a56908a3c0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55a56908a418 <col:25> 'T' lvalue ParmVar 0x55a569063248 'x' 'T &'
|     | |-DeclRefExpr 0x55a56908a460 <col:16> 'T *' lvalue Var 0x55a56908a348 's' 'T *'
|     | `-BinaryOperator 0x55a56908a560 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a56908a510 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a56908a4a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|     |   | `-DeclRefExpr 0x55a56908a480 <col:14> 'T *' lvalue Var 0x55a56908a348 's' 'T *'
|     |   `-DeclRefExpr 0x55a56908a540 <col:18> 'const V' lvalue ParmVar 0x55a5690632e8 'value' 'const V &'
|     `-ReturnStmt 0x55a56908a5e0 <line:725:9, col:17>
|       `-UnaryOperator 0x55a56908a5c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a56908a5b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a569063898 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55a569063500 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5690637f8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55a5690635b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569063630 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a5690636d8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55a56908b410 <col:65, line:737:5>
|     |-DeclStmt 0x55a56908a688 <line:732:9, col:26>
|     | `-VarDecl 0x55a56908a620 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a56908b3d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55a56908b3f8 <line:733:13, col:58>
|       | `-VarDecl 0x55a56908a6b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a56908a890 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a56908a860 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a56908a848 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a56908a828 <col:26, col:58> 'String' (CXXTemporary 0x55a56908a828)
|       |           `-CXXMemberCallExpr 0x55a56908a7b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a56908a728 <col:26> '<bound member function type>' ->find 0x55a569082628
|       |             | `-CXXThisExpr 0x55a56908a718 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a56908a7f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a56908a758 <col:31> 'const char *' lvalue ParmVar 0x55a5690635b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a56908a808 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a56908a778 <col:40> 'int' lvalue ParmVar 0x55a569063630 'flags' 'int'
|       |             `-DeclRefExpr 0x55a56908a798 <col:47> 'Args::Slot *' lvalue Var 0x55a56908a620 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a56908a948 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a56908a930 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a56908a910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a56908a8e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|       |       `-ImplicitCastExpr 0x55a56908a8c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a56908a8a8 <col:20> 'String' lvalue Var 0x55a56908a6b0 'str' 'String'
|       `-CompoundStmt 0x55a56908b3b8 <col:61, line:736:9>
|         |-DeclStmt 0x55a56908ae00 <line:734:13, col:76>
|         | `-VarDecl 0x55a56908a998 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a56908add0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a56908ad40 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a56908ad88 <col:60> 'T' lvalue ParmVar 0x55a5690636d8 'variable' 'T &'
|         |     `-UnaryOperator 0x55a56908adb8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a56908ada8 <col:71> 'Args *' this
|         `-CallExpr 0x55a56908b388 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55a56908ae28 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|           | `-CXXThisExpr 0x55a56908ae18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a56908b348 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a56908ae58 <col:23> 'T *' lvalue Var 0x55a56908a998 's' 'T *'
|           | `-CallExpr 0x55a56908b308 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a56908b0e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55a56908b1e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55a56908b200 <col:86> 'String' lvalue Var 0x55a56908a6b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a56908b2b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a56908b240 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|           |   | `-DeclRefExpr 0x55a56908b220 <col:92> 'T *' lvalue Var 0x55a56908a998 's' 'T *'
|           |   `-UnaryOperator 0x55a56908b2f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a56908b2e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55a56908b368 <col:103> 'Args::Slot *' lvalue Var 0x55a56908a620 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a569063de8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a569063908 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a569063988 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a569063d48 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a569063a48 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569063ac8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a569063b68 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55a569063c08 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55a56908c2b0 <col:88, line:745:5>
|     |-DeclStmt 0x55a56908b4a8 <line:741:9, col:26>
|     | `-VarDecl 0x55a56908b440 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a56908b6c8 <line:742:9, col:55>
|     | `-VarDecl 0x55a56908b4d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a56908b6b0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a56908b680 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a56908b668 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a56908b648 <col:22, col:54> 'String' (CXXTemporary 0x55a56908b648)
|     |           `-CXXMemberCallExpr 0x55a56908b5d8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a56908b548 <col:22> '<bound member function type>' ->find 0x55a569082628
|     |             | `-CXXThisExpr 0x55a56908b538 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a56908b610 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a56908b578 <col:27> 'const char *' lvalue ParmVar 0x55a569063a48 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a56908b628 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a56908b598 <col:36> 'int' lvalue ParmVar 0x55a569063ac8 'flags' 'int'
|     |             `-DeclRefExpr 0x55a56908b5b8 <col:43> 'Args::Slot *' lvalue Var 0x55a56908b440 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a56908baa0 <line:743:9, col:72>
|     | `-VarDecl 0x55a56908b718 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a56908ba70 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a56908b9e0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a56908ba28 <col:56> 'T' lvalue ParmVar 0x55a569063b68 'variable' 'T &'
|     |     `-UnaryOperator 0x55a56908ba58 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a56908ba48 <col:67> 'Args *' this
|     `-CallExpr 0x55a56908c280 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55a56908bac8 <col:9> '<bound member function type>' ->postparse 0x55a569082838
|       | `-CXXThisExpr 0x55a56908bab8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a56908c240 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a56908baf8 <col:19> 'T *' lvalue Var 0x55a56908b718 's' 'T *'
|       | `-ParenExpr 0x55a56908c220 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55a56908c1f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a56908c1d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a56908c1c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a56908c1a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a56908c170 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|       |     |       `-ImplicitCastExpr 0x55a56908c158 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a56908bb18 <col:25> 'String' lvalue Var 0x55a56908b4d0 'str' 'String'
|       |     |-CallExpr 0x55a56908bfc8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a56908bda0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55a56908bea0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55a56908bec0 <col:89> 'String' lvalue Var 0x55a56908b4d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a56908bf70 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a56908bf00 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|       |     | | `-DeclRefExpr 0x55a56908bee0 <col:95> 'T *' lvalue Var 0x55a56908b718 's' 'T *'
|       |     | `-UnaryOperator 0x55a56908bfb0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a56908bfa0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55a56908c138 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55a56908c118 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a56908c0e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a56908c098 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a56908c028 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|       |         | | `-DeclRefExpr 0x55a56908c008 <col:109> 'T *' lvalue Var 0x55a56908b718 's' 'T *'
|       |         | `-DeclRefExpr 0x55a56908c0c8 <col:113> 'const V' lvalue ParmVar 0x55a569063c08 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a56908c108 <col:120> 'bool' true
|       `-DeclRefExpr 0x55a56908c260 <col:128> 'Args::Slot *' lvalue Var 0x55a56908b440 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a569064318 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55a569063e60 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569063ed8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a569064278 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a569063f98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569064018 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a569064090 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a569064138 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55a56908cea8 <col:75, line:754:5>
|     |-DeclStmt 0x55a56908c358 <line:749:9, col:26>
|     | `-VarDecl 0x55a56908c2f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a56908ce70 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55a56908ce90 <line:750:13, col:58>
|       | `-VarDecl 0x55a56908c380 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a56908c560 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a56908c530 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a56908c518 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a56908c4f8 <col:26, col:58> 'String' (CXXTemporary 0x55a56908c4f8)
|       |           `-CXXMemberCallExpr 0x55a56908c488 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a56908c3f8 <col:26> '<bound member function type>' ->find 0x55a569082628
|       |             | `-CXXThisExpr 0x55a56908c3e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a56908c4c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a56908c428 <col:31> 'const char *' lvalue ParmVar 0x55a569063f98 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a56908c4d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a56908c448 <col:40> 'int' lvalue ParmVar 0x55a569064018 'flags' 'int'
|       |             `-DeclRefExpr 0x55a56908c468 <col:47> 'Args::Slot *' lvalue Var 0x55a56908c2f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a56908c618 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a56908c600 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a56908c5e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a56908c5b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|       |       `-ImplicitCastExpr 0x55a56908c598 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a56908c578 <col:20> 'String' lvalue Var 0x55a56908c380 'str' 'String'
|       `-CompoundStmt 0x55a56908ce50 <col:61, line:753:9>
|         |-DeclStmt 0x55a56908c9f0 <line:751:13, col:63>
|         | `-VarDecl 0x55a56908c668 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a56908c9c0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a56908c930 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a56908c978 <col:47> 'T' lvalue ParmVar 0x55a569064138 'variable' 'T &'
|         |     `-UnaryOperator 0x55a56908c9a8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a56908c998 <col:58> 'Args *' this
|         `-CallExpr 0x55a56908ce20 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55a56908ca18 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|           | `-CXXThisExpr 0x55a56908ca08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a56908cde0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a56908ca48 <col:23> 'T *' lvalue Var 0x55a56908c668 's' 'T *'
|           | `-CallExpr 0x55a56908cda0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a56908cc30 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a56908cc78 <col:56> 'P' lvalue ParmVar 0x55a569064090 'parser' 'P'
|           |   |-DeclRefExpr 0x55a56908cc98 <col:64> 'String' lvalue Var 0x55a56908c380 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a56908cd48 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a56908ccd8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|           |   | `-DeclRefExpr 0x55a56908ccb8 <col:70> 'T *' lvalue Var 0x55a56908c668 's' 'T *'
|           |   `-UnaryOperator 0x55a56908cd88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a56908cd78 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55a56908ce00 <col:81> 'Args::Slot *' lvalue Var 0x55a56908c2f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a569064978 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a569064390 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a569064408 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55a569064488 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5690648d8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a569064550 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5690645d0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a569064648 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55a5690646e8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55a569064788 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55a56908ff88 <col:98, line:762:5>
|     |-DeclStmt 0x55a56908cf40 <line:758:9, col:26>
|     | `-VarDecl 0x55a56908ced8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a56908d160 <line:759:9, col:55>
|     | `-VarDecl 0x55a56908cf68 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a56908d148 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a56908d118 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a56908d100 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a56908d0e0 <col:22, col:54> 'String' (CXXTemporary 0x55a56908d0e0)
|     |           `-CXXMemberCallExpr 0x55a56908d070 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a56908cfe0 <col:22> '<bound member function type>' ->find 0x55a569082628
|     |             | `-CXXThisExpr 0x55a56908cfd0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a56908d0a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a56908d010 <col:27> 'const char *' lvalue ParmVar 0x55a569064550 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a56908d0c0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a56908d030 <col:36> 'int' lvalue ParmVar 0x55a5690645d0 'flags' 'int'
|     |             `-DeclRefExpr 0x55a56908d050 <col:43> 'Args::Slot *' lvalue Var 0x55a56908ced8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a56908d580 <line:760:9, col:59>
|     | `-VarDecl 0x55a56908d1b8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a56908d550 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a56908d4c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a56908d508 <col:43> 'T' lvalue ParmVar 0x55a5690646e8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a56908d538 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a56908d528 <col:54> 'Args *' this
|     `-CallExpr 0x55a56908ff58 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55a56908d5a8 <col:9> '<bound member function type>' ->postparse 0x55a569082838
|       | `-CXXThisExpr 0x55a56908d598 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a56908ff18 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a56908d5d8 <col:19> 'T *' lvalue Var 0x55a56908d1b8 's' 'T *'
|       | `-ParenExpr 0x55a56908fef8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55a56908fec8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a56908feb0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a56908fe98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a56908fe78 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a56908fe48 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|       |     |       `-ImplicitCastExpr 0x55a56908fe30 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a56908d5f8 <col:25> 'String' lvalue Var 0x55a56908cf68 'str' 'String'
|       |     |-CallExpr 0x55a56908fca0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a56908fb30 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55a56908fb78 <col:59> 'P' lvalue ParmVar 0x55a569064648 'parser' 'P'
|       |     | |-DeclRefExpr 0x55a56908fb98 <col:67> 'String' lvalue Var 0x55a56908cf68 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a56908fc48 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a56908fbd8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|       |     | | `-DeclRefExpr 0x55a56908fbb8 <col:73> 'T *' lvalue Var 0x55a56908d1b8 's' 'T *'
|       |     | `-UnaryOperator 0x55a56908fc88 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a56908fc78 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55a56908fe10 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55a56908fdf0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a56908fdc0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a56908fd70 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a56908fd00 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|       |         | | `-DeclRefExpr 0x55a56908fce0 <col:87> 'T *' lvalue Var 0x55a56908d1b8 's' 'T *'
|       |         | `-DeclRefExpr 0x55a56908fda0 <col:91> 'const V' lvalue ParmVar 0x55a569064788 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a56908fde0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55a56908ff38 <col:106> 'Args::Slot *' lvalue Var 0x55a56908ced8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a56906cc48 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55a5690649f8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a569064a78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a569064af8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a56906cba8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a569064bc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a569064c40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a569064cb8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55a569064d58 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55a56906ca50 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55a569090f68 <col:60, line:773:5>
|     |-DeclStmt 0x55a569090030 <line:767:9, col:26>
|     | `-VarDecl 0x55a56908ffc8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a569090f30 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55a569090f50 <line:768:13, col:58>
|       | `-VarDecl 0x55a569090058 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a569090238 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a569090208 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a5690901f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a5690901d0 <col:26, col:58> 'String' (CXXTemporary 0x55a5690901d0)
|       |           `-CXXMemberCallExpr 0x55a569090160 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a5690900d0 <col:26> '<bound member function type>' ->find 0x55a569082628
|       |             | `-CXXThisExpr 0x55a5690900c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a569090198 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a569090100 <col:31> 'const char *' lvalue ParmVar 0x55a569064bc0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a5690901b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a569090120 <col:40> 'int' lvalue ParmVar 0x55a569064c40 'flags' 'int'
|       |             `-DeclRefExpr 0x55a569090140 <col:47> 'Args::Slot *' lvalue Var 0x55a56908ffc8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a5690902f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a5690902d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a5690902b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a569090288 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|       |       `-ImplicitCastExpr 0x55a569090270 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a569090250 <col:20> 'String' lvalue Var 0x55a569090058 'str' 'String'
|       `-CompoundStmt 0x55a569090f08 <col:61, line:772:9>
|         |-DeclStmt 0x55a569090630 <line:769:13, col:66>
|         | `-VarDecl 0x55a569090348 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55a569090600 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a569090570 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a5690905b8 <col:49> 'T1' lvalue ParmVar 0x55a569064d58 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55a5690905e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a5690905d8 <col:61> 'Args *' this
|         |-DeclStmt 0x55a5690909a0 <line:770:13, col:66>
|         | `-VarDecl 0x55a5690906b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55a569090970 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a5690908e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a569090928 <col:49> 'T2' lvalue ParmVar 0x55a56906ca50 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55a569090958 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a569090948 <col:61> 'Args *' this
|         `-CallExpr 0x55a569090ed8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55a5690909c8 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|           | `-CXXThisExpr 0x55a5690909b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a569090e98 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55a569090a38 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55a5690909f8 <col:23> 'T1 *' lvalue Var 0x55a569090348 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55a569090a18 <col:29> 'T2 *' lvalue Var 0x55a5690906b8 's2' 'T2 *'
|           | `-CallExpr 0x55a569090e50 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a569090c20 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a569090c68 <col:63> 'P' lvalue ParmVar 0x55a569064cb8 'parser' 'P'
|           |   |-DeclRefExpr 0x55a569090c88 <col:71> 'String' lvalue Var 0x55a569090058 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a569090d38 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a569090cc8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|           |   | `-DeclRefExpr 0x55a569090ca8 <col:77> 'T1 *' lvalue Var 0x55a569090348 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55a569090df8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a569090d88 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|           |   | `-DeclRefExpr 0x55a569090d68 <col:82> 'T2 *' lvalue Var 0x55a5690906b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55a569090e38 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a569090e28 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55a569090eb8 <col:94> 'Args::Slot *' lvalue Var 0x55a56908ffc8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a56906d038 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55a56906ccc8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56906cf98 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a56906cd80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56906ce00 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a56906ce78 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a569091480 <col:67, line:780:5>
|     |-DeclStmt 0x55a569091000 <line:777:9, col:26>
|     | `-VarDecl 0x55a569090f98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a569091448 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55a569091468 <line:778:13, col:58>
|       | `-VarDecl 0x55a569091028 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a569091208 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a5690911d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a5690911c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a5690911a0 <col:26, col:58> 'String' (CXXTemporary 0x55a5690911a0)
|       |           `-CXXMemberCallExpr 0x55a569091130 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a5690910a0 <col:26> '<bound member function type>' ->find 0x55a569082628
|       |             | `-CXXThisExpr 0x55a569091090 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a569091168 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5690910d0 <col:31> 'const char *' lvalue ParmVar 0x55a56906cd80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a569091180 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5690910f0 <col:40> 'int' lvalue ParmVar 0x55a56906ce00 'flags' 'int'
|       |             `-DeclRefExpr 0x55a569091110 <col:47> 'Args::Slot *' lvalue Var 0x55a569090f98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a5690912c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a5690912a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a569091288 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a569091258 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|       |       `-ImplicitCastExpr 0x55a569091240 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a569091220 <col:20> 'String' lvalue Var 0x55a569091028 'str' 'String'
|       `-CallExpr 0x55a569091418 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55a5690912e8 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|         | `-CXXThisExpr 0x55a5690912d8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55a5690913c8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55a569091338 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55a569091318 <col:23> 'P' lvalue ParmVar 0x55a56906ce78 'parser' 'P'
|         | |-DeclRefExpr 0x55a569091380 <col:36> 'String' lvalue Var 0x55a569091028 'str' 'String'
|         | `-UnaryOperator 0x55a5690913b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55a5690913a0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55a5690913f8 <col:49> 'Args::Slot *' lvalue Var 0x55a569090f98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a56906d3d8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a56906d0a8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a56906d338 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a56906d160 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56906d1e0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a56906d258 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55a569091df0 <col:71, line:792:5>
|     |-DeclStmt 0x55a569091518 <line:784:9, col:26>
|     | `-VarDecl 0x55a5690914b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a5690915e8 <line:785:9, col:29>
|     | `-VarDecl 0x55a569091548 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a5690915d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a5690915b0 <col:28> 'int' 1
|     |-WhileStmt 0x55a569091ca0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55a569091cc0 <line:786:16, col:61>
|     | | `-VarDecl 0x55a569091610 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a5690917f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a5690917c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a5690917a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a569091788 <col:29, col:61> 'String' (CXXTemporary 0x55a569091788)
|     | |           `-CXXMemberCallExpr 0x55a569091718 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a569091688 <col:29> '<bound member function type>' ->find 0x55a569082628
|     | |             | `-CXXThisExpr 0x55a569091678 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a569091750 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a5690916b8 <col:34> 'const char *' lvalue ParmVar 0x55a56906d160 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a569091768 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a5690916d8 <col:43> 'int' lvalue ParmVar 0x55a56906d1e0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a5690916f8 <col:50> 'Args::Slot *' lvalue Var 0x55a5690914b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a5690918a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a569091890 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a569091870 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a569091840 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|     | |       `-ImplicitCastExpr 0x55a569091828 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a569091808 <col:23> 'String' lvalue Var 0x55a569091610 'str' 'String'
|     | `-CompoundStmt 0x55a569091c78 <col:64, line:790:9>
|     |   |-CallExpr 0x55a569091a00 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55a5690918d0 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|     |   | | `-CXXThisExpr 0x55a5690918c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a5690919b0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a569091920 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a569091900 <col:23> 'P' lvalue ParmVar 0x55a56906d258 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a569091968 <col:36> 'String' lvalue Var 0x55a569091610 'str' 'String'
|     |   | | `-UnaryOperator 0x55a569091998 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a569091988 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55a5690919e0 <col:49> 'Args::Slot *' lvalue Var 0x55a5690914b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a569091b98 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a569091a30 <col:13> 'int' lvalue Var 0x55a569091548 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a569091b80 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a569091b60 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a569091ac8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a569091aa8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a569091a90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a569091a50 <col:28> 'int' lvalue Var 0x55a569091548 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a569091a70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a569091b48 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a569091b18 <col:49> 'bool' lvalue ->_read_status 0x55a568f65dc0
|     |   |         `-ImplicitCastExpr 0x55a569091af8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a569091ae8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a569091c48 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a569091bb8 <col:13> 'int' lvalue ParmVar 0x55a56906d1e0 'flags' 'int'
|     |     `-UnaryOperator 0x55a569091c30 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a569091c18 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a569091bf8 <col:23> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a569091dd0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a569091d08 <col:9> 'bool' lvalue ->_read_status 0x55a568f65dc0
|       | `-ImplicitCastExpr 0x55a569091ce8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a569091cd8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a569091db0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a569091d90 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a569091d78 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a569091d38 <col:25> 'int' lvalue Var 0x55a569091548 'read_status' 'int'
|           `-IntegerLiteral 0x55a569091d58 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a56906d8b8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a56906d448 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56906d4c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56906d818 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a56906d588 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56906d608 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a56906d680 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55a56906d728 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55a569092d80 <col:84, line:805:5>
|     |-DeclStmt 0x55a569091e98 <line:796:9, col:26>
|     | `-VarDecl 0x55a569091e30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a569091f68 <line:797:9, col:29>
|     | `-VarDecl 0x55a569091ec8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a569091f50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a569091f30 <col:28> 'int' 1
|     |-DeclStmt 0x55a5690922a0 <line:798:9, col:71>
|     | `-VarDecl 0x55a569091fb8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a569092270 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a5690921e0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55a569092228 <col:55> 'T' lvalue ParmVar 0x55a56906d728 'variable' 'T &'
|     |     `-UnaryOperator 0x55a569092258 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a569092248 <col:66> 'Args *' this
|     |-WhileStmt 0x55a569092c30 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55a569092c50 <line:799:16, col:61>
|     | | `-VarDecl 0x55a5690922c8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a5690924a8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a569092478 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a569092460 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a569092440 <col:29, col:61> 'String' (CXXTemporary 0x55a569092440)
|     | |           `-CXXMemberCallExpr 0x55a5690923d0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a569092340 <col:29> '<bound member function type>' ->find 0x55a569082628
|     | |             | `-CXXThisExpr 0x55a569092330 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a569092408 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a569092370 <col:34> 'const char *' lvalue ParmVar 0x55a56906d588 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a569092420 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a569092390 <col:43> 'int' lvalue ParmVar 0x55a56906d608 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a5690923b0 <col:50> 'Args::Slot *' lvalue Var 0x55a569091e30 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a569092560 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a569092548 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a569092528 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a5690924f8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|     | |       `-ImplicitCastExpr 0x55a5690924e0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a5690924c0 <col:23> 'String' lvalue Var 0x55a5690922c8 'str' 'String'
|     | `-CompoundStmt 0x55a569092c08 <col:64, line:803:9>
|     |   |-CallExpr 0x55a569092990 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55a569092588 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|     |   | | `-CXXThisExpr 0x55a569092578 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55a569092950 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55a5690925b8 <col:23> 'T *' lvalue Var 0x55a569091fb8 's' 'T *'
|     |   | | `-CallExpr 0x55a569092910 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55a5690927a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55a5690927e8 <col:56> 'P' lvalue ParmVar 0x55a56906d680 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55a569092808 <col:64> 'String' lvalue Var 0x55a5690922c8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55a5690928b8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55a569092848 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|     |   | |   | `-DeclRefExpr 0x55a569092828 <col:70> 'T *' lvalue Var 0x55a569091fb8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55a5690928f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55a5690928e8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55a569092970 <col:81> 'Args::Slot *' lvalue Var 0x55a569091e30 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a569092b28 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a5690929c0 <col:13> 'int' lvalue Var 0x55a569091ec8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a569092b10 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a569092af0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a569092a58 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a569092a38 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a569092a20 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a5690929e0 <col:28> 'int' lvalue Var 0x55a569091ec8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a569092a00 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a569092ad8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a569092aa8 <col:49> 'bool' lvalue ->_read_status 0x55a568f65dc0
|     |   |         `-ImplicitCastExpr 0x55a569092a88 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a569092a78 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a569092bd8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a569092b48 <col:13> 'int' lvalue ParmVar 0x55a56906d608 'flags' 'int'
|     |     `-UnaryOperator 0x55a569092bc0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a569092ba8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a569092b88 <col:23> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a569092d60 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a569092c98 <col:9> 'bool' lvalue ->_read_status 0x55a568f65dc0
|       | `-ImplicitCastExpr 0x55a569092c78 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a569092c68 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a569092d40 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a569092d20 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a569092d08 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a569092cc8 <col:25> 'int' lvalue Var 0x55a569091ec8 'read_status' 'int'
|           `-IntegerLiteral 0x55a569092ce8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a56906de98 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55a56906d930 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a56906d9a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a56906ddf8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a56906da68 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a56906dae8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55a56906db60 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55a56906dcb0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55a569093b88 <col:87, line:821:5>
|     |-DeclStmt 0x55a569092e30 <line:809:9, col:26>
|     | `-VarDecl 0x55a569092dc8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a569092f00 <line:810:9, col:29>
|     | `-VarDecl 0x55a569092e60 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a569092ee8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a569092ec8 <col:28> 'int' 1
|     |-DeclStmt 0x55a569093148 <line:811:9, col:38>
|     | `-VarDecl 0x55a569093030 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55a569093120 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a5690930a8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a569093100 <col:29> 'Vector<T>' lvalue ParmVar 0x55a56906dcb0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55a569093a38 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55a569093a58 <line:812:16, col:61>
|     | | `-VarDecl 0x55a569093170 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a569093350 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a569093320 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a569093308 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a5690932e8 <col:29, col:61> 'String' (CXXTemporary 0x55a5690932e8)
|     | |           `-CXXMemberCallExpr 0x55a569093278 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a5690931e8 <col:29> '<bound member function type>' ->find 0x55a569082628
|     | |             | `-CXXThisExpr 0x55a5690931d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a5690932b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a569093218 <col:34> 'const char *' lvalue ParmVar 0x55a56906da68 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a5690932c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a569093238 <col:43> 'int' lvalue ParmVar 0x55a56906dae8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a569093258 <col:50> 'Args::Slot *' lvalue Var 0x55a569092dc8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a569093408 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a5690933f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a5690933d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a5690933a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a568db2e28
|     | |       `-ImplicitCastExpr 0x55a569093388 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a569093368 <col:23> 'String' lvalue Var 0x55a569093170 'str' 'String'
|     | `-CompoundStmt 0x55a569093a00 <col:64, line:819:9>
|     |   |-DeclStmt 0x55a5690934c8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55a569093430 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55a5690934a8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55a569093648 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55a5690934f0 <col:13> '<bound member function type>' ->postparse 0x55a569082838
|     |   | | `-CXXThisExpr 0x55a5690934e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a5690935f0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a569093540 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a569093520 <col:23> 'P' lvalue ParmVar 0x55a56906db60 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a569093588 <col:36> 'String' lvalue Var 0x55a569093170 'str' 'String'
|     |   | | |-DeclRefExpr 0x55a5690935a8 <col:41> 'T' lvalue Var 0x55a569093430 'sx' 'T'
|     |   | | `-UnaryOperator 0x55a5690935d8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a5690935c8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55a569093628 <col:53> 'Args::Slot *' lvalue Var 0x55a569092dc8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55a5690937a0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55a5690936d8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55a5690936a8 <col:17> 'bool' lvalue ->_read_status 0x55a568f65dc0
|     |   | |   `-ImplicitCastExpr 0x55a569093688 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55a569093678 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55a569093778 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55a569093710 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55a5690936f0 <col:17> 'Vector<T> *' lvalue Var 0x55a569093030 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55a569093758 <col:30> 'T' lvalue Var 0x55a569093430 'sx' 'T'
|     |   |-BinaryOperator 0x55a569093920 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a5690937b8 <col:13> 'int' lvalue Var 0x55a569092e60 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a569093908 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a5690938e8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a569093850 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a569093830 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a569093818 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a5690937d8 <col:28> 'int' lvalue Var 0x55a569092e60 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a5690937f8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a5690938d0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a5690938a0 <col:49> 'bool' lvalue ->_read_status 0x55a568f65dc0
|     |   |         `-ImplicitCastExpr 0x55a569093880 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a569093870 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a5690939d0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a569093940 <col:13> 'int' lvalue ParmVar 0x55a56906dae8 'flags' 'int'
|     |     `-UnaryOperator 0x55a5690939b8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a5690939a0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a569093980 <col:23> 'const int' lvalue Var 0x55a569051608 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a569093b68 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a569093aa0 <col:9> 'bool' lvalue ->_read_status 0x55a568f65dc0
|       | `-ImplicitCastExpr 0x55a569093a80 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a569093a70 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a569093b48 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a569093b28 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a569093b10 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a569093ad0 <col:25> 'int' lvalue Var 0x55a569092e60 'read_status' 'int'
|           `-IntegerLiteral 0x55a569093af0 <col:40> 'int' 1
|-AccessSpecDecl 0x55a56906df10 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55a56906df38 prev 0x55a56904f908 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55a56906e030 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55a56906e120 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55a569093bc0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55a56906e210 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55a569093bd0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55a56906e310 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55a56906e3c0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55a56906e468 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a56906e468
| | `-ParmVarDecl 0x55a56906e578 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55a56906ed38 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a56906ed38
|   `-ParmVarDecl 0x55a56906ee48 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55a56906e5e8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55a56906e748 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55a56906e940 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55a56906e7f0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55a56906e868 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55a569093db0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55a56906ebf8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55a569093c20 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a569093be0 <col:20> 'void *' lvalue ParmVar 0x55a56906e7f0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55a56906ec60 '_slot' 'char *'
| | | `-CXXNewExpr 0x55a569093ca8 <col:32, col:45> 'char *' array Function 0x55a568bd5a98 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55a569093c90 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55a569093c60 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55a56906e868 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55a56906ecc0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55a569093d70 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a569093d30 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55a56906e868 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55a569093e30 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55a56906ea40 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55a56906e210 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55a569093eb8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55a569093e98 <line:840:13, col:22> 'void' array Function 0x55a568bd5df8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55a569093e80 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55a569093e50 <col:22> 'char *' lvalue ->_slot 0x55a56906ec60
| |         `-CXXThisExpr 0x55a569093e40 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55a56906eb40 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55a56906e310 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55a5690940a8 <col:22, line:844:9>
| |   `-CallExpr 0x55a569094010 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55a569093ff8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55a569093fd8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55a568ce1878 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55a569094048 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55a569093f28 <col:20> 'void *' lvalue ->_ptr 0x55a56906ebf8
| |     |   `-CXXThisExpr 0x55a569093f18 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55a569094078 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55a569094060 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55a569093f68 <col:26> 'char *' lvalue ->_slot 0x55a56906ec60
| |     |     `-CXXThisExpr 0x55a569093f58 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55a569094090 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55a569093fa8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55a56906ecc0
| |         `-CXXThisExpr 0x55a569093f98 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55a56906ebf8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55a56906ec60 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55a56906ecc0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55a56906eeb8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a56906eeb8
| | `-ParmVarDecl 0x55a56906efc8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55a56906f068 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a56906f068
|   `-ParmVarDecl 0x55a56906f178 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55a56906f318 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55a56906f1e8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55a56906f288 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55a56906f5b0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55a56906f7a8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55a56906f678 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55a56906f928 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55a5690940e0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55a5690940c0 <col:20> 'T *' lvalue ParmVar 0x55a56906f678 'ptr' 'T *'
|   | `-CompoundStmt 0x55a569094130 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55a56906f878 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55a56906e310 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55a5690942e0 <col:22, line:857:9>
|   |   `-CallExpr 0x55a5690942b0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55a569094140 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55a568d99fa8 0x55a568d442d8
|   |     |-CXXOperatorCallExpr 0x55a569094240 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55a5690941d0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a568fa6f58 0x55a568fa6b78 0x55a568fa67a8 0x55a568fa63c8 0x55a568fa5fe8 0x55a568fa5c18
|   |     | `-MemberExpr 0x55a5690941a0 <col:29> 'T *' lvalue ->_ptr 0x55a56906f928
|   |     |   `-CXXThisExpr 0x55a569094190 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55a569094280 <col:35> 'T' lvalue ->_slot 0x55a56906f988
|   |       `-CXXThisExpr 0x55a569094270 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55a56906f928 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55a56906f988 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55a56906f9f0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55a56906faf0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55a56906fb40 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a56906fad0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55a56906fab0 <col:31> 'int' 48
|-FieldDecl 0x55a56906fb68 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55a56906fbc8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55a56906fc28 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55a56906fd60 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55a569081ed0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55a569081f30 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55a569081fe0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55a569082208 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55a569082110 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55a569082358 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55a5690822c8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55a569082628 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55a569082418 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55a569082498 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55a569082540 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55a569082838 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55a5690826f0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55a569082768 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55a569082908 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55a569082a58 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55a5690829c0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55a569082de8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55a569082b18 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55a569082b98 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55a569082c40 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55a569082cf8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55a569083010 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55a569082ec0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55a569082f38 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55a569083328 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55a5690830c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55a569083288 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55a569083198 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568da2cd0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a568da2de8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55a568da2e78 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55a568da2f48 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55a568da3030 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568da3248 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a568da30f0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da33f8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a568da3300 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a568da3540 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a568da34b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a568da3688 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a568da35f8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da37d0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a568da3740 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da3898 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55a568da39e0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55a568da3950 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a568da3aa8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55a568da3bf0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55a568da3b60 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a568da3d68 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a568da3ca8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da3eb0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a568da3e20 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da3f78 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55a568da4138 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a568da4028 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a568da40a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da4388 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a568da41f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568da4270 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a568da4438 <col:86> "" ""
|-CXXMethodDecl 0x55a568da46a8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55a568da4518 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55a568da4590 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da4858 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a568da4768 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a568da4a08 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a568da4910 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a568da4cd8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a568da4ac0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a568da4b38 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a568da4bb0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da4fb8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a568da4da0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a568da4e18 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568da4e90 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a568da5070 <col:115> "" ""
|-AccessSpecDecl 0x55a568da50e0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55a568da5118 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568da6630 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a568da6630
| `-ParmVarDecl 0x55a568da6738 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55a568da67d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a568da67d8
| `-ParmVarDecl 0x55a568da68e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55a568ddbf18 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a568fcdd10 <col:7>
|-CXXConstructorDecl 0x55a568ddbff0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a568ddbff0
| `-ParmVarDecl 0x55a568ddc108 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55a568ddc178 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a568ddc178
| `-ParmVarDecl 0x55a568ddc288 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55a568fd0710 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568fbc8b8 prev 0x55a568fb1ac0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a568fbc9b0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55a568fbcaa0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55a568fbcbc8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55a568fbcd48 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55a568fbcec8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55a568fbd048 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55a568fcde78 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a568fce6e8 <col:11>
|-CXXDestructorDecl 0x55a568fcdf50 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a568fce088 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a568fce088
| `-ParmVarDecl 0x55a568fce198 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55a568fce238 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a568fce238
| `-ParmVarDecl 0x55a568fce348 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55a568fd1108 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a568fd1218 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55a568fd1498 <col:11>
|   `-ReturnStmt 0x55a568fd1488 <col:11>
|     `-UnaryOperator 0x55a568fd1470 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a568fd1460 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55a568fd1288 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a568fd1288
  `-ParmVarDecl 0x55a568fd1398 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568fbd0b0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a568fbd1c8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55a568fbd268 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55a568fbd2d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55a568fbd338 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55a568fbd3a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55a568fbd400 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55a568fbd4c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55a568fbd520 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55a568fbd580 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55a568fcdd88 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55a568fbd268 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55a568fce6f8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55a568fce750 <col:12>
|-CXXConstructorDecl 0x55a568fce3b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a568fce3b8
| `-ParmVarDecl 0x55a568fce4c8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55a568fce568 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a568fce568
| `-ParmVarDecl 0x55a568fce678 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55a568fd07f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568fab1d0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a568fab2e8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55a568fab378 <col:16, col:22> col:16 public
|-EnumDecl 0x55a568fab3a0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55a568fab4a0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55a568fab580 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fab480 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55a568fab460 <col:21> 'int' 28
| `-EnumConstantDecl 0x55a568fab530 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55a568fab598 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fab510 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55a568fab4f0 <col:22> 'int' 64
|-CXXMethodDecl 0x55a568fab8d8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a568fab5c0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568fab640 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55a568fab6b8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568fab730 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a568fab998 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a568fabb98 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55a568faba10 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55a568faba88 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a568fabc48 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a568fabda8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55a568fabcb8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a568fabe50 <col:72> warn_unused_result ""
|-TypedefDecl 0x55a568fac1b0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55a568fac140 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55a568fac0e0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55a568fac0a0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55a568a832d0 'void'
|       |-PointerType 0x55a568d2b570 'unsigned char *'
|       | `-BuiltinType 0x55a568a833d0 'unsigned char'
|       |-TypedefType 0x55a568b27ae0 'size_t' sugar
|       | |-Typedef 0x55a568af3b20 'size_t'
|       | `-BuiltinType 0x55a568a83430 'unsigned long'
|       `-PointerType 0x55a568a83ad0 'void *'
|         `-BuiltinType 0x55a568a832d0 'void'
|-CXXMethodDecl 0x55a568fac628 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55a568fac220 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55a568fac298 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568fac330 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55a568fac3b0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55a568fc6d20 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55a568fc6d08 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55a568fc6cd0 <col:58> 'int' 0
| |-ParmVarDecl 0x55a568fac430 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55a568fc6d48 <col:76> 'int' 0
| |-ParmVarDecl 0x55a568fac4b0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55a568fc6d68 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55a568fac6f8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55a568fac778 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a568fac838 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55a568fac8d8 <col:20>
| `-OptimizeNoneAttr 0x55a568fac930 <col:30>
|-CXXMethodDecl 0x55a568fac9a8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55a568faca48 <col:20>
| `-OptimizeNoneAttr 0x55a568facaa0 <col:30>
|-CXXMethodDecl 0x55a568facb18 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55a568facbb8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55a568facc68 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55a568facd08 <col:20>
| |-OptimizeNoneAttr 0x55a568facd60 <col:30>
| `-WarnUnusedResultAttr 0x55a568facd88 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55a568facde0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a568face80 <col:20>
| `-OptimizeNoneAttr 0x55a568faced8 <col:30>
|-CXXMethodDecl 0x55a568facf28 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a568facfc8 <col:20>
| `-OptimizeNoneAttr 0x55a568fad020 <col:30>
|-CXXMethodDecl 0x55a568fad068 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55a568fad108 <col:20>
| `-OptimizeNoneAttr 0x55a568fad160 <col:30>
|-CXXMethodDecl 0x55a568fad1a8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568fad268 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568fad330 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a568fad3f8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a568fad4b8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568fad5d8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55a568fc6e30 <col:54, line:99:5>
|   `-ReturnStmt 0x55a568fc6e20 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55a568fc6e08 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55a568fc6dd8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a568fbd8b8
|         `-CXXThisExpr 0x55a568fc6dc8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a568fad778 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55a568fad688 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55a568fc6ee0 <col:67, line:103:5>
|   `-BinaryOperator 0x55a568fc6ec0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a568fc6e58 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a568fbd8b8
|     | `-CXXThisExpr 0x55a568fc6e48 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a568fc6ea8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55a568fc6e88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55a568fad688 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55a568fad870 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55a568fc6f60 <col:33, line:107:5>
|   `-ReturnStmt 0x55a568fc6f50 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55a568fc6f38 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55a568fc6f08 <col:16> 'void *' lvalue ->_destructor_argument 0x55a568fbd920
|         `-CXXThisExpr 0x55a568fc6ef8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a568fad930 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55a568fc7590 <col:25, line:113:5>
|   |-ParenExpr 0x55a568fc72d8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55a568fc72a8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fc7018 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a568fc6ff0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55a568fc6fb8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55a568fc6f88 <col:24> '<bound member function type>' ->shared 0x55a568fac9a8
|   |   |       `-ImplicitCastExpr 0x55a568fc6fd8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55a568fc6f78 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a568fc7078 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fc7058 <col:42> 'int' 0
|   |   `-CallExpr 0x55a568fc7208 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55a568fc71f0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fc71d0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fc7248 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc70e8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55a568fc7260 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc7110 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fc7278 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fc7148 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55a568fc7290 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fc71b8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fc71a0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fc7168 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55a568fc74d8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55a568fc7308 <col:2> 'unsigned char *' lvalue ->_head 0x55a568fbd6c0
|   | | `-CXXThisExpr 0x55a568fc72f8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55a568fc74c0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55a568fc74a0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55a568fc7348 <col:10> 'unsigned char *' lvalue ->_data 0x55a568fbd728
|   |     | `-CXXThisExpr 0x55a568fc7338 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55a568fc7488 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55a568fc7468 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55a568fc7388 <col:18> 'unsigned char *' lvalue ->_tail 0x55a568fbd790
|   |         | `-CXXThisExpr 0x55a568fc7378 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55a568fc7450 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55a568fc7430 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55a568fc73c8 <col:26> 'unsigned char *' lvalue ->_end 0x55a568fbd7f8
|   |             | `-CXXThisExpr 0x55a568fc73b8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55a568fc7418 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55a568fc73f8 <col:33> 'int' 0
|   `-BinaryOperator 0x55a568fc7570 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a568fc7508 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a568fbd8b8
|     | `-CXXThisExpr 0x55a568fc74f8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a568fc7558 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55a568fc7538 <col:16> 'int' 0
|-CXXMethodDecl 0x55a568fada70 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a568fad9e0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fadb18 <col:20>
| |-OptimizeNoneAttr 0x55a568fadb70 <col:30>
| `-WarnUnusedResultAttr 0x55a568fadb98 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a568fadc68 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a568fadbd8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fadd10 <col:20>
| |-OptimizeNoneAttr 0x55a568fadd68 <col:30>
| `-WarnUnusedResultAttr 0x55a568fadd90 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55a568fadec8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a568faddd0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a568fadf70 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55a568fae070 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55a568fadfe0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fae118 <col:20>
| `-OptimizeNoneAttr 0x55a568fae170 <col:30>
|-CXXMethodDecl 0x55a568fae238 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a568fae1a8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a568fae2e0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55a568fae3e0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a568fae350 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a568fae488 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a568fae588 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55a568fae4f8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fae630 <col:20>
| `-OptimizeNoneAttr 0x55a568fae688 <col:30>
|-CXXMethodDecl 0x55a568fae818 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55a568fae6c8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55a568fae740 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55a568fc6d88 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55a568fae8c8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55a568faeac8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a568fae940 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55a568fae9b8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568faecd8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a568faeb88 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a568faec00 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568faeee8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55a568faed98 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55a568faee18 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55a568fc6d98 <col:39> 'int' 0
|-CXXMethodDecl 0x55a568faefb8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55a568faf080 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a568faf148 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a568faf208 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568faf2d0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55a568faf418 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55a568faf388 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55a568faf5e8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a568faf4d8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55a568faf550 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568faf6b8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55a568faf778 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55a568faf818 <col:20>
| `-OptimizeNoneAttr 0x55a568faf870 <col:30>
|-CXXMethodDecl 0x55a568faf8c0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a568faf960 <col:20>
| `-OptimizeNoneAttr 0x55a568faf9b8 <col:30>
|-CXXMethodDecl 0x55a568fafa08 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a568fafac8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568fafb90 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55a568fafc30 <col:20>
| `-OptimizeNoneAttr 0x55a568fafc88 <col:30>
|-CXXMethodDecl 0x55a568fafdd8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a568fafcc8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55a568fafd40 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568faff28 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55a568fafe98 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568fb0000 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55a568fb00c0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55a568fb0160 <col:20>
| `-OptimizeNoneAttr 0x55a568fb01b8 <col:30>
|-CXXMethodDecl 0x55a568fb0208 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a568fb02a8 <col:20>
| `-OptimizeNoneAttr 0x55a568fb0300 <col:30>
|-CXXMethodDecl 0x55a568fb0350 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a568fb0418 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55a568fb04b8 <col:20>
| `-OptimizeNoneAttr 0x55a568fb0510 <col:30>
|-CXXMethodDecl 0x55a568fb0558 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55a568fb0678 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55a568fb07e8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55a568fb0728 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55a568fb08d8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55a568fb0978 <col:20>
| `-OptimizeNoneAttr 0x55a568fb09d0 <col:30>
|-CXXMethodDecl 0x55a568fb0a20 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a568fb0ae0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a568fb0d18 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55a568fb0b90 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55a568fb0c08 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fb0dc8 <col:20>
| `-OptimizeNoneAttr 0x55a568fb0e20 <col:30>
|-CXXMethodDecl 0x55a568fb0ec8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55a568fb0f68 <col:20>
| `-OptimizeNoneAttr 0x55a568fb0fc0 <col:30>
|-CXXMethodDecl 0x55a568fb1010 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55a568fb10b0 <col:20>
| `-OptimizeNoneAttr 0x55a568fb1108 <col:30>
|-CXXMethodDecl 0x55a568fb1150 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55a568fb11f0 <col:20>
| `-OptimizeNoneAttr 0x55a568fb1248 <col:30>
|-CXXMethodDecl 0x55a568fb1348 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55a568fb1280 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55a568fb13f0 <col:20>
| `-OptimizeNoneAttr 0x55a568fb1448 <col:30>
|-CXXMethodDecl 0x55a568fb1608 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55a568fb1480 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55a568fb14f8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fb16b8 <col:20>
| `-OptimizeNoneAttr 0x55a568fb1710 <col:30>
|-CXXMethodDecl 0x55a568fb17b8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55a568fb18d8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55a568fb19f8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55a568fb1a98 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55a568fb1ac0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55a568fb1be8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55a568fb1c88 <col:20>
| `-OptimizeNoneAttr 0x55a568fb1ce0 <col:30>
|-CXXMethodDecl 0x55a568fb1d88 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55a568fb1e28 <col:20>
| `-OptimizeNoneAttr 0x55a568fb1e80 <col:30>
|-AccessSpecDecl 0x55a568fb1ea8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55a568fb1ed0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55a568fb1fd0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55a568fb2020 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fb1fb0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55a568fb1f90 <col:14> 'int' 48
|-CXXMethodDecl 0x55a568fb2088 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55a568fb2128 <col:20>
| `-OptimizeNoneAttr 0x55a568fb2180 <col:30>
|-CXXMethodDecl 0x55a568fb21f8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55a568fb2298 <col:20>
| `-OptimizeNoneAttr 0x55a568fb22f0 <col:30>
|-CXXMethodDecl 0x55a568fb23b8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55a568fb2328 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55a568fb2558 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55a568fb26f8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55a568fb2608 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55a568fb27a0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55a568fb28a0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a568fb2c50 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb2880 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55a568fb2860 <col:9> 'int' 0
| |-EnumConstantDecl 0x55a568fb2930 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a568fb2c68 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb2910 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55a568fb28f0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a568fb29c0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a568fb2c80 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb29a0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55a568fb2980 <col:14> 'int' 2
| |-EnumConstantDecl 0x55a568fb2a50 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a568fb2c98 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb2a30 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55a568fb2a10 <col:14> 'int' 3
| |-EnumConstantDecl 0x55a568fb2ae0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a568fb2cb0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb2ac0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55a568fb2aa0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55a568fb2b70 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a568fb2cc8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb2b50 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55a568fb2b30 <col:13> 'int' 5
| `-EnumConstantDecl 0x55a568fb2c00 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55a568fb2ce0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fb2be0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55a568fb2bc0 <col:14> 'int' 6
|-CXXMethodDecl 0x55a568fb2d48 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55a568fb2de8 <col:20>
| `-OptimizeNoneAttr 0x55a568fb2e40 <col:30>
|-CXXMethodDecl 0x55a568fb2f38 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55a568fb2e78 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55a568fb2fe0 <col:20>
| `-OptimizeNoneAttr 0x55a568fb3038 <col:30>
|-CXXMethodDecl 0x55a568fb30a8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55a568fb31d0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55a568fb3348 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55a568fb3280 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55a568fb3410 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55a568fb34d8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55a568fb3618 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55a568fb3588 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55a568fb36c0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55a568fb37c0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a568fb39c0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb37a0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55a568fb3780 <col:23> 'int' 0
| |-EnumConstantDecl 0x55a568fb3850 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a568fb39d8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb3830 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55a568fb3810 <col:45> 'int' 4
| |-EnumConstantDecl 0x55a568fb38e0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a568fb39f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb38c0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55a568fb38a0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55a568fb3970 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55a568fb3a08 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fb3950 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55a568fb3930 <col:47> 'int' 16
|-CXXMethodDecl 0x55a568fb3a68 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55a568fb3bd8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55a568fb3b18 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55a568fb3c80 <col:20>
| `-OptimizeNoneAttr 0x55a568fb3cd8 <col:30>
|-CXXMethodDecl 0x55a568fb3d28 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55a568fc76b0 <col:18, col:36>
|   `-ReturnStmt 0x55a568fc76a0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55a568fc7688 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a568fc7668 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55a568fc7638 <col:27> '<bound member function type>' ->xanno 0x55a568fb1d88
|           `-CXXThisExpr 0x55a568fc7628 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55a568fb3e20 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55a568fc77c0 <col:30, col:48>
|   `-ReturnStmt 0x55a568fc77b0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55a568fc7798 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a568fc7778 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55a568fc7748 <col:39> '<bound member function type>' ->xanno 0x55a568fb1be8
|           `-CXXThisExpr 0x55a568fc7738 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a568fb3f08 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55a568fc7958 <col:24, col:50>
|   `-ReturnStmt 0x55a568fc7948 <col:26, col:47>
|     `-UnaryOperator 0x55a568fc7930 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a568fc7910 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a568fc78f8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a568fc78a8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55a568fbcbc8
|         |   `-CXXMemberCallExpr 0x55a568fc7888 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a568fc7858 <col:34> '<bound member function type>' ->xanno 0x55a568fb1d88
|         |       `-CXXThisExpr 0x55a568fc7848 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a568fc78d8 <col:46> 'int' 0
|-CXXMethodDecl 0x55a568fb4010 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55a568fc7b28 <col:36, col:62>
|   `-ReturnStmt 0x55a568fc7b18 <col:38, col:59>
|     `-UnaryOperator 0x55a568fc7b00 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a568fc7ae0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a568fc7ac8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a568fc7a40 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55a568fbcbc8
|         |   `-CXXMemberCallExpr 0x55a568fc7a20 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a568fc79f0 <col:46> '<bound member function type>' ->xanno 0x55a568fb1be8
|         |       `-CXXThisExpr 0x55a568fc79e0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a568fc7a70 <col:58> 'int' 0
|-CXXMethodDecl 0x55a568fb4128 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55a568fc7cc0 <col:26, col:53>
|   `-ReturnStmt 0x55a568fc7cb0 <col:28, col:50>
|     `-UnaryOperator 0x55a568fc7c98 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a568fc7c78 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a568fc7c60 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a568fc7c10 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55a568fbcec8
|         |   `-CXXMemberCallExpr 0x55a568fc7bf0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a568fc7bc0 <col:36> '<bound member function type>' ->xanno 0x55a568fb1d88
|         |       `-CXXThisExpr 0x55a568fc7bb0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a568fc7c40 <col:49> 'int' 0
|-CXXMethodDecl 0x55a568fb4248 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55a568fc7e98 <col:38, col:65>
|   `-ReturnStmt 0x55a568fc7e88 <col:40, col:62>
|     `-UnaryOperator 0x55a568fc7e70 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a568fc7e50 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a568fc7e38 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a568fc7da8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55a568fbcec8
|         |   `-CXXMemberCallExpr 0x55a568fc7d88 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a568fc7d58 <col:48> '<bound member function type>' ->xanno 0x55a568fb1be8
|         |       `-CXXThisExpr 0x55a568fc7d48 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a568fc7dd8 <col:61> 'int' 0
|-CXXMethodDecl 0x55a568fb43f8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55a568fb4300 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55a568fc8568 <col:34, line:463:5>
|   |-ParenExpr 0x55a568fc83b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a568fc8380 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fc7fe8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fc7fb8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fc7f08 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fc7ef0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fc7eb0 <col:23> 'int' lvalue ParmVar 0x55a568fb4300 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fc7ed0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fc7f98 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fc7f68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fc7f28 <col:33> 'int' lvalue ParmVar 0x55a568fb4300 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a568fc7f80 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a568fc7f48 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a568fc8048 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fc8028 <col:56> 'int' 0
|   |   `-CallExpr 0x55a568fc82e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a568fc82c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fc82a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fc8320 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc8138 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a568fc8338 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc8168 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fc8350 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fc81a0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55a568fc8368 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fc8290 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fc8278 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fc8238 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55a568fc8558 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55a568fc8540 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55a568fc8520 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a568fc84f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a568fc84a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55a568fbcbc8
|         |   `-CXXMemberCallExpr 0x55a568fc8480 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a568fc8450 <col:9> '<bound member function type>' ->xanno 0x55a568fb1be8
|         |       `-CXXThisExpr 0x55a568fc8440 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55a568fc8508 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55a568fc84d0 <col:21> 'int' lvalue ParmVar 0x55a568fb4300 'i' 'int'
|-CXXMethodDecl 0x55a568fb4648 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55a568fb44b8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55a568fb4530 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55a568fc8bf8 <col:40, line:472:5>
|   |-ParenExpr 0x55a568fc8a10 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a568fc89e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fc86c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fc8690 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fc85e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fc85c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fc8588 <col:23> 'int' lvalue ParmVar 0x55a568fb44b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fc85a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fc8670 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fc8640 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fc8600 <col:33> 'int' lvalue ParmVar 0x55a568fb44b8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a568fc8658 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a568fc8620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a568fc8720 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fc8700 <col:56> 'int' 0
|   |   `-CallExpr 0x55a568fc8940 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a568fc8928 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fc8908 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fc8980 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc8790 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a568fc8998 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc87c0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fc89b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fc87f8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55a568fc89c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fc88f0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fc88d8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fc8898 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55a568fc8bd8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55a568fc8b80 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55a568fc8b50 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a568fc8b00 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55a568fbcbc8
|     | |   `-CXXMemberCallExpr 0x55a568fc8ae0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55a568fc8ab0 <col:2> '<bound member function type>' ->xanno 0x55a568fb1d88
|     | |       `-CXXThisExpr 0x55a568fc8aa0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55a568fc8b68 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a568fc8b30 <col:14> 'int' lvalue ParmVar 0x55a568fb44b8 'i' 'int'
|     `-ImplicitCastExpr 0x55a568fc8bc0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55a568fc8ba0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55a568fb4530 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55a568fb4808 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55a568fb4710 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a568fc9378 <col:36, line:485:5>
|   |-ParenExpr 0x55a568fc90e0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fc90b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fc8d90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fc8d60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fc8c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fc8c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fc8c18 <col:23> 'int' lvalue ParmVar 0x55a568fb4710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fc8c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fc8d40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fc8d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fc8c90 <col:33> 'int' lvalue ParmVar 0x55a568fb4710 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fc8d08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fc8cf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fc8cb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fc8cd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a568fc8df0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fc8dd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fc9010 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fc8ff8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fc8fd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fc9050 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc8e60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a568fc9068 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc8e98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fc9080 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fc8ed0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55a568fc9098 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fc8fc0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fc8fa8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fc8f68 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55a568fc9368 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55a568fc9350 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55a568fc9338 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a568fc9308 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55a568fc92a8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a568fc9278 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a568fc91f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a568fbcaa0
|             |   `-CXXMemberCallExpr 0x55a568fc91d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a568fc91a0 <col:61> '<bound member function type>' ->xanno 0x55a568fb1be8
|             |       `-CXXThisExpr 0x55a568fc9190 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a568fc9290 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a568fc9220 <col:74> 'int' lvalue ParmVar 0x55a568fb4710 'i' 'int'
|-CXXMethodDecl 0x55a568fb4a58 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55a568fb48c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a568fb4940 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55a568fc9ac8 <col:42, line:500:5>
|   |-ParenExpr 0x55a568fc9860 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fc9830 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fc9510 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fc94e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fc93f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fc93d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fc9398 <col:23> 'int' lvalue ParmVar 0x55a568fb48c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fc93b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fc94c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fc94a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fc9410 <col:33> 'int' lvalue ParmVar 0x55a568fb48c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fc9488 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fc9470 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fc9430 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fc9450 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a568fc9570 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fc9550 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fc9790 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fc9778 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fc9758 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fc97d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc95e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a568fc97e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc9618 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fc9800 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fc9650 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55a568fc9818 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fc9740 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fc9728 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fc96e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55a568fc9aa8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55a568fc9a58 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a568fc9a28 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a568fc99d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a568fc99a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a568fc9950 <col:48, col:57> 'char [48]' lvalue ->c 0x55a568fbcaa0
|     |     |   `-CXXMemberCallExpr 0x55a568fc9930 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a568fc9900 <col:48> '<bound member function type>' ->xanno 0x55a568fb1d88
|     |     |       `-CXXThisExpr 0x55a568fc98f0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a568fc99b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a568fc9980 <col:61> 'int' lvalue ParmVar 0x55a568fb48c8 'i' 'int'
|     `-ImplicitCastExpr 0x55a568fc9a90 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55a568fc9a70 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55a568fb4940 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55a568fb4c18 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55a568fb4b20 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a568fca228 <col:35, line:513:5>
|   |-ParenExpr 0x55a568fc9f38 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fc9f08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fc9c60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fc9c30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fc9b40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fc9b28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fc9ae8 <col:23> 'int' lvalue ParmVar 0x55a568fb4b20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fc9b08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fc9c10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fc9bf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fc9b60 <col:33> 'int' lvalue ParmVar 0x55a568fb4b20 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fc9bd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fc9bc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fc9b80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fc9ba0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a568fc9cc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fc9ca0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fc9e68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fc9e50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fc9e30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fc9ea8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc9d30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a568fc9ec0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fc9d68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fc9ed8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fc9da0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55a568fc9ef0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fc9e18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fc9e00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fc9dc0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55a568fca218 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55a568fca200 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55a568fca1e8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a568fca1b8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55a568fca130 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a568fca100 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a568fca0b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a568fbcaa0
|             |   `-CXXMemberCallExpr 0x55a568fca090 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a568fca060 <col:60> '<bound member function type>' ->xanno 0x55a568fb1be8
|             |       `-CXXThisExpr 0x55a568fca050 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a568fca118 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a568fca0e0 <col:73> 'int' lvalue ParmVar 0x55a568fb4b20 'i' 'int'
|-CXXMethodDecl 0x55a568fb4e68 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55a568fb4cd8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a568fb4d50 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55a568fca948 <col:41, line:528:5>
|   |-ParenExpr 0x55a568fca6d0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fca6a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fca3c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fca390 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fca2a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fca288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fca248 <col:23> 'int' lvalue ParmVar 0x55a568fb4cd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fca268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fca370 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fca358 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fca2c0 <col:33> 'int' lvalue ParmVar 0x55a568fb4cd8 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fca338 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fca320 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fca2e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fca300 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a568fca420 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fca400 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fca600 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fca5e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fca5c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fca640 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fca490 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a568fca658 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fca4c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fca670 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fca500 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55a568fca688 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fca5b0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fca598 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fca558 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55a568fca928 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55a568fca8d8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a568fca8a8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a568fca850 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a568fca810 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a568fca7c0 <col:47, col:56> 'char [48]' lvalue ->c 0x55a568fbcaa0
|     |     |   `-CXXMemberCallExpr 0x55a568fca7a0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a568fca770 <col:47> '<bound member function type>' ->xanno 0x55a568fb1d88
|     |     |       `-CXXThisExpr 0x55a568fca760 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a568fca828 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a568fca7f0 <col:60> 'int' lvalue ParmVar 0x55a568fb4cd8 'i' 'int'
|     `-ImplicitCastExpr 0x55a568fca910 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55a568fca8f0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55a568fb4d50 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55a568fb5028 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55a568fb4f30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a568fcb018 <col:36, line:541:5>
|   |-ParenExpr 0x55a568fcadb8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fcad88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fcaae0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fcaab0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fca9c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fca9a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fca968 <col:23> 'int' lvalue ParmVar 0x55a568fb4f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fca988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fcaa90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fcaa78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fca9e0 <col:33> 'int' lvalue ParmVar 0x55a568fb4f30 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fcaa58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fcaa40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fcaa00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fcaa20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a568fcab40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcab20 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fcace8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcacd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcacb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcad28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcabb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a568fcad40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcabe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcad58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fcac20 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55a568fcad70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcac98 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcac80 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcac40 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55a568fcb008 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55a568fcaff0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55a568fcafd8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a568fcafa8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55a568fcaf50 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a568fcaf20 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a568fcaed0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a568fbcaa0
|             |   `-CXXMemberCallExpr 0x55a568fcaeb0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a568fcae80 <col:61> '<bound member function type>' ->xanno 0x55a568fb1be8
|             |       `-CXXThisExpr 0x55a568fcae70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a568fcaf38 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a568fcaf00 <col:74> 'int' lvalue ParmVar 0x55a568fb4f30 'i' 'int'
|-CXXMethodDecl 0x55a568fb51f8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55a568fb50e8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55a568fb5160 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a568fb52a8 <col:20>
| `-OptimizeNoneAttr 0x55a568fb5300 <col:30>
|-CXXMethodDecl 0x55a568fb5438 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55a568fb5340 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a568fcb6e8 <col:35, line:562:5>
|   |-ParenExpr 0x55a568fcb488 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fcb458 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fcb1b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fcb180 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fcb090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fcb078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fcb038 <col:23> 'int' lvalue ParmVar 0x55a568fb5340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fcb058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fcb160 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fcb148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fcb0b0 <col:33> 'int' lvalue ParmVar 0x55a568fb5340 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fcb128 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fcb110 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fcb0d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fcb0f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a568fcb210 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcb1f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fcb3b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcb3a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcb380 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcb3f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcb280 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a568fcb410 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcb2b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcb428 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fcb2f0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55a568fcb440 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcb368 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcb350 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcb310 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55a568fcb6d8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55a568fcb6c0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55a568fcb6a8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a568fcb678 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55a568fcb620 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a568fcb5f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a568fcb5a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a568fbcaa0
|             |   `-CXXMemberCallExpr 0x55a568fcb580 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a568fcb550 <col:60> '<bound member function type>' ->xanno 0x55a568fb1be8
|             |       `-CXXThisExpr 0x55a568fcb540 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a568fcb608 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a568fcb5d0 <col:73> 'int' lvalue ParmVar 0x55a568fb5340 'i' 'int'
|-CXXMethodDecl 0x55a568fb5648 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55a568fb54f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a568fb5570 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55a568fcbdc8 <col:41, line:577:5>
|   |-ParenExpr 0x55a568fcbb58 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fcbb28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fcb880 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fcb850 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fcb760 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fcb748 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fcb708 <col:23> 'int' lvalue ParmVar 0x55a568fb54f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fcb728 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fcb830 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fcb818 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fcb780 <col:33> 'int' lvalue ParmVar 0x55a568fb54f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fcb7f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fcb7e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fcb7a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fcb7c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a568fcb8e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcb8c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fcba88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcba70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcba50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcbac8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcb950 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a568fcbae0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcb988 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcbaf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fcb9c0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55a568fcbb10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcba38 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcba20 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcb9e0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55a568fcbda8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55a568fcbd58 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a568fcbd28 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55a568fcbcc8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a568fcbc98 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a568fcbc48 <col:47, col:56> 'char [48]' lvalue ->c 0x55a568fbcaa0
|     |     |   `-CXXMemberCallExpr 0x55a568fcbc28 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a568fcbbf8 <col:47> '<bound member function type>' ->xanno 0x55a568fb1d88
|     |     |       `-CXXThisExpr 0x55a568fcbbe8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a568fcbcb0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a568fcbc78 <col:60> 'int' lvalue ParmVar 0x55a568fb54f8 'i' 'int'
|     `-ImplicitCastExpr 0x55a568fcbd90 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a568fcbd70 <col:65> 'int32_t':'int' lvalue ParmVar 0x55a568fb5570 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55a568fb5808 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55a568fb5710 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a568fcc4f8 <col:36, line:591:5>
|   |-ParenExpr 0x55a568fcc238 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fcc208 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fcbf60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fcbf30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fcbe40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fcbe28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fcbde8 <col:23> 'int' lvalue ParmVar 0x55a568fb5710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fcbe08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fcbf10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fcbef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fcbe60 <col:33> 'int' lvalue ParmVar 0x55a568fb5710 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fcbed8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fcbec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fcbe80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fcbea0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a568fcbfc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcbfa0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fcc168 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcc150 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcc130 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcc1a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcc030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a568fcc1c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcc068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcc1d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fcc0a0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55a568fcc1f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcc118 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcc100 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcc0c0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55a568fcc4e8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55a568fcc4d0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55a568fcc4b8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a568fcc488 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55a568fcc400 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a568fcc3d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a568fcc380 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a568fbcaa0
|             |   `-CXXMemberCallExpr 0x55a568fcc360 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a568fcc330 <col:61> '<bound member function type>' ->xanno 0x55a568fb1be8
|             |       `-CXXThisExpr 0x55a568fcc320 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a568fcc3e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a568fcc3b0 <col:74> 'int' lvalue ParmVar 0x55a568fb5710 'i' 'int'
|-CXXMethodDecl 0x55a568fb5a58 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55a568fb58c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a568fb5940 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55a568fccbd8 <col:42, line:606:5>
|   |-ParenExpr 0x55a568fcc968 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a568fcc938 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fcc690 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fcc660 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fcc570 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fcc558 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fcc518 <col:23> 'int' lvalue ParmVar 0x55a568fb58c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fcc538 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fcc640 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a568fcc628 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fcc590 <col:33> 'int' lvalue ParmVar 0x55a568fb58c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fcc608 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fcc5f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fcc5b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a568fcc5d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a568fcc6f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcc6d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a568fcc898 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcc880 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcc860 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcc8d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcc760 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a568fcc8f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcc798 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcc908 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fcc7d0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55a568fcc920 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcc848 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcc830 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcc7f0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55a568fccbb8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55a568fccb68 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a568fccb38 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55a568fccad8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a568fccaa8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a568fcca58 <col:48, col:57> 'char [48]' lvalue ->c 0x55a568fbcaa0
|     |     |   `-CXXMemberCallExpr 0x55a568fcca38 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a568fcca08 <col:48> '<bound member function type>' ->xanno 0x55a568fb1d88
|     |     |       `-CXXThisExpr 0x55a568fcc9f8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a568fccac0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a568fcca88 <col:61> 'int' lvalue ParmVar 0x55a568fb58c8 'i' 'int'
|     `-ImplicitCastExpr 0x55a568fccba0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55a568fccb80 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55a568fb5940 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55a568fb5bf0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55a568fb5b20 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55a568fcd448 <col:33, line:620:5>
|   |-ParenExpr 0x55a568fcd1c0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a568fcd190 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fccde0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fccdb0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fccc50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fccc38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fccbf8 <col:23> 'int' lvalue ParmVar 0x55a568fb5b20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fccc18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fccd90 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a568fccd78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fccc70 <col:33> 'int' lvalue ParmVar 0x55a568fb5b20 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fccd58 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fccd40 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fccc90 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a568fccd18 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a568fccd00 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a568fcccc8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a568fcce40 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcce20 <col:79> 'int' 0
|   |   `-CallExpr 0x55a568fcd0f0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcd0d8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcd0b8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcd130 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fccf28 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a568fcd148 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fccf70 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcd160 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fccfa8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55a568fcd178 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcd0a0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcd088 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcd048 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55a568fcd438 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55a568fcd420 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55a568fcd408 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a568fcd3d8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55a568fcd350 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a568fcd320 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a568fcd2d0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55a568fbcaa0
|             |   `-CXXMemberCallExpr 0x55a568fcd2b0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a568fcd280 <col:67> '<bound member function type>' ->xanno 0x55a568fb1be8
|             |       `-CXXThisExpr 0x55a568fcd270 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a568fcd338 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a568fcd300 <col:80> 'int' lvalue ParmVar 0x55a568fb5b20 'i' 'int'
|-CXXMethodDecl 0x55a568fb5e08 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55a568fb5cb0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a568fb5d30 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55a568fcdc70 <col:45, line:635:5>
|   |-ParenExpr 0x55a568fcd9b8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a568fcd988 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a568fcd650 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a568fcd620 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a568fcd4c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a568fcd4a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a568fcd468 <col:23> 'int' lvalue ParmVar 0x55a568fb5cb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a568fcd488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a568fcd600 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a568fcd5e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a568fcd4e0 <col:33> 'int' lvalue ParmVar 0x55a568fb5cb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a568fcd5c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a568fcd5b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a568fcd500 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a568fb1fd0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a568fcd588 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a568fcd570 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a568fcd538 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a568fcd6b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a568fcd690 <col:79> 'int' 0
|   |   `-CallExpr 0x55a568fcd8e8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a568fcd8d0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a568fcd8b0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a568b1e8f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a568fcd928 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcd720 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a568fcd940 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a568fcd768 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a568fcd958 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a568fcd7a0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55a568fcd970 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a568fcd898 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a568fcd880 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a568fcd838 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55a568fcdc50 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55a568fcdbb8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a568fcdb88 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55a568fcdb28 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a568fcdaf8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a568fcdaa8 <col:54, col:63> 'char [48]' lvalue ->c 0x55a568fbcaa0
|     |     |   `-CXXMemberCallExpr 0x55a568fcda88 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a568fcda58 <col:54> '<bound member function type>' ->xanno 0x55a568fb1d88
|     |     |       `-CXXThisExpr 0x55a568fcda48 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a568fcdb10 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a568fcdad8 <col:67> 'int' lvalue ParmVar 0x55a568fb5cb0 'i' 'int'
|     `-CXXConstCastExpr 0x55a568fcdc20 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55a568fcdc08 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55a568fcdbd0 <col:91> 'const void *' lvalue ParmVar 0x55a568fb5d30 'x' 'const void *'
|-CXXMethodDecl 0x55a568fb5ed8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55a568fcdcf8 <col:34, line:640:5>
|   `-ReturnStmt 0x55a568fcdce8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55a568fcdcd0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55a568fcdca0 <col:16> 'Packet *' lvalue ->_data_packet 0x55a568fbd658
|         `-CXXThisExpr 0x55a568fcdc90 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a568fb6018 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55a568fb5f88 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a568fc6db8 <col:46> 'bool' true
|-CXXMethodDecl 0x55a568fb6198 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55a568fb60d0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55a568fb6240 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55a568fb69f0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55a568fb6340 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6a60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb6320 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55a568fb6300 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a568fab4a0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a568fb63d0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6a78 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb63b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55a568fb6390 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a568fab530 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a568fb6460 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6a90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb6440 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a568fb6420 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a568fb64f0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6aa8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb64d0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55a568fb64b0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55a568fb6580 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6ac0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb6560 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55a568fb6540 <col:21> 'int' 16
| |-EnumConstantDecl 0x55a568fb6610 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6ad8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb65f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a568fb65d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a568fb66a0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6af0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb6680 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55a568fb6660 <col:19> 'int' EnumConstant 0x55a568fb64f0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a568fb6730 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6b08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb6710 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55a568fb66f0 <col:19> 'int' EnumConstant 0x55a568fb6610 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a568fb6800 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6b20 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb67e0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55a568fb67c0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a568fb6780 <col:23> 'int' EnumConstant 0x55a568fb6730 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a568fb67a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a568fb68d0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a568fb6b38 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a568fb68b0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55a568fb6890 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a568fb6850 <col:23> 'int' EnumConstant 0x55a568fb6730 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a568fb6870 <col:40> 'int' 4
| `-EnumConstantDecl 0x55a568fb69a0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55a568fb6b50 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a568fb6980 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55a568fb6960 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55a568fb6920 <col:23> 'int' EnumConstant 0x55a568fb6730 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55a568fb6940 <col:40> 'int' 8
|-CXXMethodDecl 0x55a568fb6b90 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55a568fb6c30 <col:68> "" ""
|-CXXMethodDecl 0x55a568fb6cc8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55a568fb6d68 <col:45> "" ""
|-CXXMethodDecl 0x55a568fb6e00 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a568fb6ea0 <col:57> "" ""
|-CXXMethodDecl 0x55a568fb6f38 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55a568fb6fd8 <col:45> "" ""
|-CXXMethodDecl 0x55a568fb7070 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a568fb7110 <col:57> "" ""
|-CXXMethodDecl 0x55a568fb71a0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a568fb7240 <col:51> "" ""
|-CXXMethodDecl 0x55a568fb72d0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a568fb7370 <col:63> "" ""
|-CXXMethodDecl 0x55a568fb7400 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a568fb74a0 <col:53> "" ""
|-CXXMethodDecl 0x55a568fb7530 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a568fb75d0 <col:65> "" ""
|-CXXMethodDecl 0x55a568fb76e8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a568fb7658 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55a568fb7790 <col:61> "" ""
|-CXXMethodDecl 0x55a568fb7928 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a568fb7818 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55a568fb7890 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a568fb79d8 <col:67> "" ""
|-CXXMethodDecl 0x55a568fb7af0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a568fb7a60 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a568fb7b98 <col:63> "" ""
|-CXXMethodDecl 0x55a568fb7d30 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a568fb7c20 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a568fb7c98 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a568fb7de0 <col:69> "" ""
|-CXXMethodDecl 0x55a568fb7ef8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a568fb7e68 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a568fb7fa0 <col:63> "" ""
|-CXXMethodDecl 0x55a568fba678 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a568fba568 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a568fba5e0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a568fba728 <col:69> "" ""
|-CXXMethodDecl 0x55a568fba840 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a568fba7b0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55a568fba8e8 <col:62> "" ""
|-CXXMethodDecl 0x55a568fbaa80 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a568fba970 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a568fba9e8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55a568fbab30 <col:68> "" ""
|-CXXMethodDecl 0x55a568fbac48 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55a568fbabb8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a568fbacf0 <col:63> "" ""
|-CXXMethodDecl 0x55a568fbae88 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55a568fbad78 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a568fbadf0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55a568fbaf38 <col:69> "" ""
|-CXXMethodDecl 0x55a568fbafc8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a568fbb068 <col:64> "" ""
|-CXXMethodDecl 0x55a568fbb0f8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a568fbb198 <col:52> "" ""
|-CXXMethodDecl 0x55a568fbb228 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a568fbb2c8 <col:67> "" ""
|-CXXMethodDecl 0x55a568fbb358 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a568fbb3f8 <col:55> "" ""
|-CXXMethodDecl 0x55a568fbb510 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a568fbb480 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a568fbb5b8 <col:58> "" ""
|-CXXMethodDecl 0x55a568fbb750 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a568fbb640 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a568fbb6b8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a568fbb800 <col:62> "" ""
|-CXXMethodDecl 0x55a568fbb918 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55a568fbb888 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a568fbb9c0 <col:58> "" ""
|-CXXMethodDecl 0x55a568fbbb58 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55a568fbba48 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a568fbbac0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55a568fbbc08 <col:62> "" ""
|-CXXMethodDecl 0x55a568fbbd20 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a568fbbc90 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55a568fbbdc8 <col:60> "" ""
|-CXXMethodDecl 0x55a568fbbf60 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a568fbbe50 <col:34> col:37 'int'
| |-ParmVarDecl 0x55a568fbbec8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a568fbc010 <col:64> "" ""
|-CXXMethodDecl 0x55a568fbc128 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a568fbc098 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a568fbc1d0 <col:58> "" ""
|-CXXMethodDecl 0x55a568fbc368 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a568fbc258 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a568fbc2d0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55a568fbc418 <col:62> "" ""
|-CXXMethodDecl 0x55a568fbc530 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a568fbc4a0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55a568fbc5d8 <col:59> "" ""
|-CXXMethodDecl 0x55a568fbc770 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a568fbc660 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a568fbc6d8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a568fbc820 <col:63> "" ""
|-AccessSpecDecl 0x55a568fbc890 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55a568fbc8b8 prev 0x55a568fb1ac0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a568fbc9b0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55a568fbcaa0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55a568fbcbc8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55a568fbcd48 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55a568fbcec8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55a568fbd048 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55a568fcde78 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a568fce6e8 <col:11>
| |-CXXDestructorDecl 0x55a568fcdf50 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55a568fce088 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a568fce088
| | `-ParmVarDecl 0x55a568fce198 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55a568fce238 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a568fce238
| | `-ParmVarDecl 0x55a568fce348 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55a568fd1108 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a568fd1218 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55a568fd1498 <col:11>
| |   `-ReturnStmt 0x55a568fd1488 <col:11>
| |     `-UnaryOperator 0x55a568fd1470 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a568fd1460 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55a568fd1288 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a568fd1288
|   `-ParmVarDecl 0x55a568fd1398 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55a568fbd0b0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a568fbd1c8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55a568fbd268 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55a568fbd2d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55a568fbd338 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55a568fbd3a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55a568fbd400 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55a568fbd4c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55a568fbd520 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55a568fbd580 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55a568fcdd88 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55a568fbd268 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55a568fce6f8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55a568fce750 <col:12>
| |-CXXConstructorDecl 0x55a568fce3b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a568fce3b8
| | `-ParmVarDecl 0x55a568fce4c8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55a568fce568 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a568fce568
| | `-ParmVarDecl 0x55a568fce678 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55a568fd07f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55a568fbd5f8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55a568fbd658 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55a568fbd6c0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55a568fbd728 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55a568fbd790 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55a568fbd7f8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55a568fbd858 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55a568fbd8b8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55a568fbd920 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55a568fbd9a8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55a568fbd5f8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55a568fcdd20 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a568fbd858 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55a568fce760 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55a568fce7c0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55a568fbdb48 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55a568fbda88 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55a568fbdc40 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55a568fbde28 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55a568fbdd30 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55a568fbe0f8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55a568fbdee0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568fbdf58 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a568fbdfd0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568fbe318 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55a568fbe1c8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55a568fbe240 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55a568fc68f8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55a568fbe3d8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55a568fbe450 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55a568fbe4c8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55a568fc6a50 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a568fc69c0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568fc6b98 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a568fc6b08 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55a568fc6c90 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a568fce860 prev 0x55a568fab120 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55a568fce998 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55a568fcea28 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55a568fcead0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55a568fceb70 <col:20>
| `-OptimizeNoneAttr 0x55a568fcebc8 <col:30>
|-CXXMethodDecl 0x55a568fcec18 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55a568fcecb8 <col:20>
| `-OptimizeNoneAttr 0x55a568fced10 <col:30>
|-CXXMethodDecl 0x55a568fced60 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a568fcee28 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a568fceef0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a568fcf008 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55a568fcf0d0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55a568fcf170 <col:20>
| `-OptimizeNoneAttr 0x55a568fcf1c8 <col:30>
|-CXXMethodDecl 0x55a568fcf238 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55a568fcf2d8 <col:20>
| `-OptimizeNoneAttr 0x55a568fcf330 <col:30>
|-CXXMethodDecl 0x55a568fcf3d8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55a568fcf478 <col:20>
| `-OptimizeNoneAttr 0x55a568fcf4d0 <col:30>
|-CXXMethodDecl 0x55a568fcf520 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55a568fcf638 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55a568fcf758 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55a568fcf878 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55a568fcf940 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55a568fcf9e0 <col:62> "" ""
|-AccessSpecDecl 0x55a568fcfa50 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55a568fcfab0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55a568fd06a8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55a568fd08d0 <col:29, col:31>
|-CXXMethodDecl 0x55a568fcfb78 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55a568fcfcb8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55a568fcfc28 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55a568fcfdb0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55a568fd08e0 <col:23, col:25>
|-CXXMethodDecl 0x55a568fcff68 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55a568fcfea0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55a568fd0238 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a568fd0020 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a568fd0098 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a568fd0110 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a568fd03c8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55a568fd0300 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55a568fd04c0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55a568fd0528 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55a568fd0528
  `-ParmVarDecl 0x55a568fd0638 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a56909f460 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a56909f578 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55a56909f608 <col:16, col:22> col:16 public
|-EnumDecl 0x55a56909f630 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55a56909f730 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a56909f980 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a56909f710 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a56909f6f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a56909f7c0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a56909f998 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a56909f7a0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55a56909f780 <col:24> 'int' 22
| |-EnumConstantDecl 0x55a56909f850 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a56909f9b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a56909f830 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55a56909f810 <col:24> 'int' 34
| |-EnumConstantDecl 0x55a56909f8e0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a56909f9c8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a56909f8c0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55a56909f8a0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55a56909f930 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55a5690a1340 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a5690a1778 <col:7>
|-CXXConstructorDecl 0x55a5690a1448 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55a5690a1448
| `-ParmVarDecl 0x55a5690a1558 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55a5690a15f8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a5690a1708 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55a5690e7d80 <col:7>
`-CXXDestructorDecl 0x55a5690a3888 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a56909f9f8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55a56909fb58 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55a56909fbe8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55a56909fc20 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55a568bd7df0 'uint32_t' sugar
|   |-Typedef 0x55a568aec408 'uint32_t'
|   `-TypedefType 0x55a568ac5440 '__uint32_t' sugar
|     |-Typedef 0x55a568ac5038 '__uint32_t'
|     `-BuiltinType 0x55a568a83410 'unsigned int'
|-CXXConstructorDecl 0x55a56909fd68 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55a56909fc90 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55a5690a1248 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55a5690a1788 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a5690a0b00 'base' 'int'
| | `-ImplicitCastExpr 0x55a5690a12e8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55a5690a12a8 <col:16> 'int' lvalue ParmVar 0x55a56909fc90 'b' 'int'
| `-CompoundStmt 0x55a5690a17f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55a5690a0260 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55a56909fe30 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55a56909feb0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55a56909ff28 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55a56909ffa8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55a5690a0068 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55a5690a00e8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55a5690a06b8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55a5690a0330 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55a5690a0618 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55a5690a03d8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55a5690a0478 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55a5690a04f0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a5690a1268 <col:82> 'const ArgContext' lvalue Var 0x55a569094308 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a5690a2738 <col:94, line:1067:5>
| |   |-DeclStmt 0x55a5690a1988 <line:1054:9, col:64>
| |   | `-VarDecl 0x55a5690a1818 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55a5690a1940 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55a5690a1ba8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55a5690a19b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55a5690a1b80 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55a5690a1b60 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55a5690a1b10 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55a5690a1af0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55a5690a1a98 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55a5690a1a48 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55a5690a1a78 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55a5690a1ad8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55a5690a1ab8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55a5690a1b40 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55a5690a1d08 <line:1056:9, col:27>
| |   | `-VarDecl 0x55a5690a1ca0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55a5690a2150 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55a5690a2080 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55a5690a2000 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a568fa1dd8 0x55a568deb3b8 0x55a568deb090 0x55a568ddc870 0x55a568ddc520 0x55a568ddbe10 0x55a568dae780 0x55a568d3ac40
| |   | | |-CallExpr 0x55a5690a1f40 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55a5690a1d30 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55a5690a1de0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a5690a1db0 <col:19, col:23> '<bound member function type>' .begin 0x55a568dcba78
| |   | | | |   `-DeclRefExpr 0x55a5690a1d90 <col:19> 'const String' lvalue ParmVar 0x55a5690a03d8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55a5690a1e50 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a5690a1e20 <col:32, col:36> '<bound member function type>' .end 0x55a568dcbc90
| |   | | | |   `-DeclRefExpr 0x55a5690a1e00 <col:32> 'const String' lvalue ParmVar 0x55a5690a03d8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55a5690a1e70 <col:43> 'const bool' lvalue Var 0x55a5690a1818 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55a5690a1ed8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55a5690a1eb8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55a5690a1f00 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55a5690a1ca0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55a5690a1f20 <col:73> 'const int' lvalue Var 0x55a5690a19b8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55a5690a1fe0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55a5690a1fb0 <col:16, col:20> '<bound member function type>' .end 0x55a568dcbc90
| |   | |     `-DeclRefExpr 0x55a5690a1f90 <col:16> 'const String' lvalue ParmVar 0x55a5690a03d8 'str' 'const String &'
| |   | `-BinaryOperator 0x55a5690a2130 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55a5690a20c8 <col:13> 'int' lvalue ->status 0x55a5690a0b68
| |   |   | `-CXXThisExpr 0x55a5690a20b8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55a5690a2118 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55a5690a20f8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f7c0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55a5690a23a0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55a5690a2288 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55a5690a2270 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55a5690a2258 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55a5690a2178 <col:13> 'int' lvalue ->status 0x55a5690a0b68
| |   | | |     `-CXXThisExpr 0x55a5690a2168 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55a5690a2238 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55a5690a2208 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55a5690a21b8 <col:23> 'int' lvalue ->status 0x55a5690a0b68
| |   | |   |   `-CXXThisExpr 0x55a5690a21a8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55a5690a2220 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55a5690a21e8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f850 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55a5690a2380 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55a5690a2320 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55a5690a22c8 <col:13, col:18> '<bound member function type>' .error 0x55a568f653d0
| |   |   | | `-DeclRefExpr 0x55a5690a22a8 <col:13> 'const ArgContext' lvalue ParmVar 0x55a5690a04f0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55a5690a2348 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55a5690a22f8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55a5690a2370 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55a5690a2360 <col:20> 'bool' false
| |   |-DeclStmt 0x55a5690a2588 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55a5690a2530 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55a5690a24c0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55a5690a26e8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55a5690a25a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55a568d6ec08
| |   | |-DeclRefExpr 0x55a5690a25e8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55a5690a1ca0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55a5690a26b8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55a5690a2630 <col:64> 'V' lvalue ParmVar 0x55a5690a0478 'result' 'V &'
| |   `-ReturnStmt 0x55a5690a2728 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55a5690a2718 <col:16> 'bool' true
| `-CXXMethodDecl 0x55a5690eb8e8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a5690eb6c0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55a5690eb798 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55a5690eb800 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55a5690f2310 <col:94, line:1067:5>
|     |-DeclStmt 0x55a5690f0d88 <line:1054:9, col:64>
|     | `-VarDecl 0x55a5690f0ba8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55a5690f0d18 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55a5690f0ce8 <col:36, col:55> 'const bool' lvalue Var 0x55a568d5de20 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55a5690f0f68 <line:1055:9, col:91>
|     | `-VarDecl 0x55a5690f0da0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55a5690f0ee8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55a5690f0ed0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55a5690f0eb0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55a5690f0e90 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55a5690f0e70 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55a5690f0e38 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55a5690f0e18 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55a5690a1a78 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55a5690f0e58 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55a5690a1ab8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55a5690a1b40 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55a5690f1100 <line:1056:9, col:27>
|     | `-VarDecl 0x55a5690f1098 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55a5690f1588 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55a5690f1530 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55a5690f13e8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55a5690f13b8 <col:13> '<bound member function type>' ->parse 0x55a5690a0260
|     | | | | `-CXXThisExpr 0x55a5690f13a8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55a5690f1248 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55a5690f1218 <col:19, col:23> '<bound member function type>' .begin 0x55a568dcba78
|     | | | |   `-DeclRefExpr 0x55a5690f11f8 <col:19> 'const String' lvalue ParmVar 0x55a5690eb6c0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55a5690f12b8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55a5690f1288 <col:32, col:36> '<bound member function type>' .end 0x55a568dcbc90
|     | | | |   `-DeclRefExpr 0x55a5690f1268 <col:32> 'const String' lvalue ParmVar 0x55a5690eb6c0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55a5690f1458 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55a5690f1438 <col:43> 'const bool' lvalue Var 0x55a5690f0ba8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55a5690f1340 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55a5690f1328 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55a5690f1308 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55a5690f1470 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55a5690f1368 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55a5690f1098 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55a5690f14a8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55a5690f1488 <col:73> 'const int' lvalue Var 0x55a5690f0da0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55a5690f1510 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55a5690f14e0 <col:16, col:20> '<bound member function type>' .end 0x55a568dcbc90
|     | |     `-DeclRefExpr 0x55a5690f14c0 <col:16> 'const String' lvalue ParmVar 0x55a5690eb6c0 'str' 'const String &'
|     | `-BinaryOperator 0x55a5690f1568 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55a5690a20c8 <col:13> 'int' lvalue ->status 0x55a5690a0b68
|     |   | `-CXXThisExpr 0x55a5690a20b8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55a5690f1550 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55a5690a20f8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f7c0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55a5690f1700 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55a5690f1620 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55a5690f1608 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55a5690f15f0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55a5690a2178 <col:13> 'int' lvalue ->status 0x55a5690a0b68
|     | | |     `-CXXThisExpr 0x55a5690a2168 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55a5690f15d0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55a5690f15a0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55a5690a21b8 <col:23> 'int' lvalue ->status 0x55a5690a0b68
|     | |   |   `-CXXThisExpr 0x55a5690a21a8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55a5690f15b8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55a5690a21e8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f850 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55a5690f16e0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55a5690f1690 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55a5690f1660 <col:13, col:18> '<bound member function type>' .error 0x55a568f653d0
|     |   | | `-DeclRefExpr 0x55a5690f1640 <col:13> 'const ArgContext' lvalue ParmVar 0x55a5690eb800 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55a5690f16b8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55a5690a22f8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55a5690f16d0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55a5690a2360 <col:20> 'bool' false
|     |-DeclStmt 0x55a5690f1c48 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55a5690f1bf0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55a5690f1ba0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55a5690f1b80 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55a5690f1b10 'type'
|     |       `-ElaboratedType 0x55a5690f1ac0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55a5690f1aa0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55a568d5df78 'unsigned_type'
|     |           `-BuiltinType 0x55a568a83410 'unsigned int'
|     |-CallExpr 0x55a5690f22a0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55a5690f2288 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55a5690f2208 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55a5690f20e8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55a568d6ec08 'extract_integer')
|     | |-ImplicitCastExpr 0x55a5690f22e8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55a5690f22d0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55a5690f1ca8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55a5690f1098 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55a5690f1d78 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55a5690f1d28 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55a5690eb798 'result' 'unsigned int &'
|     `-ReturnStmt 0x55a5690f2300 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55a5690a2718 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55a5690a0a78 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55a5690a0728 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55a5690a09d8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55a5690a07d8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55a5690a0878 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55a5690a08f0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a5690a1288 <col:71> 'const ArgContext' lvalue Var 0x55a569094308 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a5690a2ea8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55a5690a2800 <line:1071:9, col:12>
| |   | `-VarDecl 0x55a5690a2798 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55a5690a2e80 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55a5690a2a90 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55a5690a2918 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55a5690a28e0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55a5690a2828 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55a5690a2880 <col:31> 'const String' lvalue ParmVar 0x55a5690a07d8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55a5690a28a0 <col:36> 'V' lvalue Var 0x55a5690a2798 'x' 'V'
| |     | |   `-DeclRefExpr 0x55a5690a28c0 <col:39> 'const ArgContext' lvalue ParmVar 0x55a5690a08f0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55a5690a2a70 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55a5690a2a50 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55a5690a2a38 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55a5690a2a20 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55a5690a2940 <col:17> 'int' lvalue ->status 0x55a5690a0b68
| |     |     |     `-CXXThisExpr 0x55a5690a2930 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55a5690a2a00 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55a5690a29d0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55a5690a2980 <col:27> 'int' lvalue ->status 0x55a5690a0b68
| |     |       |   `-CXXThisExpr 0x55a5690a2970 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55a5690a29e8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55a5690a29b0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f850 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55a5690a2ac0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55a5690a2ab0 <col:20> 'bool' false
| |     `-IfStmt 0x55a5690a2e58 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55a5690a2b60 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55a5690a2b30 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55a5690a2ae0 <col:18> 'int' lvalue ->status 0x55a5690a0b68
| |       | |   `-CXXThisExpr 0x55a5690a2ad0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55a5690a2b48 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55a5690a2b10 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f850 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55a5690a2d98 <col:42, line:1079:9>
| |       | |-CallExpr 0x55a5690a2d40 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55a5690a2b90 <line:1076:13> '<bound member function type>' ->range_error 0x55a5690a1178
| |       | | | `-CXXThisExpr 0x55a5690a2b80 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55a5690a2bc0 <col:25> 'const ArgContext' lvalue ParmVar 0x55a5690a08f0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55a5690a2ca0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55a5690a2d18 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55a5690a2cf8 <col:43> 'V' lvalue Var 0x55a5690a2798 'x' 'V'
| |       | `-ReturnStmt 0x55a5690a2d88 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55a5690a2d78 <col:20> 'bool' false
| |       `-CompoundStmt 0x55a5690a2e38 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55a5690a2df8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55a5690a2db8 <col:13> 'V' lvalue ParmVar 0x55a5690a0878 'result' 'V &'
| |         | `-DeclRefExpr 0x55a5690a2dd8 <col:22> 'V' lvalue Var 0x55a5690a2798 'x' 'V'
| |         `-ReturnStmt 0x55a5690a2e28 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55a5690a2e18 <col:20> 'bool' true
| `-CXXMethodDecl 0x55a5690eb2a8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a5690eb080 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55a5690eb158 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55a5690eb1c0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55a5690f0b88 <col:83, line:1083:5>
|     |-DeclStmt 0x55a5690eb530 <line:1071:9, col:12>
|     | `-VarDecl 0x55a5690eb4c8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55a5690f0b60 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55a5690ebb60 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55a5690eba88 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55a5690eba50 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55a5690eba08 <col:14> '<bound member function type>' ->parse_saturating 0x55a5690eb8e8
|       | |   | `-CXXThisExpr 0x55a5690eb9f8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55a5690eb5a0 <col:31> 'const String' lvalue ParmVar 0x55a5690eb080 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55a5690eb5c0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55a5690eb4c8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55a5690eb5e0 <col:39> 'const ArgContext' lvalue ParmVar 0x55a5690eb1c0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55a5690ebb40 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55a5690ebb20 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55a5690ebb08 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55a5690ebaf0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55a5690a2940 <col:17> 'int' lvalue ->status 0x55a5690a0b68
|       |     |     `-CXXThisExpr 0x55a5690a2930 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55a5690ebad0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55a5690ebaa0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55a5690a2980 <col:27> 'int' lvalue ->status 0x55a5690a0b68
|       |       |   `-CXXThisExpr 0x55a5690a2970 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55a5690ebab8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55a5690a29b0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f850 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55a5690ebb80 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55a5690a2ab0 <col:20> 'bool' false
|       `-IfStmt 0x55a5690f0b38 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55a5690ebbc0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55a5690ebb90 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55a5690a2ae0 <col:18> 'int' lvalue ->status 0x55a5690a0b68
|         | |   `-CXXThisExpr 0x55a5690a2ad0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55a5690ebba8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55a5690a2b10 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a56909f850 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55a5690f0a70 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55a5690f09e0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55a5690a2b90 <line:1076:13> '<bound member function type>' ->range_error 0x55a5690a1178
|         | | | `-CXXThisExpr 0x55a5690a2b80 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55a5690ebbe0 <col:25> 'const ArgContext' lvalue ParmVar 0x55a5690eb1c0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55a5690f0a48 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55a5690f0a18 <col:31, col:50> 'const bool' lvalue Var 0x55a568d5de20 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55a5690f09b8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55a5690f09a0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55a5690ebcf8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55a5690ebcd8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55a5690eb4c8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55a5690f0a60 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55a5690a2d78 <col:20> 'bool' false
|         `-CompoundStmt 0x55a5690f0b18 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55a5690f0ae8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55a5690f0a90 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55a5690eb158 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55a5690f0ad0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55a5690f0ab0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55a5690eb4c8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55a5690f0b08 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55a5690a2e18 <col:20> 'bool' true
|-FieldDecl 0x55a5690a0b00 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55a5690a0b68 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55a5690a0bb8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55a5690a0e70 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55a5690a0bf8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55a5690a0c78 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55a5690a0cf0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55a5690a0d70 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55a5690a1178 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55a5690a0f40 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55a5690a0fb8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55a5690a1050 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55a5690a3708 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55a5690a3708
| `-ParmVarDecl 0x55a5690a3818 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55a5690a3998 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a5690a3aa8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55a5690e7d90 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a5690e7d60 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55a5690e7d30 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a5690e7d00 <col:7> 'IntArg' lvalue ParmVar 0x55a5690a3aa8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55a5690a0b00 'base' 'int'
| | `-ImplicitCastExpr 0x55a5690e7e88 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a5690e7e58 <col:7> 'int' xvalue .base 0x55a5690a0b00
| |     `-CXXStaticCastExpr 0x55a5690e7e28 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a5690e7df8 <col:7> 'IntArg' lvalue ParmVar 0x55a5690a3aa8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55a5690a0b68 'status' 'int'
| | `-ImplicitCastExpr 0x55a5690e7f58 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a5690e7f28 <col:7> 'int' xvalue .status 0x55a5690a0b68
| |     `-CXXStaticCastExpr 0x55a5690e7ef8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a5690e7ec8 <col:7> 'IntArg' lvalue ParmVar 0x55a5690a3aa8 '' 'IntArg &&'
| `-CompoundStmt 0x55a5690e7fb0 <col:7>
`-CXXDestructorDecl 0x55a5690e6ef0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5690a7ca0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55a5690a7ef8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a5690e6e18 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a5690e7390 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55a5690e7370 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55a5690e7400 <col:19>
|-CXXConstructorDecl 0x55a5690e6ff8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55a5690e6ff8
| `-ParmVarDecl 0x55a5690e7108 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55a5690e71a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a5690e72b8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a5690e7fc0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a5690e7ce0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55a5690e7cb0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55a5690e7c80 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55a5690e72b8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55a5690e8030 <col:19>
`-CXXDestructorDecl 0x55a5690e7440 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a5690b1358 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a5690b1478 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x55a5690b1508 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x55a5690b1700 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55a5690b1540 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a5690b15b8 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55a5690b1630 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a5690b17d0 <col:79> 'const ArgContext' lvalue Var 0x55a569094308 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a5690b1970 <col:91, line:1348:5>
|   `-ReturnStmt 0x55a5690b1960 <line:1347:9, col:41>
|     `-CallExpr 0x55a5690b1910 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x55a5690b18f8 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a5690b18b0 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55a5690b12a0 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55a5690b1838 <col:26> 'const String' lvalue ParmVar 0x55a5690b1540 'str' 'const String &'
|       |-UnaryOperator 0x55a5690b1878 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55a5690b1858 <col:32> 'String' lvalue ParmVar 0x55a5690b15b8 'result' 'String &'
|       `-ImplicitCastExpr 0x55a5690b1948 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55a5690b1890 <col:40> 'int' 0
|-CXXConstructorDecl 0x55a5690f7898 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55a5690f7970 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a5690f7aa8 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x55a5690f7aa8
| `-ParmVarDecl 0x55a5690f7bb8 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x55a5690f7c58 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55a5690f7d68 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x55a5690fa2a0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5690b19b0 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a5690b1c08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a5690f77a8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a5690f7dd8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x55a5690f7dd8
| `-ParmVarDecl 0x55a5690f7ee8 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x55a5690f7f88 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a5690f8098 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x55a5690fa2b0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a5690fa280 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x55a5690f8970 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x55a5690f8940 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x55a5690f8098 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x55a5690fa320 <col:19>
`-CXXDestructorDecl 0x55a5690f8138 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5690faf68 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a5690fb368 prev 0x55a5690faf68 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55a5690fb560 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55a5690fb468 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55a5690fc4a8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55a5690fb6e0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55a5690fc468 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a5690fc428 <col:20> 'String *' lvalue ParmVar 0x55a5690fb468 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55a5690fb740 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55a5690fc508 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55a569094130 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55a5690fb620 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55a56906e310 Slot::store 'void ()' ]
| `-CompoundStmt 0x55a5690fcbc8 <col:22, line:857:9>
|   `-CallExpr 0x55a5690fcb80 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55a5690fcb68 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55a5690fcae8 <col:13> 'void (String &, const String &)' lvalue Function 0x55a5690fc9c8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55a568d442d8 'assign_consume')
|     |-UnaryOperator 0x55a5690fc698 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55a5690fc680 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55a5690fc650 <col:29> 'String *' lvalue ->_ptr 0x55a5690fb6e0
|     |     `-CXXThisExpr 0x55a5690fc640 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55a5690fcbb0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55a5690fc6c0 <col:35> 'String':'String' lvalue ->_slot 0x55a5690fb740
|         `-CXXThisExpr 0x55a5690fc6b0 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55a5690fb6e0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55a5690fb740 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55a5690fb7b8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55a5690fb7b8
| `-ParmVarDecl 0x55a5690fb8c8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55a5690fb968 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55a5690fb968
| `-ParmVarDecl 0x55a5690fba78 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55a5690fbb18 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55a5690fbb18
| `-ParmVarDecl 0x55a5690fbc28 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55a5690fbc98 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55a5690fbc98
| `-ParmVarDecl 0x55a5690fbda8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55a5690fbe30 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55a56906e210 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55a5690fc570 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
