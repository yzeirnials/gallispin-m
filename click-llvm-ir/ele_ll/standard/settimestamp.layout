
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d94c28 prev 0x561e82d8c3c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d94d20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x561e82d94db0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x561e82d94e28 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x561e82d94ee8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x561e82d94fb0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x561e82d95128 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x561e82d95060 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x561e82d951d0 <col:24>
| `-OptimizeNoneAttr 0x561e82d95228 <col:34>
|-CXXMethodDecl 0x561e82d95270 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x561e82d95528 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x561e82d95320 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x561e82d95398 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x561e82d95418 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x561e82d955e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x561e82d95618 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x561e82d95680 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x561e82d95708 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x561e82d95a28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x561e82d957c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x561e82d95838 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x561e82d958b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x561e82d95930 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x561e82d95b40 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x561e82d9d4b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x561e82d9d4b8
| `-ParmVarDecl 0x561e82d9d5c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x561e82d9d668 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x561e82d9d668
| `-ParmVarDecl 0x561e82d9d778 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x561e82e6abe8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d87c40 prev 0x561e82d879c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561e82d87d38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x561e82d87dc8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x561e82d87e28 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x561e82d87f18 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x561e82d88018 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x561e82d881e8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x561e82d88098 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x561e82d88110 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x561e82d88378 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x561e82d882b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x561e82d88420 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x561e82d88558 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x561e82d88490 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x561e82d886f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x561e82d88638 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x561e82d88898 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x561e82d887d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x561e82d88940 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x561e82d88a40 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x561e82d88b20 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d88a20 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x561e82d88a00 <col:26> 'int' 1
| `-EnumConstantDecl 0x561e82d88ad0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x561e82d88b38 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d88ab0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x561e82d88a90 <col:44> 'int' 2
|-CXXMethodDecl 0x561e82d88c80 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x561e82d88b68 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x561e82d88be8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x561e82d88dd8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x561e82d88d48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x561e82d89018 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x561e82d88e98 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x561e82d88f10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x561e82d890c8 <col:20>
| `-OptimizeNoneAttr 0x561e82d89120 <col:30>
|-CXXMethodDecl 0x561e82d89228 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x561e82d89160 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x561e82d892d0 <col:20>
| `-OptimizeNoneAttr 0x561e82d89328 <col:30>
|-CXXMethodDecl 0x561e82d89378 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x561e82d89440 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x561e82d89558 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x561e82d895e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x561e82d89668 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x561e82d896f0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x561e82d89778 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x561e82d89808 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x561e82d898c8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x561e82d89950 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x561e82d899d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x561e82d89a60 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x561e82d89ae8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x561e82d89b70 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x561e82d89c00 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x561e82d89cc0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x561e82d89d50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x561e82d89ea0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x561e82d89e08 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x561e82d8a030 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x561e82d89f60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x561e82d8a2e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x561e82d8a0e8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x561e82d8a168 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x561e82d8a1e8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x561e82d8a398 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x561e82d8a4a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561e82d8a730 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d8a480 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x561e82d8a460 <col:33> 'int' 0
| |-EnumConstantDecl 0x561e82d8a530 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561e82d8a748 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d8a510 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x561e82d8a4f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x561e82d8a5c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561e82d8a760 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d8a5a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x561e82d8a580 <col:38> 'int' 90
| |-EnumConstantDecl 0x561e82d8a650 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x561e82d8a778 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d8a630 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x561e82d8a610 <col:35> 'int' 100
| `-EnumConstantDecl 0x561e82d8a6e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x561e82d8a790 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d8a6c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x561e82d8a6a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x561e82d8a7d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x561e82d8ac10 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561e82d8aa80 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x561e82d8aaf8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d8ace0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x561e82d8ae60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x561e82d8ad90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d8b068 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561e82d8af18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x561e82d8af90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d8b168 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x561e82d8b208 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x561e82d8b2d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x561e82d8b360 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x561e82d8b590 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d8b340 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x561e82d8b320 <col:36> 'int' EnumConstant 0x561e82d8b2d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x561e82d8b3b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561e82d8b400 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561e82d8b450 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561e82d8b4a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x561e82d8b4f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x561e82d8b540 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x561e82d8b678 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x561e82d8b5b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x561e82d8b740 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x561e82d8b800 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x561e82d8b8c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x561e82d8b980 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x561e82d8ba98 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x561e82d8bb60 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x561e82d8bce0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x561e82d8bc10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x561e82d8be08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x561e82d8c008 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x561e82d8beb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x561e82d8bf38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x561e82d99958 <col:54, line:127:5>
|   |-ParenExpr 0x561e82d99808 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x561e82d997d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d994c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x561e82d994a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x561e82d99488 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x561e82d99470 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x561e82d99440 <col:31> 'Router *' lvalue ->_router 0x561e82d97320
|   |   |         `-CXXThisExpr 0x561e82d99430 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x561e82d99528 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d99508 <col:48> 'int' 0
|   |   `-CallExpr 0x561e82d99738 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x561e82d99720 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d99700 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d99778 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d99598 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x561e82d99790 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d995b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x561e82d997a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d995f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x561e82d997c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d996e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d996d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d99688 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x561e82d998a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x561e82d99838 <col:9> 'Router *' lvalue ->_router 0x561e82d97320
|   | | `-CXXThisExpr 0x561e82d99828 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x561e82d99888 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561e82d99868 <col:19> 'Router *' lvalue ParmVar 0x561e82d8beb8 'r' 'Router *'
|   `-BinaryOperator 0x561e82d99938 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x561e82d998d0 <col:9> 'int' lvalue ->_eindex 0x561e82d97388
|     | `-CXXThisExpr 0x561e82d998c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x561e82d99920 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d99900 <col:19> 'int' lvalue ParmVar 0x561e82d8bf38 'eindex' 'int'
|-CXXMethodDecl 0x561e82d8c190 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x561e82d8c0c8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x561e82d8c260 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x561e82d8c328 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x561e82d8c3c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x561e82d8c618 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x561e82d8c490 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x561e82d8c510 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x561e82d8c6c8 <col:20>
| `-OptimizeNoneAttr 0x561e82d8c720 <col:30>
|-CXXMethodDecl 0x561e82d8c828 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x561e82d8c760 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x561e82d8c8d0 <col:20>
| `-OptimizeNoneAttr 0x561e82d8c928 <col:30>
|-CXXMethodDecl 0x561e82d8c9f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x561e82d8c968 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x561e82d8caa0 <col:20>
| `-OptimizeNoneAttr 0x561e82d8caf8 <col:30>
|-CXXMethodDecl 0x561e82d8cc88 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x561e82d8cb30 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x561e82d8cbb0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x561e82d8ce18 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x561e82d8cd50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x561e82d8cf68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x561e82d8ced8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x561e82d8d0b8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x561e82d8d028 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x561e82d8d208 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x561e82d8d178 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x561e82d8d4c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x561e82d8d2c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x561e82d8d340 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x561e82d8d3e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x561e82d8d5a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x561e82d8d660 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x561e82d8d930 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x561e82d8d7e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x561e82d8d858 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d8da58 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x561e82d8dc30 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x561e82d8db10 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x561e82d8db90 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x561e82d8de18 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x561e82d8dcf8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x561e82d8dd78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x561e82d8e188 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x561e82d8ded8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561e82d8df50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561e82d8dfd0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561e82d98f40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d98f20 <col:106> 'int' 0
| `-ParmVarDecl 0x561e82d8e048 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561e82d98f78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561e82d98f58 <col:126> 'int' 0
|-CXXMethodDecl 0x561e82d8e528 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561e82d8e258 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561e82d8e2f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561e82d8e370 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x561e82d8e3e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561e82d98fb0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561e82d98f90 <col:114> 'int' 0
|-CXXMethodDecl 0x561e82d8e8b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561e82d8e600 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x561e82d8e678 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x561e82d8e6f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x561e82d98fc8 <col:96> 'int' 0
| `-ParmVarDecl 0x561e82d8e770 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561e82d99008 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561e82d98fe8 <col:116> 'int' 0
|-CXXMethodDecl 0x561e82d8ec38 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x561e82d8e988 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x561e82d8ea00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d8ea80 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561e82d99040 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d99020 <col:109> 'int' 0
| `-ParmVarDecl 0x561e82d8eaf8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561e82d99078 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561e82d99058 <col:129> 'int' 0
|-CXXMethodDecl 0x561e82d8efb8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561e82d8ed08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x561e82d8ed80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d8ee00 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x561e82d8ee78 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561e82d990b0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561e82d99090 <col:117> 'int' 0
|-CXXMethodDecl 0x561e82d8f348 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x561e82d8f090 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d8f108 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d8f188 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x561e82d990c8 <col:99> 'int' 0
| `-ParmVarDecl 0x561e82d8f200 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x561e82d99108 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x561e82d990e8 <col:119> 'int' 0
|-CXXMethodDecl 0x561e82d8f768 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x561e82d8f418 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x561e82d8f498 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x561e82d8f510 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d8f590 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x561e82d99140 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d99120 <col:108> 'int' 0
| `-ParmVarDecl 0x561e82d8f610 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x561e82d99178 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x561e82d99158 <col:141> 'int' 0
|-CXXMethodDecl 0x561e82d8fb88 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x561e82d8f840 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x561e82d8f8c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x561e82d8f938 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d8f9b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x561e82d8fa38 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x561e82d99190 <col:121> 'int' 0
|-CXXMethodDecl 0x561e82d8ffb8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x561e82d8fc68 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x561e82d8fce8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x561e82d8fd60 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d8fde0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x561e82d991b0 <col:98> 'int' 0
| `-ParmVarDecl 0x561e82d8fe60 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x561e82d991d0 <col:123> 'int' 0
|-CXXMethodDecl 0x561e82d90280 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x561e82d90090 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x561e82d90110 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x561e82d90190 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x561e82d991f0 <col:80> 'int' 0
|-EnumDecl 0x561e82d90338 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x561e82d90440 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561e82d906d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d90420 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x561e82d90400 <col:42> 'int' 1
| |-EnumConstantDecl 0x561e82d904d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561e82d906e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d904b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x561e82d90490 <col:40> 'int' 2
| |-EnumConstantDecl 0x561e82d90560 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561e82d90700 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d90540 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x561e82d90520 <col:44> 'int' 4
| |-EnumConstantDecl 0x561e82d905f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x561e82d90718 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d905d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x561e82d905b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x561e82d90680 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x561e82d90730 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d90660 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x561e82d90640 <col:34> 'int' 6
|-CXXMethodDecl 0x561e82d909e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x561e82d90758 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x561e82d907f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x561e82d90878 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x561e82d908f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x561e82d992a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x561e82d99290 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x561e82d99278 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x561e82d99258 <col:98, col:105> 'String' (CXXTemporary 0x561e82d99258)
|           `-CXXTemporaryObjectExpr 0x561e82d99220 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x561e82d90c88 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x561e82d90ab8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x561e82d90b30 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x561e82d90ba8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x561e82d99358 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x561e82d99340 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x561e82d99328 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x561e82d99308 <col:94, col:101> 'String' (CXXTemporary 0x561e82d99308)
| |         `-CXXTemporaryObjectExpr 0x561e82d992d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x561e82d99b40 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x561e82d99ab8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x561e82d99a88 <col:9> '<bound member function type>' ->add_task_handlers 0x561e82d909e8
|     | `-CXXThisExpr 0x561e82d99a78 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x561e82d99af8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82d999f8 <col:27> 'Task *' lvalue ParmVar 0x561e82d90ab8 'task' 'Task *'
|     |-ImplicitCastExpr 0x561e82d99b10 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82d99a18 <col:33> 'NotifierSignal *' lvalue ParmVar 0x561e82d90b30 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x561e82d99b28 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x561e82d99a38 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x561e82d90680 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x561e82d99a58 <col:62> 'const String' lvalue ParmVar 0x561e82d90ba8 'prefix' 'const String &'
|-CXXMethodDecl 0x561e82d90e98 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x561e82d90d50 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x561e82d90dc8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x561e82d99408 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x561e82d993f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x561e82d993d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x561e82d993b8 <col:70, col:77> 'String' (CXXTemporary 0x561e82d993b8)
| |         `-CXXTemporaryObjectExpr 0x561e82d99380 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x561e82d99d18 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x561e82d99c90 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x561e82d99c60 <col:9> '<bound member function type>' ->add_task_handlers 0x561e82d909e8
|     | `-CXXThisExpr 0x561e82d99c50 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x561e82d99cd0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82d99bd0 <col:27> 'Task *' lvalue ParmVar 0x561e82d90d50 'task' 'Task *'
|     |-ImplicitCastExpr 0x561e82d99ce8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x561e82d99bf0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x561e82d99d00 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x561e82d99c10 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x561e82d90680 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x561e82d99c30 <col:57> 'const String' lvalue ParmVar 0x561e82d90dc8 'prefix' 'const String &'
|-CXXMethodDecl 0x561e82d91178 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x561e82d90f60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d90fe0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d91058 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x561e82d91428 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x561e82d91248 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d912c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d91348 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x561e82d91718 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x561e82d914f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d91578 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d915f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x561e82d919c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x561e82d917e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d91868 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d918e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x561e82d91c78 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x561e82d91a98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d91b18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d91b98 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x561e82d91f28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x561e82d91d48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d91dc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d91e40 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x561e82d921d8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x561e82d91ff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d92078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d920f8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x561e82d924e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x561e82d92300 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d92380 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d92400 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x561e82d927c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x561e82d925b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d92638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d926e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x561e82d92aa8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x561e82d92898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d92918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d929c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x561e82d92d10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x561e82d92b78 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x561e82d92bf8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x561e82d92c70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x561e82d92fb8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x561e82d92de0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x561e82d92e60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x561e82d92ed8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x561e82d93268 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x561e82d93088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d93108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d93188 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x561e82d93518 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x561e82d93338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d933b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d93430 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x561e82d937c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x561e82d935e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d93668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d936e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x561e82d93a98 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x561e82d93898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d93918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x561e82d939b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x561e82d93dc8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x561e82d93b68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x561e82d93be8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x561e82d93c60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x561e82d93cd8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561e82d99420 <col:93> 'bool' false
|-CXXMethodDecl 0x561e82d93fb0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561e82d93e98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x561e82d93f18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x561e82d94188 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561e82d94070 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x561e82d940f0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x561e82d94468 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x561e82d94248 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x561e82d942c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x561e82d94340 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x561e82d943b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d94758 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x561e82d94538 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x561e82d945b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x561e82d94630 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x561e82d946a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d94990 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x561e82d94830 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x561e82d948b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x561e82d94b78 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x561e82d94a58 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x561e82d94ad8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x561e82d94c28 prev 0x561e82d8c3c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561e82d94d20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x561e82d94db0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x561e82d94e28 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x561e82d94ee8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x561e82d94fb0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x561e82d95128 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x561e82d95060 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x561e82d951d0 <col:24>
| | `-OptimizeNoneAttr 0x561e82d95228 <col:34>
| |-CXXMethodDecl 0x561e82d95270 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x561e82d95528 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x561e82d95320 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x561e82d95398 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x561e82d95418 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x561e82d955e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x561e82d95618 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x561e82d95680 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x561e82d95708 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x561e82d95a28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x561e82d957c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x561e82d95838 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x561e82d958b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x561e82d95930 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x561e82d95b40 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x561e82d9d4b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x561e82d9d4b8
| | `-ParmVarDecl 0x561e82d9d5c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x561e82d9d668 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x561e82d9d668
| | `-ParmVarDecl 0x561e82d9d778 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x561e82e6abe8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561e82d95bb8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x561e82d95c58 <col:38> "" ""
|-CXXMethodDecl 0x561e82d95ce8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x561e82d95d88 <col:44> "" ""
|-AccessSpecDecl 0x561e82d95df8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x561e82d95e20 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x561e82d95f20 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x561e82d95f70 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d95f00 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x561e82d95ee0 <col:27> 'int' 4
|-FieldDecl 0x561e82d96028 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x561e82d961d8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x561e82d96290 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x561e82d97320 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x561e82d97388 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x561e82d974d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x561e82d97418 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x561e82d97688 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x561e82d97598 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x561e82d97868 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x561e82d97748 <col:20> col:23 'int'
| `-ParmVarDecl 0x561e82d977c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x561e82d97b10 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d97930 <col:23> col:26 'int'
| |-ParmVarDecl 0x561e82d979b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x561e82d97a28 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x561e82d97bc8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x561e82d97c90 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x561e82d97ce0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x561e82d97d30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x561e82d97f10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x561e82d97dc0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x561e82d97e38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d981b8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x561e82d97fd8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x561e82d98058 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x561e82d980d0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x561e82d983d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x561e82d98288 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x561e82d98308 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x561e82d98710 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x561e82d98498 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x561e82d98518 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x561e82d98590 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x561e82d98610 <col:57> col:60 'int'
|-CXXMethodDecl 0x561e82d988f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x561e82d987e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x561e82d98860 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x561e82d98a48 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x561e82d989b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x561e82d98dc8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x561e82d98b08 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x561e82d98b88 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x561e82d98c00 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x561e82d98c80 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x561e82d98ee0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetTimestamp
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _action
       112 |   class Timestamp _tv
       112 |     union Timestamp::rep_t _t
       112 |       int64_t x
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d20570 prev 0x561e82d173b0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d20668 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x561e82d20708 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x561e82d274d0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561e82d278b8 <col:11>
|-CXXConstructorDecl 0x561e82d275b0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82d27698 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x561e82d28000 <col:11>
|-CXXConstructorDecl 0x561e82d27738 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82d27848 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x561e82d29858 <col:11>
|-CXXDestructorDecl 0x561e82d28b68 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561e82a2f3c8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82a2f4d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x561e82a2fda0 <col:11>
|   `-ReturnStmt 0x561e82a2fd90 <col:11>
|     `-UnaryOperator 0x561e82a2fd78 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82a2fd68 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x561e82a2f548 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x561e82a2f548
  `-ParmVarDecl 0x561e82a2f658 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d16568 prev 0x561e82d16278 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d16660 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x561e82d166f0 <col:19, col:25> col:19 public
|-TypedefDecl 0x561e82d16728 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x561e8297b570 'int32_t' sugar
|   |-Typedef 0x561e8288f268 'int32_t'
|   `-TypedefType 0x561e828683b0 '__int32_t' sugar
|     |-Typedef 0x561e82867fc8 '__int32_t'
|     `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82d16790 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x561e8297b730 'int64_t' sugar
|   |-Typedef 0x561e8288f2d0 'int64_t'
|   `-TypedefType 0x561e828684d0 '__int64_t' sugar
|     |-Typedef 0x561e828680a8 '__int64_t'
|     `-BuiltinType 0x561e82826390 'long'
|-EnumDecl 0x561e82d167e8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x561e82d16960 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x561e82d16940 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x561e82d16918 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x561e82d16900 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x561e82d168d0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x561e82d16a58 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x561e82d16a38 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x561e82d16a10 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x561e82d169f8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x561e82d169d0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x561e82d169b0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x561e82d16aa8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x561e82d16bb0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17100 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16b90 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x561e82d16b70 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x561e82d16c40 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17118 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16c20 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x561e82d16c00 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x561e82d16cd0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17130 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16cb0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x561e82d16c90 <col:25> 'int' 1000
| |-EnumConstantDecl 0x561e82d16d60 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17148 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16d40 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x561e82d16d20 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x561e82d16df0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17160 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16dd0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x561e82d16db0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x561e82d16e80 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17178 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16e60 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x561e82d16e40 <col:24> 'int' 1000
| |-EnumConstantDecl 0x561e82d16f10 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d17190 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16ef0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x561e82d16ed0 <col:26> 'int' EnumConstant 0x561e82d16bb0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x561e82d16fe0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x561e82d171a8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d16fc0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x561e82d16fa0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x561e82d16f60 <col:27> 'int' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x561e82d16f80 <col:44> 'int' EnumConstant 0x561e82d16e80 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x561e82d170b0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x561e82d171c0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d17090 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x561e82d17070 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x561e82d17030 <col:27> 'int' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x561e82d17050 <col:44> 'int' EnumConstant 0x561e82d16d60 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x561e82d171d8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x561e82d172e0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x561e82d17330 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d172c0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x561e82d172a0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x561e82d17358 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x561e8297b1a0 'uninitialized_type'
|   `-CXXRecord 0x561e8297b108 'uninitialized_type'
|-CXXRecordDecl 0x561e82d173b0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x561e82d174c0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d278c8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82d279e8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x561e82d279a0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x561e82d27930 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d27920 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x561e82d27960 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x561e82d279d0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x561e82d27980 <col:19> 'int' 0
|-CXXConstructorDecl 0x561e82d17708 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x561e82d17580 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x561e82d175f8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561e82d23200 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561e82d231e0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d27a00 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82d27b50 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x561e82d27ad8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x561e82d27a68 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d27a58 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561e82d27b20 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561e82d27b08 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x561e82d27a98 <col:16> 'long' lvalue ParmVar 0x561e82d17580 'sec' 'long'
|     `-ImplicitCastExpr 0x561e82d27b38 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d27ab8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d175f8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561e82d17968 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561e82d177d8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x561e82d17850 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561e82d23238 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561e82d23218 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d27b68 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82d27ca0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x561e82d27c40 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x561e82d27bd0 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d27bc0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561e82d27c70 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82d27c00 <col:16> 'int' lvalue ParmVar 0x561e82d177d8 'sec' 'int'
|     `-ImplicitCastExpr 0x561e82d27c88 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d27c20 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d17850 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561e82d17bc8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x561e82d17a38 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x561e82d17ab0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561e82d23270 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561e82d23250 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d27cb8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82d27e08 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x561e82d27d90 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x561e82d27d20 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d27d10 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561e82d27dd8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561e82d27dc0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x561e82d27d50 <col:16> 'unsigned long' lvalue ParmVar 0x561e82d17a38 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x561e82d27df0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d27d70 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d17ab0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561e82d18d60 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x561e82d17c98 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x561e82d17d10 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561e82d232a8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561e82d23288 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d27e20 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82d27f70 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x561e82d27ef8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x561e82d27e88 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d27e78 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561e82d27f40 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561e82d27f28 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x561e82d27eb8 <col:16> 'unsigned int' lvalue ParmVar 0x561e82d17c98 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x561e82d27f58 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d27ed8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d17d10 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x561e82d18ec0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x561e82d18e30 <col:31> col:37 'double'
|-CXXConstructorDecl 0x561e82d19058 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x561e82d18f98 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x561e82d19288 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x561e82d19190 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x561e82d19438 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x561e82d19378 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d28010 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x561e82d27f88 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x561e82d19378 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x561e82d28070 <col:19, line:214:5>
|-CXXConstructorDecl 0x561e82d19608 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x561e82d19548 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d28080 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82d28130 <col:53, line:219:5>
|   `-CStyleCastExpr 0x561e82d28108 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x561e82d280d8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x561e82d19548 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x561e82d197f8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x561e82d19770 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x561e82d16310 'Timestamp'
|   | `-CXXRecord 0x561e82d16568 'Timestamp'
|   `-ParenType 0x561e82d19710 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x561e82d196e0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x561e82d168b0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x561e82d16728 'seconds_type'
|         `-TypedefType 0x561e8297b570 'int32_t' sugar
|           |-Typedef 0x561e8288f268 'int32_t'
|           `-TypedefType 0x561e828683b0 '__int32_t' sugar
|             |-Typedef 0x561e82867fc8 '__int32_t'
|             `-BuiltinType 0x561e82826370 'int'
|-CXXConversionDecl 0x561e82d19938 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x561e82d19a08 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x561e82d28238 <col:37, line:231:5>
|   `-ReturnStmt 0x561e82d28228 <line:227:9, col:23>
|     `-BinaryOperator 0x561e82d28208 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x561e82d281d8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561e82d28188 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x561e82d20708
|       |   `-MemberExpr 0x561e82d28158 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x561e82d216b8
|       |     `-CXXThisExpr 0x561e82d28148 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561e82d281f0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x561e82d281b8 <col:23> 'int' 0
|-CXXMethodDecl 0x561e82d19ac8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x561e82d19b88 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d19c48 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d19d08 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d19dc8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d19f38 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x561e82d19e78 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x561e82d1a080 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x561e82d19ff0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1a148 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x561e82d1a1e8 <col:54> "" ""
|-CXXMethodDecl 0x561e82d1a278 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x561e82d1a318 <col:54> "" ""
|-CXXMethodDecl 0x561e82d1a3a8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x561e82d1a448 <col:54> "" ""
|-CXXMethodDecl 0x561e82d1a548 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x561e82d1a618 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x561e82d1a748 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x561e82d1a840 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x561e82d1a978 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x561e82d28450 <col:39, line:271:5>
|   `-ReturnStmt 0x561e82d28440 <line:267:9, col:61>
|     `-CallExpr 0x561e82d283e0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x561e82d283c8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82d28250 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x561e82d219e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x561e82d28410 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561e82d282b0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x561e82d20708
|       |   `-MemberExpr 0x561e82d28280 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x561e82d216b8
|       |     `-CXXThisExpr 0x561e82d28270 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561e82d28428 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x561e82d28350 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x561e82d28320 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x561e82d282e0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x561e82d28338 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x561e82d28300 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16e80 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d1aa38 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x561e82d28610 <col:39, line:279:5>
|   `-ReturnStmt 0x561e82d28600 <line:275:9, col:61>
|     `-CallExpr 0x561e82d285a0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x561e82d28588 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82d28468 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x561e82d219e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x561e82d285d0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561e82d284c8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x561e82d20708
|       |   `-MemberExpr 0x561e82d28498 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x561e82d216b8
|       |     `-CXXThisExpr 0x561e82d28488 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561e82d285e8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x561e82d28568 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x561e82d28538 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x561e82d284f8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x561e82d28550 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x561e82d28518 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16d60 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d1aaf8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x561e82d287a8 <col:39, line:287:5>
|   `-ReturnStmt 0x561e82d28798 <line:283:9, col:53>
|     `-BinaryOperator 0x561e82d28778 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x561e82d28748 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x561e82d28668 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x561e82d20708
|       |   `-MemberExpr 0x561e82d28638 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x561e82d216b8
|       |     `-CXXThisExpr 0x561e82d28628 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x561e82d28760 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x561e82d28728 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561e82d28708 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d286d8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d28698 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16bb0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d286f0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d286b8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d1abe8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x561e82d29a40 <col:40, line:293:5>
|   |-DeclStmt 0x561e82d288f0 <line:291:9, col:48>
|   | `-VarDecl 0x561e82d287d0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x561e82d288d0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x561e82d28878 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x561e82d28848 <col:22> '<bound member function type>' ->subsec 0x561e82d19b88
|   |     |   `-CXXThisExpr 0x561e82d28838 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x561e82d288b8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x561e82d28898 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16fe0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561e82d29a30 <line:292:9, col:70>
|     `-ExprWithCleanups 0x561e82d29a18 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d299e8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d299d0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x561e82d299b0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x561e82d29980 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x561e82d29718 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x561e82d29700 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x561e82d28908 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x561e82d287d0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x561e82d29920 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x561e82d29908 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x561e82d298d8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x561e82d29730 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x561e82d296a0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x561e82d29688 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x561e82d29638 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561e82d164b8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x561e82d295d8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x561e82d28938 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x561e82d28928 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x561e82d29620 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x561e82d29608 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x561e82d28df8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x561e82d28960 <col:39> 'int' 0
|               |               `-BinaryOperator 0x561e82d289f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x561e82d289c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x561e82d28980 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16fe0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x561e82d289d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x561e82d289a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x561e82d287d0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x561e82d29950 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x561e82d296e8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x561e82d296d8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x561e82d1aca8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x561e82d29f98 <col:40, line:302:5>
|   |-DeclStmt 0x561e82d29b90 <line:297:9, col:48>
|   | `-VarDecl 0x561e82d29a70 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x561e82d29b70 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x561e82d29b18 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x561e82d29ae8 <col:22> '<bound member function type>' ->subsec 0x561e82d19b88
|   |     |   `-CXXThisExpr 0x561e82d29ad8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x561e82d29b58 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x561e82d29b38 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d170b0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561e82d29f88 <line:298:9, col:70>
|     `-ExprWithCleanups 0x561e82d29f70 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d29f40 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d29f28 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x561e82d29f08 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x561e82d29ed8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x561e82d29e00 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x561e82d29de8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x561e82d29ba8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x561e82d29a70 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x561e82d29e78 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x561e82d29e60 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x561e82d29e30 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x561e82d29e18 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x561e82d29d88 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x561e82d29d70 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x561e82d29d50 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x561e82d164b8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x561e82d29cf0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x561e82d29bd8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x561e82d29bc8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x561e82d29d38 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x561e82d29d20 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x561e82d29cb0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x561e82d29c00 <col:39> 'int' 0
|               |               `-BinaryOperator 0x561e82d29c90 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x561e82d29c60 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x561e82d29c20 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d170b0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x561e82d29c78 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x561e82d29c40 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x561e82d29a70 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x561e82d29ea8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x561e82d29dd0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x561e82d29dc0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x561e82d1ad68 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x561e82d2a020 <col:40, line:306:5>
|   `-ReturnStmt 0x561e82d2a010 <line:305:9, col:17>
|     `-CXXConstructExpr 0x561e82d29fe0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x561e82d29fc8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82d29fb8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x561e82d1af08 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x561e82d1ae18 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1b0d8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x561e82d1afe0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x561e82d1b1c8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x561e82d1b338 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x561e82d1b278 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x561e82d2a168 <col:56, line:320:5>
|   `-ReturnStmt 0x561e82d2a158 <line:319:9, col:32>
|     `-ExprWithCleanups 0x561e82d2a140 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d2a110 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d2a0f8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561e82d2a0b8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561e82d2a088 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561e82d2a048 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1b278 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x561e82d2a0a0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x561e82d2a068 <col:31> 'int' 0
|-CXXMethodDecl 0x561e82d1b578 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x561e82d1b3f0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1b468 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d2a338 <col:72, line:326:5>
|   `-ReturnStmt 0x561e82d2a328 <line:325:9, col:51>
|     `-ExprWithCleanups 0x561e82d2a310 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d2a2e0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d2a2c8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561e82d2a288 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561e82d2a270 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561e82d2a190 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1b3f0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x561e82d2a230 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x561e82d2a218 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561e82d2a1b0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561e82d1fe60 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x561e82d2a258 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561e82d2a1d0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1b468 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1b728 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x561e82d1b638 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x561e82d2aa00 <col:56, line:337:5>
|   |-DeclStmt 0x561e82d2a638 <line:329:9, col:51>
|   | `-VarDecl 0x561e82d2a360 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x561e82d2a620 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x561e82d2a5f0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561e82d2a5d8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x561e82d2a5c0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x561e82d2a590 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x561e82d2a578 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x561e82d2a560 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x561e82d2a450 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x561e82d2a7f0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x561e82d2a6a0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x561e82d20708
|   | | `-MemberExpr 0x561e82d2a670 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x561e82d216b8
|   | |   `-DeclRefExpr 0x561e82d2a650 <col:9> 'Timestamp' lvalue Var 0x561e82d2a360 't' 'Timestamp'
|   | `-BinaryOperator 0x561e82d2a7d0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x561e82d2a7a0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561e82d2a6d0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x561e82d1b638 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x561e82d2a7b8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x561e82d2a780 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x561e82d2a760 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x561e82d2a730 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x561e82d2a6f0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x561e82d2a748 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x561e82d2a710 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16e80 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561e82d2a9e8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x561e82d2a9b8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x561e82d2a9a0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x561e82d2a980 <col:16> 'Timestamp' lvalue Var 0x561e82d2a360 't' 'Timestamp'
|-CXXMethodDecl 0x561e82d1b8f0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x561e82d1b7e0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1b858 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d2abb8 <col:72, line:343:5>
|   `-ReturnStmt 0x561e82d2aba8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x561e82d2ab90 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d2ab60 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d2ab48 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561e82d2ab08 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561e82d2aaf0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561e82d2aa38 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1b7e0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x561e82d2aab0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x561e82d2aa98 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561e82d2aa58 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561e82d1ffa8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x561e82d2aad8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561e82d2aa78 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1b858 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1ba40 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x561e82d1b9b0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x561e82d2b000 <col:56, line:354:5>
|   |-DeclStmt 0x561e82d2ada8 <line:346:9, col:51>
|   | `-VarDecl 0x561e82d2abe0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x561e82d2ad90 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x561e82d2ad60 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561e82d2ad48 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x561e82d2ad30 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x561e82d2ad00 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x561e82d2ace8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x561e82d2acd0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x561e82d2aca0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x561e82d2af60 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x561e82d2ae10 <col:9, col:14> 'int64_t':'long' lvalue .x 0x561e82d20708
|   | | `-MemberExpr 0x561e82d2ade0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x561e82d216b8
|   | |   `-DeclRefExpr 0x561e82d2adc0 <col:9> 'Timestamp' lvalue Var 0x561e82d2abe0 't' 'Timestamp'
|   | `-BinaryOperator 0x561e82d2af40 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x561e82d2af10 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561e82d2ae40 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x561e82d1b9b0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x561e82d2af28 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x561e82d2aef0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x561e82d2aed0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x561e82d2aea0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x561e82d2ae60 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x561e82d2aeb8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x561e82d2ae80 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16d60 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561e82d2afe8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x561e82d2afb8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x561e82d2afa0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x561e82d2af80 <col:16> 'Timestamp' lvalue Var 0x561e82d2abe0 't' 'Timestamp'
|-CXXMethodDecl 0x561e82d1bc08 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x561e82d1baf8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1bb70 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d2b1b8 <col:72, line:360:5>
|   `-ReturnStmt 0x561e82d2b1a8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x561e82d2b190 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d2b160 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d2b148 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561e82d2b108 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x561e82d2b0f0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x561e82d2b038 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1baf8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x561e82d2b0b0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x561e82d2b098 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561e82d2b058 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561e82d200f0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x561e82d2b0d8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x561e82d2b078 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1bb70 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1bd58 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x561e82d1bcc8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x561e82d37b28 <col:56, line:371:5>
|   |-DeclStmt 0x561e82d2b3a8 <line:363:9, col:51>
|   | `-VarDecl 0x561e82d2b1e0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x561e82d2b390 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x561e82d2b360 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x561e82d2b348 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x561e82d2b330 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x561e82d2b300 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x561e82d2b2e8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x561e82d2b2d0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x561e82d2b2a0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x561e82d37a88 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x561e82d2b410 <col:9, col:14> 'int64_t':'long' lvalue .x 0x561e82d20708
|   | | `-MemberExpr 0x561e82d2b3e0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x561e82d216b8
|   | |   `-DeclRefExpr 0x561e82d2b3c0 <col:9> 'Timestamp' lvalue Var 0x561e82d2b1e0 't' 'Timestamp'
|   | `-CallExpr 0x561e82d37a28 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x561e82d37a10 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x561e82d2b440 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x561e82d219e8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x561e82d37a58 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x561e82d2b460 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x561e82d1bcc8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x561e82d37a70 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x561e82d379f0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x561e82d379c0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x561e82d2b480 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16bb0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x561e82d379d8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x561e82d2b4a0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x561e82d37b10 <line:370:9, col:16>
|     `-CXXConstructExpr 0x561e82d37ae0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x561e82d37ac8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x561e82d37aa8 <col:16> 'Timestamp' lvalue Var 0x561e82d2b1e0 't' 'Timestamp'
|-CXXMethodDecl 0x561e82d1be48 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x561e82d37c68 <col:39, line:377:5>
|   `-ReturnStmt 0x561e82d37c58 <line:376:9, col:30>
|     `-ExprWithCleanups 0x561e82d37c40 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x561e82d37c10 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x561e82d37bf8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x561e82d37bb8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x561e82d37b60 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x561e82d37ba0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x561e82d37b80 <col:29> 'int' 1
|-CXXMethodDecl 0x561e82d1bf08 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x561e82d37d48 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x561e82d37d00 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x561e82d37c90 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d37c80 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x561e82d37cc0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x561e82d37d30 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x561e82d37ce0 <col:19> 'int' 0
|-CXXMethodDecl 0x561e82d1c108 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561e82d1bfb8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1c030 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561e82d232e0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561e82d232c0 <col:60> 'int' 0
| `-CompoundStmt 0x561e82d37f40 <col:63, line:395:5>
|   `-BinaryOperator 0x561e82d37f20 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x561e82d37da0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x561e82d20708
|     | `-MemberExpr 0x561e82d37d70 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x561e82d216b8
|     |   `-CXXThisExpr 0x561e82d37d60 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x561e82d37f00 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x561e82d37e90 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x561e82d37e30 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x561e82d37e18 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x561e82d37e00 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x561e82d37dd0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1bfb8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x561e82d37e78 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x561e82d37e58 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x561e82d37ee8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x561e82d37ed0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x561e82d37eb0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1c030 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1c2d8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561e82d1c1c8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1c240 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38098 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x561e82d38050 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x561e82d37f68 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d37f58 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561e82d38080 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82d37f98 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1c1c8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x561e82d38010 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x561e82d37ff8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82d37fb8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561e82d1ffa8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x561e82d38038 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561e82d37fd8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1c240 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1c4a8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561e82d1c398 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1c410 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d381f0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x561e82d381a8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x561e82d380c0 <col:9> '<bound member function type>' ->assign 0x561e82d1c108
|     | `-CXXThisExpr 0x561e82d380b0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x561e82d381d8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82d380f0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x561e82d1c398 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x561e82d38168 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x561e82d38150 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82d38110 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x561e82d200f0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x561e82d38190 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561e82d38130 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1c410 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d1c678 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561e82d1c568 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1c5e0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x561e82d23318 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x561e82d232f8 <col:57> 'int' 0
| `-DeprecatedAttr 0x561e82d1c728 <col:75> "" ""
|-CXXMethodDecl 0x561e82d1c8b8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561e82d1c7a8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1c820 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561e82d1c968 <col:74> "" ""
|-CXXMethodDecl 0x561e82d1caf8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x561e82d1c9e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x561e82d1ca60 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561e82d1cba8 <col:74> "" ""
|-CXXMethodDecl 0x561e82d1cc38 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x561e82d1ccd8 <col:42> "" ""
|-CXXMethodDecl 0x561e82d1f510 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x561e82d1f3f0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x561e82d1f470 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x561e82d1f5e0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x561e82d1f6a0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x561e82d1f740 <col:20>
| `-OptimizeNoneAttr 0x561e82d1f798 <col:30>
|-CXXMethodDecl 0x561e82d1f7e0 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x561e82d1f8a0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x561e82d1f960 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x561e82d1fa20 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x561e82d1fae0 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x561e82d1fba0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x561e82d1fc60 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x561e82d1fd20 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x561e82d1fe60 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561e82d1fdd0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38338 <col:58, line:512:5>
|   `-ReturnStmt 0x561e82d38328 <line:511:9, col:53>
|     `-BinaryOperator 0x561e82d38308 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x561e82d382d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d38208 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1fdd0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561e82d382f0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561e82d382b8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561e82d38298 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d38268 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d38228 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d38280 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d38248 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16e80 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d1ffa8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561e82d1ff18 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38480 <col:58, line:516:5>
|   `-ReturnStmt 0x561e82d38470 <line:515:9, col:53>
|     `-BinaryOperator 0x561e82d38450 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x561e82d38420 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d38350 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d1ff18 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561e82d38438 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561e82d38400 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561e82d383e0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d383b0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d38370 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d383c8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d38390 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16d60 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d200f0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561e82d20060 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d385c8 <col:58, line:520:5>
|   `-ReturnStmt 0x561e82d385b8 <line:519:9, col:53>
|     `-BinaryOperator 0x561e82d38598 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x561e82d38568 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d38498 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d20060 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561e82d38580 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561e82d38548 <col:23, col:53> 'int'
|           `-BinaryOperator 0x561e82d38528 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d384f8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d384b8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16bb0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d38510 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d384d8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d20238 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561e82d201a8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38710 <col:60, line:524:5>
|   `-ReturnStmt 0x561e82d38700 <line:523:9, col:55>
|     `-BinaryOperator 0x561e82d386e0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x561e82d386b0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d385e0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d201a8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561e82d386c8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561e82d38690 <col:25, col:55> 'int'
|           `-BinaryOperator 0x561e82d38670 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d38640 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d38600 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d38658 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d38620 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16e80 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d20380 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561e82d202f0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38858 <col:60, line:528:5>
|   `-ReturnStmt 0x561e82d38848 <line:527:9, col:55>
|     `-BinaryOperator 0x561e82d38828 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x561e82d387f8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d38728 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d202f0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561e82d38810 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561e82d387d8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x561e82d387b8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d38788 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d38748 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d387a0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d38768 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16d60 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x561e82d204c8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x561e82d20438 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d389a0 <col:60, line:532:5>
|   `-ReturnStmt 0x561e82d38990 <line:531:9, col:55>
|     `-BinaryOperator 0x561e82d38970 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x561e82d38940 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d38870 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d20438 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x561e82d38958 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x561e82d38920 <col:25, col:55> 'int'
|           `-BinaryOperator 0x561e82d38900 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x561e82d388d0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x561e82d38890 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16bb0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x561e82d388e8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x561e82d388b0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x561e82d16f10 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x561e82d20570 prev 0x561e82d173b0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561e82d20668 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x561e82d20708 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x561e82d274d0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561e82d278b8 <col:11>
| |-CXXConstructorDecl 0x561e82d275b0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561e82d27698 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x561e82d28000 <col:11>
| |-CXXConstructorDecl 0x561e82d27738 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x561e82d27848 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x561e82d29858 <col:11>
| |-CXXDestructorDecl 0x561e82d28b68 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x561e82a2f3c8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561e82a2f4d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x561e82a2fda0 <col:11>
| |   `-ReturnStmt 0x561e82a2fd90 <col:11>
| |     `-UnaryOperator 0x561e82a2fd78 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561e82a2fd68 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x561e82a2f548 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x561e82a2f548
|   `-ParmVarDecl 0x561e82a2f658 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x561e82d20770 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x561e82d20870 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x561e82d20a70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d20850 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x561e82d20830 <col:21> 'int' 0
| |-EnumConstantDecl 0x561e82d20900 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x561e82d20a88 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d208e0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x561e82d208c0 <col:23> 'int' 1
| |-EnumConstantDecl 0x561e82d20990 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x561e82d20aa0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d20970 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x561e82d20950 <col:23> 'int' 2
| `-EnumConstantDecl 0x561e82d20a20 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x561e82d20ab8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d20a00 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x561e82d209e0 <col:27> 'int' 3
|-CXXMethodDecl 0x561e82d20af8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x561e82d20bc0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x561e82d20dc8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x561e82d20c70 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x561e82d20cf0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x561e82d23330 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x561e82d20fd8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x561e82d20e88 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x561e82d20f00 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x561e82d210a8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x561e82d21168 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x561e82d212d8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x561e82d21218 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x561e82d213a0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x561e82d21460 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x561e82d21520 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x561e82d215e0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x561e82d21680 <line:670:3, col:10> col:3 private
|-FieldDecl 0x561e82d216b8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x561e82d21728 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x561e82d389b8 <col:27, line:684:5>
|-CXXMethodDecl 0x561e82d217e8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x561e82d389c8 <col:27, line:696:5>
|-CXXMethodDecl 0x561e82d219e8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x561e82d21898 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x561e82d21910 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38b50 <col:66, line:700:5>
|   `-ReturnStmt 0x561e82d38b40 <line:699:9, col:31>
|     `-CallExpr 0x561e82d38ae0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x561e82d38ac8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82d38a78 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x561e82ba3d98 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x561e82d38b10 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x561e82d38a38 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x561e82d21898 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x561e82d38b28 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x561e82d38a58 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d21910 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d21d58 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x561e82d21aa8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x561e82d21b20 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x561e82d21b98 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x561e82d21c10 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x561e82d38ea0 <col:64, line:707:5>
|   |-DeclStmt 0x561e82d38be0 <line:704:9, col:24>
|   | `-VarDecl 0x561e82d38b78 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x561e82d38df0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x561e82d38bf8 <col:9> 'int32_t':'int' lvalue ParmVar 0x561e82d21b20 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x561e82d38dd8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x561e82d38d70 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x561e82d38d58 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d38cd8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x561e82ba9068 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x561e82d38da8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x561e82d38c78 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x561e82d21b98 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x561e82d38dc0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x561e82d38c98 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x561e82d21c10 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x561e82d38cb8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x561e82d38b78 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x561e82d38e80 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x561e82d38e10 <col:9> 'int32_t':'int' lvalue ParmVar 0x561e82d21aa8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x561e82d38e68 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x561e82d38e50 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x561e82d38e30 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x561e82d38b78 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x561e82d21ff8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x561e82d21e28 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x561e82d21ea0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x561e82d21f18 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x561e82d22298 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x561e82d220c0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x561e82d22138 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x561e82d221b0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x561e82d22428 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x561e82d22360 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x561e82d22628 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x561e82d224e0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x561e82d22558 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x561e82d228f8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x561e82d22838 parent 0x561e82826278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561e82d226e8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x561e82d22760 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x561e82d22b18 <line:718:5, col:72> col:24
| `-FunctionDecl 0x561e82d22a58 parent 0x561e82826278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561e82d22948 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x561e82d229c0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x561e82d22ce0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x561e82d22c28 parent 0x561e82826278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x561e82d22b68 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x561e82d22f68 <line:720:5, col:73> col:30
| `-FunctionDecl 0x561e82d22ea8 parent 0x561e82826278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561e82d22d58 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x561e82d22dd0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x561e82d23188 <line:721:5, col:73> col:30
| `-FunctionDecl 0x561e82d230c8 parent 0x561e82826278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x561e82d22fb8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x561e82d23030 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x561e82d28a10 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82d28af8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d29568 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x561e82d29520 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x561e82d216b8
| |     `-DeclRefExpr 0x561e82d29500 <col:7> 'const Timestamp' lvalue ParmVar 0x561e82d28af8 '' 'const Timestamp &'
| `-CompoundStmt 0x561e82d295c8 <col:7>
|-CXXConstructorDecl 0x561e82d28c78 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82d28d88 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x561e82d216b8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x561e82d29868 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x561e82d29810 <col:7> 'Timestamp::rep_t' xvalue ._t 0x561e82d216b8
| |     `-CXXStaticCastExpr 0x561e82d297e0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x561e82d297b0 <col:7> 'Timestamp' lvalue ParmVar 0x561e82d28d88 '' 'Timestamp &&'
| `-CompoundStmt 0x561e82d298c8 <col:7>
|-CXXDestructorDecl 0x561e82d28e38 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561e82a2f218 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82a2f328 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x561e82a2fe18 <col:7>
|   |-CXXMemberCallExpr 0x561e82a2fdb8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x561e82a2fcf8 <col:7> '<bound member function type>' .operator= 0x561e82a2f3c8
|   | | `-MemberExpr 0x561e82a2fc08 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x561e82d216b8
|   | |   `-CXXThisExpr 0x561e82a2fbf8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x561e82a2fcc8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x561e82d216b8
|   |   `-DeclRefExpr 0x561e82a2fca8 <col:7> 'const Timestamp' lvalue ParmVar 0x561e82a2f328 '' 'const Timestamp &'
|   `-ReturnStmt 0x561e82a2fe08 <col:7>
|     `-UnaryOperator 0x561e82a2fdf0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82a2fde0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x561e82a2f6c8 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x561e82a2f6c8
  `-ParmVarDecl 0x561e82a2f7d8 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82da0628 <../elements/standard/settimestamp.hh:35:1, line:51:1> line:35:7 class SetTimestamp definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x561e82da0788 <col:1, col:7> col:7 implicit referenced class SetTimestamp
|-AccessSpecDecl 0x561e82da0818 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x561e82da08a0 <line:37:5, col:18> col:5 SetTimestamp 'void ()'
|-CXXMethodDecl 0x561e82da09a0 <line:39:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x561e82d89378 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x561e82da1a00 <col:36, col:61>
|   `-ReturnStmt 0x561e82da19f0 <col:38, col:45>
|     `-ImplicitCastExpr 0x561e82da19d8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561e82da19b0 <col:45> 'const char [13]' lvalue "SetTimestamp"
|-CXXMethodDecl 0x561e82da0a68 <line:40:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x561e82d89440 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x561e82da1a60 <col:36, col:56>
|   `-ReturnStmt 0x561e82da1a50 <col:38, col:45>
|     `-ImplicitCastExpr 0x561e82da1a38 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x561e82da1a18 <col:45> 'const char []' lvalue Var 0x561e82d896f0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x561e82da0d40 <line:41:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x561e82d8ac10 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x561e82da0bf0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x561e82da0c68 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x561e82da0e90 <line:43:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x561e82d88558 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x561e82da0e00 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x561e82da0f38 <line:45:3, col:10> col:3 private
|-EnumDecl 0x561e82da0f60 <line:47:5, col:61> col:5
| |-EnumConstantDecl 0x561e82da1020 <col:12> col:12 ACT_NOW 'SetTimestamp::(anonymous enum at ../elements/standard/settimestamp.hh:47:5)'
| |-EnumConstantDecl 0x561e82da1070 <col:21> col:21 ACT_TIME 'SetTimestamp::(anonymous enum at ../elements/standard/settimestamp.hh:47:5)'
| |-EnumConstantDecl 0x561e82da10c0 <col:31> col:31 ACT_FIRST_NOW 'SetTimestamp::(anonymous enum at ../elements/standard/settimestamp.hh:47:5)'
| `-EnumConstantDecl 0x561e82da1110 <col:46> col:46 ACT_FIRST_TIME 'SetTimestamp::(anonymous enum at ../elements/standard/settimestamp.hh:47:5)'
|-FieldDecl 0x561e82da1178 <line:48:5, col:9> col:9 _action 'int'
|-FieldDecl 0x561e82da11d8 <line:49:5, col:15> col:15 _tv 'Timestamp'
|-CXXConstructorDecl 0x561e82da1258 <line:35:7> col:7 implicit SetTimestamp 'void (const SetTimestamp &)' inline default_delete noexcept-unevaluated 0x561e82da1258
| `-ParmVarDecl 0x561e82da1368 <col:7> col:7 'const SetTimestamp &'
|-CXXConstructorDecl 0x561e82da1408 <col:7> col:7 implicit SetTimestamp 'void (SetTimestamp &&)' inline default_delete noexcept-unevaluated 0x561e82da1408
| `-ParmVarDecl 0x561e82da1518 <col:7> col:7 'SetTimestamp &&'
|-CXXMethodDecl 0x561e82da15b8 <col:7> col:7 implicit operator= 'SetTimestamp &(const SetTimestamp &)' inline default_delete noexcept-unevaluated 0x561e82da15b8
| `-ParmVarDecl 0x561e82da16c8 <col:7> col:7 'const SetTimestamp &'
|-CXXMethodDecl 0x561e82da1738 <col:7> col:7 implicit operator= 'SetTimestamp &(SetTimestamp &&)' inline default_delete noexcept-unevaluated 0x561e82da1738
| `-ParmVarDecl 0x561e82da1848 <col:7> col:7 'SetTimestamp &&'
`-CXXDestructorDecl 0x561e82da18d0 <col:7> col:7 implicit ~SetTimestamp 'void ()' inline default noexcept-unevaluated 0x561e82da18d0
  `-Overrides: [ 0x561e82d87f18 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.SetTimestamp = type { %class.Element.base, i32, %class.Timestamp }
  NonVirtualBaseLLVMType:%class.SetTimestamp = type { %class.Element.base, i32, %class.Timestamp }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82b5bb10 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x561e82b5bc28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x561e82b5bcc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x561e82b5bd28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x561e82b5bd88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x561e82b5be38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82b5c140 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82b5c258 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x561e82b5c300 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x561e82b5c368 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x561e82b5c3f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x561e82b62460 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561e82b62898 <col:12>
|-CXXConstructorDecl 0x561e82b62568 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82b62678 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561e82b5c300 'data' 'const char *'
| | `-ImplicitCastExpr 0x561e82b64e20 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x561e82b64df0 <col:12> 'const char *const' lvalue .data 0x561e82b5c300
| |     `-DeclRefExpr 0x561e82b64dd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b62678 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561e82b5c368 'length' 'int'
| | `-ImplicitCastExpr 0x561e82b64eb0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x561e82b64e80 <col:12> 'const int' lvalue .length 0x561e82b5c368
| |     `-DeclRefExpr 0x561e82b64e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b62678 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x561e82b5c3f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x561e82b64f40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x561e82b64f10 <col:12> 'String::memo_t *const' lvalue .memo 0x561e82b5c3f8
| |     `-DeclRefExpr 0x561e82b64ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b62678 '' 'const String::rep_t &'
| `-CompoundStmt 0x561e82b64f98 <col:12>
|-CXXConstructorDecl 0x561e82b62718 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561e82b62718
| `-ParmVarDecl 0x561e82b62828 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x561e82b67d80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x561e82b73798 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82b738a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x561e82b73dc0 <col:12>
|   |-BinaryOperator 0x561e82b73bd8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x561e82b73b90 <col:12> 'const char *' lvalue ->data 0x561e82b5c300
|   | | `-CXXThisExpr 0x561e82b73b80 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561e82b73bc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x561e82b73b50 <col:12> 'const char *const' lvalue .data 0x561e82b5c300
|   |     `-DeclRefExpr 0x561e82b73b30 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b738a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x561e82b73ca0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x561e82b73c58 <col:12> 'int' lvalue ->length 0x561e82b5c368
|   | | `-CXXThisExpr 0x561e82b73c48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561e82b73c88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x561e82b73c18 <col:12> 'const int' lvalue .length 0x561e82b5c368
|   |     `-DeclRefExpr 0x561e82b73bf8 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b738a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x561e82b73d68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x561e82b73d20 <col:12> 'String::memo_t *' lvalue ->memo 0x561e82b5c3f8
|   | | `-CXXThisExpr 0x561e82b73d10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x561e82b73d50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x561e82b73ce0 <col:12> 'String::memo_t *const' lvalue .memo 0x561e82b5c3f8
|   |     `-DeclRefExpr 0x561e82b73cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b738a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x561e82b73db0 <col:12>
|     `-UnaryOperator 0x561e82b73d98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82b73d88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x561e82b73918 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561e82b73918
  `-ParmVarDecl 0x561e82b73a28 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82b53080 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561e82b53198 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x561e82b53228 <col:16, col:22> col:16 public
|-TypedefDecl 0x561e82b53268 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x561e82826dc0 'const char *'
|   `-QualType 0x561e82826311 'const char' const
|     `-BuiltinType 0x561e82826310 'char'
|-TypedefDecl 0x561e82b532f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x561e82b532c0 'String::const_iterator' sugar
|   |-Typedef 0x561e82b53268 'const_iterator'
|   `-PointerType 0x561e82826dc0 'const char *'
|     `-QualType 0x561e82826311 'const char' const
|       `-BuiltinType 0x561e82826310 'char'
|-TypedefDecl 0x561e82b53460 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x561e82b533d0 'int (String::*)() const'
|   |-RecordType 0x561e82b53110 'String'
|   | `-CXXRecord 0x561e82b53080 'String'
|   `-ParenType 0x561e82b53370 'int () const' sugar
|     `-FunctionProtoType 0x561e82b26f00 'int () const' const cdecl
|       `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82b534c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x561e8297b730 'int64_t' sugar
|   |-Typedef 0x561e8288f2d0 'int64_t'
|   `-TypedefType 0x561e828684d0 '__int64_t' sugar
|     |-Typedef 0x561e828680a8 '__int64_t'
|     `-BuiltinType 0x561e82826390 'long'
|-TypedefDecl 0x561e82b53530 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x561e8297b650 'uint64_t' sugar
|   |-Typedef 0x561e8288f470 'uint64_t'
|   `-TypedefType 0x561e82868560 '__uint64_t' sugar
|     |-Typedef 0x561e82868118 '__uint64_t'
|     `-BuiltinType 0x561e82826430 'unsigned long'
|-TypedefDecl 0x561e82b535c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x561e82b53590 'String::intmax_t' sugar
|   |-Typedef 0x561e82b534c8 'intmax_t'
|   `-TypedefType 0x561e8297b730 'int64_t' sugar
|     |-Typedef 0x561e8288f2d0 'int64_t'
|     `-TypedefType 0x561e828684d0 '__int64_t' sugar
|       |-Typedef 0x561e828680a8 '__int64_t'
|       `-BuiltinType 0x561e82826390 'long'
|-TypedefDecl 0x561e82b53650 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x561e82b53620 'String::uintmax_t' sugar
|   |-Typedef 0x561e82b53530 'uintmax_t'
|   `-TypedefType 0x561e8297b650 'uint64_t' sugar
|     |-Typedef 0x561e8288f470 'uint64_t'
|     `-TypedefType 0x561e82868560 '__uint64_t' sugar
|       |-Typedef 0x561e82868118 '__uint64_t'
|       `-BuiltinType 0x561e82826430 'unsigned long'
|-CXXConstructorDecl 0x561e82b53710 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x561e82b538b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x561e82b537f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x561e82b53a68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x561e82b539a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x561e82b53bc0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x561e82b53b30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x561e82b53dd8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x561e82b53c88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x561e82b53d08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x561e82b53ff8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x561e82b53ea8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x561e82b53f28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x561e82b54218 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561e82b540c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x561e82b54148 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x561e82b54438 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x561e82b542e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x561e82b54368 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x561e82b545c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x561e82b54500 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x561e82b54748 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x561e82b54688 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x561e82b548d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x561e82b54810 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x561e82b54a30 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x561e82b549a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x561e82b54b88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x561e82b54af8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x561e82b54ce0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x561e82b54c50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x561e82b54e68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x561e82b54da8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x561e82b54ff8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x561e82b54f30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x561e82b55188 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x561e82b550c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x561e82b55318 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x561e82b55250 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x561e82b55410 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x561e82b55538 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x561e82b556b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x561e82b555f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x561e82b55808 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x561e82b55778 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x561e82b558c0 <col:63> "" ""
|-CXXMethodDecl 0x561e82b55a08 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x561e82b55948 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x561e82b55c18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x561e82b55ac8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x561e82b55b48 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x561e82b55e38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x561e82b55ce0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x561e82b55d60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x561e82b56118 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x561e82b55ef8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x561e82b55f78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x561e82b61f30 <col:55> 'int' 10
| `-ParmVarDecl 0x561e82b55ff0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561e82b61f50 <col:76> 'bool' true
|-CXXMethodDecl 0x561e82b563f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x561e82b561e0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x561e82b56260 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x561e82b61f60 <col:56> 'int' 10
| `-ParmVarDecl 0x561e82b562d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561e82b61f80 <col:77> 'bool' true
|-CXXMethodDecl 0x561e82b56500 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x561e82b565c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x561e82b56690 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x561e82b56730 <col:20>
| `-OptimizeNoneAttr 0x561e82b56788 <col:30>
|-CXXConversionDecl 0x561e82b56878 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x561e82b56948 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x561e82b56a08 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x561e82b56af8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x561e82b56bb8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x561e82b56d38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x561e82b56c70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x561e82b56e88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x561e82b56df8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x561e82b56f78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x561e82b57038 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x561e82b57288 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x561e82b570f0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x561e82b57170 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x561e82b574e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x561e82b57350 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x561e82b573d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x561e82b575b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82b577c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x561e82b57670 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x561e82b576f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x561e82b579e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x561e82b57890 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x561e82b57910 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x561e82b57b78 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x561e82b57ab0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x561e82b57c68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x561e82b57dd8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x561e82b57d18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561e82b57fe8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x561e82b57e98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561e82b57f18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561e82b58200 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x561e82b580a8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x561e82b58120 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x561e82b58390 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x561e82b582c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561e82b585b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x561e82b58450 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x561e82b584d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x561e82b58700 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x561e82b58670 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x561e82b588d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x561e82b587c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561e82b58840 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x561e82b58a28 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x561e82b58998 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x561e82b58c40 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x561e82b58ae0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x561e82b58b60 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x561e82b61f90 <col:39> 'int' 0
|-CXXMethodDecl 0x561e82b58e60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x561e82b58d00 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x561e82b58d80 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x561e82b61fb0 <col:48> 'int' 0
|-CXXMethodDecl 0x561e82b59040 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x561e82b58f20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x561e82b58fa0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x561e82b61fd0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x561e82b59110 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x561e82b591d0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x561e82b59290 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x561e82b59350 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x561e82b59410 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x561e82b595b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x561e82b594c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x561e82b59738 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x561e82b59670 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x561e82b59910 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x561e82b597f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x561e82b59a88 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x561e82b599c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x561e82b59bd0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x561e82b59b40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x561e82b59d20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x561e82b59c90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x561e82b59ef8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x561e82b59de0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x561e82b59e60 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x561e82b5a0d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x561e82b59fc0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x561e82b5a040 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x561e82b5a228 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x561e82b5a198 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x561e82b5a438 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x561e82b5a2e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x561e82b5a368 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x561e82b5a598 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x561e82b5a500 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x561e82b5a6f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x561e82b5a658 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x561e82b5a798 <col:57> "" ""
|-CXXMethodDecl 0x561e82b5a8a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x561e82b5a818 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x561e82b5a9f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x561e82b5a968 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x561e82b5ab78 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x561e82b5aab0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x561e82b5ac40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x561e82b5ad00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x561e82b5adc0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x561e82b5ae60 <col:49> "" ""
|-CXXMethodDecl 0x561e82b5aef0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x561e82b5afb0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x561e82b5b0a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x561e82b5b168 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x561e82b5b228 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x561e82b5b2e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x561e82b5b3e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x561e82b5b4a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x561e82b5b570 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x561e82b5b748 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x561e82b5b628 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x561e82b5b6a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x561e82b5b970 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x561e82b5b810 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x561e82b5b890 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x561e82b5ba80 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x561e82b5bae8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x561e82b5bb10 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x561e82b5bc28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x561e82b5bcc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x561e82b5bd28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x561e82b5bd88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x561e82b5be38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x561e82b5bea0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x561e82b5c0d8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x561e82b5c128 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82b5c0b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x561e82b5bfc8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x561e82b5bf70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x561e82b5bfb0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x561e82b5bf90 <col:32> 'int' 8
|-CXXRecordDecl 0x561e82b5c140 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561e82b5c258 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x561e82b5c300 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x561e82b5c368 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x561e82b5c3f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x561e82b62460 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561e82b62898 <col:12>
| |-CXXConstructorDecl 0x561e82b62568 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561e82b62678 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561e82b5c300 'data' 'const char *'
| | | `-ImplicitCastExpr 0x561e82b64e20 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x561e82b64df0 <col:12> 'const char *const' lvalue .data 0x561e82b5c300
| | |     `-DeclRefExpr 0x561e82b64dd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b62678 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561e82b5c368 'length' 'int'
| | | `-ImplicitCastExpr 0x561e82b64eb0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x561e82b64e80 <col:12> 'const int' lvalue .length 0x561e82b5c368
| | |     `-DeclRefExpr 0x561e82b64e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b62678 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x561e82b5c3f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x561e82b64f40 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x561e82b64f10 <col:12> 'String::memo_t *const' lvalue .memo 0x561e82b5c3f8
| | |     `-DeclRefExpr 0x561e82b64ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b62678 '' 'const String::rep_t &'
| | `-CompoundStmt 0x561e82b64f98 <col:12>
| |-CXXConstructorDecl 0x561e82b62718 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561e82b62718
| | `-ParmVarDecl 0x561e82b62828 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x561e82b67d80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x561e82b73798 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561e82b738a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x561e82b73dc0 <col:12>
| |   |-BinaryOperator 0x561e82b73bd8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x561e82b73b90 <col:12> 'const char *' lvalue ->data 0x561e82b5c300
| |   | | `-CXXThisExpr 0x561e82b73b80 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561e82b73bc0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x561e82b73b50 <col:12> 'const char *const' lvalue .data 0x561e82b5c300
| |   |     `-DeclRefExpr 0x561e82b73b30 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b738a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x561e82b73ca0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x561e82b73c58 <col:12> 'int' lvalue ->length 0x561e82b5c368
| |   | | `-CXXThisExpr 0x561e82b73c48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561e82b73c88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x561e82b73c18 <col:12> 'const int' lvalue .length 0x561e82b5c368
| |   |     `-DeclRefExpr 0x561e82b73bf8 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b738a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x561e82b73d68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x561e82b73d20 <col:12> 'String::memo_t *' lvalue ->memo 0x561e82b5c3f8
| |   | | `-CXXThisExpr 0x561e82b73d10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x561e82b73d50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x561e82b73ce0 <col:12> 'String::memo_t *const' lvalue .memo 0x561e82b5c3f8
| |   |     `-DeclRefExpr 0x561e82b73cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x561e82b738a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x561e82b73db0 <col:12>
| |     `-UnaryOperator 0x561e82b73d98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561e82b73d88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x561e82b73918 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x561e82b73918
|   `-ParmVarDecl 0x561e82b73a28 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x561e82b5c470 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x561e82b5c6b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x561e82b5c4d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x561e82b5c558 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x561e82b5c5d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x561e82b62420 <col:79, line:261:5>
|   |-BinaryOperator 0x561e82b62098 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x561e82b62030 <col:2, col:5> 'const char *' lvalue .data 0x561e82b5c300
|   | | `-MemberExpr 0x561e82b62000 <col:2> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|   | |   `-CXXThisExpr 0x561e82b61ff0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x561e82b62080 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561e82b62060 <col:12> 'const char *' lvalue ParmVar 0x561e82b5c4d8 'data' 'const char *'
|   |-BinaryOperator 0x561e82b62160 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x561e82b620f8 <col:2, col:5> 'int' lvalue .length 0x561e82b5c368
|   | | `-MemberExpr 0x561e82b620c8 <col:2> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|   | |   `-CXXThisExpr 0x561e82b620b8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x561e82b62148 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561e82b62128 <col:14> 'int' lvalue ParmVar 0x561e82b5c558 'length' 'int'
|   `-IfStmt 0x561e82b62408 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x561e82b62280 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x561e82b62268 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x561e82b62248 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x561e82b62228 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x561e82b621c0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|     |       | `-MemberExpr 0x561e82b62190 <col:7> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|     |       |   `-CXXThisExpr 0x561e82b62180 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x561e82b62210 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x561e82b621f0 <col:17> 'String::memo_t *' lvalue ParmVar 0x561e82b5c5d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x561e82b623e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x561e82b623c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82b622d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x561e82b4b0e8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x561e82b62338 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561e82b5bcc8
|         `-ImplicitCastExpr 0x561e82b62320 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x561e82b62300 <col:27> 'String::memo_t *' lvalue ParmVar 0x561e82b5c5d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x561e82b5c968 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x561e82b5c788 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x561e82b5c808 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x561e82b5c880 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x561e82b5c470 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x561e82b628a8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x561e82b62a38 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x561e82b629a0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x561e82b62910 <col:2> '<bound member function type>' ->assign_memo 0x561e82b5c6b8
|     | `-ImplicitCastExpr 0x561e82b629d8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x561e82b62900 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x561e82b629f0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82b62940 <col:14> 'const char *' lvalue ParmVar 0x561e82b5c788 'data' 'const char *'
|     |-ImplicitCastExpr 0x561e82b62a08 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x561e82b62960 <col:20> 'int' lvalue ParmVar 0x561e82b5c808 'length' 'int'
|     `-ImplicitCastExpr 0x561e82b62a20 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x561e82b62980 <col:28> 'String::memo_t *' lvalue ParmVar 0x561e82b5c880 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x561e82b5caf8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x561e82b5ca38 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x561e82b62c90 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x561e82b62c10 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x561e82b62a60 <col:2> '<bound member function type>' ->assign_memo 0x561e82b5c6b8
|     | `-CXXThisExpr 0x561e82b62a50 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x561e82b62c48 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x561e82b62ae0 <col:14, col:19> 'const char *' lvalue .data 0x561e82b5c300
|     |   `-MemberExpr 0x561e82b62ab0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x561e82b5c470
|     |     `-DeclRefExpr 0x561e82b62a90 <col:14> 'const String' lvalue ParmVar 0x561e82b5ca38 'x' 'const String &'
|     |-ImplicitCastExpr 0x561e82b62c60 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x561e82b62b60 <col:25, col:30> 'int' lvalue .length 0x561e82b5c368
|     |   `-MemberExpr 0x561e82b62b30 <col:25, col:27> 'String::rep_t' lvalue ._r 0x561e82b5c470
|     |     `-DeclRefExpr 0x561e82b62b10 <col:25> 'const String' lvalue ParmVar 0x561e82b5ca38 'x' 'const String &'
|     `-ImplicitCastExpr 0x561e82b62c78 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x561e82b62be0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|         `-MemberExpr 0x561e82b62bb0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x561e82b5c470
|           `-DeclRefExpr 0x561e82b62b90 <col:38> 'const String' lvalue ParmVar 0x561e82b5ca38 'x' 'const String &'
|-CXXMethodDecl 0x561e82b5cbc0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x561e82b63650 <col:31, line:278:5>
|   `-IfStmt 0x561e82b63638 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x561e82b62d30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x561e82b62d18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x561e82b62ce8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|     |     `-MemberExpr 0x561e82b62cb8 <col:6> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|     |       `-CXXThisExpr 0x561e82b62ca8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x561e82b63610 <col:15, line:277:2>
|       |-ParenExpr 0x561e82b631e0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x561e82b631b0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x561e82b62e40 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x561e82b62e28 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x561e82b62e10 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x561e82b62dd0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561e82b5bcc8
|       |   |       `-ImplicitCastExpr 0x561e82b62db8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x561e82b62d88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|       |   |           `-MemberExpr 0x561e82b62d58 <col:27> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|       |   |             `-CXXThisExpr 0x561e82b62d48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x561e82b62ea0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x561e82b62e80 <col:54> 'int' 0
|       |   `-CallExpr 0x561e82b63110 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x561e82b630f8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x561e82b63078 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x561e82b63150 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x561e82b62f88 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x561e82b63168 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x561e82b62fb8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x561e82b63180 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x561e82b62ff0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x561e82b63198 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x561e82b63060 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x561e82b63048 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x561e82b63010 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x561e82b63530 <line:274:6, line:275:22>
|       | |-CallExpr 0x561e82b633f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x561e82b633d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x561e82b63350 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x561e82b4c530 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x561e82b63320 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x561e82b5bcc8
|       | |   `-ImplicitCastExpr 0x561e82b63308 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x561e82b632d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|       | |       `-MemberExpr 0x561e82b632a8 <col:40> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|       | |         `-CXXThisExpr 0x561e82b63298 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x561e82b634f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x561e82b634d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x561e82b63418 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x561e82b61370 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x561e82b63518 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x561e82b63478 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|       |       `-MemberExpr 0x561e82b63448 <col:15> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|       |         `-CXXThisExpr 0x561e82b63438 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x561e82b635f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x561e82b63588 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x561e82b5c3f8
|         | `-MemberExpr 0x561e82b63558 <col:6> 'String::rep_t' lvalue ->_r 0x561e82b5c470
|         |   `-CXXThisExpr 0x561e82b63548 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x561e82b635d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x561e82b635b8 <col:16> 'int' 0
|-CXXMethodDecl 0x561e82b5ce58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x561e82b5cc78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x561e82b5ccf8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x561e82b5cd70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x561e82b5cf30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x561e82b5d180 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x561e82b5cfe8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x561e82b5d068 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x561e82b5d0e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x561e82b5d368 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x561e82b5d250 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x561e82b5d2d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x561e82b5d468 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x561e82b63728 <col:41, line:286:5>
|   `-ReturnStmt 0x561e82b63718 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x561e82b636e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x561e82b636b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x561e82b63698 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x561e82b63678 <col:46> 'int' 1
|-CXXMethodDecl 0x561e82b5d708 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x561e82b5d520 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x561e82b5d5a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x561e82b5d620 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x561e82b61370 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x561e82b5d7d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x561e82b61440 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x561e82b61610 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x561e82b614f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x561e82b61578 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x561e82b616d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x561e82b61798 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x561e82b61898 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x561e82b61910 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x561e82b61988 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x561e82b619f0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x561e82b61af0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x561e82b61b40 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82b61ad0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x561e82b61ab0 <col:22> 'int' 14
|-CXXMethodDecl 0x561e82b61d58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x561e82b61b70 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x561e82b61bf0 <col:38> col:41 'int'
| `-ParmVarDecl 0x561e82b61c70 <col:43> col:46 'int'
|-FriendDecl 0x561e82b61e60 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x561e82b61ef0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561e82dd0010 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x561e82dd01e8 prev 0x561e82dd0010 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561e82dd0278 <col:46, col:52> col:46 public
|-TypedefDecl 0x561e82dd02a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82dd1c00 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x561e82dd1bb0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x561e82dd1b90 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x561e82dd04b8 'type'
|     `-SubstTemplateTypeParmType 0x561e82dd0480 'String' sugar
|       |-TemplateTypeParmType 0x561e82b16570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b16520 'T'
|       `-RecordType 0x561e82b53110 'String'
|         `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd1cb8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x561e82dd1c80 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x561e82dd1c60 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x561e82dd1c00 'type'
|     `-ElaboratedType 0x561e82dd1bb0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x561e82dd1b90 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x561e82dd04b8 'type'
|         `-SubstTemplateTypeParmType 0x561e82dd0480 'String' sugar
|           |-TemplateTypeParmType 0x561e82b16570 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561e82b16520 'T'
|           `-RecordType 0x561e82b53110 'String'
|             `-CXXRecord 0x561e82b53080 'String'
|-CXXMethodDecl 0x561e82dd1e38 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x561e82dd1d48 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x561e82dd1f28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561e82dd2008 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x561e82dd2008
|-CXXMethodDecl 0x561e82dd22d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x561e82dd21e0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x561e82dd2518 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561e82dd2390 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561e82dd2408 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd2720 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561e82dd25d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561e82dd2650 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd2878 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x561e82dd2948 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x561e82dd2b98 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561e82dd2a08 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x561e82dd2a80 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd2df8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x561e82dd2c68 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x561e82dd2ce0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd2fb8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x561e82dd2ec8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd3178 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x561e82dd3080 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd3230 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561e82dd32e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561e82dd3518 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x561e82dd3390 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561e82dd3408 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x561e82dd37b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x561e82dd36c0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x561e82dd3880 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x561e82dd38d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561e82dd3920 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561e82d8a880 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x561e82dcea78 prev 0x561e82d8a880 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561e82dcff80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x561e82dcff30 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x561e82dcff10 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x561e82dcfdc0 'type'
|     `-SubstTemplateTypeParmType 0x561e82dcfc50 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x561e82aec320 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x561e82aec2c8 'F'
|       `-RecordType 0x561e82dcf8b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x561e82dcf7d0 'typed_array_memory'
|-FieldDecl 0x561e82dd3970 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x561e82dd39c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561e82dd39f8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|   |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561e82b23838 'T'
|   `-RecordType 0x561e82b53110 'String'
|     `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd3a88 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x561e82dd3a50 'String &'
|   `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|     |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561e82b23838 'T'
|     `-RecordType 0x561e82b53110 'String'
|       `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd3b18 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x561e82dd3ae0 'const String &'
|   `-QualType 0x561e82dceb11 'const String' const
|     `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-RecordType 0x561e82b53110 'String'
|         `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd3ba8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x561e82dd3b70 'String *'
|   `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|     |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561e82b23838 'T'
|     `-RecordType 0x561e82b53110 'String'
|       `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd3c38 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x561e82dd3c00 'const String *'
|   `-QualType 0x561e82dceb11 'const String' const
|     `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-RecordType 0x561e82b53110 'String'
|         `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd4890 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x561e82dd4840 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x561e82dd4820 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x561e82dd4758 'type'
|     `-LValueReferenceType 0x561e82dd4720 'const String &'
|       `-QualType 0x561e82dd44c1 'const String' const
|         `-SubstTemplateTypeParmType 0x561e82dd44c0 'String' sugar
|           |-TemplateTypeParmType 0x561e82af6270 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x561e82af6218 'T'
|           `-RecordType 0x561e82b53110 'String'
|             `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd48f8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x561e82dd3ae0 'const String &'
|   `-QualType 0x561e82dceb11 'const String' const
|     `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-RecordType 0x561e82b53110 'String'
|         `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd4950 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82dd49b8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x561e82dd3b70 'String *'
|   `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|     |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561e82b23838 'T'
|     `-RecordType 0x561e82b53110 'String'
|       `-CXXRecord 0x561e82b53080 'String'
|-TypedefDecl 0x561e82dd4a20 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x561e82dd3c00 'const String *'
|   `-QualType 0x561e82dceb11 'const String' const
|     `-SubstTemplateTypeParmType 0x561e82dceb10 'String' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-RecordType 0x561e82b53110 'String'
|         `-CXXRecord 0x561e82b53080 'String'
|-EnumDecl 0x561e82dd4a78 <line:134:5> col:5
| `-EnumConstantDecl 0x561e82dd4b70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561e82dd4b50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561e82b252c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561e82b252a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561e82b25280 <col:40> 'int' 1
|-CXXConstructorDecl 0x561e82dd4bf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561e82dd4e88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82dd4cb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561e82dd4d50 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x561e82dd5118 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x561e82dd5000 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x561e82dd53d8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x561e82dd52c0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x561e82dd56f0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x561e82dd55d0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x561e82dd5a00 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x561e82dd58e0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x561e82dd5cf0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82dd5b38 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561e82dd5bb0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561e82dd5e18 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x561e82dd5ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82dd5f20 <col:30> Inherited
|-CXXMethodDecl 0x561e82dd5f68 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x561e82dd6018 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82dd6070 <col:30> Inherited
|-CXXMethodDecl 0x561e82dd6138 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561e82dd61e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82dd6240 <col:30> Inherited
|-CXXMethodDecl 0x561e82dd6288 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561e82dd6338 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82dd6390 <col:30> Inherited
|-CXXMethodDecl 0x561e82dd63d8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561e82dd6488 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82dd64e0 <col:30> Inherited
|-CXXMethodDecl 0x561e82dd6528 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x561e82dd65d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82dd6630 <col:30> Inherited
|-CXXMethodDecl 0x561e82dd6658 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561e82dd6708 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561e82dd67b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561e82dd6978 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82dd6868 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561e82dd68e0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561e82dd6ac8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561e82dd6a38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82dd6c78 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x561e82dd6b80 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561e82dd6d30 <col:20>
| `-OptimizeNoneAttr 0x561e82dd6d88 <col:30>
|-CXXMethodDecl 0x561e82dd6ea8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x561e82dd6db0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561e82dd6f60 <col:20>
| `-OptimizeNoneAttr 0x561e82dd6fb8 <col:30>
|-CXXMethodDecl 0x561e82dd7070 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x561e82dd6fe0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82dd71b8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561e82dd7128 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82dd72e8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x561e82dd73e8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x561e82dd74b8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x561e82dd7588 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x561e82dd76c8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x561e82dd7638 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82dd7810 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561e82dd7780 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82dd7958 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x561e82dd78c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561e82dd7a10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561e82dd7b10 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561e82dd7a80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561e82dd7bc8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561e82dd7c88 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x561e82dd7d88 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x561e82dd7f08 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x561e82dd7e48 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x561e82dd86c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561e82dd7fc0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x561e82dd8628 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x561e82dd8528 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x561e82dd87a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561e82dd88f8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x561e82dd8868 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561e82dd89b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561e82dd8bf8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82dd8a70 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x561e82dd8ae8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x561e82dd8d88 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x561e82dd8cc8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x561e82dd8f98 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x561e82dd8e50 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x561e82dd8ec8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x561e82dd9058 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x561e82dd92b8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x561e82dd91c0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x561e82dd9388 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x561e82dd9388

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82e59128 prev 0x561e82d085c8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561e82e59220 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x561e82e592b0 <col:22, col:28> col:22 public
|-EnumDecl 0x561e82e592d8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x561e82e593f8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e593d8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x561e82e593c0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x561e82e593a0 <col:14> 'int' 999
| |-EnumConstantDecl 0x561e82e594a0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e59480 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x561e82e59468 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x561e82e59448 <col:14> 'int' 1
| |-EnumConstantDecl 0x561e82e59530 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e59510 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x561e82e594f0 <col:17> 'int' 0
| |-EnumConstantDecl 0x561e82e595c0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e595a0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x561e82e59580 <col:13> 'int' 1
| |-EnumConstantDecl 0x561e82e59650 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e59630 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x561e82e59610 <col:16> 'int' 2
| |-EnumConstantDecl 0x561e82e596e0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e596c0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x561e82e596a0 <col:13> 'int' 3
| |-EnumConstantDecl 0x561e82e59770 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e59750 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x561e82e59730 <col:15> 'int' 4
| |-EnumConstantDecl 0x561e82e59800 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e597e0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x561e82e597c0 <col:14> 'int' 5
| |-EnumConstantDecl 0x561e82e59890 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x561e82e59870 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x561e82e59850 <col:12> 'int' 6
| `-EnumConstantDecl 0x561e82e59920 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x561e82e59900 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x561e82e598e0 <col:13> 'int' 7
|-VarDecl 0x561e82e59990 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x561e82e59a18 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x561e82e59aa0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x561e82e59b28 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x561e82e59bb0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x561e82e59c38 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x561e82e59cc0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x561e82e59d48 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x561e82e59dd0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x561e82e59e58 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x561e82e59ee0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x561e82e59fe0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x561e82e5f2e8 '_nerrors' 'int'
| | `-IntegerLiteral 0x561e82e5fa78 <line:128:13> 'int' 0
| `-CompoundStmt 0x561e82e5fae8 <col:16, line:129:5>
|-CXXDestructorDecl 0x561e82e5a0d0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x561e82e5faf8 <col:29, line:132:5>
|-CXXMethodDecl 0x561e82e5a288 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x561e82e5a1c0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561e82e5a350 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x561e82e5a438 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x561e82e5fb50 <col:44, line:161:5>
|   `-ReturnStmt 0x561e82e5fb40 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x561e82e5fb28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x561e82e5fb08 <col:9> 'ErrorHandler *' lvalue Var 0x561e82e5f348 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x561e82e5a578 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x561e82e5a4e8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x561e82e5a640 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x561e82e5fbb0 <col:43, line:173:5>
|   `-ReturnStmt 0x561e82e5fba0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x561e82e5fb88 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x561e82e5fb68 <col:9> 'ErrorHandler *' lvalue Var 0x561e82e5f3c0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x561e82e5a6f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x561e82e5a778 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x561e82e5a888 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x561e82e5a7f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5a9d8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x561e82e5a948 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5ab30 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x561e82e5aa98 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5ac88 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x561e82e5abf0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5ade0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x561e82e5ad48 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5aff0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x561e82e5ae98 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x561e82e5af18 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5b1c8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x561e82e5b0b0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x561e82e5b130 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5b3e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561e82e5b288 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x561e82e5b308 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5b5c8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561e82e5b4a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x561e82e5b528 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5b7a8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x561e82e5b688 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x561e82e5b708 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5b930 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x561e82e5b868 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x561e82e5bb00 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x561e82e5b9e8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x561e82e5ba60 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x561e82e5fe08 <col:57, line:234:5>
|   `-ReturnStmt 0x561e82e5fdf8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x561e82e5fde0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x561e82e5fd88 <col:9, col:41> 'int'
|         |-MemberExpr 0x561e82e5fd58 <col:9> '<bound member function type>' ->xmessage 0x561e82e5b930
|         | `-CXXThisExpr 0x561e82e5fd48 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x561e82e5fdc8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x561e82e5fdb0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561e82e5fd28 <col:18, col:40> 'String' (CXXTemporary 0x561e82e5fd28)
|               `-CallExpr 0x561e82e5fcf0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x561e82e5fcd8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x561e82e5fc50 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x561e82e5daf8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x561e82e5fc70 <col:31> 'const String' lvalue ParmVar 0x561e82e5ba60 'str' 'const String &'
|                 `-DeclRefExpr 0x561e82e5fc90 <col:36> 'const String' lvalue ParmVar 0x561e82e5b9e8 'anno' 'const String &'
|-CXXMethodDecl 0x561e82e5bde0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x561e82e5bbc0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x561e82e5bc40 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x561e82e5bcb8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561e82e60098 <col:68, line:243:5>
|   `-ReturnStmt 0x561e82e60088 <line:242:2, col:41>
|     `-ExprWithCleanups 0x561e82e60070 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x561e82e60010 <col:9, col:41> 'int'
|         |-MemberExpr 0x561e82e5ffe0 <col:9> '<bound member function type>' ->xmessage 0x561e82e5bb00
|         | `-CXXThisExpr 0x561e82e5ffd0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x561e82e5fea8 <col:18> 'const String' lvalue ParmVar 0x561e82e5bbc0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x561e82e60058 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x561e82e60040 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561e82e5ffb0 <col:24, col:40> 'String' (CXXTemporary 0x561e82e5ffb0)
|               `-CXXMemberCallExpr 0x561e82e5ff48 <col:24, col:40> 'String'
|                 |-MemberExpr 0x561e82e5fed8 <col:24> '<bound member function type>' ->vformat 0x561e82e5cfc0
|                 | `-CXXThisExpr 0x561e82e5fec8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x561e82e5ff78 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x561e82e5ff08 <col:32> 'const char *' lvalue ParmVar 0x561e82e5bc40 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x561e82e5ff90 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x561e82e5ff28 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561e82e5bcb8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561e82e5c080 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x561e82e5bea8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x561e82e5bf20 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x561e82e5bf98 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x561e82e603d8 <col:23, line:254:5>
|   `-ReturnStmt 0x561e82e603c8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x561e82e603b0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x561e82e60350 <col:9, col:71> 'int'
|         |-MemberExpr 0x561e82e60320 <col:9> '<bound member function type>' ->xmessage 0x561e82e5bb00
|         | `-CXXThisExpr 0x561e82e60310 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x561e82e60398 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x561e82e60380 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x561e82e602d0 <col:18, col:65> 'String' (CXXTemporary 0x561e82e602d0)
|         |     `-CallExpr 0x561e82e60268 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x561e82e60250 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x561e82e60138 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x561e82e5daf8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x561e82e60158 <col:31> 'const String' lvalue ParmVar 0x561e82e5bf20 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x561e82e602b0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x561e82e60298 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x561e82e60230 <col:37, col:64> 'String' (CXXTemporary 0x561e82e60230)
|         |             `-CallExpr 0x561e82e60200 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x561e82e601e8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x561e82e60178 <col:37> 'String (const String &)' lvalue CXXMethod 0x561e82e5e148 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x561e82e60198 <col:56> 'const String' lvalue ParmVar 0x561e82e5bea8 'landmark' 'const String &'
|         `-DeclRefExpr 0x561e82e602f0 <col:68> 'const String' lvalue ParmVar 0x561e82e5bf98 'str' 'const String &'
|-CXXMethodDecl 0x561e82e5c400 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x561e82e5c148 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x561e82e5c1c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x561e82e5c240 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x561e82e5c2b8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561e82e60690 <col:34, line:267:5>
|   `-ReturnStmt 0x561e82e60680 <line:266:2, col:51>
|     `-ExprWithCleanups 0x561e82e60668 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x561e82e60600 <col:9, col:51> 'int'
|         |-MemberExpr 0x561e82e605d0 <col:9> '<bound member function type>' ->xmessage 0x561e82e5c080
|         | `-CXXThisExpr 0x561e82e605c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x561e82e60478 <col:18> 'const String' lvalue ParmVar 0x561e82e5c148 'landmark' 'const String &'
|         |-DeclRefExpr 0x561e82e60498 <col:28> 'const String' lvalue ParmVar 0x561e82e5c1c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x561e82e60650 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x561e82e60638 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x561e82e605a0 <col:34, col:50> 'String' (CXXTemporary 0x561e82e605a0)
|               `-CXXMemberCallExpr 0x561e82e60538 <col:34, col:50> 'String'
|                 |-MemberExpr 0x561e82e604c8 <col:34> '<bound member function type>' ->vformat 0x561e82e5cfc0
|                 | `-CXXThisExpr 0x561e82e604b8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x561e82e60568 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x561e82e604f8 <col:42> 'const char *' lvalue ParmVar 0x561e82e5c240 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x561e82e60580 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x561e82e60518 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561e82e5c2b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561e82e5c510 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x561e82e60710 <col:25, line:288:5>
|   `-ReturnStmt 0x561e82e60700 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x561e82e606e8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x561e82e606b8 <col:9> 'const int' lvalue ->_nerrors 0x561e82e5f2e8
|         `-CXXThisExpr 0x561e82e606a8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x561e82e5c720 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x561e82e5c5c8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x561e82e5c648 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5ca08 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x561e82e5c7e8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x561e82e5c868 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x561e82e5c8e0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561e82e5cba0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x561e82e5cad8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5cde8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x561e82e5cc60 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x561e82e5ccd8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x561e82e60970 <col:58, line:357:5>
|   `-ReturnStmt 0x561e82e60960 <line:356:2, col:29>
|     `-ExprWithCleanups 0x561e82e60948 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x561e82e60918 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x561e82e60900 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x561e82e608e0 <col:9, col:29> 'String' (CXXTemporary 0x561e82e608e0)
|             `-CallExpr 0x561e82e60870 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x561e82e60858 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561e82e607d8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x561e82e5ca08 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x561e82e60778 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x561e82e608a8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x561e82e60798 <col:21> 'const char *' lvalue ParmVar 0x561e82e5cc60 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x561e82e608c0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x561e82e607b8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x561e82e5ccd8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561e82e5cfc0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x561e82e5ceb0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x561e82e5cf28 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x561e82e5d118 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x561e82e5d088 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x561e82e5d260 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x561e82e5d1d0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x561e82e5d500 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x561e82e5d318 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x561e82e5d398 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x561e82e5d410 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x561e82e5d660 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x561e82e5d5d0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x561e82e60a88 <col:37, line:441:5>
|   `-IfStmt 0x561e82e60a70 <line:439:2, line:440:8>
|     |-BinaryOperator 0x561e82e609f8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x561e82e609c8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x561e82e60988 <col:6> 'int' lvalue ParmVar 0x561e82e5d5d0 'level' 'int'
|     | `-ImplicitCastExpr 0x561e82e609e0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x561e82e609a8 <col:15> 'ErrorHandler::Level' EnumConstant 0x561e82e596e0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x561e82e60a58 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x561e82e60a28 <col:8> 'int' lvalue ->_nerrors 0x561e82e5f2e8
|         `-CXXThisExpr 0x561e82e60a18 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x561e82e5d728 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x561e82e60b20 <col:26, line:448:5>
|   `-BinaryOperator 0x561e82e60b00 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x561e82e60ab0 <col:2> 'int' lvalue ->_nerrors 0x561e82e5f2e8
|     | `-CXXThisExpr 0x561e82e60aa0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x561e82e60ae0 <col:13> 'int' 0
|-CXXMethodDecl 0x561e82e5d8f0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x561e82e5d7e0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x561e82e5d858 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x561e82e5daf8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x561e82e5d9b0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x561e82e5da28 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x561e82e5dda8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x561e82e5dbb8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x561e82e5dc38 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x561e82e5dcb8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x561e82e5de60 <col:59> 0 0
|-CXXMethodDecl 0x561e82e5dff8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x561e82e5ded8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x561e82e5df58 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x561e82e61190 <col:70, line:534:5>
|   |-DeclStmt 0x561e82e60c90 <line:528:2, col:20>
|   | |-VarDecl 0x561e82e60b48 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x561e82e60bb0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x561e82e60be8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x561e82e60c50 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x561e82e60d60 <line:529:2, col:23>
|   | `-VarDecl 0x561e82e60cc0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x561e82e60d48 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x561e82e60d28 <col:18> 'const char *' lvalue ParmVar 0x561e82e5ded8 'begin' 'const char *'
|   |-DoStmt 0x561e82e61128 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x561e82e61058 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x561e82e61040 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x561e82e61020 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x561e82e60d78 <col:6> 'const char *' lvalue Var 0x561e82e60cc0 'x' 'const char *'
|   | |     `-CallExpr 0x561e82e60f70 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x561e82e60f58 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x561e82e60f10 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x561e82e5f7c0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x561e82e60fd8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x561e82e60fc0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x561e82e60e30 <col:20, col:27> 'String' (CXXTemporary 0x561e82e60e30)
|   | |       |     `-CXXTemporaryObjectExpr 0x561e82e60df8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x561e82e60ff0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x561e82e60e50 <col:30> 'const char *' lvalue Var 0x561e82e60cc0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x561e82e61008 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x561e82e60e70 <col:33> 'const char *' lvalue ParmVar 0x561e82e5df58 'end' 'const char *'
|   | |       |-UnaryOperator 0x561e82e60eb0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x561e82e60e90 <col:39> 'String' lvalue Var 0x561e82e60b48 'name' 'String'
|   | |       |-UnaryOperator 0x561e82e60ee8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x561e82e60ec8 <col:46> 'String' lvalue Var 0x561e82e60be8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x561e82e60f00 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x561e82e61110 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x561e82e610f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x561e82e610d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x561e82e610a8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|   |         `-ImplicitCastExpr 0x561e82e61090 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x561e82e61070 <col:11> 'String' lvalue Var 0x561e82e60b48 'name' 'String'
|   `-ReturnStmt 0x561e82e61180 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x561e82e61168 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x561e82e61148 <col:9> 'const char *' lvalue Var 0x561e82e60cc0 'x' 'const char *'
|-CXXMethodDecl 0x561e82e5e148 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x561e82e5e0b8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x561e82e61798 <col:55, line:550:5>
|   `-IfStmt 0x561e82e61770 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x561e82e613d0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x561e82e613b8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561e82e613a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561e82e61380 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561e82e61350 <col:6> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|     | |       `-DeclRefExpr 0x561e82e611f0 <col:6> 'const String' lvalue ParmVar 0x561e82e5e0b8 'x' 'const String &'
|     | `-BinaryOperator 0x561e82e61330 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x561e82e61300 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x561e82e612b0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x561e82e61298 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x561e82e61250 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x561e82b70080 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x561e82e61210 <col:11> 'const String' lvalue ParmVar 0x561e82e5e0b8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x561e82e61230 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x561e82e61318 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x561e82e612e8 <col:19> 'char' 123
|     |-ReturnStmt 0x561e82e61440 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x561e82e61410 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x561e82e613f0 <col:13> 'const String' lvalue ParmVar 0x561e82e5e0b8 'x' 'const String &'
|     `-IfStmt 0x561e82e61748 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x561e82e614d8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561e82e614c0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561e82e614a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561e82e61470 <col:11> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |       `-DeclRefExpr 0x561e82e61450 <col:11> 'const String' lvalue ParmVar 0x561e82e5e0b8 'x' 'const String &'
|       |-ReturnStmt 0x561e82e61660 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x561e82e61648 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x561e82e61618 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x561e82e61600 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x561e82e615e0 <col:13, col:29> 'String' (CXXTemporary 0x561e82e615e0)
|       |         `-CallExpr 0x561e82e61590 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x561e82e61578 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x561e82e614f0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x561e82e5d8f0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x561e82e615c0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x561e82e61510 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x561e82e61530 <col:28> 'const String' lvalue ParmVar 0x561e82e5e0b8 'x' 'const String &'
|       `-ReturnStmt 0x561e82e61738 <line:549:6, col:20>
|         `-ExprWithCleanups 0x561e82e61720 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x561e82e616f0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x561e82e616d8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x561e82e616b8 <col:13, col:20> 'String' (CXXTemporary 0x561e82e616b8)
|                 `-CXXTemporaryObjectExpr 0x561e82e61680 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x561e82e5e310 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x561e82e5e200 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x561e82e5e278 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561e82e5fa68 <col:71> 'bool' false
|-CXXRecordDecl 0x561e82e5e3c0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x561e82e5e6b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x561e82e5e650 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x561e82e5e5f0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x561e82e5e5b0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x561e82b53110 'String'
|       | `-CXXRecord 0x561e82b53080 'String'
|       |-BuiltinType 0x561e82826370 'int'
|       `-DecayedType 0x561e82d09610 '__va_list_tag *' sugar
|         |-TypedefType 0x561e82d095e0 'va_list' sugar
|         | |-Typedef 0x561e82a43e40 'va_list'
|         | `-TypedefType 0x561e82a43df0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x561e8297b9e8 '__gnuc_va_list'
|         |   `-TypedefType 0x561e8297b950 '__builtin_va_list' sugar
|         |     |-Typedef 0x561e82867bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x561e82867b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x561e828270c0 '__va_list_tag'
|         |         `-CXXRecord 0x561e82827028 '__va_list_tag'
|         `-PointerType 0x561e82a496e0 '__va_list_tag *'
|           `-RecordType 0x561e828270c0 '__va_list_tag'
|             `-CXXRecord 0x561e82827028 '__va_list_tag'
|-EnumDecl 0x561e82e5e710 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x561e82e5e810 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5ed90 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5e7f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x561e82e5e7d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x561e82e5e8c0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5eda8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5e880 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x561e82e5e860 <col:21> 'int' 2
| |-EnumConstantDecl 0x561e82e5e950 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5edc0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5e930 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x561e82e5e910 <col:22> 'int' 4
| |-EnumConstantDecl 0x561e82e5e9e0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5edd8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5e9c0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x561e82e5e9a0 <col:17> 'int' 8
| |-EnumConstantDecl 0x561e82e5ea70 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5edf0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5ea50 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x561e82e5ea30 <col:22> 'int' 16
| |-EnumConstantDecl 0x561e82e5eb00 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5ee08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5eae0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x561e82e5eac0 <col:19> 'int' 32
| |-EnumConstantDecl 0x561e82e5eb90 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5ee20 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5eb70 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x561e82e5eb50 <col:17> 'int' 64
| |-EnumConstantDecl 0x561e82e5ec20 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5ee38 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5ec00 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x561e82e5ebe0 <col:14> 'int' 128
| |-EnumConstantDecl 0x561e82e5ecb0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x561e82e5ee50 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82e5ec90 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x561e82e5ec70 <col:16> 'int' 256
| `-EnumConstantDecl 0x561e82e5ed40 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x561e82e5ee68 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82e5ed20 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x561e82e5ed00 <col:12> 'int' 1024
|-CXXMethodDecl 0x561e82e5f078 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x561e82e5ee90 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x561e82e5ef30 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x561e82e5f200 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x561e82e5f138 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x561e82e5f2a8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x561e82e5f2e8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x561e82e5f348 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x561e82e5f3c0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x561e82e5f7c0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x561e82e5f438 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x561e82e5f4b8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x561e82e5f538 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x561e82e5f5b0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x561e82e5f628 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x561e82e5f6a0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x561e82e5f8e8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x561e82e5f8e8
| `-ParmVarDecl 0x561e82e5f9f8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x561e82e61af8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x561e82e61af8
  `-ParmVarDecl 0x561e82e61c08 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d08658 prev 0x561e82d4d328 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d08750 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x561e82d087e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x561e82d08918 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x561e82d08818 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x561e82d09d40 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d09d20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d098b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x561e82d09dd0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x561e82d09d90 <col:17> 'ErrorHandler *' lvalue ParmVar 0x561e82d08818 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x561e82d09920 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x561e82d09e50 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d09e10 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d09980 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x561e82d09e90 <col:54> 'bool' false
| `-CompoundStmt 0x561e82d09f98 <col:61, line:38:5>
|   `-BinaryOperator 0x561e82d09f78 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x561e82d09f10 <col:9> 'const Element *' lvalue ->_context 0x561e82d09858
|     | `-CXXThisExpr 0x561e82d09f00 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x561e82d09f60 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x561e82d09f40 <col:20> 'int' 0
|-CXXConstructorDecl 0x561e82d08b28 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82d089d8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x561e82d08a50 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x561e82d09d78 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d09d58 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d09858 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x561e82d09ff0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x561e82d09fb0 <col:20> 'const Element *' lvalue ParmVar 0x561e82d089d8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x561e82d098b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x561e82d0a070 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x561e82d0a030 <col:36> 'ErrorHandler *' lvalue ParmVar 0x561e82d08a50 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x561e82d09920 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x561e82d0a0f0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x561e82d0a0b0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x561e82d09980 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x561e82d0a130 <col:73> 'bool' false
| `-CompoundStmt 0x561e82d0a1a8 <col:80, line:46:5>
|-CXXMethodDecl 0x561e82d08c58 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x561e82d0a220 <col:36, line:51:5>
|   `-ReturnStmt 0x561e82d0a210 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x561e82d0a1f8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x561e82d0a1c8 <col:16> 'const Element *const' lvalue ->_context 0x561e82d09858
|         `-CXXThisExpr 0x561e82d0a1b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x561e82d08d48 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x561e82d0a2a0 <col:32, line:57:5>
|   `-ReturnStmt 0x561e82d0a290 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x561e82d0a278 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x561e82d0a248 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x561e82d098b8
|         `-CXXThisExpr 0x561e82d0a238 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x561e82d08e08 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x561e82d08f90 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x561e82d08ec0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x561e82d090e0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x561e82d09050 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561e82d09230 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x561e82d091a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x561e82d09438 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x561e82d092e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x561e82d09360 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x561e82d09768 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x561e82d094f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x561e82d09578 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x561e82d09640 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x561e82d09820 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x561e82d09858 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x561e82d098b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x561e82d09920 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x561e82d09980 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x561e82d099d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x561e82d099d0
| `-ParmVarDecl 0x561e82d09ae8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x561e82d09b88 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x561e82d09b88
| `-ParmVarDecl 0x561e82d09c98 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x561e82e6b630 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561e82e158e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x561e82e15ab8 prev 0x561e82e158e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x561e82e15b48 <col:46, col:52> col:46 public
|-TypedefDecl 0x561e82e15b70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e17740 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x561e82e176f0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x561e82e16020 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x561e82e15f20 'type'
|     `-TemplateSpecializationType 0x561e82e15eb0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x561e82e15d90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x561e82e15d70 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x561e82e15d50 <col:24> 'unsigned long' 4
|       `-RecordType 0x561e82e15e90 'char_array<4>'
|         `-ClassTemplateSpecialization 0x561e82e15db0 'char_array'
|-TypedefDecl 0x561e82e177f8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x561e82e177c0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x561e82e177a0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x561e82e17740 'type'
|     `-ElaboratedType 0x561e82e176f0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x561e82e16020 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x561e82e15f20 'type'
|         `-TemplateSpecializationType 0x561e82e15eb0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x561e82e15d90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x561e82e15d70 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x561e82e15d50 <col:24> 'unsigned long' 4
|           `-RecordType 0x561e82e15e90 'char_array<4>'
|             `-ClassTemplateSpecialization 0x561e82e15db0 'char_array'
|-CXXMethodDecl 0x561e82e17978 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x561e82e17888 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x561e82e17a68 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x561e82e17b48 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x561e82e17e18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x561e82e17d20 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x561e82e18058 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561e82e17ed0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561e82e17f48 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e18228 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561e82e18118 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561e82e18190 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e18388 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x561e82e18458 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x561e82e186a8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561e82e18518 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x561e82e18590 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e18908 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x561e82e18778 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x561e82e187f0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e18ac8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x561e82e189d8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e18c88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x561e82e18b90 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e201b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561e82e20260 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x561e82e20498 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x561e82e20310 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x561e82e20388 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x561e82e20738 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x561e82e20640 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x561e82e20800 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x561e82e20850 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x561e82e208a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561e82e142e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x561e82e144f8 prev 0x561e82e142e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x561e82e15850 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x561e82e15800 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x561e82e157e0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x561e82e15690 'type'
|     `-SubstTemplateTypeParmType 0x561e82e154b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x561e82aebba0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82aebb48 'T'
|       `-RecordType 0x561e82e15000 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x561e82e14f18 'sized_array_memory'
|-FieldDecl 0x561e82e208f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x561e82e20940 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x561e82e20978 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|   |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x561e82b23838 'T'
|   `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e20a08 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x561e82e209d0 'int &'
|   `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|     |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561e82b23838 'T'
|     `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e20ac8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x561e82e20a90 'const int &'
|   `-QualType 0x561e82e14591 'const int' const
|     `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e20b58 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x561e82e20b20 'int *'
|   `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|     |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561e82b23838 'T'
|     `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e20be8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x561e82e20bb0 'const int *'
|   `-QualType 0x561e82e14591 'const int' const
|     `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e217d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x561e82e21780 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x561e82e21760 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x561e82e216f0 'type'
|     `-SubstTemplateTypeParmType 0x561e82e214b0 'int' sugar
|       |-TemplateTypeParmType 0x561e82af69a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82af6950 'T'
|       `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e21838 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x561e82e20a90 'const int &'
|   `-QualType 0x561e82e14591 'const int' const
|     `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e21890 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e218f8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x561e82e20b20 'int *'
|   `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|     |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x561e82b23838 'T'
|     `-BuiltinType 0x561e82826370 'int'
|-TypedefDecl 0x561e82e21960 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x561e82e20bb0 'const int *'
|   `-QualType 0x561e82e14591 'const int' const
|     `-SubstTemplateTypeParmType 0x561e82e14590 'int' sugar
|       |-TemplateTypeParmType 0x561e82b23890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x561e82b23838 'T'
|       `-BuiltinType 0x561e82826370 'int'
|-EnumDecl 0x561e82e219b8 <line:134:5> col:5
| `-EnumConstantDecl 0x561e82e21ab0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x561e82e21a90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x561e82b252c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x561e82b252a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x561e82b25280 <col:40> 'int' 1
|-CXXConstructorDecl 0x561e82e21b38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x561e82e21d88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82e21bf0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561e82e21c90 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x561e82e22048 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x561e82e21f30 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x561e82e22308 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x561e82e221f0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x561e82e22650 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x561e82e22530 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x561e82e22960 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x561e82e22840 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x561e82e22c50 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82e22a98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561e82e22b10 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561e82e22d78 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x561e82e22e58 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82e22eb0 <col:30> Inherited
|-CXXMethodDecl 0x561e82e22ef8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x561e82e22fa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82e23000 <col:30> Inherited
|-CXXMethodDecl 0x561e82e230c8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561e82e23178 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82e231d0 <col:30> Inherited
|-CXXMethodDecl 0x561e82e23218 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561e82e232c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82e23320 <col:30> Inherited
|-CXXMethodDecl 0x561e82e23368 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561e82e23418 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82e23470 <col:30> Inherited
|-CXXMethodDecl 0x561e82e234b8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x561e82e23568 <col:20> Inherited
| `-OptimizeNoneAttr 0x561e82e235c0 <col:30> Inherited
|-CXXMethodDecl 0x561e82e235e8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561e82e23698 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x561e82e23748 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x561e82e23908 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82e237f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x561e82e23870 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561e82e23a58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x561e82e239c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82e23c08 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x561e82e23b10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561e82e23cc0 <col:20>
| `-OptimizeNoneAttr 0x561e82e23d18 <col:30>
|-CXXMethodDecl 0x561e82e23e38 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x561e82e23d40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x561e82e23ef0 <col:20>
| `-OptimizeNoneAttr 0x561e82e23f48 <col:30>
|-CXXMethodDecl 0x561e82e24000 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x561e82e23f70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82e24148 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561e82e240b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82e24278 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x561e82e243a8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x561e82e24478 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x561e82e24548 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x561e82e24688 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x561e82e245f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82e247d0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x561e82e24740 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x561e82e24918 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x561e82e24888 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561e82e249d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x561e82e24ad0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x561e82e24a40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x561e82e24b88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x561e82e24c48 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x561e82e24d48 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x561e82e24ec8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x561e82e24e08 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x561e82e25688 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x561e82e24f80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x561e82e255e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x561e82e254e8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x561e82e25768 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x561e82e258b8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x561e82e25828 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561e82e25970 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x561e82e25bb8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x561e82e25a30 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x561e82e25aa8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x561e82e25d78 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x561e82e25c88 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x561e82e25fc8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x561e82e25e40 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x561e82e25eb8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x561e82e26088 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x561e82e262e8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x561e82e261f0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x561e82e263b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82e12458 prev 0x561e82df4b48 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561e82e12550 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x561e82e12640 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x561e82e38110 <col:16, line:828:9>
|-CXXDestructorDecl 0x561e82e12730 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x561e82e38120 <col:25, line:830:9>
|-CXXMethodDecl 0x561e82e12830 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x561e82e128e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x561e82e12988 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x561e82e12988
| `-ParmVarDecl 0x561e82e12a98 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x561e82e13258 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x561e82e13258
  `-ParmVarDecl 0x561e82e13368 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82df4960 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x561e82df4ab8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x561e82df4b48 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x561e82df4c00 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x561e82df4d08 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x561e82df4c38 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561e82e27978 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561e82e27958 <col:31> 'int' 0
|-CXXConstructorDecl 0x561e82df5028 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x561e82df4ea0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x561e82df4f18 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561e82e279b0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561e82e27990 <col:59> 'int' 0
|-CXXConstructorDecl 0x561e82df5200 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82df50f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x561e82df5168 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561e82e279e8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561e82e279c8 <col:55> 'int' 0
|-CXXConstructorDecl 0x561e82df55b8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x561e82df53a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x561e82df5418 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x561e82df5490 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x561e82e27a20 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x561e82e27a00 <col:31> 'int' 0
|-CXXConstructorDecl 0x561e82df5778 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x561e82df56b8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x561e82df5870 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x561e82df5a58 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x561e82df5960 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x561e82df5b48 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x561e82e27dd0 <col:24, line:291:5>
|   `-ReturnStmt 0x561e82e27dc0 <line:290:9, col:79>
|     `-BinaryOperator 0x561e82e27da0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x561e82e27c78 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x561e82e27bd0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x561e82e27bb0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x561e82e27aa8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x561e82e27a90 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x561e82e27a78 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x561e82e27a48 <col:18> 'Vector<String> *const' lvalue ->_conf 0x561e82e14280
|       | |   |       `-CXXThisExpr 0x561e82e27a38 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x561e82e27b98 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x561e82e27b80 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x561e82e27b48 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x561e82e27b18 <col:28, col:35> '<bound member function type>' ->size 0x561e82dd6658
|       | |           `-ImplicitCastExpr 0x561e82e27b68 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x561e82e27b00 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x561e82e27ad0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x561e82e14280
|       | |                 `-CXXThisExpr 0x561e82e27ac0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x561e82e27c60 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x561e82e27c48 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x561e82e27c30 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x561e82e27c00 <col:47> 'Args::Slot *const' lvalue ->_slots 0x561e82e26500
|       |         `-CXXThisExpr 0x561e82e27bf0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x561e82e27d80 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x561e82e27d68 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561e82e27d50 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x561e82e27d10 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x561e82e27cf8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x561e82e27ca8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x561e82e265b0
|         |     |   `-CXXThisExpr 0x561e82e27c98 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x561e82e27cd8 <col:73> 'int' 0
|         `-IntegerLiteral 0x561e82e27d30 <col:79> 'int' 0
|-CXXMethodDecl 0x561e82df5c08 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x561e82e27fa8 <col:32, line:296:5>
|   `-ReturnStmt 0x561e82e27f98 <line:295:9, col:49>
|     `-BinaryOperator 0x561e82e27f78 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x561e82e27e58 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x561e82e27e40 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x561e82e27e28 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x561e82e27df8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x561e82e26500
|       |       `-CXXThisExpr 0x561e82e27de8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x561e82e27f58 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x561e82e27f40 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561e82e27f28 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x561e82e27ee8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x561e82e27ed0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x561e82e27e80 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x561e82e265b0
|         |     |   `-CXXThisExpr 0x561e82e27e70 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x561e82e27eb0 <col:43> 'int' 0
|         `-IntegerLiteral 0x561e82e27f08 <col:49> 'int' 0
|-CXXMethodDecl 0x561e82df5cf8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x561e82e29b20 <col:19, line:306:5>
|   |-IfStmt 0x561e82e280d8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x561e82e28018 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x561e82e28000 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x561e82e27fd0 <col:13> 'Vector<String> *' lvalue ->_conf 0x561e82e14280
|   | |     `-CXXThisExpr 0x561e82e27fc0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x561e82e280b8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x561e82e28088 <col:13, col:20> '<bound member function type>' ->clear 0x561e82dd9058
|   |     `-ImplicitCastExpr 0x561e82e28070 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x561e82e28040 <col:13> 'Vector<String> *' lvalue ->_conf 0x561e82e14280
|   |         `-CXXThisExpr 0x561e82e28030 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x561e82e28160 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x561e82e28130 <col:9, col:16> '<bound member function type>' .clear 0x561e82e26088
|   |   `-MemberExpr 0x561e82e28100 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x561e82e264a0
|   |     `-CXXThisExpr 0x561e82e280f0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x561e82e29b10 <line:305:9, col:17>
|     `-UnaryOperator 0x561e82e28190 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82e28180 <col:17> 'Args *' this
|-CXXMethodDecl 0x561e82df5f78 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x561e82df5e80 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x561e82df60f8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x561e82df6030 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x561e82df6478 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x561e82df61a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x561e82df63d8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x561e82df6248 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x561e82df62c0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x561e82e29e40 <col:67, line:327:5>
|     |-WhileStmt 0x561e82e29df0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x561e82e29c08 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x561e82e29b88 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x561e82d457f8 0x561e82b8edd8 0x561e82b8eab0 0x561e82b80290 0x561e82b7ff40 0x561e82b7f830 0x561e82b521d0 0x561e82ade2e0
|     | | |-DeclRefExpr 0x561e82e29b48 <col:16> 'Iter' lvalue ParmVar 0x561e82df6248 'begin' 'Iter'
|     | | `-DeclRefExpr 0x561e82e29b68 <col:25> 'Iter' lvalue ParmVar 0x561e82df62c0 'end' 'Iter'
|     | `-CompoundStmt 0x561e82e29dd0 <col:30, line:325:9>
|     |   |-CallExpr 0x561e82e29d70 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x561e82e29c50 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x561e82e29d40 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x561e82e29cd0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|     |   |   `-DeclRefExpr 0x561e82e29cb0 <col:24> 'Iter' lvalue ParmVar 0x561e82df6248 'begin' 'Iter'
|     |   `-UnaryOperator 0x561e82e29db8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x561e82e29d98 <col:15> 'Iter' lvalue ParmVar 0x561e82df6248 'begin' 'Iter'
|     `-ReturnStmt 0x561e82e29e30 <line:326:9, col:17>
|       `-UnaryOperator 0x561e82e29e18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e29e08 <col:17> 'Args *' this
|-CXXMethodDecl 0x561e82df6580 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x561e82df64f0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x561e82df66c8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x561e82df6638 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x561e82df6790 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x561e82e29f20 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x561e82e29ec0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x561e82e29e70 <col:9> '<bound member function type>' ->reset_from 0x561e82e26928
|   | | `-CXXThisExpr 0x561e82e29e60 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x561e82e29ea0 <col:20> 'int' 0
|   `-ReturnStmt 0x561e82e29f10 <line:352:9, col:17>
|     `-UnaryOperator 0x561e82e29ef8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82e29ee8 <col:17> 'Args *' this
|-VarDecl 0x561e82df6848 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x561e82df68b0 <col:38> 'int' 1
|-VarDecl 0x561e82df6940 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x561e82df69a8 <col:39> 'int' 2
|-VarDecl 0x561e82df6a38 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x561e82df6aa0 <col:39> 'int' 4
|-VarDecl 0x561e82df6b30 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x561e82df6b98 <col:39> 'int' 8
|-FunctionTemplateDecl 0x561e82df6f18 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x561e82df6c10 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x561e82df6e78 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x561e82df6cc0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x561e82df6d68 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x561e82e2a078 <col:43, line:371:5>
| |   `-ReturnStmt 0x561e82e2a068 <line:370:9, col:34>
| |     `-CallExpr 0x561e82e2a030 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x561e82e29f50 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x561e82e29fd0 <col:21> 'const char *' lvalue ParmVar 0x561e82df6cc0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x561e82e29ff0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x561e82e2a010 <col:33> 'T' lvalue ParmVar 0x561e82df6d68 'x' 'T &'
| `-CXXMethodDecl 0x561e82e6bfa8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x561e82e6bdc8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x561e82e6be98 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x561e82df7248 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x561e82df6f80 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82df71a8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561e82df7030 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df70d8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2a1c8 <col:45, line:375:5>
|     `-ReturnStmt 0x561e82e2a1b8 <line:374:9, col:42>
|       `-CallExpr 0x561e82e2a180 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2a0a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2a120 <col:21> 'const char *' lvalue ParmVar 0x561e82df7030 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2a140 <col:30> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int'
|         `-DeclRefExpr 0x561e82e2a160 <col:41> 'T' lvalue ParmVar 0x561e82df70d8 'x' 'T &'
|-FunctionTemplateDecl 0x561e82df7578 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x561e82df72b0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x561e82df74d8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x561e82df7360 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x561e82df7408 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x561e82e2a318 <col:45, line:379:5>
| |   `-ReturnStmt 0x561e82e2a308 <line:378:9, col:43>
| |     `-CallExpr 0x561e82e2a2d0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x561e82e2a1f0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x561e82e2a270 <col:21> 'const char *' lvalue ParmVar 0x561e82df7360 'keyword' 'const char *'
| |       |-DeclRefExpr 0x561e82e2a290 <col:30> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int'
| |       `-DeclRefExpr 0x561e82e2a2b0 <col:42> 'T' lvalue ParmVar 0x561e82df7408 'x' 'T &'
| `-CXXMethodDecl 0x561e82e6bab8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, Timestamp &)'
|   |-TemplateArgument type 'Timestamp'
|   |-ParmVarDecl 0x561e82e6b8d8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x561e82e6b9a8 <col:39, col:42> col:42 x 'Timestamp &'
|-FunctionTemplateDecl 0x561e82df78a8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x561e82df75e0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82df7808 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x561e82df7690 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df7738 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2a518 <col:46, line:383:5>
|     `-ReturnStmt 0x561e82e2a508 <line:382:9, col:55>
|       `-CallExpr 0x561e82e2a4d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2a340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2a3c0 <col:21> 'const char *' lvalue ParmVar 0x561e82df7690 'keyword' 'const char *'
|         |-BinaryOperator 0x561e82e2a490 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561e82e2a440 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561e82e2a420 <col:30> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561e82e2a478 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561e82e2a458 <col:42> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x561e82e2a4b0 <col:54> 'T' lvalue ParmVar 0x561e82df7738 'x' 'T &'
|-FunctionTemplateDecl 0x561e82df7ca8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x561e82df7910 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82df7c08 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x561e82df79c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df7a40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561e82df7ae8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2a658 <col:54, line:388:5>
|     |-CallExpr 0x561e82e2a5e0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2a530 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561e82e2a570 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2a580 <col:30> 'const char *' lvalue ParmVar 0x561e82df79c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561e82e2a5a0 <col:39> 'int' lvalue ParmVar 0x561e82df7a40 'flags' 'int'
|     | `-DeclRefExpr 0x561e82e2a5c0 <col:46> 'T' lvalue ParmVar 0x561e82df7ae8 'x' 'T &'
|     `-ReturnStmt 0x561e82e2a648 <line:387:9, col:17>
|       `-UnaryOperator 0x561e82e2a630 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2a620 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82df8158 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x561e82df7d18 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561e82df7d98 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561e82df80b8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x561e82df7e58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df7ef8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x561e82df7f98 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x561e82e2a7c8 <col:74, line:403:5>
|     `-ReturnStmt 0x561e82e2a7b8 <line:402:9, col:56>
|       `-CallExpr 0x561e82e2a778 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2a688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2a6f8 <col:28> 'const char *' lvalue ParmVar 0x561e82df7e58 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2a718 <col:37> 'int' 0
|         |-DeclRefExpr 0x561e82e2a738 <col:40> 'T' lvalue ParmVar 0x561e82df7ef8 'x' 'T &'
|         `-DeclRefExpr 0x561e82e2a758 <col:43> 'const V' lvalue ParmVar 0x561e82df7f98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561e82df85c8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x561e82df81c8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561e82df8248 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561e82df8528 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x561e82df8308 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df83a8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x561e82df8448 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x561e82e2a930 <col:76, line:407:5>
|     `-ReturnStmt 0x561e82e2a920 <line:406:9, col:65>
|       `-CallExpr 0x561e82e2a8e0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2a7f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2a860 <col:28> 'const char *' lvalue ParmVar 0x561e82df8308 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2a880 <col:37> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int'
|         |-DeclRefExpr 0x561e82e2a8a0 <col:49> 'T' lvalue ParmVar 0x561e82df83a8 'x' 'T &'
|         `-DeclRefExpr 0x561e82e2a8c0 <col:52> 'const V' lvalue ParmVar 0x561e82df8448 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561e82df8b18 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x561e82df8638 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561e82df86b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561e82df8a78 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x561e82df8778 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df87f8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x561e82df8898 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x561e82df8938 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x561e82e2aa98 <col:85, line:412:5>
|     |-CallExpr 0x561e82e2aa18 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2a948 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x561e82e2a988 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2a998 <col:37> 'const char *' lvalue ParmVar 0x561e82df8778 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561e82e2a9b8 <col:46> 'int' lvalue ParmVar 0x561e82df87f8 'flags' 'int'
|     | |-DeclRefExpr 0x561e82e2a9d8 <col:53> 'T' lvalue ParmVar 0x561e82df8898 'x' 'T &'
|     | `-DeclRefExpr 0x561e82e2a9f8 <col:56> 'const V' lvalue ParmVar 0x561e82df8938 'default_value' 'const V &'
|     `-ReturnStmt 0x561e82e2aa88 <line:411:9, col:17>
|       `-UnaryOperator 0x561e82e2aa70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2aa60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82df8fa8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x561e82df8b90 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82df8c08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82df8f08 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82df8cc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df8d40 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x561e82df8de8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2ac18 <col:53, line:425:5>
|     `-ReturnStmt 0x561e82e2ac08 <line:424:9, col:42>
|       `-CallExpr 0x561e82e2abc8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2aac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2ab48 <col:21> 'const char *' lvalue ParmVar 0x561e82df8cc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2ab68 <col:30> 'int' 0
|         |-DeclRefExpr 0x561e82e2ab88 <col:33> 'P' lvalue ParmVar 0x561e82df8d40 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2aba8 <col:41> 'T' lvalue ParmVar 0x561e82df8de8 'x' 'T &'
|-FunctionTemplateDecl 0x561e82df93f8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x561e82df9018 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82df9098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82df9358 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82df9158 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df91d0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561e82df9278 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2ad90 <col:55, line:429:5>
|     `-ReturnStmt 0x561e82e2ad80 <line:428:9, col:50>
|       `-CallExpr 0x561e82e2ad40 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2ac40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2acc0 <col:21> 'const char *' lvalue ParmVar 0x561e82df9158 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2ace0 <col:30> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int'
|         |-DeclRefExpr 0x561e82e2ad00 <col:41> 'P' lvalue ParmVar 0x561e82df91d0 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2ad20 <col:49> 'T' lvalue ParmVar 0x561e82df9278 'x' 'T &'
|-FunctionTemplateDecl 0x561e82df9848 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x561e82df9468 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82df94e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82df97a8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82df95a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df9620 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561e82df96c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2af08 <col:55, line:433:5>
|     `-ReturnStmt 0x561e82e2aef8 <line:432:9, col:51>
|       `-CallExpr 0x561e82e2aeb8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2adb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2ae38 <col:21> 'const char *' lvalue ParmVar 0x561e82df95a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2ae58 <col:30> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int'
|         |-DeclRefExpr 0x561e82e2ae78 <col:42> 'P' lvalue ParmVar 0x561e82df9620 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2ae98 <col:50> 'T' lvalue ParmVar 0x561e82df96c8 'x' 'T &'
|-FunctionTemplateDecl 0x561e82df9c98 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x561e82df98b8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82df9938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82df9bf8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82df99f8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df9a70 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x561e82df9b18 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2b130 <col:56, line:437:5>
|     `-ReturnStmt 0x561e82e2b120 <line:436:9, col:63>
|       `-CallExpr 0x561e82e2b0e0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2af30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2afb0 <col:21> 'const char *' lvalue ParmVar 0x561e82df99f8 'keyword' 'const char *'
|         |-BinaryOperator 0x561e82e2b080 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561e82e2b030 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561e82e2b010 <col:30> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561e82e2b068 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561e82e2b048 <col:42> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x561e82e2b0a0 <col:54> 'P' lvalue ParmVar 0x561e82df9a70 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2b0c0 <col:62> 'T' lvalue ParmVar 0x561e82df9b18 'x' 'T &'
|-FunctionTemplateDecl 0x561e82dfa1c8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x561e82df9d08 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82df9d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82dfa128 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561e82df9e48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82df9ec8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561e82df9f40 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x561e82df9fe8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2b298 <col:64, line:442:5>
|     |-CallExpr 0x561e82e2b218 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2b148 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561e82e2b188 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2b198 <col:30> 'const char *' lvalue ParmVar 0x561e82df9e48 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561e82e2b1b8 <col:39> 'int' lvalue ParmVar 0x561e82df9ec8 'flags' 'int'
|     | |-DeclRefExpr 0x561e82e2b1d8 <col:46> 'P' lvalue ParmVar 0x561e82df9f40 'parser' 'P'
|     | `-DeclRefExpr 0x561e82e2b1f8 <col:54> 'T' lvalue ParmVar 0x561e82df9fe8 'x' 'T &'
|     `-ReturnStmt 0x561e82e2b288 <line:441:9, col:17>
|       `-UnaryOperator 0x561e82e2b270 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2b260 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82dfa7c8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x561e82dfa240 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfa2b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561e82dfa338 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561e82dfa728 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x561e82dfa400 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82dfa478 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561e82dfa518 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x561e82dfa5e8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x561e82e2b430 <col:84, line:458:5>
|     `-ReturnStmt 0x561e82e2b420 <line:457:9, col:64>
|       `-CallExpr 0x561e82e2b3d8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2b2c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2b338 <col:28> 'const char *' lvalue ParmVar 0x561e82dfa400 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2b358 <col:37> 'int' 0
|         |-DeclRefExpr 0x561e82e2b378 <col:40> 'P' lvalue ParmVar 0x561e82dfa478 'parser' 'P'
|         |-DeclRefExpr 0x561e82e2b398 <col:48> 'T' lvalue ParmVar 0x561e82dfa518 'x' 'T &'
|         `-DeclRefExpr 0x561e82e2b3b8 <col:51> 'const V' lvalue ParmVar 0x561e82dfa5e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561e82dfad48 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x561e82dfa840 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfa8b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561e82dfa938 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561e82dfaca8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x561e82dfaa00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82dfaa78 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x561e82dfab18 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x561e82dfabb8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x561e82e2b5c0 <col:86, line:462:5>
|     `-ReturnStmt 0x561e82e2b5b0 <line:461:9, col:73>
|       `-CallExpr 0x561e82e2b568 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2b458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2b4c8 <col:28> 'const char *' lvalue ParmVar 0x561e82dfaa00 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2b4e8 <col:37> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int'
|         |-DeclRefExpr 0x561e82e2b508 <col:49> 'P' lvalue ParmVar 0x561e82dfaa78 'parser' 'P'
|         |-DeclRefExpr 0x561e82e2b528 <col:57> 'T' lvalue ParmVar 0x561e82dfab18 'x' 'T &'
|         `-DeclRefExpr 0x561e82e2b548 <col:60> 'const V' lvalue ParmVar 0x561e82dfabb8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x561e82dfb3a8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x561e82dfadc0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfae38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x561e82dfaeb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561e82dfb308 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x561e82dfaf80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82dfb000 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x561e82dfb078 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x561e82dfb118 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x561e82dfb1b8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x561e82e2b750 <col:95, line:467:5>
|     |-CallExpr 0x561e82e2b6c8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2b5d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x561e82e2b618 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2b628 <col:37> 'const char *' lvalue ParmVar 0x561e82dfaf80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561e82e2b648 <col:46> 'int' lvalue ParmVar 0x561e82dfb000 'flags' 'int'
|     | |-DeclRefExpr 0x561e82e2b668 <col:53> 'P' lvalue ParmVar 0x561e82dfb078 'parser' 'P'
|     | |-DeclRefExpr 0x561e82e2b688 <col:61> 'T' lvalue ParmVar 0x561e82dfb118 'x' 'T &'
|     | `-DeclRefExpr 0x561e82e2b6a8 <col:64> 'const V' lvalue ParmVar 0x561e82dfb1b8 'default_value' 'const V &'
|     `-ReturnStmt 0x561e82e2b740 <line:466:9, col:17>
|       `-UnaryOperator 0x561e82e2b728 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2b718 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82dfb988 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x561e82dfb428 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfb4a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561e82dfb528 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561e82dfb8e8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561e82dfb5f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82dfb668 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x561e82dfb708 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561e82dfb7a8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x561e82e2b8f8 <col:63, line:481:5>
|     `-ReturnStmt 0x561e82e2b8e8 <line:480:9, col:47>
|       `-CallExpr 0x561e82e2b8a0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2b780 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2b800 <col:21> 'const char *' lvalue ParmVar 0x561e82dfb5f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2b820 <col:30> 'int' 0
|         |-DeclRefExpr 0x561e82e2b840 <col:33> 'P' lvalue ParmVar 0x561e82dfb668 'parser' 'P'
|         |-DeclRefExpr 0x561e82e2b860 <col:41> 'T1' lvalue ParmVar 0x561e82dfb708 'x1' 'T1 &'
|         `-DeclRefExpr 0x561e82e2b880 <col:45> 'T2' lvalue ParmVar 0x561e82dfb7a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561e82dfbf08 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x561e82dfba00 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfba78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561e82dfbaf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561e82dfbe68 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561e82dfbbc0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82dfbc38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561e82dfbcd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561e82dfbd78 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x561e82e2ba98 <col:65, line:485:5>
|     `-ReturnStmt 0x561e82e2ba88 <line:484:9, col:55>
|       `-CallExpr 0x561e82e2ba40 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2b920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2b9a0 <col:21> 'const char *' lvalue ParmVar 0x561e82dfbbc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2b9c0 <col:30> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int'
|         |-DeclRefExpr 0x561e82e2b9e0 <col:41> 'P' lvalue ParmVar 0x561e82dfbc38 'parser' 'P'
|         |-DeclRefExpr 0x561e82e2ba00 <col:49> 'T1' lvalue ParmVar 0x561e82dfbcd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x561e82e2ba20 <col:53> 'T2' lvalue ParmVar 0x561e82dfbd78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561e82dfc488 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x561e82dfbf80 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfbff8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561e82dfc078 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561e82dfc3e8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561e82dfc140 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82dfc1b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x561e82dfc258 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561e82dfc2f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x561e82e2bc38 <col:65, line:489:5>
|     `-ReturnStmt 0x561e82e2bc28 <line:488:9, col:56>
|       `-CallExpr 0x561e82e2bbe0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2bac0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2bb40 <col:21> 'const char *' lvalue ParmVar 0x561e82dfc140 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2bb60 <col:30> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int'
|         |-DeclRefExpr 0x561e82e2bb80 <col:42> 'P' lvalue ParmVar 0x561e82dfc1b8 'parser' 'P'
|         |-DeclRefExpr 0x561e82e2bba0 <col:50> 'T1' lvalue ParmVar 0x561e82dfc258 'x1' 'T1 &'
|         `-DeclRefExpr 0x561e82e2bbc0 <col:54> 'T2' lvalue ParmVar 0x561e82dfc2f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561e82e01448 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x561e82dfc500 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82dfc578 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561e82dfc5f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561e82e013a8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561e82dfc6c0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e01170 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e01218 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561e82e012b8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x561e82e2be88 <col:66, line:493:5>
|     `-ReturnStmt 0x561e82e2be78 <line:492:9, col:68>
|       `-CallExpr 0x561e82e2be30 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2bc60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2bce0 <col:21> 'const char *' lvalue ParmVar 0x561e82dfc6c0 'keyword' 'const char *'
|         |-BinaryOperator 0x561e82e2bdb0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x561e82e2bd60 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561e82e2bd40 <col:30> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561e82e2bd98 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561e82e2bd78 <col:42> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x561e82e2bdd0 <col:54> 'P' lvalue ParmVar 0x561e82e01170 'parser' 'P'
|         |-DeclRefExpr 0x561e82e2bdf0 <col:62> 'T1' lvalue ParmVar 0x561e82e01218 'x1' 'T1 &'
|         `-DeclRefExpr 0x561e82e2be10 <col:66> 'T2' lvalue ParmVar 0x561e82e012b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x561e82e01aa8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x561e82e014c0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e01538 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561e82e015b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561e82e01a08 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561e82e01680 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e01700 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e01778 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e01818 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x561e82e018b8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x561e82e2c018 <col:74, line:498:5>
|     |-CallExpr 0x561e82e2bf90 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2bea0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x561e82e2bee0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2bef0 <col:30> 'const char *' lvalue ParmVar 0x561e82e01680 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561e82e2bf10 <col:39> 'int' lvalue ParmVar 0x561e82e01700 'flags' 'int'
|     | |-DeclRefExpr 0x561e82e2bf30 <col:46> 'P' lvalue ParmVar 0x561e82e01778 'parser' 'P'
|     | |-DeclRefExpr 0x561e82e2bf50 <col:54> 'T1' lvalue ParmVar 0x561e82e01818 'x1' 'T1 &'
|     | `-DeclRefExpr 0x561e82e2bf70 <col:58> 'T2' lvalue ParmVar 0x561e82e018b8 'x2' 'T2 &'
|     `-ReturnStmt 0x561e82e2c008 <line:497:9, col:17>
|       `-UnaryOperator 0x561e82e2bff0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2bfe0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82e01e08 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x561e82e01b28 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e01d68 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561e82e01be0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e01c58 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2c160 <col:52, line:509:5>
|     `-ReturnStmt 0x561e82e2c150 <line:508:9, col:44>
|       `-CallExpr 0x561e82e2c118 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c048 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2c0b8 <col:26> 'const char *' lvalue ParmVar 0x561e82e01be0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2c0d8 <col:35> 'int' 0
|         `-DeclRefExpr 0x561e82e2c0f8 <col:38> 'P' lvalue ParmVar 0x561e82e01c58 'parser' 'P'
|-FunctionTemplateDecl 0x561e82e02108 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x561e82e01e70 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e02068 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561e82e01f20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e01f98 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2c2a0 <col:54, line:513:5>
|     `-ReturnStmt 0x561e82e2c290 <line:512:9, col:52>
|       `-CallExpr 0x561e82e2c258 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2c1f8 <col:26> 'const char *' lvalue ParmVar 0x561e82e01f20 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2c218 <col:35> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int'
|         `-DeclRefExpr 0x561e82e2c238 <col:46> 'P' lvalue ParmVar 0x561e82e01f98 'parser' 'P'
|-FunctionTemplateDecl 0x561e82e02408 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x561e82e02170 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e02368 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561e82e02220 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e02298 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2c3e0 <col:54, line:517:5>
|     `-ReturnStmt 0x561e82e2c3d0 <line:516:9, col:53>
|       `-CallExpr 0x561e82e2c398 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c2c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2c338 <col:26> 'const char *' lvalue ParmVar 0x561e82e02220 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2c358 <col:35> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int'
|         `-DeclRefExpr 0x561e82e2c378 <col:47> 'P' lvalue ParmVar 0x561e82e02298 'parser' 'P'
|-FunctionTemplateDecl 0x561e82e02708 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x561e82e02470 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e02668 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561e82e02520 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e02598 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2c5d0 <col:55, line:521:5>
|     `-ReturnStmt 0x561e82e2c5c0 <line:520:9, col:65>
|       `-CallExpr 0x561e82e2c588 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c408 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2c478 <col:26> 'const char *' lvalue ParmVar 0x561e82e02520 'keyword' 'const char *'
|         |-BinaryOperator 0x561e82e2c548 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x561e82e2c4f8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x561e82e2c4d8 <col:35> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x561e82e2c530 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x561e82e2c510 <col:47> 'const int' lvalue Var 0x561e82df6940 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x561e82e2c568 <col:59> 'P' lvalue ParmVar 0x561e82e02598 'parser' 'P'
|-FunctionTemplateDecl 0x561e82e02ad8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x561e82e02770 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e02a38 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x561e82e02820 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e028a0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e02918 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2c710 <col:63, line:526:5>
|     |-CallExpr 0x561e82e2c698 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2c5e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x561e82e2c628 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2c638 <col:35> 'const char *' lvalue ParmVar 0x561e82e02820 'keyword' 'const char *'
|     | |-DeclRefExpr 0x561e82e2c658 <col:44> 'int' lvalue ParmVar 0x561e82e028a0 'flags' 'int'
|     | `-DeclRefExpr 0x561e82e2c678 <col:51> 'P' lvalue ParmVar 0x561e82e02918 'parser' 'P'
|     `-ReturnStmt 0x561e82e2c700 <line:525:9, col:17>
|       `-UnaryOperator 0x561e82e2c6e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2c6d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82e02f28 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x561e82e02b48 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e02bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e02e88 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82e02c88 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e02d00 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e02da8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2c868 <col:58, line:541:5>
|     `-ReturnStmt 0x561e82e2c858 <line:540:9, col:39>
|       `-CallExpr 0x561e82e2c820 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2c7c0 <col:21> 'const char *' lvalue ParmVar 0x561e82e02c88 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2c7e0 <col:30> 'P' lvalue ParmVar 0x561e82e02d00 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2c800 <col:38> 'T' lvalue ParmVar 0x561e82e02da8 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e03378 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x561e82e02f98 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e03018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e032d8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82e030d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e03150 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e031f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2c9a0 <col:60, line:545:5>
|     `-ReturnStmt 0x561e82e2c990 <line:544:9, col:41>
|       `-CallExpr 0x561e82e2c958 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2c8f8 <col:23> 'const char *' lvalue ParmVar 0x561e82e030d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2c918 <col:32> 'P' lvalue ParmVar 0x561e82e03150 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2c938 <col:40> 'T' lvalue ParmVar 0x561e82e031f8 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e037c8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x561e82e033e8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e03468 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e03728 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82e03528 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e035a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e03648 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2cad8 <col:60, line:549:5>
|     `-ReturnStmt 0x561e82e2cac8 <line:548:9, col:41>
|       `-CallExpr 0x561e82e2ca90 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2c9c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2ca30 <col:23> 'const char *' lvalue ParmVar 0x561e82e03528 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2ca50 <col:32> 'P' lvalue ParmVar 0x561e82e035a0 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2ca70 <col:40> 'T' lvalue ParmVar 0x561e82e03648 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e03c18 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x561e82e03838 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e038b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e03b78 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82e03978 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e039f0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e03a98 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2cc10 <col:61, line:553:5>
|     `-ReturnStmt 0x561e82e2cc00 <line:552:9, col:42>
|       `-CallExpr 0x561e82e2cbc8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2cb00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2cb68 <col:24> 'const char *' lvalue ParmVar 0x561e82e03978 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2cb88 <col:33> 'P' lvalue ParmVar 0x561e82e039f0 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2cba8 <col:41> 'T' lvalue ParmVar 0x561e82e03a98 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e040f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x561e82e03c88 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e03d08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e04058 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561e82e03dc8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e03e48 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e03ec0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e03f68 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2cd88 <col:69, line:557:5>
|     `-ReturnStmt 0x561e82e2cd78 <line:556:9, col:46>
|       `-CallExpr 0x561e82e2cd38 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2cc38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2ccb8 <col:21> 'const char *' lvalue ParmVar 0x561e82e03dc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2ccd8 <col:30> 'int' lvalue ParmVar 0x561e82e03e48 'flags' 'int'
|         |-DeclRefExpr 0x561e82e2ccf8 <col:37> 'P' lvalue ParmVar 0x561e82e03ec0 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2cd18 <col:45> 'T' lvalue ParmVar 0x561e82e03f68 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e04408 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x561e82e04170 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e04368 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x561e82e04220 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e04298 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2cec8 <col:56, line:571:5>
|     `-ReturnStmt 0x561e82e2ceb8 <line:570:9, col:48>
|       `-CallExpr 0x561e82e2ce80 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2cdb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2ce20 <col:30> 'const char *' lvalue ParmVar 0x561e82e04220 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2ce40 <col:39> 'int' 0
|         `-DeclRefExpr 0x561e82e2ce60 <col:42> 'P' lvalue ParmVar 0x561e82e04298 'parser' 'P'
|-FunctionTemplateDecl 0x561e82e04798 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x561e82e04470 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e046f8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x561e82e04520 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e045a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e04618 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x561e82e2d098 <col:67, line:576:5>
|     |-CallExpr 0x561e82e2d020 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2cee0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x561e82e2cf20 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2cf30 <col:39> 'const char *' lvalue ParmVar 0x561e82e04520 'keyword' 'const char *'
|     | |-BinaryOperator 0x561e82e2cfe0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x561e82e2cf90 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561e82e2cf50 <col:48> 'int' lvalue ParmVar 0x561e82e045a0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561e82e2cfc8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561e82e2cfa8 <col:56> 'const int' lvalue Var 0x561e82df6b30 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x561e82e2d000 <col:68> 'P' lvalue ParmVar 0x561e82e04618 'parser' 'P'
|     `-ReturnStmt 0x561e82e2d088 <line:575:9, col:17>
|       `-UnaryOperator 0x561e82e2d070 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2d060 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82e04be8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x561e82e04808 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e04888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e04b48 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x561e82e04948 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e049c0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e04a68 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2d208 <col:62, line:592:5>
|     `-ReturnStmt 0x561e82e2d1f8 <line:591:9, col:51>
|       `-CallExpr 0x561e82e2d1b8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2d0c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2d138 <col:30> 'const char *' lvalue ParmVar 0x561e82e04948 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2d158 <col:39> 'int' 0
|         |-DeclRefExpr 0x561e82e2d178 <col:42> 'P' lvalue ParmVar 0x561e82e049c0 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2d198 <col:50> 'T' lvalue ParmVar 0x561e82e04a68 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e050c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x561e82e04c58 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e04cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e05028 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x561e82e04d98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e04e18 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e04e90 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e04f38 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2d400 <col:73, line:597:5>
|     |-CallExpr 0x561e82e2d380 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2d220 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x561e82e2d260 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2d270 <col:39> 'const char *' lvalue ParmVar 0x561e82e04d98 'keyword' 'const char *'
|     | |-BinaryOperator 0x561e82e2d320 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x561e82e2d2d0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561e82e2d290 <col:48> 'int' lvalue ParmVar 0x561e82e04e18 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561e82e2d308 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561e82e2d2e8 <col:56> 'const int' lvalue Var 0x561e82df6b30 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x561e82e2d340 <col:68> 'P' lvalue ParmVar 0x561e82e04e90 'parser' 'P'
|     | `-DeclRefExpr 0x561e82e2d360 <col:76> 'T' lvalue ParmVar 0x561e82e04f38 'x' 'T &'
|     `-ReturnStmt 0x561e82e2d3f0 <line:596:9, col:17>
|       `-UnaryOperator 0x561e82e2d3d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2d3c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82e05678 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x561e82e05140 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e051b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e055d8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x561e82e05278 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e052f0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e054b0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561e82e2d570 <col:65, line:614:5>
|     `-ReturnStmt 0x561e82e2d560 <line:613:9, col:46>
|       `-CallExpr 0x561e82e2d520 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2d430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2d4a0 <col:25> 'const char *' lvalue ParmVar 0x561e82e05278 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2d4c0 <col:34> 'int' 0
|         |-DeclRefExpr 0x561e82e2d4e0 <col:37> 'P' lvalue ParmVar 0x561e82e052f0 'parser' 'P'
|         `-DeclRefExpr 0x561e82e2d500 <col:45> 'Vector<T>' lvalue ParmVar 0x561e82e054b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x561e82e05aa8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x561e82e056e8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82e05a08 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x561e82e057a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e058f0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561e82e2d790 <col:55, line:618:5>
|     `-ReturnStmt 0x561e82e2d780 <line:617:9, col:55>
|       `-CallExpr 0x561e82e2d740 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2d598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2d608 <col:25> 'const char *' lvalue ParmVar 0x561e82e057a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x561e82e2d628 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x561e82e2d700 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x561e82e2d720 <col:54> 'Vector<T>' lvalue ParmVar 0x561e82e058f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x561e82e06078 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x561e82e05b10 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e05b88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e05fd8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x561e82e05c48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e05cc8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e05d40 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e05e90 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561e82e2d988 <col:76, line:623:5>
|     |-CallExpr 0x561e82e2d908 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x561e82e2d7a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x561e82e2d7e8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x561e82e2d7f8 <col:34> 'const char *' lvalue ParmVar 0x561e82e05c48 'keyword' 'const char *'
|     | |-BinaryOperator 0x561e82e2d8a8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x561e82e2d858 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x561e82e2d818 <col:43> 'int' lvalue ParmVar 0x561e82e05cc8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x561e82e2d890 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x561e82e2d870 <col:51> 'const int' lvalue Var 0x561e82df6b30 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x561e82e2d8c8 <col:63> 'P' lvalue ParmVar 0x561e82e05d40 'parser' 'P'
|     | `-DeclRefExpr 0x561e82e2d8e8 <col:71> 'Vector<T>' lvalue ParmVar 0x561e82e05e90 'x' 'Vector<T> &'
|     `-ReturnStmt 0x561e82e2d978 <line:622:9, col:17>
|       `-UnaryOperator 0x561e82e2d960 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2d950 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82e065b8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x561e82e060f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e06168 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e06518 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x561e82e06228 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e062a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e063f0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x561e82e2dbf0 <col:66, line:627:5>
|     `-ReturnStmt 0x561e82e2dbe0 <line:626:9, col:59>
|       `-CallExpr 0x561e82e2dba0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x561e82e2d9b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x561e82e2da28 <col:25> 'const char *' lvalue ParmVar 0x561e82e06228 'keyword' 'const char *'
|         |-DeclRefExpr 0x561e82e2da48 <col:34> 'int' lvalue ParmVar 0x561e82e062a8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x561e82e2db60 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x561e82e2db80 <col:58> 'Vector<T>' lvalue ParmVar 0x561e82e063f0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x561e82e06648 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x561e82e2dc70 <col:25, line:633:5>
|   `-ReturnStmt 0x561e82e2dc60 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x561e82e2dc48 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x561e82e2dc18 <col:16> 'const bool' lvalue ->_status 0x561e82e140e8
|         `-CXXThisExpr 0x561e82e2dc08 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x561e82e067c8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x561e82e06700 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x561e82e2dd58 <col:27, line:639:5>
|   |-BinaryOperator 0x561e82e2dd00 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561e82e2dc88 <col:9> 'bool' lvalue ParmVar 0x561e82e06700 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561e82e2dce8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561e82e2dcb8 <col:13> 'bool' lvalue ->_status 0x561e82e140e8
|   |     `-CXXThisExpr 0x561e82e2dca8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x561e82e2dd48 <line:638:9, col:17>
|     `-UnaryOperator 0x561e82e2dd30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82e2dd20 <col:17> 'Args *' this
|-CXXMethodDecl 0x561e82e06948 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x561e82e06888 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x561e82e2de48 <col:39, line:644:5>
|   |-BinaryOperator 0x561e82e2ddf0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561e82e2dd78 <col:9> 'bool' lvalue ParmVar 0x561e82e06888 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561e82e2ddd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561e82e2dda8 <col:13> 'const bool' lvalue ->_status 0x561e82e140e8
|   |     `-CXXThisExpr 0x561e82e2dd98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x561e82e2de38 <line:643:9, col:17>
|     `-UnaryOperator 0x561e82e2de20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82e2de10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x561e82e06a10 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x561e82e2def0 <col:30, line:651:5>
|   `-ReturnStmt 0x561e82e2dee0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x561e82e2dec8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x561e82e2de98 <col:16> 'bool' lvalue ->_read_status 0x561e82d09980
|         `-ImplicitCastExpr 0x561e82e2de78 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x561e82e2de68 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x561e82e06b58 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x561e82e06ac8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x561e82e2dff8 <col:32, line:658:5>
|   |-BinaryOperator 0x561e82e2dfa0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561e82e2df08 <col:9> 'bool' lvalue ParmVar 0x561e82e06ac8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561e82e2df88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561e82e2df58 <col:13> 'bool' lvalue ->_read_status 0x561e82d09980
|   |     `-ImplicitCastExpr 0x561e82e2df38 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x561e82e2df28 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x561e82e2dfe8 <line:657:9, col:17>
|     `-UnaryOperator 0x561e82e2dfd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82e2dfc0 <col:17> 'Args *' this
|-CXXMethodDecl 0x561e82e06ca8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x561e82e06c18 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x561e82e2e108 <col:44, line:663:5>
|   |-BinaryOperator 0x561e82e2e0b0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x561e82e2e018 <col:9> 'bool' lvalue ParmVar 0x561e82e06c18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x561e82e2e098 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x561e82e2e068 <col:13> 'bool' lvalue ->_read_status 0x561e82d09980
|   |     `-ImplicitCastExpr 0x561e82e2e048 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x561e82e2e038 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x561e82e2e0f8 <line:662:9, col:17>
|     `-UnaryOperator 0x561e82e2e0e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82e2e0d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x561e82e06d70 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x561e82e06e38 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x561e82e06f00 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x561e82e06fc8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x561e82e072d8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x561e82e07068 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82e07238 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x561e82e07148 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2e4c0 <col:19, line:706:5>
|     `-IfStmt 0x561e82e2e498 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x561e82e2e208 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x561e82e2e3c8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x561e82e2e398 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x561e82e2e358 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x561e82e2e260 <col:42> '<bound member function type>' ->simple_slot 0x561e82e275e0
|       |     | `-CXXThisExpr 0x561e82e2e250 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x561e82e2e2f8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x561e82e2e2b0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x561e82b93878
|       |     | `-DeclRefExpr 0x561e82e2e290 <col:55> 'T' lvalue ParmVar 0x561e82e07148 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x561e82e2e338 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x561e82e2e488 <line:705:13, col:34>
|         `-CallExpr 0x561e82e2e460 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x561e82e2e3e8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x561e82e2e440 <col:33> 'T' lvalue ParmVar 0x561e82e07148 'x' 'T &'
|-FunctionTemplateDecl 0x561e82e075a8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x561e82e07338 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82e07508 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x561e82e07418 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x561e82e2e8a0 <col:31, line:717:5>
|     |-DeclStmt 0x561e82e2e600 <line:713:9, col:23>
|     | `-VarDecl 0x561e82e2e4e8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x561e82e2e5d8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x561e82e2e560 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x561e82e2e5b8 <col:21> 'T' lvalue ParmVar 0x561e82e07418 'x' 'T &'
|     |-IfStmt 0x561e82e2e850 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x561e82e2e6f8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x561e82e2e830 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x561e82e2e7d0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x561e82e2e760 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|     |   | `-DeclRefExpr 0x561e82e2e740 <col:14> 'T *' lvalue Var 0x561e82e2e4e8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x561e82e2e810 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x561e82e2e888 <line:716:9, col:16>
|       `-DeclRefExpr 0x561e82e2e868 <col:16> 'T *' lvalue Var 0x561e82e2e4e8 's' 'T *'
|-FunctionTemplateDecl 0x561e82e079b8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x561e82e07608 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561e82e07688 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561e82e07918 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x561e82e07768 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x561e82e07808 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x561e82e2ebb0 <col:37, line:726:5>
|     |-IfStmt 0x561e82e2eb40 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x561e82e2eb60 <line:723:13, col:26>
|     | | `-VarDecl 0x561e82e2e908 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x561e82e2e9f8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x561e82e2e980 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x561e82e2e9d8 <col:25> 'T' lvalue ParmVar 0x561e82e07768 'x' 'T &'
|     | |-DeclRefExpr 0x561e82e2ea20 <col:16> 'T *' lvalue Var 0x561e82e2e908 's' 'T *'
|     | `-BinaryOperator 0x561e82e2eb20 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x561e82e2ead0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x561e82e2ea60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|     |   | `-DeclRefExpr 0x561e82e2ea40 <col:14> 'T *' lvalue Var 0x561e82e2e908 's' 'T *'
|     |   `-DeclRefExpr 0x561e82e2eb00 <col:18> 'const V' lvalue ParmVar 0x561e82e07808 'value' 'const V &'
|     `-ReturnStmt 0x561e82e2eba0 <line:725:9, col:17>
|       `-UnaryOperator 0x561e82e2eb88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x561e82e2eb78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x561e82e07db8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x561e82e07a20 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x561e82e07d18 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x561e82e07ad0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e07b50 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e07bf8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x561e82e2f9d0 <col:65, line:737:5>
|     |-DeclStmt 0x561e82e2ec48 <line:732:9, col:26>
|     | `-VarDecl 0x561e82e2ebe0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561e82e2f998 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x561e82e2f9b8 <line:733:13, col:58>
|       | `-VarDecl 0x561e82e2ec70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561e82e2ee50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561e82e2ee20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561e82e2ee08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561e82e2ede8 <col:26, col:58> 'String' (CXXTemporary 0x561e82e2ede8)
|       |           `-CXXMemberCallExpr 0x561e82e2ed78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561e82e2ece8 <col:26> '<bound member function type>' ->find 0x561e82e26bf8
|       |             | `-CXXThisExpr 0x561e82e2ecd8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561e82e2edb0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e2ed18 <col:31> 'const char *' lvalue ParmVar 0x561e82e07ad0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561e82e2edc8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e2ed38 <col:40> 'int' lvalue ParmVar 0x561e82e07b50 'flags' 'int'
|       |             `-DeclRefExpr 0x561e82e2ed58 <col:47> 'Args::Slot *' lvalue Var 0x561e82e2ebe0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561e82e2ef08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561e82e2eef0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561e82e2eed0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561e82e2eea0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |       `-ImplicitCastExpr 0x561e82e2ee88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561e82e2ee68 <col:20> 'String' lvalue Var 0x561e82e2ec70 'str' 'String'
|       `-CompoundStmt 0x561e82e2f978 <col:61, line:736:9>
|         |-DeclStmt 0x561e82e2f3c0 <line:734:13, col:76>
|         | `-VarDecl 0x561e82e2ef58 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x561e82e2f390 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561e82e2f300 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561e82e2f348 <col:60> 'T' lvalue ParmVar 0x561e82e07bf8 'variable' 'T &'
|         |     `-UnaryOperator 0x561e82e2f378 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561e82e2f368 <col:71> 'Args *' this
|         `-CallExpr 0x561e82e2f948 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x561e82e2f3e8 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|           | `-CXXThisExpr 0x561e82e2f3d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561e82e2f908 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x561e82e2f418 <col:23> 'T *' lvalue Var 0x561e82e2ef58 's' 'T *'
|           | `-CallExpr 0x561e82e2f8c8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561e82e2f6a0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x561e82e2f7a0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x561e82e2f7c0 <col:86> 'String' lvalue Var 0x561e82e2ec70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561e82e2f870 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561e82e2f800 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|           |   | `-DeclRefExpr 0x561e82e2f7e0 <col:92> 'T *' lvalue Var 0x561e82e2ef58 's' 'T *'
|           |   `-UnaryOperator 0x561e82e2f8b0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561e82e2f8a0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x561e82e2f928 <col:103> 'Args::Slot *' lvalue Var 0x561e82e2ebe0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561e82e08308 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x561e82e07e28 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561e82e07ea8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x561e82e08268 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x561e82e07f68 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e07fe8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e08088 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x561e82e08128 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x561e82e30870 <col:88, line:745:5>
|     |-DeclStmt 0x561e82e2fa68 <line:741:9, col:26>
|     | `-VarDecl 0x561e82e2fa00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561e82e2fc88 <line:742:9, col:55>
|     | `-VarDecl 0x561e82e2fa90 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x561e82e2fc70 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x561e82e2fc40 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x561e82e2fc28 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x561e82e2fc08 <col:22, col:54> 'String' (CXXTemporary 0x561e82e2fc08)
|     |           `-CXXMemberCallExpr 0x561e82e2fb98 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x561e82e2fb08 <col:22> '<bound member function type>' ->find 0x561e82e26bf8
|     |             | `-CXXThisExpr 0x561e82e2faf8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x561e82e2fbd0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561e82e2fb38 <col:27> 'const char *' lvalue ParmVar 0x561e82e07f68 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x561e82e2fbe8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561e82e2fb58 <col:36> 'int' lvalue ParmVar 0x561e82e07fe8 'flags' 'int'
|     |             `-DeclRefExpr 0x561e82e2fb78 <col:43> 'Args::Slot *' lvalue Var 0x561e82e2fa00 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x561e82e30060 <line:743:9, col:72>
|     | `-VarDecl 0x561e82e2fcd8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561e82e30030 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561e82e2ffa0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x561e82e2ffe8 <col:56> 'T' lvalue ParmVar 0x561e82e08088 'variable' 'T &'
|     |     `-UnaryOperator 0x561e82e30018 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561e82e30008 <col:67> 'Args *' this
|     `-CallExpr 0x561e82e30840 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x561e82e30088 <col:9> '<bound member function type>' ->postparse 0x561e82e26e08
|       | `-CXXThisExpr 0x561e82e30078 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x561e82e30800 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x561e82e300b8 <col:19> 'T *' lvalue Var 0x561e82e2fcd8 's' 'T *'
|       | `-ParenExpr 0x561e82e307e0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x561e82e307b0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x561e82e30798 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x561e82e30780 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x561e82e30760 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x561e82e30730 <col:25> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |     |       `-ImplicitCastExpr 0x561e82e30718 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x561e82e300d8 <col:25> 'String' lvalue Var 0x561e82e2fa90 'str' 'String'
|       |     |-CallExpr 0x561e82e30588 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x561e82e30360 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x561e82e30460 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x561e82e30480 <col:89> 'String' lvalue Var 0x561e82e2fa90 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x561e82e30530 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x561e82e304c0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|       |     | | `-DeclRefExpr 0x561e82e304a0 <col:95> 'T *' lvalue Var 0x561e82e2fcd8 's' 'T *'
|       |     | `-UnaryOperator 0x561e82e30570 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x561e82e30560 <col:99> 'Args *' this
|       |     `-ParenExpr 0x561e82e306f8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x561e82e306d8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x561e82e306a8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x561e82e30658 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x561e82e305e8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|       |         | | `-DeclRefExpr 0x561e82e305c8 <col:109> 'T *' lvalue Var 0x561e82e2fcd8 's' 'T *'
|       |         | `-DeclRefExpr 0x561e82e30688 <col:113> 'const V' lvalue ParmVar 0x561e82e08128 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x561e82e306c8 <col:120> 'bool' true
|       `-DeclRefExpr 0x561e82e30820 <col:128> 'Args::Slot *' lvalue Var 0x561e82e2fa00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561e82e08838 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x561e82e08380 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e083f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e08798 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x561e82e084b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e08538 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e085b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e08658 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x561e82e31468 <col:75, line:754:5>
|     |-DeclStmt 0x561e82e30918 <line:749:9, col:26>
|     | `-VarDecl 0x561e82e308b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561e82e31430 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x561e82e31450 <line:750:13, col:58>
|       | `-VarDecl 0x561e82e30940 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561e82e30b20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561e82e30af0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561e82e30ad8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561e82e30ab8 <col:26, col:58> 'String' (CXXTemporary 0x561e82e30ab8)
|       |           `-CXXMemberCallExpr 0x561e82e30a48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561e82e309b8 <col:26> '<bound member function type>' ->find 0x561e82e26bf8
|       |             | `-CXXThisExpr 0x561e82e309a8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561e82e30a80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e309e8 <col:31> 'const char *' lvalue ParmVar 0x561e82e084b8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561e82e30a98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e30a08 <col:40> 'int' lvalue ParmVar 0x561e82e08538 'flags' 'int'
|       |             `-DeclRefExpr 0x561e82e30a28 <col:47> 'Args::Slot *' lvalue Var 0x561e82e308b0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561e82e30bd8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561e82e30bc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561e82e30ba0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561e82e30b70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |       `-ImplicitCastExpr 0x561e82e30b58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561e82e30b38 <col:20> 'String' lvalue Var 0x561e82e30940 'str' 'String'
|       `-CompoundStmt 0x561e82e31410 <col:61, line:753:9>
|         |-DeclStmt 0x561e82e30fb0 <line:751:13, col:63>
|         | `-VarDecl 0x561e82e30c28 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x561e82e30f80 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561e82e30ef0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561e82e30f38 <col:47> 'T' lvalue ParmVar 0x561e82e08658 'variable' 'T &'
|         |     `-UnaryOperator 0x561e82e30f68 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561e82e30f58 <col:58> 'Args *' this
|         `-CallExpr 0x561e82e313e0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x561e82e30fd8 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|           | `-CXXThisExpr 0x561e82e30fc8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561e82e313a0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x561e82e31008 <col:23> 'T *' lvalue Var 0x561e82e30c28 's' 'T *'
|           | `-CallExpr 0x561e82e31360 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561e82e311f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x561e82e31238 <col:56> 'P' lvalue ParmVar 0x561e82e085b0 'parser' 'P'
|           |   |-DeclRefExpr 0x561e82e31258 <col:64> 'String' lvalue Var 0x561e82e30940 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561e82e31308 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561e82e31298 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|           |   | `-DeclRefExpr 0x561e82e31278 <col:70> 'T *' lvalue Var 0x561e82e30c28 's' 'T *'
|           |   `-UnaryOperator 0x561e82e31348 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561e82e31338 <col:74> 'Args *' this
|           `-DeclRefExpr 0x561e82e313c0 <col:81> 'Args::Slot *' lvalue Var 0x561e82e308b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561e82e08e98 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x561e82e088b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x561e82e08928 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x561e82e089a8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x561e82e08df8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x561e82e08a70 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e08af0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e08b68 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e08c08 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x561e82e08ca8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x561e82e344d8 <col:98, line:762:5>
|     |-DeclStmt 0x561e82e31500 <line:758:9, col:26>
|     | `-VarDecl 0x561e82e31498 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561e82e31720 <line:759:9, col:55>
|     | `-VarDecl 0x561e82e31528 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x561e82e31708 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x561e82e316d8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x561e82e316c0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x561e82e316a0 <col:22, col:54> 'String' (CXXTemporary 0x561e82e316a0)
|     |           `-CXXMemberCallExpr 0x561e82e31630 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x561e82e315a0 <col:22> '<bound member function type>' ->find 0x561e82e26bf8
|     |             | `-CXXThisExpr 0x561e82e31590 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x561e82e31668 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561e82e315d0 <col:27> 'const char *' lvalue ParmVar 0x561e82e08a70 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x561e82e31680 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x561e82e315f0 <col:36> 'int' lvalue ParmVar 0x561e82e08af0 'flags' 'int'
|     |             `-DeclRefExpr 0x561e82e31610 <col:43> 'Args::Slot *' lvalue Var 0x561e82e31498 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x561e82e33e20 <line:760:9, col:59>
|     | `-VarDecl 0x561e82e31778 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561e82e33df0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561e82e31a80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x561e82e31ac8 <col:43> 'T' lvalue ParmVar 0x561e82e08c08 'variable' 'T &'
|     |     `-UnaryOperator 0x561e82e31af8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561e82e31ae8 <col:54> 'Args *' this
|     `-CallExpr 0x561e82e344a8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x561e82e33e48 <col:9> '<bound member function type>' ->postparse 0x561e82e26e08
|       | `-CXXThisExpr 0x561e82e33e38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x561e82e34468 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x561e82e33e78 <col:19> 'T *' lvalue Var 0x561e82e31778 's' 'T *'
|       | `-ParenExpr 0x561e82e34448 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x561e82e34418 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x561e82e34400 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x561e82e343e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x561e82e343c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x561e82e34398 <col:25> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |     |       `-ImplicitCastExpr 0x561e82e34380 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x561e82e33e98 <col:25> 'String' lvalue Var 0x561e82e31528 'str' 'String'
|       |     |-CallExpr 0x561e82e341f0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x561e82e34080 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x561e82e340c8 <col:59> 'P' lvalue ParmVar 0x561e82e08b68 'parser' 'P'
|       |     | |-DeclRefExpr 0x561e82e340e8 <col:67> 'String' lvalue Var 0x561e82e31528 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x561e82e34198 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x561e82e34128 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|       |     | | `-DeclRefExpr 0x561e82e34108 <col:73> 'T *' lvalue Var 0x561e82e31778 's' 'T *'
|       |     | `-UnaryOperator 0x561e82e341d8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x561e82e341c8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x561e82e34360 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x561e82e34340 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x561e82e34310 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x561e82e342c0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x561e82e34250 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|       |         | | `-DeclRefExpr 0x561e82e34230 <col:87> 'T *' lvalue Var 0x561e82e31778 's' 'T *'
|       |         | `-DeclRefExpr 0x561e82e342f0 <col:91> 'const V' lvalue ParmVar 0x561e82e08ca8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x561e82e34330 <col:98> 'bool' true
|       `-DeclRefExpr 0x561e82e34488 <col:106> 'Args::Slot *' lvalue Var 0x561e82e31498 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561e82e11168 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x561e82e08f18 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e08f98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x561e82e09018 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x561e82e110c8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x561e82e090e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e10dc0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e10e38 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e10ed8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x561e82e10f78 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x561e82e354b8 <col:60, line:773:5>
|     |-DeclStmt 0x561e82e34580 <line:767:9, col:26>
|     | `-VarDecl 0x561e82e34518 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561e82e35480 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x561e82e354a0 <line:768:13, col:58>
|       | `-VarDecl 0x561e82e345a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561e82e34788 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561e82e34758 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561e82e34740 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561e82e34720 <col:26, col:58> 'String' (CXXTemporary 0x561e82e34720)
|       |           `-CXXMemberCallExpr 0x561e82e346b0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561e82e34620 <col:26> '<bound member function type>' ->find 0x561e82e26bf8
|       |             | `-CXXThisExpr 0x561e82e34610 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561e82e346e8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e34650 <col:31> 'const char *' lvalue ParmVar 0x561e82e090e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561e82e34700 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e34670 <col:40> 'int' lvalue ParmVar 0x561e82e10dc0 'flags' 'int'
|       |             `-DeclRefExpr 0x561e82e34690 <col:47> 'Args::Slot *' lvalue Var 0x561e82e34518 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561e82e34840 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561e82e34828 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561e82e34808 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561e82e347d8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |       `-ImplicitCastExpr 0x561e82e347c0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561e82e347a0 <col:20> 'String' lvalue Var 0x561e82e345a8 'str' 'String'
|       `-CompoundStmt 0x561e82e35458 <col:61, line:772:9>
|         |-DeclStmt 0x561e82e34b80 <line:769:13, col:66>
|         | `-VarDecl 0x561e82e34898 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x561e82e34b50 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561e82e34ac0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561e82e34b08 <col:49> 'T1' lvalue ParmVar 0x561e82e10ed8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x561e82e34b38 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561e82e34b28 <col:61> 'Args *' this
|         |-DeclStmt 0x561e82e34ef0 <line:770:13, col:66>
|         | `-VarDecl 0x561e82e34c08 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x561e82e34ec0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x561e82e34e30 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x561e82e34e78 <col:49> 'T2' lvalue ParmVar 0x561e82e10f78 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x561e82e34ea8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x561e82e34e98 <col:61> 'Args *' this
|         `-CallExpr 0x561e82e35428 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x561e82e34f18 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|           | `-CXXThisExpr 0x561e82e34f08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x561e82e353e8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x561e82e34f88 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x561e82e34f48 <col:23> 'T1 *' lvalue Var 0x561e82e34898 's1' 'T1 *'
|           | | `-DeclRefExpr 0x561e82e34f68 <col:29> 'T2 *' lvalue Var 0x561e82e34c08 's2' 'T2 *'
|           | `-CallExpr 0x561e82e353a0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x561e82e35170 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x561e82e351b8 <col:63> 'P' lvalue ParmVar 0x561e82e10e38 'parser' 'P'
|           |   |-DeclRefExpr 0x561e82e351d8 <col:71> 'String' lvalue Var 0x561e82e345a8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x561e82e35288 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561e82e35218 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|           |   | `-DeclRefExpr 0x561e82e351f8 <col:77> 'T1 *' lvalue Var 0x561e82e34898 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x561e82e35348 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x561e82e352d8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|           |   | `-DeclRefExpr 0x561e82e352b8 <col:82> 'T2 *' lvalue Var 0x561e82e34c08 's2' 'T2 *'
|           |   `-UnaryOperator 0x561e82e35388 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x561e82e35378 <col:87> 'Args *' this
|           `-DeclRefExpr 0x561e82e35408 <col:94> 'Args::Slot *' lvalue Var 0x561e82e34518 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561e82e11558 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x561e82e111e8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e114b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x561e82e112a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e11320 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e11398 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x561e82e359d0 <col:67, line:780:5>
|     |-DeclStmt 0x561e82e35550 <line:777:9, col:26>
|     | `-VarDecl 0x561e82e354e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x561e82e35998 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x561e82e359b8 <line:778:13, col:58>
|       | `-VarDecl 0x561e82e35578 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x561e82e35758 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x561e82e35728 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x561e82e35710 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x561e82e356f0 <col:26, col:58> 'String' (CXXTemporary 0x561e82e356f0)
|       |           `-CXXMemberCallExpr 0x561e82e35680 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x561e82e355f0 <col:26> '<bound member function type>' ->find 0x561e82e26bf8
|       |             | `-CXXThisExpr 0x561e82e355e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x561e82e356b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e35620 <col:31> 'const char *' lvalue ParmVar 0x561e82e112a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x561e82e356d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x561e82e35640 <col:40> 'int' lvalue ParmVar 0x561e82e11320 'flags' 'int'
|       |             `-DeclRefExpr 0x561e82e35660 <col:47> 'Args::Slot *' lvalue Var 0x561e82e354e8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x561e82e35810 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x561e82e357f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x561e82e357d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x561e82e357a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|       |       `-ImplicitCastExpr 0x561e82e35790 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x561e82e35770 <col:20> 'String' lvalue Var 0x561e82e35578 'str' 'String'
|       `-CallExpr 0x561e82e35968 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x561e82e35838 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|         | `-CXXThisExpr 0x561e82e35828 <col:13> 'Args *' implicit this
|         |-CallExpr 0x561e82e35918 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x561e82e35888 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x561e82e35868 <col:23> 'P' lvalue ParmVar 0x561e82e11398 'parser' 'P'
|         | |-DeclRefExpr 0x561e82e358d0 <col:36> 'String' lvalue Var 0x561e82e35578 'str' 'String'
|         | `-UnaryOperator 0x561e82e35900 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x561e82e358f0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x561e82e35948 <col:49> 'Args::Slot *' lvalue Var 0x561e82e354e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x561e82e118f8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x561e82e115c8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x561e82e11858 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x561e82e11680 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e11700 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e11778 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x561e82e36340 <col:71, line:792:5>
|     |-DeclStmt 0x561e82e35a68 <line:784:9, col:26>
|     | `-VarDecl 0x561e82e35a00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561e82e35b38 <line:785:9, col:29>
|     | `-VarDecl 0x561e82e35a98 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561e82e35b20 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561e82e35b00 <col:28> 'int' 1
|     |-WhileStmt 0x561e82e361f0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x561e82e36210 <line:786:16, col:61>
|     | | `-VarDecl 0x561e82e35b60 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561e82e35d40 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561e82e35d10 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561e82e35cf8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561e82e35cd8 <col:29, col:61> 'String' (CXXTemporary 0x561e82e35cd8)
|     | |           `-CXXMemberCallExpr 0x561e82e35c68 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561e82e35bd8 <col:29> '<bound member function type>' ->find 0x561e82e26bf8
|     | |             | `-CXXThisExpr 0x561e82e35bc8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561e82e35ca0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561e82e35c08 <col:34> 'const char *' lvalue ParmVar 0x561e82e11680 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561e82e35cb8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561e82e35c28 <col:43> 'int' lvalue ParmVar 0x561e82e11700 'flags' 'int'
|     | |             `-DeclRefExpr 0x561e82e35c48 <col:50> 'Args::Slot *' lvalue Var 0x561e82e35a00 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561e82e35df8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561e82e35de0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561e82e35dc0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561e82e35d90 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|     | |       `-ImplicitCastExpr 0x561e82e35d78 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561e82e35d58 <col:23> 'String' lvalue Var 0x561e82e35b60 'str' 'String'
|     | `-CompoundStmt 0x561e82e361c8 <col:64, line:790:9>
|     |   |-CallExpr 0x561e82e35f50 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x561e82e35e20 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|     |   | | `-CXXThisExpr 0x561e82e35e10 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x561e82e35f00 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x561e82e35e70 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x561e82e35e50 <col:23> 'P' lvalue ParmVar 0x561e82e11778 'parser' 'P'
|     |   | | |-DeclRefExpr 0x561e82e35eb8 <col:36> 'String' lvalue Var 0x561e82e35b60 'str' 'String'
|     |   | | `-UnaryOperator 0x561e82e35ee8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x561e82e35ed8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x561e82e35f30 <col:49> 'Args::Slot *' lvalue Var 0x561e82e35a00 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x561e82e360e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561e82e35f80 <col:13> 'int' lvalue Var 0x561e82e35a98 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561e82e360d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561e82e360b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561e82e36018 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561e82e35ff8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561e82e35fe0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561e82e35fa0 <col:28> 'int' lvalue Var 0x561e82e35a98 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561e82e35fc0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561e82e36098 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561e82e36068 <col:49> 'bool' lvalue ->_read_status 0x561e82d09980
|     |   |         `-ImplicitCastExpr 0x561e82e36048 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561e82e36038 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561e82e36198 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561e82e36108 <col:13> 'int' lvalue ParmVar 0x561e82e11700 'flags' 'int'
|     |     `-UnaryOperator 0x561e82e36180 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561e82e36168 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561e82e36148 <col:23> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561e82e36320 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561e82e36258 <col:9> 'bool' lvalue ->_read_status 0x561e82d09980
|       | `-ImplicitCastExpr 0x561e82e36238 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561e82e36228 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561e82e36300 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561e82e362e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561e82e362c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561e82e36288 <col:25> 'int' lvalue Var 0x561e82e35a98 'read_status' 'int'
|           `-IntegerLiteral 0x561e82e362a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x561e82e11dd8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x561e82e11968 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e119e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e11d38 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x561e82e11aa8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e11b28 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e11ba0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e11c48 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x561e82e372d0 <col:84, line:805:5>
|     |-DeclStmt 0x561e82e363e8 <line:796:9, col:26>
|     | `-VarDecl 0x561e82e36380 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561e82e364b8 <line:797:9, col:29>
|     | `-VarDecl 0x561e82e36418 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561e82e364a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561e82e36480 <col:28> 'int' 1
|     |-DeclStmt 0x561e82e367f0 <line:798:9, col:71>
|     | `-VarDecl 0x561e82e36508 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x561e82e367c0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x561e82e36730 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x561e82e36778 <col:55> 'T' lvalue ParmVar 0x561e82e11c48 'variable' 'T &'
|     |     `-UnaryOperator 0x561e82e367a8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x561e82e36798 <col:66> 'Args *' this
|     |-WhileStmt 0x561e82e37180 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x561e82e371a0 <line:799:16, col:61>
|     | | `-VarDecl 0x561e82e36818 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561e82e369f8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561e82e369c8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561e82e369b0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561e82e36990 <col:29, col:61> 'String' (CXXTemporary 0x561e82e36990)
|     | |           `-CXXMemberCallExpr 0x561e82e36920 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561e82e36890 <col:29> '<bound member function type>' ->find 0x561e82e26bf8
|     | |             | `-CXXThisExpr 0x561e82e36880 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561e82e36958 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561e82e368c0 <col:34> 'const char *' lvalue ParmVar 0x561e82e11aa8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561e82e36970 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561e82e368e0 <col:43> 'int' lvalue ParmVar 0x561e82e11b28 'flags' 'int'
|     | |             `-DeclRefExpr 0x561e82e36900 <col:50> 'Args::Slot *' lvalue Var 0x561e82e36380 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561e82e36ab0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561e82e36a98 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561e82e36a78 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561e82e36a48 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|     | |       `-ImplicitCastExpr 0x561e82e36a30 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561e82e36a10 <col:23> 'String' lvalue Var 0x561e82e36818 'str' 'String'
|     | `-CompoundStmt 0x561e82e37158 <col:64, line:803:9>
|     |   |-CallExpr 0x561e82e36ee0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x561e82e36ad8 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|     |   | | `-CXXThisExpr 0x561e82e36ac8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x561e82e36ea0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x561e82e36b08 <col:23> 'T *' lvalue Var 0x561e82e36508 's' 'T *'
|     |   | | `-CallExpr 0x561e82e36e60 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x561e82e36cf0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x561e82e36d38 <col:56> 'P' lvalue ParmVar 0x561e82e11ba0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x561e82e36d58 <col:64> 'String' lvalue Var 0x561e82e36818 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x561e82e36e08 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x561e82e36d98 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|     |   | |   | `-DeclRefExpr 0x561e82e36d78 <col:70> 'T *' lvalue Var 0x561e82e36508 's' 'T *'
|     |   | |   `-UnaryOperator 0x561e82e36e48 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x561e82e36e38 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x561e82e36ec0 <col:81> 'Args::Slot *' lvalue Var 0x561e82e36380 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x561e82e37078 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561e82e36f10 <col:13> 'int' lvalue Var 0x561e82e36418 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561e82e37060 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561e82e37040 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561e82e36fa8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561e82e36f88 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561e82e36f70 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561e82e36f30 <col:28> 'int' lvalue Var 0x561e82e36418 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561e82e36f50 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561e82e37028 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561e82e36ff8 <col:49> 'bool' lvalue ->_read_status 0x561e82d09980
|     |   |         `-ImplicitCastExpr 0x561e82e36fd8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561e82e36fc8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561e82e37128 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561e82e37098 <col:13> 'int' lvalue ParmVar 0x561e82e11b28 'flags' 'int'
|     |     `-UnaryOperator 0x561e82e37110 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561e82e370f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561e82e370d8 <col:23> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561e82e372b0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561e82e371e8 <col:9> 'bool' lvalue ->_read_status 0x561e82d09980
|       | `-ImplicitCastExpr 0x561e82e371c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561e82e371b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561e82e37290 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561e82e37270 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561e82e37258 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561e82e37218 <col:25> 'int' lvalue Var 0x561e82e36418 'read_status' 'int'
|           `-IntegerLiteral 0x561e82e37238 <col:40> 'int' 1
|-FunctionTemplateDecl 0x561e82e123b8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x561e82e11e50 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x561e82e11ec8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x561e82e12318 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x561e82e11f88 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x561e82e12008 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x561e82e12080 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x561e82e121d0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x561e82e380d8 <col:87, line:821:5>
|     |-DeclStmt 0x561e82e37380 <line:809:9, col:26>
|     | `-VarDecl 0x561e82e37318 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x561e82e37450 <line:810:9, col:29>
|     | `-VarDecl 0x561e82e373b0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x561e82e37438 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x561e82e37418 <col:28> 'int' 1
|     |-DeclStmt 0x561e82e37698 <line:811:9, col:38>
|     | `-VarDecl 0x561e82e37580 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x561e82e37670 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x561e82e375f8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x561e82e37650 <col:29> 'Vector<T>' lvalue ParmVar 0x561e82e121d0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x561e82e37f88 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x561e82e37fa8 <line:812:16, col:61>
|     | | `-VarDecl 0x561e82e376c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x561e82e378a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x561e82e37870 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x561e82e37858 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x561e82e37838 <col:29, col:61> 'String' (CXXTemporary 0x561e82e37838)
|     | |           `-CXXMemberCallExpr 0x561e82e377c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x561e82e37738 <col:29> '<bound member function type>' ->find 0x561e82e26bf8
|     | |             | `-CXXThisExpr 0x561e82e37728 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x561e82e37800 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561e82e37768 <col:34> 'const char *' lvalue ParmVar 0x561e82e11f88 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x561e82e37818 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x561e82e37788 <col:43> 'int' lvalue ParmVar 0x561e82e12008 'flags' 'int'
|     | |             `-DeclRefExpr 0x561e82e377a8 <col:50> 'Args::Slot *' lvalue Var 0x561e82e37318 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x561e82e37958 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x561e82e37940 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x561e82e37920 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x561e82e378f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x561e82b56878
|     | |       `-ImplicitCastExpr 0x561e82e378d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x561e82e378b8 <col:23> 'String' lvalue Var 0x561e82e376c0 'str' 'String'
|     | `-CompoundStmt 0x561e82e37f50 <col:64, line:819:9>
|     |   |-DeclStmt 0x561e82e37a18 <line:813:13, col:23>
|     |   | `-VarDecl 0x561e82e37980 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x561e82e379f8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x561e82e37b98 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x561e82e37a40 <col:13> '<bound member function type>' ->postparse 0x561e82e26e08
|     |   | | `-CXXThisExpr 0x561e82e37a30 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x561e82e37b40 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x561e82e37a90 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x561e82e37a70 <col:23> 'P' lvalue ParmVar 0x561e82e12080 'parser' 'P'
|     |   | | |-DeclRefExpr 0x561e82e37ad8 <col:36> 'String' lvalue Var 0x561e82e376c0 'str' 'String'
|     |   | | |-DeclRefExpr 0x561e82e37af8 <col:41> 'T' lvalue Var 0x561e82e37980 'sx' 'T'
|     |   | | `-UnaryOperator 0x561e82e37b28 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x561e82e37b18 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x561e82e37b78 <col:53> 'Args::Slot *' lvalue Var 0x561e82e37318 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x561e82e37cf0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x561e82e37c28 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x561e82e37bf8 <col:17> 'bool' lvalue ->_read_status 0x561e82d09980
|     |   | |   `-ImplicitCastExpr 0x561e82e37bd8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x561e82e37bc8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x561e82e37cc8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x561e82e37c60 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x561e82e37c40 <col:17> 'Vector<T> *' lvalue Var 0x561e82e37580 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x561e82e37ca8 <col:30> 'T' lvalue Var 0x561e82e37980 'sx' 'T'
|     |   |-BinaryOperator 0x561e82e37e70 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x561e82e37d08 <col:13> 'int' lvalue Var 0x561e82e373b0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x561e82e37e58 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x561e82e37e38 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x561e82e37da0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x561e82e37d80 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x561e82e37d68 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x561e82e37d28 <col:28> 'int' lvalue Var 0x561e82e373b0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x561e82e37d48 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x561e82e37e20 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x561e82e37df0 <col:49> 'bool' lvalue ->_read_status 0x561e82d09980
|     |   |         `-ImplicitCastExpr 0x561e82e37dd0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x561e82e37dc0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x561e82e37f20 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x561e82e37e90 <col:13> 'int' lvalue ParmVar 0x561e82e12008 'flags' 'int'
|     |     `-UnaryOperator 0x561e82e37f08 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x561e82e37ef0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x561e82e37ed0 <col:23> 'const int' lvalue Var 0x561e82df6848 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x561e82e380b8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x561e82e37ff0 <col:9> 'bool' lvalue ->_read_status 0x561e82d09980
|       | `-ImplicitCastExpr 0x561e82e37fd0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x561e82e37fc0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x561e82e38098 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x561e82e38078 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x561e82e38060 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x561e82e38020 <col:25> 'int' lvalue Var 0x561e82e373b0 'read_status' 'int'
|           `-IntegerLiteral 0x561e82e38040 <col:40> 'int' 1
|-AccessSpecDecl 0x561e82e12430 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x561e82e12458 prev 0x561e82df4b48 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x561e82e12550 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x561e82e12640 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x561e82e38110 <col:16, line:828:9>
| |-CXXDestructorDecl 0x561e82e12730 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x561e82e38120 <col:25, line:830:9>
| |-CXXMethodDecl 0x561e82e12830 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x561e82e128e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x561e82e12988 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x561e82e12988
| | `-ParmVarDecl 0x561e82e12a98 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x561e82e13258 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x561e82e13258
|   `-ParmVarDecl 0x561e82e13368 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x561e82e12b08 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x561e82e12c68 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x561e82e12e60 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x561e82e12d10 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x561e82e12d88 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x561e82e38300 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x561e82e13118 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x561e82e38170 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x561e82e38130 <col:20> 'void *' lvalue ParmVar 0x561e82e12d10 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x561e82e13180 '_slot' 'char *'
| | | `-CXXNewExpr 0x561e82e381f8 <col:32, col:45> 'char *' array Function 0x561e82979138 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x561e82e381e0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x561e82e381b0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x561e82e12d88 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x561e82e131e0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x561e82e382c0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x561e82e38280 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x561e82e12d88 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x561e82e38380 <col:61, line:838:9>
| |-CXXDestructorDecl 0x561e82e12f60 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x561e82e12730 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x561e82e38408 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x561e82e383e8 <line:840:13, col:22> 'void' array Function 0x561e82979498 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x561e82e383d0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x561e82e383a0 <col:22> 'char *' lvalue ->_slot 0x561e82e13180
| |         `-CXXThisExpr 0x561e82e38390 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x561e82e13060 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x561e82e12830 Slot::store 'void ()' ]
| | `-CompoundStmt 0x561e82e385f8 <col:22, line:844:9>
| |   `-CallExpr 0x561e82e38560 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x561e82e38548 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x561e82e38528 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x561e82a84f18 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x561e82e38598 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x561e82e38478 <col:20> 'void *' lvalue ->_ptr 0x561e82e13118
| |     |   `-CXXThisExpr 0x561e82e38468 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x561e82e385c8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x561e82e385b0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x561e82e384b8 <col:26> 'char *' lvalue ->_slot 0x561e82e13180
| |     |     `-CXXThisExpr 0x561e82e384a8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x561e82e385e0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x561e82e384f8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x561e82e131e0
| |         `-CXXThisExpr 0x561e82e384e8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x561e82e13118 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x561e82e13180 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x561e82e131e0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x561e82e133d8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x561e82e133d8
| | `-ParmVarDecl 0x561e82e134e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x561e82e13588 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x561e82e13588
|   `-ParmVarDecl 0x561e82e13698 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x561e82e13838 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x561e82e13708 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x561e82e137a8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x561e82e13ad0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x561e82e13cc8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x561e82e13b98 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x561e82e13e48 '_ptr' 'T *'
|   | | `-ParenListExpr 0x561e82e38630 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x561e82e38610 <col:20> 'T *' lvalue ParmVar 0x561e82e13b98 'ptr' 'T *'
|   | `-CompoundStmt 0x561e82e38680 <col:25, line:854:9>
|   |-CXXMethodDecl 0x561e82e13d98 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x561e82e12830 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x561e82e38830 <col:22, line:857:9>
|   |   `-CallExpr 0x561e82e38800 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x561e82e38690 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x561e82b3d9f8 0x561e82ae7978
|   |     |-CXXOperatorCallExpr 0x561e82e38790 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x561e82e38720 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x561e82d4a978 0x561e82d4a598 0x561e82d4a1c8 0x561e82d49de8 0x561e82d49a08 0x561e82d49638
|   |     | `-MemberExpr 0x561e82e386f0 <col:29> 'T *' lvalue ->_ptr 0x561e82e13e48
|   |     |   `-CXXThisExpr 0x561e82e386e0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x561e82e387d0 <col:35> 'T' lvalue ->_slot 0x561e82e13ea8
|   |       `-CXXThisExpr 0x561e82e387c0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x561e82e13e48 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x561e82e13ea8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x561e82e13f10 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x561e82e14010 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x561e82e14060 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82e13ff0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x561e82e13fd0 <col:31> 'int' 48
|-FieldDecl 0x561e82e14088 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x561e82e140e8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x561e82e14148 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x561e82e14280 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x561e82e264a0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x561e82e26500 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x561e82e265b0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x561e82e267d8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x561e82e266e0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x561e82e26928 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x561e82e26898 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x561e82e26bf8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x561e82e269e8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x561e82e26a68 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x561e82e26b10 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x561e82e26e08 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x561e82e26cc0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x561e82e26d38 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x561e82e26ed8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x561e82e27028 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x561e82e26f90 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x561e82e273b8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x561e82e270e8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x561e82e27168 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x561e82e27210 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x561e82e272c8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x561e82e275e0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x561e82e27490 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x561e82e27508 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x561e82e278f8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x561e82e27690 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x561e82e27858 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x561e82e27768 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82b46720 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82b46838 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x561e82b468c8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x561e82b46998 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x561e82b46a80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82b46c98 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561e82b46b40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b46e48 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x561e82b46d50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x561e82b46f90 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x561e82b46f00 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x561e82b470d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561e82b47048 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b47220 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x561e82b47190 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b472e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x561e82b47430 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x561e82b473a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x561e82b474f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x561e82b47640 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x561e82b475b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x561e82b477b8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x561e82b476f8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b47900 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x561e82b47870 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b479c8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x561e82b47b88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561e82b47a78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561e82b47af0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b47dd8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561e82b47c48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561e82b47cc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561e82b47e88 <col:86> "" ""
|-CXXMethodDecl 0x561e82b480f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x561e82b47f68 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x561e82b47fe0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b482a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x561e82b481b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x561e82b48458 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x561e82b48360 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x561e82b48728 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x561e82b48510 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x561e82b48588 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561e82b48600 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b48a08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x561e82b487f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x561e82b48868 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561e82b488e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561e82b48ac0 <col:115> "" ""
|-AccessSpecDecl 0x561e82b48b30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x561e82b48b68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82b4a080 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x561e82b4a080
| `-ParmVarDecl 0x561e82b4a188 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x561e82b4a228 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x561e82b4a228
| `-ParmVarDecl 0x561e82b4a338 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x561e82b7f938 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561e82d71730 <col:7>
|-CXXConstructorDecl 0x561e82b7fa10 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x561e82b7fa10
| `-ParmVarDecl 0x561e82b7fb28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x561e82b7fb98 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x561e82b7fb98
| `-ParmVarDecl 0x561e82b7fca8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x561e82d74130 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d602d8 prev 0x561e82d554e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d603d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x561e82d604c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x561e82d605e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x561e82d60768 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x561e82d608e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x561e82d60a68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x561e82d71898 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x561e82d72108 <col:11>
|-CXXDestructorDecl 0x561e82d71970 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561e82d71aa8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x561e82d71aa8
| `-ParmVarDecl 0x561e82d71bb8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x561e82d71c58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561e82d71c58
| `-ParmVarDecl 0x561e82d71d68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x561e82d74b28 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82d74c38 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x561e82d74eb8 <col:11>
|   `-ReturnStmt 0x561e82d74ea8 <col:11>
|     `-UnaryOperator 0x561e82d74e90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x561e82d74e80 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x561e82d74ca8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561e82d74ca8
  `-ParmVarDecl 0x561e82d74db8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d60ad0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d60be8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x561e82d60c88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x561e82d60cf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x561e82d60d58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x561e82d60dc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x561e82d60e20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x561e82d60ee0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x561e82d60f40 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x561e82d60fa0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x561e82d717a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x561e82d60c88 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x561e82d72118 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x561e82d72170 <col:12>
|-CXXConstructorDecl 0x561e82d71dd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x561e82d71dd8
| `-ParmVarDecl 0x561e82d71ee8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x561e82d71f88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x561e82d71f88
| `-ParmVarDecl 0x561e82d72098 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x561e82d74210 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d4ebf0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x561e82d4ed08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x561e82d4ed98 <col:16, col:22> col:16 public
|-EnumDecl 0x561e82d4edc0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x561e82d4eec0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x561e82d4efa0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d4eea0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x561e82d4ee80 <col:21> 'int' 28
| `-EnumConstantDecl 0x561e82d4ef50 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x561e82d4efb8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d4ef30 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x561e82d4ef10 <col:22> 'int' 64
|-CXXMethodDecl 0x561e82d4f2f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x561e82d4efe0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561e82d4f060 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x561e82d4f0d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561e82d4f150 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561e82d4f3b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x561e82d4f5b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x561e82d4f430 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x561e82d4f4a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561e82d4f668 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x561e82d4f7c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x561e82d4f6d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561e82d4f870 <col:72> warn_unused_result ""
|-TypedefDecl 0x561e82d4fbd0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x561e82d4fb60 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x561e82d4fb00 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x561e82d4fac0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x561e828262d0 'void'
|       |-PointerType 0x561e82acec10 'unsigned char *'
|       | `-BuiltinType 0x561e828263d0 'unsigned char'
|       |-TypedefType 0x561e828cb180 'size_t' sugar
|       | |-Typedef 0x561e82896b20 'size_t'
|       | `-BuiltinType 0x561e82826430 'unsigned long'
|       `-PointerType 0x561e82826ad0 'void *'
|         `-BuiltinType 0x561e828262d0 'void'
|-CXXMethodDecl 0x561e82d50048 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x561e82d4fc40 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x561e82d4fcb8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561e82d4fd50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x561e82d4fdd0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x561e82d6a740 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x561e82d6a728 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x561e82d6a6f0 <col:58> 'int' 0
| |-ParmVarDecl 0x561e82d4fe50 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x561e82d6a768 <col:76> 'int' 0
| |-ParmVarDecl 0x561e82d4fed0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x561e82d6a788 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x561e82d50118 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x561e82d50198 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x561e82d50258 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x561e82d502f8 <col:20>
| `-OptimizeNoneAttr 0x561e82d50350 <col:30>
|-CXXMethodDecl 0x561e82d503c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x561e82d50468 <col:20>
| `-OptimizeNoneAttr 0x561e82d504c0 <col:30>
|-CXXMethodDecl 0x561e82d50538 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x561e82d505d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x561e82d50688 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x561e82d50728 <col:20>
| |-OptimizeNoneAttr 0x561e82d50780 <col:30>
| `-WarnUnusedResultAttr 0x561e82d507a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x561e82d50800 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x561e82d508a0 <col:20>
| `-OptimizeNoneAttr 0x561e82d508f8 <col:30>
|-CXXMethodDecl 0x561e82d50948 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x561e82d509e8 <col:20>
| `-OptimizeNoneAttr 0x561e82d50a40 <col:30>
|-CXXMethodDecl 0x561e82d50a88 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x561e82d50b28 <col:20>
| `-OptimizeNoneAttr 0x561e82d50b80 <col:30>
|-CXXMethodDecl 0x561e82d50bc8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d50c88 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d50d50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561e82d50e18 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561e82d50ed8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d50ff8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x561e82d6a850 <col:54, line:99:5>
|   `-ReturnStmt 0x561e82d6a840 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x561e82d6a828 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x561e82d6a7f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561e82d612d8
|         `-CXXThisExpr 0x561e82d6a7e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x561e82d51198 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x561e82d510a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x561e82d6a900 <col:67, line:103:5>
|   `-BinaryOperator 0x561e82d6a8e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x561e82d6a878 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561e82d612d8
|     | `-CXXThisExpr 0x561e82d6a868 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x561e82d6a8c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d6a8a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x561e82d510a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x561e82d51290 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x561e82d6a980 <col:33, line:107:5>
|   `-ReturnStmt 0x561e82d6a970 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x561e82d6a958 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x561e82d6a928 <col:16> 'void *' lvalue ->_destructor_argument 0x561e82d61340
|         `-CXXThisExpr 0x561e82d6a918 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x561e82d51350 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x561e82d6afb0 <col:25, line:113:5>
|   |-ParenExpr 0x561e82d6acf8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x561e82d6acc8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6aa38 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x561e82d6aa10 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x561e82d6a9d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x561e82d6a9a8 <col:24> '<bound member function type>' ->shared 0x561e82d503c8
|   |   |       `-ImplicitCastExpr 0x561e82d6a9f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x561e82d6a998 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x561e82d6aa98 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6aa78 <col:42> 'int' 0
|   |   `-CallExpr 0x561e82d6ac28 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6ac10 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6abf0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6ac68 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6ab08 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x561e82d6ac80 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6ab30 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6ac98 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6ab68 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x561e82d6acb0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6abd8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6abc0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6ab88 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x561e82d6aef8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x561e82d6ad28 <col:2> 'unsigned char *' lvalue ->_head 0x561e82d610e0
|   | | `-CXXThisExpr 0x561e82d6ad18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x561e82d6aee0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x561e82d6aec0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x561e82d6ad68 <col:10> 'unsigned char *' lvalue ->_data 0x561e82d61148
|   |     | `-CXXThisExpr 0x561e82d6ad58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x561e82d6aea8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x561e82d6ae88 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x561e82d6ada8 <col:18> 'unsigned char *' lvalue ->_tail 0x561e82d611b0
|   |         | `-CXXThisExpr 0x561e82d6ad98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x561e82d6ae70 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x561e82d6ae50 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x561e82d6ade8 <col:26> 'unsigned char *' lvalue ->_end 0x561e82d61218
|   |             | `-CXXThisExpr 0x561e82d6add8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x561e82d6ae38 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x561e82d6ae18 <col:33> 'int' 0
|   `-BinaryOperator 0x561e82d6af90 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x561e82d6af28 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x561e82d612d8
|     | `-CXXThisExpr 0x561e82d6af18 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x561e82d6af78 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x561e82d6af58 <col:16> 'int' 0
|-CXXMethodDecl 0x561e82d51490 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561e82d51400 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d51538 <col:20>
| |-OptimizeNoneAttr 0x561e82d51590 <col:30>
| `-WarnUnusedResultAttr 0x561e82d515b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x561e82d51688 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561e82d515f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d51730 <col:20>
| |-OptimizeNoneAttr 0x561e82d51788 <col:30>
| `-WarnUnusedResultAttr 0x561e82d517b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x561e82d518e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x561e82d517f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561e82d51990 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x561e82d51a90 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x561e82d51a00 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d51b38 <col:20>
| `-OptimizeNoneAttr 0x561e82d51b90 <col:30>
|-CXXMethodDecl 0x561e82d51c58 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x561e82d51bc8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561e82d51d00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x561e82d51e00 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x561e82d51d70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x561e82d51ea8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x561e82d51fa8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x561e82d51f18 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d52050 <col:20>
| `-OptimizeNoneAttr 0x561e82d520a8 <col:30>
|-CXXMethodDecl 0x561e82d52238 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x561e82d520e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x561e82d52160 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x561e82d6a7a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x561e82d522e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x561e82d524e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561e82d52360 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x561e82d523d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d526f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x561e82d525a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561e82d52620 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d52908 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x561e82d527b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x561e82d52838 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x561e82d6a7b8 <col:39> 'int' 0
|-CXXMethodDecl 0x561e82d529d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x561e82d52aa0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x561e82d52b68 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x561e82d52c28 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d52cf0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x561e82d52e38 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x561e82d52da8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x561e82d53008 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561e82d52ef8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x561e82d52f70 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d530d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x561e82d53198 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x561e82d53238 <col:20>
| `-OptimizeNoneAttr 0x561e82d53290 <col:30>
|-CXXMethodDecl 0x561e82d532e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x561e82d53380 <col:20>
| `-OptimizeNoneAttr 0x561e82d533d8 <col:30>
|-CXXMethodDecl 0x561e82d53428 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x561e82d534e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d535b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x561e82d53650 <col:20>
| `-OptimizeNoneAttr 0x561e82d536a8 <col:30>
|-CXXMethodDecl 0x561e82d537f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x561e82d536e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x561e82d53760 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d53948 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x561e82d538b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d53a20 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x561e82d53ae0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x561e82d53b80 <col:20>
| `-OptimizeNoneAttr 0x561e82d53bd8 <col:30>
|-CXXMethodDecl 0x561e82d53c28 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x561e82d53cc8 <col:20>
| `-OptimizeNoneAttr 0x561e82d53d20 <col:30>
|-CXXMethodDecl 0x561e82d53d70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x561e82d53e38 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x561e82d53ed8 <col:20>
| `-OptimizeNoneAttr 0x561e82d53f30 <col:30>
|-CXXMethodDecl 0x561e82d53f78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x561e82d54098 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x561e82d54208 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x561e82d54148 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x561e82d542f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x561e82d54398 <col:20>
| `-OptimizeNoneAttr 0x561e82d543f0 <col:30>
|-CXXMethodDecl 0x561e82d54440 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x561e82d54500 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x561e82d54738 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x561e82d545b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x561e82d54628 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d547e8 <col:20>
| `-OptimizeNoneAttr 0x561e82d54840 <col:30>
|-CXXMethodDecl 0x561e82d548e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x561e82d54988 <col:20>
| `-OptimizeNoneAttr 0x561e82d549e0 <col:30>
|-CXXMethodDecl 0x561e82d54a30 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x561e82d54ad0 <col:20>
| `-OptimizeNoneAttr 0x561e82d54b28 <col:30>
|-CXXMethodDecl 0x561e82d54b70 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x561e82d54c10 <col:20>
| `-OptimizeNoneAttr 0x561e82d54c68 <col:30>
|-CXXMethodDecl 0x561e82d54d68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x561e82d54ca0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x561e82d54e10 <col:20>
| `-OptimizeNoneAttr 0x561e82d54e68 <col:30>
|-CXXMethodDecl 0x561e82d55028 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x561e82d54ea0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x561e82d54f18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d550d8 <col:20>
| `-OptimizeNoneAttr 0x561e82d55130 <col:30>
|-CXXMethodDecl 0x561e82d551d8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x561e82d552f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x561e82d55418 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x561e82d554b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x561e82d554e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x561e82d55608 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x561e82d556a8 <col:20>
| `-OptimizeNoneAttr 0x561e82d55700 <col:30>
|-CXXMethodDecl 0x561e82d557a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x561e82d55848 <col:20>
| `-OptimizeNoneAttr 0x561e82d558a0 <col:30>
|-AccessSpecDecl 0x561e82d558c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x561e82d558f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x561e82d559f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x561e82d55a40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d559d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x561e82d559b0 <col:14> 'int' 48
|-CXXMethodDecl 0x561e82d55aa8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x561e82d55b48 <col:20>
| `-OptimizeNoneAttr 0x561e82d55ba0 <col:30>
|-CXXMethodDecl 0x561e82d55c18 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x561e82d55cb8 <col:20>
| `-OptimizeNoneAttr 0x561e82d55d10 <col:30>
|-CXXMethodDecl 0x561e82d55dd8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x561e82d55d48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x561e82d55f78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x561e82d56118 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x561e82d56028 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x561e82d561c0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x561e82d562c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561e82d56670 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d562a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x561e82d56280 <col:9> 'int' 0
| |-EnumConstantDecl 0x561e82d56350 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561e82d56688 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d56330 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x561e82d56310 <col:14> 'int' 1
| |-EnumConstantDecl 0x561e82d563e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561e82d566a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d563c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x561e82d563a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x561e82d56470 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561e82d566b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d56450 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x561e82d56430 <col:14> 'int' 3
| |-EnumConstantDecl 0x561e82d56500 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561e82d566d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d564e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x561e82d564c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x561e82d56590 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x561e82d566e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d56570 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x561e82d56550 <col:13> 'int' 5
| `-EnumConstantDecl 0x561e82d56620 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x561e82d56700 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d56600 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x561e82d565e0 <col:14> 'int' 6
|-CXXMethodDecl 0x561e82d56768 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x561e82d56808 <col:20>
| `-OptimizeNoneAttr 0x561e82d56860 <col:30>
|-CXXMethodDecl 0x561e82d56958 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x561e82d56898 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x561e82d56a00 <col:20>
| `-OptimizeNoneAttr 0x561e82d56a58 <col:30>
|-CXXMethodDecl 0x561e82d56ac8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x561e82d56bf0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x561e82d56d68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x561e82d56ca0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x561e82d56e30 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x561e82d56ef8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x561e82d57038 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x561e82d56fa8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x561e82d570e0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x561e82d571e0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561e82d573e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d571c0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x561e82d571a0 <col:23> 'int' 0
| |-EnumConstantDecl 0x561e82d57270 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561e82d573f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d57250 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x561e82d57230 <col:45> 'int' 4
| |-EnumConstantDecl 0x561e82d57300 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x561e82d57410 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d572e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x561e82d572c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x561e82d57390 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x561e82d57428 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d57370 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x561e82d57350 <col:47> 'int' 16
|-CXXMethodDecl 0x561e82d57488 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x561e82d575f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x561e82d57538 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x561e82d576a0 <col:20>
| `-OptimizeNoneAttr 0x561e82d576f8 <col:30>
|-CXXMethodDecl 0x561e82d57748 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x561e82d6b0d0 <col:18, col:36>
|   `-ReturnStmt 0x561e82d6b0c0 <col:20, col:33>
|     `-ImplicitCastExpr 0x561e82d6b0a8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x561e82d6b088 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x561e82d6b058 <col:27> '<bound member function type>' ->xanno 0x561e82d557a8
|           `-CXXThisExpr 0x561e82d6b048 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x561e82d57840 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x561e82d6b1e0 <col:30, col:48>
|   `-ReturnStmt 0x561e82d6b1d0 <col:32, col:45>
|     `-ImplicitCastExpr 0x561e82d6b1b8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x561e82d6b198 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x561e82d6b168 <col:39> '<bound member function type>' ->xanno 0x561e82d55608
|           `-CXXThisExpr 0x561e82d6b158 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x561e82d57928 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x561e82d6b378 <col:24, col:50>
|   `-ReturnStmt 0x561e82d6b368 <col:26, col:47>
|     `-UnaryOperator 0x561e82d6b350 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561e82d6b330 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x561e82d6b318 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561e82d6b2c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x561e82d605e8
|         |   `-CXXMemberCallExpr 0x561e82d6b2a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x561e82d6b278 <col:34> '<bound member function type>' ->xanno 0x561e82d557a8
|         |       `-CXXThisExpr 0x561e82d6b268 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x561e82d6b2f8 <col:46> 'int' 0
|-CXXMethodDecl 0x561e82d57a30 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x561e82d6b548 <col:36, col:62>
|   `-ReturnStmt 0x561e82d6b538 <col:38, col:59>
|     `-UnaryOperator 0x561e82d6b520 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561e82d6b500 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x561e82d6b4e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561e82d6b460 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x561e82d605e8
|         |   `-CXXMemberCallExpr 0x561e82d6b440 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561e82d6b410 <col:46> '<bound member function type>' ->xanno 0x561e82d55608
|         |       `-CXXThisExpr 0x561e82d6b400 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x561e82d6b490 <col:58> 'int' 0
|-CXXMethodDecl 0x561e82d57b48 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x561e82d6b6e0 <col:26, col:53>
|   `-ReturnStmt 0x561e82d6b6d0 <col:28, col:50>
|     `-UnaryOperator 0x561e82d6b6b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561e82d6b698 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x561e82d6b680 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561e82d6b630 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x561e82d608e8
|         |   `-CXXMemberCallExpr 0x561e82d6b610 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x561e82d6b5e0 <col:36> '<bound member function type>' ->xanno 0x561e82d557a8
|         |       `-CXXThisExpr 0x561e82d6b5d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x561e82d6b660 <col:49> 'int' 0
|-CXXMethodDecl 0x561e82d57c68 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x561e82d6b8b8 <col:38, col:65>
|   `-ReturnStmt 0x561e82d6b8a8 <col:40, col:62>
|     `-UnaryOperator 0x561e82d6b890 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x561e82d6b870 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x561e82d6b858 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561e82d6b7c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x561e82d608e8
|         |   `-CXXMemberCallExpr 0x561e82d6b7a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561e82d6b778 <col:48> '<bound member function type>' ->xanno 0x561e82d55608
|         |       `-CXXThisExpr 0x561e82d6b768 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x561e82d6b7f8 <col:61> 'int' 0
|-CXXMethodDecl 0x561e82d57e18 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x561e82d57d20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x561e82d6bf88 <col:34, line:463:5>
|   |-ParenExpr 0x561e82d6bdd0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x561e82d6bda0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6ba08 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6b9d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6b928 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6b910 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6b8d0 <col:23> 'int' lvalue ParmVar 0x561e82d57d20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6b8f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6b9b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6b988 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6b948 <col:33> 'int' lvalue ParmVar 0x561e82d57d20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x561e82d6b9a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x561e82d6b968 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x561e82d6ba68 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6ba48 <col:56> 'int' 0
|   |   `-CallExpr 0x561e82d6bd00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6bce8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6bcc8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6bd40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6bb58 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x561e82d6bd58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6bb88 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6bd70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6bbc0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x561e82d6bd88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6bcb0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6bc98 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6bc58 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x561e82d6bf78 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x561e82d6bf60 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x561e82d6bf40 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x561e82d6bf10 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561e82d6bec0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x561e82d605e8
|         |   `-CXXMemberCallExpr 0x561e82d6bea0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x561e82d6be70 <col:9> '<bound member function type>' ->xanno 0x561e82d55608
|         |       `-CXXThisExpr 0x561e82d6be60 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x561e82d6bf28 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x561e82d6bef0 <col:21> 'int' lvalue ParmVar 0x561e82d57d20 'i' 'int'
|-CXXMethodDecl 0x561e82d58068 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x561e82d57ed8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x561e82d57f50 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x561e82d6c618 <col:40, line:472:5>
|   |-ParenExpr 0x561e82d6c430 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x561e82d6c400 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6c0e0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6c0b0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6c000 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6bfe8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6bfa8 <col:23> 'int' lvalue ParmVar 0x561e82d57ed8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6bfc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6c090 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6c060 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6c020 <col:33> 'int' lvalue ParmVar 0x561e82d57ed8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x561e82d6c078 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x561e82d6c040 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x561e82d6c140 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6c120 <col:56> 'int' 0
|   |   `-CallExpr 0x561e82d6c360 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6c348 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6c328 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6c3a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6c1b0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x561e82d6c3b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6c1e0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6c3d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6c218 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x561e82d6c3e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6c310 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6c2f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6c2b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x561e82d6c5f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x561e82d6c5a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x561e82d6c570 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x561e82d6c520 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x561e82d605e8
|     | |   `-CXXMemberCallExpr 0x561e82d6c500 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x561e82d6c4d0 <col:2> '<bound member function type>' ->xanno 0x561e82d557a8
|     | |       `-CXXThisExpr 0x561e82d6c4c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x561e82d6c588 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x561e82d6c550 <col:14> 'int' lvalue ParmVar 0x561e82d57ed8 'i' 'int'
|     `-ImplicitCastExpr 0x561e82d6c5e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d6c5c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x561e82d57f50 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x561e82d58228 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x561e82d58130 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561e82d6cd98 <col:36, line:485:5>
|   |-ParenExpr 0x561e82d6cb00 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6cad0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6c7b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6c780 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6c690 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6c678 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6c638 <col:23> 'int' lvalue ParmVar 0x561e82d58130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6c658 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6c760 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6c748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6c6b0 <col:33> 'int' lvalue ParmVar 0x561e82d58130 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6c728 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6c710 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6c6d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6c6f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561e82d6c810 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6c7f0 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6ca30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6ca18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6c9f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6ca70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6c880 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561e82d6ca88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6c8b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6caa0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6c8f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x561e82d6cab8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6c9e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6c9c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6c988 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x561e82d6cd88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x561e82d6cd70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x561e82d6cd58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561e82d6cd28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x561e82d6ccc8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561e82d6cc98 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561e82d6cc10 <col:61, col:70> 'char const[48]' lvalue ->c 0x561e82d604c0
|             |   `-CXXMemberCallExpr 0x561e82d6cbf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561e82d6cbc0 <col:61> '<bound member function type>' ->xanno 0x561e82d55608
|             |       `-CXXThisExpr 0x561e82d6cbb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561e82d6ccb0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561e82d6cc40 <col:74> 'int' lvalue ParmVar 0x561e82d58130 'i' 'int'
|-CXXMethodDecl 0x561e82d58478 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x561e82d582e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561e82d58360 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x561e82d6d4e8 <col:42, line:500:5>
|   |-ParenExpr 0x561e82d6d280 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6d250 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6cf30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6cf00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6ce10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6cdf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6cdb8 <col:23> 'int' lvalue ParmVar 0x561e82d582e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6cdd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6cee0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6cec8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6ce30 <col:33> 'int' lvalue ParmVar 0x561e82d582e8 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6cea8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6ce90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6ce50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6ce70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561e82d6cf90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6cf70 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6d1b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6d198 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6d178 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6d1f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6d000 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561e82d6d208 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6d038 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6d220 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6d070 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x561e82d6d238 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6d160 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6d148 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6d108 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x561e82d6d4c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x561e82d6d478 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561e82d6d448 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x561e82d6d3f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561e82d6d3c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561e82d6d370 <col:48, col:57> 'char [48]' lvalue ->c 0x561e82d604c0
|     |     |   `-CXXMemberCallExpr 0x561e82d6d350 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561e82d6d320 <col:48> '<bound member function type>' ->xanno 0x561e82d557a8
|     |     |       `-CXXThisExpr 0x561e82d6d310 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561e82d6d3d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561e82d6d3a0 <col:61> 'int' lvalue ParmVar 0x561e82d582e8 'i' 'int'
|     `-ImplicitCastExpr 0x561e82d6d4b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d6d490 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x561e82d58360 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x561e82d58638 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x561e82d58540 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x561e82d6dc48 <col:35, line:513:5>
|   |-ParenExpr 0x561e82d6d958 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6d928 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6d680 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6d650 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6d560 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6d548 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6d508 <col:23> 'int' lvalue ParmVar 0x561e82d58540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6d528 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6d630 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6d618 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6d580 <col:33> 'int' lvalue ParmVar 0x561e82d58540 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6d5f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6d5e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6d5a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6d5c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561e82d6d6e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6d6c0 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6d888 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6d870 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6d850 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6d8c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6d750 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561e82d6d8e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6d788 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6d8f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6d7c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x561e82d6d910 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6d838 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6d820 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6d7e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x561e82d6dc38 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x561e82d6dc20 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x561e82d6dc08 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561e82d6dbd8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x561e82d6db50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x561e82d6db20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561e82d6dad0 <col:60, col:69> 'char const[48]' lvalue ->c 0x561e82d604c0
|             |   `-CXXMemberCallExpr 0x561e82d6dab0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561e82d6da80 <col:60> '<bound member function type>' ->xanno 0x561e82d55608
|             |       `-CXXThisExpr 0x561e82d6da70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561e82d6db38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561e82d6db00 <col:73> 'int' lvalue ParmVar 0x561e82d58540 'i' 'int'
|-CXXMethodDecl 0x561e82d58888 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x561e82d586f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561e82d58770 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x561e82d6e368 <col:41, line:528:5>
|   |-ParenExpr 0x561e82d6e0f0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6e0c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6dde0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6ddb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6dcc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6dca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6dc68 <col:23> 'int' lvalue ParmVar 0x561e82d586f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6dc88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6dd90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6dd78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6dce0 <col:33> 'int' lvalue ParmVar 0x561e82d586f8 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6dd58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6dd40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6dd00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6dd20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x561e82d6de40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6de20 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6e020 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6e008 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6dfe8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6e060 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6deb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x561e82d6e078 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6dee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6e090 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6df20 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x561e82d6e0a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6dfd0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6dfb8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6df78 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x561e82d6e348 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x561e82d6e2f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561e82d6e2c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x561e82d6e270 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561e82d6e230 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561e82d6e1e0 <col:47, col:56> 'char [48]' lvalue ->c 0x561e82d604c0
|     |     |   `-CXXMemberCallExpr 0x561e82d6e1c0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561e82d6e190 <col:47> '<bound member function type>' ->xanno 0x561e82d557a8
|     |     |       `-CXXThisExpr 0x561e82d6e180 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561e82d6e248 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561e82d6e210 <col:60> 'int' lvalue ParmVar 0x561e82d586f8 'i' 'int'
|     `-ImplicitCastExpr 0x561e82d6e330 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d6e310 <col:65> 'int16_t':'short' lvalue ParmVar 0x561e82d58770 'x' 'int16_t':'short'
|-CXXMethodDecl 0x561e82d58a48 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x561e82d58950 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561e82d6ea38 <col:36, line:541:5>
|   |-ParenExpr 0x561e82d6e7d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6e7a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6e500 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6e4d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6e3e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6e3c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6e388 <col:23> 'int' lvalue ParmVar 0x561e82d58950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6e3a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6e4b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6e498 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6e400 <col:33> 'int' lvalue ParmVar 0x561e82d58950 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6e478 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6e460 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6e420 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6e440 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561e82d6e560 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6e540 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6e708 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6e6f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6e6d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6e748 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6e5d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561e82d6e760 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6e608 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6e778 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6e640 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x561e82d6e790 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6e6b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6e6a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6e660 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x561e82d6ea28 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x561e82d6ea10 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x561e82d6e9f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561e82d6e9c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x561e82d6e970 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561e82d6e940 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561e82d6e8f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x561e82d604c0
|             |   `-CXXMemberCallExpr 0x561e82d6e8d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561e82d6e8a0 <col:61> '<bound member function type>' ->xanno 0x561e82d55608
|             |       `-CXXThisExpr 0x561e82d6e890 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561e82d6e958 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561e82d6e920 <col:74> 'int' lvalue ParmVar 0x561e82d58950 'i' 'int'
|-CXXMethodDecl 0x561e82d58c18 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x561e82d58b08 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x561e82d58b80 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x561e82d58cc8 <col:20>
| `-OptimizeNoneAttr 0x561e82d58d20 <col:30>
|-CXXMethodDecl 0x561e82d58e58 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x561e82d58d60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x561e82d6f108 <col:35, line:562:5>
|   |-ParenExpr 0x561e82d6eea8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6ee78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6ebd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6eba0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6eab0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6ea98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6ea58 <col:23> 'int' lvalue ParmVar 0x561e82d58d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6ea78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6eb80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6eb68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6ead0 <col:33> 'int' lvalue ParmVar 0x561e82d58d60 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6eb48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6eb30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6eaf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6eb10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561e82d6ec30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6ec10 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6edd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6edc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6eda0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6ee18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6eca0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561e82d6ee30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6ecd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6ee48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6ed10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x561e82d6ee60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6ed88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6ed70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6ed30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x561e82d6f0f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x561e82d6f0e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x561e82d6f0c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561e82d6f098 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x561e82d6f040 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x561e82d6f010 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561e82d6efc0 <col:60, col:69> 'char const[48]' lvalue ->c 0x561e82d604c0
|             |   `-CXXMemberCallExpr 0x561e82d6efa0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561e82d6ef70 <col:60> '<bound member function type>' ->xanno 0x561e82d55608
|             |       `-CXXThisExpr 0x561e82d6ef60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561e82d6f028 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561e82d6eff0 <col:73> 'int' lvalue ParmVar 0x561e82d58d60 'i' 'int'
|-CXXMethodDecl 0x561e82d59068 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x561e82d58f18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561e82d58f90 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x561e82d6f7e8 <col:41, line:577:5>
|   |-ParenExpr 0x561e82d6f578 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6f548 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6f2a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6f270 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6f180 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6f168 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6f128 <col:23> 'int' lvalue ParmVar 0x561e82d58f18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6f148 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6f250 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6f238 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6f1a0 <col:33> 'int' lvalue ParmVar 0x561e82d58f18 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6f218 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6f200 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6f1c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6f1e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x561e82d6f300 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6f2e0 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6f4a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6f490 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6f470 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6f4e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6f370 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x561e82d6f500 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6f3a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6f518 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6f3e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x561e82d6f530 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6f458 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6f440 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6f400 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x561e82d6f7c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x561e82d6f778 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561e82d6f748 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x561e82d6f6e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561e82d6f6b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561e82d6f668 <col:47, col:56> 'char [48]' lvalue ->c 0x561e82d604c0
|     |     |   `-CXXMemberCallExpr 0x561e82d6f648 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561e82d6f618 <col:47> '<bound member function type>' ->xanno 0x561e82d557a8
|     |     |       `-CXXThisExpr 0x561e82d6f608 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561e82d6f6d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561e82d6f698 <col:60> 'int' lvalue ParmVar 0x561e82d58f18 'i' 'int'
|     `-ImplicitCastExpr 0x561e82d6f7b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d6f790 <col:65> 'int32_t':'int' lvalue ParmVar 0x561e82d58f90 'x' 'int32_t':'int'
|-CXXMethodDecl 0x561e82d59228 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x561e82d59130 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x561e82d6ff18 <col:36, line:591:5>
|   |-ParenExpr 0x561e82d6fc58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d6fc28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d6f980 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d6f950 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6f860 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6f848 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6f808 <col:23> 'int' lvalue ParmVar 0x561e82d59130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6f828 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d6f930 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d6f918 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6f880 <col:33> 'int' lvalue ParmVar 0x561e82d59130 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d6f8f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d6f8e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6f8a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6f8c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x561e82d6f9e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d6f9c0 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d6fb88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d6fb70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d6fb50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d6fbc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6fa50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x561e82d6fbe0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d6fa88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d6fbf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d6fac0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x561e82d6fc10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d6fb38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d6fb20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d6fae0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x561e82d6ff08 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x561e82d6fef0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x561e82d6fed8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561e82d6fea8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x561e82d6fe20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x561e82d6fdf0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561e82d6fda0 <col:61, col:70> 'char const[48]' lvalue ->c 0x561e82d604c0
|             |   `-CXXMemberCallExpr 0x561e82d6fd80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561e82d6fd50 <col:61> '<bound member function type>' ->xanno 0x561e82d55608
|             |       `-CXXThisExpr 0x561e82d6fd40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561e82d6fe08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561e82d6fdd0 <col:74> 'int' lvalue ParmVar 0x561e82d59130 'i' 'int'
|-CXXMethodDecl 0x561e82d59478 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x561e82d592e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561e82d59360 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x561e82d705f8 <col:42, line:606:5>
|   |-ParenExpr 0x561e82d70388 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x561e82d70358 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d700b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d70080 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d6ff90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d6ff78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d6ff38 <col:23> 'int' lvalue ParmVar 0x561e82d592e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d6ff58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d70060 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x561e82d70048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d6ffb0 <col:33> 'int' lvalue ParmVar 0x561e82d592e8 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d70028 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d70010 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d6ffd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x561e82d6fff0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x561e82d70110 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d700f0 <col:60> 'int' 0
|   |   `-CallExpr 0x561e82d702b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x561e82d702a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d70280 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d702f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d70180 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x561e82d70310 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d701b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d70328 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d701f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x561e82d70340 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d70268 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d70250 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d70210 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x561e82d705d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x561e82d70588 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561e82d70558 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x561e82d704f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561e82d704c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561e82d70478 <col:48, col:57> 'char [48]' lvalue ->c 0x561e82d604c0
|     |     |   `-CXXMemberCallExpr 0x561e82d70458 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561e82d70428 <col:48> '<bound member function type>' ->xanno 0x561e82d557a8
|     |     |       `-CXXThisExpr 0x561e82d70418 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561e82d704e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561e82d704a8 <col:61> 'int' lvalue ParmVar 0x561e82d592e8 'i' 'int'
|     `-ImplicitCastExpr 0x561e82d705c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x561e82d705a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x561e82d59360 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x561e82d59610 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x561e82d59540 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x561e82d70e68 <col:33, line:620:5>
|   |-ParenExpr 0x561e82d70be0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x561e82d70bb0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d70800 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d707d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d70670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d70658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d70618 <col:23> 'int' lvalue ParmVar 0x561e82d59540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d70638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d707b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x561e82d70798 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d70690 <col:33> 'int' lvalue ParmVar 0x561e82d59540 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d70778 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d70760 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d706b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x561e82d70738 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x561e82d70720 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x561e82d706e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x561e82d70860 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d70840 <col:79> 'int' 0
|   |   `-CallExpr 0x561e82d70b10 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x561e82d70af8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d70ad8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d70b50 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d70948 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x561e82d70b68 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d70990 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d70b80 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d709c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x561e82d70b98 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d70ac0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d70aa8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d70a68 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x561e82d70e58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x561e82d70e40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x561e82d70e28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x561e82d70df8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x561e82d70d70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x561e82d70d40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x561e82d70cf0 <col:67, col:76> 'char const[48]' lvalue ->c 0x561e82d604c0
|             |   `-CXXMemberCallExpr 0x561e82d70cd0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x561e82d70ca0 <col:67> '<bound member function type>' ->xanno 0x561e82d55608
|             |       `-CXXThisExpr 0x561e82d70c90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x561e82d70d58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x561e82d70d20 <col:80> 'int' lvalue ParmVar 0x561e82d59540 'i' 'int'
|-CXXMethodDecl 0x561e82d59828 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x561e82d596d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x561e82d59750 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x561e82d71690 <col:45, line:635:5>
|   |-ParenExpr 0x561e82d713d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x561e82d713a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x561e82d71070 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x561e82d71040 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x561e82d70ee0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x561e82d70ec8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x561e82d70e88 <col:23> 'int' lvalue ParmVar 0x561e82d596d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x561e82d70ea8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x561e82d71020 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x561e82d71008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x561e82d70f00 <col:33> 'int' lvalue ParmVar 0x561e82d596d0 'i' 'int'
|   |   |     `-BinaryOperator 0x561e82d70fe8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x561e82d70fd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x561e82d70f20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x561e82d559f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x561e82d70fa8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x561e82d70f90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x561e82d70f58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x561e82d710d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x561e82d710b0 <col:79> 'int' 0
|   |   `-CallExpr 0x561e82d71308 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x561e82d712f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561e82d712d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x561e828c1f90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x561e82d71348 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d71140 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x561e82d71360 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x561e82d71188 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x561e82d71378 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x561e82d711c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x561e82d71390 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x561e82d712b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x561e82d712a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x561e82d71258 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x561e82d71670 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x561e82d715d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x561e82d715a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x561e82d71548 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x561e82d71518 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x561e82d714c8 <col:54, col:63> 'char [48]' lvalue ->c 0x561e82d604c0
|     |     |   `-CXXMemberCallExpr 0x561e82d714a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x561e82d71478 <col:54> '<bound member function type>' ->xanno 0x561e82d557a8
|     |     |       `-CXXThisExpr 0x561e82d71468 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x561e82d71530 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x561e82d714f8 <col:67> 'int' lvalue ParmVar 0x561e82d596d0 'i' 'int'
|     `-CXXConstCastExpr 0x561e82d71640 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x561e82d71628 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x561e82d715f0 <col:91> 'const void *' lvalue ParmVar 0x561e82d59750 'x' 'const void *'
|-CXXMethodDecl 0x561e82d598f8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x561e82d71718 <col:34, line:640:5>
|   `-ReturnStmt 0x561e82d71708 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x561e82d716f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x561e82d716c0 <col:16> 'Packet *' lvalue ->_data_packet 0x561e82d61078
|         `-CXXThisExpr 0x561e82d716b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x561e82d59a38 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x561e82d599a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x561e82d6a7d8 <col:46> 'bool' true
|-CXXMethodDecl 0x561e82d59bb8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x561e82d59af0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x561e82d59c60 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x561e82d5a410 <line:660:22> "" ""
| |-EnumConstantDecl 0x561e82d59d60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a480 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d59d40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x561e82d59d20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x561e82d4eec0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x561e82d59df0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a498 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d59dd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x561e82d59db0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x561e82d4ef50 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x561e82d59e80 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a4b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d59e60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x561e82d59e40 <col:21> 'int' 0
| |-EnumConstantDecl 0x561e82d59f10 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a4c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d59ef0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x561e82d59ed0 <col:19> 'int' 16
| |-EnumConstantDecl 0x561e82d59fa0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a4e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d59f80 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x561e82d59f60 <col:21> 'int' 16
| |-EnumConstantDecl 0x561e82d5a030 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a4f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d5a010 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x561e82d59ff0 <col:19> 'int' 32
| |-EnumConstantDecl 0x561e82d5a0c0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a510 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d5a0a0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x561e82d5a080 <col:19> 'int' EnumConstant 0x561e82d59f10 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x561e82d5a150 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a528 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d5a130 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x561e82d5a110 <col:19> 'int' EnumConstant 0x561e82d5a030 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x561e82d5a220 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a540 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d5a200 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x561e82d5a1e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x561e82d5a1a0 <col:23> 'int' EnumConstant 0x561e82d5a150 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x561e82d5a1c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x561e82d5a2f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x561e82d5a558 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x561e82d5a2d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x561e82d5a2b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x561e82d5a270 <col:23> 'int' EnumConstant 0x561e82d5a150 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x561e82d5a290 <col:40> 'int' 4
| `-EnumConstantDecl 0x561e82d5a3c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x561e82d5a570 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x561e82d5a3a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x561e82d5a380 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x561e82d5a340 <col:23> 'int' EnumConstant 0x561e82d5a150 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x561e82d5a360 <col:40> 'int' 8
|-CXXMethodDecl 0x561e82d5a5b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x561e82d5a650 <col:68> "" ""
|-CXXMethodDecl 0x561e82d5a6e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x561e82d5a788 <col:45> "" ""
|-CXXMethodDecl 0x561e82d5a820 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x561e82d5a8c0 <col:57> "" ""
|-CXXMethodDecl 0x561e82d5a958 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x561e82d5a9f8 <col:45> "" ""
|-CXXMethodDecl 0x561e82d5aa90 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x561e82d5ab30 <col:57> "" ""
|-CXXMethodDecl 0x561e82d5abc0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x561e82d5ac60 <col:51> "" ""
|-CXXMethodDecl 0x561e82d5acf0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x561e82d5ad90 <col:63> "" ""
|-CXXMethodDecl 0x561e82d5ae20 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x561e82d5aec0 <col:53> "" ""
|-CXXMethodDecl 0x561e82d5af50 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x561e82d5aff0 <col:65> "" ""
|-CXXMethodDecl 0x561e82d5b108 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x561e82d5b078 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x561e82d5b1b0 <col:61> "" ""
|-CXXMethodDecl 0x561e82d5b348 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x561e82d5b238 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x561e82d5b2b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x561e82d5b3f8 <col:67> "" ""
|-CXXMethodDecl 0x561e82d5b510 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x561e82d5b480 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561e82d5b5b8 <col:63> "" ""
|-CXXMethodDecl 0x561e82d5b750 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x561e82d5b640 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561e82d5b6b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x561e82d5b800 <col:69> "" ""
|-CXXMethodDecl 0x561e82d5b918 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x561e82d5b888 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561e82d5b9c0 <col:63> "" ""
|-CXXMethodDecl 0x561e82d5e098 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561e82d5df88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561e82d5e000 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561e82d5e148 <col:69> "" ""
|-CXXMethodDecl 0x561e82d5e260 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x561e82d5e1d0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x561e82d5e308 <col:62> "" ""
|-CXXMethodDecl 0x561e82d5e4a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x561e82d5e390 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561e82d5e408 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x561e82d5e550 <col:68> "" ""
|-CXXMethodDecl 0x561e82d5e668 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x561e82d5e5d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x561e82d5e710 <col:63> "" ""
|-CXXMethodDecl 0x561e82d5e8a8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x561e82d5e798 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x561e82d5e810 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x561e82d5e958 <col:69> "" ""
|-CXXMethodDecl 0x561e82d5e9e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x561e82d5ea88 <col:64> "" ""
|-CXXMethodDecl 0x561e82d5eb18 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x561e82d5ebb8 <col:52> "" ""
|-CXXMethodDecl 0x561e82d5ec48 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x561e82d5ece8 <col:67> "" ""
|-CXXMethodDecl 0x561e82d5ed78 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x561e82d5ee18 <col:55> "" ""
|-CXXMethodDecl 0x561e82d5ef30 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x561e82d5eea0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561e82d5efd8 <col:58> "" ""
|-CXXMethodDecl 0x561e82d5f170 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x561e82d5f060 <col:33> col:36 'int'
| |-ParmVarDecl 0x561e82d5f0d8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x561e82d5f220 <col:62> "" ""
|-CXXMethodDecl 0x561e82d5f338 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x561e82d5f2a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561e82d5f3e0 <col:58> "" ""
|-CXXMethodDecl 0x561e82d5f578 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x561e82d5f468 <col:33> col:36 'int'
| |-ParmVarDecl 0x561e82d5f4e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x561e82d5f628 <col:62> "" ""
|-CXXMethodDecl 0x561e82d5f740 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x561e82d5f6b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x561e82d5f7e8 <col:60> "" ""
|-CXXMethodDecl 0x561e82d5f980 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x561e82d5f870 <col:34> col:37 'int'
| |-ParmVarDecl 0x561e82d5f8e8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x561e82d5fa30 <col:64> "" ""
|-CXXMethodDecl 0x561e82d5fb48 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x561e82d5fab8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x561e82d5fbf0 <col:58> "" ""
|-CXXMethodDecl 0x561e82d5fd88 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x561e82d5fc78 <col:33> col:36 'int'
| |-ParmVarDecl 0x561e82d5fcf0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x561e82d5fe38 <col:62> "" ""
|-CXXMethodDecl 0x561e82d5ff50 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x561e82d5fec0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x561e82d5fff8 <col:59> "" ""
|-CXXMethodDecl 0x561e82d60190 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x561e82d60080 <col:33> col:36 'int'
| |-ParmVarDecl 0x561e82d600f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x561e82d60240 <col:63> "" ""
|-AccessSpecDecl 0x561e82d602b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x561e82d602d8 prev 0x561e82d554e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561e82d603d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x561e82d604c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x561e82d605e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x561e82d60768 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x561e82d608e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x561e82d60a68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x561e82d71898 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x561e82d72108 <col:11>
| |-CXXDestructorDecl 0x561e82d71970 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x561e82d71aa8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x561e82d71aa8
| | `-ParmVarDecl 0x561e82d71bb8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x561e82d71c58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561e82d71c58
| | `-ParmVarDecl 0x561e82d71d68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x561e82d74b28 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x561e82d74c38 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x561e82d74eb8 <col:11>
| |   `-ReturnStmt 0x561e82d74ea8 <col:11>
| |     `-UnaryOperator 0x561e82d74e90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x561e82d74e80 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x561e82d74ca8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x561e82d74ca8
|   `-ParmVarDecl 0x561e82d74db8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x561e82d60ad0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x561e82d60be8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x561e82d60c88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x561e82d60cf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x561e82d60d58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x561e82d60dc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x561e82d60e20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x561e82d60ee0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x561e82d60f40 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x561e82d60fa0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x561e82d717a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x561e82d60c88 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x561e82d72118 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x561e82d72170 <col:12>
| |-CXXConstructorDecl 0x561e82d71dd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x561e82d71dd8
| | `-ParmVarDecl 0x561e82d71ee8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x561e82d71f88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x561e82d71f88
| | `-ParmVarDecl 0x561e82d72098 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x561e82d74210 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x561e82d61018 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x561e82d61078 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x561e82d610e0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x561e82d61148 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x561e82d611b0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x561e82d61218 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x561e82d61278 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x561e82d612d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x561e82d61340 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x561e82d613c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x561e82d61018 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x561e82d71740 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x561e82d61278 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x561e82d72180 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x561e82d721e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x561e82d61568 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x561e82d614a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x561e82d61660 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x561e82d61848 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x561e82d61750 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x561e82d61b18 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x561e82d61900 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x561e82d61978 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x561e82d619f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d61d38 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x561e82d61be8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x561e82d61c60 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x561e82d6a318 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x561e82d61df8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x561e82d61e70 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x561e82d61ee8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x561e82d6a470 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x561e82d6a3e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x561e82d6a5b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x561e82d6a528 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x561e82d6a6b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Timestamp>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Timestamp * _ptr
        24 |   class Timestamp _slot
        24 |     union Timestamp::rep_t _t
        24 |       int64_t x
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class TimestampArg
         0 |   _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class Timestamp>
         0 |   class TimestampArg (base)
         0 |     _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82d4d6d0 <../dummy_inc/click/timestamp.hh:1525:1, line:1534:1> line:1525:7 referenced class TimestampArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82d4d7e8 <col:1, col:7> col:7 implicit referenced class TimestampArg
|-AccessSpecDecl 0x561e82d4d878 <col:22, col:28> col:22 public
|-CXXConstructorDecl 0x561e82d4d988 <line:1526:5, line:1528:5> line:1526:5 used TimestampArg 'void (bool)'
| |-ParmVarDecl 0x561e82d4d8b0 <col:18, col:35> col:23 used is_signed 'bool' cinit
| | `-CXXBoolLiteralExpr 0x561e82d4dd48 <col:35> 'bool' false
| |-CXXCtorInitializer Field 0x561e82d4dce0 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x561e82d4ddb8 <line:1527:21> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x561e82d4dd78 <col:21> 'bool' lvalue ParmVar 0x561e82d4d8b0 'is_signed' 'bool'
| `-CompoundStmt 0x561e82d4de00 <col:32, line:1528:5>
|-CXXMethodDecl 0x561e82d4dc18 <line:1529:5, line:1532:5> line:1529:10 used parse 'bool (const String &, Timestamp &, const ArgContext &)'
| |-ParmVarDecl 0x561e82d4da48 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x561e82d4dac0 <col:35, col:46> col:46 used value 'Timestamp &'
| |-ParmVarDecl 0x561e82d4db38 <col:53, col:78> col:71 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x561e82d4dd58 <col:78> 'const ArgContext' lvalue Var 0x561e82d4d3c8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x561e82d4e010 <col:90, line:1532:5>
|   |-CStyleCastExpr 0x561e82d4de40 <line:1530:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x561e82d4de10 <col:16> 'const ArgContext' lvalue ParmVar 0x561e82d4db38 'args' 'const ArgContext &'
|   `-ReturnStmt 0x561e82d4e000 <line:1531:9, col:46>
|     `-CallExpr 0x561e82d4dfb0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x561e82d4df98 <col:16> 'bool (*)(const String &, Timestamp *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561e82d4df48 <col:16> 'bool (const String &, Timestamp *, bool)' lvalue Function 0x561e82d4d618 'cp_time' 'bool (const String &, Timestamp *, bool)'
|       |-DeclRefExpr 0x561e82d4deb0 <col:24> 'const String' lvalue ParmVar 0x561e82d4da48 'str' 'const String &'
|       |-UnaryOperator 0x561e82d4def0 <col:29, col:30> 'Timestamp *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x561e82d4ded0 <col:30> 'Timestamp' lvalue ParmVar 0x561e82d4dac0 'value' 'Timestamp &'
|       `-ImplicitCastExpr 0x561e82d4dfe8 <col:37> 'bool' <LValueToRValue>
|         `-MemberExpr 0x561e82d4df18 <col:37> 'bool' lvalue ->is_signed 0x561e82d4dce0
|           `-CXXThisExpr 0x561e82d4df08 <col:37> 'TimestampArg *' implicit this
|-FieldDecl 0x561e82d4dce0 <line:1533:5, col:10> col:10 referenced is_signed 'bool'
|-CXXDestructorDecl 0x561e82ea3870 <line:1525:7> col:7 implicit ~TimestampArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561e82ea39a8 <col:7> col:7 implicit constexpr TimestampArg 'void (const TimestampArg &)' inline default trivial noexcept-unevaluated 0x561e82ea39a8
| `-ParmVarDecl 0x561e82ea3ab8 <col:7> col:7 'const TimestampArg &'
`-CXXConstructorDecl 0x561e82ea3b58 <col:7> col:7 implicit used constexpr TimestampArg 'void (TimestampArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x561e82ea3c68 <col:7> col:7 used 'TimestampArg &&'
  |-CXXCtorInitializer Field 0x561e82d4dce0 'is_signed' 'bool'
  | `-ImplicitCastExpr 0x561e82ea4a30 <col:7> 'bool' <LValueToRValue>
  |   `-MemberExpr 0x561e82ea4a00 <col:7> 'bool' xvalue .is_signed 0x561e82d4dce0
  |     `-CXXStaticCastExpr 0x561e82ea49d0 <col:7> 'TimestampArg' xvalue static_cast<class TimestampArg &&> <NoOp>
  |       `-DeclRefExpr 0x561e82ea49a0 <col:7> 'TimestampArg' lvalue ParmVar 0x561e82ea3c68 '' 'TimestampArg &&'
  `-CompoundStmt 0x561e82ea4a78 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.TimestampArg = type { i8 }
  NonVirtualBaseLLVMType:%class.TimestampArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561e82d4e058 <../dummy_inc/click/timestamp.hh:1536:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'TimestampArg'
|-TemplateArgument type 'Timestamp'
|-CXXRecordDecl 0x561e82d4e2b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x561e82ea3798 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x561e82ea4070 <col:19> 'TimestampArg' 'void (bool)'
| |   `-CXXDefaultArgExpr 0x561e82ea4050 <<invalid sloc>> 'bool'
| `-CompoundStmt 0x561e82ea40e0 <col:19>
|-CXXConstructorDecl 0x561e82ea3cd8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Timestamp> &)' inline default trivial noexcept-unevaluated 0x561e82ea3cd8
| `-ParmVarDecl 0x561e82ea3de8 <col:19> col:19 'const DefaultArg<Timestamp> &'
|-CXXConstructorDecl 0x561e82ea3e88 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Timestamp> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82ea3f98 <col:19> col:19 used 'DefaultArg<Timestamp> &&'
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x561e82ea4a88 <col:19> 'TimestampArg' 'void (TimestampArg &&) noexcept'
| |   `-ImplicitCastExpr 0x561e82ea4980 <col:19> 'TimestampArg' xvalue <UncheckedDerivedToBase (TimestampArg)>
| |     `-CXXStaticCastExpr 0x561e82ea4950 <col:19> 'DefaultArg<Timestamp>' xvalue static_cast<struct DefaultArg<class Timestamp> &&> <NoOp>
| |       `-DeclRefExpr 0x561e82ea4920 <col:19> 'DefaultArg<Timestamp>' lvalue ParmVar 0x561e82ea3f98 '' 'DefaultArg<Timestamp> &&'
| `-CompoundStmt 0x561e82ea4af8 <col:19>
`-CXXDestructorDecl 0x561e82ea4120 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x561e82e51640 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x561e82e51758 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x561e82e517e8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x561e82e51a28 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x561e82e51820 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x561e82e518a0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x561e82e51918 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x561e82e51c40 <col:81> 'const ArgContext' lvalue Var 0x561e82e38858 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x561e82e51b80 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x561e82e51af0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x561e82e51d98 <col:35, line:1261:5>
|   `-ReturnStmt 0x561e82e51d88 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x561e82e51d70 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x561e82e51d40 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x561e82e51d28 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x561e82e51d00 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x561e82e51ce0 <col:16, col:24> 'String' (CXXTemporary 0x561e82e51ce0)
|               `-CXXConstructExpr 0x561e82e51ca8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x561e82e51c90 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x561e82e51c70 <col:23> 'bool' lvalue ParmVar 0x561e82e51af0 'x' 'bool'
|-CXXConstructorDecl 0x561e82eb1788 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x561e82eb1860 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561e82eb1998 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x561e82eb1998
| `-ParmVarDecl 0x561e82eb1aa8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x561e82eb1b48 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x561e82eb1c58 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x561e82eb28b0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x561e82e51dd8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x561e82e52038 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x561e82eb1698 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x561e82eb1cc8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x561e82eb1cc8
| `-ParmVarDecl 0x561e82eb1dd8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x561e82eb1e78 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x561e82eb1f88 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x561e82eb28c0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x561e82eb2890 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x561e82eb2860 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x561e82eb2830 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x561e82eb1f88 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x561e82eb2930 <col:19>
`-CXXDestructorDecl 0x561e82eb2028 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
